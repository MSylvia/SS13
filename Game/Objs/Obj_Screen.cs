// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Screen : Obj {

		public Ent_Static master = null;
		public int gun_click_time = -100;
		public bool globalscreen = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.unacidable = true;
			this.icon = "icons/mob/screen1.dmi";
			this.layer = 20;
		}

		public Obj_Screen ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: screen_objects.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			Mob H = null;
			Mob L = null;
			Mob C = null;
			Mob C2 = null;
			ByTable nicename = null;
			ByTable tankcheck = null;
			string breathes = null;
			ByTable contents = null;
			Mob H2 = null;
			int? i = null;
			Obj_Item_Weapon_Tank t = null;
			int? best = null;
			bool bestcontents = false;
			int? i2 = null;
			Mob R = null;
			Mob R2 = null;
			Mob person = null;
			Mob AI = null;
			Mob AI2 = null;
			dynamic camera = null;
			Mob AI3 = null;
			dynamic target_name = null;
			Mob AI4 = null;
			Mob AI5 = null;
			Mob AI6 = null;
			Mob AI7 = null;
			Mob AI8 = null;
			Mob AI9 = null;
			Mob AI10 = null;
			Mob AI11 = null;
			Mob AI12 = null;
			Mob AI13 = null;
			Mob AI14 = null;
			Mob M = null;
			Mob M2 = null;
			Mob M3 = null;
			dynamic A = null;
			dynamic A2 = null;
			dynamic A3 = null;
			dynamic A4 = null;
			dynamic A5 = null;
			dynamic A6 = null;
			dynamic A7 = null;
			dynamic A8 = null;
			dynamic A9 = null;
			dynamic A10 = null;
			dynamic A11 = null;
			dynamic A12 = null;
			dynamic A13 = null;
			dynamic A14 = null;
			dynamic A15 = null;
			dynamic A16 = null;
			dynamic A17 = null;
			dynamic A18 = null;
			dynamic A19 = null;
			dynamic A20 = null;
			dynamic A21 = null;
			dynamic A22 = null;
			dynamic A23 = null;
			dynamic A24 = null;
			dynamic A25 = null;
			dynamic A26 = null;
			dynamic A27 = null;
			dynamic A28 = null;
			dynamic A29 = null;
			dynamic A30 = null;
			dynamic A31 = null;
			dynamic A32 = null;
			dynamic A33 = null;
			dynamic A34 = null;

			
			if ( !( Task13.User != null ) ) {
				return true;
			}

			switch ((string)( this.name )) {
				case "toggle":
					
					if ( Task13.User.hud_used.inventory_shown ) {
						Task13.User.hud_used.inventory_shown = false;
						Task13.User.client.screen.Remove( Task13.User.hud_used.other );
					} else {
						Task13.User.hud_used.inventory_shown = true;
						Task13.User.client.screen.Add( Task13.User.hud_used.other );
					}
					Task13.User.hud_used.hidden_inventory_update();
					break;
				case "equip":
					
					if ( Task13.User.loc is Obj_Mecha ) {
						return true;
					}

					if ( Task13.User is Mob_Living_Carbon_Human ) {
						H = Task13.User;
						H.__CallVerb("quick-equip" );
					}
					break;
				case "resist":
					
					if ( Task13.User is Mob_Living ) {
						L = Task13.User;
						((Mob_Living)L).resist();
					}
					break;
				case "mov_intent":
					
					if ( Task13.User is Mob_Living_Carbon ) {
						C = Task13.User;

						if ( Lang13.Bool( ((dynamic)C).legcuffed ) ) {
							GlobalFuncs.to_chat( C, "<span class='notice'>You are legcuffed! You cannot run until you get " + ((dynamic)C).legcuffed + " removed!</span>" );
							C.m_intent = "walk";
							((dynamic)C.hud_used.move_intent).icon_state = "walking";
							return true;
						}

						switch ((string)( Task13.User.m_intent )) {
							case "run":
								Task13.User.m_intent = "walk";
								((dynamic)Task13.User.hud_used.move_intent).icon_state = "walking";
								break;
							case "walk":
								Task13.User.m_intent = "run";
								((dynamic)Task13.User.hud_used.move_intent).icon_state = "running";
								break;
						}

						if ( Task13.User is Mob_Living_Carbon_Alien_Humanoid ) {
							Task13.User.update_icons();
						}
					}
					break;
				case "m_intent":
					
					if ( !Lang13.Bool( Task13.User.m_int ) ) {
						
						switch ((string)( Task13.User.m_intent )) {
							case "run":
								Task13.User.m_int = "13,14";
								break;
							case "walk":
								Task13.User.m_int = "14,14";
								break;
							case "face":
								Task13.User.m_int = "15,14";
								break;
						}
					} else {
						Task13.User.m_int = null;
					}
					break;
				case "walk":
					Task13.User.m_intent = "walk";
					Task13.User.m_int = "14,14";
					break;
				case "face":
					Task13.User.m_intent = "face";
					Task13.User.m_int = "15,14";
					break;
				case "run":
					Task13.User.m_intent = "run";
					Task13.User.m_int = "13,14";
					break;
				case "Reset Machine":
					Task13.User.unset_machine();
					break;
				case "internal":
					
					if ( Task13.User is Mob_Living_Carbon ) {
						C2 = Task13.User;

						if ( !Lang13.Bool( C2.stat ) && !( C2.stunned != 0 ) && !( C2.paralysis != 0 ) && !C2.restrained() ) {
							
							if ( Lang13.Bool( C2.v_internal ) ) {
								C2.v_internal = null;
								GlobalFuncs.to_chat( C2, "<span class='notice'>No longer running on internals.</span>" );

								if ( C2.internals != null ) {
									((dynamic)C2.internals).icon_state = "internal0";
								}
							} else if ( !( C2.wear_mask is Obj_Item_Clothing_Mask ) ) {
								GlobalFuncs.to_chat( C2, "<span class='notice'>You are not wearing a mask.</span>" );
								return true;
							} else {
								nicename = null;
								tankcheck = null;
								breathes = "oxygen";
								contents = new ByTable();

								if ( C2 is Mob_Living_Carbon_Human ) {
									H2 = C2;
									breathes = ((dynamic)H2).species.breath_type;
									nicename = new ByTable(new object [] { "suit", "back", "belt", "right hand", "left hand", "left pocket", "right pocket" });
									tankcheck = new ByTable(new object [] { ((dynamic)H2).s_store, C2.back, ((dynamic)H2).belt, C2.r_hand, C2.l_hand, ((dynamic)H2).l_store, ((dynamic)H2).r_store });
								} else {
									nicename = new ByTable(new object [] { "Right Hand", "Left Hand", "Back" });
									tankcheck = new ByTable(new object [] { C2.r_hand, C2.l_hand, C2.back });
								}
								i = null;
								i = 1;

								while (( i ??0) < tankcheck.len + 1) {
									
									if ( tankcheck[i] is Obj_Item_Weapon_Tank ) {
										t = tankcheck[i];

										if ( !( t.manipulated_by == null ) && t.manipulated_by != C2.real_name ) {
											contents.Add( t.air_contents.total_moles );
											i++;
											continue;
										}

										switch ((string)( breathes )) {
											case "nitrogen":
												
												if ( Lang13.Bool( t.air_contents.nitrogen ) && !Lang13.Bool( t.air_contents.oxygen ) ) {
													contents.Add( t.air_contents.nitrogen );
												} else {
													contents.Add( 0 );
												}
												break;
											case "oxygen":
												
												if ( Lang13.Bool( t.air_contents.oxygen ) && !Lang13.Bool( t.air_contents.toxins ) ) {
													contents.Add( t.air_contents.oxygen );
												} else {
													contents.Add( 0 );
												}
												break;
											case "carbon dioxide":
												
												if ( Lang13.Bool( t.air_contents.carbon_dioxide ) && !Lang13.Bool( t.air_contents.toxins ) ) {
													contents.Add( t.air_contents.carbon_dioxide );
												} else {
													contents.Add( 0 );
												}
												break;
											case "plasma":
												
												if ( Lang13.Bool( t.air_contents.toxins ) ) {
													contents.Add( t.air_contents.toxins );
												} else {
													contents.Add( 0 );
												}
												break;
										}
									} else {
										contents.Add( 0 );
									}
									i++;
								}
								best = 0;
								bestcontents = false;
								i2 = null;
								i2 = 1;

								while (( i2 ??0) < contents.len + 1) {
									
									if ( !Lang13.Bool( contents[i2] ) ) {
										
									} else if ( Convert.ToDouble( contents[i2] ) > ( bestcontents ?1:0) ) {
										best = i2;
										bestcontents = Lang13.Bool( contents[i2] );
									}
									i2++;
								}

								if ( Lang13.Bool( best ) ) {
									GlobalFuncs.to_chat( C2, "<span class='notice'>You are now running on internals from " + tankcheck[best] + " on your " + nicename[best] + ".</span>" );
									C2.v_internal = tankcheck[best];
								}

								if ( Lang13.Bool( C2.v_internal ) ) {
									
									if ( C2.internals != null ) {
										((dynamic)C2.internals).icon_state = "internal1";
									}
								} else {
									GlobalFuncs.to_chat( C2, "<span class='notice'>You don't have a" + ( breathes == "oxygen" ? "n oxygen" : String13.Concat( " ", breathes ) ) + " tank.</span>" );
								}
							}
						}
					}
					break;
				case "act_intent":
					Task13.User.__CallVerb("a-intent", "right" );
					break;
				case "help":
					Task13.User.a_intent = "help";
					((dynamic)Task13.User.hud_used.action_intent).icon_state = "intent_help";
					break;
				case "harm":
					Task13.User.a_intent = "hurt";
					((dynamic)Task13.User.hud_used.action_intent).icon_state = "intent_hurt";
					break;
				case "grab":
					Task13.User.a_intent = "grab";
					((dynamic)Task13.User.hud_used.action_intent).icon_state = "intent_grab";
					break;
				case "disarm":
					Task13.User.a_intent = "disarm";
					((dynamic)Task13.User.hud_used.action_intent).icon_state = "intent_disarm";
					break;
				case "pull":
					Task13.User.stop_pulling();
					break;
				case "throw":
					
					if ( !Lang13.Bool( Task13.User.stat ) && Task13.User.loc is Tile && !Task13.User.restrained() ) {
						((dynamic)Task13.User).toggle_throw_mode();
					}
					break;
				case "drop":
					Task13.User.drop_item_v();
					break;
				case "module":
					
					if ( Task13.User is Mob_Living_Silicon_Robot ) {
						R = Task13.User;

						if ( Lang13.Bool( ((dynamic)R).module ) ) {
							R.hud_used.toggle_show_robot_modules();
							return true;
						}
						((Mob_Living_Silicon_Robot)R).pick_module();
					}
					break;
				case "radio":
					
					if ( Task13.User is Mob_Living_Silicon ) {
						((Mob_Living_Silicon_Robot)Task13.User).radio_menu();
					}
					break;
				case "panel":
					
					if ( Task13.User is Mob_Living_Silicon ) {
						((Mob_Living_Silicon_Robot)Task13.User).installed_modules();
					}
					break;
				case "store":
					
					if ( Task13.User is Mob_Living_Silicon_Robot ) {
						R2 = Task13.User;
						((Mob_Living_Silicon_Robot)R2).uneq_active();
					}
					break;
				case "tool_slot":
					
					if ( Task13.User is Mob_Living_Silicon_Robot_Mommi ) {
						((dynamic)Task13.User).toggle_module( "tool_slot" );
					}
					break;
				case "sight_slot":
					
					if ( Task13.User is Mob_Living_Silicon_Robot ) {
						person = Task13.User;
						((Mob_Living_Silicon_Robot)person).f_sensor_mode();
						((Mob_Living_Silicon_Robot)person).update_sight_hud();
					}
					break;
				case "module1":
					
					if ( Task13.User is Mob_Living_Silicon_Robot ) {
						((dynamic)Task13.User).toggle_module( 1 );
					}
					break;
				case "module2":
					
					if ( Task13.User is Mob_Living_Silicon_Robot ) {
						((dynamic)Task13.User).toggle_module( 2 );
					}
					break;
				case "module3":
					
					if ( Task13.User is Mob_Living_Silicon_Robot ) {
						((dynamic)Task13.User).toggle_module( 3 );
					}
					break;
				case "AI Core":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI = Task13.User;
						((Mob_Living_Silicon_Ai)AI).view_core();
					}
					break;
				case "Show Camera List":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI2 = Task13.User;
						camera = Interface13.Input( AI2, "Choose which camera you want to view", "Cameras", null, ((dynamic)AI2).get_camera_list(), InputType.Null | InputType.Any );
						((Mob_Living_Silicon_Ai)AI2).ai_camera_list( camera );
					}
					break;
				case "Track With Camera":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI3 = Task13.User;
						target_name = Interface13.Input( AI3, "Choose who you want to track", "Tracking", null, ((Mob_Living_Silicon_Ai)AI3).trackable_mobs(), InputType.Null | InputType.Any );
						AI3.__CallVerb("track", target_name );
					}
					break;
				case "Toggle Camera Light":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI4 = Task13.User;
						((Mob_Living_Silicon_Ai)AI4).toggle_camera_light();
					}
					break;
				case "Show Crew Manifest":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI5 = Task13.User;
						((dynamic)AI5).ai_roster();
					}
					break;
				case "Show Alerts":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI6 = Task13.User;
						((dynamic)AI6).ai_alerts();
					}
					break;
				case "Announcement":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI7 = Task13.User;
						((Mob_Living_Silicon_Ai)AI7).announcement();
					}
					break;
				case "Call Emergency Shuttle":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI8 = Task13.User;
						((dynamic)AI8).ai_call_shuttle();
					}
					break;
				case "State Laws":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI9 = Task13.User;
						AI9.__CallVerb("State Laws" );
					}
					break;
				case "PDA - Send Message":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI10 = Task13.User;
						((Mob_Living_Silicon_Ai)AI10).cmd_send_pdamesg();
					}
					break;
				case "PDA - Show Message Log":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI11 = Task13.User;
						((Mob_Living_Silicon_Ai)AI11).cmd_show_message_log();
					}
					break;
				case "Take Image":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI12 = Task13.User;
						((Obj_Item_Device_Camera_AiCamera)((dynamic)AI12).aicamera).toggle_camera_mode();
					}
					break;
				case "View Images":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI13 = Task13.User;
						((Obj_Item_Device_Camera_AiCamera)((dynamic)AI13).aicamera).viewpictures();
					}
					break;
				case "Configure Radio":
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						AI14 = Task13.User;
						((Mob_Living_Silicon_Ai)AI14).radio_interact();
					}
					break;
				case "Allow Walking":
					
					if ( this.gun_click_time > Game13.time - 30 ) {
						return false;
					}

					if ( !( Task13.User.get_active_hand() is Obj_Item_Weapon_Gun ) ) {
						GlobalFuncs.to_chat( Task13.User, "You need your gun in your active hand to do that!" );
						return false;
					}
					Task13.User.client.AllowTargetMove();
					this.gun_click_time = Game13.time;
					break;
				case "Disallow Walking":
					
					if ( this.gun_click_time > Game13.time - 30 ) {
						return false;
					}

					if ( !( Task13.User.get_active_hand() is Obj_Item_Weapon_Gun ) ) {
						GlobalFuncs.to_chat( Task13.User, "You need your gun in your active hand to do that!" );
						return false;
					}
					Task13.User.client.AllowTargetMove();
					this.gun_click_time = Game13.time;
					break;
				case "Allow Running":
					
					if ( this.gun_click_time > Game13.time - 30 ) {
						return false;
					}

					if ( !( Task13.User.get_active_hand() is Obj_Item_Weapon_Gun ) ) {
						GlobalFuncs.to_chat( Task13.User, "You need your gun in your active hand to do that!" );
						return false;
					}
					Task13.User.client.AllowTargetRun();
					this.gun_click_time = Game13.time;
					break;
				case "Disallow Running":
					
					if ( this.gun_click_time > Game13.time - 30 ) {
						return false;
					}

					if ( !( Task13.User.get_active_hand() is Obj_Item_Weapon_Gun ) ) {
						GlobalFuncs.to_chat( Task13.User, "You need your gun in your active hand to do that!" );
						return false;
					}
					Task13.User.client.AllowTargetRun();
					this.gun_click_time = Game13.time;
					break;
				case "Allow Item Use":
					
					if ( this.gun_click_time > Game13.time - 30 ) {
						return false;
					}

					if ( !( Task13.User.get_active_hand() is Obj_Item_Weapon_Gun ) ) {
						GlobalFuncs.to_chat( Task13.User, "You need your gun in your active hand to do that!" );
						return false;
					}
					Task13.User.client.AllowTargetClick();
					this.gun_click_time = Game13.time;
					break;
				case "Disallow Item Use":
					
					if ( this.gun_click_time > Game13.time - 30 ) {
						return false;
					}

					if ( !( Task13.User.get_active_hand() is Obj_Item_Weapon_Gun ) ) {
						GlobalFuncs.to_chat( Task13.User, "You need your gun in your active hand to do that!" );
						return false;
					}
					Task13.User.client.AllowTargetClick();
					this.gun_click_time = Game13.time;
					break;
				case "Toggle Gun Mode":
					Task13.User.client.ToggleGunMode();
					break;
				case "uniform":
					
					if ( Task13.User is Mob_Living_Carbon_Monkey ) {
						M = Task13.User;

						if ( Lang13.Bool( ((dynamic)M).canWearClothes ) ) {
							
							if ( !Lang13.Bool( M.get_active_hand() ) ) {
								((Mob_Living_Carbon_Monkey)M).wearclothes( null );
							} else if ( M.get_active_hand() is Obj_Item_Clothing_Monkeyclothes ) {
								((Mob_Living_Carbon_Monkey)M).wearclothes( M.get_active_hand() );
							}
						}
					}
					break;
				case "hat":
					
					if ( Task13.User is Mob_Living_Carbon_Monkey ) {
						M2 = Task13.User;

						if ( Lang13.Bool( ((dynamic)M2).canWearHats ) ) {
							
							if ( !Lang13.Bool( M2.get_active_hand() ) ) {
								((Mob_Living_Carbon_Monkey)M2).wearhat( null );
							} else if ( M2.get_active_hand() is Obj_Item_Clothing_Head ) {
								((Mob_Living_Carbon_Monkey)M2).wearhat( M2.get_active_hand() );
							}
						}
					}
					break;
				case "glasses":
					
					if ( Task13.User is Mob_Living_Carbon_Monkey ) {
						M3 = Task13.User;

						if ( Lang13.Bool( ((dynamic)M3).canWearGlasses ) ) {
							
							if ( !Lang13.Bool( M3.get_active_hand() ) ) {
								((Mob_Living_Carbon_Monkey)M3).wearglasses( null );
							} else if ( M3.get_active_hand() is Obj_Item_Clothing_Glasses ) {
								((Mob_Living_Carbon_Monkey)M3).wearglasses( M3.get_active_hand() );
							}
						}
					}
					break;
				case "Delete Bus":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A).Adminbus_Deletion( Task13.User );
					}
					break;
				case "Delete Mobs":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A2 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A2).remove_mobs( Task13.User );
					}
					break;
				case "Spawn Clowns":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A3 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A3).spawn_mob( Task13.User, 1, 5 );
					}
					break;
				case "Spawn Carps":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A4 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A4).spawn_mob( Task13.User, 2, 5 );
					}
					break;
				case "Spawn Bears":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A5 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A5).spawn_mob( Task13.User, 3, 5 );
					}
					break;
				case "Spawn Trees":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A6 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A6).spawn_mob( Task13.User, 4, 5 );
					}
					break;
				case "Spawn Spiders":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A7 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A7).spawn_mob( Task13.User, 5, 5 );
					}
					break;
				case "Spawn Large Alien Queen":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A8 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A8).spawn_mob( Task13.User, 6, 1 );
					}
					break;
				case "Spawn Loads of Captain Spare IDs":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A9 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A9).loadsa_goodies( Task13.User, 1 );
					}
					break;
				case "Spawn Loads of Money":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A10 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A10).loadsa_goodies( Task13.User, 2 );
					}
					break;
				case "Repair Surroundings":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A11 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A11).Mass_Repair( Task13.User );
					}
					break;
				case "Mass Rejuvination":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A12 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A12).mass_rejuvinate( Task13.User );
					}
					break;
				case "Singularity Hook":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A13 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A13).throw_hookshot( Task13.User );
					}
					break;
				case "Adminbus-mounted Jukebox":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A14 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A14).Mounted_Jukebox( Task13.User );
					}
					break;
				case "Teleportation":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A15 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A15).Teleportation( Task13.User );
					}
					break;
				case "Release Passengers":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A16 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A16).release_passengers( Task13.User );
					}
					break;
				case "Send Passengers Back Home":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A17 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A17).Send_Home( Task13.User );
					}
					break;
				case "Antag Madness!":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A18 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A18).Make_Antag( Task13.User );
					}
					break;
				case "Give Infinite Laser Guns to the Passengers":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A19 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A19).give_lasers( Task13.User );
					}
					break;
				case "Delete the given Infinite Laser Guns":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A20 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A20).delete_lasers( Task13.User );
					}
					break;
				case "Give Fuse-Bombs to the Passengers":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A21 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A21).give_bombs( Task13.User );
					}
					break;
				case "Delete the given Fuse-Bombs":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A22 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A22).delete_bombs( Task13.User );
					}
					break;
				case "Send Passengers to the Thunderdome's Red Team":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A23 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A23).Sendto_Thunderdome_Arena_Red( Task13.User );
					}
					break;
				case "Split the Passengers between the two Thunderdome Teams":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A24 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A24).Sendto_Thunderdome_Arena( Task13.User );
					}
					break;
				case "Send Passengers to the Thunderdome's Green Team":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A25 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A25).Sendto_Thunderdome_Arena_Green( Task13.User );
					}
					break;
				case "Send Passengers to the Thunderdome's Observers' Lodge":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A26 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A26).Sendto_Thunderdome_Obs( Task13.User );
					}
					break;
				case "Capture Mobs":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A27 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A27).toggle_bumpers( Task13.User, 1 );
					}
					break;
				case "Hit Mobs":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A28 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A28).toggle_bumpers( Task13.User, 2 );
					}
					break;
				case "Gib Mobs":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A29 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A29).toggle_bumpers( Task13.User, 3 );
					}
					break;
				case "Close Door":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A30 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A30).toggle_door( Task13.User, false );
					}
					break;
				case "Open Door":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A31 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A31).toggle_door( Task13.User, true );
					}
					break;
				case "Turn Off Headlights":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A32 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A32).toggle_lights( Task13.User, 0 );
					}
					break;
				case "Dipped Headlights":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A33 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A33).toggle_lights( Task13.User, 1 );
					}
					break;
				case "Main Headlights":
					
					if ( Lang13.Bool( Task13.User.locked_to ) && Task13.User.locked_to is Obj_Structure_Bed_Chair_Vehicle_Adminbus ) {
						A34 = Task13.User.locked_to;
						((Obj_Structure_Bed_Chair_Vehicle_Adminbus)A34).toggle_lights( Task13.User, 2 );
					}
					break;
				default:
					return false;
					break;
			}
			return true;
		}

		// Function from file: screen_objects.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.master = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}