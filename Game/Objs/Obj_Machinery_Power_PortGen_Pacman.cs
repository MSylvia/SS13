// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_PortGen_Pacman : Obj_Machinery_Power_PortGen {

		public double sheets = 0;
		public int max_sheets = 100;
		public string sheet_name = "";
		public Type sheet_path = typeof(Obj_Item_Stack_Sheet_Mineral_Plasma);
		public string board_path = "/obj/item/weapon/circuitboard/pacman";
		public double sheet_left = 0;
		public int time_per_sheet = 40;
		public int heat = 0;

		// Function from file: port_gen.dm
		public Obj_Machinery_Power_PortGen_Pacman ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic sheet = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Stack_CableCoil(), 
				new Obj_Item_Stack_CableCoil(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				Lang13.Call( this.board_path )
			 });
			sheet = Lang13.Call( this.sheet_path, null );
			this.sheet_name = sheet.name;
			this.RefreshParts();
			return;
		}

		// Function from file: port_gen.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["action"] ) ) {
				
				if ( href_list["action"] == "enable" ) {
					
					if ( !this.active && this.HasFuel() && !this.crit_fail ) {
						this.active = true;
						this.icon_state = "portgen1";
						this.updateUsrDialog();
					}
				}

				if ( href_list["action"] == "disable" ) {
					
					if ( this.active ) {
						this.active = false;
						this.icon_state = "portgen0";
						this.updateUsrDialog();
					}
				}

				if ( href_list["action"] == "eject" ) {
					
					if ( !this.active ) {
						this.DropFuel();
						this.updateUsrDialog();
					}
				}

				if ( href_list["action"] == "lower_power" ) {
					
					if ( this.power_output > 1 ) {
						this.power_output--;
						this.updateUsrDialog();
					}
				}

				if ( href_list["action"] == "higher_power" ) {
					
					if ( this.power_output < 4 || this.emagged != 0 ) {
						this.power_output++;
						this.updateUsrDialog();
					}
				}

				if ( href_list["action"] == "close" ) {
					Interface13.Browse( Task13.User, null, "window=port_gen" );
					Task13.User.unset_machine();
				}
			}
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			double stack_percent = 0;

			
			if ( Map13.GetDistance( this, user ) > 1 ) {
				
				if ( !( user is Mob_Living_Silicon_Ai ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=port_gen" );
					return null;
				}
			}
			((Mob)user).set_machine( this );
			dat = "<b>" + this.name + "</b><br>";

			if ( this.active ) {
				dat += new Txt( "Generator: <A href='?src=" ).Ref( this ).str( ";action=disable'>On</A><br>" ).ToString();
			} else {
				dat += new Txt( "Generator: <A href='?src=" ).Ref( this ).str( ";action=enable'>Off</A><br>" ).ToString();
			}
			dat += new Txt().item( GlobalFuncs.capitalize( this.sheet_name ) ).str( ": " ).item( this.sheets ).str( " - <A href='?src=" ).Ref( this ).str( ";action=eject'>Eject</A><br>" ).ToString();
			stack_percent = Num13.Round( this.sheet_left * 100, 1 );
			dat += "Current stack: " + stack_percent + "% <br>";
			dat += new Txt( "Power output: <A href='?src=" ).Ref( this ).str( ";action=lower_power'>-</A> " ).item( this.power_gen * this.power_output ).str( " <A href='?src=" ).Ref( this ).str( ";action=higher_power'>+</A><br>" ).ToString();
			dat += "Power current: " + ( this.powernet == null ? "Unconnected" : "" + this.avail() ) + "<br>";
			dat += "Heat: " + this.heat + "<br>";
			dat += new Txt( "<br><A href='?src=" ).Ref( this ).str( ";action=close'>Close</A>" ).ToString();
			Interface13.Browse( user, "" + dat, "window=port_gen" );
			GlobalFuncs.onclose( user, "port_gen" );
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			this.interact( a );
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.interact( user );
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( !Lang13.Bool( this.anchored ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic addstack = null;
			int amount = 0;

			
			if ( Lang13.Bool( ((dynamic)this.sheet_path).IsInstanceOfType( a ) ) ) {
				addstack = a;
				amount = Num13.MinInt( ((int)( this.max_sheets - this.sheets )), Convert.ToInt32( addstack.amount ) );

				if ( amount < 1 ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>The " + this.name + " is full!</span>" );
					return null;
				}
				GlobalFuncs.to_chat( b, "<span class='notice'>You add " + amount + " sheets to the " + this.name + ".</span>" );
				this.sheets += amount;
				addstack.use( amount );
				this.updateUsrDialog();
				return null;
			} else if ( !this.active ) {
				
				if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
					return 1;
				}
			}
			return null;
		}

		// Function from file: port_gen.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( base.wrenchAnchor( (object)(user) ) == 1 ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					this.connect_to_network();
				} else {
					this.disconnect_from_network();
				}
				return 1;
			}
			return -1;
		}

		// Function from file: port_gen.dm
		public override int crowbarDestroy( dynamic user = null ) {
			dynamic G = null;

			
			if ( base.crowbarDestroy( (object)(user) ) != 0 ) {
				
				while (this.sheets > 0) {
					G = Lang13.Call( this.sheet_path, this.loc );

					if ( this.sheets > 50 ) {
						G.amount = 50;
					} else {
						G.amount = this.sheets;
					}
					this.sheets -= Convert.ToDouble( G.amount );
				}
				return 1;
			}
			return -1;
		}

		// Function from file: port_gen.dm
		public override int emag( dynamic user = null ) {
			this.emagged = 1;
			this.emp_act( 1 );
			return 1;
		}

		// Function from file: port_gen.dm
		public virtual void overheat(  ) {
			GlobalFuncs.explosion( this.loc, 2, 5, 2, -1 );
			return;
		}

		// Function from file: port_gen.dm
		public override void handleInactive(  ) {
			
			if ( this.heat > 0 ) {
				this.heat = Num13.MaxInt( this.heat - 2, 0 );
				this.updateDialog();
			}
			return;
		}

		// Function from file: port_gen.dm
		public override void UseFuel(  ) {
			double needed_sheets = 0;
			int temp = 0;
			int lower_limit = 0;
			int upper_limit = 0;
			int bias = 0;

			needed_sheets = 1 / ( this.time_per_sheet / this.power_output );
			temp = Num13.MinInt( ((int)( needed_sheets )), ((int)( this.sheet_left )) );
			needed_sheets -= temp;
			this.sheet_left -= temp;
			this.sheets -= Num13.Floor( needed_sheets );
			needed_sheets -= Num13.Floor( needed_sheets );

			if ( this.sheet_left <= 0 && this.sheets > 0 ) {
				this.sheet_left = 1 - needed_sheets;
				this.sheets--;
			}
			lower_limit = this.power_output * 10 + 56;
			upper_limit = this.power_output * 10 + 76;
			bias = 0;

			if ( this.power_output > 4 ) {
				upper_limit = 400;
				bias = this.power_output * 3;
			}

			if ( this.heat < lower_limit ) {
				this.heat += 3;
			} else {
				this.heat += Rand13.Int( bias + -7, bias + 7 );

				if ( this.heat < lower_limit ) {
					this.heat = lower_limit;
				}

				if ( this.heat > upper_limit ) {
					this.heat = upper_limit;
				}
			}

			if ( this.heat > 300 ) {
				this.overheat();
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: port_gen.dm
		public override void DropFuel(  ) {
			int fail_safe = 0;
			dynamic S = null;
			int amount = 0;

			
			if ( this.sheets != 0 ) {
				fail_safe = 0;

				while (this.sheets > 0 && fail_safe < 100) {
					fail_safe += 1;
					S = Lang13.Call( this.sheet_path, this.loc );
					amount = Num13.MinInt( ((int)( this.sheets )), Convert.ToInt32( S.max_amount ) );
					S.amount = amount;
					this.sheets -= amount;
				}
			}
			return;
		}

		// Function from file: port_gen.dm
		public override bool HasFuel(  ) {
			
			if ( this.sheets >= 1 / ( this.time_per_sheet / this.power_output ) - this.sheet_left ) {
				return true;
			}
			return false;
		}

		// Function from file: port_gen.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.crit_fail ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>The generator seems to have broken down.</span>" );
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>The generator has " + this.sheets + " units of " + this.sheet_name + " fuel left, producing " + this.power_gen + " per cycle.</span>" );
			}
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic RefreshParts(  ) {
			int temp_rating = 0;
			double temp_reliability = 0;
			Obj_Item_Weapon_StockParts SP = null;
			Obj_Item_Weapon CP = null;

			temp_rating = 0;
			temp_reliability = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_MatterBin ) {
					this.max_sheets = SP.rating * SP.rating * 50;
				} else if ( SP is Obj_Item_Weapon_StockParts_MicroLaser || SP is Obj_Item_Weapon_StockParts_Capacitor ) {
					temp_rating += SP.rating;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon) )) {
				CP = _b;
				
				temp_reliability += CP.reliability;
			}
			this.reliability = Num13.MinInt( Num13.Floor( temp_reliability / 4 ), 100 );
			this.power_gen = Num13.Floor( Convert.ToDouble( Lang13.Initial( this, "power_gen" ) * ( Num13.MaxInt( 2, temp_rating ) / 2 ) ) );
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.DropFuel();
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: port_gen.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );

			if ( Lang13.Bool( this.anchored ) ) {
				this.connect_to_network();
			}
			return false;
		}

	}

}