// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl : Obj_Machinery_Computer {

		public int frequency = 1439;
		public bool show_sensors = true;
		public ByTable sensors = new ByTable();
		public ByTable sensor_information = new ByTable();
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/air_management";
			this.light_color = "#7DE1E1";
			this.icon_state = "tank";
		}

		public Obj_Machinery_Computer_GeneralAirControl ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: atmo_control.dm
		public override bool linkWith( Mob user = null, Base_Data buffer = null, ByTable context = null ) {
			this.sensors[((dynamic)buffer).id_tag] = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose a sensor label:", "Sensor Label", null, null, InputType.Str | InputType.Null ), true );
			return true;
		}

		// Function from file: atmo_control.dm
		public override bool isLinkedWith( Base_Data O = null ) {
			
			if ( O is Obj_Machinery_AirSensor || O is Obj_Machinery_Meter ) {
				return this.sensors.Contains( ((dynamic)O).id_tag );
			}
			return false;
		}

		// Function from file: atmo_control.dm
		public override bool canLink( Base_Data O = null, ByTable context = null ) {
			
			if ( O is Obj_Machinery_AirSensor || O is Obj_Machinery_Meter ) {
				return Lang13.Bool( ((dynamic)O).id_tag );
			}
			return false;
		}

		// Function from file: atmo_control.dm
		public override string linkMenu( Base_Data O = null ) {
			string dat = null;

			dat = "";

			if ( ( O is Obj_Machinery_AirSensor || O is Obj_Machinery_Meter ) && !this.isLinkedWith( O ) ) {
				dat += new Txt( " <a href='?src=" ).Ref( this ).str( ";link=1'>[New Sensor]</a> " ).ToString();
			}
			return dat;
		}

		// Function from file: atmo_control.dm
		public override bool unlinkFrom( Mob user = null, Base_Data buffer = null ) {
			base.unlinkFrom( user, buffer );

			if ( Lang13.Bool( ((dynamic)( buffer.vars != null && ( buffer is Obj_Machinery_AirSensor || buffer is Obj_Machinery_Meter ) )).Contains( "id_tag" ) ) ) {
				this.sensors.Remove( ((dynamic)buffer).id_tag );
				return true;
			}
			return false;
		}

		// Function from file: atmo_control.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			int _default = 0;

			ByTable sensor_list = null;
			Obj_Machinery_AirSensor G = null;
			Obj_Machinery_Meter G2 = null;
			dynamic sensor = null;
			string label = null;
			ByTable sensor_list2 = null;
			Obj_Machinery_AirSensor G3 = null;
			Obj_Machinery_Meter G4 = null;
			dynamic label2 = null;
			dynamic sensor2 = null;

			_default = base.multitool_topic( user, href_list, (object)(O) );

			if ( _default != 0 ) {
				return _default;
			}

			if ( href_list.Contains( "add_sensor" ) ) {
				sensor_list = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_AirSensor) )) {
					G = _a;
					

					if ( !( G.id_tag == null ) && G.frequency == this.frequency ) {
						sensor_list.Or( G.id_tag );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Meter) )) {
					G2 = _b;
					

					if ( !( G2.id_tag == null ) && G2.frequency == this.frequency ) {
						sensor_list.Or( G2.id_tag );
					}
				}

				if ( !( sensor_list.len != 0 ) ) {
					GlobalFuncs.to_chat( user, "<span class=\"warning\">No sensors on this frequency.</span>" );
					return -1;
				}
				sensor = Interface13.Input( user, "Select a sensor:", "Sensor Data", null, sensor_list, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( sensor ) ) {
					return -1;
				}
				label = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose a sensor label:", "Sensor Label", null, null, InputType.Str | InputType.Null ), true );

				if ( !Lang13.Bool( label ) ) {
					return -1;
				}
				this.sensors[sensor] = label;
				return 1;
			}

			if ( href_list.Contains( "edit_sensor" ) ) {
				sensor_list2 = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_AirSensor) )) {
					G3 = _c;
					

					if ( !( G3.id_tag == null ) && G3.frequency == this.frequency ) {
						sensor_list2.Or( G3.id_tag );
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Meter) )) {
					G4 = _d;
					

					if ( !( G4.id_tag == null ) && G4.frequency == this.frequency ) {
						sensor_list2.Or( G4.id_tag );
					}
				}

				if ( !( sensor_list2.len != 0 ) ) {
					GlobalFuncs.to_chat( user, "<span class=\"warning\">No sensors on this frequency.</span>" );
					return -1;
				}
				label2 = this.sensors[href_list["edit_sensor"]];
				sensor2 = Interface13.Input( user, "Select a sensor:", "Sensor Data", href_list["edit_sensor"], sensor_list2, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( sensor2 ) ) {
					return -1;
				}
				this.sensors.Remove( href_list["edit_sensor"] );
				this.sensors[sensor2] = label2;
				return 1;
			}
			return _default;
		}

		// Function from file: atmo_control.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			string dat = null;
			dynamic id_tag = null;

			dat = new Txt( "\n	<b>Main</b>\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( Lang13.Initial( this, "frequency" ) ).str( "\">Reset</a>)</li>\n	</ul>\n	<b>Sensors:</b>\n	<ul>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( this.sensors )) {
				id_tag = _a;
				
				dat += new Txt( "<li><a href=\"?src=" ).Ref( this ).str( ";edit_sensor=" ).item( id_tag ).str( "\">" ).item( this.sensors[id_tag] ).str( "</a></li>" ).ToString();
			}
			dat += new Txt( "<li><a href=\"?src=" ).Ref( this ).str( ";add_sensor=1\">[+]</a></li></ul>" ).ToString();
			return dat;
		}

		// Function from file: atmo_control.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.set_frequency( this.frequency );
			return false;
		}

		// Function from file: atmo_control.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmo_control.dm
		public virtual string return_text(  ) {
			string sensor_data = null;
			dynamic id_tag = null;
			dynamic long_name = null;
			dynamic data = null;
			string sensor_part = null;
			string output = null;

			
			if ( this.sensors.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.sensors )) {
					id_tag = _a;
					
					long_name = this.sensors[id_tag];
					data = this.sensor_information[id_tag];
					sensor_part = "<fieldset><legend>" + long_name + "</legend>";

					if ( Lang13.Bool( data ) ) {
						sensor_part += "<table>";

						if ( Lang13.Bool( data.Contains( "pressure" ) ) ) {
							sensor_part += "<tr><th>Pressure:</th><td>" + data["pressure"] + " kPa</td></tr>";
						}

						if ( Lang13.Bool( data["temperature"] ) ) {
							sensor_part += "<tr><th>Temperature:</th><td>" + data["temperature"] + " K</td></tr>";
						}

						if ( Lang13.Bool( data["oxygen"] ) || Lang13.Bool( data["toxins"] ) || Lang13.Bool( data["nitrogen"] ) || Lang13.Bool( data["carbon_dioxide"] ) ) {
							sensor_part += "<tr><th>Gas Composition :</th><td><ul>";

							if ( Lang13.Bool( data["oxygen"] ) ) {
								sensor_part += "<li>" + data["oxygen"] + "% O<sub>2</sub></li>";
							}

							if ( Lang13.Bool( data["nitrogen"] ) ) {
								sensor_part += "<li>" + data["nitrogen"] + "% N</li>";
							}

							if ( Lang13.Bool( data["carbon_dioxide"] ) ) {
								sensor_part += "<li>" + data["carbon_dioxide"] + "% CO<sub>2</sub></li>";
							}

							if ( Lang13.Bool( data["toxins"] ) ) {
								sensor_part += "<li>" + data["toxins"] + "% Plasma</li>";
							}
							sensor_part += "</ul></td></tr>";
						}
						sensor_part += "</table>";
					} else {
						sensor_part += "<FONT color='red'>" + long_name + " can not be found!</FONT><BR>";
					}
					sensor_part += "</fieldset>";
					sensor_data += sensor_part;
				}
			} else {
				sensor_data = "<em>No sensors connected.</em>";
			}
			output = @"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN""
	""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
<html xmlns=""http://www.w3.org/1999/xhtml"" lang=""en"" xml:lang=""en"">
<head>
	<title>" + this.name + @"</title>
	<style type=""text/css"">
html,body {
font-family:sans-serif,verdana;
font-size:smaller;
color:#666;
}
h1 {
border-bottom:1px solid maroon;
}
table {
border-spacing: 0;
border-collapse: collapse;
}
td, th {
margin: 0;
font-size: small;
border-bottom: 1px solid #ccc;
padding: 3px;
}

th {
text-align:right;
}

fieldset {
border:1px solid #ccc;
background: #efefef;
}
legend {
font-weight:bold;
}
	</style>
</head>
<body>
	<h1>" + this.name + "</h1>";

			if ( this.show_sensors ) {
				output += "\n	<h2>Sensor Data:</h2>\n	" + sensor_data;
			}
			return output;
		}

		// Function from file: atmo_control.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic id_tag = null;

			
			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}
			id_tag = ((dynamic)signal).data["tag"];

			if ( !Lang13.Bool( id_tag ) || !( this.sensors != null ) || !( this.sensors.Find( id_tag ) != 0 ) ) {
				return false;
			}
			this.sensor_information[id_tag] = ((dynamic)signal).data;
			return false;
		}

		// Function from file: atmo_control.dm
		public override dynamic process(  ) {
			base.process();

			if ( !( this.sensors != null ) ) {
				Game13.log.WriteMsg( "## WARNING: " + ( "" + this.type + " at " + this.x + "," + this.y + "," + this.z + " has null sensors.  Please fix." ) );
				this.sensors = new ByTable();
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: atmo_control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string html = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			html = this.return_text() + "</body></html>";
			Interface13.Browse( a, html, "window=gac" );
			((Mob)a).set_machine( this );
			GlobalFuncs.onclose( a, "gac" );
			return null;
		}

	}

}