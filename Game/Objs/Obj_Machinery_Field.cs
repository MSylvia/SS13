// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Field : Obj_Machinery {

		public bool hasShocked = false;

		public Obj_Machinery_Field ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: containment_field.dm
		public virtual bool bump_field( dynamic AM = null ) {
			EffectSystem_SparkSpread s = null;
			dynamic target = null;

			
			if ( this.hasShocked ) {
				return false;
			}
			this.hasShocked = true;
			s = new EffectSystem_SparkSpread();
			s.set_up( 5, 1, AM.loc );
			s.start();
			target = GlobalFuncs.get_edge_target_turf( AM, Map13.GetDistance( this, Map13.GetStepAway( AM, this, null ) ) );
			((Ent_Dynamic)AM).throw_at( target, 200, 4 );
			GlobalFuncs.addtimer( this, "clear_shock", 5 );
			return false;
		}

		// Function from file: containment_field.dm
		public void clear_shock(  ) {
			this.hasShocked = false;
			return;
		}

		// Function from file: containment_field.dm
		public virtual bool shock( dynamic user = null ) {
			int shock_damage = 0;
			double stun = 0;

			
			if ( user is Mob_Living ) {
				shock_damage = Num13.MinInt( Rand13.Int( 30, 40 ), Rand13.Int( 30, 40 ) );

				if ( user is Mob_Living_Carbon ) {
					stun = Num13.MinInt( shock_damage, 15 );
					((Mob)user).Stun( stun );
					((Mob)user).Weaken( 10 );
					((Mob_Living)user).electrocute_act( shock_damage, this, 1 );
				} else if ( user is Mob_Living_Silicon ) {
					
					if ( Rand13.PercentChance( 20 ) ) {
						((Mob)user).Stun( 2 );
					}
					((Mob_Living)user).take_overall_damage( 0, shock_damage );
					((Ent_Static)user).visible_message( "<span class='danger'>" + user.name + " was shocked by the " + this.name + "!</span>", "<span class='userdanger'>Energy pulse detected, system damaged!</span>", "<span class='italics'>You hear an electrical crack.</span>" );
				}
				((Mob_Living)user).updatehealth();
				this.bump_field( user );
			}
			return false;
		}

		// Function from file: containment_field.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			
			if ( this.hasShocked ) {
				return false;
			}

			if ( mover is Mob_Living ) {
				this.shock( mover );
				return false;
			}

			if ( mover is Obj_Machinery || mover is Obj_Structure || mover is Obj_Mecha ) {
				this.bump_field( mover );
				return false;
			}
			return base.CanPass( (object)(mover), (object)(target), height, air_group );
		}

	}

}