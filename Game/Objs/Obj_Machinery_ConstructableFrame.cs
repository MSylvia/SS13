// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ConstructableFrame : Obj_Machinery {

		public dynamic circuit = null;
		public ByTable components = null;
		public dynamic req_components = null;
		public ByTable req_component_names = null;
		public int state = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.use_power = 0;
			this.icon = "icons/obj/stock_parts.dmi";
			this.icon_state = "box_0";
		}

		public Obj_Machinery_ConstructableFrame ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: constructable_frame.dm
		public void update_req_desc(  ) {
			bool hasContent = false;
			double i = 0;
			dynamic tname = null;
			bool amt = false;
			bool use_and = false;

			
			if ( !Lang13.Bool( this.req_components ) || !( this.req_component_names != null ) ) {
				return;
			}
			hasContent = false;
			this.desc = "Requires";

			foreach (dynamic _a in Lang13.IterateRange( 1, this.req_components.len )) {
				i = _a;
				
				tname = this.req_components[i];
				amt = Lang13.Bool( this.req_components[tname] );

				if ( !amt ) {
					continue;
				}
				use_and = i == this.req_components.len;
				this.desc += "" + ( hasContent ? ( use_and ? ", and" : "," ) : "" ) + " " + amt + " " + ( amt ? this.req_component_names[tname] : new Txt().item( this.req_component_names[tname] ).s().ToString() );
				hasContent = true;
			}

			if ( !hasContent ) {
				this.desc = "Does not require any more components.";
			} else {
				this.desc += ".";
			}
			return;
		}

		// Function from file: constructable_frame.dm
		public double get_req_components_amt(  ) {
			double amt = 0;
			dynamic path = null;

			amt = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.req_components )) {
				path = _a;
				
				amt += Convert.ToDouble( this.req_components[path] );
			}
			return amt;
		}

		// Function from file: constructable_frame.dm
		public void update_namelist(  ) {
			dynamic tname = null;
			dynamic path = null;
			dynamic O = null;

			
			if ( !Lang13.Bool( this.req_components ) ) {
				return;
			}
			this.req_component_names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.req_components )) {
				tname = _a;
				
				path = tname;
				O = Lang13.Call( path );
				this.req_component_names[tname] = O.name;
			}
			return;
		}

	}

}