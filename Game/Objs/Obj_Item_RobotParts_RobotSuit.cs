// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_RobotParts_RobotSuit : Obj_Item_RobotParts {

		public dynamic l_arm = null;
		public dynamic r_arm = null;
		public dynamic l_leg = null;
		public dynamic r_leg = null;
		public dynamic chest = null;
		public dynamic head = null;
		public string created_name = "";
		public dynamic forced_ai = null;
		public bool locomotion = true;
		public bool lawsync = true;
		public bool aisync = true;
		public bool panel_locked = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "robo_suit";
		}

		// Function from file: robot_parts.dm
		public Obj_Item_RobotParts_RobotSuit ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.updateicon();
			return;
		}

		// Function from file: robot_parts.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob living_user = null;
			dynamic item_in_hand = null;
			string new_name = null;

			
			if ( Lang13.Bool( Task13.User.lying ) || Task13.User.stat != 0 || Task13.User.stunned != 0 || !this.Adjacent( Task13.User ) ) {
				return null;
			}
			living_user = Task13.User;
			item_in_hand = living_user.get_active_hand();

			if ( !( item_in_hand is Obj_Item_Device_Multitool ) ) {
				living_user.WriteMsg( "<span class='warning'>You need a multitool!</span>" );
				return null;
			}

			if ( Lang13.Bool( href_list["Name"] ) ) {
				new_name = GlobalFuncs.reject_bad_name( Interface13.Input( Task13.User, "Enter new designation. Set to blank to reset to default.", "Cyborg Debug", this.created_name, null, InputType.Any ), true );

				if ( !( Map13.GetDistance( this, Task13.User ) <= 1 ) && this.loc != Task13.User ) {
					return null;
				}

				if ( Lang13.Bool( new_name ) ) {
					this.created_name = new_name;
				} else {
					this.created_name = "";
				}
			} else if ( Lang13.Bool( href_list["Master"] ) ) {
				this.forced_ai = GlobalFuncs.select_active_ai( Task13.User );

				if ( !Lang13.Bool( this.forced_ai ) ) {
					Task13.User.WriteMsg( "<span class='error'>No active AIs detected.</span>" );
				}
			} else if ( Lang13.Bool( href_list["Law"] ) ) {
				this.lawsync = !this.lawsync;
			} else if ( Lang13.Bool( href_list["AI"] ) ) {
				this.aisync = !this.aisync;
			} else if ( Lang13.Bool( href_list["Loco"] ) ) {
				this.locomotion = !this.locomotion;
			} else if ( Lang13.Bool( href_list["Panel"] ) ) {
				this.panel_locked = !this.panel_locked;
			}
			this.add_fingerprint( Task13.User );
			this.Interact( Task13.User );
			return null;
		}

		// Function from file: robot_parts.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic M = null;
			Obj_Item_Weapon_Ed209Assembly B = null;
			dynamic M2 = null;
			dynamic BM = null;
			Mob_Living_Silicon_Robot O = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Stack_Sheet_Metal && !Lang13.Bool( this.l_arm ) && !Lang13.Bool( this.r_arm ) && !Lang13.Bool( this.l_leg ) && !Lang13.Bool( this.r_leg ) && !Lang13.Bool( this.chest ) && !Lang13.Bool( this.head ) ) {
				M = A;

				if ( Lang13.Bool( M.use( 1 ) ) ) {
					B = new Obj_Item_Weapon_Ed209Assembly();
					B.loc = GlobalFuncs.get_turf( this );
					user.WriteMsg( "<span class='notice'>You arm the robot frame.</span>" );

					if ( ((Mob)user).get_inactive_hand() == this ) {
						((Mob)user).unEquip( this );
						((Mob)user).put_in_inactive_hand( B );
					}
					GlobalFuncs.qdel( this );
				} else {
					user.WriteMsg( "<span class='warning'>You need one sheet of metal to start building ED-209!</span>" );
					return null;
				}
			}

			if ( A is Obj_Item_RobotParts_LLeg ) {
				
				if ( Lang13.Bool( this.l_leg ) ) {
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				A.loc = this;
				this.l_leg = A;
				this.updateicon();
			}

			if ( A is Obj_Item_RobotParts_RLeg ) {
				
				if ( Lang13.Bool( this.r_leg ) ) {
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				A.loc = this;
				this.r_leg = A;
				this.updateicon();
			}

			if ( A is Obj_Item_RobotParts_LArm ) {
				
				if ( Lang13.Bool( this.l_arm ) ) {
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				A.loc = this;
				this.l_arm = A;
				this.updateicon();
			}

			if ( A is Obj_Item_RobotParts_RArm ) {
				
				if ( Lang13.Bool( this.r_arm ) ) {
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				A.loc = this;
				this.r_arm = A;
				this.updateicon();
			}

			if ( A is Obj_Item_RobotParts_Chest ) {
				
				if ( Lang13.Bool( this.chest ) ) {
					return null;
				}

				if ( Lang13.Bool( A.wired ) && Lang13.Bool( A.cell ) ) {
					
					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.chest = A;
					this.updateicon();
				} else if ( !Lang13.Bool( A.wired ) ) {
					user.WriteMsg( "<span class='warning'>You need to attach wires to it first!</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>You need to attach a cell to it first!</span>" );
				}
			}

			if ( A is Obj_Item_RobotParts_Head ) {
				
				if ( Lang13.Bool( this.head ) ) {
					return null;
				}

				if ( Lang13.Bool( A.flash2 ) && Lang13.Bool( A.flash1 ) ) {
					
					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.head = A;
					this.updateicon();
				} else {
					user.WriteMsg( "<span class='warning'>You need to attach a flash to it first!</span>" );
				}
			}

			if ( A is Obj_Item_Device_Multitool ) {
				
				if ( this.check_completion() ) {
					this.Interact( user );
				} else {
					user.WriteMsg( "<span class='warning'>The endoskeleton must be assembled before debugging can begin!</span>" );
				}
			}

			if ( A is Obj_Item_Device_Mmi ) {
				M2 = A;

				if ( this.check_completion() ) {
					
					if ( !( this.loc is Tile ) ) {
						user.WriteMsg( "<span class='warning'>You can't put the MMI in, the frame has to be standing on the ground to be perfectly precise!</span>" );
						return null;
					}

					if ( !Lang13.Bool( M2.brainmob ) ) {
						user.WriteMsg( "<span class='warning'>Sticking an empty MMI into the frame would sort of defeat the purpose!</span>" );
						return null;
					}
					BM = M2.brainmob;

					if ( !Lang13.Bool( BM.key ) || !Lang13.Bool( BM.mind ) ) {
						user.WriteMsg( "<span class='warning'>The mmi indicates that their mind is completely unresponsive; there's no point!</span>" );
						return null;
					}

					if ( !Lang13.Bool( BM.client ) ) {
						user.WriteMsg( "<span class='warning'>The mmi indicates that their mind is currently inactive; it might change!</span>" );
						return null;
					}

					if ( Convert.ToInt32( BM.stat ) == 2 || Lang13.Bool( M2.brain ) && M2.brain.damaged_brain ) {
						user.WriteMsg( "<span class='warning'>Sticking a dead brain into the frame would sort of defeat the purpose!</span>" );
						return null;
					}

					if ( GlobalFuncs.jobban_isbanned( BM, "Cyborg" ) ) {
						user.WriteMsg( "<span class='warning'>This MMI does not seem to fit!</span>" );
						return null;
					}
					O = new Mob_Living_Silicon_Robot( GlobalFuncs.get_turf( this.loc ) );

					if ( !( O != null ) ) {
						return null;
					}

					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}

					if ( M2.syndiemmi ) {
						this.aisync = false;
						this.lawsync = false;
						O.laws = new AiLaws_SyndicateOverride();
					}
					O.invisibility = 0;
					O.custom_name = this.created_name;
					O.locked = this.panel_locked;

					if ( !this.aisync ) {
						this.lawsync = false;
						O.connected_ai = null;
					} else {
						O.notify_ai( 1 );

						if ( Lang13.Bool( this.forced_ai ) ) {
							O.connected_ai = this.forced_ai;
						}
					}

					if ( !this.lawsync && !M2.syndiemmi ) {
						O.lawupdate = false;
						O.make_laws();
					}
					((GameMode)GlobalVars.ticker.mode).remove_antag_for_borging( BM.mind );
					((Mind)BM.mind).transfer_to( O );

					if ( O.mind != null && Lang13.Bool( O.mind.special_role ) ) {
						O.mind.store_memory( "As a cyborg, you must obey your silicon laws and master AI above all else. Your objectives will consider you to be dead." );
						O.WriteMsg( "<span class='userdanger'>You have been robotized!</span>" );
						O.WriteMsg( "<span class='danger'>You must obey your silicon laws and master AI above all else. Your objectives will consider you to be dead.</span>" );
					}
					O.job = "Cyborg";
					O.cell = this.chest.cell;
					this.chest.cell.loc = O;
					this.chest.cell = null;
					A.loc = O;

					if ( Lang13.Bool( O.mmi ) ) {
						GlobalFuncs.qdel( O.mmi );
					}
					O.mmi = A;
					O.updatename();
					GlobalFuncs.feedback_inc( "cyborg_birth", 1 );
					this.loc = O;
					O.robot_suit = this;

					if ( !this.locomotion ) {
						O.lockcharge = true;
						O.update_canmove();
						O.WriteMsg( "<span class='warning'>Error: Servo motors unresponsive.</span>" );
					}
				} else {
					user.WriteMsg( "<span class='warning'>The MMI must go in after everything else!</span>" );
				}
			}

			if ( A is Obj_Item_Weapon_Pen ) {
				user.WriteMsg( "<span class='warning'>You need to use a multitool to name " + this + "!</span>" );
			}
			return null;
		}

		// Function from file: robot_parts.dm
		public void Interact( dynamic user = null ) {
			string t1 = null;
			Browser popup = null;

			t1 = new Txt( "Designation: <A href='?src=" ).Ref( this ).str( ";Name=1'>" ).item( ( Lang13.Bool( this.created_name ) ? "" + this.created_name : "Default Cyborg" ) ).str( "</a><br>\n" ).ToString();
			t1 += new Txt( "Master AI: <A href='?src=" ).Ref( this ).str( ";Master=1'>" ).item( ( Lang13.Bool( this.forced_ai ) ? "" + this.forced_ai.name : "Automatic" ) ).str( "</a><br><br>\n" ).ToString();
			t1 += new Txt( "LawSync Port: <A href='?src=" ).Ref( this ).str( ";Law=1'>" ).item( ( this.lawsync ? "Open" : "Closed" ) ).str( "</a><br>\n" ).ToString();
			t1 += new Txt( "AI Connection Port: <A href='?src=" ).Ref( this ).str( ";AI=1'>" ).item( ( this.aisync ? "Open" : "Closed" ) ).str( "</a><br>\n" ).ToString();
			t1 += new Txt( "Servo Motor Functions: <A href='?src=" ).Ref( this ).str( ";Loco=1'>" ).item( ( this.locomotion ? "Unlocked" : "Locked" ) ).str( "</a><br>\n" ).ToString();
			t1 += new Txt( "Panel Lock: <A href='?src=" ).Ref( this ).str( ";Panel=1'>" ).item( ( this.panel_locked ? "Engaged" : "Disengaged" ) ).str( "</a><br>\n" ).ToString();
			popup = new Browser( user, "robotdebug", "Cyborg Boot Debug", 310, 220 );
			popup.set_content( t1 );
			popup.open();
			return;
		}

		// Function from file: robot_parts.dm
		public bool check_completion(  ) {
			
			if ( Lang13.Bool( this.l_arm ) && Lang13.Bool( this.r_arm ) ) {
				
				if ( Lang13.Bool( this.l_leg ) && Lang13.Bool( this.r_leg ) ) {
					
					if ( Lang13.Bool( this.chest ) && Lang13.Bool( this.head ) ) {
						GlobalFuncs.feedback_inc( "cyborg_frames_built", 1 );
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: robot_parts.dm
		public void updateicon(  ) {
			this.overlays.Cut();

			if ( Lang13.Bool( this.l_arm ) ) {
				this.overlays.Add( "l_arm+o" );
			}

			if ( Lang13.Bool( this.r_arm ) ) {
				this.overlays.Add( "r_arm+o" );
			}

			if ( Lang13.Bool( this.chest ) ) {
				this.overlays.Add( "chest+o" );
			}

			if ( Lang13.Bool( this.l_leg ) ) {
				this.overlays.Add( "l_leg+o" );
			}

			if ( Lang13.Bool( this.r_leg ) ) {
				this.overlays.Add( "r_leg+o" );
			}

			if ( Lang13.Bool( this.head ) ) {
				this.overlays.Add( "head+o" );
			}
			return;
		}

	}

}