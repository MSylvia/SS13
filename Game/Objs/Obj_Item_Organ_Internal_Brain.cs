// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Organ_Internal_Brain : Obj_Item_Organ_Internal {

		public Mob_Living_Carbon_Brain brainmob = null;
		public bool damaged_brain = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throw_speed = 3;
			this.throw_range = 5;
			this.zone = "head";
			this.slot = "brain";
			this.vital = true;
			this.origin_tech = "biotech=4";
			this.attack_verb = new ByTable(new object [] { "attacked", "slapped", "whacked" });
			this.icon_state = "brain";
			this.layer = 4.1;
		}

		public Obj_Item_Organ_Internal_Brain ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: brain_item.dm
		public override dynamic Destroy(  ) {
			
			if ( this.brainmob != null ) {
				GlobalFuncs.qdel( this.brainmob );
				this.brainmob = null;
			}
			return base.Destroy();
		}

		// Function from file: brain_item.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic H = null;
			dynamic O = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return base.attack( (object)(M), (object)(user), def_zone );
			}
			this.add_fingerprint( user );

			if ( user.zone_selected != "head" ) {
				return base.attack( (object)(M), (object)(user), def_zone );
			}
			H = M;

			if ( M is Mob_Living_Carbon_Human && ( Lang13.Bool( H.head ) && Lang13.Bool( H.head.flags_cover & 4 ) || Lang13.Bool( H.wear_mask ) && Lang13.Bool( H.wear_mask.flags_cover & 2 ) || Lang13.Bool( H.glasses ) && Lang13.Bool( H.glasses.flags & 1 ) ) ) {
				user.WriteMsg( "<span class='warning'>You're going to need to remove their head cover first!</span>" );
				return false;
			}

			if ( !Lang13.Bool( ((Mob)M).getorgan( typeof(Obj_Item_Organ_Internal_Brain) ) ) ) {
				user.drop_item();

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, M ) )) {
					O = _a;
					

					if ( O == ( Lang13.Bool( user ) || Lang13.Bool( M ) ) ) {
						continue;
					}

					if ( M == user ) {
						O.WriteMsg( new Txt().item( user ).str( " inserts " ).item( this ).str( " into " ).his_her_its_their().str( " head!" ).ToString() );
					} else {
						O.WriteMsg( new Txt().item( M ).str( " has " ).item( this ).str( " inserted into " ).his_her_its_their().str( " head by " ).item( user ).str( "." ).ToString() );
					}
				}

				if ( M != user ) {
					M.WriteMsg( "<span class='notice'>" + user + " inserts " + this + " into your head.</span>" );
					user.WriteMsg( "<span class='notice'>You insert " + this + " into " + M + "'s head.</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>You insert " + this + " into your head.</span>" );
				}
				this.Insert( M );
			} else {
				base.attack( (object)(M), (object)(user), def_zone );
			}
			return false;
		}

		// Function from file: brain_item.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.brainmob != null ) {
				
				if ( this.brainmob.client != null ) {
					
					if ( Convert.ToDouble( this.brainmob.health ) <= ( GlobalVars.config.health_threshold_dead ??0) ) {
						user.WriteMsg( "It's lifeless and severely damaged." );
					} else {
						user.WriteMsg( "You can feel the small spark of life still left in this one." );
					}
				} else {
					user.WriteMsg( "This one seems particularly lifeless. Perhaps it will regain some of its luster later." );
				}
			} else {
				user.WriteMsg( "This one is completely devoid of life." );
			}
			return 0;
		}

		// Function from file: brain_item.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			((Mob)user).changeNext_move( 8 );

			if ( this.brainmob != null ) {
				((Obj_Item)A).attack( this.brainmob, user );
			}
			return null;
		}

		// Function from file: brain_item.dm
		public void transfer_identity( dynamic L = null ) {
			dynamic C = null;

			this.name = "" + L.name + "'s brain";
			this.brainmob = new Mob_Living_Carbon_Brain( this );
			this.brainmob.name = L.real_name;
			this.brainmob.real_name = L.real_name;
			this.brainmob.timeofhostdeath = L.timeofdeath;

			if ( Lang13.Bool( L.has_dna() ) ) {
				C = L;

				if ( !( this.brainmob.dna != null ) ) {
					this.brainmob.dna = new Dna( this.brainmob );
				}
				((Dna)C.dna).copy_dna( this.brainmob.dna );
			}

			if ( Lang13.Bool( L.mind ) && Lang13.Bool( L.mind.current ) && Convert.ToInt32( L.mind.current.stat ) == 2 ) {
				((Mind)L.mind).transfer_to( this.brainmob );
			}
			this.brainmob.WriteMsg( "<span class='notice'>You feel slightly disoriented. That's normal when you're just a brain.</span>" );
			return;
		}

		// Function from file: brain_item.dm
		public override Obj_Item_Weapon_ReagentContainers_Food_Snacks_Organ prepare_eat(  ) {
			return null;
		}

		// Function from file: brain_item.dm
		public override void Remove( dynamic M = null, bool? special = null ) {
			special = special ?? false;

			dynamic H = null;

			base.Remove( (object)(M), special );

			if ( !( special == true ) ) {
				this.transfer_identity( M );
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				((Mob)H).update_hair(  );
			}
			return;
		}

		// Function from file: brain_item.dm
		public override void Insert( dynamic M = null, int? special = null ) {
			special = special ?? 0;

			dynamic H = null;

			base.Insert( (object)(M), special );
			this.name = "brain";

			if ( this.brainmob != null ) {
				
				if ( Lang13.Bool( M.key ) ) {
					((Mob)M).ghostize();
				}

				if ( this.brainmob.mind != null ) {
					this.brainmob.mind.transfer_to( M );
				} else {
					M.key = this.brainmob.key;
				}
				GlobalFuncs.qdel( this.brainmob );
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				((Mob)H).update_hair(  );
			}
			return;
		}

	}

}