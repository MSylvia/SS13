// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_DeviceAnalyser : Obj_Item_Device {

		public ByTable loaded_designs = new ByTable();
		public int max_designs = 10;
		public bool syndi_filter = true;
		public bool access_avoidance = false;
		public bool loadone = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.slot_flags = 512;
			this.w_class = 2;
			this.item_state = "electronic";
			this.w_type = 5;
			this.origin_tech = "magnets=3;engineering=4;materials=4;programming=3";
			this.mech_flags = 1;
			this.icon_state = "mechanic";
		}

		public Obj_Item_Device_DeviceAnalyser ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: device_analyser.dm
		public int CanCreateDesign( dynamic O = null, dynamic user = null ) {
			dynamic techlist = null;
			dynamic M = null;
			Obj_Item_Weapon_Circuitboard CB = null;
			dynamic C = null;
			Type comp_circuit = null;
			dynamic I = null;

			
			if ( !( O is Obj ) ) {
				return 0;
			}

			if ( ( ( O.mech_flags ??0) & 1 ) == 1 ) {
				return 0;
			}
			techlist = ((Obj)O).give_tech_list();

			if ( Lang13.Bool( techlist ) ) {
				return 1;
			}

			if ( O is Obj_Machinery ) {
				M = O;

				if ( Lang13.Bool( user ) && !((Obj)M).allowed( user ) && ( ( M.mech_flags ??0) & 4 ) != 0 && !this.access_avoidance ) {
					return -2;
				}

				if ( Lang13.Bool( M.component_parts ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( M.component_parts, typeof(Obj_Item_Weapon_Circuitboard) )) {
						CB = _a;
						

						if ( CB is Obj_Item_Weapon_Circuitboard ) {
							techlist = GlobalFuncs.ConvertReqString2List( CB.origin_tech );
							break;
						}
					}
				} else if ( M is Obj_Machinery_Computer ) {
					C = M;

					if ( Lang13.Bool( C.circuit ) ) {
						comp_circuit = Lang13.FindClass( C.circuit );
						techlist = GlobalFuncs.ConvertReqString2List( Lang13.Initial( comp_circuit, "origin_tech" ) );
					}
				}
			} else if ( O is Obj_Item ) {
				I = O;

				if ( !Lang13.Bool( I.origin_tech ) ) {
					return 0;
				}
				techlist = GlobalFuncs.ConvertReqString2List( I.origin_tech );
			}

			if ( !Lang13.Bool( techlist ) ) {
				return 0;
			}

			if ( this.syndi_filter ) {
				
				if ( Lang13.Bool( techlist ) && Lang13.Bool( techlist["syndicate"] ) || ( ( O.mech_flags ??0) & 2 ) != 0 ) {
					return -1;
				}
			}
			return 1;
		}

		// Function from file: device_analyser.dm
		public override bool preattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, dynamic click_parameters = null ) {
			dynamic O = null;
			Design current_design = null;

			
			if ( proximity_flag != true ) {
				return false;
			}

			if ( target is Obj ) {
				O = target;

				if ( O is Obj_Machinery_RND_ReverseEngine && this.loaded_designs.len != 0 ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.loaded_designs, typeof(Design) )) {
					current_design = _a;
					

					if ( current_design.build_path == O.type ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='rose'>You've already got a schematic of " ).the( O ).item().str( "!</span>" ).ToString() );
						return false;
					}
				}

				if ( Lang13.Bool( O.origin_tech ) || O is Obj_Machinery ) {
					
					switch ((int)( this.CanCreateDesign( O, user ) )) {
						case 1:
							
							if ( this.max_designs != 0 && !( this.max_designs <= this.loaded_designs.len ) ) {
								this.loaded_designs.Add( GlobalFuncs.getScanDesign( O ) );
								((Ent_Static)user).visible_message( new Txt().item( user ).str( " scans " ).the( O ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You successfully scan " ).the( O ).item().str( ".</span>" ).ToString() );
								return true;
							} else {
								GlobalFuncs.to_chat( user, new Txt( " " ).icon( this ).str( " " ).The( this ).item().str( " flashes a message on-screen: \"Too many designs loaded.\"" ).ToString() );
							}
							break;
						case -1:
							GlobalFuncs.to_chat( user, new Txt( "<span class='rose'> " ).icon( this ).str( " " ).The( this ).item().str( "'s safety features prevent you from scanning that object.</span>" ).ToString() );
							break;
						case -2:
							GlobalFuncs.to_chat( user, new Txt( "<span class='rose'> " ).icon( this ).str( " " ).The( this ).item().str( "'s access requirements prevent you from scanning that object.</span>" ).ToString() );
							break;
						default:
							GlobalFuncs.to_chat( user, new Txt( "<span class='rose'>" ).The( this ).item().str( " can't seem to scan " ).the( O ).item().str( "!</span>" ).ToString() );
							break;
					}
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='rose'>" ).The( this ).item().str( " can't seem to scan " ).the( O ).item().str( "!</span>" ).ToString() );
				}
			} else {
				return false;
			}
			return false;
		}

		// Function from file: device_analyser.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			base.attack_self( (object)(user), (object)(flag), emp );
			this.loadone = !this.loadone;
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You set the Device Analyzer to " + ( this.loadone ? "transfer one design" : "transfer all designs" ) + " on use.</span>" );
			return null;
		}

	}

}