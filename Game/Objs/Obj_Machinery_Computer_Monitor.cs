// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Monitor : Obj_Machinery_Computer {

		public dynamic attached = null;
		public ByTable history = new ByTable();
		public int record_size = 60;
		public int record_interval = 50;
		public int next_record = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "power";
			this.icon_keyboard = "power_key";
			this.use_power = 2;
			this.idle_power_usage = 20;
			this.active_power_usage = 100;
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Powermonitor);
		}

		// Function from file: monitor.dm
		public Obj_Machinery_Computer_Monitor ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.search();
			this.history["supply"] = new ByTable();
			this.history["demand"] = new ByTable();
			return;
		}

		// Function from file: monitor.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			Obj_Machinery_Power_Terminal term = null;
			Obj_Machinery_Power A = null;

			data = new ByTable();
			data["stored"] = this.record_size;
			data["interval"] = this.record_interval / 10;
			data["attached"] = ( Lang13.Bool( this.attached ) ? GlobalVars.TRUE : GlobalVars.FALSE );

			if ( Lang13.Bool( this.attached ) ) {
				data["supply"] = this.attached.powernet.viewavail;
				data["demand"] = this.attached.powernet.viewload;
			}
			data["history"] = this.history;
			data["areas"] = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.attached.powernet.nodes, typeof(Obj_Machinery_Power_Terminal) )) {
				term = _a;
				
				A = term.master;

				if ( A is Obj_Machinery_Power_Apc ) {
					data["areas"] += new ByTable(new object [] { 
						new ByTable()
							.Set( "name", ((dynamic)A).area.name )
							.Set( "charge", ((Obj_Item_Weapon_StockParts_Cell)((dynamic)A).cell).percent() )
							.Set( "load", ((dynamic)A).lastused_total )
							.Set( "charging", ((dynamic)A).charging )
							.Set( "eqp", ((dynamic)A).equipment )
							.Set( "lgt", ((dynamic)A).lighting )
							.Set( "env", ((dynamic)A).environ )
						
					 });
				}
			}
			return data;
		}

		// Function from file: monitor.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "power_monitor", this.name, 1200, 1000, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: monitor.dm
		public void record(  ) {
			ByTable supply = null;
			ByTable demand = null;

			
			if ( Game13.time >= this.next_record ) {
				this.next_record = Game13.time + this.record_interval;
				supply = this.history["supply"];
				supply.Add( this.attached.powernet.viewavail );

				if ( supply.len > this.record_size ) {
					supply.Cut( 1, 2 );
				}
				demand = this.history["demand"];
				demand.Add( this.attached.powernet.viewload );

				if ( demand.len > this.record_size ) {
					demand.Cut( 1, 2 );
				}
			}
			return;
		}

		// Function from file: monitor.dm
		public void search(  ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this );
			this.attached = Lang13.FindIn( typeof(Obj_Structure_Cable), T );
			return;
		}

		// Function from file: monitor.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( !Lang13.Bool( this.attached ) ) {
				this.use_power = 1;
				this.search();
			} else {
				this.use_power = 2;
				this.record();
			}
			return null;
		}

	}

}