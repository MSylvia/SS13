// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Projectile : Obj_Item {

		public bool bumped = false;
		public dynamic def_zone = "";
		public dynamic firer = null;
		public bool silenced = false;
		public double yo = 0;
		public double xo = 0;
		public dynamic current = null;
		public dynamic shot_from = null;
		public dynamic original = null;
		public dynamic starting = null;
		public ByTable permutated = new ByTable();
		public double? p_x = 16;
		public double? p_y = 16;
		public int grillepasschance = 66;
		public double damage = 10;
		public string damage_type = "brute";
		public bool nodamage = false;
		public string flag = "bullet";
		public string projectile_type = "/obj/item/projectile";
		public int? kill_count = 50;
		public int total_steps = 0;
		public int? stun = 0;
		public int? weaken = 0;
		public bool? paralyze = false;
		public int? irradiate = 0;
		public int? stutter = 0;
		public int? eyeblur = 0;
		public bool? drowsy = false;
		public int? agony = 0;
		public int jittery = 0;
		public bool destroy = false;
		public bool reflected = false;
		public string bounce_sound = "sound/items/metal_impact.ogg";
		public int bounce_type = 0;
		public int bounces = 0;
		public int phase_type = 0;
		public int penetration = 0;
		public string mark_type = "trace";
		public double step_delay = 0;
		public bool inaccurate = false;
		public dynamic target = null;
		public double dist_x = 0;
		public double dist_y = 0;
		public double? dx = 0;
		public double? dy = 0;
		public double error = 0;
		public int target_angle = 0;
		public int override_starting_X = 0;
		public int override_starting_Y = 0;
		public int override_target_X = 0;
		public int override_target_Y = 0;
		public double? last_bump = null;
		public bool custom_impact = false;
		public int PixelX = 0;
		public int PixelY = 0;
		public bool linear_movement = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.unacidable = true;
			this.anchored = 1;
			this.icon = "icons/obj/projectiles.dmi";
			this.icon_state = "bullet";
		}

		public Obj_Item_Projectile ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: projectile.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			return -1;
		}

		// Function from file: projectile.dm
		public override dynamic process(  ) {
			bool first = false;
			bool tS = false;

			first = true;
			tS = false;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this.loc != null) {
					
					if ( first && this.timestopped ) {
						tS = true;
						this.timestopped = false;
					}

					while (( this.loc.timestopped || this.timestopped ) && !first) {
						Task13.Sleep( 3 );
					}
					first = false;
					this.process_step();

					if ( tS ) {
						this.timestopped = this.loc.timestopped;
						tS = false;
					}
				}
				return;
			}));
			return null;
		}

		// Function from file: projectile.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Obj_Item_Projectile ) {
				return Rand13.PercentChance( 95 );
			} else {
				return true;
			}
		}

		// Function from file: projectile.dm
		public override dynamic Bump(Ent_Static Obstacle = null, dynamic yes = null) {
			int? forcedodge = null;
			Mob M = null;
			int distance = 0;
			double? miss_modifier = null;
			dynamic daddy = null;
			dynamic f = null;
			Obj_Structure_Bed_Chair_Vehicle JC = null;
			Mob BM = null;
			string impact_icon = null;
			string impact_sound = null;
			int PixelX = 0;
			int PixelY = 0;
			Image impact = null;
			Ent_Static T = null;
			Obj O = null;
			dynamic M2 = null;
			int reaction_type = 0;
			Tile T2 = null;
			Icon I = null;
			Icon trace = null;

			
			if ( !( Obstacle != null ) ) {
				return 0;
			}

			if ( Obstacle == this.firer && !this.reflected ) {
				this.loc = Obstacle.loc;
				return 0;
			}

			if ( this.bumped ) {
				return 0;
			}
			forcedodge = 0;
			this.bumped = true;

			if ( Lang13.Bool( this.firer ) && Obstacle is Mob ) {
				M = (Mob)Obstacle;

				if ( !( Obstacle is Mob_Living ) ) {
					this.loc = Obstacle.loc;
					return 0;
				}
				distance = Map13.GetDistance( this.starting, this.loc );
				miss_modifier = -30;

				if ( this.shot_from is Obj_Item_Weapon_Gun ) {
					daddy = this.shot_from;

					if ( Lang13.Bool( daddy.target.Contains( Lang13.Bool( daddy.target ) && Lang13.Bool( this.original ) ) ) ) {
						miss_modifier += -30;
					}
				}

				if ( this is Obj_Item_Projectile_Beam_Lightning ) {
					miss_modifier += -200;

					if ( this.inaccurate ) {
						miss_modifier += Math.Abs( miss_modifier ??0 );
					}
					this.def_zone = GlobalFuncs.get_zone_with_miss_chance( this.def_zone, M, miss_modifier );
					f = GlobalFuncs.get_turf( Obstacle.loc );

					if ( Lang13.Bool( f ) && f is Tile_Simulated_Floor ) {
						((Tile_Simulated_Floor)f).break_tile();
						((Tile)f).hotspot_expose( 1000, 2500, null, true );
					}
				} else {
					
					if ( this.inaccurate ) {
						miss_modifier += distance * 8;
						miss_modifier += Math.Abs( miss_modifier ??0 );
					}
					this.def_zone = GlobalFuncs.get_zone_with_miss_chance( this.def_zone, M, miss_modifier );
				}

				if ( !Lang13.Bool( this.def_zone ) ) {
					this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " misses " ).item( M ).str( " narrowly!</span>" ).ToString() );
					forcedodge = -1;
				} else {
					
					if ( this.silenced ) {
						GlobalFuncs.to_chat( M, "<span class='warning'>You've been shot in the " + GlobalFuncs.parse_zone( this.def_zone ) + " by the " + this.name + "!</span>" );
					} else {
						this.visible_message( "<span class='warning'>" + Obstacle.name + " is hit by the " + this.name + " in the " + GlobalFuncs.parse_zone( this.def_zone ) + "!</span>" );
					}
					this.admin_warn( M );

					if ( this.firer is Mob ) {
						
						if ( !( this.firer is Mob_Living_Carbon ) ) {
							((dynamic)M).LAssailant = null;
						} else {
							((dynamic)M).LAssailant = this.firer;
						}
					}
				}
			}

			if ( !( Obstacle != null ) ) {
				return 1;
			}

			if ( Obstacle != null ) {
				
				if ( Lang13.Bool( this.firer ) && Obstacle is Obj_Structure_Bed_Chair_Vehicle ) {
					JC = (Obj_Structure_Bed_Chair_Vehicle)Obstacle;

					if ( Lang13.Bool( ((dynamic)JC).occupant ) ) {
						BM = ((dynamic)JC).occupant;

						if ( this.firer is Mob ) {
							this.admin_warn( BM );

							if ( !( this.firer is Mob_Living_Carbon ) ) {
								BM.LAssailant = null;
							}
						} else {
							BM.LAssailant = this.firer;
						}
					}
				}
			}

			if ( !Lang13.Bool( forcedodge ) ) {
				forcedodge = Obstacle.bullet_act( this, this.def_zone );
			}

			if ( forcedodge == -1 ) {
				this.bumped = false;

				if ( Obstacle is Tile ) {
					this.loc = Obstacle;
				} else {
					this.loc = Obstacle.loc;
				}

				if ( this.permutated != null ) {
					this.permutated.Add( Obstacle );
				}
				return 0;
			} else if ( !this.custom_impact ) {
				impact_icon = null;
				impact_sound = null;

				if ( Obstacle is Mob ) {
					
					if ( Obstacle is Mob_Living_Silicon ) {
						impact_icon = "default_solid";
						impact_sound = "sound/items/metal_impact.ogg";
					} else {
						impact_icon = "default_mob";
						impact_sound = "sound/weapons/pierce.ogg";
					}
				} else {
					impact_icon = "default_solid";
					impact_sound = "sound/items/metal_impact.ogg";
				}
				PixelX = 0;
				PixelY = 0;

				switch ((int)( Map13.GetDistance( this, Obstacle ) )) {
					case 1:
						PixelY = 16;
						break;
					case 2:
						PixelY = -16;
						break;
					case 4:
						PixelX = 16;
						break;
					case 8:
						PixelX = -16;
						break;
				}
				impact = new Image( "icons/obj/projectiles_impacts.dmi", this.loc, impact_icon );
				impact.pixel_x = PixelX;
				impact.pixel_y = PixelY;
				T = this.loc;

				if ( T != null ) {
					T.overlays.Add( impact );
					Task13.Schedule( 3, (Task13.Closure)(() => {
						T.overlays.Remove( impact );
						return;
					}));
					GlobalFuncs.playsound( T, impact_sound, 30, 1 );
				}
			}

			if ( Obstacle is Tile ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Obstacle, typeof(Obj) )) {
					O = _b;
					
					O.bullet_act( this );
				}

				foreach (dynamic _c in Lang13.Enumerate( Obstacle )) {
					M2 = _c;
					
					((Ent_Static)M2).bullet_act( this, this.def_zone );
				}
			}

			if ( !( Obstacle != null ) ) {
				return 1;
			}
			reaction_type = Obstacle.projectile_check();

			if ( this.bounces != 0 && ( this.bounce_type & reaction_type ) != 0 ) {
				this.rebound( Obstacle );
				this.bounces--;
				return 1;
			} else if ( this.penetration != 0 && ( this.phase_type & reaction_type ) != 0 ) {
				
				if ( this.penetration > 0 && this.penetration < Obstacle.penetration_dampening ) {
					this.penetration = 0;
					this.bullet_die();
					return 1;
				}
				Obstacle.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " goes right through " ).the( Obstacle ).item().str( "!</span>" ).ToString() );
				this.forceMove( Map13.GetStep( this.loc, this.dir ) );

				if ( this.linear_movement ) {
					this.update_pixel();
					this.pixel_x = this.PixelX;
					this.pixel_y = this.PixelY;
				}

				if ( this.penetration > 0 ) {
					this.penetration = Num13.MaxInt( 0, this.penetration - Obstacle.penetration_dampening );
				}

				if ( Obstacle is Tile ) {
					this.damage -= this.damage / 4;

					if ( !this.destroy ) {
						T2 = (Tile)Obstacle;
						((dynamic)T2).bullet_marks++;
						I = new Icon( T2.icon, T2.icon_state );
						trace = new Icon( "icons/effects/96x96.dmi", this.mark_type );
						trace.Turn( this.target_angle + 45 );
						trace.Crop( 33 - this.pixel_x, 33 - this.pixel_y, 64 - this.pixel_x, 64 - this.pixel_y );
						I.Blend( trace, 2, 1, 1 );
						T2.icon = I;
					}
				}
				return 1;
			}
			this.bullet_die();
			return 1;
		}

		// Function from file: projectile.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			
			if ( !( this.permutated is ByTable ) ) {
				this.permutated = new ByTable();
			} else {
				this.permutated.len = 0;
			}
			base.resetVariables( "permutated" );
			return null;
		}

		// Function from file: projectile.dm
		public void rebound( Ent_Static A = null ) {
			dynamic T = null;
			dynamic W = null;
			double? orientation = null;
			int newdiffX = 0;
			int newdiffY = 0;
			int? disty = null;
			int? distx = null;
			double? newangle = null;
			Icon I = null;

			T = GlobalFuncs.get_turf( this );
			W = GlobalFuncs.get_turf( A );
			GlobalFuncs.playsound( T, this.bounce_sound, 30, 1 );
			orientation = GlobalVars.SOUTH;

			if ( T == W ) {
				orientation = this.dir;
			} else {
				orientation = Map13.GetDistance( T, W );
			}
			this.last_bump = orientation;

			switch ((int?)( orientation )) {
				case 1:
					this.dy = GlobalVars.SOUTH;
					this.override_starting_Y = Convert.ToInt32( W.y * 2 - this.override_starting_Y );
					this.override_target_Y = Convert.ToInt32( W.y * 2 - this.override_target_Y );
					break;
				case 2:
					this.dy = GlobalVars.NORTH;
					this.override_starting_Y = Convert.ToInt32( W.y * 2 - this.override_starting_Y );
					this.override_target_Y = Convert.ToInt32( W.y * 2 - this.override_target_Y );
					break;
				case 4:
					this.dx = GlobalVars.WEST;
					this.override_starting_X = Convert.ToInt32( W.x * 2 - this.override_starting_X );
					this.override_target_X = Convert.ToInt32( W.x * 2 - this.override_target_X );
					break;
				case 8:
					this.dx = GlobalVars.EAST;
					this.override_starting_X = Convert.ToInt32( W.x * 2 - this.override_starting_X );
					this.override_target_X = Convert.ToInt32( W.x * 2 - this.override_target_X );
					break;
			}
			newdiffX = this.override_target_X - this.override_starting_X;
			newdiffY = this.override_target_Y - this.override_starting_Y;

			if ( !Lang13.Bool( W ) ) {
				W = T;
			}
			this.override_starting_X = Convert.ToInt32( W.x );
			this.override_starting_Y = Convert.ToInt32( W.y );
			this.override_target_X = Convert.ToInt32( W.x + newdiffX );
			this.override_target_Y = Convert.ToInt32( W.y + newdiffY );
			disty = null;
			distx = null;
			newangle = null;
			disty = this.override_target_Y * 32 - this.override_starting_Y * 32;
			distx = this.override_target_X * 32 - this.override_starting_X * 32;

			if ( !Lang13.Bool( disty ) ) {
				
				if ( ( distx ??0) >= 0 ) {
					newangle = 90;
				} else {
					newangle = 270;
				}
			} else {
				newangle = GlobalFuncs.arctan( ( distx ??0) / ( disty ??0) );

				if ( ( disty ??0) < 0 ) {
					newangle += 180;
				} else if ( ( distx ??0) < 0 ) {
					newangle += 360;
				}
			}
			this.target_angle = Num13.Floor( newangle ??0 );

			if ( this.linear_movement ) {
				
				if ( !GlobalVars.bullet_master.Contains( "" + this.icon_state + this.target_angle ) ) {
					I = new Icon( Lang13.Initial( this, "icon" ), "" + this.icon_state + "_pixel" );
					I.Turn( this.target_angle + 45 );
					GlobalVars.bullet_master["" + this.icon_state + "_angle" + this.target_angle] = I;
				}
				this.icon = GlobalVars.bullet_master["" + this.icon_state + "_angle" + this.target_angle];
			}
			return;
		}

		// Function from file: projectile.dm
		public virtual void dumbfire( int dir = 0 ) {
			bool first = false;
			bool tS = false;
			Tile T = null;

			
			if ( !( dir != 0 ) ) {
				this.OnDeath();
				GlobalFuncs.returnToPool( this );
			}

			if ( ( this.kill_count ??0) < 1 ) {
				this.OnDeath();
				GlobalFuncs.returnToPool( this );
			}
			this.kill_count--;
			first = true;
			tS = false;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this.loc != null) {
					
					if ( first && this.timestopped ) {
						tS = true;
						this.timestopped = false;
					}
					T = Map13.GetStep( this, dir );
					Map13.StepTowardsSimple( this, T );

					if ( !this.bumped && !( this.original is Tile ) ) {
						
						if ( this.loc == GlobalFuncs.get_turf( this.original ) ) {
							
							if ( !this.permutated.Contains( this.original ) ) {
								this.Bump( this.original );
								Task13.Sleep( 1 );
							}
						}
					}

					while (( this.loc.timestopped || this.timestopped ) && !first) {
						Task13.Sleep( 3 );
					}
					first = false;

					if ( tS ) {
						this.timestopped = this.loc.timestopped;
						tS = false;
					}
					Task13.Sleep( 1 );
				}
				return;
			}));
			return;
		}

		// Function from file: projectile.dm
		public virtual bool bump_original_check(  ) {
			
			if ( !this.bumped && !( this.original is Tile ) ) {
				
				if ( this.loc == GlobalFuncs.get_turf( this.original ) ) {
					
					if ( !this.permutated.Contains( this.original ) ) {
						this.Bump( this.original );
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: projectile.dm
		public virtual void bullet_die(  ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.OnDeath();
				GlobalFuncs.returnToPool( this );
				return;
			}));
			return;
		}

		// Function from file: projectile.dm
		public void update_pixel(  ) {
			int AX = 0;
			int AY = 0;
			int BX = 0;
			int BY = 0;
			double XX = 0;

			
			if ( this != null && Lang13.Bool( this.starting ) && Lang13.Bool( this.target ) ) {
				AX = ( this.override_starting_X - this.x ) * 32;
				AY = ( this.override_starting_Y - this.y ) * 32;
				BX = ( this.override_target_X - this.x ) * 32;
				BY = ( this.override_target_Y - this.y ) * 32;
				XX = ( ( BX - AX ) * ( -BX ) + ( BY - AY ) * ( -BY ) ) / ( ( BX - AX ) * ( BX - AX ) + ( BY - AY ) * ( BY - AY ) );
				this.PixelX = Num13.Floor( BX + ( BX - AX ) * XX );
				this.PixelY = Num13.Floor( BY + ( BY - AY ) * XX );

				switch ((int?)( this.last_bump )) {
					case 1:
						this.PixelY -= 16;
						break;
					case 2:
						this.PixelY += 16;
						break;
					case 4:
						this.PixelX -= 16;
						break;
					case 8:
						this.PixelX += 16;
						break;
				}
			}
			return;
		}

		// Function from file: projectile.dm
		public virtual dynamic bresenham_step( double distA = 0, double distB = 0, double? dA = null, double? dB = null, Ent_Static lastposition = null, double? target_dir = null, dynamic reference = null ) {
			Tile step = null;
			Tile step2 = null;

			
			if ( this.step_delay != 0 ) {
				Task13.Sleep( ((int)( this.step_delay )) );
			}

			if ( ( this.kill_count ??0) < 1 ) {
				this.bullet_die();
				return 1;
			}
			this.kill_count--;
			this.total_steps++;

			if ( this.error < 0 ) {
				step = Map13.GetStep( this, ((int)( dB ??0 )) );

				if ( !( step != null ) ) {
					this.bullet_die();
				}
				this.Move( step );
				this.error += distA;
				this.bump_original_check();
				return 0;
			} else {
				step2 = Map13.GetStep( this, ((int)( dA ??0 )) );

				if ( !( step2 != null ) ) {
					this.bullet_die();
				}
				this.Move( step2 );
				this.error -= distB;
				this.dir = ((int)( dA ??0 ));

				if ( this.error < 0 ) {
					this.dir = ((int)( ( dA ??0) + ( dB ??0) ));
				}
				this.bump_original_check();
				return 1;
			}
		}

		// Function from file: projectile.dm
		public virtual void process_step(  ) {
			dynamic sleeptime = null;

			sleeptime = 1;

			if ( this.loc != null ) {
				
				if ( this.dist_x > this.dist_y ) {
					sleeptime = this.bresenham_step( this.dist_x, this.dist_y, this.dx, this.dy );
				} else {
					sleeptime = this.bresenham_step( this.dist_y, this.dist_x, this.dy, this.dx );
				}

				if ( this.linear_movement ) {
					this.update_pixel();
					this.pixel_x = this.PixelX;
					this.pixel_y = this.PixelY;
				}
				this.bumped = false;
				Task13.Sleep( Convert.ToInt32( sleeptime ) );
			}
			return;
		}

		// Function from file: projectile.dm
		public virtual bool OnFired(  ) {
			Icon I = null;

			this.target = GlobalFuncs.get_turf( this.original );
			this.dist_x = Math.Abs( Convert.ToDouble( this.target.x - this.starting.x ) );
			this.dist_y = Math.Abs( Convert.ToDouble( this.target.y - this.starting.y ) );
			this.override_starting_X = Convert.ToInt32( this.starting.x );
			this.override_starting_Y = Convert.ToInt32( this.starting.y );
			this.override_target_X = Convert.ToInt32( this.target.x );
			this.override_target_Y = Convert.ToInt32( this.target.y );

			if ( Convert.ToDouble( this.target.x ) > Convert.ToDouble( this.starting.x ) ) {
				this.dx = GlobalVars.EAST;
			} else {
				this.dx = GlobalVars.WEST;
			}

			if ( Convert.ToDouble( this.target.y ) > Convert.ToDouble( this.starting.y ) ) {
				this.dy = GlobalVars.NORTH;
			} else {
				this.dy = GlobalVars.SOUTH;
			}

			if ( this.dist_x > this.dist_y ) {
				this.error = this.dist_x / 2 - this.dist_y;
			} else {
				this.error = this.dist_y / 2 - this.dist_x;
			}
			this.target_angle = Num13.Floor( GlobalFuncs.Get_Angle( this.starting, this.target ) );

			if ( this.linear_movement ) {
				
				if ( !GlobalVars.bullet_master.Contains( "" + this.icon_state + "_angle" + this.target_angle ) ) {
					I = new Icon( this.icon, "" + this.icon_state + "_pixel" );
					I.Turn( this.target_angle + 45 );
					GlobalVars.bullet_master["" + this.icon_state + "_angle" + this.target_angle] = I;
				}
				this.icon = GlobalVars.bullet_master["" + this.icon_state + "_angle" + this.target_angle];
			}
			return true;
		}

		// Function from file: projectile.dm
		public virtual bool OnDeath(  ) {
			return true;
		}

		// Function from file: projectile.dm
		public void admin_warn( Obj M = null ) {
			
			if ( this.firer is Mob ) {
				
				if ( this.firer == M ) {
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + GlobalFuncs.key_name( this.firer ) + " shot himself with a " + this.type + ".</font>" ) ) );
					((dynamic)M).attack_log += "[" + GlobalFuncs.time_stamp() + "] <b>" + GlobalFuncs.key_name( this.firer ) + "</b> shot himself with a <b>" + this.type + "</b>";
					this.firer.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <b>" + GlobalFuncs.key_name( this.firer ) + "</b> shot himself with a <b>" + this.type + "</b>" );
					GlobalFuncs.msg_admin_attack( "" + GlobalFuncs.key_name( this.firer ) + " shot himself with a " + this.type + ", " + Rand13.Pick(new object [] { "top kek!", "for shame.", "he definitely meant to do that", "probably not the last time either." }) + " (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.firer.x + ";Y=" + this.firer.y + ";Z=" + this.firer.z + "'>JMP</a>)" );

					if ( !( this.firer is Mob_Living_Carbon ) ) {
						((dynamic)M).LAssailant = null;
					} else {
						((dynamic)M).LAssailant = this.firer;
					}
				} else {
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + GlobalFuncs.key_name( this.firer ) + " shot " + GlobalFuncs.key_name( M ) + " with a " + this.type + "</font>" ) ) );
					((dynamic)M).attack_log += "[" + GlobalFuncs.time_stamp() + "] <b>" + GlobalFuncs.key_name( this.firer ) + "</b> shot <b>" + GlobalFuncs.key_name( M ) + "</b> with a <b>" + this.type + "</b>";
					this.firer.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <b>" + GlobalFuncs.key_name( this.firer ) + "</b> shot <b>" + GlobalFuncs.key_name( M ) + "</b> with a <b>" + this.type + "</b>" );
					GlobalFuncs.msg_admin_attack( "" + GlobalFuncs.key_name( this.firer ) + " shot " + GlobalFuncs.key_name( M ) + " with a " + this.type + " (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.firer.x + ";Y=" + this.firer.y + ";Z=" + this.firer.z + "'>JMP</a>)" );

					if ( !( this.firer is Mob_Living_Carbon ) ) {
						((dynamic)M).LAssailant = null;
					} else {
						((dynamic)M).LAssailant = this.firer;
					}
				}
			} else {
				((dynamic)M).attack_log += "[" + GlobalFuncs.time_stamp() + "] <b>UNKNOWN/(no longer exists)</b> shot <b>UNKNOWN/(no longer exists)</b> with a <b>" + this.type + "</b>";
				GlobalFuncs.msg_admin_attack( "UNKNOWN/(no longer exists) shot UNKNOWN/(no longer exists) with a " + this.type + ". Wait what the fuck?" );
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>UNKNOWN/(no longer exists) shot UNKNOWN/(no longer exists) with a " + this.type + "</font>" ) ) );
			}
			return;
		}

		// Function from file: projectile.dm
		public dynamic check_fire( Mob_Living target = null, Mob user = null ) {
			Game_Data in_chamber = null;
			dynamic output = null;

			
			if ( !( target is Mob_Living ) || !( user is Mob_Living ) ) {
				return 0;
			}
			in_chamber = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Test), Map13.GetStepTowards( user, target, 0 ) );
			((dynamic)in_chamber).target = target;
			((dynamic)in_chamber).ttarget = target;
			((dynamic)in_chamber).flags = this.flags;
			((dynamic)in_chamber).pass_flags = this.pass_flags;
			((dynamic)in_chamber).firer = user;
			output = ((Obj)in_chamber).process();
			GlobalFuncs.returnToPool( in_chamber );
			return output;
		}

		// Function from file: projectile.dm
		public virtual bool on_hit( dynamic atarget = null, int? blocked = null ) {
			blocked = blocked ?? 0;

			dynamic M = null;
			dynamic L = null;

			
			if ( ( blocked ??0) >= 2 ) {
				return false;
			}

			if ( !( atarget is Mob_Living ) ) {
				return false;
			}

			if ( atarget is Mob_Living_SimpleAnimal_Mouse && ( this.stun ??0) + ( this.weaken ??0) + ( this.paralyze == true ?1:0) + ( this.agony ??0) > 5 ) {
				M = atarget;
				GlobalFuncs.to_chat( M, "<span class='warning'>What would probably not kill a human completely overwhelms your tiny body.</span>" );
				((Mob_Living_SimpleAnimal_Mouse)M).splat();
				return true;
			}

			if ( atarget is Mob_Living_SimpleAnimal ) {
				return false;
			}
			L = atarget;

			if ( Lang13.Bool( L.flags & 128 ) ) {
				return false;
			}
			((Mob_Living)L).apply_effects( this.stun, this.weaken, this.paralyze, this.irradiate, this.stutter, this.eyeblur, this.drowsy, this.agony, blocked );

			if ( this.jittery != 0 ) {
				((Mob)L).Jitter( this.jittery );
			}
			return true;
		}

	}

}