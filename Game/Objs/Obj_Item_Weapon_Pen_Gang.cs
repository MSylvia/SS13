// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Pen_Gang : Obj_Item_Weapon_Pen {

		public bool cooldown = false;
		public int last_used = 0;
		public int charges = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "materials=2;syndicate=5";
		}

		// Function from file: gang_pen.dm
		public Obj_Item_Weapon_Pen_Gang ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.last_used = Game13.time;
			return;
		}

		// Function from file: gang_pen.dm
		[VerbInfo( name: "cooldown" )]
		public void f_cooldown( dynamic gang = null ) {
			int cooldown_time = 0;
			int time_passed = 0;
			int time = 0;
			dynamic M = null;

			cooldown_time = gang.bosses.len * 600 + 600;
			this.cooldown = true;
			this.icon_state = "pen_blink";
			time_passed = Game13.time - this.last_used;
			time = time_passed;

			while (time >= cooldown_time) {
				this.charges++;
				time -= cooldown_time;
			}
			this.charges = Num13.MaxInt( 0, this.charges - 1 );
			this.last_used = Game13.time - time;

			if ( this.charges != 0 ) {
				cooldown_time = 50;
			}
			Task13.Schedule( cooldown_time, (Task13.Closure)(() => {
				this.cooldown = false;
				this.icon_state = "pen";
				M = GlobalFuncs.get( this, typeof(Mob) );
				M.WriteMsg( new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).item( ( this.loc == M ? "" : " in your " + this.loc ) ).str( " vibrates softly. It is ready to be used again.</span>" ).ToString() );
				return;
			}));
			return;
		}

		// Function from file: gang_pen.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic G = null;
			int recruitable = 0;

			
			if ( !( M is Mob_Living ) ) {
				return false;
			}

			if ( M is Mob_Living_Carbon_Human && user is Mob_Living_Carbon_Human && Convert.ToInt32( M.stat ) != 2 ) {
				
				if ( Lang13.Bool( user.mind ) && ((GameMode)GlobalVars.ticker.mode).get_gang_bosses().Contains( user.mind ) ) {
					
					if ( base.attack( (object)(M), (object)(user), true ) ) {
						
						if ( this.cooldown ) {
							user.WriteMsg( "<span class='warning'>" + this + " needs more time to recharge before it can be used.</span>" );
							return false;
						}

						if ( Lang13.Bool( M.client ) ) {
							((Mob)M).mind_initialize();
							G = user.mind.gang_datum;
							recruitable = ((GameMode)GlobalVars.ticker.mode).add_gangster( M.mind, G );

							switch ((int)( recruitable )) {
								case 2:
									((Mob)M).Paralyse( 5 );
									this.f_cooldown( G );
									break;
								case 1:
									user.WriteMsg( "<span class='warning'>This mind is resistant to recruitment!</span>" );
									break;
								default:
									user.WriteMsg( "<span class='warning'>This mind has already been recruited into a gang!</span>" );
									break;
							}
						}
					}
					return false;
				}
			}
			base.attack( (object)(M), (object)(user), def_zone );
			return false;
		}

	}

}