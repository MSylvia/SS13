// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_PFolded : Obj_Item_Weapon {

		public dynamic unfolded = typeof(Obj_Item_Weapon_Paper);
		public bool nano = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throwforce = 0;
			this.w_class = 1;
			this.throw_range = 1;
			this.throw_speed = 1;
			this.pressure_resistance = 1;
			this.attack_verb = new ByTable(new object [] { "slapped" });
			this.autoignition_temperature = 519.1500244140625;
			this.fire_fuel = 1;
			this.icon = "icons/obj/paper.dmi";
			this.icon_state = "paper";
			this.layer = 3.9;
		}

		public Obj_Item_Weapon_PFolded ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: paper_folded.dm
		public bool canunfold( Obj_Item_Weapon_PFolded P = null, dynamic user = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return false;
			}

			if ( Lang13.Bool( user.stat ) || ((Mob)user).restrained() ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You can't do that while restrained.</span>" );
				return false;
			}

			if ( user.l_hand != P && user.r_hand != P ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You'll need " ).the( this ).item().str( " in your hands to do that.</span>" ).ToString() );
				return false;
			}
			return true;
		}

		// Function from file: paper_folded.dm
		public bool processunfolding( Obj_Item_Weapon_PFolded P = null, dynamic user = null ) {
			new ByTable().Set( 1, P ).Set( 2, this ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( user, "drop_item" ) );

			if ( Lang13.Bool( P.unfolded ) ) {
				((Mob)user).put_in_hands( P.unfolded );
				((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " unfolds " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You unfold " ).the( this ).item().str( ".</span>" ).ToString() );
				((Ent_Static)P.unfolded).add_fingerprint( user );
			}
			P.unfolded = null;
			GlobalFuncs.qdel( P );
			return true;
		}

		// Function from file: paper_folded.dm
		public override bool throw_at( dynamic target = null, double? range = null, dynamic speed = null, bool? _override = null ) {
			this.pixel_y = Rand13.Int( -7, 7 );
			this.pixel_x = Rand13.Int( -8, 8 );
			base.throw_at( (object)(target), range, (object)(speed), _override );
			return false;
		}

		// Function from file: paper_folded.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string N = null;
			dynamic C = null;

			
			if ( a is Obj_Item_Weapon_Pen ) {
				N = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( b, "What would you like to name " + this.name + "?", "Paper Labelling", null, null, InputType.Str ) ), 1, 26 );

				if ( Lang13.Bool( N ) && this.Adjacent( b ) && !Lang13.Bool( b.stat ) ) {
					this.name = N;
				}
			} else if ( a is Obj_Item_Toy_Crayon ) {
				C = a;
				this.color = C.colour;
				this.unfolded.color = C.colour;
			} else if ( Lang13.Bool( ((Obj)a).is_hot() ) ) {
				this.ashify_item( b );
				return null;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: paper_folded.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.canunfold( this, user ) ) {
				return null;
			}
			this.processunfolding( this, user );
			return null;
		}

		// Function from file: paper_folded.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( Lang13.Bool( this.unfolded ) ) {
				GlobalFuncs.qdel( this.unfolded );
			}
			return base.Destroy( (object)(brokenup) );
		}

		// Function from file: paper_folded.dm
		[Verb]
		[VerbInfo( name: "Unfold", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void unfold(  ) {
			
			if ( !this.canunfold( this, Task13.User ) ) {
				return;
			}
			this.processunfolding( this, Task13.User );
			return;
		}

	}

}