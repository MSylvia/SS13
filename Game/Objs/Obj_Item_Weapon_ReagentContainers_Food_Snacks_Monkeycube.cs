// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Snacks_Monkeycube : Obj_Item_Weapon_ReagentContainers_Food_Snacks {

		public Type monkey_type = typeof(Mob_Living_Carbon_Monkey);

		protected override void __FieldInit() {
			base.__FieldInit();

			this.bitesize = 12;
			this.food_flags = 1;
			this.icon_state = "monkeycube";
		}

		// Function from file: snacks.dm
		public Obj_Item_Weapon_ReagentContainers_Food_Snacks_Monkeycube ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			((Reagents)this.reagents).add_reagent( "nutriment", 10 );
			return;
		}

		// Function from file: snacks.dm
		public void Unwrap( dynamic user = null ) {
			this.icon_state = "monkeycube";
			this.desc = "Just add water!";
			GlobalFuncs.to_chat( user, "You unwrap the cube." );
			this.wrapped = false;
			return;
		}

		// Function from file: snacks.dm
		public void Expand(  ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( 7, this ) )) {
				M = _a;
				
				GlobalFuncs.to_chat( M, new Txt( "<span class='warning'>" ).The( this ).item().str( " expands!</span>" ).ToString() );
			}
			Lang13.Call( this.monkey_type, GlobalFuncs.get_turf( this ) );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: snacks.dm
		public override void On_Consume( dynamic user = null, dynamic reagentreference = null ) {
			Obj_Item_Weapon surprise = null;
			dynamic ook = null;
			dynamic H = null;
			dynamic E = null;
			Organ_Internal I = null;
			dynamic ook2 = null;

			GlobalFuncs.to_chat( user, "<span class = 'warning'>Something inside of you suddently expands!</span>" );

			if ( user is Mob_Living_Carbon_Human ) {
				surprise = new Obj_Item_Weapon( user );
				ook = Lang13.Call( this.monkey_type, null );
				surprise.icon = ook.icon;
				surprise.icon_state = ook.icon_state;
				surprise.name = "malformed " + ook.name;
				surprise.desc = new Txt( "Looks like " ).a( ook.name ).str( "very deformed " ).item().str( ", a little small for its kind. It shows no signs of life." ).ToString();
				GlobalFuncs.qdel( ook );
				surprise.transform *= 0.6;
				surprise.add_blood( user );
				H = user;
				E = ((Mob_Living_Carbon_Human)H).get_organ( "chest" );
				((Organ_External)E).fracture();

				foreach (dynamic _a in Lang13.Enumerate( E.internal_organs, typeof(Organ_Internal) )) {
					I = _a;
					
					I.take_damage( Rand13.Int( ((int)( I.min_bruised_damage )), ((int)( I.min_broken_damage + 1 )) ) );
				}

				if ( !Lang13.Bool( E.hidden ) && Rand13.PercentChance( 60 ) ) {
					E.hidden = surprise;
					E.cavity = false;
				} else {
					((Organ_External)E).createwound( "cut", 30 );
					((Organ_External)E).embed( surprise );
				}
			} else if ( user is Mob_Living_Carbon_Monkey ) {
				((Ent_Static)user).visible_message( "<span class='danger'>" + user + " suddenly tears in half!</span>" );
				ook2 = Lang13.Call( this.monkey_type, user.loc );
				ook2.name = "malformed " + ook2.name;
				ook2.transform *= 0.6;
				((Ent_Static)ook2).add_blood( user );
				((Mob)user).gib();
			}
			base.On_Consume( (object)(user), (object)(reagentreference) );
			return;
		}

		// Function from file: snacks.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.wrapped ) {
				this.Unwrap( user );
			}
			return null;
		}

		// Function from file: snacks.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( A is Obj_Structure_Sink && !this.wrapped ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You place " + this + " under a stream of water...</span>" );
				this.Expand(); return false;
			}
			base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );
			return false;
		}

	}

}