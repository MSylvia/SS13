// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Mousetrap : Obj_Item_Device_Assembly {

		public bool armed = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.starting_materials = new ByTable().Set( "$iron", 100 );
			this.w_type = 4;
			this.origin_tech = "combat=1";
			this.wires = 2;
			this.icon_state = "mousetrap";
		}

		public Obj_Item_Device_Assembly_Mousetrap ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: mousetrap.dm
		public override void hitby( Ent_Static AM = null, dynamic speed = null, int? dir = null ) {
			
			if ( !this.armed ) {
				base.hitby( AM, (object)(speed), dir ); return;
			}
			this.visible_message( "<span class='warning'>" + this + " is triggered by " + AM + ".</span>" );
			this.triggered( null );
			return;
		}

		// Function from file: mousetrap.dm
		public override bool on_found( dynamic finder = null ) {
			
			if ( this.armed ) {
				((Ent_Static)finder).visible_message( "<span class='warning'>" + finder + " accidentally sets off " + this + ", breaking their fingers.</span>", "<span class='warning'>You accidentally trigger " + this + "!</span>" );
				this.triggered( finder, ( finder.hand == true ? "l_hand" : "r_hand" ) );
				return true;
			}
			return false;
		}

		// Function from file: mousetrap.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic H = null;

			
			if ( this.armed ) {
				
				if ( O is Mob_Living_Carbon_Human ) {
					H = O;

					if ( ((dynamic)H).m_intent == "run" ) {
						this.triggered( H );
						H.visible_message( "<span class='warning'>" + H + " accidentally steps on " + this + ".</span>", "<span class='warning'>You accidentally step on " + this + "</span>" );
					}
				}

				if ( O is Mob_Living_SimpleAnimal_Mouse ) {
					this.triggered( O );
				}
			}
			base.Crossed( O, (object)(X) );
			return null;
		}

		// Function from file: mousetrap.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string which_hand = null;

			
			if ( this.armed ) {
				Interface13.Stat( null, a.mutations.Contains( ((Mob_Living)a).getBrainLoss() >= 60 || 5 != 0 ) );

				if ( false && Rand13.PercentChance( 50 ) ) {
					which_hand = "l_hand";

					if ( !( a.hand == true ) ) {
						which_hand = "r_hand";
					}
					this.triggered( a, which_hand );
					((Ent_Static)a).visible_message( "<span class='warning'>" + a + " accidentally sets off " + this + ", breaking their fingers.</span>", "<span class='warning'>You accidentally trigger " + this + "!</span>" );
					return null;
				}
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: mousetrap.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string which_hand = null;

			
			if ( !this.armed ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You arm " + this + ".</span>" );
			} else {
				
				if ( ( ((Mob_Living)user).getBrainLoss() >= 60 || false ) && Rand13.PercentChance( 50 ) ) {
					which_hand = "l_hand";

					if ( !( user.hand == true ) ) {
						which_hand = "r_hand";
					}
					this.triggered( user, which_hand );
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " accidentally sets off " + this + ", breaking their fingers.</span>", "<span class='warning'>You accidentally trigger " + this + "!</span>" );
					return null;
				}
				GlobalFuncs.to_chat( user, "<span class='notice'>You disarm " + this + ".</span>" );
			}
			this.armed = !this.armed;
			this.update_icon();
			GlobalFuncs.playsound( user.loc, "sound/weapons/handcuffs.ogg", 30, 1, -3 );
			return null;
		}

		// Function from file: mousetrap.dm
		public void triggered( dynamic target = null, string type = null ) {
			type = type ?? "feet";

			dynamic affecting = null;
			dynamic H = null;
			dynamic M = null;

			
			if ( !this.armed ) {
				return;
			}
			affecting = null;

			if ( target is Mob_Living_Carbon_Human ) {
				H = target;

				switch ((string)( type )) {
					case "feet":
						
						if ( !Lang13.Bool( H.shoes ) ) {
							affecting = ((Mob_Living_Carbon_Human)H).get_organ( Rand13.Pick(new object [] { "l_leg", "r_leg" }) );
							((Mob)H).Weaken( 3 );
						}
						break;
					case "l_hand":
					case "r_hand":
						
						if ( !Lang13.Bool( H.gloves ) ) {
							affecting = ((Mob_Living_Carbon_Human)H).get_organ( type );
							((Mob)H).Stun( 3 );
						}
						break;
				}

				if ( Lang13.Bool( affecting ) ) {
					
					if ( Lang13.Bool( affecting.take_damage( 1, 0 ) ) ) {
						((Mob_Living)H).UpdateDamageIcon();
					}
					((Mob_Living)H).updatehealth();
				}
			} else if ( target is Mob_Living_SimpleAnimal_Mouse ) {
				M = target;
				this.visible_message( "<span class='danger'>SPLAT!</span>" );
				((Mob_Living_SimpleAnimal_Mouse)M).splat();
			}
			GlobalFuncs.playsound( target.loc, "sound/effects/snap.ogg", 50, 1 );
			this.armed = false;
			this.update_icon();
			this.pulse( false );
			return;
		}

		// Function from file: mousetrap.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.armed ) {
				this.icon_state = "mousetraparmed";
			} else {
				this.icon_state = "mousetrap";
			}

			if ( this.holder != null ) {
				this.holder.update_icon();
			}
			return null;
		}

		// Function from file: mousetrap.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.armed ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>It looks like it's armed.</span>" );
			}
			return null;
		}

		// Function from file: mousetrap.dm
		[Verb]
		[VerbInfo( name: "Hide", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void hide_under(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}
			this.layer = 2.2;
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You hide " + this + ".</span>" );
			return;
		}

	}

}