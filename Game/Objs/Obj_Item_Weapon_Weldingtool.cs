// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Weldingtool : Obj_Item_Weapon {

		public bool welding = false;
		public bool status = true;
		public double? max_fuel = 20;
		public bool start_fueled = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.hitsound = "sound/weapons/toolhit.ogg";
			this.slot_flags = 512;
			this.force = 3;
			this.throwforce = 5;
			this.throw_speed = 1;
			this.throw_range = 5;
			this.w_class = 2;
			this.sharpness = 0.8;
			this.heat_production = 3800;
			this.starting_materials = new ByTable().Set( "$iron", 70 ).Set( "$glass", 30 );
			this.w_type = 1;
			this.melt_temperature = 453.41;
			this.origin_tech = "engineering=1";
			this.icon_state = "welder";
		}

		// Function from file: tools.dm
		public Obj_Item_Weapon_Weldingtool ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( this.max_fuel );

			if ( this.start_fueled ) {
				((Reagents)this.reagents).add_reagent( "fuel", this.max_fuel );
			}
			return;
		}

		// Function from file: tools.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			Organ_External S = null;

			
			if ( GlobalFuncs.hasorgans( M ) ) {
				
				if ( GlobalFuncs.can_operate( M ) ) {
					
					if ( GlobalFuncs.do_surgery( M, user, this ) ) {
						return null;
					}
				}
				S = M.organs_by_name[((dynamic)user.zone_sel).selecting];

				if ( !( S != null ) ) {
					return null;
				}

				if ( !( ( S.status & 128 ) != 0 ) || user.a_intent != "help" ) {
					return base.attack( (object)(M), (object)(user), def_zone, eat_override );
				}

				if ( S.brute_dam != 0 ) {
					S.heal_damage( 15, 0, false, true );

					if ( user != M ) {
						((Ent_Static)user).visible_message( new Txt( "<span class='attack'>" ).The( user ).item().str( " patches some dents on " ).the( M ).item().str( "'s " ).item( S.display_name ).str( " with " ).the( this ).item().str( "</span>" ).ToString(), new Txt( "<span class='attack'>You patch some dents on " ).the( M ).item().str( "'s " ).item( S.display_name ).str( "</span>" ).ToString(), "You hear a welder." );
					} else {
						((Ent_Static)user).visible_message( new Txt( "<span class='attack'>" ).The( user ).item().str( " patches some dents on their " ).item( S.display_name ).str( " with " ).the( this ).item().str( "</span>" ).ToString(), "<span class='attack'>You patch some dents on your " + S.display_name + "</span>", "You hear a welder." );
					}
				} else {
					GlobalFuncs.to_chat( user, "Nothing to fix!" );
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: tools.dm
		public override dynamic is_sharp(  ) {
			
			if ( this.isOn() ) {
				return this.sharpness;
			}
			return 0;
		}

		// Function from file: tools.dm
		public override double? is_hot(  ) {
			
			if ( this.isOn() ) {
				return this.heat_production;
			}
			return 0;
		}

		// Function from file: tools.dm
		public bool eyecheck( dynamic user = null ) {
			dynamic safety = null;
			dynamic H = null;
			Organ_Internal E = null;
			Obj_Item_Clothing to_blame = null;

			
			if ( !( user is Mob_Living_Carbon ) ) {
				return true;
			}
			safety = user.eyecheck();

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;
				E = H.internal_organs_by_name["eyes"];

				if ( !( E != null ) ) {
					return false;
				}

				if ( Lang13.Bool( H.species.flags & 16384 ) ) {
					return false;
				}

				if ( Convert.ToDouble( safety ) < 2 ) {
					
					dynamic _a = safety; // Was a switch-case, sorry for the mess.
					if ( _a==1 ) {
						Task13.User.simple_message( "<span class='warning'>Your eyes sting a little.</span>", "<span class='warning'>You shed a tear.</span>" );
						E.damage += Rand13.Int( 1, 2 );

						if ( E.damage > 12 ) {
							user.eye_blurry += Rand13.Int( 3, 6 );
						}
					} else if ( _a==0 ) {
						Task13.User.simple_message( "<span class='warning'>Your eyes burn.</span>", "<span class='warning'>Some tears fall down from your eyes.</span>" );
						E.damage += Rand13.Int( 2, 4 );

						if ( E.damage > 10 ) {
							E.damage += Rand13.Int( 4, 10 );
						}
					} else if ( _a==-1 ) {
						to_blame = H.head;

						if ( !( to_blame != null ) || to_blame is Obj_Item_Clothing && Lang13.Bool( H.glasses ) && H.glasses.eyeprot < to_blame.eyeprot ) {
							to_blame = H.glasses;
						}
						Task13.User.simple_message( "<span class='warning'>Your " + to_blame + " intensifies the welder's glow. Your eyes itch and burn severely.</span>", "<span class='warning'>Somebody's cutting onions.</span>" );
						user.eye_blurry += Rand13.Int( 12, 20 );
						E.damage += Rand13.Int( 12, 16 );
					}

					if ( E.damage > 10 && Convert.ToDouble( safety ) < 2 ) {
						((Mob)user).simple_message( "<span class='warning'>Your eyes are really starting to hurt. This can't be good for you!</span>", "<span class='warning'>This is too sad! You start to cry.</span>" );
					}

					if ( E.damage >= E.min_broken_damage ) {
						((Mob)user).simple_message( "<span class='warning'>You go blind!</span>", "<span class='warning'>Somebody turns the lights off.</span>" );
						user.sdisabilities |= 1;
					} else if ( E.damage >= E.min_bruised_damage ) {
						((Mob)user).simple_message( "<span class='warning'>You go blind!</span>", "<span class='warning'>Somebody turns the lights off.</span>" );
						user.eye_blind = 5;
						user.eye_blurry = 5;
						user.disabilities |= 1;
						Task13.Schedule( 100, (Task13.Closure)(() => {
							user.disabilities &= 65534;
							return;
						}));
					}
				}
			}
			return false;
		}

		// Function from file: tools.dm
		public void toggle( bool? message = null ) {
			message = message ?? false;

			
			if ( !this.status ) {
				return;
			}
			this.welding = !this.welding;

			if ( this.welding ) {
				
				if ( this.remove_fuel( 1 ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You switch the " + this + " on.</span>" );
					this.force = 15;
					this.damtype = "fire";
					this.icon_state = "welder1";
					GlobalVars.processing_objects.Add( this );
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Need more fuel!</span>" );
					this.welding = false;
					return;
				}
			} else {
				
				if ( !( message == true ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You switch the " + this + " off.</span>" );
				} else {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " shuts off!</span>" ).ToString() );
				}
				this.force = 3;
				this.damtype = "brute";
				this.icon_state = "welder";
				this.welding = false;
			}
			return;
		}

		// Function from file: tools.dm
		public bool check_fuel(  ) {
			
			if ( ( this.get_fuel() ?1:0) <= 0 && this.welding ) {
				this.toggle( true );
				return false;
			}
			return true;
		}

		// Function from file: tools.dm
		public void setWelding( bool temp_welding = false ) {
			
			if ( ( temp_welding ?1:0) > 0 ) {
				
				if ( this.remove_fuel( 1 ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " switches on.</span>" ).ToString() );
					this.force = 15;
					this.damtype = "fire";
					this.icon_state = "welder1";
					GlobalVars.processing_objects.Add( this );
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Need more fuel!</span>" );
					this.welding = false;
					return;
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " switches off.</span>" ).ToString() );
				this.force = 3;
				this.damtype = "brute";
				this.icon_state = "welder";
				this.welding = false;
			}
			return;
		}

		// Function from file: tools.dm
		public bool isOn(  ) {
			return this.welding;
		}

		// Function from file: tools.dm
		public bool remove_fuel( double? amount = null, dynamic M = null ) {
			amount = amount ?? 1;

			
			if ( !this.welding || !this.check_fuel() ) {
				return false;
			}

			if ( ( this.get_fuel() ?1:0) >= ( amount ??0) ) {
				((Reagents)this.reagents).remove_reagent( "fuel", amount );
				this.check_fuel();

				if ( Lang13.Bool( M ) ) {
					this.eyecheck( M );
				}
				return true;
			} else {
				
				if ( Lang13.Bool( M ) ) {
					GlobalFuncs.to_chat( M, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
				}
				return false;
			}
		}

		// Function from file: tools.dm
		public bool get_fuel(  ) {
			return ((Reagents)this.reagents).get_reagent_amount( "fuel" );
		}

		// Function from file: tools.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.toggle();
			return null;
		}

		// Function from file: tools.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic tank = null;
			dynamic location = null;
			dynamic L = null;

			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( A is Obj_Structure_ReagentDispensers_Fueltank && Map13.GetDistance( this, A ) <= 1 && !this.welding ) {
				((Reagents)A.reagents).trans_to( this, this.max_fuel );
				GlobalFuncs.to_chat( user, "<span class='notice'>Welder refueled</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/refill.ogg", 50, 1, -6 );
				return false;
			} else if ( A is Obj_Structure_ReagentDispensers_Fueltank && Map13.GetDistance( this, A ) <= 1 && this.welding ) {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " triggered a fueltank explosion." );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( user ) + " triggered a fueltank explosion." ) ) );
				GlobalFuncs.to_chat( user, "<span class='warning'>That was stupid of you.</span>" );
				tank = A;
				((Obj_Structure_ReagentDispensers_Fueltank)tank).explode();
				return false;
			}

			if ( this.welding ) {
				this.remove_fuel( 1 );
				location = GlobalFuncs.get_turf( user );

				if ( location is Tile ) {
					((Tile)location).hotspot_expose( 700, 50, true, true );

					if ( A is Mob_Living ) {
						L = A;
						((Mob_Living)L).IgniteMob();
					}
				}
			}
			return false;
		}

		// Function from file: tools.dm
		public override dynamic process(  ) {
			dynamic location = null;
			dynamic M = null;

			
			switch ((bool)( this.welding )) {
				case 0:
					
					if ( this.icon_state != "welder" ) {
						this.force = 3;
						this.damtype = "brute";
						this.icon_state = "welder";
						this.hitsound = "sound/weapons/toolhit.ogg";
						this.welding = false;
					}
					GlobalVars.processing_objects.Remove( this );
					return null;
					break;
				case 1:
					
					if ( this.icon_state != "welder1" ) {
						this.force = 15;
						this.damtype = "fire";
						this.icon_state = "welder1";
						this.hitsound = "sound/weapons/welderattack.ogg";
					}

					if ( Rand13.PercentChance( 5 ) ) {
						this.remove_fuel( 1 );
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 75 ) ) {
						this.remove_fuel( 1 );
					}
					break;
			}
			location = this.loc;

			if ( location is Mob ) {
				M = location;

				if ( M.l_hand == this || M.r_hand == this ) {
					location = GlobalFuncs.get_turf( M );
				}
			}

			if ( location is Tile ) {
				((Tile)location).hotspot_expose( 700, 5, null, this.loc is Tile );
			}
			return null;
		}

		// Function from file: tools.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic R = null;
			Obj_Item_Weapon_Flamethrower F = null;

			
			if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.welding ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>Stop welding first!</span>" );
					return null;
				}
				this.status = !this.status;

				if ( this.status ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You resecure the welder.</span>" );
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>The welder can now be attached and modified.</span>" );
				}
				this.add_fingerprint( b );
				return null;
			}

			if ( !this.status && a is Obj_Item_Stack_Rods ) {
				R = a;
				R.use( 1 );
				F = new Obj_Item_Weapon_Flamethrower( b.loc );
				this.loc = F;
				F.weldtool = this;

				if ( Lang13.Bool( b.client ) ) {
					b.client.screen -= this;
				}

				if ( b.r_hand == this ) {
					((Mob)b).u_equip( this, false );
				} else {
					((Mob)b).u_equip( this, false );
				}
				this.master = F;
				this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );
				((Mob)b).u_equip( this, false );

				if ( Lang13.Bool( b.client ) ) {
					b.client.screen -= this;
				}
				this.loc = F;
				this.add_fingerprint( b );
				return null;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: tools.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "It contains " + this.get_fuel() + "/" + this.max_fuel + " units of fuel!" );
			return null;
		}

		// Function from file: tools.dm
		public override dynamic suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " is burning " ).his_her_its_their().str( " face off with the " ).item( this.name ).str( "! It looks like " ).he_she_it_they().str( "'s  trying to commit suicide!</span>" ).ToString() );
			return 10;
		}

	}

}