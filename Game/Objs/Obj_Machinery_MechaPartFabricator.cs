// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_MechaPartFabricator : Obj_Machinery {

		public double time_coeff = 1;
		public double resource_coeff = 1;
		public double? time_coeff_tech = 1;
		public double? resource_coeff_tech = 1;
		public ByTable resources = new ByTable().Set( "$metal", 0 ).Set( "$glass", 0 ).Set( "$bananium", 0 ).Set( "$diamond", 0 ).Set( "$gold", 0 ).Set( "$plasma", 0 ).Set( "$silver", 0 ).Set( "$uranium", 0 );
		public double res_max_amount = 200000;
		public Research files = null;
		public dynamic id = null;
		public bool sync = false;
		public string part_set = null;
		public Design being_built = null;
		public ByTable queue = new ByTable();
		public bool processing_queue = false;
		public string screen = "main";
		public string temp = null;
		public ByTable part_sets = new ByTable(new object [] { "Cyborg", "Ripley", "Firefighter", "Odysseus", "Gygax", "Durand", "H.O.N.K", "Phazon", "Exosuit Equipment", "Cyborg Upgrade Modules", "Misc" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 20;
			this.active_power_usage = 5000;
			this.req_access = new ByTable(new object [] { 29 });
			this.icon = "icons/obj/robotics.dmi";
			this.icon_state = "fab-idle";

			__RegisterInitialTracked("resource_coeff");
			__RegisterInitialTracked("time_coeff");
		}

		// Function from file: mech_fabricator.dm
		public Obj_Machinery_MechaPartFabricator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Mechfab( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.RefreshParts();
			this.files = new Research(  );
			return;
		}

		// Function from file: mech_fabricator.dm
		public override bool emag_act( dynamic user = null ) {
			this.emag();
			return false;
		}

		// Function from file: mech_fabricator.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic material = null;
			string material2 = null;
			dynamic stack = null;
			string sname = null;
			int transfer_amount = 0;

			
			if ( this.default_deconstruction_screwdriver( user, "fab-o", "fab-idle", A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( Lang13.Bool( this.panel_open ) ) {
				
				if ( A is Obj_Item_Weapon_Crowbar ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.resources )) {
						material = _a;
						
						this.remove_material( material, Lang13.DoubleNullable( this.resources[material] / 2000 ) );
					}
					this.default_deconstruction_crowbar( A );
					return 1;
				} else {
					user.WriteMsg( new Txt( "<span class='warning'>You can't load " ).the( this.name ).item().str( " while it's opened!</span>" ).ToString() );
					return 1;
				}
			}

			if ( A is Obj_Item_Stack ) {
				material2 = null;

				dynamic _b = A.type; // Was a switch-case, sorry for the mess.
				if ( _b==typeof(Obj_Item_Stack_Sheet_Mineral_Gold) ) {
					material2 = "$gold";
				} else if ( _b==typeof(Obj_Item_Stack_Sheet_Mineral_Silver) ) {
					material2 = "$silver";
				} else if ( _b==typeof(Obj_Item_Stack_Sheet_Mineral_Diamond) ) {
					material2 = "$diamond";
				} else if ( _b==typeof(Obj_Item_Stack_Sheet_Mineral_Plasma) ) {
					material2 = "$plasma";
				} else if ( _b==typeof(Obj_Item_Stack_Sheet_Metal) ) {
					material2 = "$metal";
				} else if ( _b==typeof(Obj_Item_Stack_Sheet_Glass) ) {
					material2 = "$glass";
				} else if ( _b==typeof(Obj_Item_Stack_Sheet_Mineral_Bananium) ) {
					material2 = "$bananium";
				} else if ( _b==typeof(Obj_Item_Stack_Sheet_Mineral_Uranium) ) {
					material2 = "$uranium";
				} else {
					return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
				}

				if ( this.being_built != null ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " is currently processing! Please wait until completion.</span>" ).ToString() );
					return null;
				}

				if ( this.res_max_amount - Convert.ToDouble( this.resources[material2] ) < 2000 ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " " ).item( this.material2name( material2 ) ).str( " storage is full!</span>" ).ToString() );
					return null;
				}
				stack = A;
				sname = "" + stack.name;

				if ( Convert.ToDouble( this.resources[material2] ) < this.res_max_amount ) {
					this.overlays.Add( "fab-load-" + this.material2name( material2 ) );
					transfer_amount = Num13.MinInt( Convert.ToInt32( stack.amount ), ((int)( Num13.Round( ( this.res_max_amount - Convert.ToDouble( this.resources[material2] ) ) / 2000, 1 ) )) );
					this.resources[material2] += transfer_amount * 2000;
					stack.use( transfer_amount );
					user.WriteMsg( new Txt( "<span class='notice'>You insert " ).item( transfer_amount ).str( " " ).item( sname ).str( " sheet" ).s().str( " into " ).the( this ).item().str( ".</span>" ).ToString() );
					Task13.Sleep( 10 );
					this.updateUsrDialog();
					this.overlays.Remove( "fab-load-" + this.material2name( material2 ) );
				} else {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " cannot hold any more " ).item( sname ).str( " sheet" ).s().str( "!</span>" ).ToString() );
				}
				return null;
			}
			return null;
		}

		// Function from file: mech_fabricator.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			TopicInput filter = null;
			string tpart_set = null;
			string T = null;
			dynamic v = null;
			Design D = null;
			string T2 = null;
			dynamic v2 = null;
			Design D2 = null;
			dynamic index = null;
			dynamic new_index = null;
			string T3 = null;
			dynamic v3 = null;
			Design D3 = null;
			dynamic part = null;
			double? amount = null;
			string material = null;
			double removed = 0;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			filter = new TopicInput( href, href_list );

			if ( Lang13.Bool( href_list["part_set"] ) ) {
				tpart_set = filter.getStr( "part_set" );

				if ( Lang13.Bool( tpart_set ) ) {
					
					if ( tpart_set == "clear" ) {
						this.part_set = null;
					} else {
						this.part_set = tpart_set;
						this.screen = "parts";
					}
				}
			}

			if ( Lang13.Bool( href_list["part"] ) ) {
				T = filter.getStr( "part" );

				foreach (dynamic _a in Lang13.Enumerate( this.files.known_designs )) {
					v = _a;
					
					D = this.files.known_designs[v];

					if ( ( D.build_type & 16 ) != 0 ) {
						
						if ( D.id == T ) {
							
							if ( !this.processing_queue ) {
								this.build_part( D );
							} else {
								this.add_to_queue( D );
							}
							break;
						}
					}
				}
			}

			if ( Lang13.Bool( href_list["add_to_queue"] ) ) {
				T2 = filter.getStr( "add_to_queue" );

				foreach (dynamic _b in Lang13.Enumerate( this.files.known_designs )) {
					v2 = _b;
					
					D2 = this.files.known_designs[v2];

					if ( ( D2.build_type & 16 ) != 0 ) {
						
						if ( D2.id == T2 ) {
							this.add_to_queue( D2 );
							break;
						}
					}
				}
				this.update_queue_on_page(); return null;
			}

			if ( Lang13.Bool( href_list["remove_from_queue"] ) ) {
				this.remove_from_queue( filter.getNum( "remove_from_queue" ) );
				this.update_queue_on_page(); return null;
			}

			if ( Lang13.Bool( href_list["partset_to_queue"] ) ) {
				this.add_part_set_to_queue( filter.get( "partset_to_queue" ) );
				this.update_queue_on_page(); return null;
			}

			if ( Lang13.Bool( href_list["process_queue"] ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( this.processing_queue || this.being_built != null ) {
						return;
					}
					this.processing_queue = true;
					this.process_queue();
					this.processing_queue = false;
					return;
				}));
			}

			if ( Lang13.Bool( href_list["clear_temp"] ) ) {
				this.temp = null;
			}

			if ( Lang13.Bool( href_list["screen"] ) ) {
				this.screen = href_list["screen"];
			}

			if ( Lang13.Bool( href_list["queue_move"] ) && Lang13.Bool( href_list["index"] ) ) {
				index = filter.getNum( "index" );
				new_index = index + filter.getNum( "queue_move" );

				if ( Lang13.Bool( Lang13.IsNumber( index ) ) && Lang13.Bool( Lang13.IsNumber( new_index ) ) ) {
					
					if ( GlobalFuncs.IsInRange( new_index, 1, this.queue.len ) ) {
						this.queue.Swap( Convert.ToInt32( index ), Convert.ToInt32( new_index ) );
					}
				}
				this.update_queue_on_page(); return null;
			}

			if ( Lang13.Bool( href_list["clear_queue"] ) ) {
				this.queue = new ByTable();
				this.update_queue_on_page(); return null;
			}

			if ( Lang13.Bool( href_list["sync"] ) ) {
				this.f_sync();
			}

			if ( Lang13.Bool( href_list["part_desc"] ) ) {
				T3 = filter.getStr( "part_desc" );

				foreach (dynamic _c in Lang13.Enumerate( this.files.known_designs )) {
					v3 = _c;
					
					D3 = this.files.known_designs[v3];

					if ( ( D3.build_type & 16 ) != 0 ) {
						
						if ( D3.id == T3 ) {
							part = D3.build_path;
							this.temp = new Txt( "<h1>" ).item( Lang13.Initial( part, "name" ) ).str( " description:</h1>\n								" ).item( Lang13.Initial( part, "desc" ) ).str( "<br>\n								<a href='?src=" ).Ref( this ).str( ";clear_temp=1'>Return</a>\n								" ).ToString();
							break;
						}
					}
				}
			}

			if ( Lang13.Bool( href_list["remove_mat"] ) && Lang13.Bool( href_list["material"] ) ) {
				amount = String13.ParseNumber( href_list["remove_mat"] );
				material = href_list["material"];

				if ( ( amount ??0) < 0 || ( amount ??0) > Convert.ToDouble( this.resources[material] ) ) {
					return null;
				}
				removed = this.remove_material( material, amount );

				if ( removed == -1 ) {
					this.temp = "Not enough " + this.material2name( material ) + " to produce a sheet.";
				} else {
					this.temp = "Ejected " + removed + " of " + this.material2name( material );
				}
				this.temp += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";clear_temp=1'>Return</a>" ).ToString();
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: mech_fabricator.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			string left_part = null;
			Tile exit = null;
			dynamic I = null;
			dynamic part_set = null;

			
			if ( Lang13.Bool( base.interact( (object)(user), flag1 ) ) ) {
				return null;
			}
			((Mob)user).set_machine( this );
			exit = Map13.GetStep( this, this.dir );

			if ( exit.density ) {
				this.visible_message( new Txt().icon( this ).str( " <b>" ).The( this ).item().str( "</b> beeps, \"Error! Part outlet is obstructed.\"" ).ToString() );
				return null;
			}

			if ( Lang13.Bool( this.temp ) ) {
				left_part = this.temp;
			} else if ( this.being_built != null ) {
				I = this.being_built.build_path;
				left_part = "<TT>Building " + Lang13.Initial( I, "name" ) + ".<BR>\n							Please wait until completion...</TT>";
			} else {
				
				switch ((string)( this.screen )) {
					case "main":
						left_part = this.output_available_resources() + "<hr>";
						left_part += new Txt( "<a href='?src=" ).Ref( this ).str( ";sync=1'>Sync with R&D servers</a><hr>" ).ToString();

						foreach (dynamic _a in Lang13.Enumerate( this.part_sets )) {
							part_set = _a;
							
							left_part += new Txt( "<a href='?src=" ).Ref( this ).str( ";part_set=" ).item( part_set ).str( "'>" ).item( part_set ).str( "</a> - [<a href='?src=" ).Ref( this ).str( ";partset_to_queue=" ).item( part_set ).str( "'>Add all parts to queue]<br>" ).ToString();
						}
						break;
					case "parts":
						left_part += this.output_parts_list( this.part_set );
						left_part += new Txt( "<hr><a href='?src=" ).Ref( this ).str( ";screen=main'>Return</a>" ).ToString();
						break;
				}
			}
			dat = "<html>\n			  <head>\n			  <title>" + this.name + @"</title>
				<style>
				.res_name {font-weight: bold; text-transform: capitalize;}
				.red {color: #f00;}
				.part {margin-bottom: 10px;}
				.arrow {text-decoration: none; font-size: 10px;}
				body, table {height: 100%;}
				td {vertical-align: top; padding: 5px;}
				html, body {padding: 0px; margin: 0px;}
				h1 {font-size: 18px; margin: 5px 0px;}
				</style>
				<script language='javascript' type='text/javascript'>
				" + GlobalVars.js_byjax + @"
				</script>
				</head><body>
				<body>
				<table style='width: 100%;'>
				<tr>
				<td style='width: 65%; padding-right: 10px;'>
				" + left_part + "\n				</td>\n				<td style='width: 35%; background: #ccc;' id='queue'>\n				" + this.list_queue() + @"
				</td>
				<tr>
				</table>
				</body>
				</html>";
			Interface13.Browse( user, dat, "window=mecha_fabricator;size=1000x430" );
			GlobalFuncs.onclose( user, "mecha_fabricator" );
			return null;
		}

		// Function from file: mech_fabricator.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return this.interact( a );
			}
			return null;
		}

		// Function from file: mech_fabricator.dm
		public string material2name( dynamic ID = null ) {
			return String13.SubStr( ID, 2, 0 );
		}

		// Function from file: mech_fabricator.dm
		public double remove_material( dynamic mat_string = null, double? amount = null ) {
			Type type = null;
			double result = 0;
			int total_amount = 0;
			dynamic res = null;

			
			if ( Convert.ToDouble( this.resources[mat_string] ) < 2000 ) {
				return -1;
			}

			dynamic _a = mat_string; // Was a switch-case, sorry for the mess.
			if ( _a=="$metal" ) {
				type = typeof(Obj_Item_Stack_Sheet_Metal);
			} else if ( _a=="$glass" ) {
				type = typeof(Obj_Item_Stack_Sheet_Glass);
			} else if ( _a=="$gold" ) {
				type = typeof(Obj_Item_Stack_Sheet_Mineral_Gold);
			} else if ( _a=="$silver" ) {
				type = typeof(Obj_Item_Stack_Sheet_Mineral_Silver);
			} else if ( _a=="$diamond" ) {
				type = typeof(Obj_Item_Stack_Sheet_Mineral_Diamond);
			} else if ( _a=="$plasma" ) {
				type = typeof(Obj_Item_Stack_Sheet_Mineral_Plasma);
			} else if ( _a=="$uranium" ) {
				type = typeof(Obj_Item_Stack_Sheet_Mineral_Uranium);
			} else if ( _a=="$bananium" ) {
				type = typeof(Obj_Item_Stack_Sheet_Mineral_Bananium);
			} else {
				return 0;
			}
			result = 0;

			while (( amount ??0) > 50) {
				Lang13.Call( type, GlobalFuncs.get_turf( this ), 50 );
				amount -= 50;
				result += 50;
				this.resources[mat_string] -= 100000;
			}
			total_amount = Num13.Floor( Convert.ToDouble( this.resources[mat_string] / 2000 ) );

			if ( total_amount != 0 ) {
				res = Lang13.Call( type, GlobalFuncs.get_turf( this ), Num13.MinInt( ((int)( amount ??0 )), total_amount ) );
				this.resources[mat_string] -= res.amount * 2000;
				result += Convert.ToDouble( res.amount );
			}
			return result;
		}

		// Function from file: mech_fabricator.dm
		public double get_construction_time_w_coeff( Design D = null, double? roundto = null ) {
			roundto = roundto ?? 1;

			return Num13.Round( Convert.ToDouble( Lang13.Initial( D, "construction_time" ) * this.time_coeff * this.time_coeff_tech ), roundto ??0 );
		}

		// Function from file: mech_fabricator.dm
		public double get_resource_cost_w_coeff( Design D = null, dynamic resource = null, double? roundto = null ) {
			roundto = roundto ?? 1;

			return Num13.Round( Convert.ToDouble( D.materials[resource] * this.resource_coeff * this.resource_coeff_tech ), roundto ??0 );
		}

		// Function from file: mech_fabricator.dm
		[VerbInfo( name: "sync" )]
		public void f_sync(  ) {
			Obj_Machinery_Computer_Rdconsole RDC = null;
			dynamic v = null;
			Tech T = null;
			dynamic v2 = null;
			dynamic D = null;

			this.temp = "Updating local R&D database...";
			this.updateUsrDialog();
			Task13.Sleep( 30 );

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 5 ), typeof(Obj_Machinery_Computer_Rdconsole) )) {
				RDC = _c;
				

				if ( !RDC.sync ) {
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( RDC.files.known_tech )) {
					v = _a;
					
					T = RDC.files.known_tech[v];
					this.files.AddTech2Known( T );
				}

				foreach (dynamic _b in Lang13.Enumerate( RDC.files.known_designs )) {
					v2 = _b;
					
					D = RDC.files.known_designs[v2];
					this.files.AddDesign2Known( D );
				}
				this.files.RefreshResearch();
				this.temp = "Processed equipment designs.<br>";
				this.temp += this.update_tech();
				this.temp += new Txt( "<a href='?src=" ).Ref( this ).str( ";clear_temp=1'>Return</a>" ).ToString();
				this.updateUsrDialog();
				this.visible_message( new Txt().icon( this ).str( " <b>" ).The( this ).item().str( "</b> beeps, \"Successfully synchronized with R&D server.\"" ).ToString() );
				return;
			}
			this.temp = new Txt( "Unable to connect to local R&D Database.<br>Please check your connections and try again.<br><a href='?src=" ).Ref( this ).str( ";clear_temp=1'>Return</a>" ).ToString();
			this.updateUsrDialog();
			return;
		}

		// Function from file: mech_fabricator.dm
		public dynamic update_tech(  ) {
			dynamic output = null;
			dynamic v = null;
			dynamic T = null;
			double? diff = null;

			
			if ( !( this.files != null ) ) {
				return null;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.files.known_tech )) {
				v = _b;
				
				T = this.files.known_tech[v];

				if ( Lang13.Bool( T ) && Convert.ToDouble( T.level ) > 1 ) {
					diff = null;

					dynamic _a = T.id; // Was a switch-case, sorry for the mess.
					if ( _a=="materials" ) {
						diff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "resource_coeff_tech" ) - Lang13.Initial( this, "resource_coeff_tech" ) * ( T.level - 1 ) / 32 ), 0.01 );

						if ( ( this.resource_coeff_tech ??0) > ( diff ??0) ) {
							this.resource_coeff_tech = diff;
							output += "Production efficiency increased.<br>";
						}
					} else if ( _a=="programming" ) {
						diff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "time_coeff_tech" ) - Lang13.Initial( this, "time_coeff_tech" ) * ( T.level - 1 ) / 40 ), 0.1 );

						if ( ( this.time_coeff_tech ??0) > ( diff ??0) ) {
							this.time_coeff_tech = diff;
							output += "Production routines updated.<br>";
						}
					}
				}
			}
			return output;
		}

		// Function from file: mech_fabricator.dm
		public string list_queue(  ) {
			string output = null;
			int i = 0;
			Design D = null;
			dynamic part = null;

			output = "<b>Queue contains:</b>";

			if ( !( this.queue is ByTable ) || !( this.queue.len != 0 ) ) {
				output += "<br>Nothing";
			} else {
				output += "<ol>";
				i = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.queue, typeof(Design) )) {
					D = _a;
					
					i++;
					part = D.build_path;
					output += new Txt( "<li" ).item( ( !this.check_resources( D ) ? " style='color: #f00;'" : null ) ).str( ">" ).item( Lang13.Initial( part, "name" ) ).str( " - " ).item( ( i > 1 ? new Txt( "<a href='?src=" ).Ref( this ).str( ";queue_move=-1;index=" ).item( i ).str( "' class='arrow'>&uarr;</a>" ).ToString() : null ) ).str( " " ).item( ( i < this.queue.len ? new Txt( "<a href='?src=" ).Ref( this ).str( ";queue_move=+1;index=" ).item( i ).str( "' class='arrow'>&darr;</a>" ).ToString() : null ) ).str( " <a href='?src=" ).Ref( this ).str( ";remove_from_queue=" ).item( i ).str( "'>Remove</a></li>" ).ToString();
				}
				output += "</ol>";
				output += new Txt( "[<a href='?src=" ).Ref( this ).str( ";process_queue=1'>Process queue</a> | <a href='?src=" ).Ref( this ).str( ";clear_queue=1'>Clear queue</a>]" ).ToString();
			}
			return output;
		}

		// Function from file: mech_fabricator.dm
		public bool process_queue(  ) {
			Design D = null;

			D = this.queue[1];

			if ( !( D != null ) ) {
				this.remove_from_queue( 1 );

				if ( this.queue.len != 0 ) {
					return this.process_queue();
				} else {
					return false;
				}
			}
			this.temp = null;

			while (D != null) {
				
				if ( ( this.stat & 3 ) != 0 ) {
					return false;
				}

				if ( !this.check_resources( D ) ) {
					this.visible_message( new Txt().icon( this ).str( " <b>" ).The( this ).item().str( "</b> beeps, \"Not enough resources. Queue processing stopped.\"" ).ToString() );
					this.temp = new Txt( "<span class='alert'>Not enough resources to build next part.</span><br>\n						<a href='?src=" ).Ref( this ).str( ";process_queue=1'>Try again</a> | <a href='?src=" ).Ref( this ).str( ";clear_temp=1'>Return</a><a>" ).ToString();
					return false;
				}
				this.remove_from_queue( 1 );
				this.build_part( D );
				D = GlobalFuncs.listgetindex( this.queue, 1 );
			}
			this.visible_message( new Txt().icon( this ).str( " <b>" ).The( this ).item().str( "</b> beeps, \"Queue processing finished successfully.\"" ).ToString() );
			return false;
		}

		// Function from file: mech_fabricator.dm
		public bool remove_from_queue( dynamic index = null ) {
			
			if ( !Lang13.Bool( Lang13.IsNumber( index ) ) || !( this.queue is ByTable ) || Convert.ToDouble( index ) < 1 || Convert.ToDouble( index ) > this.queue.len ) {
				return false;
			}
			this.queue.Cut( Lang13.IntNullable( index ), Convert.ToInt32( ++index ) );
			return true;
		}

		// Function from file: mech_fabricator.dm
		public int add_to_queue( Design D = null ) {
			
			if ( !( this.queue is ByTable ) ) {
				this.queue = new ByTable();
			}

			if ( D != null ) {
				this.queue[++this.queue.len] = D;
			}
			return this.queue.len;
		}

		// Function from file: mech_fabricator.dm
		public void add_part_set_to_queue( dynamic set_name = null ) {
			dynamic v = null;
			Design D = null;

			
			if ( this.part_sets.Contains( set_name ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.files.known_designs )) {
					v = _a;
					
					D = this.files.known_designs[v];

					if ( ( D.build_type & 16 ) != 0 ) {
						
						if ( D.category.Contains( set_name ) ) {
							this.add_to_queue( D );
						}
					}
				}
			}
			return;
		}

		// Function from file: mech_fabricator.dm
		public void update_queue_on_page(  ) {
			GlobalFuncs.send_byjax( Task13.User, "mecha_fabricator.browser", "queue", this.list_queue() );
			return;
		}

		// Function from file: mech_fabricator.dm
		public bool build_part( Design D = null ) {
			Tile location = null;
			dynamic I = null;

			this.being_built = D;
			this.desc = new Txt( "It's building " ).a( Lang13.Initial( D, "name" ) ).item().str( "." ).ToString();
			this.remove_resources( D );
			this.overlays.Add( "fab-active" );
			this.use_power = 2;
			this.updateUsrDialog();
			Task13.Sleep( ((int)( this.get_construction_time_w_coeff( D ) )) );
			this.use_power = 1;
			this.overlays.Remove( "fab-active" );
			this.desc = Lang13.Initial( this, "desc" );
			location = Map13.GetStep( this, this.dir );
			I = Lang13.Call( D.build_path, location );
			I.materials["$metal"] = this.get_resource_cost_w_coeff( D, "$metal" );
			I.materials["$glass"] = this.get_resource_cost_w_coeff( D, "$glass" );
			this.visible_message( new Txt().icon( this ).str( " <b>" ).The( this ).item().str( "</b> beeps, \"" ).The( I ).item().str( " is complete.\"" ).ToString() );
			this.being_built = null;
			this.updateUsrDialog();
			return true;
		}

		// Function from file: mech_fabricator.dm
		public bool check_resources( Design D = null ) {
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( D.materials )) {
				R = _a;
				

				if ( this.resources.Contains( R ) ) {
					
					if ( Convert.ToDouble( this.resources[R] ) < this.get_resource_cost_w_coeff( D, R ) ) {
						return false;
					}
				} else {
					return false;
				}
			}
			return true;
		}

		// Function from file: mech_fabricator.dm
		public void remove_resources( Design D = null ) {
			dynamic resource = null;

			
			foreach (dynamic _a in Lang13.Enumerate( D.materials )) {
				resource = _a;
				

				if ( this.resources.Contains( resource ) ) {
					this.resources[resource] -= this.get_resource_cost_w_coeff( D, resource );
				}
			}
			return;
		}

		// Function from file: mech_fabricator.dm
		public dynamic output_available_resources(  ) {
			dynamic output = null;
			dynamic resource = null;
			int amount = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( this.resources )) {
				resource = _a;
				
				amount = Num13.MinInt( ((int)( this.res_max_amount )), Convert.ToInt32( this.resources[resource] ) );
				output += "<span class=\"res_name\">" + this.material2name( resource ) + ": </span>" + amount + " cm&sup3;";

				if ( amount > 0 ) {
					output += new Txt( "<span style='font-size:80%;'>- Remove [<a href='?src=" ).Ref( this ).str( ";remove_mat=1;material=" ).item( resource ).str( "'>1</a>] | [<a href='?src=" ).Ref( this ).str( ";remove_mat=10;material=" ).item( resource ).str( "'>10</a>] | [<a href='?src=" ).Ref( this ).str( ";remove_mat=" ).item( this.resources[resource] / 2000 ).str( ";material=" ).item( resource ).str( "'>All</a>]</span>" ).ToString();
				}
				output += "<br/>";
			}
			return output;
		}

		// Function from file: mech_fabricator.dm
		public dynamic output_part_cost( Design D = null ) {
			int i = 0;
			dynamic output = null;
			dynamic c = null;

			i = 0;

			foreach (dynamic _a in Lang13.Enumerate( D.materials )) {
				c = _a;
				

				if ( this.resources.Contains( c ) ) {
					output += "" + ( i != 0 ? " | " : null ) + this.get_resource_cost_w_coeff( D, c ) + " " + this.material2name( c );
					i++;
				}
			}
			return output;
		}

		// Function from file: mech_fabricator.dm
		public string output_part_info( Design D = null ) {
			string output = null;

			output = "" + Lang13.Initial( D, "name" ) + " (Cost: " + this.output_part_cost( D ) + ") " + this.get_construction_time_w_coeff( D ) / 10 + "sec";
			return output;
		}

		// Function from file: mech_fabricator.dm
		public string output_parts_list( string set_name = null ) {
			string output = null;
			dynamic v = null;
			Design D = null;
			bool resources_available = false;

			output = "";

			foreach (dynamic _a in Lang13.Enumerate( this.files.known_designs )) {
				v = _a;
				
				D = this.files.known_designs[v];

				if ( ( D.build_type & 16 ) != 0 ) {
					
					if ( !D.category.Contains( set_name ) ) {
						continue;
					}
					resources_available = this.check_resources( D );
					output += new Txt( "<div class='part'>" ).item( this.output_part_info( D ) ).str( "<br>[" ).item( ( resources_available ? new Txt( "<a href='?src=" ).Ref( this ).str( ";part=" ).item( D.id ).str( "'>Build</a> | " ).ToString() : null ) ).str( "<a href='?src=" ).Ref( this ).str( ";add_to_queue=" ).item( D.id ).str( "'>Add to queue</a>][<a href='?src=" ).Ref( this ).str( ";part_desc=" ).item( D.id ).str( "'>?</a>]</div>" ).ToString();
				}
			}
			return output;
		}

		// Function from file: mech_fabricator.dm
		public void emag(  ) {

			if (this.emagged == 0) {
				this.emagged = 0.5;
				this.visible_message(new Txt().icon(this).str(" <b>").The(this).item().str("</b> beeps: \"DB error [Code 0x00F1]\"").ToString());
				Task13.Sleep(10);
				this.visible_message(new Txt().icon(this).str(" <b>").The(this).item().str("</b> beeps: \"Attempting auto-repair\"").ToString());
				Task13.Sleep(15);
				this.visible_message(new Txt().icon(this).str(" <b>").The(this).item().str("</b> beeps: \"User DB corrupted [Code 0x00FA]. Truncating data structure...\"").ToString());
				Task13.Sleep(30);
				this.visible_message(new Txt().icon(this).str(" <b>").The(this).item().str("</b> beeps: \"User DB truncated. Please contact your Nanotrasen system operator for future assistance.\"").ToString());
				this.req_access = null;
				this.emagged = 1;
			} else if (this.emagged == 0.5) {
					this.visible_message( new Txt().icon( this ).str( " <b>" ).The( this ).item().str( "</b> beeps: \"DB not responding [Code 0x0003]...\"" ).ToString() );
			}
			else if (this.emagged == 1)
			{
				this.visible_message( new Txt().icon( this ).str( " <b>" ).The( this ).item().str( "</b> beeps: \"No records in User DB\"" ).ToString() );
			}
			return;
		}

		// Function from file: mech_fabricator.dm
		public override bool check_access( dynamic I = null ) {
			dynamic pda = null;
			dynamic req = null;

			
			if ( I is Obj_Item_Device_Pda ) {
				pda = I;
				I = pda.id;
			}

			if ( !( I is Obj_Item_Weapon_Card_Id ) || !Lang13.Bool( I.access ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.req_access )) {
				req = _a;
				

				if ( !Lang13.Bool( I.access.Contains( req ) ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: mech_fabricator.dm
		public override void RefreshParts(  ) {
			double T = 0;
			Obj_Item_Weapon_StockParts_MatterBin M = null;
			Obj_Item_Weapon_StockParts_MicroLaser Ma = null;
			Obj_Item_Weapon_StockParts_Manipulator Ml = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _a;
				
				T += Convert.ToDouble( M.rating );
			}
			this.res_max_amount = T * 37500 + 187000;
			T = -1;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				Ma = _b;
				
				T += Convert.ToDouble( Ma.rating );
			}
			this.resource_coeff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "resource_coeff" ) - Lang13.Initial( this, "resource_coeff" ) * T / 8 ), 0.01 );
			T = -1;

			foreach (dynamic _c in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				Ml = _c;
				
				T += Convert.ToDouble( Ml.rating );
			}
			this.time_coeff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "time_coeff" ) - Lang13.Initial( this, "time_coeff" ) * T / 5 ), 0.01 );
			return;
		}

	}

}