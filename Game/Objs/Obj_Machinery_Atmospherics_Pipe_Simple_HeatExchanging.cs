// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging : Obj_Machinery_Atmospherics_Pipe_Simple {

		public double? initialize_directions_he = null;
		public int RADIATION_CAPACITY = 32000;
		public double ENERGY_MULT = 6.4;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.minimum_temperature_difference = 20;
			this.thermal_conductivity = 0.4;
			this.burst_type = typeof(Obj_Machinery_Atmospherics_Unary_Vent_Burstpipe_HeatExchanging);
			this.icon = "icons/obj/pipes/heat.dmi";
		}

		// Function from file: he_pipes.dm
		public Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.initialize_directions_he = this.initialize_directions;
			return;
		}

		// Function from file: he_pipes.dm
		public bool radiate(  ) {
			GasMixture _internal = null;
			dynamic internal_transfer_moles = null;
			GasMixture internal_removed = null;
			int combined_heat_capacity = 0;
			double combined_energy = 0;
			double final_temperature = 0;

			_internal = this.return_air();
			internal_transfer_moles = _internal.f_total_moles() * 0.25;
			internal_removed = _internal.remove( internal_transfer_moles );

			if ( !( internal_removed != null ) ) {
				return false;
			}
			combined_heat_capacity = internal_removed.heat_capacity() + 32000;
			combined_energy = ( internal_removed.temperature ??0) * internal_removed.heat_capacity() + 204800;
			final_temperature = combined_energy / combined_heat_capacity;
			internal_removed.temperature = final_temperature;
			_internal.merge( internal_removed );

			if ( this.parent != null && Lang13.Bool( ((dynamic)this.parent).network ) ) {
				((dynamic)this.parent).network.update = 1;
			}
			return true;
		}

		// Function from file: he_pipes.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			GasMixture _internal = null;
			dynamic internal_transfer_moles = null;
			GasMixture internal_removed = null;
			GasMixture environment = null;
			dynamic environment_moles = null;
			dynamic transfer_moles = null;
			GasMixture external_removed = null;
			int combined_heat_capacity = 0;
			double combined_energy = 0;
			double final_temperature = 0;

			
			if ( !( this.parent != null ) ) {
				_default = base.process();
			}
			_internal = this.return_air();
			internal_transfer_moles = _internal.f_total_moles() * 0.25;
			internal_removed = _internal.remove( internal_transfer_moles );
			environment = this.loc.return_air();
			environment_moles = environment.f_total_moles();
			transfer_moles = environment_moles * 0.25;
			external_removed = environment.remove( transfer_moles );

			if ( !( external_removed != null ) ) {
				
				if ( internal_removed != null ) {
					_internal.merge( internal_removed );
				}
				return this.radiate();
			}

			if ( Convert.ToDouble( environment_moles ) < 0.01 ) {
				
				if ( internal_removed != null ) {
					_internal.merge( internal_removed );
				}
				environment.merge( external_removed );
				return this.radiate();
			} else if ( Convert.ToDouble( environment_moles ) < 1 ) {
				return 0;
			}

			if ( !( internal_removed != null ) ) {
				environment.merge( external_removed );
				return _default;
			}
			combined_heat_capacity = internal_removed.heat_capacity() + external_removed.heat_capacity();
			combined_energy = ( internal_removed.temperature ??0) * internal_removed.heat_capacity() + external_removed.heat_capacity() * ( external_removed.temperature ??0);

			if ( !( combined_heat_capacity != 0 ) ) {
				combined_heat_capacity = 1;
			}
			final_temperature = combined_energy / combined_heat_capacity;
			external_removed.temperature = final_temperature;
			environment.merge( external_removed );
			internal_removed.temperature = final_temperature;
			_internal.merge( internal_removed );

			if ( this.parent != null && Lang13.Bool( ((dynamic)this.parent).network ) ) {
				((dynamic)this.parent).network.update = 1;
			}
			return 1;
		}

		// Function from file: he_pipes.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			suppress_icon_check = suppress_icon_check ?? false;

			this.normalize_dir();
			this.findAllConnections( this.initialize_directions_he );

			if ( !( suppress_icon_check == true ) ) {
				this.update_icon();
			}
			return this.node1 != null || this.node2 != null;
		}

		// Function from file: he_pipes.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			this.dir = pipe.dir;
			this.initialize_directions = 0;
			this.initialize_directions_he = pipe.get_pipe_dir();

			if ( !this.initialize( true ) ) {
				GlobalFuncs.to_chat( usr, "Unable to build pipe here;  It must be connected to a machine, or another pipe that has a connection." );
				return false;
			}
			this.build_network();

			if ( this.node1 != null ) {
				this.node1.initialize();
				this.node1.build_network();
			}

			if ( this.node2 != null ) {
				this.node2.initialize();
				this.node2.build_network();
			}
			return true;
		}

		// Function from file: he_pipes.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			ByTable node_list = null;
			Obj_Machinery_Atmospherics node = null;

			node_list = new ByTable(new object [] { this.node1, this.node2 });

			if ( !( this.node1 != null ) && !( this.node2 != null ) ) {
				GlobalFuncs.qdel( this );
			}

			if ( !Lang13.Bool( location ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( node_list, typeof(Obj_Machinery_Atmospherics) )) {
					node = _a;
					

					if ( node.update_icon_ready && !( node is Obj_Machinery_Atmospherics_Pipe_Simple ) ) {
						node.update_icon( 1 );
					}
				}
			}
			return null;
		}

		// Function from file: he_pipes.dm
		public override bool getNodeType( dynamic node_id = null ) {
			return true;
		}

	}

}