// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Pinpointer : Obj_Item_Weapon {

		public dynamic the_disk = null;
		public bool active = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.slot_flags = 512;
			this.w_class = 2;
			this.item_state = "electronic";
			this.throw_speed = 3;
			this.materials = new ByTable().Set( "$metal", 500 );
			this.icon = "icons/obj/device.dmi";
			this.icon_state = "pinoff";
		}

		// Function from file: pinpointer.dm
		public Obj_Item_Weapon_Pinpointer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.pinpointer_list.Add( this );
			return;
		}

		// Function from file: pinpointer.dm
		public override double examine( dynamic user = null ) {
			Obj_Machinery_Nuclearbomb bomb = null;

			base.examine( (object)(user) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
				bomb = _a;
				

				if ( bomb.timing != 0 ) {
					user.WriteMsg( "Extreme danger.  Arming signal detected.   Time remaining: " + bomb.timeleft );
				}
			}
			return 0;
		}

		// Function from file: pinpointer.dm
		public virtual void workdisk(  ) {
			this.scandisk();
			this.point_at( this.the_disk, false );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.workdisk();
				return;
			}));
			return;
		}

		// Function from file: pinpointer.dm
		public void point_at( dynamic target = null, bool? spawnself = null ) {
			spawnself = spawnself ?? true;

			dynamic T = null;
			dynamic L = null;

			
			if ( !this.active ) {
				return;
			}

			if ( !Lang13.Bool( target ) ) {
				this.icon_state = "pinonnull";
				return;
			}
			T = GlobalFuncs.get_turf( target );
			L = GlobalFuncs.get_turf( this );

			if ( T.z != L.z ) {
				this.icon_state = "pinonnull";
			} else {
				this.dir = Map13.GetDistance( L, T );

				dynamic _a = Map13.GetDistance( L, T ); // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=8 ) {
					this.icon_state = "pinonclose";
				} else if ( 9<=_a&&_a<=16 ) {
					this.icon_state = "pinonmedium";
				} else if ( 16<=_a&&_a<=Double.PositiveInfinity ) {
					this.icon_state = "pinonfar";
				} else if ( _a==-1 ) {
					this.icon_state = "pinondirect";
				}
			}

			if ( spawnself == true ) {
				Task13.Schedule( 5, (Task13.Closure)(() => {
					this.point_at();
					return;
				}));
			}
			return;
		}

		// Function from file: pinpointer.dm
		public void scandisk(  ) {
			
			if ( !Lang13.Bool( this.the_disk ) ) {
				this.the_disk = Lang13.FindObj( typeof(Obj_Item_Weapon_Disk_Nuclear) );
			}
			return;
		}

		// Function from file: pinpointer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.active ) {
				this.active = true;
				this.workdisk();
				Task13.User.WriteMsg( "<span class='notice'>You activate the pinpointer.</span>" );
			} else {
				this.active = false;
				this.icon_state = "pinoff";
				Task13.User.WriteMsg( "<span class='notice'>You deactivate the pinpointer.</span>" );
			}
			return null;
		}

		// Function from file: pinpointer.dm
		public override dynamic Destroy(  ) {
			this.active = false;
			GlobalVars.pinpointer_list.Remove( this );
			return base.Destroy();
		}

	}

}