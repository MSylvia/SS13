// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Pinpointer : Obj_Item_Weapon {

		public dynamic the_disk = null;
		public bool active = false;
		public bool watches_nuke = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.slot_flags = 512;
			this.w_class = 2;
			this.item_state = "electronic";
			this.throw_speed = 4;
			this.throw_range = 20;
			this.starting_materials = new ByTable().Set( "$iron", 500 );
			this.w_type = 5;
			this.melt_temperature = 1783.1500244140625;
			this.icon = "icons/obj/device.dmi";
			this.icon_state = "pinoff";
		}

		public Obj_Item_Weapon_Pinpointer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pinpointer.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			double bomb_timeleft = 0;
			Obj_Machinery_Nuclearbomb bomb = null;

			base.examine( (object)(user), size );

			if ( this.watches_nuke ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
					bomb = _a;
					

					if ( bomb.timing != 0 ) {
						bomb_timeleft = bomb.timeleft;
					}
				}

				if ( bomb_timeleft != 0 ) {
					GlobalFuncs.to_chat( user, "<span class='danger'>Extreme danger. Arming signal detected. Time remaining: " + bomb_timeleft + "</span>" );
				} else {
					GlobalFuncs.to_chat( user, "<span class='info'>No active nuclear devices detected.</span>" );
				}
			}
			return null;
		}

		// Function from file: pinpointer.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( !Lang13.Bool( target ) || !Lang13.Bool( location ) ) {
				this.icon_state = "pinonnull";
				return null;
			}

			if ( target.z != location.z ) {
				this.icon_state = "pinonnull";
			} else {
				this.dir = Map13.GetDistance( location, target );

				dynamic _a = Map13.GetDistance( location, target ); // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=8 ) {
					this.icon_state = "pinonclose";
				} else if ( 9<=_a&&_a<=16 ) {
					this.icon_state = "pinonmedium";
				} else if ( 16<=_a&&_a<=Double.PositiveInfinity ) {
					this.icon_state = "pinonfar";
				} else if ( _a==-1 ) {
					this.icon_state = "pinondirect";
				}
			}
			return null;
		}

		// Function from file: pinpointer.dm
		public override dynamic process(  ) {
			this.point_at( this.the_disk );
			return null;
		}

		// Function from file: pinpointer.dm
		public void point_at( dynamic target = null ) {
			dynamic T = null;
			dynamic L = null;

			
			if ( !this.active ) {
				return;
			}

			if ( !Lang13.Bool( target ) ) {
				this.icon_state = "pinonnull";
				return;
			}
			T = GlobalFuncs.get_turf( target );
			L = GlobalFuncs.get_turf( this );
			this.update_icon( L, T );
			return;
		}

		// Function from file: pinpointer.dm
		public virtual void workdisk(  ) {
			
			if ( !Lang13.Bool( this.the_disk ) ) {
				this.the_disk = Lang13.FindObj( typeof(Obj_Item_Weapon_Disk_Nuclear) );
				this.the_disk.watched_by.Add( this );
			}
			this.process();
			return;
		}

		// Function from file: pinpointer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.active ) {
				this.active = true;
				this.workdisk();
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You activate " ).the( this ).item().str( "</span>" ).ToString() );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/healthanalyzer.ogg", 30, 1 );
				GlobalVars.processing_objects.Add( this );
			} else {
				this.active = false;
				this.icon_state = "pinoff";
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You deactivate " ).the( this ).item().str( "</span>" ).ToString() );
				GlobalVars.processing_objects.Remove( this );
			}
			return null;
		}

		// Function from file: pinpointer.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			GlobalVars.processing_objects.Remove( this );
			return null;
		}

	}

}