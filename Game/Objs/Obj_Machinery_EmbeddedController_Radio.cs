// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_EmbeddedController_Radio : Obj_Machinery_EmbeddedController {

		public dynamic id_tag = null;
		public dynamic tag_exterior_door = null;
		public dynamic tag_interior_door = null;
		public dynamic tag_airpump = null;
		public dynamic tag_chamber_sensor = null;
		public dynamic tag_exterior_sensor = null;
		public dynamic tag_interior_sensor = null;
		public bool tag_secure = false;
		public int frequency = 1449;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.power_channel = 3;
			this.unacidable = true;
			this.icon_state = "airlock_control_standby";
		}

		public Obj_Machinery_EmbeddedController_Radio ( dynamic loc = null, int ndir = 0, bool? building = null ) : base( (object)(loc), ndir, building ) {
			
		}

		// Function from file: embedded_controller_base.dm
		public override bool handle_multitool_topic( string href = null, ByTable href_list = null, Mob user = null ) {
			dynamic P = null;
			bool update_mt_menu = false;
			bool re_init = false;
			dynamic current_tag = null;
			string newid = null;
			double? idx = null;
			Base_Data O = null;
			Base_Data O2 = null;
			int ret = 0;

			P = GlobalFuncs.get_multitool( Task13.User );

			if ( Lang13.Bool( P ) && P is Obj_Item_Device_Multitool ) {
				update_mt_menu = false;
				re_init = false;
				Interface13.Stat( null, href_list.Contains( "set_tag" ) );

				if ( false ) {
					Interface13.Stat( null, this.vars.Contains( href_list["set_tag"] ) );

					if ( !false ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Something went wrong: Unable to find " + href_list["set_tag"] + " in vars!</span>" );
						return true;
					}
					current_tag = this.vars[href_list["set_tag"]];
					newid = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( Task13.User, "Specify the new ID tag", this, current_tag, null, InputType.Str | InputType.Null ) ), 1, 1024 );

					if ( Lang13.Bool( newid ) ) {
						this.vars[href_list["set_tag"]] = newid;
						re_init = true;
					}
				}
				Interface13.Stat( null, href_list.Contains( "unlink" ) );

				if ( false ) {
					idx = String13.ParseNumber( href_list["unlink"] );

					if ( !Lang13.Bool( idx ) ) {
						return true;
					}
					O = this.getLink( idx );

					if ( !( O != null ) ) {
						return true;
					}

					if ( !this.canLink( O ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't link with that device.</span>" );
						return true;
					}

					if ( this.unlinkFrom( Task13.User, O ) ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='confirm'>A green light flashes on " ).the( P ).item().str( ", confirming the link was removed.</span>" ).ToString() );
					} else {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='attack'>A red light flashes on " ).the( P ).item().str( ".  It appears something went wrong when unlinking the two devices.</span>" ).ToString() );
					}
					update_mt_menu = true;
				}
				Interface13.Stat( null, href_list.Contains( "link" ) );

				if ( false ) {
					O2 = P.buffer;

					if ( !( O2 != null ) ) {
						return true;
					}

					if ( !this.canLink( O2, href_list ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't link with that device.</span>" );
						return true;
					}

					if ( this.isLinkedWith( O2 ) == true ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='attack'>A red light flashes on " ).the( P ).item().str( ". The two devices are already linked.</span>" ).ToString() );
						return true;
					}

					if ( this.linkWith( Task13.User, O2, href_list ) ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='confirm'>A green light flashes on " ).the( P ).item().str( ", confirming the link has been created.</span>" ).ToString() );
						re_init = true;
					} else {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='attack'>A red light flashes on " ).the( P ).item().str( ".  It appears something went wrong when linking the two devices.</span>" ).ToString() );
					}
					update_mt_menu = true;
				}
				Interface13.Stat( null, href_list.Contains( "buffer" ) );

				if ( false ) {
					
					if ( this is Obj_Machinery_Telecomms ) {
						
						if ( !GlobalFuncs.hasvar( this, "id" ) ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='danger'>A red light flashes and nothing changes.</span>" );
							return false;
						}
					} else if ( !GlobalFuncs.hasvar( this, "id_tag" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='danger'>A red light flashes and nothing changes.</span>" );
						return false;
					}
					P.buffer = this;
					GlobalFuncs.to_chat( Task13.User, "<span class='confirm'>A green light flashes, and the device appears in the multitool buffer.</span>" );
					update_mt_menu = true;
				}
				Interface13.Stat( null, href_list.Contains( "flush" ) );

				if ( false ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='confirm'>A green light flashes, and the device disappears from the multitool buffer.</span>" );
					P.buffer = null;
					update_mt_menu = true;
				}
				ret = this.multitool_topic( Task13.User, href_list, P.buffer );

				if ( ret == -1 ) {
					return true;
				}

				if ( ( ret & 1 ) != 0 ) {
					update_mt_menu = true;
				}

				if ( ( ret & 2 ) != 0 ) {
					re_init = true;
				}

				if ( re_init ) {
					this.initialize();
				}

				if ( update_mt_menu ) {
					this.update_multitool_menu( Task13.User );
					return true;
				}
			}
			return false;
		}

		// Function from file: embedded_controller_base.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency );
			return;
		}

		// Function from file: embedded_controller_base.dm
		public override bool post_signal( Game_Data signal = null, dynamic comm_line = null ) {
			((dynamic)signal).transmission_method = 1;

			if ( this.radio_connection != null ) {
				return this.radio_connection.post_signal( this, signal );
			} else {
				GlobalFuncs.qdel( signal );
				signal = null;
			}
			return false;
		}

		// Function from file: embedded_controller_base.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.on && this.program != null ) {
				
				if ( Lang13.Bool( this.program.memory["processing"] ) ) {
					this.icon_state = "airlock_control_process";
				} else {
					this.icon_state = "airlock_control_standby";
				}
			} else {
				this.icon_state = "airlock_control_off";
			}
			return null;
		}

		// Function from file: embedded_controller_base.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			Computer_File_EmbeddedProgram new_prog = null;

			this.set_frequency( this.frequency );
			new_prog = new Computer_File_EmbeddedProgram();
			new_prog.id_tag = this.id_tag;
			new_prog.tag_exterior_door = this.tag_exterior_door;
			new_prog.tag_interior_door = this.tag_interior_door;
			new_prog.tag_airpump = this.tag_airpump;
			new_prog.tag_chamber_sensor = this.tag_chamber_sensor;
			new_prog.tag_exterior_sensor = this.tag_exterior_sensor;
			new_prog.tag_interior_sensor = this.tag_interior_sensor;
			new_prog.memory["secure"] = this.tag_secure;
			new_prog.master = this;
			this.program = new_prog;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.program.signalDoor( this.tag_exterior_door, "update" );
				this.program.signalDoor( this.tag_interior_door, "update" );
				return;
			}));
			return false;
		}

	}

}