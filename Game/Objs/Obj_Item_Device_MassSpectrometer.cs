// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_MassSpectrometer : Obj_Item_Device {

		public bool details = false;
		public bool recent_fail = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "analyzer";
			this.w_class = 2;
			this.flags = 4160;
			this.slot_flags = 512;
			this.throw_speed = 3;
			this.materials = new ByTable().Set( "$metal", 30 ).Set( "$glass", 20 );
			this.origin_tech = "magnets=2;biotech=2";
			this.icon_state = "spectrometer";
		}

		// Function from file: scanners.dm
		public Obj_Item_Device_MassSpectrometer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( 5 );
			return;
		}

		// Function from file: scanners.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			ByTable blood_traces = null;
			Reagent R = null;
			string dat = null;
			dynamic R2 = null;

			
			if ( Lang13.Bool( user.stat ) || user.eye_blind != 0 ) {
				return null;
			}

			if ( this.crit_fail ) {
				user.WriteMsg( "<span class='warning'>This device has critically failed and is no longer functional!</span>" );
				return null;
			}

			if ( !((Mob)user).IsAdvancedToolUser() ) {
				user.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return null;
			}

			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				blood_traces = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					

					if ( R.id != "blood" ) {
						this.reagents.clear_reagents();
						user.WriteMsg( "<span class='warning'>The sample was contaminated! Please insert another sample.</span>" );
						return null;
					} else {
						blood_traces = String13.ParseUrlParams( R.data["trace_chem"] );
						break;
					}
				}
				dat = "<i><b>Trace Chemicals Found:</b>";

				if ( !( blood_traces.len != 0 ) ) {
					dat += "<br>None";
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( blood_traces )) {
						R2 = _b;
						

						if ( Rand13.PercentChance( ((int)( this.reliability )) ) ) {
							dat += "<br>" + GlobalVars.chemical_reagents_list[R2];

							if ( this.details ) {
								dat += " (" + blood_traces[R2] + " units)";
							}
							this.recent_fail = false;
						} else if ( this.recent_fail ) {
							this.crit_fail = true;
							this.reagents.clear_reagents();
							return null;
						} else {
							this.recent_fail = true;
						}
					}
				}
				dat += "</i>";
				user.WriteMsg( dat );
				this.reagents.clear_reagents();
			}
			return null;
		}

		// Function from file: scanners.dm
		public override void on_reagent_change(  ) {
			
			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				this.icon_state = Lang13.Initial( this, "icon_state" ) + "_s";
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			return;
		}

	}

}