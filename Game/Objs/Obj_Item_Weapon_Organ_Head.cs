// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Organ_Head : Obj_Item_Weapon_Organ {

		public Mob_Living_Carbon_Brain brainmob = null;
		public Mob_Living_SimpleAnimal_Borer borer = null;
		public int brain_op_stage = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.part = "head";
			this.icon_state = "head_m";
			this.dir = 1;
		}

		// Function from file: organ_external.dm
		public Obj_Item_Weapon_Organ_Head ( dynamic loc = null, Mob_Living_Carbon_Human H = null ) : base( (object)(loc), H ) {
			SpriteAccessory facial_hair_style = null;
			Icon facial = null;
			SpriteAccessory hair_style = null;
			Icon hair = null;
			dynamic B = null;

			
			if ( H is Mob_Living_Carbon_Human ) {
				this.icon_state = ( H.gender == GlobalVars.MALE ? "head_m" : "head_f" );
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( H.f_style ) && !H.check_hidden_head_flags( 32768 ) ) {
				facial_hair_style = GlobalVars.facial_hair_styles_list[H.f_style];

				if ( facial_hair_style != null ) {
					facial = new Icon( facial_hair_style.icon, "" + facial_hair_style.icon_state + "_s" );

					if ( facial_hair_style.do_colouration ) {
						facial.Blend( String13.ColorCode( ((int)( H.r_facial ??0 )), ((int)( H.g_facial ??0 )), ((int)( H.b_facial ??0 )) ), 0 );
					}
					this.overlays.Add( facial );
				}
			}

			if ( Lang13.Bool( H.h_style ) && !H.check_hidden_head_flags( 8193 ) ) {
				hair_style = GlobalVars.hair_styles_list[H.h_style];

				if ( hair_style != null ) {
					hair = new Icon( hair_style.icon, "" + hair_style.icon_state + "_s" );

					if ( hair_style.do_colouration ) {
						hair.Blend( String13.ColorCode( ((int)( H.r_hair ??0 )), ((int)( H.g_hair ??0 )), ((int)( H.b_hair ??0 )) ), 0 );
					}

					if ( hair_style.additional_accessories ) {
						hair.Blend( new Icon( hair_style.icon, "" + hair_style.icon_state + "_acc" ), 3 );
					}
					this.overlays.Add( hair );
				}
			}
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				if ( this.brainmob != null && this.brainmob.client != null ) {
					this.brainmob.client.screen.len = 0;
				}
				return;
			}));
			B = H.has_brain_worms();

			if ( Lang13.Bool( B ) ) {
				((Mob_Living_SimpleAnimal_Borer)B).infest_head( this );
			}
			this.transfer_identity( H );
			this.name = "" + H.real_name + "'s head";
			H.regenerate_icons();
			this.brainmob.stat = 2;
			this.brainmob.death();
			return;
		}

		// Function from file: organ_external.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.brainmob != null ) {
				this.brainmob.ghostize();
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: organ_external.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic T = null;
			Obj_Item_Device_Mmi_Posibrain B = null;
			Obj_Item_Organ_Brain B2 = null;

			
			if ( a is Obj_Item_Weapon_Scalpel || a is Obj_Item_Weapon_Shard || a is Obj_Item_Weapon_Kitchen_Utensil_Knife_Large && !( a is Obj_Item_Weapon_Kitchen_Utensil_Knife_Large_Butch ) ) {
				
				switch ((int)( this.brain_op_stage )) {
					case 0:
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " cuts " ).item( this.brainmob ).str( "'s head open with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You cut " ).item( this.brainmob ).str( "'s open with " ).the( a ).item().str( "!</span>" ).ToString() );
						this.brain_op_stage = 1;
						break;
					case 2:
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " severs " ).item( this.brainmob ).str( "'s brain connections delicately with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You sever " ).item( this.brainmob ).str( "'s brain connections delicately with " ).the( a ).item().str( "!</span>" ).ToString() );
						this.brain_op_stage = 3;
						break;
					default:
						base.attackby( (object)(a), (object)(b), (object)(c) );
						break;
				}
			} else if ( a is Obj_Item_Weapon_CircularSaw || a is Obj_Item_Weapon_Kitchen_Utensil_Knife_Large_Butch || a is Obj_Item_Weapon_Hatchet ) {
				
				switch ((int)( this.brain_op_stage )) {
					case 1:
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " saws " ).item( this.brainmob ).str( "'s head open with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You saw " ).item( this.brainmob ).str( "'s head open with " ).the( a ).item().str( ".</span>" ).ToString() );
						this.brain_op_stage = 2;
						break;
					case 3:
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " severs " ).item( this.brainmob ).str( "'s spine connections delicately with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You sever " ).item( this.brainmob ).str( "'s spine connections delicately with " ).the( a ).item().str( "!</span>" ).ToString() );
						b.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='red'> Debrained " + this.brainmob.name + " (" + this.brainmob.ckey + ") with " + a.name + " (INTENT: " + String13.ToUpper( b.a_intent ) + ")</font>" );
						this.brainmob.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='orange'> Debrained by " + b.name + " (" + b.ckey + ") with " + a.name + " (INTENT: " + String13.ToUpper( b.a_intent ) + ")</font>" );
						GlobalFuncs.msg_admin_attack( "" + b + " (" + b.ckey + ") debrained " + this.brainmob + " (" + this.brainmob.ckey + ") (INTENT: " + String13.ToUpper( b.a_intent ) + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + b.x + ";Y=" + b.y + ";Z=" + b.z + "'>JMP</a>)" );
						T = GlobalFuncs.get_turf( this );

						if ( this is Obj_Item_Weapon_Organ_Head_Posi ) {
							B = new Obj_Item_Device_Mmi_Posibrain( T );
							B.transfer_identity( this.brainmob );
						} else {
							B2 = new Obj_Item_Organ_Brain( T );
							B2.transfer_identity( this.brainmob );
						}

						if ( this.borer != null ) {
							this.borer.detach();
						}
						this.brain_op_stage = 4;
						break;
					default:
						base.attackby( (object)(a), (object)(b), (object)(c) );
						break;
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: organ_external.dm
		public void transfer_identity( Mob_Living_Carbon_Human H = null ) {
			this.brainmob = new Mob_Living_Carbon_Brain( this );
			this.brainmob.name = H.real_name;
			this.brainmob.real_name = H.real_name;
			this.brainmob.dna = H.dna.Clone();

			if ( H.mind != null ) {
				H.mind.transfer_to( this.brainmob );
			}
			this.brainmob.container = this;
			return;
		}

	}

}