// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Firedoor : Obj_Machinery_Door {

		public bool blocked = false;
		public int? nextstate = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.heat_proof = true;
			this.glass = true;
			this.sub_door = true;
			this.closingLayer = 3.01;
			this.icon = "icons/obj/doors/Doorfireglass.dmi";
			this.icon_state = "door_open";
		}

		public Obj_Machinery_Door_Firedoor ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: firedoor.dm
		public void latetoggle(  ) {
			
			if ( this.operating || ( this.stat & 2 ) != 0 || !Lang13.Bool( this.nextstate ) ) {
				return;
			}

			switch ((int?)( this.nextstate )) {
				case 1:
					this.nextstate = null;
					this.open();
					break;
				case 2:
					this.nextstate = null;
					this.close();
					break;
			}
			return;
		}

		// Function from file: firedoor.dm
		public override bool close( int? surpress_send = null ) {
			base.close( surpress_send );

			if ( Lang13.Bool( Lang13.FindIn( typeof(Mob_Living), GlobalFuncs.get_turf( this ) ) ) ) {
				this.open();
				return false;
			}
			this.latetoggle();
			return false;
		}

		// Function from file: firedoor.dm
		public override bool open( int? surpress_send = null ) {
			base.open( surpress_send );
			this.latetoggle();
			return false;
		}

		// Function from file: firedoor.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( this.density ) {
				this.icon_state = "door_closed";

				if ( this.blocked ) {
					this.overlays.Add( "welded" );
				}
			} else {
				this.icon_state = "door_open";

				if ( this.blocked ) {
					this.overlays.Add( "welded_open" );
				}
			}
			return false;
		}

		// Function from file: firedoor.dm
		public override void do_animate( string animation = null ) {
			
			switch ((string)( animation )) {
				case "opening":
					Icon13.Flick( "door_opening", this );
					break;
				case "closing":
					Icon13.Flick( "door_closing", this );
					break;
			}
			return;
		}

		// Function from file: firedoor.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_fingerprint( user );

			if ( this.blocked || this.operating || ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( this.density ) {
				this.open();
			} else {
				this.close();
			}
			return null;
		}

		// Function from file: firedoor.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic W = null;
			Obj_Structure_FirelockFrame F = null;

			this.add_fingerprint( user );

			if ( this.operating ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Weldingtool ) {
				W = A;

				if ( ((Obj_Item_Weapon_Weldingtool)W).remove_fuel( 0, user ) ) {
					this.blocked = !this.blocked;
					user.WriteMsg( new Txt( "<span class='danger'>You " ).item( ( this.blocked ? "welded" : "unwelded" ) ).str( " " ).the( this ).item().str( "</span>" ).ToString() );
					this.update_icon();
					return null;
				}
			}

			if ( A is Obj_Item_Weapon_Wrench && Lang13.Bool( this.panel_open ) ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/ratchet.ogg", 50, 1 );
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " starts undoing " + this + "'s bolts...</span>", "<span class='notice'>You start unfastening " + this + "'s floor bolts...</span>" );

				if ( !GlobalFuncs.do_after( user, 50 / A.toolspeed, null, this ) ) {
					return null;
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " unfastens " + this + "'s bolts.</span>", "<span class='notice'>You undo " + this + "'s floor bolts.</span>" );
				F = new Obj_Structure_FirelockFrame( GlobalFuncs.get_turf( this ) );

				if ( this is Obj_Machinery_Door_Firedoor_Heavy ) {
					F.reinforced = true;
				}
				F.constructionStep = 1;
				F.update_icon();
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( A is Obj_Item_Weapon_Crowbar || A is Obj_Item_Weapon_Twohanded_Fireaxe && A.wielded ) {
				
				if ( this.blocked || this.operating ) {
					return null;
				}

				if ( this.density ) {
					this.open();
					return null;
				} else {
					this.close();
					return null;
				}
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				this.default_deconstruction_screwdriver( user, this.icon_state, this.icon_state, A );
				return null;
			}
			return null;
		}

		// Function from file: firedoor.dm
		public override void power_change(  ) {
			
			if ( Lang13.Bool( this.powered( this.power_channel ) ) ) {
				this.stat &= 65533;
				this.latetoggle();
			} else {
				this.stat |= 2;
			}
			return;
		}

		// Function from file: firedoor.dm
		public override bool Bumped( dynamic AM = null ) {
			
			if ( this.p_open || this.operating ) {
				return false;
			}

			if ( !this.density ) {
				return base.Bumped( (object)(AM) );
			}
			return false;
		}

	}

}