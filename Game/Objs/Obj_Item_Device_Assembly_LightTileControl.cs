// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_LightTileControl : Obj_Item_Device_Assembly {

		public ByTable connected_floors = new ByTable();
		public int work_mode = 1;
		public int last_used = 0;
		public int cooldown_max = 5;
		public double color_r = 255;
		public double color_g = 255;
		public double color_b = 255;
		public bool set_state = true;
		public ByTable image_overlays = new ByTable();
		public bool highlighting_connected_floors = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.short_name = "LT remote";
			this.starting_materials = new ByTable().Set( "$iron", 1500 ).Set( "$glass", 200 );
			this.origin_tech = "magnets=2;programming=2";
			this.wires = 1;
			this.accessible_values = new ByTable().Set( "Turn light floors on", "set_state;number" ).Set( "Red color", "color_r;number;0;255" ).Set( "Green color", "color_g;number;0;255" ).Set( "Blue color", "color_b;number;0;255" );
			this.icon_state = "light_tiler";
		}

		public Obj_Item_Device_Assembly_LightTileControl ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: light_tiler.dm
		public void highlight_turf( dynamic T = null, Mob user = null ) {
			Image tmp_overlay = null;

			tmp_overlay = new Image( "icons/turf/areas.dmi", T, "red", 2.01 );
			this.image_overlays.Add( tmp_overlay );
			user.client.images.Add( tmp_overlay );
			return;
		}

		// Function from file: light_tiler.dm
		public void del_turf_from_memory( dynamic T = null ) {
			Image I = null;

			
			if ( !this.connected_floors.Remove( T ) ) {
				return;
			}

			if ( Task13.User != null && this.highlighting_connected_floors ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.image_overlays, typeof(Image) )) {
					I = _a;
					

					if ( ((dynamic)I).loc == T ) {
						this.image_overlays.Remove( I );
						Task13.User.client.images.Remove( I );
						break;
					}
				}
			}
			return;
		}

		// Function from file: light_tiler.dm
		public void add_turf_to_memory( dynamic T = null ) {
			this.connected_floors.Add( T );

			if ( Task13.User != null && this.highlighting_connected_floors ) {
				this.highlight_turf( T, Task13.User );
			}
			return;
		}

		// Function from file: light_tiler.dm
		public void change_floors(  ) {
			dynamic our_turf = null;
			Tile_Simulated_Floor T = null;
			Game_Data light_tile = null;

			
			if ( this.last_used + this.cooldown_max > Game13.time ) {
				return;
			}
			our_turf = GlobalFuncs.get_turf( this );

			foreach (dynamic _a in Lang13.Enumerate( this.connected_floors, typeof(Tile_Simulated_Floor) )) {
				T = _a;
				

				if ( T.z != Convert.ToInt32( our_turf.z ) ) {
					this.connected_floors.Remove( T );
					continue;
				}
				light_tile = T.floor_tile;

				if ( !( light_tile is Obj_Item_Stack_Tile_Light ) ) {
					this.connected_floors.Remove( T );
					continue;
				}
				((dynamic)light_tile).on = this.set_state;
				((dynamic)light_tile).color_r = this.color_r;
				((dynamic)light_tile).color_g = this.color_g;
				((dynamic)light_tile).color_b = this.color_b;
				T.update_icon();
			}
			return;
		}

		// Function from file: light_tiler.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob user = null;
			dynamic T = null;
			dynamic new_color = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["show_connections"] ) ) {
				
				if ( this.last_used + this.cooldown_max > Game13.time ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " is not responding.</span>" ).ToString() );
					return null;
				}
				user = Task13.User;

				if ( !( user != null ) || !( user.client != null ) ) {
					return null;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.connected_floors )) {
					T = _a;
					
					this.highlight_turf( T, user );
				}
				this.highlighting_connected_floors = true;
				this.last_used = Game13.time + 95;
				Task13.Schedule( 100, (Task13.Closure)(() => {
					this.highlighting_connected_floors = false;

					if ( user.client != null ) {
						user.client.images.Remove( this.image_overlays );
					}
					this.image_overlays = new ByTable();
					return;
				}));
			}

			if ( Lang13.Bool( href_list["toggle_mode"] ) ) {
				
				if ( this.work_mode == 1 ) {
					this.work_mode = 2;
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>When applied to light floors, " ).the( this ).item().str( " will now disconnect from them.</span>" ).ToString() );
				} else {
					this.work_mode = 1;
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>When applied to light floors, " ).the( this ).item().str( " will now connect to them.</span>" ).ToString() );
				}

				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
			}

			if ( Lang13.Bool( href_list["toggle_set_state"] ) ) {
				this.set_state = !this.set_state;

				if ( this.set_state ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>Light floors will be turned on.</span>" );
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>Light floors will be turned off.</span>" );
				}

				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
			}

			if ( Lang13.Bool( href_list["delete_all"] ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Disconnected " + this.connected_floors.len + " tiles from the network.</span>" );
				this.connected_floors = new ByTable();

				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
			}

			if ( Lang13.Bool( href_list["change_color"] ) ) {
				new_color = Interface13.Input( Task13.User, new Txt( "Please select a new color for " ).the( this ).item().str( "." ).ToString(), "" + this, String13.ColorCode( ((int)( this.color_r )), ((int)( this.color_g )), ((int)( this.color_b )) ), null, InputType.Color );

				if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
					return null;
				}
				this.color_r = GlobalFuncs.hex2num( String13.SubStr( new_color, 2, 4 ) );
				this.color_g = GlobalFuncs.hex2num( String13.SubStr( new_color, 4, 6 ) );
				this.color_b = GlobalFuncs.hex2num( String13.SubStr( new_color, 6, 8 ) );
				GlobalFuncs.to_chat( Task13.User, "<span class='info'>Changed color to " + this.color_r + ";" + this.color_g + ";" + this.color_b + "!</span>" );

				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
			}

			if ( Lang13.Bool( href_list["apply"] ) ) {
				this.change_floors();
			}

			if ( Lang13.Bool( href_list["refresh"] ) ) {
				
				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
			}
			return null;
		}

		// Function from file: light_tiler.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			Browser popup = null;

			dat = "";
			dat += new Txt( "\n	<tt>" ).item( this ).str( "</tt><BR><BR>\n	<p>Connected to <b>" ).item( this.connected_floors.len ).str( "</b> floors</p>\n	<p><a href='?src=" ).Ref( this ).str( ";show_connections=1'>Show connected floors for 10 seconds</a> | <a href='?src=" ).Ref( this ).str( ";toggle_mode=1'>Now " ).item( ( this.work_mode == 1 ? "adding" : "removing" ) ).str( " floors</a> | <a href='?src=" ).Ref( this ).str( ";delete_all=1'>Remove all connections</a></p>\n	<BR>\n	<p><font color=\"" ).item( String13.ColorCode( ((int)( this.color_r )), ((int)( this.color_g )), ((int)( this.color_b )) ) ).str( "\">Selected color: <b>" ).item( this.color_r ).str( " | " ).item( this.color_g ).str( " | " ).item( this.color_b ).str( "</b></font></p>\n	<p><a href='?src=" ).Ref( this ).str( ";change_color=1'>Change color</a> | <a href='?src=" ).Ref( this ).str( ";toggle_set_state=1'>Light floors will be turned <b>" ).item( ( this.set_state ? "ON" : "OFF" ) ).str( "</b></a></p>\n	<BR>\n	<p><a href='?src=" ).Ref( this ).str( ";apply=1'>Activate</a></p>\n	<p><a href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</a></p>\n	" ).ToString();
			popup = new Browser( user, new Txt().Ref( this ).ToString(), "" + this, 500, 300, this );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( user, new Txt().Ref( this ).ToString() );
			return null;
		}

		// Function from file: light_tiler.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic T = null;

			
			if ( A is Obj_Item_Stack_Tile_Light ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( A ).item().str( " must be installed into the floor before it can be controlled by " ).the( this ).item().str( "!</span>" ).ToString() );
				return false;
			}
			T = A;

			if ( !( T is Tile_Simulated_Floor ) ) {
				return false;
			}

			if ( !( T.floor_tile is Obj_Item_Stack_Tile_Light ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " is only compactible with light tiles.</span>" ).ToString() );
				return false;
			}

			if ( this.work_mode == 1 ) {
				
				if ( this.connected_floors.Find( T ) != 0 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( T ).item().str( " is already in " ).the( this ).item().str( "'s memory.</span>" ).ToString() );
					return false;
				}
				this.add_turf_to_memory( T );
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>Connected " ).the( T ).item().str( " to " ).the( this ).item().str( "!</span>" ).ToString() );
			} else {
				this.del_turf_from_memory( T );
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>Disconnected " ).the( T ).item().str( " from " ).the( this ).item().str( "!</span>" ).ToString() );
			}
			return false;
		}

		// Function from file: light_tiler.dm
		public override bool activate(  ) {
			
			if ( !base.activate() ) {
				return false;
			}
			this.change_floors();
			return false;
		}

	}

}