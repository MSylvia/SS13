// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_Vent : Obj_Machinery_Atmospherics_Unary {

		public int volume = 250;
		public bool build_killswitch = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.icon = "icons/obj/atmospherics/pipe_vent.dmi";
			this.icon_state = "intact";
		}

		// Function from file: vent.dm
		public Obj_Machinery_Atmospherics_Unary_Vent ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.air_contents.volume = this.volume;
			return;
		}

		// Function from file: vent.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			Ent_Static T = null;

			
			if ( pipe != null ) {
				this.dir = pipe.dir;
				this.initialize_directions = pipe.get_pipe_dir();

				if ( Lang13.Bool( pipe.pipename ) ) {
					this.name = pipe.pipename;
				}
			} else {
				this.initialize_directions = this.dir;
			}
			T = this.loc;
			this.level = ( Lang13.Bool( ((dynamic)T).intact ) ? 2 : 1 );
			this.initialize();
			this.build_network();

			if ( this.node != null ) {
				this.node.initialize();
				this.node.build_network();
			}
			return true;
		}

		// Function from file: vent.dm
		public override void hide( bool? h = null ) {
			this.update_icon();
			return;
		}

		// Function from file: vent.dm
		public override dynamic disconnect( Obj_Machinery_Atmospherics reference = null ) {
			base.disconnect( reference );
			this.update_icon();
			return null;
		}

		// Function from file: vent.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );
			this.update_icon();
			return false;
		}

		// Function from file: vent.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			Ent_Static floor = null;

			
			if ( this.node != null ) {
				this.icon_state = "intact";
			} else {
				this.icon_state = "exposed";
			}
			base.update_icon( (object)(location), (object)(target) );

			if ( this.loc is Tile_Simulated_Floor && this.node != null ) {
				floor = this.loc;

				if ( Lang13.Bool( ((dynamic)floor).floor_tile ) && this.node.alpha == 128 ) {
					this.underlays.Cut();
				}
			}
			return null;
		}

		// Function from file: vent.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			dynamic removed = null;

			_default = base.process();

			if ( GlobalVars.disable_vents ) {
				return _default;
			}

			if ( !( this.node != null ) ) {
				return _default;
			}

			if ( !( this.loc != null ) ) {
				return _default;
			}
			removed = this.air_contents.remove( this.volume );
			this.loc.assume_air( removed );
			return 1;
		}

	}

}