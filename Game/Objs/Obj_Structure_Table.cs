// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Table : Obj_Structure {

		public Type frame = typeof(Obj_Structure_TableFrame);
		public Type framestack = typeof(Obj_Item_Stack_Rods);
		public Type buildstack = typeof(Obj_Item_Stack_Sheet_Metal);
		public bool busy = false;
		public int? buildstackamount = 1;
		public int? framestackamount = 2;
		public Mob tableclimber = null;
		public bool deconstructable = true;
		public ByTable table_contents = new ByTable();
		public int viewing_category = 1;
		public ByTable categories = new ByTable(new object [] { "Weaponry", "Ammunition", "Robots", "Food", "Misc" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mouse_drag_pointer = 1;
			this.anchored = 1;
			this.pass_flags = 32;
			this.smooth = 1;
			this.canSmoothWith = new ByTable(new object [] { typeof(Obj_Structure_Table), typeof(Obj_Structure_Table_Reinforced) });
			this.icon = "icons/obj/smooth_structures/table.dmi";
			this.icon_state = "table";
			this.layer = 2.8;
		}

		// Function from file: tables_racks.dm
		public Obj_Structure_Table ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Structure_Table T = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_Table) )) {
				T = _a;
				

				if ( T != this ) {
					GlobalFuncs.qdel( T );
				}
			}
			return;
		}

		// Function from file: table.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic TR = null;
			dynamic fail_msg = null;

			
			if ( Task13.User.stat != 0 || !this.Adjacent( Task13.User ) || Lang13.Bool( Task13.User.lying ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["make"] ) ) {
				TR = Lang13.FindObj( href_list["make"] );
				this.busy = true;
				this.interact( Task13.User );
				fail_msg = this.construct_item( Task13.User, TR );

				if ( !Lang13.Bool( fail_msg ) ) {
					Task13.User.WriteMsg( "<span class='notice'>" + TR.name + " constructed.</span>" );
				} else {
					Task13.User.WriteMsg( "<span class ='warning'>Construction failed" + fail_msg + "</span>" );
				}
				this.busy = false;
				this.interact( Task13.User );
			}

			if ( Lang13.Bool( href_list["forwardCat"] ) ) {
				this.viewing_category = this.next_cat();
				Task13.User.WriteMsg( "<span class='notice'>Category is now " + this.categories[this.viewing_category] + ".</span>" );
				this.interact( Task13.User );
			}

			if ( Lang13.Bool( href_list["backwardCat"] ) ) {
				this.viewing_category = this.prev_cat();
				Task13.User.WriteMsg( "<span class='notice'>Category is now " + this.categories[this.viewing_category] + ".</span>" );
				this.interact( Task13.User );
			}
			return null;
		}

		// Function from file: table.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			ByTable can_craft = null;
			ByTable cant_craft = null;
			TableRecipe R = null;
			TableRecipe R2 = null;
			TableRecipe R3 = null;
			Browser popup = null;

			
			if ( ((Mob)user).incapacitated() || Lang13.Bool( user.lying ) || !this.Adjacent( user ) ) {
				return null;
			}
			this.check_table();
			((Mob)user).face_atom( this );
			dat = "<h3>Crafting menu</h3>";

			if ( this.busy ) {
				dat += "<div class='statusDisplay'>";
				dat += "Crafting in progress...</div>";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";backwardCat=1'><--</A>" ).ToString();
				dat += " " + this.categories[this.prev_cat()] + " |";
				dat += " <B>" + this.categories[this.viewing_category] + "</B> ";
				dat += "| " + this.categories[this.next_cat()] + " ";
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";forwardCat=1'>--></A><BR><BR>" ).ToString();
				dat += "<div class='statusDisplay'>";
				can_craft = new ByTable();
				cant_craft = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.table_recipes, typeof(TableRecipe) )) {
					R = _a;
					

					if ( R.category != this.categories[this.viewing_category] ) {
						continue;
					}

					if ( this.check_contents( R ) ) {
						can_craft.Add( R );
					} else {
						cant_craft.Add( R );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( can_craft, typeof(TableRecipe) )) {
					R2 = _b;
					
					dat += this.build_recipe_text( R2 );
				}

				foreach (dynamic _c in Lang13.Enumerate( cant_craft, typeof(TableRecipe) )) {
					R3 = _c;
					
					dat += this.build_recipe_text( R3 );
				}
				dat += "</div>";
			}
			popup = new Browser( user, "table", "Table", 500, 500 );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: table.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			
			if ( !( over is Mob_Living ) ) {
				return null;
			}

			if ( !((Mob)over).IsAdvancedToolUser() ) {
				return null;
			}
			this.interact( over );
			return null;
		}

		// Function from file: tables_racks.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Structure_Table RT = null;
			Obj_Structure_Table RT2 = null;
			dynamic T = null;
			ByTable oldContents = null;
			Obj_Item C = null;
			ByTable click_params = null;

			
			if ( A is Obj_Item_Weapon_Grab ) {
				this.tablepush( A, user );
				return null;
			}

			if ( !Lang13.Bool( this.flags & 128 ) ) {
				
				if ( A is Obj_Item_Weapon_Screwdriver ) {
					
					if ( this is Obj_Structure_Table_Reinforced ) {
						RT = this;

						if ( Lang13.Bool( ((dynamic)RT).status ) == true ) {
							this.table_destroy( 2, user );
							return null;
						}
					} else {
						this.table_destroy( 2, user );
						return null;
					}
				}

				if ( A is Obj_Item_Weapon_Wrench ) {
					
					if ( this is Obj_Structure_Table_Reinforced ) {
						RT2 = this;

						if ( Lang13.Bool( ((dynamic)RT2).status ) == true ) {
							this.table_destroy( 3, user );
							return null;
						}
					} else {
						this.table_destroy( 3, user );
						return null;
					}
				}
			}

			if ( A is Obj_Item_Weapon_Storage_Bag_Tray ) {
				T = A;

				if ( T.contents.len > 0 ) {
					oldContents = T.contents.Copy();
					T.__CallVerb("Empty Contents" );

					foreach (dynamic _a in Lang13.Enumerate( oldContents, typeof(Obj_Item) )) {
						C = _a;
						
						C.loc = this.loc;
					}
					((Ent_Static)user).visible_message( "" + user + " empties " + A + " on " + this + "." );
					return null;
				}
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				return null;
			}

			if ( !Lang13.Bool( A.flags & 128 ) ) {
				
				if ( Lang13.Bool( user.drop_item() ) ) {
					A.Move( this.loc );
					click_params = String13.ParseUrlParams( _params );

					if ( !( click_params != null ) || !Lang13.Bool( click_params["icon-x"] ) || !Lang13.Bool( click_params["icon-y"] ) ) {
						return null;
					}
					A.pixel_x = Num13.MaxInt( ((int)( -( Game13.icon_size / 2 ) )), Num13.MinInt( ((int)( ( String13.ParseNumber( click_params["icon-x"] ) ??0) - 16 )), ((int)( Game13.icon_size / 2 )) ) );
					A.pixel_y = Num13.MaxInt( ((int)( -( Game13.icon_size / 2 ) )), Num13.MinInt( ((int)( ( String13.ParseNumber( click_params["icon-y"] ) ??0) - 16 )), ((int)( Game13.icon_size / 2 )) ) );
				}
			}
			return null;
		}

		// Function from file: table.dm
		public string build_recipe_text( TableRecipe R = null ) {
			string _default = null;

			string name_text = null;
			string req_text = null;
			string tool_text = null;
			string catalist_text = null;
			dynamic A = null;
			dynamic O = null;
			dynamic RE = null;
			dynamic C = null;
			dynamic RE2 = null;
			dynamic O2 = null;
			dynamic T = null;

			_default = "";
			name_text = "";
			req_text = "";
			tool_text = "";
			catalist_text = "";

			if ( this.check_contents( R ) ) {
				name_text = new Txt( "<A href='?src=" ).Ref( this ).str( ";make=" ).Ref( R ).str( "'>" ).item( R.name ).str( "</A>" ).ToString();
			} else {
				name_text = "<span class='linkOff'>" + R.name + "</span>";
			}

			if ( Lang13.Bool( name_text ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( R.reqs )) {
					A = _a;
					

					if ( Lang13.Bool( A.IsSubclassOf( typeof(Obj) ) ) ) {
						O = Lang13.Call( A );
						req_text += " " + R.reqs[A] + " " + O.name;
						GlobalFuncs.qdel( O );
					}

					if ( Lang13.Bool( A.IsSubclassOf( typeof(Reagent) ) ) ) {
						RE = Lang13.Call( A );
						req_text += " " + R.reqs[A] + " " + RE.name;
						GlobalFuncs.qdel( RE );
					}
				}

				if ( R.chem_catalysts.len != 0 ) {
					catalist_text += ", Catalysts:";

					foreach (dynamic _b in Lang13.Enumerate( R.chem_catalysts )) {
						C = _b;
						

						if ( Lang13.Bool( C.IsSubclassOf( typeof(Reagent) ) ) ) {
							RE2 = Lang13.Call( C );
							catalist_text += " " + R.chem_catalysts[C] + " " + RE2.name;
							GlobalFuncs.qdel( RE2 );
						}
					}
				}

				if ( R.tools.len != 0 ) {
					tool_text += ", Tools:";

					foreach (dynamic _c in Lang13.Enumerate( R.tools )) {
						O2 = _c;
						

						if ( Lang13.Bool( O2.IsSubclassOf( typeof(Obj) ) ) ) {
							T = Lang13.Call( O2 );
							tool_text += " " + R.tools[O2] + " " + T.name;
							GlobalFuncs.qdel( T );
						}
					}
				}
				_default = "" + name_text + req_text + tool_text + catalist_text + "<BR>";
			}
			return _default;
		}

		// Function from file: table.dm
		public int prev_cat(  ) {
			int _default = 0;

			
			if ( this.viewing_category == this.categories.len ) {
				_default = this.viewing_category - 1;
			} else {
				_default = this.viewing_category % this.categories.len - 1;
			}

			if ( _default <= 0 ) {
				_default = this.categories.len;
			}
			return _default;
		}

		// Function from file: table.dm
		public int next_cat(  ) {
			int _default = 0;

			_default = this.viewing_category % this.categories.len + 1;
			return _default;
		}

		// Function from file: table.dm
		public ByTable del_reqs( dynamic R = null, dynamic resultobject = null ) {
			ByTable Deletion = null;
			double? amt = null;
			bool reagenttransfer = false;
			dynamic A = null;
			dynamic S = null;
			dynamic B = null;
			dynamic I = null;
			dynamic B2 = null;
			int item_amount = 0;
			dynamic RC = null;
			dynamic RG = null;
			dynamic B3 = null;
			dynamic RC2 = null;
			ByTable partlist = null;
			dynamic M = null;
			dynamic B4 = null;
			dynamic A2 = null;

			Deletion = new ByTable();
			reagenttransfer = false;

			if ( resultobject is Obj_Item_Weapon_ReagentContainers ) {
				reagenttransfer = true;
			}

			foreach (dynamic _d in Lang13.Enumerate( R.reqs )) {
				A = _d;
				
				amt = Lang13.DoubleNullable( R.reqs[A] );

				if ( Lang13.Bool( A.IsSubclassOf( typeof(Obj_Item_Stack) ) ) ) {
					S = null;

					foreach (dynamic _a in Lang13.Enumerate( this.table_contents )) {
						B = _a;
						

						if ( Lang13.Bool( B.IsSubclassOf( A ) ) ) {
							string _loop_ctrl_1 = null;

							while (( amt ??0) > 0) {
								S = Lang13.FindIn( B, this.loc );

								if ( Convert.ToDouble( S.amount ) >= ( amt ??0) ) {
									S.use( amt );
									_loop_ctrl_1 = "break";
									break;
								} else {
									amt -= Convert.ToDouble( S.amount );
									GlobalFuncs.qdel( S );
								}
							}

							if ( _loop_ctrl_1 == "break" ) {
								break;
							} else if ( _loop_ctrl_1 == "continue" ) {
								continue;
							}
						}
					}
				} else if ( Lang13.Bool( A.IsSubclassOf( typeof(Obj_Item) ) ) ) {
					I = null;

					foreach (dynamic _b in Lang13.Enumerate( this.table_contents )) {
						B2 = _b;
						

						if ( Lang13.Bool( B2.IsSubclassOf( A ) ) ) {
							item_amount = Convert.ToInt32( this.table_contents[B2] );
							string _loop_ctrl_2 = null;

							while (item_amount > 0) {
								I = Lang13.FindIn( B2, this.loc );
								Deletion.Add( I );
								I.loc = null;
								amt--;
								item_amount--;

								if ( reagenttransfer && I is Obj_Item_Weapon_ReagentContainers ) {
									RC = I;
									((Reagents)RC.reagents).trans_to( resultobject, RC.reagents.total_volume );
								}

								if ( ( amt ??0) <= 0 ) {
									_loop_ctrl_2 = "break";
									break;
								}
							}

							if ( _loop_ctrl_2 == "break" ) {
								break;
							} else if ( _loop_ctrl_2 == "continue" ) {
								continue;
							}
						}
					}
				} else {
					RG = Lang13.Call( A );

					foreach (dynamic _c in Lang13.Enumerate( this.table_contents )) {
						B3 = _c;
						

						if ( Lang13.Bool( B3.IsSubclassOf( typeof(Obj_Item_Weapon_ReagentContainers) ) ) ) {
							RC2 = Lang13.FindIn( B3, this.loc );

							if ( Lang13.Bool( ((Reagents)RC2.reagents).has_reagent( RG.id, amt ) ) ) {
								
								if ( reagenttransfer ) {
									((Reagents)RC2.reagents).trans_id_to( resultobject, RG.id, amt );
								} else {
									((Reagents)RC2.reagents).remove_reagent( RG.id, amt );
								}
								RG.volume = amt;
								Deletion.Add( RG );
								break;
							} else if ( Lang13.Bool( ((Reagents)RC2.reagents).has_reagent( RG.id ) ) ) {
								Deletion.Add( RG );
								RG.volume += ((Reagents)RC2.reagents).get_reagent_amount( RG.id ) ?1:0;
								amt -= ((Reagents)RC2.reagents).get_reagent_amount( RG.id ) ?1:0;

								if ( reagenttransfer ) {
									((Reagents)RC2.reagents).trans_id_to( resultobject, RG.id, Lang13.DoubleNullable( RG.volume ) );
								} else {
									((Reagents)RC2.reagents).del_reagent( RG.id );
								}
							}
						}
					}
				}
			}
			partlist = new ByTable(new object [] { R.parts.len });

			foreach (dynamic _e in Lang13.Enumerate( R.parts )) {
				M = _e;
				
				partlist[M] = R.parts[M];
			}

			foreach (dynamic _g in Lang13.Enumerate( Deletion )) {
				B4 = _g;
				
				string _loop_ctrl_3 = null;

				foreach (dynamic _f in Lang13.Enumerate( R.parts )) {
					A2 = _f;
					

					if ( Lang13.Bool( A2.IsInstanceOfType( B4 ) ) ) {
						
						if ( Convert.ToDouble( partlist[A2] ) > 0 ) {
							partlist[A2] -= 1;
							_loop_ctrl_3 = "continue";
							break;
						}
					}
				}

				if ( _loop_ctrl_3 == "break" ) {
					break;
				} else if ( _loop_ctrl_3 == "continue" ) {
					continue;
				}
				Deletion.Remove( B4 );
				GlobalFuncs.qdel( B4 );
			}
			return Deletion;
		}

		// Function from file: table.dm
		public dynamic construct_item( Mob user = null, dynamic R = null ) {
			bool send_feedback = false;
			dynamic I = null;
			dynamic S = null;
			ByTable parts = null;
			dynamic A = null;
			dynamic B = null;

			this.check_table();
			send_feedback = true;

			if ( this.check_contents( R ) ) {
				
				if ( this.check_tools( user, R ) ) {
					
					if ( GlobalFuncs.do_after( user, R.time, null, this ) ) {
						
						if ( !this.check_contents( R ) ) {
							return ", missing component.";
						}

						if ( !this.check_tools( user, R ) ) {
							return ", missing tool.";
						}
						I = Lang13.Call( R.result, this.loc );

						if ( I is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
							S = I;
							((Ent_Static)S).create_reagents( S.volume );
							GlobalFuncs.feedback_add_details( "food_made", "" + S.type );
							send_feedback = false;
						}
						parts = this.del_reqs( R, I );

						foreach (dynamic _a in Lang13.Enumerate( parts )) {
							A = _a;
							

							if ( A is Obj_Item ) {
								B = A;
								B.loc = I;
								B.pixel_x = Lang13.Initial( B, "pixel_x" );
								B.pixel_y = Lang13.Initial( B, "pixel_y" );
							} else {
								
								if ( !Lang13.Bool( I.reagents ) ) {
									I.reagents = new Reagents();
								}
								I.reagents.reagent_list.Add( A );
							}
						}
						((Ent_Static)I).CheckParts();

						if ( send_feedback ) {
							GlobalFuncs.feedback_add_details( "object_crafted", "" + I.type );
						}
						return 0;
					}
					return ".";
				}
				return ", missing tool.";
			}
			return ", missing component.";
		}

		// Function from file: table.dm
		public bool check_tools( Mob user = null, dynamic R = null ) {
			ByTable possible_tools = null;
			Obj_Item I = null;
			Obj_Item SI = null;
			dynamic A = null;
			dynamic I2 = null;

			
			if ( !( R.tools.len != 0 ) ) {
				return true;
			}
			possible_tools = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( user.contents, typeof(Obj_Item) )) {
				I = _b;
				

				if ( I is Obj_Item_Weapon_Storage ) {
					
					foreach (dynamic _a in Lang13.Enumerate( I.contents, typeof(Obj_Item) )) {
						SI = _a;
						
						possible_tools.Add( SI.type );
					}
				} else {
					possible_tools.Add( I.type );
				}
			}
			possible_tools.Add( this.table_contents );

			foreach (dynamic _d in Lang13.Enumerate( R.tools )) {
				A = _d;
				
				string _loop_ctrl_1 = null;

				foreach (dynamic _c in Lang13.Enumerate( possible_tools )) {
					I2 = _c;
					

					if ( Lang13.Bool( I2.IsSubclassOf( A ) ) ) {
						possible_tools.Remove( I2 );
						_loop_ctrl_1 = "continue";
						break;
					}
				}

				if ( _loop_ctrl_1 == "break" ) {
					break;
				} else if ( _loop_ctrl_1 == "continue" ) {
					continue;
				}
				return false;
			}
			return true;
		}

		// Function from file: table.dm
		public void check_table(  ) {
			Obj_Item I = null;
			Obj_Item S = null;
			Obj_Item RC = null;
			Reagent A = null;

			this.table_contents = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Obj_Item) )) {
				I = _b;
				

				if ( I is Obj_Item_Stack ) {
					S = I;
					this.table_contents[I.type] += ((dynamic)S).amount;
				} else {
					
					if ( I is Obj_Item_Weapon_ReagentContainers ) {
						RC = I;

						if ( Lang13.Bool( RC.flags & 4096 ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( RC.reagents.reagent_list, typeof(Reagent) )) {
								A = _a;
								
								this.table_contents[A.type] += A.volume;
							}
						}
					}
					this.table_contents[I.type] += 1;
				}
			}
			return;
		}

		// Function from file: table.dm
		public bool check_contents( dynamic R = null ) {
			dynamic A = null;
			double needed_amount = 0;
			dynamic B = null;
			dynamic A2 = null;

			this.check_table();

			foreach (dynamic _b in Lang13.Enumerate( R.reqs )) {
				A = _b;
				
				needed_amount = Convert.ToDouble( R.reqs[A] );
				string _loop_ctrl_1 = null;

				foreach (dynamic _a in Lang13.Enumerate( this.table_contents )) {
					B = _a;
					

					if ( Lang13.Bool( B.IsSubclassOf( A ) ) ) {
						
						if ( Convert.ToDouble( this.table_contents[B] ) >= Convert.ToDouble( R.reqs[A] ) ) {
							_loop_ctrl_1 = "continue";
							break;
						} else {
							needed_amount -= Convert.ToDouble( this.table_contents[B] );

							if ( needed_amount <= 0 ) {
								_loop_ctrl_1 = "continue";
								break;
							} else {
								continue;
							}
						}
					}
				}

				if ( _loop_ctrl_1 == "break" ) {
					break;
				} else if ( _loop_ctrl_1 == "continue" ) {
					continue;
				}
				return false;
			}

			foreach (dynamic _c in Lang13.Enumerate( R.chem_catalysts )) {
				A2 = _c;
				

				if ( Convert.ToDouble( this.table_contents[A2] ) < Convert.ToDouble( R.chem_catalysts[A2] ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: tables_racks.dm
		public virtual bool climb_table( Mob user = null ) {
			double? climb_time = null;

			this.add_fingerprint( user );
			user.visible_message( "<span class='warning'>" + user + " starts climbing onto " + this + ".</span>", "<span class='notice'>You start climbing onto " + this + "...</span>" );
			climb_time = 20;

			if ( user.restrained() ) {
				climb_time *= 2;
			}
			this.tableclimber = user;

			if ( GlobalFuncs.do_mob( user, user, climb_time ) ) {
				
				if ( this.loc != null ) {
					this.density = false;
					Map13.Step( user, Map13.GetDistance( user, this.loc ) );

					if ( false ) {
						user.visible_message( "<span class='warning'>" + user + " climbs onto " + this + ".</span>", "<span class='notice'>You climb onto " + this + ".</span>" );
						GlobalFuncs.add_logs( user, this, "climbed onto" );
						user.Stun( 2 );
					} else {
						user.WriteMsg( "<span class='warning'>You fail to climb onto " + this + ".</span>" );
					}
					this.density = true;
					this.tableclimber = null;
					return true;
				}
			}
			this.tableclimber = null;
			return false;
		}

		// Function from file: tables_racks.dm
		public void table_destroy( int destroy_type = 0, dynamic user = null ) {
			int? i = null;
			int? i2 = null;
			int? i3 = null;
			int? i4 = null;
			int? i5 = null;

			
			if ( !this.deconstructable || Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( destroy_type == 1 ) {
				i = null;
				i = 1;

				while (( i ??0) <= ( this.framestackamount ??0)) {
					Lang13.Call( this.framestack, GlobalFuncs.get_turf( this ) );
					i++;
				}
				i2 = null;
				i2 = 1;

				while (( i2 ??0) <= ( this.buildstackamount ??0)) {
					Lang13.Call( this.buildstack, GlobalFuncs.get_turf( this ) );
					i2++;
				}
				GlobalFuncs.qdel( this );
				return;
			}

			if ( destroy_type == 2 ) {
				user.WriteMsg( "<span class='notice'>You start disassembling " + this + "...</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 20, null, this ) ) {
					Lang13.Call( this.frame, this.loc );
					i3 = null;
					i3 = 1;

					while (( i3 ??0) <= ( this.buildstackamount ??0)) {
						Lang13.Call( this.buildstack, GlobalFuncs.get_turf( this ) );
						i3++;
					}
					GlobalFuncs.qdel( this );
					return;
				}
			}

			if ( destroy_type == 3 ) {
				user.WriteMsg( "<span class='notice'>You start deconstructing " + this + "...</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 40, null, this ) ) {
					i4 = null;
					i4 = 1;

					while (( i4 ??0) <= ( this.framestackamount ??0)) {
						Lang13.Call( this.framestack, GlobalFuncs.get_turf( this ) );
						i4++;
					}
					i5 = null;
					i5 = 1;

					while (( i5 ??0) <= ( this.buildstackamount ??0)) {
						Lang13.Call( this.buildstack, GlobalFuncs.get_turf( this ) );
						i5++;
					}
					GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );
					GlobalFuncs.qdel( this );
					return;
				}
			}
			return;
		}

		// Function from file: tables_racks.dm
		public virtual bool tablepush( dynamic I = null, dynamic user = null ) {
			dynamic G = null;
			Obj_Structure_Table OT = null;

			
			if ( Map13.GetDistance( this, user ) < 2 ) {
				G = I;

				if ( G.affecting.buckled != null ) {
					user.WriteMsg( "<span class='warning'>" + G.affecting + " is buckled to " + G.affecting.buckled + "!</span>" );
					return false;
				}

				if ( Convert.ToDouble( G.state ) < 2 ) {
					user.WriteMsg( "<span class='warning'>You need a better grip to do that!</span>" );
					return false;
				}

				if ( !((Obj_Item_Weapon_Grab)G).confirm() ) {
					return false;
				}
				G.affecting.loc = this.loc;

				if ( this is Obj_Structure_Table_Optable ) {
					OT = this;
					G.affecting.resting = 1;
					((Mob)G.affecting).update_canmove();
					this.visible_message( "<span class='notice'>" + G.assailant + " has laid " + G.affecting + " on " + this + ".</span>" );
					((dynamic)OT).patient = G.affecting;
					((dynamic)OT).check_patient();
					GlobalFuncs.qdel( I );
					return true;
				}
				((Mob)G.affecting).Weaken( 2 );
				((Ent_Static)G.affecting).visible_message( "<span class='danger'>" + G.assailant + " pushes " + G.affecting + " onto " + this + ".</span>", "<span class='userdanger'>" + G.assailant + " pushes " + G.affecting + " onto " + this + ".</span>" );
				GlobalFuncs.add_logs( G.assailant, G.affecting, "pushed" );
				GlobalFuncs.qdel( I );
				return true;
			}
			GlobalFuncs.qdel( I );
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool MouseDrop_T( Ent_Static dropping = null, Mob user = null ) {
			base.MouseDrop_T( dropping, user );

			if ( dropping is Mob && user == dropping && user is Mob_Living_Carbon_Human ) {
				
				if ( user.canmove ) {
					this.climb_table( user );
					return false;
				}
			}

			if ( !( dropping is Obj_Item_Weapon ) || user.get_active_hand() != dropping ) {
				return false;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				return false;
			}

			if ( !user.drop_item() ) {
				return false;
			}

			if ( dropping.loc != this.loc ) {
				Map13.Step( (Ent_Dynamic)(dropping), Map13.GetDistance( dropping, this ) );
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool CanAStarPass( dynamic ID = null, int dir = 0, dynamic caller = null ) {
			bool _default = false;

			Ent_Dynamic mover = null;

			_default = !this.density;

			if ( caller is Ent_Dynamic ) {
				mover = caller;
				_default = _default || mover.checkpass( 1 ) != 0;
			}
			return _default;
		}

		// Function from file: tables_racks.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			
			if ( height == 0 ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Dynamic)mover).checkpass( 1 ) != 0 ) {
				return true;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table), GlobalFuncs.get_turf( mover ) ) ) ) {
				return true;
			} else {
				return !this.density;
			}
		}

		// Function from file: tables_racks.dm
		public override void attack_tk( Mob_Living_Carbon_Human user = null ) {
			return;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			((Mob)a).changeNext_move( 8 );

			if ( this.tableclimber != null && this.tableclimber != a ) {
				this.tableclimber.Weaken( 2 );
				this.tableclimber.visible_message( "<span class='warning'>" + this.tableclimber.name + " has been knocked off the table", "You're knocked off the table!", "You see " + this.tableclimber.name + " get knocked off the table</span>" );
			}
			return null;
		}

		// Function from file: tables_racks.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			base.attack_hulk( hulk, true );
			this.visible_message( "<span class='danger'>" + hulk + " smashes " + this + " apart!</span>" );
			GlobalFuncs.playsound( this.loc, "sound/effects/bang.ogg", 50, 1 );
			hulk.say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );
			this.table_destroy( 1 );
			return true;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.attack_hand( a );
			return null;
		}

		// Function from file: tables_racks.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( Lang13.Bool( ((dynamic)user).environment_smash ) ) {
				user.do_attack_animation( this );
				GlobalFuncs.playsound( this.loc, "sound/weapons/genhit.ogg", 50, 1 );
				this.visible_message( "<span class='danger'>" + user + " smashes " + this + " apart!</span>" );
				this.table_destroy( 1 );
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool attack_alien( dynamic user = null ) {
			((Ent_Dynamic)user).do_attack_animation( this );
			GlobalFuncs.playsound( this.loc, "sound/weapons/bladeslice.ogg", 50, 1 );
			this.visible_message( "<span class='danger'>" + user + " slices " + this + " apart!</span>" );
			this.table_destroy( 1 );
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool mech_melee_attack( Obj_Mecha M = null ) {
			this.visible_message( "<span class='danger'>" + M.name + " smashes " + this + " apart!</span>" );
			GlobalFuncs.playsound( this.loc, "sound/weapons/punch4.ogg", 50, 1 );
			this.table_destroy( 1 );
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.table_destroy( 1 );
				return false;
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.table_destroy( 1 );
					} else {
						GlobalFuncs.qdel( this );
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.table_destroy( 1 );
					}
					break;
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.smooth != 0 ) {
				GlobalFuncs.smooth_icon( this );
				GlobalFuncs.smooth_icon_neighbors( this );
			}
			return false;
		}

	}

}