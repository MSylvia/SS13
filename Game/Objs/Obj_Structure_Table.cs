// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Table : Obj_Structure {

		public Type parts = typeof(Obj_Item_Weapon_TableParts);
		public Icon clicked = null;
		public bool flipped = false;
		public double health = 100;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.throwpass = true;
			this.icon_state = "table";
			this.layer = 2.8;
		}

		// Function from file: tables_racks.dm
		public Obj_Structure_Table ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Structure_Table T = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_Table) )) {
				T = _a;
				

				if ( T != this ) {
					GlobalFuncs.qdel( T );
				}
			}
			this.update_icon();
			this.update_adjacent();
			return;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Interface13.Stat( null, a.mutations.Contains( 4 ) );

			if ( false ) {
				this.visible_message( "<span class='danger'>" + a + " smashes " + this + " apart!</span>" );
				((Ent_Dynamic)a).say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );
				this.destroy();
			}
			return null;
		}

		// Function from file: tables_racks.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			ByTable params_list = null;
			dynamic G = null;
			Mob M = null;
			double clamp_x = 0;
			double clamp_y = 0;

			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}
			params_list = String13.ParseUrlParams( c );

			if ( a is Obj_Item_Weapon_Grab && Map13.GetDistance( this, b ) < 2 ) {
				G = a;

				if ( G.affecting is Mob_Living ) {
					M = G.affecting;

					if ( Convert.ToDouble( G.state ) < 2 ) {
						
						if ( b.a_intent == "hurt" ) {
							
							if ( Rand13.PercentChance( 15 ) ) {
								M.Weaken( 5 );
							}
							new ByTable().Set( 1, 8 ).Set( "def_zone", "head" ).Apply( Lang13.BindFunc( M, "apply_damage" ) );
							this.visible_message( new Txt( "<span class='warning'>" ).item( G.assailant ).str( " slams " ).item( G.affecting ).str( "'s face against " ).the( this ).item().str( "!</span>" ).ToString() );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/tablehit1.ogg", 50, 1 );
						} else {
							GlobalFuncs.to_chat( b, "<span class='warning'>You need a better grip to do that!</span>" );
							return null;
						}
					} else {
						G.affecting.loc = this.loc;
						((Mob)G.affecting).Weaken( 5 );
						this.visible_message( new Txt( "<span class='warning'>" ).item( G.assailant ).str( " puts " ).item( G.affecting ).str( " on " ).the( this ).item().str( ".</span>" ).ToString() );
					}
					GlobalFuncs.returnToPool( a );
					return null;
				}
			}

			if ( a is Obj_Item_Weapon_Wrench && this.can_disassemble() ) {
				GlobalFuncs.to_chat( b, "<span class='notice'>Now disassembling table</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					this.destroy();
				}
				return null;
			}

			if ( Lang13.Bool( b.drop_item( a, this.loc ) ) ) {
				
				if ( a.loc == this.loc && params_list.len != 0 ) {
					clamp_x = this.clicked.Width() / 2;
					clamp_y = this.clicked.Height() / 2;
					a.pixel_x = ( ( String13.ParseNumber( params_list["icon-x"] ) ??0) - clamp_x <= -clamp_x ? -clamp_x : ( ( String13.ParseNumber( params_list["icon-x"] ) ??0) - clamp_x >= clamp_x ? clamp_x : ( String13.ParseNumber( params_list["icon-x"] ) ??0) - clamp_x ) );
					a.pixel_y = ( ( String13.ParseNumber( params_list["icon-y"] ) ??0) - clamp_y <= -clamp_y ? -clamp_y : ( ( String13.ParseNumber( params_list["icon-y"] ) ??0) - clamp_y >= clamp_y ? clamp_y : ( String13.ParseNumber( params_list["icon-y"] ) ??0) - clamp_y ) );
				}
			}
			return null;
		}

		// Function from file: tables_racks.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			
			if ( !( O is Obj_Item_Weapon ) || ((Mob)user).get_active_hand() != O ) {
				return false;
			}

			if ( Lang13.Bool( user.drop_item() ) ) {
				
				if ( O.loc != this.loc ) {
					Map13.Step( (Ent_Dynamic)(O), Map13.GetDistance( O, this ) );
				}
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool CheckExit( Ent_Dynamic mover = null, Ent_Static target = null ) {
			
			if ( mover is Ent_Dynamic && mover.checkpass( 1 ) != 0 ) {
				return true;
			}

			if ( this.flipped ) {
				
				if ( Map13.GetDistance( this.loc, target ) == this.dir ) {
					return !this.density;
				} else {
					return true;
				}
			}
			return true;
		}

		// Function from file: tables_racks.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			
			if ( AM is Obj_Structure_Bed_Chair_Vehicle_Wizmobile ) {
				this.destroy();
			}
			return base.Bumped( AM, (object)(yes) );
		}

		// Function from file: tables_racks.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			dynamic M = null;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Obj_Item_Projectile ) {
				return this.check_cover( mover, target );
			}

			if ( mover is Mob ) {
				M = mover;

				if ( M.flying ) {
					return true;
				}
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 1 ) != 0 ) {
				return true;
			}

			if ( this.flipped ) {
				
				if ( Map13.GetDistance( this.loc, target ) == this.dir ) {
					return !this.density;
				} else {
					return true;
				}
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override void attack_tk( Mob user = null ) {
			return;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			
			if ( Convert.ToDouble( ((dynamic)user).environment_smash ) > 0 ) {
				this.visible_message( "<span class='danger'>" + user + " smashes " + this + " apart!</span>" );
				this.destroy();
			}
			return null;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_alien( Mob user = null ) {
			this.visible_message( "<span class='danger'>" + user + " slices " + this + " apart!</span>" );
			this.destroy();
			return null;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			Interface13.Stat( null, a.mutations.Contains( 4 ) );

			if ( false ) {
				a.say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );
				this.visible_message( "<span class='danger'>" + a + " smashes the " + this + " apart!</span>" );
				a.delayNextAttack( 8 );
				this.destroy();
			}
			return null;
		}

		// Function from file: tables_racks.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.destroy();
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {

			switch ((int?)(severity)) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.destroy();
					}
					break;
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int type = 0;
			int tabledirs = 0;
			dynamic direction = null;
			dynamic T = null;
			string _base = null;
			double dir_sum = 0;
			dynamic direction2 = null;
			bool skip_sum = false;
			Obj_Structure_Window W = null;
			int? inv_direction = null;
			Obj_Structure_Window W2 = null;
			dynamic T2 = null;
			int table_type = 0;

			Task13.Schedule( 2, (Task13.Closure)(() => {
				
				if ( this.flipped ) {
					type = 0;
					tabledirs = 0;

					foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { Num13.Rotate( this.dir, 90 ), Num13.Rotate( this.dir, -90 ) }) )) {
						direction = _a;
						
						T = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this, Convert.ToInt32( direction ) ) );

						if ( Lang13.Bool( T ) && Lang13.Bool( T.flipped ) && Convert.ToInt32( T.dir ) == this.dir ) {
							type++;
							tabledirs |= Convert.ToInt32( direction );
						}
					}
					_base = "table";

					if ( this is Obj_Structure_Table_Woodentable ) {
						_base = "wood";
					}

					if ( this is Obj_Structure_Table_Reinforced ) {
						_base = "rtable";
					}
					this.icon_state = "" + _base + "flip" + type;

					if ( type == 1 ) {
						
						if ( ( tabledirs & Num13.Rotate( this.dir, 90 ) ) != 0 ) {
							this.icon_state = this.icon_state + "-";
						}

						if ( ( tabledirs & Num13.Rotate( this.dir, -90 ) ) != 0 ) {
							this.icon_state = this.icon_state + "+";
						}
					}
					return;
				}
				dir_sum = 0;

				foreach (dynamic _e in Lang13.Enumerate( GlobalVars.alldirs )) {
					direction2 = _e;
					
					skip_sum = false;

					foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Obj_Structure_Window) )) {
						W = _b;
						

						if ( W.dir == direction2 ) {
							skip_sum = true;
							continue;
						}
					}
					inv_direction = null;

					dynamic _c = direction2; // Was a switch-case, sorry for the mess.
					if ( _c==1 ) {
						inv_direction = 2;
					} else if ( _c==2 ) {
						inv_direction = 1;
					} else if ( _c==4 ) {
						inv_direction = 8;
					} else if ( _c==8 ) {
						inv_direction = 4;
					} else if ( _c==5 ) {
						inv_direction = 10;
					} else if ( _c==6 ) {
						inv_direction = 9;
					} else if ( _c==9 ) {
						inv_direction = 6;
					} else if ( _c==10 ) {
						inv_direction = 5;
					}

					foreach (dynamic _d in Lang13.Enumerate( Map13.GetStep( this, Convert.ToInt32( direction2 ) ), typeof(Obj_Structure_Window) )) {
						W2 = _d;
						

						if ( W2.dir == inv_direction ) {
							skip_sum = true;
							continue;
						}
					}

					if ( !skip_sum ) {
						T2 = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this, Convert.ToInt32( direction2 ) ) );

						if ( Lang13.Bool( T2 ) && !Lang13.Bool( T2.flipped ) ) {
							
							if ( Convert.ToDouble( direction2 ) < 5 ) {
								dir_sum += Convert.ToDouble( direction2 );
							} else {
								
								if ( direction2 == 5 ) {
									dir_sum += 16;
								}

								if ( direction2 == 6 ) {
									dir_sum += 32;
								}

								if ( direction2 == 8 ) {
									dir_sum += 8;
								}

								if ( direction2 == 10 ) {
									dir_sum += 64;
								}

								if ( direction2 == 9 ) {
									dir_sum += 128;
								}
							}
						}
					}
				}
				table_type = 0;
				Interface13.Stat( null, GlobalVars.cardinal.Contains( dir_sum % 16 ) );

				if ( this.flipped ) {
					table_type = 1;
					dir_sum %= 16;
				}
				Interface13.Stat( null, new ByTable(new object [] { 3, 12 }).Contains( dir_sum % 16 ) );

				if ( this.flipped ) {
					table_type = 2;

					if ( dir_sum % 16 == 3 ) {
						dir_sum = 2;
					}

					if ( dir_sum % 16 == 12 ) {
						dir_sum = 4;
					}
				}
				Interface13.Stat( null, new ByTable(new object [] { 5, 6, 9, 10 }).Contains( dir_sum % 16 ) );

				if ( this.flipped ) {
					
					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this.loc, ((int)( dir_sum % 16 )) ) ) ) ) {
						table_type = 3;
					} else {
						table_type = 2;
					}
					dir_sum %= 16;
				}
				Interface13.Stat( null, new ByTable(new object [] { 13, 14, 7, 11 }).Contains( dir_sum % 16 ) );

				if ( this.flipped ) {
					table_type = 5;

					switch ((double)( dir_sum % 16 )) {
						case 7:
							
							if ( dir_sum == 23 ) {
								table_type = 6;
								dir_sum = 8;
							} else if ( dir_sum == 39 ) {
								dir_sum = 4;
								table_type = 6;
							} else if ( dir_sum == 55 || dir_sum == 119 || dir_sum == 247 || dir_sum == 183 ) {
								dir_sum = 4;
								table_type = 3;
							} else {
								dir_sum = 4;
							}
							break;
						case 11:
							
							if ( dir_sum == 75 ) {
								dir_sum = 5;
								table_type = 6;
							} else if ( dir_sum == 139 ) {
								dir_sum = 9;
								table_type = 6;
							} else if ( dir_sum == 203 || dir_sum == 219 || dir_sum == 251 || dir_sum == 235 ) {
								dir_sum = 8;
								table_type = 3;
							} else {
								dir_sum = 8;
							}
							break;
						case 13:
							
							if ( dir_sum == 29 ) {
								dir_sum = 10;
								table_type = 6;
							} else if ( dir_sum == 141 ) {
								dir_sum = 6;
								table_type = 6;
							} else if ( dir_sum == 189 || dir_sum == 221 || dir_sum == 253 || dir_sum == 157 ) {
								dir_sum = 1;
								table_type = 3;
							} else {
								dir_sum = 1;
							}
							break;
						case 14:
							
							if ( dir_sum == 46 ) {
								dir_sum = 1;
								table_type = 6;
							} else if ( dir_sum == 78 ) {
								dir_sum = 2;
								table_type = 6;
							} else if ( dir_sum == 110 || dir_sum == 254 || dir_sum == 238 || dir_sum == 126 ) {
								dir_sum = 2;
								table_type = 3;
							} else {
								dir_sum = 2;
							}
							break;
					}
				}

				if ( dir_sum % 16 == 15 ) {
					table_type = 4;
				}

				switch ((int)( table_type )) {
					case 0:
						this.icon_state = "" + Lang13.Initial( this, "icon_state" );
						break;
					case 1:
						this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_1tileendtable";
						break;
					case 2:
						this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_1tilethick";
						break;
					case 3:
						this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_dir";
						break;
					case 4:
						this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_middle";
						break;
					case 5:
						this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_dir2";
						break;
					case 6:
						this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_dir3";
						break;
				}
				Interface13.Stat( null, GlobalVars.alldirs.Contains( dir_sum ) );

				if ( dir_sum % 16 == 15 ) {
					this.dir = ((int)( dir_sum ));
				} else {
					this.dir = 2;
				}
				return;
			}));
			this.clicked = new Icon( this.icon, this.icon_state, this.dir );
			return null;
		}

		// Function from file: tables_racks.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Proj.destroy ) {
				this.ex_act( 1 );
			}
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return 0;
		}

		// Function from file: tables_racks.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.update_adjacent();
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: tables_racks.dm
		public override dynamic cultify(  ) {
			new Obj_Structure_Table_Woodentable( this.loc );
			return null;
		}

		// Function from file: tables_racks.dm
		public bool unflip(  ) {
			dynamic D = null;
			dynamic T = null;

			this.verbs.Remove( typeof(Obj_Structure_Table).GetMethod( "do_put" ) );
			this.verbs.Add( typeof(Obj_Structure_Table).GetMethod( "do_flip" ) );
			this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );
			this.flipped = false;
			this.flags &= 65023;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { Num13.Rotate( this.dir, 90 ), Num13.Rotate( this.dir, -90 ) }) )) {
				D = _a;
				
				T = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this.loc, Convert.ToInt32( D ) ) );

				if ( Lang13.Bool( T ) && Lang13.Bool( T.flipped ) && Convert.ToInt32( T.dir ) == this.dir ) {
					((Obj_Structure_Table)T).unflip();
				}
			}
			this.update_icon();
			this.update_adjacent();
			return true;
		}

		// Function from file: tables_racks.dm
		public virtual bool flip( int direction = 0 ) {
			ByTable targets = null;
			Ent_Dynamic A = null;
			dynamic D = null;
			dynamic T = null;

			
			if ( !this.straight_table_check( Num13.Rotate( direction, 90 ) ) || !this.straight_table_check( Num13.Rotate( direction, -90 ) ) ) {
				return false;
			}
			this.verbs.Remove( typeof(Obj_Structure_Table).GetMethod( "do_flip" ) );
			this.verbs.Add( typeof(Obj_Structure_Table).GetMethod( "do_put" ) );
			targets = new ByTable(new object [] { Map13.GetStep( this, this.dir ), Map13.GetStep( this, Num13.Rotate( this.dir, 45 ) ), Map13.GetStep( this, Num13.Rotate( this.dir, -45 ) ) });

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( !Lang13.Bool( A.anchored ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						A.throw_at( Rand13.PickFromTable( targets ), 1, 1 );
						return;
					}));
				}
			}
			this.dir = direction;

			if ( this.dir != GlobalVars.NORTH ) {
				this.layer = 5;
			}
			this.flipped = true;
			this.flags |= 512;

			foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { Num13.Rotate( direction, 90 ), Num13.Rotate( direction, -90 ) }) )) {
				D = _b;
				
				T = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this, Convert.ToInt32( D ) ) );

				if ( Lang13.Bool( T ) && !Lang13.Bool( T.flipped ) ) {
					((Obj_Structure_Table)T).flip( direction );
				}
			}
			this.update_icon();
			this.update_adjacent();
			return true;
		}

		// Function from file: tables_racks.dm
		[VerbInfo( name: "Put table back", desc: "Puts flipped table back", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void do_put(  ) {
			
			if ( !Lang13.Bool( this.__CallVerb("can touch", Task13.User ) ) ) {
				return;
			}

			if ( !this.unflipping_check() ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>It won't budge.</span>" );
				return;
			}
			this.unflip();
			return;
		}

		// Function from file: tables_racks.dm
		public bool unflipping_check( dynamic direction = null ) {
			dynamic M = null;
			ByTable L = null;
			dynamic new_dir = null;
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( 0, this ) )) {
				M = _a;
				
				return false;
			}
			L = new ByTable();

			if ( Lang13.Bool( direction ) ) {
				L.Add( direction );
			} else {
				L.Add( Num13.Rotate( this.dir, -90 ) );
				L.Add( Num13.Rotate( this.dir, 90 ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( L )) {
				new_dir = _b;
				
				T = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this.loc, Convert.ToInt32( new_dir ) ) );

				if ( Lang13.Bool( T ) ) {
					
					if ( Lang13.Bool( T.flipped ) && Convert.ToInt32( T.dir ) == this.dir && !((Obj_Structure_Table)T).unflipping_check( new_dir ) ) {
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: tables_racks.dm
		public bool straight_table_check( int direction = 0 ) {
			dynamic T = null;
			dynamic angle = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { -90, 90 }) )) {
				angle = _a;
				
				T = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this.loc, Num13.Rotate( direction, Convert.ToDouble( angle ) ) ) );

				if ( Lang13.Bool( T ) && !Lang13.Bool( T.flipped ) ) {
					return false;
				}
			}
			T = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this.loc, direction ) );

			if ( !Lang13.Bool( T ) || Lang13.Bool( T.flipped ) ) {
				return true;
			}

			if ( T is Obj_Structure_Table_Reinforced ) {
				R = T;

				if ( Convert.ToInt32( R.status ) == 2 ) {
					return false;
				}
			}
			return ((Obj_Structure_Table)T).straight_table_check( direction );
		}

		// Function from file: tables_racks.dm
		public bool check_cover( dynamic P = null, dynamic from = null ) {
			dynamic cover = null;
			int chance = 0;
			Mob M = null;

			cover = ( this.flipped ? GlobalFuncs.get_turf( this ) : ((dynamic)( Map13.GetStep( this.loc, Map13.GetDistance( from, this.loc ) ) )) );

			if ( Map13.GetDistance( P.starting, this.loc ) <= 1 ) {
				return true;
			}

			if ( GlobalFuncs.get_turf( P.original ) == cover ) {
				chance = 20;

				if ( P.original is Mob ) {
					M = P.original;

					if ( M.lying == true ) {
						chance += 20;
					}
				}

				if ( this.flipped ) {
					
					if ( Map13.GetDistance( this.loc, from ) == this.dir ) {
						chance += 20;
					} else {
						return true;
					}
				}

				if ( Rand13.PercentChance( chance ) ) {
					this.health -= Convert.ToDouble( P.damage / 2 );

					if ( this.health > 0 ) {
						this.visible_message( new Txt( "<span class='warning'>" ).item( P ).str( " hits " ).the( this ).item().str( "!</span>" ).ToString() );
						return false;
					} else {
						this.visible_message( "<span class='warning'>" + this + " breaks down!</span>" );
						this.destroy();
						return true;
					}
				}
			}
			return true;
		}

		// Function from file: tables_racks.dm
		public virtual bool can_disassemble(  ) {
			return true;
		}

		// Function from file: tables_racks.dm
		public void destroy(  ) {
			Lang13.Call( this.parts, this.loc );
			this.density = false;
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: tables_racks.dm
		public void update_adjacent(  ) {
			dynamic direction = null;
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.alldirs )) {
				direction = _a;
				

				if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this, Convert.ToInt32( direction ) ) ) ) ) {
					T = Lang13.FindIn( typeof(Obj_Structure_Table), Map13.GetStep( this, Convert.ToInt32( direction ) ) );
					T.update_icon();
				}
			}
			return;
		}

		// Function from file: tables_racks.dm
		[Verb]
		[VerbInfo( name: "Flip table", desc: "Flips a non-reinforced table", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void do_flip(  ) {
			
			if ( Task13.User is Mob_Living_SimpleAnimal_Mouse ) {
				return;
			}

			if ( !Lang13.Bool( this.__CallVerb("can touch", Task13.User ) ) ) {
				return;
			}

			if ( !this.flip( GlobalFuncs.get_cardinal_dir( Task13.User, this ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>It won't budge.</span>" );
			} else {
				Task13.User.visible_message( new Txt( "<span class='warning'>" ).item( Task13.User ).str( " flips " ).the( this ).item().str( "!</span>" ).ToString() );
				return;
			}
			return;
		}

		// Function from file: tables_racks.dm
		[Verb]
		[VerbInfo(  )]
		[VerbArg( 1, InputType.Mob )]
		public bool can_touch( dynamic user = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return false;
			}

			if ( Lang13.Bool( user.stat ) ) {
				return false;
			}

			if ( user is Mob_Living_Silicon ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You need hands for this.</span>" );
				return false;
			}
			return true;
		}

	}

}