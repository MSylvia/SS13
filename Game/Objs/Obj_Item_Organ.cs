// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Organ : Obj_Item {

		public int fresh = 3;
		public string dead_icon = null;
		public int robotic = 0;
		public string organ_tag = null;
		public Type organ_type = typeof(Organ_Internal);
		public dynamic organ_data = null;
		public string prosthetic_name = "prosthetic organ";
		public string prosthetic_icon = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 100;
			this.icon = "icons/obj/surgery.dmi";
			this.icon_state = "appendix";
		}

		// Function from file: organ_objects.dm
		public Obj_Item_Organ ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( 5 );

			if ( !( this.robotic != 0 ) ) {
				GlobalVars.processing_objects.Add( this );
			}
			Task13.Schedule( 1, (Task13.Closure)(() => {
				this.update();
				return;
			}));
			return;
		}

		// Function from file: organ_objects.dm
		public void bitten( dynamic user = null ) {
			Game_Data blood = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Organ O = null;

			
			if ( this.robotic != 0 ) {
				return;
			}
			GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You take an experimental bite out of " ).the( this ).item().str( ".</span>" ).ToString() );
			blood = this.reagents.reagent_list["blood"];
			GlobalFuncs.blood_splatter( this, blood, true );
			((Mob)user).drop_from_inventory( this );
			O = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Organ( GlobalFuncs.get_turf( this ) );
			O.name = this.name;
			O.icon_state = ( Lang13.Bool( this.dead_icon ) ? this.dead_icon : this.icon_state );
			((Reagents)this.reagents).trans_to( O, this.reagents.total_volume );

			if ( this.fingerprints != null ) {
				O.fingerprints = this.fingerprints.Copy();
			}

			if ( this.fingerprintshidden != null ) {
				O.fingerprintshidden = this.fingerprintshidden.Copy();
			}

			if ( Lang13.Bool( this.fingerprintslast ) ) {
				O.fingerprintslast = this.fingerprintslast;
			}
			((Mob)user).put_in_active_hand( O );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: organ_objects.dm
		public virtual void replaced( Mob target = null ) {
			return;
		}

		// Function from file: organ_objects.dm
		public virtual void removed( Mob target = null, Mob user = null ) {
			
			if ( !( target != null ) || !( user != null ) ) {
				return;
			}

			if ( this.organ_data.vital ) {
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='red'> removed a vital organ (" + this + ") from " + target.name + " (" + target.ckey + ") (INTENT: " + String13.ToUpper( user.a_intent ) + ")</font>" );
				target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='orange'> had a vital organ (" + this + ") removed by " + user.name + " (" + user.ckey + ") (INTENT: " + String13.ToUpper( user.a_intent ) + ")</font>" );
				GlobalFuncs.msg_admin_attack( "" + user.name + " (" + user.ckey + ") removed a vital organ (" + this + ") from " + target.name + " (" + target.ckey + ") (INTENT: " + String13.ToUpper( user.a_intent ) + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + user.x + ";Y=" + user.y + ";Z=" + user.z + "'>JMP</a>)" );
				target.death();
			}
			return;
		}

		// Function from file: organ_objects.dm
		public void update(  ) {
			
			if ( !Lang13.Bool( this.organ_tag ) || !( this.organ_type != null ) ) {
				return;
			}

			if ( !Lang13.Bool( this.organ_data ) ) {
				this.organ_data = Lang13.Call( this.organ_type );
			}

			if ( this.robotic != 0 ) {
				this.organ_data.robotic = this.robotic;
			}

			if ( Convert.ToDouble( this.organ_data.robotic ) >= 2 ) {
				this.roboticize();
			}
			return;
		}

		// Function from file: organ_objects.dm
		public void roboticize(  ) {
			this.robotic = ( Lang13.Bool( this.organ_data ) && Lang13.Bool( this.organ_data.robotic ) ? Lang13.Bool( this.organ_data.robotic ) : true ) ?1:0;

			if ( Lang13.Bool( this.prosthetic_name ) ) {
				this.name = this.prosthetic_name;
			}

			if ( Lang13.Bool( this.prosthetic_icon ) ) {
				this.icon_state = this.prosthetic_icon;
			}
			return;
		}

		// Function from file: organ_objects.dm
		public void die(  ) {
			this.name = "dead " + Lang13.Initial( this, "name" );

			if ( Lang13.Bool( this.dead_icon ) ) {
				this.icon_state = this.dead_icon;
			}
			this.health = 0;
			GlobalVars.processing_objects.Remove( this );
			return;
		}

		// Function from file: organ_objects.dm
		public override dynamic process(  ) {
			Game_Data blood = null;

			
			if ( this.robotic != 0 ) {
				GlobalVars.processing_objects.Remove( this );
				return null;
			}

			if ( this.loc is Obj_Item_Device_Mmi || this.loc is Obj_Item_Bodybag_Cryobag || this.loc is Obj_Structure_Closet_Crate_Freezer ) {
				return null;
			}

			if ( this.fresh != 0 && Rand13.PercentChance( 40 ) ) {
				this.fresh--;
				blood = this.reagents.reagent_list["blood"];
				GlobalFuncs.blood_splatter( this, blood, true );
			}
			this.health -= Rand13.Int( 1, 3 );

			if ( this.health <= 0 ) {
				this.die();
			}
			return null;
		}

		// Function from file: organ_objects.dm
		public override void Del(  ) {
			
			if ( !( this.robotic != 0 ) ) {
				GlobalVars.processing_objects.Remove( this );
			}
			base.Del();
			return;
		}

		// Function from file: organ_objects.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !( this.robotic != 0 ) && user.a_intent == "help" && ((dynamic)user.zone_sel).selecting == "mouth" ) {
				this.bitten( user );
				return null;
			}
			return null;
		}

	}

}