// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_PodParts_PodFrame : Obj_Item_PodParts {

		public Type link_to = null;
		public int link_angle = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 0;
		}

		public Obj_Item_PodParts_PodFrame ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: parts.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.__CallVerb("Rotate Frame" );
			return null;
		}

		// Function from file: parts.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic R = null;
			dynamic linkedparts = null;
			Obj_Structure_SpacepodFrame pod = null;
			Obj_Item_PodParts_PodFrame F = null;

			
			if ( a is Obj_Item_Stack_Rods ) {
				R = a;
				linkedparts = this.find_square();

				if ( !Lang13.Bool( linkedparts ) ) {
					GlobalFuncs.to_chat( b, "<span class='rose'>You cannot assemble a pod frame because you do not have the necessary assembly.</span>" );
					return null;
				}
				pod = new Obj_Structure_SpacepodFrame( this.loc );
				pod.dir = this.dir;
				GlobalFuncs.to_chat( b, "<span class='notice'>You strut the pod frame together.</span>" );
				R.use( 10 );

				foreach (dynamic _a in Lang13.Enumerate( linkedparts, typeof(Obj_Item_PodParts_PodFrame) )) {
					F = _a;
					

					if ( 1 == Num13.Rotate( F.dir, -F.link_angle ) ) {
						pod.loc = F.loc;
					}
					GlobalFuncs.qdel( F );
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
			}

			if ( a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.to_chat( b, "<span class='notice'>You " + ( !Lang13.Bool( this.anchored ) ? new Txt( "secure " ).the( this ).item().str( " in place." ).ToString() : "remove the securing bolts." ) + "</span>" );
				this.anchored = !Lang13.Bool( this.anchored );
				this.density = Lang13.Bool( this.anchored );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
			}
			return null;
		}

		// Function from file: parts.dm
		public dynamic find_square(  ) {
			ByTable neededparts = null;
			dynamic T = null;
			dynamic linked = null;
			dynamic pointer = null;
			ByTable connectedparts = null;
			int? i = null;
			int? i2 = null;
			Base_Data F = null;

			neededparts = new ByTable(new object [] { 
				typeof(Obj_Item_PodParts_PodFrame_AftPort), 
				typeof(Obj_Item_PodParts_PodFrame_AftStarboard), 
				typeof(Obj_Item_PodParts_PodFrame_ForePort), 
				typeof(Obj_Item_PodParts_PodFrame_ForeStarboard)
			 });
			connectedparts = new ByTable();
			neededparts.Remove( this );
			linked = this;
			i = null;
			i = 1;

			while (( i ??0) <= 4) {
				T = GlobalFuncs.get_turf( Map13.GetStep( linked, Num13.Rotate( linked.dir, -linked.link_angle ) ) );

				if ( Lang13.Bool( Lang13.FindIn( linked.link_to, T ) ) ) {
					pointer = Lang13.FindIn( linked.link_to, T );
				}

				if ( Lang13.Bool( ((dynamic)linked.link_to).IsInstanceOfType( pointer ) ) && pointer.dir == linked.dir && Lang13.Bool( pointer.anchored ) ) {
					
					if ( !connectedparts.Contains( pointer ) ) {
						connectedparts.Add( pointer );
					}
					linked = pointer;
					pointer = null;
				}
				i++;
			}
			i2 = null;
			i2 = 1;

			while (( i2 ??0) <= 4) {
				
				if ( ( i2 ??0) > connectedparts.len ) {
					return 0;
				}
				F = connectedparts[i2];

				if ( neededparts.Contains( F.type ) ) {
					neededparts.Remove( F.type );
					GlobalFuncs.log_admin( "Found " + F.type );
				} else {
					return 0;
				}
				i2++;
			}
			return connectedparts;
		}

		// Function from file: parts.dm
		[Verb]
		[VerbInfo( name: "Rotate Frame", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate(  ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( Task13.User, new Txt().The( this ).item().str( " is securely bolted!" ).ToString() );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			return true;
		}

	}

}