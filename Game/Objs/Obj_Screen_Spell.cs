// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Screen_Spell : Obj_Screen {

		public string spell_base = "wiz";
		public int last_charge = 0;
		public Spell spell = null;
		public bool handle_icon_updates = false;
		public Obj_Screen_Movable_SpellMaster spellmaster = null;
		public Icon last_charged_icon = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.globalscreen = true;
			this.icon = "icons/mob/screen_spells.dmi";
			this.icon_state = "wiz_spell_base";
		}

		public Obj_Screen_Spell ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: spell_screen_objects.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			
			if ( !( Task13.User != null ) || !( this.spell != null ) ) {
				GlobalFuncs.returnToPool( this );
				return false;
			}
			this.spell.perform( Task13.User );
			this.update_charge( true );
			return false;
		}

		// Function from file: spell_screen_objects.dm
		public void update_charge( bool? forced_update = null ) {
			forced_update = forced_update ?? false;

			Icon partial_charge = null;

			
			if ( !( this.spell != null ) ) {
				GlobalFuncs.returnToPool( this );
				return;
			}

			if ( ( this.last_charge == this.spell.charge_counter || !this.handle_icon_updates ) && !( forced_update == true ) ) {
				return;
			}
			this.overlays.Remove( this.spell.hud_state );

			if ( this.spell.charge_type == "recharge" || this.spell.charge_type == "charges" ) {
				
				if ( this.spell.charge_counter < this.spell.charge_max ) {
					this.icon_state = "" + this.spell_base + "_spell_base";

					if ( this.spell.charge_counter > 0 ) {
						partial_charge = new Icon( this.icon, "" + this.spell_base + "_spell_ready" );
						partial_charge.Crop( 1, 1, partial_charge.Width(), Num13.Floor( partial_charge.Height() * this.spell.charge_counter / this.spell.charge_max ) );
						this.overlays.Add( partial_charge );

						if ( this.last_charged_icon != null ) {
							this.overlays.Remove( this.last_charged_icon );
						}
						this.last_charged_icon = partial_charge;
					} else if ( this.last_charged_icon != null ) {
						this.overlays.Remove( this.last_charged_icon );
						this.last_charged_icon = null;
					}
				} else {
					this.icon_state = "" + this.spell_base + "_spell_ready";

					if ( this.last_charged_icon != null ) {
						this.overlays.Remove( this.last_charged_icon );
					}
				}
			} else {
				this.icon_state = "" + this.spell_base + "_spell_ready";
			}
			this.overlays.Add( this.spell.hud_state );
			this.last_charge = this.spell.charge_counter;
			this.overlays.Remove( "silence" );

			if ( Lang13.Bool( this.spell.silenced ) ) {
				this.overlays.Add( "silence" );
			}
			return;
		}

		// Function from file: spell_screen_objects.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			this.spell = null;
			this.last_charged_icon = null;

			if ( this.spellmaster != null ) {
				this.spellmaster.spell_objects.Remove( this );

				if ( this.spellmaster.spell_holder != null && this.spellmaster.spell_holder.client != null ) {
					this.spellmaster.spell_holder.client.screen.Remove( this );
				}
			}

			if ( this.spellmaster != null && !( this.spellmaster.spell_objects.len != 0 ) ) {
				GlobalFuncs.returnToPool( this.spellmaster );
			}
			this.spellmaster = null;
			return null;
		}

	}

}