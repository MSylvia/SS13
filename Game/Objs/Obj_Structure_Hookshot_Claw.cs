// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Hookshot_Claw : Obj_Structure_Hookshot {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/effects/96x96.dmi";
			this.icon_state = "singulo_catcher";
			this.layer = 7;
		}

		public Obj_Structure_Hookshot_Claw ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: adminbus.dm
		public override void hook_back(  ) {
			dynamic S = null;
			dynamic M = null;
			dynamic M2 = null;

			
			if ( !this.dropped ) {
				S = Lang13.FindIn( typeof(Obj_Machinery_Singularity), this.loc );

				if ( Lang13.Bool( S ) ) {
					
					if ( Lang13.Bool( this.abus.occupant ) ) {
						M = this.abus.occupant;
						((dynamic)M.gui_icons.adminbus_hook).icon_state = "icon_singulo";
					}
					this.abus.capture_singulo( S );
					return;
				}
			}
			this.forceMove( Map13.GetStepTowardsSimple( this, this.abus ) );
			this.max_distance++;

			if ( this.max_distance >= 7 ) {
				
				if ( Lang13.Bool( this.abus.occupant ) ) {
					M2 = this.abus.occupant;
					((dynamic)M2.gui_icons.adminbus_hook).icon_state = "icon_hook";
				}
				this.abus.hook = true;
				GlobalFuncs.qdel( this );
				return;
			}
			Task13.Sleep( 2 );
			this.hook_back();
			return;
		}

		// Function from file: adminbus.dm
		public dynamic hook_throw( int toward = 0 ) {
			dynamic S = null;
			Obj_Structure_Hookshot H = null;
			dynamic S2 = null;

			this.max_distance--;
			S = Lang13.FindIn( typeof(Obj_Machinery_Singularity), this.loc );

			if ( Lang13.Bool( S ) ) {
				return S;
			} else {
				H = new Obj_Structure_Hookshot( this.loc );
				this.abus.hookshot.Add( H );
				H.dir = toward;
				H.max_distance = this.max_distance;
				H.abus = this.abus;
			}

			if ( this.max_distance > 0 ) {
				this.forceMove( Map13.GetStep( this, toward ) );
				Task13.Sleep( 2 );
				S2 = this.hook_throw( toward );

				if ( Lang13.Bool( S2 ) ) {
					return S2;
				} else {
					return null;
				}
			} else {
				return null;
			}
			return null;
		}

	}

}