// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Disease2_Incubator : Obj_Machinery_Disease2 {

		public dynamic dish = null;
		public dynamic beaker = null;
		public int radiation = 0;
		public bool on = false;
		public bool power = false;
		public int foodsupply = 0;
		public int toxins = 0;
		public dynamic mutatechance = 5;
		public dynamic growthrate = 3;
		public dynamic virusing = null;
		public int last_notice = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 6;
			this.icon = "icons/obj/virology.dmi";
			this.icon_state = "incubator";
		}

		// Function from file: dishincubator.dm
		public Obj_Machinery_Disease2_Incubator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Incubator(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_ReagentContainers_Glass_Beaker()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: dishincubator.dm
		public override dynamic process(  ) {
			
			if ( Lang13.Bool( this.dish ) && this.on && Lang13.Bool( this.dish.virus2 ) ) {
				this.f_use_power( 50, 1 );

				if ( !Lang13.Bool( this.powered( 1 ) ) ) {
					this.on = false;
					this.icon_state = "incubator";
				}

				if ( this.foodsupply != 0 ) {
					this.foodsupply -= 1;
					this.dish.growth += this.growthrate;

					if ( Convert.ToDouble( this.dish.growth ) >= 100 ) {
						
						if ( this.icon_state != "incubator_fed" ) {
							this.icon_state = "incubator_fed";
						}

						if ( this.last_notice + 40 < Game13.time ) {
							this.last_notice = Game13.time;
							this.alert_noise( "ping" );
						}
					}
				}

				if ( this.radiation != 0 ) {
					
					if ( ( ( this.radiation > 50 ?1:0) & ( Rand13.PercentChance( Convert.ToInt32( this.mutatechance ) ) ?1:0) ) != 0 ) {
						this.dish.virus2.log += "<br />" + GlobalFuncs.timestamp() + " MAJORMUTATE (incubator rads)";
						this.dish.virus2.majormutate();

						if ( Lang13.Bool( this.dish.info ) ) {
							this.dish.info = "OUTDATED : " + this.dish.info;
							this.dish.analysed = 0;
						}
						this.alert_noise( "beep" );
						Icon13.Flick( "incubator_mut", this );
					} else if ( Rand13.PercentChance( Convert.ToInt32( this.mutatechance ) ) ) {
						this.dish.virus2.minormutate();
					}
					this.radiation -= 1;
				}

				if ( this.toxins != 0 && Rand13.PercentChance( 5 ) ) {
					this.dish.virus2.infectionchance -= 1;
				}

				if ( this.toxins > 50 ) {
					this.dish.virus2 = null;
				}
			} else if ( !Lang13.Bool( this.dish ) ) {
				this.on = false;
				this.icon_state = "incubator";
			}

			if ( Lang13.Bool( this.beaker ) ) {
				
				if ( !((Reagents)this.beaker.reagents).remove_reagent( "virusfood", 5 ) ) {
					this.foodsupply += 10;
				}

				if ( !((Reagents)this.beaker.reagents).remove_reagent( "toxin", 1 ) ) {
					this.toxins += 1;
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: dishincubator.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;
			string _string = null;
			Browser popup = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = new ByTable();

			if ( !Lang13.Bool( this.dish ) ) {
				dat += "Please insert dish into the incubator.<BR>";
			}
			_string = "Off";

			if ( this.on ) {
				_string = "On";
			}
			dat += new Txt( "Power status: <A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( _string ).str( "</a>" ).ToString();
			dat += "<BR>";
			dat += "Food supply: " + this.foodsupply;
			dat += "<BR>";
			dat += new Txt( "Radiation levels: " ).item( this.radiation ).str( " RADS (<A href='?src=" ).Ref( this ).str( ";rad=1'>Radiate</a>)" ).ToString();
			dat += "<BR>";
			dat += "Toxins: " + this.toxins;

			if ( Lang13.Bool( this.dish ) ) {
				dat += "<BR>";
				dat += "Growth level: " + this.dish.growth;
			}
			dat += "<BR><BR>";

			if ( Lang13.Bool( this.beaker ) ) {
				dat += new Txt( "Eject chemicals: <A href='?src=" ).Ref( this ).str( ";ejectchem=1'> Eject</a>" ).ToString();
				dat += "<BR>";
			}

			if ( Lang13.Bool( this.dish ) ) {
				dat += new Txt( "Eject Virus dish: <A href='?src=" ).Ref( this ).str( ";ejectdish=1'> Eject</a>" ).ToString();
				dat += "<BR>";

				if ( Lang13.Bool( this.beaker ) ) {
					dat += new Txt( "Breed viral culture in beaker: <A href='?src=" ).Ref( this ).str( ";virus=1'> Start</a>" ).ToString();
					dat += "<BR>";
				}
			}
			dat += new Txt( "<br><hr><A href='?src=" ).Ref( this ).str( ";flush=1'>Flush system</a><BR>" ).ToString();
			dat = GlobalFuncs.list2text( dat );
			popup = new Browser( a, "dish_incubator", "Pathogenic Incubator", 575, 400, this );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( a, "dish_incubator" );
			return null;
		}

		// Function from file: dishincubator.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic B = null;
			Disease2_Disease D = null;
			ByTable virus = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Task13.User != null ) {
				Task13.User.set_machine( this );
			}

			if ( Lang13.Bool( href_list["ejectchem"] ) ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					((Ent_Dynamic)this.beaker).forceMove( this.loc );
					this.beaker = null;
				}
			}

			if ( !Lang13.Bool( this.dish ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["power"] ) ) {
				this.on = !this.on;

				if ( this.on ) {
					this.icon_state = "incubator_on";

					if ( Lang13.Bool( this.dish ) && Lang13.Bool( this.dish.virus2 ) ) {
						this.dish.virus2.log += "<br />" + GlobalFuncs.timestamp() + " Incubation starting by " + GlobalFuncs.key_name( Task13.User ) + " {food=" + this.foodsupply + ",rads=" + this.radiation + "}";
					}
				} else {
					this.icon_state = "incubator";
				}
			}

			if ( Lang13.Bool( href_list["ejectdish"] ) ) {
				
				if ( Lang13.Bool( this.dish ) ) {
					this.dish.loc = this.loc;
					this.dish = null;
				}
			}

			if ( Lang13.Bool( href_list["rad"] ) ) {
				this.radiation += 10;
			}

			if ( Lang13.Bool( href_list["flush"] ) ) {
				this.radiation = 0;
				this.toxins = 0;
				this.foodsupply = 0;
			}

			if ( Lang13.Bool( href_list["virus"] ) ) {
				
				if ( !Lang13.Bool( this.dish ) ) {
					this.say( "No viral culture sample detected." );
				} else {
					B = Lang13.FindIn( typeof(Reagent_Blood), this.beaker.reagents.reagent_list );

					if ( !Lang13.Bool( B ) ) {
						this.say( "No suitable breeding environment detected." );
					} else {
						
						if ( !Lang13.Bool( B.data["virus2"] ) ) {
							B.data["virus2"] = new ByTable();
						}
						D = ((Disease2_Disease)this.dish.virus2).getcopy();
						D.log += "<br />" + GlobalFuncs.timestamp() + " Injected into blood via " + this + " by " + GlobalFuncs.key_name( Task13.User );
						virus = new ByTable().Set( "" + this.dish.virus2.uniqueID, D );
						B.data["virus2"] = virus;
						this.say( "Injection complete." );
					}
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: dishincubator.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass || a is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					
					if ( this.beaker is Obj_Item_Weapon_ReagentContainers_Syringe ) {
						GlobalFuncs.to_chat( b, "A syringe is already loaded into the machine." );
					} else {
						GlobalFuncs.to_chat( b, "A beaker is already loaded into the machine." );
					}
					return null;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.beaker = a;

					if ( a is Obj_Item_Weapon_ReagentContainers_Syringe ) {
						GlobalFuncs.to_chat( b, "You add the syringe to the machine!" );
						this.updateUsrDialog();
					} else {
						GlobalFuncs.to_chat( b, "You add the beaker to the machine!" );
						this.updateUsrDialog();
					}
				}
			} else if ( a is Obj_Item_Weapon_Virusdish ) {
				
				if ( Lang13.Bool( this.dish ) ) {
					GlobalFuncs.to_chat( b, "A dish is already loaded into the machine." );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.dish = a;

					if ( a is Obj_Item_Weapon_Virusdish ) {
						GlobalFuncs.to_chat( b, "You add the dish to the machine!" );
						this.updateUsrDialog();
					}
				}
			}
			return null;
		}

		// Function from file: dishincubator.dm
		public override dynamic RefreshParts(  ) {
			int scancount = 0;
			int lasercount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			scancount = 0;
			lasercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_ScanningModule ) {
					scancount += SP.rating - 1;
				}

				if ( SP is Obj_Item_Weapon_StockParts_MicroLaser ) {
					lasercount += SP.rating - 1;
				}
			}
			this.mutatechance = Lang13.Initial( this, "mutatechance" ) + scancount;
			this.growthrate = Lang13.Initial( this, "growthrate" ) + lasercount;
			return null;
		}

	}

}