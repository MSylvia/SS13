// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Pinpointer_Pdapinpointer : Obj_Item_Weapon_Pinpointer {

		public dynamic target = null;
		public bool used = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.watches_nuke = false;
		}

		public Obj_Item_Weapon_Pinpointer_Pdapinpointer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pinpointer.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( Lang13.Bool( this.target ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Tracking " + this.target + "</span>" );
			}
			return null;
		}

		// Function from file: pinpointer.dm
		public override dynamic process(  ) {
			this.point_at( this.target );
			return null;
		}

		// Function from file: pinpointer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.active ) {
				this.active = true;
				this.process();
				GlobalVars.processing_objects.Add( this );
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You activate the pinpointer</span>" );
			} else {
				this.active = false;
				GlobalVars.processing_objects.Remove( this );
				this.icon_state = "pinoff";
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You deactivate the pinpointer</span>" );
			}
			return null;
		}

		// Function from file: pinpointer.dm
		[Verb]
		[VerbInfo( name: "Select pinpointer target", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void select_pda(  ) {
			ByTable L = null;
			int length = 0;
			Obj_Item_Device_Pda P = null;
			dynamic t = null;

			
			if ( this.used ) {
				GlobalFuncs.to_chat( Task13.User, "Target has already been set!" );
				return;
			}
			L = new ByTable();
			L["Cancel"] = "Cancel";
			length = 1;

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Pda) )) {
				P = _a;
				

				if ( P.name != "Ã¿PDA" ) {
					L["(" + length + ") " + P.name] = P;
					length++;
				}
			}
			t = Interface13.Input( "Select pinpointer target. WARNING: Can only set once.", null, null, null, L, InputType.Null | InputType.Any );

			if ( t == "Cancel" ) {
				return;
			}
			this.target = L[t];

			if ( !Lang13.Bool( this.target ) ) {
				GlobalFuncs.to_chat( Task13.User, "Failed to locate " + this.target + "!" );
				return;
			}
			this.active = true;
			this.point_at( this.target );
			GlobalFuncs.to_chat( Task13.User, "You set the pinpointer to locate " + this.target );
			this.used = true;
			return;
		}

	}

}