// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation_Burnchamber : Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation {

		public string injector_tag = "inc_in";
		public string output_tag = "inc_out";
		public string sensor_tag = "inc_sensor";
		public int temperature = 1000;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.frequency = 1449;
		}

		// Function from file: console.dm
		public Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation_Burnchamber ( dynamic loc = null ) : base( (object)(loc) ) {
			Automation_GetSensorData sensor = null;
			Automation_StaticValue val = null;
			Automation_Compare compare = null;
			Automation_SetInjectorPower inj_on = null;
			Automation_SetVentPumpPower vp_on = null;
			Automation_SetVentPumpPower vp_off = null;
			Automation_IfStatement i = null;
			Automation_SetInjectorPower inj_off = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			sensor = new Automation_GetSensorData( this );
			sensor.sensor = this.sensor_tag;
			sensor.field = "temperature";
			val = new Automation_StaticValue( this );
			val.value = this.temperature - 800;
			compare = new Automation_Compare( this );
			compare.comparator = "Less Than";
			compare.children[1] = sensor;
			compare.children[2] = val;
			inj_on = new Automation_SetInjectorPower( this );
			inj_on.injector = this.injector_tag;
			inj_on.state = 1;
			vp_on = new Automation_SetVentPumpPower( this );
			vp_on.vent_pump = this.output_tag;
			vp_on.state = 1;
			vp_off = new Automation_SetVentPumpPower( this );
			vp_off.vent_pump = this.output_tag;
			vp_off.state = 0;
			i = new Automation_IfStatement( this );
			i.label = "Fuel Injector On";
			i.condition = compare;
			i.children_then.Add( inj_on );
			i.children_then.Add( vp_off );
			i.children_else.Add( vp_on );
			this.automations.Add( i );
			sensor = new Automation_GetSensorData( this );
			sensor.sensor = this.sensor_tag;
			sensor.field = "temperature";
			val = new Automation_StaticValue( this );
			val.value = this.temperature;
			compare = new Automation_Compare( this );
			compare.comparator = "Greater Than";
			compare.children[1] = sensor;
			compare.children[2] = val;
			inj_off = new Automation_SetInjectorPower( this );
			inj_off.injector = this.injector_tag;
			inj_off.state = 0;
			i = new Automation_IfStatement( this );
			i.label = "Fuel Injector Off";
			i.condition = compare;
			i.children_then.Add( inj_off );
			this.automations.Add( i );
			return;
		}

	}

}