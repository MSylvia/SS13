// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_SolarControl : Obj_Machinery_Power {

		public string icon_screen = "solar";
		public string icon_keyboard = "power_key";
		public bool id = false;
		public double? currentdir = 0;
		public double? targetdir = 0;
		public double gen = 0;
		public double lastgen = 0;
		public double? track = 0;
		public double trackrate = 600;
		public double nexttime = 0;
		public Obj_Machinery_Power_Tracker connected_tracker = null;
		public ByTable connected_panels = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 250;
			this.icon = "icons/obj/computer.dmi";
			this.icon_state = "computer";
		}

		// Function from file: solar.dm
		public Obj_Machinery_Power_SolarControl ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			this.connect_to_network();
			return;
		}

		// Function from file: solar.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.set_broken();
				this.density = false;
			}
			return false;
		}

		// Function from file: solar.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			if ( !Lang13.Bool( this.gc_destroyed ) ) {
				
				switch ((int?)( severity )) {
					case 2:
						
						if ( Rand13.PercentChance( 50 ) ) {
							this.set_broken();
						}
						break;
					case 3:
						
						if ( Rand13.PercentChance( 25 ) ) {
							this.set_broken();
						}
						break;
				}
			}
			return false;
		}

		// Function from file: solar.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: solar.dm
		public override int? process( dynamic seconds = null ) {
			this.lastgen = this.gen;
			this.gen = 0;

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.connected_tracker != null ) {
				
				if ( this.connected_tracker.powernet != this.powernet ) {
					this.connected_tracker.unset_control();
				}
			}

			if ( this.track == 1 && this.trackrate != 0 ) {
				
				if ( this.nexttime <= Game13.time ) {
					this.targetdir = ( ( this.targetdir ??0) + this.trackrate / Math.Abs( this.trackrate ) + 360 ) % 360;
					this.nexttime += 36000 / Math.Abs( this.trackrate );
				}
			}
			return null;
		}

		// Function from file: solar.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Structure_Computerframe A2 = null;
			Obj_Item_Weapon_Circuitboard_SolarControl M = null;
			Obj C = null;
			Obj_Structure_Computerframe A3 = null;
			Obj_Item_Weapon_Circuitboard_SolarControl M2 = null;
			Obj C2 = null;

			
			if ( A is Obj_Item_Weapon_Screwdriver ) {
				GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
					
					if ( ( this.stat & 1 ) != 0 ) {
						user.WriteMsg( "<span class='notice'>The broken glass falls out.</span>" );
						A2 = new Obj_Structure_Computerframe( this.loc );
						new Obj_Item_Weapon_Shard( this.loc );
						M = new Obj_Item_Weapon_Circuitboard_SolarControl( A2 );

						foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
							C = _a;
							
							C.loc = this.loc;
						}
						A2.circuit = M;
						A2.state = 3;
						A2.icon_state = "3";
						A2.anchored = 1;
						GlobalFuncs.qdel( this );
					} else {
						user.WriteMsg( "<span class='notice'>You disconnect the monitor.</span>" );
						A3 = new Obj_Structure_Computerframe( this.loc );
						M2 = new Obj_Item_Weapon_Circuitboard_SolarControl( A3 );

						foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
							C2 = _b;
							
							C2.loc = this.loc;
						}
						A3.circuit = M2;
						A3.state = 4;
						A3.icon_state = "4";
						A3.anchored = 1;
						GlobalFuncs.qdel( this );
					}
				}
			} else {
				this.attack_hand( user );
			}
			return null;
		}

		// Function from file: solar.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			double? adjust = null;
			double? adjust2 = null;
			double? mode = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "direction":
					adjust = String13.ParseNumber( _params["adjust"] );

					if ( Lang13.Bool( adjust ) ) {
						this.currentdir = Num13.MaxInt( 0, Num13.MinInt( ((int)( ( ( adjust ??0) + ( this.currentdir ??0) + 360 ) % 360 )), 359 ) );
						this.targetdir = this.currentdir;
						this.set_panels( this.currentdir );
						_default = GlobalVars.TRUE;
					}
					break;
				case "rate":
					adjust2 = String13.ParseNumber( _params["adjust"] );

					if ( Lang13.Bool( adjust2 ) ) {
						this.trackrate = Num13.MaxInt( -7200, Num13.MinInt( ((int)( this.trackrate + ( adjust2 ??0) )), 7200 ) );

						if ( this.trackrate != 0 ) {
							this.nexttime = Game13.time + 36000 / Math.Abs( this.trackrate );
						}
						_default = GlobalVars.TRUE;
					}
					break;
				case "tracking":
					mode = String13.ParseNumber( _params["mode"] );

					if ( Lang13.Bool( mode ) ) {
						this.track = mode;
						_default = GlobalVars.TRUE;
					}

					if ( mode == 2 && this.connected_tracker != null ) {
						this.connected_tracker.set_angle( GlobalVars.SSsun.angle );
						this.set_panels( this.currentdir );
					} else if ( mode == 1 ) {
						this.targetdir = this.currentdir;

						if ( this.trackrate != 0 ) {
							this.nexttime = Game13.time + 36000 / Math.Abs( this.trackrate );
						}
						this.set_panels( this.targetdir );
					}
					break;
				case "refresh":
					this.search_for_connected();

					if ( this.connected_tracker != null && this.track == 2 ) {
						this.connected_tracker.set_angle( GlobalVars.SSsun.angle );
					}
					this.set_panels( this.currentdir );
					_default = GlobalVars.TRUE;
					break;
			}
			return _default;
		}

		// Function from file: solar.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["generated"] = Num13.Floor( this.lastgen );
			data["angle"] = this.currentdir;
			data["direction"] = GlobalFuncs.angle2text( this.currentdir );
			data["tracking_state"] = this.track;
			data["tracking_rate"] = this.trackrate;
			data["rotating_way"] = ( this.trackrate < 0 ? "CCW" : "CW" );
			data["connected_panels"] = this.connected_panels.len;
			data["connected_tracker"] = ( this.connected_tracker != null ? true : false );
			return data;
		}

		// Function from file: solar.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "solar_control", this.name, 500, 400, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: solar.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( ( this.stat & 2 ) != 0 ) {
				this.overlays.Add( "" + this.icon_keyboard + "_off" );
				return false;
			}
			this.overlays.Add( this.icon_keyboard );

			if ( ( this.stat & 1 ) != 0 ) {
				this.overlays.Add( "" + this.icon_state + "_broken" );
			} else {
				this.overlays.Add( this.icon_screen );
			}

			if ( ( this.currentdir ??0) > -1 ) {
				this.overlays.Add( new Image( "icons/obj/computer.dmi", "solcon-o", GlobalVars.FLY_LAYER, GlobalFuncs.angle2dir( this.currentdir ) ) );
			}
			return false;
		}

		// Function from file: solar.dm
		public override void initialize(  ) {
			base.initialize();

			if ( !Lang13.Bool( this.powernet ) ) {
				return;
			}
			this.set_panels( this.currentdir );
			return;
		}

		// Function from file: solar.dm
		public void set_broken(  ) {
			this.stat |= 1;
			this.update_icon();
			return;
		}

		// Function from file: solar.dm
		public void set_panels( double? currentdir = null ) {
			Obj_Machinery_Power_Solar S = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.connected_panels, typeof(Obj_Machinery_Power_Solar) )) {
				S = _a;
				
				S.adir = currentdir;
				S.occlusion();
				S.update_icon();
			}
			this.update_icon();
			return;
		}

		// Function from file: solar.dm
		public void update(  ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			switch ((int?)( this.track )) {
				case 1:
					
					if ( this.trackrate != 0 ) {
						this.currentdir = this.targetdir;
					}
					break;
				case 2:
					
					if ( this.connected_tracker != null ) {
						this.connected_tracker.set_angle( GlobalVars.SSsun.angle );
					}
					break;
			}
			this.set_panels( this.currentdir );
			this.updateDialog();
			return;
		}

		// Function from file: solar.dm
		public void search_for_connected(  ) {
			Obj_Machinery_Power M = null;
			Obj_Machinery_Power S = null;
			Obj_Machinery_Power T = null;

			
			if ( Lang13.Bool( this.powernet ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.powernet.nodes, typeof(Obj_Machinery_Power) )) {
					M = _a;
					

					if ( M is Obj_Machinery_Power_Solar ) {
						S = M;

						if ( !Lang13.Bool( ((dynamic)S).control ) ) {
							((dynamic)S).set_control( this );
						}
					} else if ( M is Obj_Machinery_Power_Tracker ) {
						
						if ( !( this.connected_tracker != null ) ) {
							T = M;

							if ( !Lang13.Bool( ((dynamic)T).control ) ) {
								((Obj_Machinery_Power_Tracker)T).set_control( this );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: solar.dm
		public override bool connect_to_network(  ) {
			bool to_return = false;

			to_return = base.connect_to_network();

			if ( Lang13.Bool( this.powernet ) ) {
				GlobalVars.SSsun.solars.Or( this );
			}
			return to_return;
		}

		// Function from file: solar.dm
		public override bool disconnect_from_network(  ) {
			base.disconnect_from_network();
			GlobalVars.SSsun.solars.Remove( this );
			return false;
		}

		// Function from file: solar.dm
		public override dynamic Destroy(  ) {
			Obj_Machinery_Power_Solar M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.connected_panels, typeof(Obj_Machinery_Power_Solar) )) {
				M = _a;
				
				M.unset_control();
			}

			if ( this.connected_tracker != null ) {
				this.connected_tracker.unset_control();
			}
			return base.Destroy();
		}

	}

}