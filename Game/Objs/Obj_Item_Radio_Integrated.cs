// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Radio_Integrated : Obj_Item_Radio {

		public Ent_Static hostpda = null;
		public bool on = false;
		public string menu_message = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/module.dmi";
			this.icon_state = "power_mod";
		}

		// Function from file: radio.dm
		public Obj_Item_Radio_Integrated ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.loc.loc is Obj_Item_Device_Pda ) {
				this.hostpda = this.loc.loc;
			}
			return;
		}

		// Function from file: radio.dm
		public void generate_menu(  ) {
			return;
		}

		// Function from file: radio.dm
		public void print_to_host( dynamic text = null ) {
			dynamic M = null;

			
			if ( this.hostpda == null ) {
				return;
			}
			((dynamic)this.hostpda).cart = text;

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( this.hostpda.loc, 1 ) )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) && M.machine == this.hostpda ) {
					((dynamic)this.hostpda).cartridge.unlock();
				}
			}
			return;
		}

		// Function from file: radio.dm
		public void post_signal( double freq = 0, string key = null, string value = null, string key2 = null, dynamic value2 = null, string key3 = null, dynamic value3 = null, string s_filter = null ) {
			dynamic frequency = null;
			Game_Data signal = null;

			frequency = GlobalVars.radio_controller.return_frequency( freq );

			if ( !Lang13.Bool( frequency ) ) {
				return;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).source = this;
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).data[key] = value;

			if ( Lang13.Bool( key2 ) ) {
				((dynamic)signal).data[key2] = value2;
			}

			if ( Lang13.Bool( key3 ) ) {
				((dynamic)signal).data[key3] = value3;
			}
			new ByTable().Set( 1, this ).Set( 2, signal ).Set( "filter", s_filter ).Apply( Lang13.BindFunc( frequency, "post_signal" ) );
			return;
		}

	}

}