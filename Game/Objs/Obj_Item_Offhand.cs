// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Offhand : Obj_Item {

		public Obj_Item wielding = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 5;
			this.v_abstract = true;
			this.icon = "icons/obj/weapons.dmi";
			this.icon_state = "offhand";
		}

		public Obj_Item_Offhand ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: twohanded.dm
		public override bool IsShield(  ) {
			return this.wielding.IsShield();
		}

		// Function from file: twohanded.dm
		public void attach_to( Obj_Item I = null ) {
			I.wielded = this;
			this.wielding = I;
			this.name = this.wielding.name + " offhand";
			this.desc = "Your second grip on the " + I.name;
			return;
		}

		// Function from file: twohanded.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !( this.wielding != null ) ) {
				GlobalFuncs.qdel( this );
				return null;
			}
			return this.wielding.unwield( user );
		}

		// Function from file: twohanded.dm
		public override bool preattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, dynamic click_parameters = null ) {
			
			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( target is Obj_Item_Weapon_Storage ) {
				return false;
			}

			if ( this.wielding != null ) {
				
				if ( !Lang13.Bool( ((Ent_Static)target).attackby( this.wielding, user ) ) ) {
					this.wielding.afterattack( target, user, proximity_flag, click_parameters );
				}
				return true;
			}
			return false;
		}

		// Function from file: twohanded.dm
		public override dynamic unwield( dynamic user = null ) {
			
			if ( !( this.wielding != null ) ) {
				GlobalFuncs.returnToPool( this );
				return null;
			}
			return this.wielding.unwield( user );
		}

		// Function from file: twohanded.dm
		public override dynamic dropped( dynamic user = null ) {
			
			if ( !( this.wielding != null ) ) {
				GlobalFuncs.returnToPool( this );
				return null;
			}
			return this.wielding.unwield( user );
		}

	}

}