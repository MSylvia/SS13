// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly : Obj_Item_Device {

		public bool secured = true;
		public ByTable attached_overlays = null;
		public Obj_Item_Device holder = null;
		public int cooldown = 0;
		public int wire_type = 3;
		public bool attachable = false;
		public Wires connected = null;
		public bool WIRE_RECEIVE = true;
		public int WIRE_PULSE = 2;
		public int WIRE_PULSE_SPECIAL = 4;
		public int WIRE_RADIO_RECEIVE = 8;
		public int WIRE_RADIO_PULSE = 16;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.w_class = 2;
			this.materials = new ByTable().Set( "$metal", 100 );
			this.throwforce = 2;
			this.throw_speed = 3;
			this.origin_tech = "magnets=1";
			this.icon = "icons/obj/assemblies/new_assemblies.dmi";
		}

		public Obj_Item_Device_Assembly ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: assembly.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			return null;
		}

		// Function from file: assembly.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return 0;
			}
			((Mob)user).set_machine( this );
			this.interact( user );
			return 1;
		}

		// Function from file: assembly.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.secured ) {
				user.WriteMsg( new Txt().The( this ).item().str( " is secured and ready to be used." ).ToString() );
			} else {
				user.WriteMsg( new Txt().The( this ).item().str( " can be attached to other things." ).ToString() );
			}
			return 0;
		}

		// Function from file: assembly.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic A2 = null;

			
			if ( A is Obj_Item_Device_Assembly ) {
				A2 = A;

				if ( !A2.secured && !this.secured ) {
					this.holder = new Obj_Item_Device_AssemblyHolder( GlobalFuncs.get_turf( this ) );
					((Obj_Item_Device_AssemblyHolder)this.holder).assemble( this, A2, user );
					user.WriteMsg( new Txt( "<span class='notice'>You attach and secure " ).the( A2 ).item().str( " to " ).the( this ).item().str( "!</span>" ).ToString() );
				} else {
					user.WriteMsg( "<span class='warning'>Both devices must be in attachable mode to be attached together.</span>" );
				}
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.toggle_secure() ) {
					user.WriteMsg( new Txt( "<span class='notice'>" ).The( this ).item().str( " is ready!</span>" ).ToString() );
				} else {
					user.WriteMsg( new Txt( "<span class='notice'>" ).The( this ).item().str( " can now be attached!</span>" ).ToString() );
				}
				return null;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: assembly.dm
		public virtual bool toggle_secure(  ) {
			this.secured = !this.secured;
			this.update_icon();
			return this.secured;
		}

		// Function from file: assembly.dm
		public virtual bool activate(  ) {
			
			if ( !this.secured || this.cooldown > 0 ) {
				return false;
			}
			this.cooldown = 2;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.process_cooldown();
				return;
			}));
			return true;
		}

		// Function from file: assembly.dm
		public bool pulse( bool? radio = null ) {
			radio = radio ?? false;

			
			if ( this.connected != null && this.wire_type != 0 ) {
				this.connected.pulse_assembly( this );
				return true;
			}

			if ( this.holder != null && ( this.wire_type & 2 ) != 0 ) {
				((Obj_Item_Device_AssemblyHolder)this.holder).process_activation( this, true, false );
			}

			if ( this.holder != null && ( this.wire_type & 4 ) != 0 ) {
				((Obj_Item_Device_AssemblyHolder)this.holder).process_activation( this, false, true );
			}
			return true;
		}

		// Function from file: assembly.dm
		public bool pulsed( bool? radio = null ) {
			radio = radio ?? false;

			
			if ( ( this.wire_type & 1 ) != 0 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.activate();
					return;
				}));
			}

			if ( radio == true && ( this.wire_type & 8 ) != 0 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.activate();
					return;
				}));
			}
			return true;
		}

		// Function from file: assembly.dm
		public bool process_cooldown(  ) {
			this.cooldown--;

			if ( this.cooldown <= 0 ) {
				return false;
			}
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.process_cooldown();
				return;
			}));
			return true;
		}

		// Function from file: assembly.dm
		public bool is_secured( dynamic user = null ) {
			
			if ( !this.secured ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + " is unsecured!</span>" );
				return false;
			}
			return true;
		}

		// Function from file: assembly.dm
		public virtual string describe(  ) {
			return "The trigger assembly looks broken!";
		}

		// Function from file: assembly.dm
		public virtual bool holder_movement(  ) {
			return false;
		}

		// Function from file: assembly.dm
		public virtual void on_detach( dynamic w = null ) {
			return;
		}

		// Function from file: assembly.dm
		public virtual void on_attach( dynamic w = null ) {
			return;
		}

	}

}