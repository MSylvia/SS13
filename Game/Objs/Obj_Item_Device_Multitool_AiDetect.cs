// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Multitool_AiDetect : Obj_Item_Device_Multitool {

		public int track_delay = 0;

		// Function from file: multitool.dm
		public Obj_Item_Device_Multitool_AiDetect ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSobj.processing.Add( this );
			return;
		}

		// Function from file: multitool.dm
		public override int? process( dynamic seconds = null ) {
			bool found_eye = false;
			dynamic our_turf = null;
			Mob_Living_Silicon_Ai AI = null;
			Camerachunk chunk = null;
			Mob_Camera_AiEye A = null;
			dynamic eye_turf = null;

			
			if ( this.track_delay > Game13.time ) {
				return null;
			}
			found_eye = false;
			our_turf = GlobalFuncs.get_turf( this );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ai_list, typeof(Mob_Living_Silicon_Ai) )) {
				AI = _a;
				

				if ( AI.cameraFollow == this ) {
					found_eye = true;
					break;
				}
			}

			if ( !found_eye && Lang13.Bool( GlobalVars.cameranet.chunkGenerated( Lang13.IntNullable( our_turf.x ), Lang13.IntNullable( our_turf.y ), Convert.ToInt32( our_turf.z ) ) ) ) {
				chunk = GlobalVars.cameranet.getCameraChunk( Lang13.IntNullable( our_turf.x ), Lang13.IntNullable( our_turf.y ), Convert.ToInt32( our_turf.z ) );

				if ( chunk != null ) {
					
					if ( chunk.seenby.len != 0 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( chunk.seenby, typeof(Mob_Camera_AiEye) )) {
							A = _b;
							
							eye_turf = GlobalFuncs.get_turf( A );

							if ( Map13.GetDistance( our_turf, eye_turf ) < 8 ) {
								found_eye = true;
								break;
							}
						}
					}
				}
			}

			if ( found_eye ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_red";
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			this.track_delay = Game13.time + 10;
			return null;
		}

		// Function from file: multitool.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

	}

}