// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_ParticleAccelerator : Obj_Structure {

		public Obj_Machinery_ParticleAccelerator_ControlBox master = null;
		public int construction_state = 0;
		public string reference = null;
		public bool powered = false;
		public int? strength = null;
		public string desc_holder = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/machines/particle_accelerator2.dmi";
			this.icon_state = "none";
		}

		public Obj_Structure_ParticleAccelerator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: particle_accelerator.dm
		public bool process_tool_hit( dynamic O = null, dynamic user = null ) {
			int temp_state = 0;

			
			if ( !Lang13.Bool( O ) || !Lang13.Bool( user ) ) {
				return false;
			}

			if ( !( user is Mob ) || !( O is Obj ) ) {
				return false;
			}
			temp_state = this.construction_state;

			switch ((int)( this.construction_state )) {
				case 0:
					
					if ( O is Obj_Item_Weapon_Wrench ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 75, 1 );
						this.anchored = 1;
						((Ent_Static)user).visible_message( "" + user.name + " secures the " + this.name + " to the floor.", "You secure the external bolts." );
						temp_state++;
					}
					break;
				case 1:
					
					if ( O is Obj_Item_Weapon_Wrench ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 75, 1 );
						this.anchored = 0;
						((Ent_Static)user).visible_message( "" + user.name + " detaches the " + this.name + " from the floor.", "You remove the external bolts." );
						temp_state--;
					} else if ( O is Obj_Item_Stack_CableCoil ) {
						
						if ( Lang13.Bool( O.use( 1, user ) ) ) {
							((Ent_Static)user).visible_message( "" + user.name + " adds wires to the " + this.name + ".", "You add some wires." );
							temp_state++;
						}
					}
					break;
				case 2:
					
					if ( O is Obj_Item_Weapon_Wirecutters ) {
						((Ent_Static)user).visible_message( "" + user.name + " removes some wires from the " + this.name + ".", "You remove some wires." );
						temp_state--;
					} else if ( O is Obj_Item_Weapon_Screwdriver ) {
						((Ent_Static)user).visible_message( "" + user.name + " closes the " + this.name + "'s access panel.", "You close the access panel." );
						temp_state++;
					}
					break;
				case 3:
					
					if ( O is Obj_Item_Weapon_Screwdriver ) {
						((Ent_Static)user).visible_message( "" + user.name + " opens the " + this.name + "'s access panel.", "You open the access panel." );
						temp_state--;
					}
					break;
			}

			if ( temp_state == this.construction_state ) {
				return false;
			} else {
				this.construction_state = temp_state;

				if ( this.construction_state < 3 ) {
					this.update_state();
				}
				this.update_icon();
				return true;
			}
		}

		// Function from file: particle_accelerator.dm
		public bool connect_master( Obj_Machinery_ParticleAccelerator_ControlBox O = null ) {
			
			if ( O != null && O is Obj_Machinery_ParticleAccelerator_ControlBox ) {
				
				if ( O.dir == this.dir ) {
					this.master = O;
					return true;
				}
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public dynamic report_master(  ) {
			
			if ( this.master != null ) {
				return this.master;
			}
			return 0;
		}

		// Function from file: particle_accelerator.dm
		public bool report_ready( Obj_Machinery_ParticleAccelerator_ControlBox O = null ) {
			
			if ( O != null && O == this.master ) {
				
				if ( this.construction_state >= 3 ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public bool update_state(  ) {
			
			if ( this.master != null ) {
				this.master.update_state();
				return false;
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

		// Function from file: particle_accelerator.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( this.master != null && this.master.active ) {
				this.master.toggle_power();
				this.investigation_log( "singulo", "was moved whilst active; it <font color='red'>powered down</font>." );
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( GlobalFuncs.is_type_in_list( a, GlobalVars.common_tools ) ) {
				
				if ( this.process_tool_hit( a, b ) ) {
					return null;
				}
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: particle_accelerator.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			
			switch ((int)( this.construction_state )) {
				case 0:
					this.desc = "A " + this.name + ", looks like it's not attached to the flooring";
					break;
				case 1:
					this.desc = "A " + this.name + ", it is missing some cables";
					break;
				case 2:
					this.desc = "A " + this.name + ", the panel is open";
					break;
				case 3:
					this.desc = "The " + this.name + " is assembled";

					if ( this.powered ) {
						this.desc = this.desc_holder;
					}
					break;
			}
			base.examine( (object)(user), size );
			return null;
		}

		// Function from file: particle_accelerator.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.construction_state = 0;

			if ( this.master != null ) {
				this.master.part_scan();
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: particle_accelerator.dm
		[Verb]
		[VerbInfo( name: "Rotate Counter Clockwise", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotateccw(  ) {
			
			if ( Lang13.Bool( this.anchored ) || Lang13.Bool( Task13.User.stat ) ) {
				GlobalFuncs.to_chat( Task13.User, "It is fastened to the floor!" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return true;
		}

		// Function from file: particle_accelerator.dm
		[Verb]
		[VerbInfo( name: "Rotate Clockwise", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate(  ) {
			
			if ( Lang13.Bool( this.anchored ) || Lang13.Bool( Task13.User.stat ) ) {
				GlobalFuncs.to_chat( Task13.User, "It is fastened to the floor!" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 270 );
			return true;
		}

	}

}