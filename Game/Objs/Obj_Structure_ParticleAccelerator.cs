// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_ParticleAccelerator : Obj_Structure {

		public Obj_Machinery_ParticleAccelerator_ControlBox master = null;
		public int construction_state = 0;
		public string reference = null;
		public bool powered = false;
		public int? strength = null;
		public string desc_holder = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/machines/particle_accelerator.dmi";
			this.icon_state = "none";
		}

		public Obj_Structure_ParticleAccelerator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: particle_accelerator.dm
		public bool process_tool_hit( dynamic O = null, dynamic user = null ) {
			int temp_state = 0;
			dynamic C = null;

			
			if ( !Lang13.Bool( O ) || !Lang13.Bool( user ) ) {
				return false;
			}

			if ( !( user is Mob ) || !( O is Obj ) ) {
				return false;
			}
			temp_state = this.construction_state;

			switch ((int)( this.construction_state )) {
				case 0:
					
					if ( O is Obj_Item_Weapon_Wrench && !this.isinspace() ) {
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
						this.anchored = 1;
						((Ent_Static)user).visible_message( "" + user.name + " secures the " + this.name + " to the floor.", "You secure the external bolts." );
						temp_state++;
					}
					break;
				case 1:
					
					if ( O is Obj_Item_Weapon_Wrench ) {
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
						this.anchored = 0;
						((Ent_Static)user).visible_message( "" + user.name + " detaches the " + this.name + " from the floor.", "You remove the external bolts." );
						temp_state--;
					} else if ( O is Obj_Item_Stack_CableCoil ) {
						C = O;

						if ( Lang13.Bool( C.use( 1 ) ) ) {
							((Ent_Static)user).visible_message( "" + user.name + " adds wires to the " + this.name + ".", "You add some wires." );
							temp_state++;
						} else {
							user.WriteMsg( "<span class='warning'>You need one length of cable to wire the " + this.name + "!</span>" );
							return false;
						}
					}
					break;
				case 2:
					
					if ( O is Obj_Item_Weapon_Wirecutters ) {
						((Ent_Static)user).visible_message( "" + user.name + " removes some wires from the " + this.name + ".", "You remove some wires." );
						temp_state--;
					} else if ( O is Obj_Item_Weapon_Screwdriver ) {
						((Ent_Static)user).visible_message( "" + user.name + " closes the " + this.name + "'s access panel.", "You close the access panel." );
						temp_state++;
					}
					break;
				case 3:
					
					if ( O is Obj_Item_Weapon_Screwdriver ) {
						((Ent_Static)user).visible_message( "" + user.name + " opens the " + this.name + "'s access panel.", "You open the access panel." );
						temp_state--;
					}
					break;
			}

			if ( temp_state == this.construction_state ) {
				return false;
			} else {
				this.construction_state = temp_state;

				if ( this.construction_state < 3 ) {
					this.update_state();
				}
				this.update_icon();
				return true;
			}
		}

		// Function from file: particle_accelerator.dm
		public bool connect_master( Obj_Machinery_ParticleAccelerator_ControlBox O = null ) {
			
			if ( O != null && O is Obj_Machinery_ParticleAccelerator_ControlBox ) {
				
				if ( O.dir == this.dir ) {
					this.master = O;
					return true;
				}
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public dynamic report_master(  ) {
			
			if ( this.master != null ) {
				return this.master;
			}
			return 0;
		}

		// Function from file: particle_accelerator.dm
		public bool report_ready( Obj_Machinery_ParticleAccelerator_ControlBox O = null ) {
			
			if ( O != null && O == this.master ) {
				
				if ( this.construction_state >= 3 ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public bool update_state(  ) {
			
			if ( this.master != null ) {
				this.master.update_state();
				return false;
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( this.master != null && this.master.active ) {
				this.master.toggle_power();
				this.investigate_log( "was moved whilst active; it <font color='red'>powered down</font>.", "singulo" );
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			((Mob)user).changeNext_move( 8 );

			if ( GlobalFuncs.istool( A ) ) {
				
				if ( this.process_tool_hit( A, user ) ) {
					return null;
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: particle_accelerator.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( "<span class='notice'>Alt-click to rotate it clockwise.</span>" );
			return 0;
		}

		// Function from file: particle_accelerator.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( user.incapacitated() ) {
				user.WriteMsg( "<span class='warning'>You can't do that right now!</span>" );
				return false;
			}

			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return false;
			} else {
				this.__CallVerb("Rotate Clockwise" );
			}
			return false;
		}

		// Function from file: particle_accelerator.dm
		public override dynamic Destroy(  ) {
			this.construction_state = 0;

			if ( this.master != null ) {
				this.master.part_scan();
			}
			return base.Destroy();
		}

		// Function from file: particle_accelerator.dm
		[Verb]
		[VerbInfo( name: "Rotate Counter Clockwise", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotateccw(  ) {
			
			if ( Task13.User.stat != 0 || !Task13.User.canmove || Task13.User.restrained() ) {
				return false;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				Task13.User.WriteMsg( "It is fastened to the floor!" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return true;
		}

		// Function from file: particle_accelerator.dm
		[Verb]
		[VerbInfo( name: "Rotate Clockwise", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate(  ) {
			
			if ( Task13.User.stat != 0 || !Task13.User.canmove || Task13.User.restrained() ) {
				return false;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				Task13.User.WriteMsg( "It is fastened to the floor!" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 270 );
			return true;
		}

	}

}