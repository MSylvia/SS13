// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_WormholeGenerator : Obj_Item_MechaParts_MechaEquipment {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "bluespace=3";
			this.equip_cooldown = 50;
			this.energy_drain = 300;
			this.range = 2;
			this.icon_state = "mecha_wholegen";
		}

		public Obj_Item_MechaParts_MechaEquipment_WormholeGenerator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tools.dm
		public override bool action( dynamic target = null ) {
			ByTable theareas = null;
			dynamic AR = null;
			dynamic thearea = null;
			ByTable L = null;
			dynamic pos = null;
			dynamic T = null;
			bool clear = false;
			Obj O = null;
			dynamic target_turf = null;
			Obj_Effect_Portal P = null;

			
			if ( !this.action_checks( target ) || this.loc.z == 2 ) {
				return false;
			}
			theareas = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this.chassis, 100 ) )) {
				AR = _a;
				

				if ( theareas.Contains( AR ) ) {
					continue;
				}
				theareas.Add( AR );
			}

			if ( !( theareas.len != 0 ) ) {
				return false;
			}
			thearea = Rand13.PickFromTable( theareas );
			L = new ByTable();
			pos = GlobalFuncs.get_turf( this );

			foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.get_area_turfs( thearea.type ) )) {
				T = _c;
				

				if ( !T.density && pos.z == T.z ) {
					clear = true;

					foreach (dynamic _b in Lang13.Enumerate( T, typeof(Obj) )) {
						O = _b;
						

						if ( O.density ) {
							clear = false;
							break;
						}
					}

					if ( clear ) {
						L.Add( T );
					}
				}
			}

			if ( !( L.len != 0 ) ) {
				return false;
			}
			target_turf = Rand13.PickFromTable( L );

			if ( !Lang13.Bool( target_turf ) ) {
				return false;
			}
			this.chassis.use_power( this.energy_drain );
			this.set_ready_state( false );
			P = new Obj_Effect_Portal( GlobalFuncs.get_turf( target ) );
			P.target = target_turf;
			P.icon = "icons/obj/objects.dmi";
			P.icon_state = "anom";
			P.name = "wormhole";
			this.do_after_cooldown();
			Task13.Source = null;
			Task13.Schedule( Rand13.Int( 150, 300 ), (Task13.Closure)(() => {
				GlobalFuncs.qdel( P );
				return;
			}));
			return false;
		}

	}

}