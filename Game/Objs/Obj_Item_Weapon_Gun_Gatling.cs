// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Gatling : Obj_Item_Weapon_Gun {

		public int max_shells = 200;
		public int current_shells = 200;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "minigun0";
			this.origin_tech = "materials=4;combat=6";
			this.inhand_states = new ByTable().Set( "left_hand", "icons/mob/in-hand/left/guns_experimental.dmi" ).Set( "right_hand", "icons/mob/in-hand/right/guns_experimental.dmi" );
			this.recoil = 1;
			this.flags = 288;
			this.w_class = 5;
			this.fire_delay = 0;
			this.fire_sound = "sound/weapons/gatling_fire.ogg";
			this.icon = "icons/obj/gun_experimental.dmi";
			this.icon_state = "minigun";
		}

		public Obj_Item_Weapon_Gun_Gatling ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: minigun.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( Lang13.Bool( this.wielded ) ) {
				this.unwield( user );
			} else {
				this.wield( user );
			}
			return null;
		}

		// Function from file: minigun.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			dynamic _a = this.current_shells; // Was a switch-case, sorry for the mess.
			if ( 150<=_a&&_a<=Double.PositiveInfinity ) {
				this.icon_state = "minigun100";
			} else if ( 100<=_a&&_a<=149 ) {
				this.icon_state = "minigun75";
			} else if ( 50<=_a&&_a<=99 ) {
				this.icon_state = "minigun50";
			} else if ( 1<=_a&&_a<=49 ) {
				this.icon_state = "minigun25";
			} else {
				this.icon_state = "minigun0";
			}
			return null;
		}

		// Function from file: minigun.dm
		public override bool process_chambered(  ) {
			
			if ( Lang13.Bool( this.in_chamber ) ) {
				return true;
			}

			if ( this.current_shells != 0 ) {
				this.current_shells--;
				this.update_icon();
				this.in_chamber = new Obj_Item_Projectile_Bullet_Gatling();
				new Obj_Item_AmmoCasingGatling( GlobalFuncs.get_turf( this ) );
				return true;
			}
			return false;
		}

		// Function from file: minigun.dm
		public override void update_wield( dynamic user = null ) {
			this.item_state = "minigun" + ( Lang13.Bool( this.wielded ) ? true : false );

			if ( Lang13.Bool( this.wielded ) ) {
				this.slowdown = 10;
			} else {
				this.slowdown = 0;
			}
			return;
		}

		// Function from file: minigun.dm
		public override void Fire( dynamic target = null, dynamic user = null, dynamic _params = null, bool? reflex = null, bool? struggle = null ) {
			reflex = reflex ?? false;
			struggle = struggle ?? false;

			ByTable possible_turfs = null;
			dynamic T = null;
			int? i = null;
			dynamic newturf = null;

			base.Fire( (object)(target), (object)(user), (object)(_params), reflex, struggle );
			possible_turfs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( 1, target ) )) {
				T = _a;
				
				possible_turfs.Add( T );
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				i = null;
				i = 1;

				while (( i ??0) <= 3) {
					Task13.Sleep( 1 );
					newturf = Rand13.PickFromTable( possible_turfs );
					base.Fire( (object)(newturf), (object)(user), (object)(_params), reflex, struggle );
					i++;
				}
				return;
			}));
			return;
		}

		// Function from file: minigun.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			struggle = struggle ?? false;

			
			if ( flag == true ) {
				return false;
			}

			if ( this.harm_labeled >= this.min_harm_label ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>A label sticks the trigger to the trigger guard!</span>" );
				return false;
			}

			if ( Lang13.Bool( this.wielded ) ) {
				this.Fire( A, user, _params, null, struggle );
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You must dual-wield " ).the( this ).item().str( " before you can fire it!</span>" ).ToString() );
			}
			return false;
		}

		// Function from file: minigun.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, new Txt( "<span class='info'>Has " ).item( this.current_shells ).str( " round" ).s().str( " remaining.</span>" ).ToString() );
			return null;
		}

		// Function from file: minigun.dm
		public override bool isHandgun(  ) {
			return false;
		}

	}

}