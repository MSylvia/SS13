// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Vending : Obj_Machinery {

		public bool active = true;
		public bool vend_ready = true;
		public int vend_delay = 10;
		public ByTable products = new ByTable();
		public ByTable contraband = new ByTable();
		public ByTable premium = new ByTable();
		public string product_slogans = "";
		public string product_ads = "";
		public ByTable product_records = new ByTable();
		public ByTable hidden_records = new ByTable();
		public ByTable coin_records = new ByTable();
		public ByTable slogan_list = new ByTable();
		public ByTable small_ads = new ByTable();
		public string vend_reply = null;
		public int last_reply = 0;
		public int last_slogan = 0;
		public int slogan_delay = 6000;
		public string icon_vend = null;
		public string icon_deny = null;
		public int seconds_electrified = 0;
		public bool shoot_inventory = false;
		public bool shut_up = false;
		public bool extended_inventory = false;
		public bool scan_id = true;
		public dynamic coin = null;
		public ByTable dish_quants = new ByTable();
		public Type refill_canister = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.verb_say = "beeps";
			this.verb_ask = "beeps";
			this.verb_exclaim = "beeps";
			this.icon = "icons/obj/vending.dmi";
			this.icon_state = "generic";
			this.layer = 2.9;
		}

		// Function from file: vending.dm
		public Obj_Machinery_Vending ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_Weapon_Circuitboard_Vendor V = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.wires = new Wires_Vending( this );

			if ( this.refill_canister != null ) {
				this.component_parts = new ByTable();
				V = new Obj_Item_Weapon_Circuitboard_Vendor( null );
				V.set_type( this.type );
				this.component_parts.Add( V );
				this.component_parts.Add( Lang13.Call( this.refill_canister ) );
				this.component_parts.Add( Lang13.Call( this.refill_canister ) );
				this.component_parts.Add( Lang13.Call( this.refill_canister ) );
				this.RefreshParts();
			} else {
				this.build_inventory( this.products );
				this.build_inventory( this.contraband, true );
				this.build_inventory( this.premium, false, true );
			}
			this.slogan_list = GlobalFuncs.splittext( this.product_slogans, ";" );
			this.last_slogan = Game13.time + Rand13.Int( 0, this.slogan_delay );
			this.power_change();
			return;
		}

		// Function from file: vending.dm
		public override void power_change(  ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-broken";
			} else if ( Lang13.Bool( this.powered() ) ) {
				this.icon_state = Lang13.Initial( this, "icon_state" );
				this.stat &= 65533;
			} else {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-off";
				this.stat |= 2;
			}
			return;
		}

		// Function from file: vending.dm
		public override int? process( dynamic seconds = null ) {
			dynamic slogan = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !this.active ) {
				return null;
			}

			if ( this.seconds_electrified > 0 ) {
				this.seconds_electrified--;
			}

			if ( this.last_slogan + this.slogan_delay <= Game13.time && this.slogan_list.len > 0 && !this.shut_up && Rand13.PercentChance( 5 ) ) {
				slogan = Rand13.PickFromTable( this.slogan_list );
				this.speak( slogan );
				this.last_slogan = Game13.time;
			}

			if ( this.shoot_inventory && Rand13.PercentChance( 2 ) ) {
				this.throw_item();
			}
			return null;
		}

		// Function from file: vending.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob R = null;
			string N = null;
			Obj O = null;
			dynamic R2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Task13.User is Mob_Living_Silicon ) {
				
				if ( Task13.User is Mob_Living_Silicon_Robot ) {
					R = Task13.User;

					if ( !( Lang13.Bool( ((dynamic)R).module ) && ((dynamic)R).module is Obj_Item_Weapon_RobotModule_Butler ) ) {
						Task13.User.WriteMsg( "<span class='notice'>The vending machine refuses to interface with you, as you are not in its target demographic!</span>" );
						return null;
					}
				} else {
					Task13.User.WriteMsg( "<span class='notice'>The vending machine refuses to interface with you, as you are not in its target demographic!</span>" );
					return null;
				}
			}

			if ( Lang13.Bool( href_list["remove_coin"] ) ) {
				
				if ( !Lang13.Bool( this.coin ) ) {
					Task13.User.WriteMsg( "<span class='notice'>There is no coin in this machine.</span>" );
					return null;
				}
				this.coin.loc = this.loc;

				if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
					Task13.User.put_in_hands( this.coin );
				}
				Task13.User.WriteMsg( "<span class='notice'>You remove " + this.coin + " from " + this + ".</span>" );
				this.coin = null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["dispense"] ) && this.vend_ready ) {
				N = href_list["dispense"];

				if ( Convert.ToDouble( this.dish_quants[N] ) <= 0 ) {
					return null;
				}
				this.vend_ready = false;
				this.f_use_power( 5 );
				Task13.Schedule( this.vend_delay, (Task13.Closure)(() => {
					this.dish_quants[N] = Num13.MaxInt( Convert.ToInt32( this.dish_quants[N] - 1 ), 0 );

					foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
						O = _a;
						

						if ( O.name == N ) {
							O.loc = this.loc;
							break;
						}
					}
					this.vend_ready = true;
					this.updateUsrDialog();
					return;
				}));
				return null;
			}

			if ( Lang13.Bool( href_list["vend"] ) && this.vend_ready ) {
				
				if ( Lang13.Bool( this.panel_open ) ) {
					Task13.User.WriteMsg( "<span class='notice'>The vending machine cannot dispense products while its service panel is open!</span>" );
					return null;
				}

				if ( !this.allowed( Task13.User ) && !Lang13.Bool( this.emagged ) && this.scan_id ) {
					Task13.User.WriteMsg( "<span class='warning'>Access denied.</span>" );
					Icon13.Flick( this.icon_deny, this );
					return null;
				}
				this.vend_ready = false;
				R2 = Lang13.FindObj( href_list["vend"] );

				if ( !Lang13.Bool( R2 ) || !( R2 is Data_VendingProduct ) || !Lang13.Bool( R2.product_path ) ) {
					this.vend_ready = true;
					return null;
				}

				if ( this.hidden_records.Contains( R2 ) ) {
					
					if ( !this.extended_inventory ) {
						this.vend_ready = true;
						return null;
					}
				} else if ( this.coin_records.Contains( R2 ) ) {
					
					if ( !Lang13.Bool( this.coin ) ) {
						Task13.User.WriteMsg( "<span class='warning'>You need to insert a coin to get this item!</span>" );
						this.vend_ready = true;
						return null;
					}

					if ( this.coin.string_attached == true ) {
						
						if ( Rand13.PercentChance( 50 ) ) {
							
							if ( Task13.User.put_in_hands( this.coin ) ) {
								Task13.User.WriteMsg( "<span class='notice'>You successfully pull " + this.coin + " out before " + this + " could swallow it.</span>" );
								this.coin = null;
							} else {
								Task13.User.WriteMsg( "<span class='warning'>You couldn't pull " + this.coin + " out because your hands are full!</span>" );
								GlobalFuncs.qdel( this.coin );
								this.coin = null;
							}
						} else {
							Task13.User.WriteMsg( "<span class='warning'>You weren't able to pull " + this.coin + " out fast enough, the machine ate it, string and all!</span>" );
							GlobalFuncs.qdel( this.coin );
							this.coin = null;
						}
					} else {
						GlobalFuncs.qdel( this.coin );
						this.coin = null;
					}
				} else if ( !this.product_records.Contains( R2 ) ) {
					this.vend_ready = true;
					GlobalFuncs.message_admins( "Vending machine exploit attempted by " + GlobalFuncs.key_name( Task13.User, Task13.User.client ) + "!" );
					return null;
				}

				if ( Convert.ToDouble( R2.amount ) <= 0 ) {
					Task13.User.WriteMsg( "<span class='warning'>Sold out.</span>" );
					this.vend_ready = true;
					return null;
				} else {
					R2.amount--;
				}

				if ( this.last_reply + this.vend_delay + 200 <= Game13.time && Lang13.Bool( this.vend_reply ) ) {
					this.speak( this.vend_reply );
					this.last_reply = Game13.time;
				}
				this.f_use_power( 5 );

				if ( Lang13.Bool( this.icon_vend ) ) {
					Icon13.Flick( this.icon_vend, this );
				}
				Task13.Schedule( this.vend_delay, (Task13.Closure)(() => {
					Lang13.Call( R2.product_path, GlobalFuncs.get_turf( this ) );
					this.vend_ready = true;
					return;
					return;
				}));
				this.updateUsrDialog();
				return null;
			} else if ( Lang13.Bool( href_list["togglevoice"] ) && Lang13.Bool( this.panel_open ) ) {
				this.shut_up = !this.shut_up;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: vending.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;
			ByTable display_records = null;
			Data_VendingProduct R = null;
			dynamic O = null;
			dynamic N = null;
			Browser popup = null;

			dat = "";

			if ( Lang13.Bool( this.panel_open ) && !( a is Mob_Living_Silicon_Ai ) ) {
				return this.wires.interact( a );
			} else {
				
				if ( ( this.stat & 3 ) != 0 ) {
					return null;
				}
				dat += "<h3>Select an item</h3>";
				dat += "<div class='statusDisplay'>";

				if ( this.product_records.len == 0 ) {
					dat += "<font color = 'red'>No product loaded!</font>";
				} else {
					display_records = this.product_records;

					if ( this.extended_inventory ) {
						display_records = this.product_records + this.hidden_records;
					}

					if ( Lang13.Bool( this.coin ) ) {
						display_records = this.product_records + this.coin_records;
					}

					if ( Lang13.Bool( this.coin ) && this.extended_inventory ) {
						display_records = this.product_records + this.hidden_records + this.coin_records;
					}
					dat += "<ul>";

					foreach (dynamic _a in Lang13.Enumerate( display_records, typeof(Data_VendingProduct) )) {
						R = _a;
						
						dat += "<li>";

						if ( ( R.amount ??0) > 0 ) {
							dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";vend=" ).Ref( R ).str( "'>Vend</a> " ).ToString();
						} else {
							dat += "<span class='linkOff'>Sold out</span> ";
						}
						dat += "<font color = '" + R.display_color + "'><b>" + GlobalFuncs.sanitize( R.product_name ) + "</b>:</font>";
						dat += " <b>" + R.amount + "</b>";
						dat += "</li>";
					}
					dat += "</ul>";
				}
				dat += "</div>";

				if ( this.premium.len > 0 ) {
					dat += "<b>Coin slot:</b> ";

					if ( Lang13.Bool( this.coin ) ) {
						dat += new Txt().item( this.coin ).str( "&nbsp;&nbsp;<a href='byond://?src=" ).Ref( this ).str( ";remove_coin=1'>Remove</a>" ).ToString();
					} else {
						dat += "<i>No coin</i>&nbsp;&nbsp;<span class='linkOff'>Remove</span>";
					}
				}

				if ( this is Obj_Machinery_Vending_Snack ) {
					dat += "<h3>Chef's Food Selection</h3>";
					dat += "<div class='statusDisplay'>";

					foreach (dynamic _b in Lang13.Enumerate( this.dish_quants )) {
						O = _b;
						

						if ( Convert.ToDouble( this.dish_quants[O] ) > 0 ) {
							N = this.dish_quants[O];
							dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";dispense=" ).item( GlobalFuncs.sanitize( O ) ).str( "'>Dispense</A> " ).ToString();
							dat += "<B>" + GlobalFuncs.capitalize( O ) + ": " + N + "</B><br>";
						}
					}
					dat += "</div>";
				}
			}
			((Mob)a).set_machine( this );

			if ( this.seconds_electrified != 0 && !( ( this.stat & 2 ) != 0 ) ) {
				
				if ( this.shock( a, 100 ) ) {
					return null;
				}
			}
			popup = new Browser( a, "vending", this.name );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: vending.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: vending.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !Lang13.Bool( this.emagged ) ) {
				this.emagged = 1;
				user.WriteMsg( "<span class='notice'>You short out the product lock on " + this + ".</span>" );
			}
			return false;
		}

		// Function from file: vending.dm
		public override bool default_deconstruction_crowbar( dynamic C = null, bool? ignore_panel = null ) {
			ByTable product_list = null;
			int? i = null;
			Data_VendingProduct machine_content = null;
			int safety = 0;
			Obj_Item_Weapon_VendingRefill VR = null;

			product_list = new ByTable(new object [] { this.product_records, this.hidden_records, this.coin_records });
			i = null;
			i = 1;

			while (( i ??0) <= 3) {
				
				foreach (dynamic _b in Lang13.Enumerate( product_list[i], typeof(Data_VendingProduct) )) {
					machine_content = _b;
					

					while (machine_content.amount != 0) {
						safety = 0;

						foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_VendingRefill) )) {
							VR = _a;
							
							safety++;

							if ( Convert.ToDouble( VR.charges[i] ) < Convert.ToDouble( VR.init_charges[i] ) ) {
								VR.charges[i]++;
								machine_content.amount--;

								if ( !Lang13.Bool( machine_content.amount ) ) {
									break;
								}
							} else {
								safety--;
							}
						}

						if ( safety <= 0 ) {
							break;
						}
					}
				}
				i++;
			}
			base.default_deconstruction_crowbar( (object)(C), ignore_panel );
			return false;
		}

		// Function from file: vending.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic canister = null;
			int transfered = 0;

			
			if ( Lang13.Bool( this.panel_open ) ) {
				
				if ( this.default_unfasten_wrench( user, A, 60 ) ) {
					return null;
				}

				if ( this.component_parts != null && A is Obj_Item_Weapon_Crowbar ) {
					this.default_deconstruction_crowbar( A );
				}
			}

			if ( A is Obj_Item_Weapon_Screwdriver && Lang13.Bool( this.anchored ) ) {
				this.panel_open = !Lang13.Bool( this.panel_open ) ?1:0;
				user.WriteMsg( "<span class='notice'>You " + ( Lang13.Bool( this.panel_open ) ? "open" : "close" ) + " the maintenance panel.</span>" );
				this.overlays.Cut();

				if ( Lang13.Bool( this.panel_open ) ) {
					this.overlays.Add( new Image( this.icon, "" + Lang13.Initial( this, "icon_state" ) + "-panel" ) );
				}
				this.updateUsrDialog();
				return null;
			} else if ( A is Obj_Item_Device_Multitool || A is Obj_Item_Weapon_Wirecutters ) {
				
				if ( Lang13.Bool( this.panel_open ) ) {
					this.attack_hand( user );
				}
				return null;
			} else if ( A is Obj_Item_Weapon_Coin && this.premium.len > 0 ) {
				
				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				A.loc = this;
				this.coin = A;
				user.WriteMsg( "<span class='notice'>You insert " + A + " into " + this + ".</span>" );
				return null;
			} else if ( Lang13.Bool( ((dynamic)this.refill_canister).IsInstanceOfType( A ) ) && this.refill_canister != null ) {
				
				if ( ( this.stat & 3 ) != 0 ) {
					user.WriteMsg( "<span class='notice'>It does nothing.</span>" );
				} else if ( Lang13.Bool( this.panel_open ) ) {
					canister = A;

					if ( Lang13.Bool( canister.charges[1] ) == false ) {
						user.WriteMsg( "<span class='notice'>This " + canister.name + " is empty!</span>" );
					} else {
						transfered = this.refill_inventory( canister, this.product_records, user );

						if ( transfered != 0 ) {
							user.WriteMsg( new Txt( "<span class='notice'>You loaded " ).item( transfered ).str( " items in " ).the( this.name ).item().str( ".</span>" ).ToString() );
						} else {
							user.WriteMsg( "<span class='notice'>The " + this.name + " is fully stocked.</span>" );
						}
					}
					return null;
				} else {
					user.WriteMsg( "<span class='notice'>You should probably unscrew the service panel first.</span>" );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: vending.dm
		public bool shock( dynamic user = null, int prb = 0 ) {
			EffectSystem_SparkSpread s = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( !Rand13.PercentChance( prb ) ) {
				return false;
			}
			s = new EffectSystem_SparkSpread();
			s.set_up( 5, 1, this );
			s.start();

			if ( Lang13.Bool( GlobalFuncs.electrocute_mob( user, GlobalFuncs.get_area( this ), this, 061 ) ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: vending.dm
		public bool throw_item(  ) {
			dynamic throw_item = null;
			dynamic target = null;
			Data_VendingProduct R = null;
			dynamic dump_path = null;

			throw_item = null;
			target = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInView( this, 7 ) );

			if ( !Lang13.Bool( target ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.product_records, typeof(Data_VendingProduct) )) {
				R = _a;
				

				if ( ( R.amount ??0) <= 0 ) {
					continue;
				}
				dump_path = R.product_path;

				if ( !Lang13.Bool( dump_path ) ) {
					continue;
				}
				R.amount--;
				throw_item = Lang13.Call( dump_path, this.loc );
				break;
			}

			if ( !Lang13.Bool( throw_item ) ) {
				return false;
			}
			((Ent_Dynamic)throw_item).throw_at( target, 16, 3 );
			this.visible_message( "<span class='danger'>" + this + " launches " + throw_item + " at " + target + "!</span>" );
			return true;
		}

		// Function from file: vending.dm
		public void malfunction(  ) {
			Data_VendingProduct R = null;
			dynamic dump_path = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.product_records, typeof(Data_VendingProduct) )) {
				R = _a;
				

				if ( ( R.amount ??0) <= 0 ) {
					continue;
				}
				dump_path = R.product_path;

				if ( !Lang13.Bool( dump_path ) ) {
					continue;
				}

				while (( R.amount ??0) > 0) {
					Lang13.Call( dump_path, this.loc );
					R.amount--;
				}
				continue;
			}
			this.stat |= 1;
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-broken";
			return;
		}

		// Function from file: vending.dm
		public void speak( dynamic message = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( !Lang13.Bool( message ) ) {
				return;
			}
			this.say( message );
			return;
		}

		// Function from file: vending.dm
		public int refill_inventory( dynamic refill = null, ByTable machine = null, dynamic charge_type = null ) {
			charge_type = charge_type ?? 1;

			int total = 0;
			int to_restock = 0;
			Data_VendingProduct machine_content = null;
			Data_VendingProduct machine_content2 = null;
			dynamic tmp_charges = null;
			Data_VendingProduct machine_content3 = null;
			int restock = 0;

			total = 0;
			to_restock = 0;

			foreach (dynamic _a in Lang13.Enumerate( machine, typeof(Data_VendingProduct) )) {
				machine_content = _a;
				

				if ( machine_content.amount == 0 && Convert.ToDouble( refill.charges[charge_type] ) > 0 ) {
					machine_content.amount++;
					refill.charges[charge_type]--;
					total++;
				}
				to_restock += ( machine_content.max_amount == true ?1:0) - ( machine_content.amount ??0);
			}

			if ( to_restock <= Convert.ToDouble( refill.charges[charge_type] ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( machine, typeof(Data_VendingProduct) )) {
					machine_content2 = _b;
					
					machine_content2.amount = Lang13.IntNullable( machine_content2.max_amount );
				}
				refill.charges[charge_type] -= to_restock;
				total += to_restock;
			} else {
				tmp_charges = refill.charges[charge_type];

				foreach (dynamic _c in Lang13.Enumerate( machine, typeof(Data_VendingProduct) )) {
					machine_content3 = _c;
					

					if ( Lang13.Bool( refill.charges[charge_type] ) == false ) {
						break;
					}
					restock = GlobalFuncs.Ceiling( ( ( machine_content3.max_amount == true ?1:0) - ( machine_content3.amount ??0) ) / to_restock * Convert.ToDouble( tmp_charges ) );

					if ( restock > Convert.ToDouble( refill.charges[charge_type] ) ) {
						restock = Convert.ToInt32( refill.charges[charge_type] );
					}
					machine_content3.amount += restock;
					refill.charges[charge_type] -= restock;
					total += restock;
				}
			}
			return total;
		}

		// Function from file: vending.dm
		public void build_inventory( ByTable productlist = null, bool? hidden = null, bool? req_coin = null, bool? start_empty = null ) {
			hidden = hidden ?? false;
			req_coin = req_coin ?? false;

			dynamic typepath = null;
			bool? amount = null;
			dynamic temp = null;
			Data_VendingProduct R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( productlist )) {
				typepath = _a;
				
				amount = Lang13.BoolNullable( productlist[typepath] );

				if ( amount == null ) {
					amount = false;
				}
				temp = Lang13.Call( typepath, null );
				R = new Data_VendingProduct();
				R.product_name = Lang13.Initial( temp, "name" );
				R.product_path = typepath;

				if ( !( start_empty == true ) ) {
					R.amount = Lang13.IntNullable( amount );
				}
				R.max_amount = amount;
				R.display_color = Rand13.Pick(new object [] { "red", "blue", "green" });

				if ( hidden == true ) {
					this.hidden_records.Add( R );
				} else if ( req_coin == true ) {
					this.coin_records.Add( R );
				} else {
					this.product_records.Add( R );
				}
			}
			return;
		}

		// Function from file: vending.dm
		public override bool blob_act( dynamic severity = null ) {
			this.malfunction();
			base.blob_act( (object)(severity) );
			return false;
		}

		// Function from file: vending.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			if ( !Lang13.Bool( this.gc_destroyed ) ) {
				
				if ( Rand13.PercentChance( 25 ) ) {
					this.malfunction();
				}
			}
			return false;
		}

		// Function from file: vending.dm
		public override void RefreshParts(  ) {
			Obj_Item_Weapon_VendingRefill VR = null;

			
			if ( this.component_parts != null ) {
				this.product_records = new ByTable();
				this.hidden_records = new ByTable();
				this.coin_records = new ByTable();
				this.build_inventory( this.products, null, null, true );
				this.build_inventory( this.contraband, true, null, true );
				this.build_inventory( this.premium, false, true, true );

				foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_VendingRefill) )) {
					VR = _a;
					
					this.refill_inventory( VR, this.product_records, 1 );
					this.refill_inventory( VR, this.coin_records, 3 );
					this.refill_inventory( VR, this.hidden_records, 2 );
				}
			}
			return;
		}

		// Function from file: vending.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.wires );
			this.wires = null;
			GlobalFuncs.qdel( this.coin );
			this.coin = null;
			return base.Destroy();
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.DisIntegrate( this );
			return;
		}

	}

}