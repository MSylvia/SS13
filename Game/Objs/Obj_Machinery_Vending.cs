// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Vending : Obj_Machinery {

		public Type pack = null;
		public int health = 100;
		public int maxhealth = 100;
		public bool active = true;
		public bool vend_ready = true;
		public int vend_delay = 10;
		public int shoot_chance = 2;
		public Data_VendingProduct currently_vending = null;
		public ByTable products = new ByTable();
		public ByTable contraband = new ByTable();
		public ByTable premium = new ByTable();
		public ByTable prices = new ByTable();
		public string product_slogans = "";
		public string product_ads = "";
		public ByTable product_records = new ByTable();
		public ByTable hidden_records = new ByTable();
		public ByTable coin_records = new ByTable();
		public ByTable slogan_list = new ByTable();
		public ByTable small_ads = new ByTable();
		public string vend_reply = null;
		public int last_reply = 0;
		public int last_slogan = 0;
		public int slogan_delay = 6000;
		public string icon_vend = null;
		public string icon_deny = null;
		public int seconds_electrified = 0;
		public bool shoot_inventory = false;
		public bool shut_up = false;
		public bool extended_inventory = false;
		public bool scan_id = true;
		public dynamic coin = null;
		public Wires_Vending wires = null;
		public ByTable overlays_vending = new ByTable( 2 );
		public ByTable vouchers = null;
		public Obj_Item_Weapon_Storage_Lockbox_Coinbox coinbox = null;
		public bool cardboard = false;
		public ByTable categories = new ByTable();
		public ByTable allowed_inputs = new ByTable();
		public string machine_id = "#";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 830;
			this.icon = "icons/obj/vending.dmi";
			this.icon_state = "empty";
			this.layer = 2.9;
		}

		// Function from file: vending.dm
		public Obj_Machinery_Vending ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.machine_id = "" + this.name + " #" + GlobalFuncs.multinum_display( GlobalVars.num_vending_machines, 4 );
			GlobalVars.num_vending_machines++;
			this.overlays_vending[1] = "" + this.icon_state + "-panel";
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Vendomat(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_ScanningModule()
			 });
			this.RefreshParts();
			this.wires = new Wires_Vending( this );
			Task13.Schedule( 4, (Task13.Closure)(() => {
				this.slogan_list = GlobalFuncs.text2list( this.product_slogans, ";" );
				this.last_slogan = Game13.time + Rand13.Int( 0, this.slogan_delay );
				this.power_change();
				return;
			}));
			this.coinbox = new Obj_Item_Weapon_Storage_Lockbox_Coinbox( this );

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: vending.dm
		public override bool wirejack( dynamic P = null ) {
			
			if ( base.wirejack( (object)(P) ) ) {
				this.extended_inventory = !this.extended_inventory;
				this.scan_id = !this.scan_id;
				return true;
			}
			return false;
		}

		// Function from file: vending.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.panel_open ) {
				this.overlays.Add( this.overlays_vending[1] );
			} else {
				this.overlays.Remove( this.overlays_vending[1] );
			}
			this.overlays.Remove( this.overlays_vending[2] );

			if ( this.emagged != 0 ) {
				this.overlays.Add( this.overlays_vending[2] );
			}
			return null;
		}

		// Function from file: vending.dm
		public override dynamic power_change(  ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-broken";
			} else if ( Lang13.Bool( this.powered() ) ) {
				this.icon_state = Lang13.Initial( this, "icon_state" );
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-off";
					this.stat |= 2;
					return;
				}));
			}
			return null;
		}

		// Function from file: vending.dm
		public override string say_quote( dynamic text = null ) {
			return "beeps, " + text;
		}

		// Function from file: vending.dm
		public override dynamic process(  ) {
			dynamic slogan = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !this.active ) {
				return null;
			}

			if ( this.seconds_electrified > 0 ) {
				this.seconds_electrified--;
			}

			if ( this.last_slogan + this.slogan_delay <= Game13.time && this.slogan_list.len > 0 && !this.shut_up && Rand13.PercentChance( 5 ) ) {
				slogan = Rand13.PickFromTable( this.slogan_list );
				this.speak( slogan );
				this.last_slogan = Game13.time;
			}

			if ( this.shoot_inventory && Rand13.PercentChance( this.shoot_chance ) ) {
				this.throw_item();
			}
			return null;
		}

		// Function from file: vending.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			bool free_vend = false;
			bool can_vend = false;
			double? idx = null;
			double? cat = null;
			dynamic R = null;
			Mob R2 = null;
			double? idx2 = null;
			double? cat2 = null;
			Data_VendingProduct R3 = null;
			dynamic card = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				Interface13.Browse( Task13.User, null, "window=vending" );
				return 1;
			}
			free_vend = false;

			if ( Task13.User is Mob_Living_Silicon ) {
				can_vend = true;

				if ( Lang13.Bool( href_list["vend"] ) && this.vend_ready && !( this.currently_vending != null ) ) {
					idx = String13.ParseNumber( href_list["vend"] );
					cat = String13.ParseNumber( href_list["cat"] );
					R = this.GetProductByID( idx, cat );

					if ( Lang13.Bool( R.price ) ) {
						can_vend = false;
					}
				}

				if ( Task13.User is Mob_Living_Silicon_Robot ) {
					R2 = Task13.User;

					if ( Lang13.Bool( ((dynamic)R2).module ) && ((dynamic)R2).module is Obj_Item_Weapon_RobotModule_Butler || R2 is Mob_Living_Silicon_Robot_Mommi ) {
						can_vend = true;
					}
				}

				if ( !can_vend ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The vending machine refuses to interface with you, as you are not in its target demographic!</span>" );
					return null;
				} else {
					free_vend = true;
				}
			}

			if ( Lang13.Bool( href_list["remove_coin"] ) ) {
				
				if ( !Lang13.Bool( this.coin ) ) {
					GlobalFuncs.to_chat( Task13.User, "There is no coin in this machine." );
					return null;
				}
				((Ent_Dynamic)this.coin).forceMove( GlobalFuncs.get_turf( this ) );

				if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
					Task13.User.put_in_hands( this.coin );
				}
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You remove the " + this.coin + " from the " + this + "</span>" );
				this.coin = null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["vend"] ) && this.vend_ready && !( this.currently_vending != null ) ) {
				
				if ( !this.allowed( Task13.User ) && !( this.emagged != 0 ) && this.scan_id ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Access denied.</span>" );
					Icon13.Flick( this.icon_deny, this );
					return null;
				}
				idx2 = String13.ParseNumber( href_list["vend"] );
				cat2 = String13.ParseNumber( href_list["cat"] );
				R3 = this.GetProductByID( idx2, cat2 );

				if ( !( R3 != null ) || !( R3 is Data_VendingProduct ) || !Lang13.Bool( R3.product_path ) || ( R3.amount ??0) <= 0 ) {
					GlobalFuncs.message_admins( "Invalid vend request by " + GlobalFuncs.formatJumpTo( this.loc ) + ": " + href );
					return null;
				}

				if ( R3.price == null || !( R3.price == true ) ) {
					this.vend( R3, Task13.User );
				} else if ( free_vend ) {
					this.vend( R3, Task13.User );
				} else {
					this.currently_vending = R3;
					this.updateUsrDialog();
				}
				return null;
			} else if ( Lang13.Bool( href_list["cancel_buying"] ) ) {
				this.currently_vending = null;
				this.updateUsrDialog();
				return null;
			} else if ( Lang13.Bool( href_list["buy"] ) ) {
				card = Task13.User.get_id_card();

				if ( Lang13.Bool( card ) ) {
					this.connect_account( Task13.User, card );
				}
				this.updateUsrDialog();
				return null;
			} else if ( Lang13.Bool( href_list["togglevoice"] ) && this.panel_open ) {
				this.shut_up = !this.shut_up;
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: vending.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string vendorname = null;
			int vertical = 0;
			string dat = null;
			string dat2 = null;
			ByTable display_records = null;
			ByTable category_names = null;
			Data_VendingProduct R = null;
			Data_VendingProduct R2 = null;
			dynamic cat_name = null;
			Data_VendingProduct R3 = null;
			Data_VendingProduct R4 = null;
			Data_VendingProduct R5 = null;

			
			if ( a.a_intent == "hurt" && a is Mob_Living_Carbon ) {
				((Mob)a).delayNextAttack( 10 );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/grillehit.ogg", 50, 1 );
				this.shake( true, 3 );
				this.health -= 4;

				if ( !this.Adjacent( a ) && Task13.User.mutations.Contains( 1 ) ) {
					GlobalFuncs.to_chat( a, "<span class='danger'>You slam the " + this + " with your mind.</span>" );
					this.visible_message( "<span class='danger'>" + this + " dents slightly as if struck.</span>" );
				} else {
					((Ent_Static)a).visible_message( "<span class='danger'>" + a + " kicks the " + this + ".</span>", "<span class='danger'>You kick the " + this + ".</span>" );

					if ( Rand13.PercentChance( 70 ) ) {
						((Mob_Living)a).apply_damage( Rand13.Int( 2, 4 ), "brute", "r_leg" );
					}
				}

				if ( this.health <= 0 ) {
					this.stat |= 1;
					this.update_vicon();
					return null;
				}

				if ( Rand13.PercentChance( 2 ) ) {
					this.malfunction();
				}

				if ( Rand13.PercentChance( 2 ) ) {
					this.TurnOff( 600 );
				}
				return null;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.seconds_electrified > 0 ) {
				
				if ( this.shock( a, 100 ) ) {
					return null;
				}
			} else if ( this.seconds_electrified != 0 ) {
				this.seconds_electrified = 0;
			}
			((Mob)a).set_machine( this );
			vendorname = this.name;
			vertical = 400;

			if ( this.currently_vending != null ) {
				dat = "<TT><center><b>" + vendorname + "</b></center><hr /><br>";
				dat += new Txt( "<b>You have selected " ).item( this.currently_vending.product_name ).str( ".<br>Please ensure your ID is in your ID holder or hand.</b><br>\n			<a href='byond://?src=" ).Ref( this ).str( ";buy=1'>Pay</a> |\n			<a href='byond://?src=" ).Ref( this ).str( ";cancel_buying=1'>Cancel</a>" ).ToString();
				Interface13.Browse( a, dat, "window=vending" );
				GlobalFuncs.onclose( a, "" );
				return null;
			}
			dat2 = "<TT><center><b>" + vendorname + "</b></center><hr /><br>";
			dat2 += "<b>Select an item: </b><br><br>";

			if ( this.premium.len > 0 ) {
				dat2 += new Txt( "<b>Coin slot:</b> " ).item( ( Lang13.Bool( this.coin ) ? this.coin : ((dynamic)( "No coin inserted" )) ) ).str( " (<a href='byond://?src=" ).Ref( this ).str( ";remove_coin=1'>Remove</A>)<br><br>" ).ToString();
			}

			if ( this.product_records.len == 0 ) {
				dat2 += "<font color = 'red'>No products loaded!</font>";
			} else {
				display_records = this.product_records.Copy();

				if ( this.extended_inventory ) {
					display_records.Add( this.hidden_records );
				}

				if ( Lang13.Bool( this.coin ) ) {
					display_records.Add( this.coin_records );
				}

				if ( display_records.len > 12 ) {
					vertical = Num13.MinInt( ( display_records.len - 12 ) * 16 + 400, 840 );
				}
				this.categories["default"] = new ByTable();
				category_names = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.product_records, typeof(Data_VendingProduct) )) {
					R = _a;
					

					if ( Lang13.Bool( R.subcategory ) ) {
						
						if ( !category_names.Contains( R.subcategory ) ) {
							category_names.Add( R.subcategory );
							this.categories[R.subcategory] = new ByTable();
						}
						this.categories[R.subcategory] += R;
					} else {
						this.categories["default"] += R;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( this.categories["default"], typeof(Data_VendingProduct) )) {
					R2 = _b;
					
					dat2 += this.GetProductLine( R2 );
				}
				dat2 += "<br>";

				foreach (dynamic _d in Lang13.Enumerate( category_names )) {
					cat_name = _d;
					
					dat2 += "<B>&nbsp;&nbsp;" + cat_name + "</B>:<br>";

					foreach (dynamic _c in Lang13.Enumerate( this.categories[cat_name], typeof(Data_VendingProduct) )) {
						R3 = _c;
						
						dat2 += this.GetProductLine( R3 );
					}
					dat2 += "<br>";
				}

				if ( this.extended_inventory ) {
					dat2 += "<B>&nbsp;&nbsp;contraband</B>:<br>";

					foreach (dynamic _e in Lang13.Enumerate( this.hidden_records, typeof(Data_VendingProduct) )) {
						R4 = _e;
						
						dat2 += this.GetProductLine( R4 );
					}
					dat2 += "<br>";
				}

				if ( Lang13.Bool( this.coin ) ) {
					dat2 += "<B>&nbsp;&nbsp;premium</B>:<br>";

					foreach (dynamic _f in Lang13.Enumerate( this.coin_records, typeof(Data_VendingProduct) )) {
						R5 = _f;
						
						dat2 += this.GetProductLine( R5 );
					}
					dat2 += "<br>";
				}
				dat2 += "</TT>";
			}

			if ( this.panel_open ) {
				dat2 += this.f_wires();

				if ( this.product_slogans != "" ) {
					dat2 += new Txt( "The speaker switch is " ).item( ( this.shut_up ? "off" : "on" ) ).str( ". <a href='?src=" ).Ref( this ).str( ";togglevoice=" ).item( 1 ).str( "'>Toggle</a>" ).ToString();
				}
			}
			Interface13.Browse( a, dat2, "window=vending;size=400x" + vertical );
			GlobalFuncs.onclose( a, "vending" );
			return null;
		}

		// Function from file: vending.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: vending.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: vending.dm
		public override bool scan_card( dynamic user = null, dynamic C = null, dynamic appdatum = null ) {
			dynamic C2 = null;
			dynamic D = null;
			string using_account = null;
			double? transaction_amount = null;
			Transaction T = null;

			
			if ( !( this.currently_vending != null ) ) {
				return false;
			}

			if ( user is Obj_Item_Weapon_Card_Id ) {
				C2 = user;
				this.visible_message( "<span class='info'>" + Task13.User + " swipes a card through " + this + ".</span>" );

				if ( this.linked_account != null ) {
					D = C2.virtual_wallet;
					using_account = "Virtual Wallet";

					if ( !Lang13.Bool( D ) ) {
						((Obj_Item_Weapon_Card_Id)C2).update_virtual_wallet();
						D = C2.virtual_wallet;
					}
					transaction_amount = Lang13.DoubleNullable( this.currently_vending.price );

					if ( ( D.money ??0) < ( transaction_amount ??0) ) {
						D = this.linked_db.attempt_account_access( C2.associated_account_number, 0, 2, false );
						using_account = "Bank Account";

						if ( !Lang13.Bool( D ) ) {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your virtual wallet!</span>" ).ToString() );
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Unable to access your bank account.</span>" ).ToString() );
							return false;
						} else if ( ( D.security_level ??0) > 0 ) {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your virtual wallet!</span>" ).ToString() );
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Lower your bank account's security settings if you wish to pay directly from it.</span>" ).ToString() );
							return false;
						} else if ( ( D.money ??0) < ( transaction_amount ??0) ) {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your bank account!</span>" ).ToString() );
							return false;
						}
					}
					D.money -= transaction_amount ??0;
					this.linked_account.money += transaction_amount ??0;
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='notice'>Remaining balance (" ).item( using_account ).str( "): " ).item( D.money ).str( "$</span>" ).ToString() );
					T = new Transaction();
					T.target_name = "" + this.linked_account.owner_name + " (via " + this.name + ")";
					T.purpose = "Purchase of " + this.currently_vending.product_name;
					T.amount = "-" + transaction_amount;
					T.source_terminal = this.machine_id;
					T.date = GlobalVars.current_date_string;
					T.time = GlobalFuncs.worldtime2text();
					D.transaction_log.Add( T );
					T = new Transaction();
					T.target_name = D.owner_name;
					T.purpose = "Purchase of " + this.currently_vending.product_name;
					T.amount = "" + transaction_amount;
					T.source_terminal = this.machine_id;
					T.date = GlobalVars.current_date_string;
					T.time = GlobalFuncs.worldtime2text();
					this.linked_account.transaction_log.Add( T );
					this.vend( this.currently_vending, Task13.User );
					this.currently_vending = null;
				} else {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>EFTPOS is not connected to an account.</span>" ).ToString() );
				}
			}
			return false;
		}

		// Function from file: vending.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic G = null;
			dynamic C = null;
			dynamic bag = null;
			int objects_loaded = 0;
			Obj G2 = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				
				if ( a is Obj_Item_Stack_Sheet_Glass_Rglass ) {
					G = a;
					GlobalFuncs.to_chat( b, "<span class='notice'>You replace the broken glass.</span>" );
					G.use( 1 );
					this.stat &= 65534;
					this.health = 100;
					this.update_vicon();
					GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>" + this + " is broken! Fix it first.</span>" );
					return _default;
				}
			}
			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( !this.cardboard && a is Obj_Item_Stack_Sheet_Cardboard ) {
				C = a;

				if ( Convert.ToDouble( C.amount ) >= 4 ) {
					C.use( 4 );
					GlobalFuncs.to_chat( b, "<span class='notice'>You slot some cardboard into the machine into " + this + ".</span>" );
					this.cardboard = true;
					this.updateUsrDialog();
				}
			}

			if ( a is Obj_Item_Device_Multitool || a is Obj_Item_Weapon_Wirecutters ) {
				
				if ( this.panel_open ) {
					this.attack_hand( b );
				}
				return _default;
			} else if ( this.premium.len > 0 && GlobalFuncs.is_type_in_list( a, new ByTable(new object [] { typeof(Obj_Item_Weapon_Coin), typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Chococoin) }) ) ) {
				
				if ( this.coin == null ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.coin = a;
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert a coin into " + this + ".</span>" );
						this.updateUsrDialog();
					}
				} else {
					GlobalFuncs.to_chat( b, "<SPAN CLASS='notice'>There's already a coin in " + this + ".</SPAN>" );
				}
				return _default;
			} else if ( a is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Customizable_Candy_Coin ) {
				GlobalFuncs.to_chat( b, "<span class='rose'>That coin is smudgy and oddly soft, you don't think that would work.</span>" );
				return _default;
			} else if ( a is Obj_Item_Voucher ) {
				
				if ( this.can_accept_voucher( a, b ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ".</span>" );
						return this.voucher_act( a, b );
						this.updateUsrDialog();
					}
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " refuses to take " ).item( a ).str( ".</span>" ).ToString() );
					return 1;
				}
			} else if ( a is Obj_Item_Weapon_Storage_Bag ) {
				bag = a;
				objects_loaded = 0;

				foreach (dynamic _a in Lang13.Enumerate( bag.contents, typeof(Obj) )) {
					G2 = _a;
					

					if ( GlobalFuncs.is_type_in_list( G2, this.allowed_inputs ) ) {
						((Obj_Item_Weapon_Storage)bag).remove_from_storage( G2, this );
						this.add_item( G2 );
						objects_loaded++;
					}
				}

				if ( objects_loaded != 0 ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " loads " ).the( this ).item().str( " with " ).the( bag ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You load " ).the( this ).item().str( " with " ).the( bag ).item().str( ".</span>" ).ToString() );

					if ( bag.contents.len > 0 ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>Some items are refused.</span>" );
					}
					this.updateUsrDialog();
				}
			} else if ( GlobalFuncs.is_type_in_list( a, this.allowed_inputs ) ) {
				
				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.add_item( a );
					this.updateUsrDialog();
				}
			}
			return _default;
		}

		// Function from file: vending.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.emagged = 1;
				GlobalFuncs.to_chat( user, new Txt( "You short out the product lock on " ).the( this ).item().ToString() );
				return 1;
			}
			return -1;
		}

		// Function from file: vending.dm
		public bool throw_item(  ) {
			dynamic target = null;
			dynamic throw_item = null;
			ByTable throwable = null;
			int tries = 0;
			dynamic R = null;
			dynamic dump_path = null;

			target = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInView( this, 7 ) );

			if ( !Lang13.Bool( target ) ) {
				return false;
			}
			throwable = this.product_records.Copy();
			tries = 10;

			if ( this.extended_inventory ) {
				throwable.Add( this.hidden_records );
			}

			while (tries != 0) {
				R = Rand13.PickFromTable( throwable );
				dump_path = R.product_path;

				if ( Convert.ToDouble( R.amount ) <= 0 || !Lang13.Bool( dump_path ) ) {
					tries--;
					continue;
				}
				R.amount--;
				throw_item = Lang13.Call( dump_path, this.loc );

				if ( !Lang13.Bool( throw_item ) ) {
					return false;
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					((Ent_Dynamic)throw_item).throw_at( target, 16, 3 );
					return;
				}));
				this.visible_message( "<span class='danger'>" + this + " launches " + throw_item.name + " at " + target.name + "!</span>" );
				return true;
			}
			return false;
		}

		// Function from file: vending.dm
		public void malfunction(  ) {
			int lost_inventory = 0;

			lost_inventory = Rand13.Int( 1, 12 );

			while (lost_inventory > 0) {
				this.throw_item();
				lost_inventory--;
			}
			this.stat |= 1;
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-broken";
			return;
		}

		// Function from file: vending.dm
		public void speak( dynamic message = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				return;
			}

			if ( !Lang13.Bool( message ) ) {
				return;
			}
			this.say( message );
			return;
		}

		// Function from file: vending.dm
		public void vend( Data_VendingProduct R = null, dynamic user = null, bool? by_voucher = null ) {
			by_voucher = by_voucher ?? false;

			bool return_coin = false;
			dynamic real_coin = null;

			
			if ( !this.allowed( user ) && !( this.emagged != 0 ) && this.wires.IsIndexCut( GlobalVars.VENDING_WIRE_IDSCAN ) != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Access denied.</span>" );
				Icon13.Flick( this.icon_deny, this );
				return;
			}
			this.vend_ready = false;

			if ( !( by_voucher == true ) && this.coin_records.Contains( R ) ) {
				
				if ( this.coin == null ) {
					GlobalFuncs.to_chat( user, "<SPAN CLASS='notice'>You need to insert a coin to get this item.</SPAN>" );
					return;
				}
				return_coin = false;

				if ( this.coin is Obj_Item_Weapon_Coin ) {
					real_coin = this.coin;

					if ( real_coin.string_attached == true ) {
						
						if ( Rand13.PercentChance( 50 ) ) {
							GlobalFuncs.to_chat( user, "<SPAN CLASS='notice'>You successfully pulled the coin out before the " + this + " could swallow it.</SPAN>" );
							return_coin = true;
						} else {
							GlobalFuncs.to_chat( user, "<SPAN CLASS='notice'>You weren't able to pull the coin out fast enough, the machine ate it, string and all.</SPAN>" );
						}
					}
				}

				if ( return_coin ) {
					((Mob)user).put_in_hands( this.coin );
				} else if ( !( this.coinbox == null ) ) {
					
					if ( this.coinbox.can_be_inserted( this.coin, GlobalVars.TRUE ) ) {
						this.coinbox.handle_item_insertion( this.coin, GlobalVars.TRUE );
					}
				}
				this.coin = null;
			}
			R.amount--;

			if ( this.last_reply + this.vend_delay + 200 <= Game13.time && Lang13.Bool( this.vend_reply ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.speak( this.vend_reply );
					this.last_reply = Game13.time;
					return;
				}));
			}
			this.f_use_power( 5 );

			if ( Lang13.Bool( this.icon_vend ) ) {
				Icon13.Flick( this.icon_vend, this );
			}
			Task13.Schedule( this.vend_delay, (Task13.Closure)(() => {
				Lang13.Call( R.product_path, GlobalFuncs.get_turf( this ) );
				this.vend_ready = true;
				return;
				return;
			}));
			this.updateUsrDialog();
			return;
		}

		// Function from file: vending.dm
		public void add_item( dynamic I = null ) {
			bool? found = null;
			Data_VendingProduct D = null;
			Data_VendingProduct R = null;

			found = GlobalVars.FALSE;

			foreach (dynamic _a in Lang13.Enumerate( this.product_records, typeof(Data_VendingProduct) )) {
				D = _a;
				

				if ( D.product_path == I.type ) {
					D.amount++;
					found = GlobalVars.TRUE;
					break;
				}
			}

			if ( !( found == true ) ) {
				R = new Data_VendingProduct();
				R.product_path = I.type;
				R.amount = 1;
				R.original_amount = false;
				R.price = false;
				R.display_color = Rand13.Pick(new object [] { "red", "blue", "green" });
				R.product_name = I.name;
				R.category = 1;
				R.subcategory = I.vending_cat;
				this.product_records.Add( R );
			}
			GlobalFuncs.qdel( I );
			return;
		}

		// Function from file: vending.dm
		[VerbInfo( name: "wires" )]
		public string f_wires(  ) {
			return this.wires.GetInteractWindow();
		}

		// Function from file: vending.dm
		public void update_vicon(  ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-broken";
				return;
			} else if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-off";
			} else {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" );
			}
			return;
		}

		// Function from file: vending.dm
		public void TurnOff( int ticks = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}
			this.stat |= 2;
			this.update_vicon();
			this.visible_message( "<span class='warning'>" + this + " goes off!</span>" );
			Task13.Schedule( ticks, (Task13.Closure)(() => {
				
				if ( ( this.stat & 2 ) != 0 ) {
					this.stat &= 65533;
					this.update_vicon();
				}
				return;
			}));
			return;
		}

		// Function from file: vending.dm
		public dynamic GetProductByID( double? pid = null, double? category = null ) {
			
			switch ((int?)( category )) {
				case 1:
					return this.product_records[pid];
					break;
				case 2:
					return this.hidden_records[pid];
					break;
				case 3:
					return this.coin_records[pid];
					break;
				default:
					Game13.log.WriteMsg( "## WARNING: " + ( "UNKNOWN PRODUCT: PID: " + pid + ", CAT: " + category + " INSIDE " + this.type + "!" ) );
					return null;
					break;
			}
			return null;
		}

		// Function from file: vending.dm
		public int GetProductIndex( Data_VendingProduct P = null ) {
			ByTable plist = null;

			
			switch ((int)( P.category )) {
				case 1:
					plist = this.product_records;
					break;
				case 2:
					plist = this.hidden_records;
					break;
				case 3:
					plist = this.coin_records;
					break;
				default:
					Game13.log.WriteMsg( "## WARNING: " + ( "UNKNOWN CATEGORY " + P.category + " IN TYPE " + P.product_path + " INSIDE " + this.type + "!" ) );
					break;
			}
			return plist.Find( P );
		}

		// Function from file: vending.dm
		public string GetProductLine( Data_VendingProduct P = null ) {
			string dat = null;
			int idx = 0;

			dat = "<FONT color = '" + P.display_color + "'><B>" + P.product_name + "</B>:\n		<b>" + P.amount + "</b> </font>";

			if ( P.price == true ) {
				dat += " <b>($" + P.price + ")</b>";
			}

			if ( ( P.amount ??0) > 0 ) {
				idx = this.GetProductIndex( P );
				dat += new Txt( " <a href='byond://?src=" ).Ref( this ).str( ";vend=" ).item( idx ).str( ";cat=" ).item( P.category ).str( "'>(Vend)</A>" ).ToString();
			} else {
				dat += " <span class='warning'>SOLD OUT</span>";
			}
			dat += "<br>";
			return dat;
		}

		// Function from file: vending.dm
		public bool voucher_act( dynamic voucher = null, dynamic user = null ) {
			dynamic free_vouch = null;
			int? i = null;
			dynamic to_vend = null;
			Data_VendingProduct product = null;

			
			if ( voucher is Obj_Item_Voucher_FreeItem ) {
				free_vouch = voucher;
				i = null;
				i = 1;

				while (( i ??0) <= ( free_vouch.vend_amount ??0)) {
					
					if ( !( free_vouch.freebies != null ) || !( free_vouch.freebies.len != 0 ) ) {
						break;
					}
					to_vend = Rand13.PickFromTable( free_vouch.freebies );

					if ( free_vouch.single_items ) {
						free_vouch.freebies.Remove( to_vend );
					}
					product = this.get_item_by_type( to_vend );

					if ( product != null && Lang13.Bool( product.amount ) ) {
						this.vend( product, user, true );
					}
					i++;
				}
			}

			if ( voucher.shred_on_use ) {
				GlobalFuncs.qdel( voucher );
			} else {
				
				if ( !( this.vouchers != null ) ) {
					this.vouchers = new ByTable();
				}
				this.vouchers.Add( voucher );

				if ( this.coinbox != null ) {
					((Ent_Dynamic)voucher).forceMove( this.coinbox );
				}
			}
			return true;
		}

		// Function from file: vending.dm
		public bool can_accept_voucher( dynamic voucher = null, dynamic user = null ) {
			dynamic free_vouch = null;
			dynamic vend_item = null;
			Data_VendingProduct product = null;

			
			if ( voucher is Obj_Item_Voucher_FreeItem ) {
				free_vouch = voucher;

				foreach (dynamic _a in Lang13.Enumerate( free_vouch.freebies )) {
					vend_item = _a;
					
					product = this.get_item_by_type( vend_item );

					if ( product != null && Lang13.Bool( product.amount ) ) {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: vending.dm
		public Data_VendingProduct get_item_by_type( dynamic this_type = null ) {
			ByTable datum_products = null;
			Data_VendingProduct product = null;

			datum_products = new ByTable();
			datum_products.Or( this.hidden_records );
			datum_products.Or( this.coin_records );
			datum_products.Or( this.product_records );

			foreach (dynamic _a in Lang13.Enumerate( datum_products, typeof(Data_VendingProduct) )) {
				product = _a;
				

				if ( product.product_path == this_type ) {
					return product;
				}
			}
			return null;
		}

		// Function from file: vending.dm
		public void build_inventory( ByTable productlist = null, bool? hidden = null, bool? req_coin = null ) {
			hidden = hidden ?? false;
			req_coin = req_coin ?? false;

			dynamic temp = null;
			dynamic typepath = null;
			bool? amount = null;
			dynamic price = null;
			Data_VendingProduct R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( productlist )) {
				typepath = _a;
				
				amount = Lang13.BoolNullable( productlist[typepath] );
				price = this.prices[typepath];

				if ( amount == null ) {
					amount = true;
				}
				R = new Data_VendingProduct();
				R.product_path = typepath;
				R.amount = Lang13.IntNullable( amount );
				R.original_amount = amount;
				R.price = Lang13.BoolNullable( price );
				R.display_color = Rand13.Pick(new object [] { "red", "blue", "green" });

				if ( hidden == true ) {
					R.category = 2;
					this.hidden_records.Add( R );
				} else if ( req_coin == true ) {
					R.category = 3;
					this.coin_records.Add( R );
				} else {
					R.category = 1;
					this.product_records.Add( R );
				}
				temp = Lang13.Call( typepath, null );
				R.product_name = temp.name;
				R.subcategory = temp.vending_cat;
			}
			return;
		}

		// Function from file: vending.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			switch ((int)( severity )) {
				case 1:
					this.malfunction();
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.malfunction();
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.malfunction();
					}
					break;
			}
			return null;
		}

		// Function from file: vending.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.malfunction();
			} else {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: vending.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.malfunction();
					}
					break;
			}
			return false;
		}

		// Function from file: vending.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			Ent_Static P = null;
			Ent_Static user_loc = null;
			Ent_Static pack_loc = null;
			Ent_Static self_loc = null;
			dynamic newmachine = null;
			Obj_Item_Emptyvendomatpack emptypack = null;
			Ent_Static user_loc2 = null;
			Ent_Static pack_loc2 = null;
			Ent_Static self_loc2 = null;
			Data_VendingProduct D = null;
			Data_VendingProduct D2 = null;
			Obj_Item_Emptyvendomatpack emptypack2 = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( O is Obj_Structure_Vendomatpack ) {
				P = O;

				if ( !Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You need to anchor the vending machine before you can refill it.</span>" );
					return false;
				}

				if ( !( this.pack != null ) ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>You start filling the vending machine with the recharge pack's materials.</span>" );
					user_loc = user.loc;
					pack_loc = P.loc;
					self_loc = this.loc;
					Task13.Sleep( 30 );

					if ( !Lang13.Bool( user ) || !( P != null ) || !( this != null ) ) {
						return false;
					}

					if ( user.loc == user_loc && P.loc == pack_loc && Lang13.Bool( this.anchored ) && self_loc == this.loc && !Lang13.Bool( user.stat ) && !Lang13.Bool( user.stunned ) && !( user.weakened != 0 ) && !( user.paralysis != 0 ) && !( user.lying == true ) ) {
						newmachine = Lang13.Call( ((dynamic)P).targetvendomat, this.loc );
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).icon( newmachine ).str( " You finish filling the vending machine, and use the stickers inside the pack to decorate the frame.</span>" ).ToString() );
						GlobalFuncs.playsound( newmachine, "sound/machines/hiss.ogg", 50, 0, 0 );
						newmachine.pack = P.type;
						emptypack = new Obj_Item_Emptyvendomatpack( P.loc );
						emptypack.icon_state = P.icon_state;
						emptypack.overlays.Add( new Image( "icons/obj/vending_pack.dmi", "emptypack" ) );

						if ( ((dynamic)P).stock.len != 0 ) {
							newmachine.products = ((dynamic)P).stock;
							newmachine.contraband = ((dynamic)P).secretstock;
							newmachine.premium = ((dynamic)P).preciousstock;
							newmachine.product_records = ((dynamic)P).product_records;
							newmachine.hidden_records = ((dynamic)P).hidden_records;
							newmachine.coin_records = ((dynamic)P).coin_records;
						}
						GlobalFuncs.qdel( P );

						if ( user.machine == this ) {
							((Ent_Static)newmachine).attack_hand( user );
						}
						this.component_parts = 0;
						GlobalFuncs.qdel( this.coinbox );
						GlobalFuncs.qdel( this );
					}
				} else if ( Lang13.Bool( ((dynamic)this.pack).IsInstanceOfType( P ) ) ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>You start refilling the vending machine with the recharge pack's materials.</span>" );
					user_loc2 = user.loc;
					pack_loc2 = P.loc;
					self_loc2 = this.loc;
					Task13.Sleep( 30 );

					if ( !Lang13.Bool( user ) || !( P != null ) || !( this != null ) ) {
						return false;
					}

					if ( user.loc == user_loc2 && P.loc == pack_loc2 && Lang13.Bool( this.anchored ) && self_loc2 == this.loc && !Lang13.Bool( user.stat ) && !Lang13.Bool( user.stunned ) && !( user.weakened != 0 ) && !( user.paralysis != 0 ) && !( user.lying == true ) ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).icon( this ).str( " You finish refilling the vending machine.</span>" ).ToString() );
						GlobalFuncs.playsound( this, "sound/machines/hiss.ogg", 50, 0, 0 );

						foreach (dynamic _a in Lang13.Enumerate( this.product_records, typeof(Data_VendingProduct) )) {
							D = _a;
							
							D.amount = Lang13.IntNullable( D.original_amount );
						}

						foreach (dynamic _b in Lang13.Enumerate( this.hidden_records, typeof(Data_VendingProduct) )) {
							D2 = _b;
							
							D2.amount = Lang13.IntNullable( D2.original_amount );
						}
						emptypack2 = new Obj_Item_Emptyvendomatpack( P.loc );
						emptypack2.icon_state = P.icon_state;
						emptypack2.overlays.Add( new Image( "icons/obj/vending_pack.dmi", "emptypack" ) );
						GlobalFuncs.qdel( P );

						if ( user.machine == this ) {
							this.attack_hand( user );
						}
					}
				} else {
					GlobalFuncs.to_chat( user, "<span class='warning'>This recharge pack isn't meant for this kind of vending machines.</span>" );
				}
			}
			return false;
		}

		// Function from file: vending.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 16 ) != 0 ) {
				return true;
			}
			return base.CanPass( (object)(mover), (object)(target), height, air_group );
		}

		// Function from file: vending.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Structure_Vendomatpack_Partial newpack = null;

			
			if ( this.wires != null ) {
				GlobalFuncs.qdel( this.wires );
				this.wires = null;
			}

			if ( this.product_records.len != 0 && this.cardboard ) {
				newpack = new Obj_Structure_Vendomatpack_Partial( this.loc );
				newpack.stock = this.products;
				newpack.secretstock = this.contraband;
				newpack.preciousstock = this.premium;
				newpack.targetvendomat = this.type;
				newpack.product_records = this.product_records;
				newpack.hidden_records = this.hidden_records;
				newpack.coin_records = this.coin_records;
			}

			if ( this.coinbox != null ) {
				this.coinbox.forceMove( GlobalFuncs.get_turf( this ) );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: vending.dm
		public override dynamic RefreshParts(  ) {
			int manipcount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			manipcount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_Manipulator ) {
					manipcount += SP.rating;
				}
			}
			this.shoot_chance = manipcount * 3;
			return null;
		}

		// Function from file: vending.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );
			this.product_records = new ByTable();
			this.build_inventory( this.products );
			this.build_inventory( this.contraband, true );
			this.build_inventory( this.premium, false, true );
			return false;
		}

		// Function from file: vending.dm
		public override dynamic cultify(  ) {
			new Obj_Structure_Cult_Forge( this.loc );
			base.cultify();
			return null;
		}

	}

}