// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Safe : Obj_Structure {

		public bool open = false;
		public int tumbler_1_pos = 0;
		public int tumbler_1_open = 0;
		public int tumbler_2_pos = 0;
		public int tumbler_2_open = 0;
		public int dial = 0;
		public double space = 0;
		public double maxspace = 24;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon_state = "safe";
		}

		// Function from file: safe.dm
		public Obj_Structure_Safe ( dynamic loc = null ) : base( (object)(loc) ) {
			this.tumbler_1_pos = Rand13.Int( 0, 72 );
			this.tumbler_1_open = Rand13.Int( 0, 72 );
			this.tumbler_2_pos = Rand13.Int( 0, 72 );
			this.tumbler_2_open = Rand13.Int( 0, 72 );
			return;
		}

		// Function from file: safe.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: safe.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: safe.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.open ) {
				
				if ( Convert.ToDouble( a.w_class + this.space ) <= this.maxspace ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.space += Convert.ToDouble( a.w_class );
						GlobalFuncs.to_chat( b, "<span class='notice'>You put " + a + " in " + this + ".</span>" );
						this.updateUsrDialog();
					}
					return null;
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>" + a + " won't fit in " + this + ".</span>" );
					return null;
				}
			} else if ( a is Obj_Item_Clothing_Accessory_Stethoscope ) {
				GlobalFuncs.to_chat( b, "Hold " + a + " in one of your hands while you manipulate the dial." );
				return null;
			}
			return null;
		}

		// Function from file: safe.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob user = null;
			bool? canhear = null;
			dynamic P = null;

			
			if ( !( Task13.User is Mob_Living_Carbon_Human ) ) {
				return null;
			}
			user = Task13.User;
			canhear = false;

			if ( user.l_hand is Obj_Item_Clothing_Accessory_Stethoscope || user.r_hand is Obj_Item_Clothing_Accessory_Stethoscope ) {
				canhear = true;
			}

			if ( Lang13.Bool( href_list["open"] ) ) {
				
				if ( this.check_unlocked() ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>You " + ( this.open ? "close" : "open" ) + " " + this + ".</span>" );
					this.open = !this.open;
					this.update_icon();
					this.updateUsrDialog();
					return null;
				} else {
					GlobalFuncs.to_chat( user, "<span class='notice'>You can't " + ( this.open ? "close" : "open" ) + " " + this + ", the lock is engaged!</span>" );
					return null;
				}
			}

			if ( Lang13.Bool( href_list["decrement"] ) ) {
				this.dial = this.decrement( this.dial );

				if ( this.dial == this.tumbler_1_pos + 1 || this.dial == this.tumbler_1_pos - 71 ) {
					this.tumbler_1_pos = this.decrement( this.tumbler_1_pos );

					if ( canhear == true ) {
						GlobalFuncs.to_chat( user, "<span class='notice'>You hear a " + Rand13.Pick(new object [] { "clack", "scrape", "clank" }) + " from " + this + ".</span>" );
					}

					if ( this.tumbler_1_pos == this.tumbler_2_pos + 37 || this.tumbler_1_pos == this.tumbler_2_pos - 35 ) {
						this.tumbler_2_pos = this.decrement( this.tumbler_2_pos );

						if ( canhear == true ) {
							GlobalFuncs.to_chat( user, "<span class='notice'>You hear a " + Rand13.Pick(new object [] { "click", "chink", "clink" }) + " from " + this + ".</span>" );
						}
					}
					this.check_unlocked( user, canhear );
				}
				this.updateUsrDialog();
				return null;
			}

			if ( Lang13.Bool( href_list["increment"] ) ) {
				this.dial = this.increment( this.dial );

				if ( this.dial == this.tumbler_1_pos - 1 || this.dial == this.tumbler_1_pos + 71 ) {
					this.tumbler_1_pos = this.increment( this.tumbler_1_pos );

					if ( canhear == true ) {
						GlobalFuncs.to_chat( user, "<span class='notice'>You hear a " + Rand13.Pick(new object [] { "clack", "scrape", "clank" }) + " from " + this + ".</span>" );
					}

					if ( this.tumbler_1_pos == this.tumbler_2_pos - 37 || this.tumbler_1_pos == this.tumbler_2_pos + 35 ) {
						this.tumbler_2_pos = this.increment( this.tumbler_2_pos );

						if ( canhear == true ) {
							GlobalFuncs.to_chat( user, "<span class='notice'>You hear a " + Rand13.Pick(new object [] { "click", "chink", "clink" }) + " from " + this + ".</span>" );
						}
					}
					this.check_unlocked( user, canhear );
				}
				this.updateUsrDialog();
				return null;
			}

			if ( Lang13.Bool( href_list["retrieve"] ) ) {
				Interface13.Browse( user, "", "window=safe" );
				P = Lang13.FindIn( href_list["retrieve"], this );

				if ( this.open ) {
					
					if ( Lang13.Bool( P ) && GlobalFuncs.in_range( this, user ) ) {
						user.put_in_hands( P );
						this.updateUsrDialog();
					}
				}
			}
			return null;
		}

		// Function from file: safe.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			int? i = null;
			dynamic P = null;

			((Mob)a).set_machine( this );
			dat = new Txt( "<center>\n<a href='?src=" ).Ref( this ).str( ";open=1'>" ).item( ( this.open ? "Close" : "Open" ) ).str( " " ).item( this ).str( "</a> | <a href='?src=" ).Ref( this ).str( ";decrement=1'>-</a> " ).item( this.dial * 5 ).str( " <a href='?src=" ).Ref( this ).str( ";increment=1'>+</a>" ).ToString();

			if ( this.open ) {
				dat += "<table>";
				i = null;
				i = this.contents.len;

				while (( i ??0) >= 1) {
					P = this.contents[i];
					dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";retrieve=" ).Ref( P ).str( "'>" ).item( P.name ).str( "</a></td></tr>" ).ToString();
					i--;
				}
				dat += "</table></center>";
			}
			Interface13.Browse( a, "<html><head><title>" + this.name + "</title></head><body>" + dat + "</body></html>", "window=safe;size=350x300" );
			GlobalFuncs.onclose( a, "safe" );
			return null;
		}

		// Function from file: safe.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.open ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-open";
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			return null;
		}

		// Function from file: safe.dm
		public int increment( int num = 0 ) {
			num += 1;

			if ( num > 71 ) {
				num = 0;
			}
			return num;
		}

		// Function from file: safe.dm
		public int decrement( int num = 0 ) {
			num -= 1;

			if ( num < 0 ) {
				num = 71;
			}
			return num;
		}

		// Function from file: safe.dm
		public bool check_unlocked( Mob user = null, bool? canhear = null ) {
			
			if ( user != null && canhear == true ) {
				
				if ( this.tumbler_1_pos == this.tumbler_1_open ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>You hear a " + Rand13.Pick(new object [] { "tonk", "krunk", "plunk" }) + " from " + this + ".</span>" );
				}

				if ( this.tumbler_2_pos == this.tumbler_2_open ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>You hear a " + Rand13.Pick(new object [] { "tink", "krink", "plink" }) + " from " + this + ".</span>" );
				}
			}

			if ( this.tumbler_1_pos == this.tumbler_1_open && this.tumbler_2_pos == this.tumbler_2_open ) {
				
				if ( user != null ) {
					this.visible_message( "<b>" + Rand13.Pick(new object [] { "Spring", "Sprang", "Sproing", "Clunk", "Krunk" }) + "!</b>" );
				}
				return true;
			}
			return false;
		}

		// Function from file: safe.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			Obj_Item I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Item) )) {
				I = _a;
				

				if ( this.space >= this.maxspace ) {
					return false;
				}

				if ( Convert.ToDouble( I.w_class + this.space ) <= this.maxspace ) {
					this.space += Convert.ToDouble( I.w_class );
					I.loc = this;
				}
			}
			return false;
		}

	}

}