// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ChemDispenser : Obj_Machinery {

		public int energy = 0;
		public dynamic max_energy = 50;
		public dynamic rechargerate = 2;
		public double amount = 30;
		public dynamic beaker = null;
		public int recharged = 0;
		public bool custom = false;
		public double useramount = 30;
		public dynamic dispensable_reagents = new ByTable(new object [] { 
											"hydrogen", 
											"lithium", 
											"carbon", 
											"nitrogen", 
											"oxygen", 
											"fluorine", 
											"sodium", 
											"aluminum", 
											"silicon", 
											"phosphorus", 
											"sulfur", 
											"chlorine", 
											"potassium", 
											"iron", 
											"copper", 
											"mercury", 
											"radium", 
											"water", 
											"ethanol", 
											"sugar", 
											"sacid", 
											"tungsten"
										 });
		public string targetMoveKey = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 40;
			this.machine_flags = 30;
			this.icon = "icons/obj/chemical.dmi";
			this.icon_state = "dispenser";
		}

		// Function from file: Chemistry-Machinery.dm
		public Obj_Machinery_ChemDispenser ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_ChemDispenser(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			this.dispensable_reagents = GlobalFuncs.sortList( this.dispensable_reagents );
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			this.ui_interact( a );
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic R = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( b is Mob_Living_Silicon_Robot ) {
				
				if ( !this.can_use( b ) ) {
					return null;
				}
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					GlobalFuncs.to_chat( b, "A beaker is already loaded into the machine." );
					return null;
				} else if ( !this.panel_open ) {
					
					if ( !Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>You can't let go of " ).the( a ).item().str( "!</span>" ).ToString() );
						return null;
					}
					this.beaker = a;

					if ( b.type == typeof(Mob_Living_Silicon_Robot) ) {
						R = b;
						((Mob_Living_Silicon_Robot)R).uneq_active();
					}
					GlobalFuncs.to_chat( b, "You add the beaker to the machine!" );
					GlobalVars.nanomanager.update_uis( this );
					return 1;
				} else {
					GlobalFuncs.to_chat( b, "You can't add a beaker to the machine while the panel is open." );
					return null;
				}
			}
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			
			if ( Lang13.Bool( this.beaker ) ) {
				GlobalFuncs.to_chat( user, "You can't reach the maintenance panel with a beaker in the way!" );
				return 0;
			}
			return base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) );
		}

		// Function from file: Chemistry-Machinery.dm
		public override void AltClick( Mob user = null ) {
			
			if ( !Task13.User.incapacitated() && this.Adjacent( Task13.User ) && Lang13.Bool( this.beaker ) && !( ( this.stat & 3 ) != 0 && Lang13.Bool( Task13.User.dexterity_check() ) ) ) {
				this.detach();
				return;
			}
			base.AltClick( user ); return;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic num = null;
			dynamic B = null;
			Reagents R = null;
			dynamic space = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return 0;
			}

			if ( Lang13.Bool( href_list["amount"] ) ) {
				
				if ( href_list["amount"] == "0" ) {
					num = Interface13.Input( "Enter desired output amount", "Amount", this.useramount, null, null, InputType.Num );

					if ( Lang13.Bool( num ) ) {
						this.amount = Num13.Round( String13.ParseNumber( num ) ??0, 5 );
						this.custom = true;
					}
				} else {
					this.custom = false;
					this.amount = Num13.Round( String13.ParseNumber( href_list["amount"] ) ??0, 5 );
				}
				this.amount = ( this.amount <= 5 ? 5 : ( this.amount >= 100 ? 100 : this.amount ) );

				if ( this.custom ) {
					this.useramount = this.amount;
				}
			}

			if ( Lang13.Bool( href_list["dispense"] ) ) {
				
				if ( Lang13.Bool( this.dispensable_reagents.Find( href_list["dispense"] ) ) && this.beaker != null ) {
					B = this.beaker;
					R = B.reagents;

					if ( !( R != null ) ) {
						
						if ( !Lang13.Bool( B.gcDestroyed ) ) {
							((Ent_Static)B).create_reagents( B.volume );
						} else {
							GlobalFuncs.qdel( B );
							B = null;
							return null;
						}
					}
					space = R.maximum_volume - R.total_volume;
					R.add_reagent( href_list["dispense"], Num13.MinInt( ((int)( this.amount )), this.energy * 10, Convert.ToInt32( space ) ) );
					this.energy = Num13.MaxInt( ((int)( this.energy - Num13.MinInt( ((int)( this.amount )), this.energy * 10, Convert.ToInt32( space ) ) / 10 )), 0 );
				}
			}

			if ( Lang13.Bool( href_list["ejectBeaker"] ) ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					this.detach();
				}
			}
			this.add_fingerprint( Task13.User );
			return 1;
		}

		// Function from file: Chemistry-Machinery.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable beakerContents = null;
			double beakerCurrentVolume = 0;
			Reagent R = null;
			ByTable chemicals = null;
			dynamic re = null;
			dynamic temp = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( Lang13.Bool( user.stat ) && !( user is Mob_Dead_Observer ) || ((Mob)user).restrained() ) {
				return;
			}

			if ( !( GlobalVars.chemical_reagents_list != null ) || !( GlobalVars.chemical_reagents_list.len != 0 ) ) {
				return;
			}
			data = new ByTable( 0 );
			data["amount"] = this.amount;
			data["energy"] = this.energy;
			data["maxEnergy"] = this.max_energy;
			data["isBeakerLoaded"] = ( Lang13.Bool( this.beaker ) ? true : false );
			data["custom"] = this.custom;
			beakerContents = new ByTable( 0 );
			beakerCurrentVolume = 0;

			if ( Lang13.Bool( this.beaker ) && Lang13.Bool( this.beaker.reagents ) && this.beaker.reagents.reagent_list.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.beaker.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					beakerContents.Add( new ByTable(new object [] { new ByTable().Set( "name", R.name ).Set( "volume", R.volume ) }) );
					beakerCurrentVolume += R.volume ??0;
				}
			}
			data["beakerContents"] = beakerContents;

			if ( Lang13.Bool( this.beaker ) ) {
				data["beakerCurrentVolume"] = beakerCurrentVolume;
				data["beakerMaxVolume"] = this.beaker.volume;
			} else {
				data["beakerCurrentVolume"] = null;
				data["beakerMaxVolume"] = null;
			}
			chemicals = null;
			chemicals = new ByTable( 0 );

			foreach (dynamic _b in Lang13.Enumerate( this.dispensable_reagents )) {
				re = _b;
				
				temp = GlobalVars.chemical_reagents_list[re];

				if ( Lang13.Bool( temp ) ) {
					chemicals.Add( new ByTable(new object [] { new ByTable().Set( "title", String13.SubStr( temp.name, 1, 15 ) ).Set( "id", temp.id ).Set( "commands", new ByTable().Set( "dispense", temp.id ) ) }) );
				}
			}
			data["chemicals"] = chemicals;
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "chem_dispenser.tmpl", "" + this.name + " 5000", 390, 630 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: Chemistry-Machinery.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic process(  ) {
			
			if ( this.recharged < 0 ) {
				this.recharge();
				this.recharged = 15;
			} else {
				this.recharged -= 1;
			}
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.stat |= 2;
					return;
				}));
			}
			GlobalVars.nanomanager.update_uis( this );
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public bool detach(  ) {
			dynamic B = null;
			Ent_Static R = null;

			this.targetMoveKey = null;

			if ( Lang13.Bool( this.beaker ) ) {
				B = this.beaker;
				B.loc = this.loc;

				if ( this.beaker is Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Large_Cyborg ) {
					R = this.beaker.holder.loc;

					if ( ((dynamic)R).module_state_1 == this.beaker || ((dynamic)R).module_state_2 == this.beaker || ((dynamic)R).module_state_3 == this.beaker ) {
						this.beaker.loc = R;
					} else {
						this.beaker.loc = this.beaker.holder;
					}
				}
				this.beaker = null;
				return true;
			}
			return false;
		}

		// Function from file: Chemistry-Machinery.dm
		public virtual bool can_use( dynamic R = null ) {
			
			if ( !( R is Mob_Living_Silicon_Robot_Mommi ) && !( R.module is Obj_Item_Weapon_RobotModule_Medical ) ) {
				return false;
			} else {
				
				if ( !( R is Mob_Living_Silicon_Robot_Mommi ) ) {
					this.targetMoveKey = R.on_moved.Add( this, "user_moved" );
				}
				return true;
			}
		}

		// Function from file: Chemistry-Machinery.dm
		public void recharge(  ) {
			int oldenergy = 0;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}
			oldenergy = this.energy;
			this.energy = Num13.MinInt( ((int)( this.energy + Convert.ToDouble( this.rechargerate ) )), Convert.ToInt32( this.max_energy ) );

			if ( this.energy != oldenergy ) {
				this.f_use_power( 3000 );
				GlobalVars.nanomanager.update_uis( this );
			}
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public void user_moved( dynamic args = null ) {
			dynamic E = null;
			dynamic T = null;

			E = args["event"];

			if ( !Lang13.Bool( this.targetMoveKey ) ) {
				E.handlers.Remove( new Txt().Ref( this ).str( ":user_moved" ).ToString() );
				return;
			}
			T = args["loc"];

			if ( !this.Adjacent( T ) ) {
				
				if ( Lang13.Bool( E.holder ) ) {
					E.holder.on_moved.Remove( this.targetMoveKey );
				}
				this.detach();
			}
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts_Manipulator M = null;
			Obj_Item_Weapon_StockParts_MicroLaser Ma = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M = _a;
				
				T += M.rating - 1;
			}
			this.max_energy = Lang13.Initial( this, "max_energy" ) + T * 50 / 4;
			T = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				Ma = _b;
				
				T += Ma.rating - 1;
			}
			this.rechargerate = Lang13.Initial( this, "rechargerate" ) + T / 2;
			return null;
		}

	}

}