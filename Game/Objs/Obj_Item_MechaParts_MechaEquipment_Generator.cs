// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Generator : Obj_Item_MechaParts_MechaEquipment {

		public GlobalIterator_MechaGenerator pr_mech_generator = null;
		public int coeff = 100;
		public Obj_Item_Stack_Sheet_Mineral fuel = null;
		public int max_fuel = 150000;
		public int fuel_per_cycle_idle = 100;
		public int fuel_per_cycle_active = 500;
		public int power_per_cycle = 20;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "plasmatech=2;powerstorage=2;engineering=1";
			this.equip_cooldown = 10;
			this.icon_state = "tesla";
		}

		// Function from file: tools.dm
		public Obj_Item_MechaParts_MechaEquipment_Generator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.init();
			return;
		}

		// Function from file: tools.dm
		public override void critfail(  ) {
			dynamic T = null;
			GasMixture GM = null;

			base.critfail();
			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return;
			}
			GM = new GasMixture();

			if ( Rand13.PercentChance( 10 ) ) {
				GM.toxins += 100;
				GM.temperature = 1773.1500244140625;
				((Ent_Static)T).visible_message( "The " + this + " suddenly disgorges a cloud of heated plasma." );
				this.destroy();
			} else {
				GM.toxins += 5;
				GM.temperature = ( T is Tile_Simulated ? Convert.ToDouble( T.air.temperature ) : 293.41 );
				((Ent_Static)T).visible_message( "The " + this + " suddenly disgorges a cloud of plasma." );
			}
			((Ent_Static)T).assume_air( GM );
			return;
		}

		// Function from file: tools.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			double? result = null;

			result = this.load_fuel( a );

			if ( result == null ) {
				((Ent_Static)b).visible_message( "" + b + " tries to shove " + a + " into " + this + ". What a dumb-ass.", "<font color='red'>" + this.fuel + " traces minimal. " + a + " cannot be used as fuel.</font>" );
			} else if ( !Lang13.Bool( result ) ) {
				GlobalFuncs.to_chat( b, "Unit is full." );
			} else {
				((Ent_Static)b).visible_message( "" + b + " loads " + this + " with " + this.fuel + ".", new Txt().item( result ).str( " unit" ).s().str( " of " ).item( this.fuel ).str( " successfully loaded." ).ToString() );
			}
			return null;
		}

		// Function from file: tools.dm
		public override bool action( dynamic target = null ) {
			double? result = null;
			string message = null;

			
			if ( this.chassis != null ) {
				result = this.load_fuel( target );

				if ( result == null ) {
					message = "<font color='red'>" + this.fuel + " traces in target minimal. " + target + " cannot be used as fuel.</font>";
				} else if ( !Lang13.Bool( result ) ) {
					message = "Unit is full.";
				} else {
					message = new Txt().item( result ).str( " unit" ).s().str( " of " ).item( this.fuel ).str( " successfully loaded." ).ToString();
					GlobalFuncs.send_byjax( this.chassis.occupant, "exosuit.browser", new Txt().Ref( this ).ToString(), this.get_equip_info() );
				}
				this.occupant_message( message );
			}
			return false;
		}

		// Function from file: tools.dm
		public override string get_equip_info(  ) {
			string output = null;

			output = base.get_equip_info();

			if ( Lang13.Bool( output ) ) {
				return new Txt().item( output ).str( " [" ).item( this.fuel ).str( ": " ).item( Num13.Round( ( this.fuel.amount ??0) * this.fuel.perunit, 0.1 ) ).str( " cm<sup>3</sup>] - <a href='?src=" ).Ref( this ).str( ";toggle=1'>" ).item( ( this.pr_mech_generator.active() ? "Dea" : "A" ) ).str( "ctivate</a>" ).ToString();
			}
			return null;
		}

		// Function from file: tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["toggle"] ) ) {
				
				if ( this.pr_mech_generator.toggle() ) {
					this.set_ready_state( false );
					this.log_message( "Activated." );
				} else {
					this.set_ready_state( true );
					this.log_message( "Deactivated." );
				}
			}
			return null;
		}

		// Function from file: tools.dm
		public override void detach( dynamic moveto = null ) {
			this.pr_mech_generator.stop();
			base.detach( (object)(moveto) );
			return;
		}

		// Function from file: tools.dm
		public double? load_fuel( dynamic P = null ) {
			int to_load = 0;
			double? units = null;

			
			if ( P.type == this.fuel.type && Lang13.Bool( P.amount ) ) {
				to_load = Num13.MaxInt( ((int)( this.max_fuel - ( this.fuel.amount ??0) * this.fuel.perunit )), 0 );

				if ( to_load != 0 ) {
					units = Num13.MinInt( Num13.MaxInt( Num13.Floor( to_load / P.perunit ), 1 ), Convert.ToInt32( P.amount ) );

					if ( Lang13.Bool( units ) ) {
						this.fuel.amount += units ??0;
						((Obj_Item_Stack)P).use( units );
						return units;
					}
				} else {
					return 0;
				}
			}
			return null;
		}

		// Function from file: tools.dm
		public virtual void init(  ) {
			this.fuel = new Obj_Item_Stack_Sheet_Mineral_Plasma( this );
			this.fuel.amount = 0;
			this.pr_mech_generator = new GlobalIterator_MechaGenerator( new ByTable(new object [] { this }), false );
			this.pr_mech_generator.set_delay( this.equip_cooldown );
			return;
		}

	}

}