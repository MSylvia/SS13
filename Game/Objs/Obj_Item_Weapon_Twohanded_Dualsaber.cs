// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Twohanded_Dualsaber : Obj_Item_Weapon_Twohanded {

		public bool hacked = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 3;
			this.throwforce = 5;
			this.throw_speed = 3;
			this.throw_range = 5;
			this.w_class = 2;
			this.force_unwielded = 3;
			this.force_wielded = 34;
			this.wieldsound = "sound/weapons/saberon.ogg";
			this.unwieldsound = "sound/weapons/saberoff.ogg";
			this.hitsound = "swing_hit";
			this.armour_penetration = 75;
			this.origin_tech = "magnets=3;syndicate=4";
			this.item_color = "green";
			this.attack_verb = new ByTable(new object [] { "attacked", "slashed", "stabbed", "sliced", "torn", "ripped", "diced", "cut" });
			this.block_chance = 50;
			this.icon_state = "dualsaber0";
		}

		// Function from file: twohanded.dm
		public Obj_Item_Weapon_Twohanded_Dualsaber ( dynamic loc = null ) : base( (object)(loc) ) {
			this.item_color = Rand13.Pick(new object [] { "red", "blue", "green", "purple" });
			return;
		}

		// Function from file: twohanded.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Device_Multitool ) {
				
				if ( !this.hacked ) {
					this.hacked = true;
					user.WriteMsg( "<span class='warning'>2XRNBW_ENGAGE</span>" );
					this.item_color = "rainbow";
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='warning'>It's starting to look like a triple rainbow - no, nevermind.</span>" );
				}
			}
			return null;
		}

		// Function from file: twohanded.dm
		public override bool IsReflect( dynamic def_zone = null ) {
			
			if ( this.wielded ) {
				return true;
			}
			return false;
		}

		// Function from file: twohanded.dm
		public override void unwield( dynamic user = null ) {
			base.unwield( (object)(user) );
			this.hitsound = "swing_hit";
			return;
		}

		// Function from file: twohanded.dm
		public override void wield( dynamic user = null ) {
			
			if ( Lang13.Bool( user.has_dna() ) ) {
				
				if ( ((Dna)user.dna).check_mutation( "Hulk" ) != 0 ) {
					user.WriteMsg( "<span class='warning'>You lack the grace to wield this!</span>" );
					return;
				}
			}
			base.wield( (object)(user) );
			this.hitsound = "sound/weapons/blade1.ogg";
			return;
		}

		// Function from file: twohanded.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			
			if ( this.wielded ) {
				hulk.WriteMsg( "<span class='warning'>You can't pick up such dangerous item with your meaty hands without losing fingers, better not to!</span>" );
				return true;
			}
			return false;
		}

		// Function from file: twohanded.dm
		public override bool hit_reaction( Mob_Living_Carbon owner = null, string attack_text = null, int? final_block_chance = null, dynamic damage = null, int? attack_type = null ) {
			
			if ( this.wielded ) {
				return base.hit_reaction( owner, attack_text, final_block_chance, (object)(damage), attack_type );
			}
			return false;
		}

		// Function from file: twohanded.dm
		public void impale( dynamic user = null ) {
			user.WriteMsg( new Txt( "<span class='warning'>You twirl around a bit before losing your balance and impaling yourself on " ).the( this ).item().str( ".</span>" ).ToString() );

			if ( this.force_wielded != 0 ) {
				((Mob_Living)user).take_organ_damage( 20, 25 );
			} else {
				((Mob_Living)user).adjustStaminaLoss( 25 );
			}
			return;
		}

		// Function from file: twohanded.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic i = null;

			base.attack( (object)(M), (object)(user), def_zone );

			if ( Lang13.Bool( user.disabilities & 256 ) && this.wielded && Rand13.PercentChance( 40 ) ) {
				this.impale( user );
				return false;
			}

			if ( this.wielded && Rand13.PercentChance( 50 ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { 1, 2, 4, 8, 4, 2, 1, 2, 4, 8, 4, 2 }) )) {
						i = _a;
						
						user.dir = i;

						if ( i == 8 ) {
							((Mob)user).emote( "flip" );
						}
						Task13.Sleep( 1 );
					}
					return;
				}));
			}
			return false;
		}

		// Function from file: twohanded.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.wielded ) {
				this.icon_state = "dualsaber" + this.item_color + this.wielded;
			} else {
				this.icon_state = "dualsaber0";
			}
			this.clean_blood();
			return false;
		}

	}

}