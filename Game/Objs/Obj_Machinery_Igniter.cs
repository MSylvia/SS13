// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Igniter : Obj_Machinery {

		public dynamic id_tag = null;
		public bool on = true;
		public Obj_Item_Device_AssemblyHolder assembly = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 2;
			this.active_power_usage = 4;
			this.ghost_read = false;
			this.icon_state = "igniter1";
		}

		// Function from file: igniter.dm
		public Obj_Machinery_Igniter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon_state = "igniter" + this.on;
			GlobalVars.igniters.Add( this );
			return;
		}

		// Function from file: igniter.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool && this.assembly != null ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You begin to cut " ).the( this ).item().str( " off the floor...</span>" ).ToString() );

					if ( GlobalFuncs.do_after( b, this, 40 ) ) {
						((Ent_Static)b).visible_message( new Txt().item( b ).str( " disassembles " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You have disassembled " ).the( this ).item().str( ".</span>" ).ToString(), "You hear welding." );
						this.assembly.loc = this.loc;
						GlobalFuncs.qdel( this );
						return null;
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You need more welder fuel to do that.</span>" );
					return 1;
				}
			}
			return null;
		}

		// Function from file: igniter.dm
		public override dynamic power_change(  ) {
			
			if ( !( ( this.stat & 2 ) != 0 ) ) {
				this.icon_state = "igniter" + this.on;
			} else {
				this.icon_state = "igniter0";
			}
			return null;
		}

		// Function from file: igniter.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.igniters.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: igniter.dm
		public void toggle_state(  ) {
			this.f_use_power( 50 );
			this.on = !this.on;
			this.icon_state = "igniter" + this.on;
			return;
		}

		// Function from file: igniter.dm
		public override dynamic process(  ) {
			Ent_Static location = null;

			
			if ( this.on && !( ( this.stat & 2 ) != 0 ) ) {
				location = this.loc;

				if ( location is Tile ) {
					new ByTable().Set( 1, 1000 ).Set( 2, 500 ).Set( 3, 1 ).Set( "surfaces", 0 ).Apply( Lang13.BindFunc( location, "hotspot_expose" ) );
				}
			}
			return 1;
		}

		// Function from file: igniter.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			this.add_fingerprint( a );
			this.f_use_power( 50 );
			this.on = !this.on;
			this.icon_state = "igniter" + this.on;
			return null;
		}

		// Function from file: igniter.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( GlobalVars.ticker != null && GlobalVars.ticker.mode.name == "monkey" ) {
				return this.attack_hand( a );
			}
			return null;
		}

		// Function from file: igniter.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

	}

}