// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Telecomms_Server : Obj_Machinery_Telecomms {

		public ByTable log_entries = new ByTable();
		public ByTable stored_names = new ByTable();
		public ByTable TrafficActions = new ByTable();
		public int? logs = 0;
		public int totaltraffic = 0;
		public ByTable memory = new ByTable();
		public string rawcode = "";
		public TCSCompiler Compiler = null;
		public bool autoruncode = false;
		public string encryption = "null";
		public string salt = "null";
		public string language = "human";
		public Obj_Item_Device_Radio_Headset server_radio = null;
		public int last_signal = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 15;
			this.machinetype = 4;
			this.heatgen = 50;
			this.circuitboard = "/obj/item/weapon/circuitboard/telecomms/server";
			this.icon_state = "comm_server";
		}

		// Function from file: telecomunications.dm
		public Obj_Machinery_Telecomms_Server ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.Compiler = new TCSCompiler();
			this.Compiler.Holder = this;
			this.server_radio = new Obj_Item_Device_Radio_Headset();
			return;
		}

		// Function from file: telecomunications.dm
		public void add_entry( dynamic content = null, string input = null ) {
			CommLogEntry log = null;
			string identifier = null;

			log = new CommLogEntry();
			identifier = String13.NumberToString( Rand13.Int( -1000, 1000 ) + Game13.time );
			log.name = "" + input + " (" + Num13.Md5( identifier ) + ")";
			log.input_type = input;
			log.parameters["message"] = content;
			this.log_entries.Add( log );
			this.update_logs();
			return;
		}

		// Function from file: telecomunications.dm
		public void update_logs(  ) {
			int? i = null;
			CommLogEntry L = null;

			
			if ( ( this.logs ??0) >= 400 ) {
				i = null;
				i = 1;

				while (( i ??0) <= ( this.logs ??0)) {
					L = this.log_entries[i];

					if ( L.garbage_collector ) {
						this.log_entries.Remove( L );
						this.logs--;
						break;
					}
					i++;
				}
			}
			return;
		}

		// Function from file: telecomunications.dm
		public ByTable compile( Mob user = null ) {
			
			if ( this.Compiler != null ) {
				this.admin_log( user );
				return this.Compiler.Compile( this.rawcode );
			}
			return null;
		}

		// Function from file: telecomunications.dm
		public void admin_log( Mob mob = null ) {
			string msg = null;

			msg = "" + GlobalFuncs.key_name( mob ) + " has compiled a script to " + this.id;
			GlobalVars.diary.WriteMsg( msg );
			GlobalVars.diary.WriteMsg( this.rawcode );
			this.investigation_log( "ntsl", "" + msg + "<br /><pre>" + this.rawcode + "</pre>" );

			if ( Lang13.Length( this.rawcode ) != 0 ) {
				GlobalFuncs.message_admins( "" + msg + " (" + GlobalFuncs.formatJumpTo( mob ) + ")" );
			}
			return;
		}

		// Function from file: telecomunications.dm
		public void setcode( string t = null ) {
			
			if ( Lang13.Bool( t ) ) {
				
				if ( t is string ) {
					this.rawcode = t;
				}
			}
			return;
		}

		// Function from file: telecomunications.dm
		public override void receive_information( Game_Data signal = null, Obj_Machinery_Telecomms machine_from = null ) {
			CommLogEntry log = null;
			Mob M = null;
			string identifier = null;
			int? can_send = null;

			
			if ( Lang13.Bool( ((dynamic)signal).data["message"] ) ) {
				
				if ( this.is_freq_listening( signal ) ) {
					
					if ( this.traffic > 0 ) {
						this.totaltraffic += this.traffic;
					}

					if ( Convert.ToInt32( ((dynamic)signal).data["type"] ) != 4 ) {
						this.update_logs();
						log = new CommLogEntry();
						M = ((dynamic)signal).data["mob"];
						log.parameters["mobtype"] = ((dynamic)signal).data["mobtype"];
						log.parameters["job"] = ((dynamic)signal).data["job"];
						log.parameters["key"] = ((dynamic)signal).data["key"];
						log.parameters["message"] = ((dynamic)signal).data["message"];
						log.parameters["name"] = ((dynamic)signal).data["name"];
						log.parameters["realname"] = ((dynamic)signal).data["realname"];

						if ( !( M is Mob_NewPlayer ) && M is Mob ) {
							log.parameters["uspeech"] = M.universal_speak;
						} else {
							log.parameters["uspeech"] = 0;
						}

						if ( Convert.ToDouble( ((dynamic)signal).data["compression"] ) > 0 ) {
							log.parameters["message"] = GlobalFuncs.Gibberish( ((dynamic)signal).data["message"], ((dynamic)signal).data["compression"] + 50 );
							log.parameters["job"] = GlobalFuncs.Gibberish( ((dynamic)signal).data["job"], ((dynamic)signal).data["compression"] + 50 );
							log.parameters["name"] = GlobalFuncs.Gibberish( ((dynamic)signal).data["name"], ((dynamic)signal).data["compression"] + 50 );
							log.parameters["realname"] = GlobalFuncs.Gibberish( ((dynamic)signal).data["realname"], ((dynamic)signal).data["compression"] + 50 );
							log.input_type = "Corrupt File";
						}
						this.log_entries.Add( log );

						if ( !this.stored_names.Contains( ((dynamic)signal).data["name"] ) ) {
							this.stored_names.Add( ((dynamic)signal).data["name"] );
						}
						this.logs++;
						((dynamic)signal).data["server"] = this;
						identifier = String13.NumberToString( Rand13.Int( -1000, 1000 ) + Game13.time );
						log.name = "data packet (" + Num13.Md5( identifier ) + ")";

						if ( this.Compiler != null && this.autoruncode ) {
							this.Compiler.Run( signal );
						}
					}
					can_send = this.relay_information( signal, "/obj/machinery/telecomms/hub" );

					if ( !Lang13.Bool( can_send ) ) {
						this.relay_information( signal, "/obj/machinery/telecomms/broadcaster" );
					}
				}
			}
			return;
		}

		// Function from file: telecomunications.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.Compiler != null ) {
				this.Compiler.GC();
				this.Compiler = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}