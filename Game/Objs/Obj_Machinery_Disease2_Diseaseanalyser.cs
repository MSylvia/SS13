// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Disease2_Diseaseanalyser : Obj_Machinery_Disease2 {

		public dynamic scanning = 0;
		public bool pause = false;
		public dynamic process_time = 5;
		public dynamic minimum_growth = 50;
		public ByTable toscan = new ByTable();
		public dynamic dish = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 6;
			this.icon = "icons/obj/virology.dmi";
			this.icon_state = "analyser";
		}

		// Function from file: analyser.dm
		public Obj_Machinery_Disease2_Diseaseanalyser ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Diseaseanalyser(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: analyser.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;
			Obj_Item_Weapon_Virusdish B = null;
			double? ID = null;
			dynamic v = null;
			Disease2_Effectholder e = null;
			Browser popup = null;

			((Mob)a).set_machine( this );
			dat = new ByTable();
			dat += "Currently stored samples: " + this.contents.len + "<br><hr>";

			if ( this.contents.len > 0 ) {
				dat += "<table cellpadding='1' style='width: 100%;text-align:center;'><td>Name</td><td>Symptoms</td><td>Antibodies</td><td>Transmission</td><td>Options</td>";

				foreach (dynamic _b in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Virusdish) )) {
					B = _b;
					
					ID = B.virus2.uniqueID;
					Interface13.Stat( null, GlobalVars.virusDB.Contains( "" + ID ) );

					if ( B is Obj_Item_Weapon_Virusdish ) {
						v = GlobalVars.virusDB["" + ID];
						dat += "<tr><td>" + v.fields["name"] + "</td>";
					} else {
						dat += "<tr><td>" + B.virus2.name() + "</td>";
					}
					dat += "<td>";

					if ( !B.analysed ) {
						dat += "Awaiting analysis.</td><td></td><td></td>";
					} else {
						
						foreach (dynamic _a in Lang13.Enumerate( B.virus2.effects, typeof(Disease2_Effectholder) )) {
							e = _a;
							
							dat += "<br>" + e.effect.name;
						}
						dat += "</td>";
						dat += "<td>" + GlobalFuncs.antigens2string( B.virus2.antigen ) + "</td>";
						dat += "<td>" + B.virus2.spreadtype + "</td>";
					}

					if ( B == this.dish ) {
						dat += "<td></td>";
					} else {
						dat += new Txt( "<td><A href='?src=" ).Ref( this ).str( ";eject=1;name=" ).item( "" + ID ).str( ";'>Eject</a>" ).ToString();
						dat += "<br>" + ( B.analysed ? new Txt( "<A href='?src=" ).Ref( this ).str( ";print=1;name=" ).item( "" + ID ).str( ";'>Print</a>" ).ToString() : "" ) + "</td>";
					}
					dat += "</tr>";
				}
				dat += "</table>";
			}
			dat = GlobalFuncs.list2text( dat );
			popup = new Browser( a, "disease_analyzer", "Viral Storage & Analysis Unit", 600, 350, this );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( a, "disease_analyzer" );
			return null;
		}

		// Function from file: analyser.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Obj_Item_Weapon_Virusdish O = null;
			Obj_Item_Weapon_Virusdish O2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Task13.User != null ) {
				Task13.User.set_machine( this );
			}

			if ( Lang13.Bool( href_list["eject"] ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Virusdish) )) {
					O = _a;
					

					if ( "" + O.virus2.uniqueID == href_list["name"] ) {
						O.forceMove( this.loc );

						if ( Lang13.Bool( this.toscan["O"] ) ) {
							this.toscan.Remove( O );
						}
					}
				}
				this.updateUsrDialog();
			} else if ( Lang13.Bool( href_list["print"] ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Virusdish) )) {
					O2 = _b;
					

					if ( "" + O2.virus2.uniqueID == href_list["name"] ) {
						this.PrintPaper( O2 );
					}
				}
			}
			return null;
		}

		// Function from file: analyser.dm
		public override dynamic process(  ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			this.f_use_power( 500 );

			if ( Lang13.Bool( this.scanning ) ) {
				this.scanning -= 1;

				if ( this.scanning == 0 ) {
					this.Analyse( this.dish );
				}
			} else if ( ( Lang13.Bool( this.dish ) || this.toscan.len > 0 ) && !Lang13.Bool( this.scanning ) && !this.pause ) {
				
				if ( !Lang13.Bool( this.dish ) ) {
					this.dish = this.toscan[1];
					this.toscan.Remove( this.dish );
				}

				if ( Lang13.Bool( this.dish.virus2 ) && Convert.ToDouble( this.dish.growth ) > Convert.ToDouble( this.minimum_growth ) ) {
					this.dish.growth -= 10;
					this.scanning = this.process_time;
					this.icon_state = "analyser_processing";
				} else {
					this.pause = true;
					Task13.Schedule( 25, (Task13.Closure)(() => {
						((Ent_Dynamic)this.dish).forceMove( this.loc );
						this.dish = null;
						this.alert_noise( "buzz" );
						this.pause = false;
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: analyser.dm
		public void Analyse( dynamic D = null ) {
			this.dish.info = ((Disease2_Disease)D.virus2).get_info();
			this.dish.analysed = 1;

			if ( ((Disease2_Disease)D.virus2).addToDB() ) {
				this.say( "Added new pathogen to database." );
			}
			this.PrintPaper( this.dish );
			((Ent_Dynamic)this.dish).forceMove( this.loc );
			this.dish = null;
			this.icon_state = "analyser";
			this.updateUsrDialog();
			return;
		}

		// Function from file: analyser.dm
		public void PrintPaper( dynamic D = null ) {
			Obj_Item_Weapon_Paper P = null;

			P = new Obj_Item_Weapon_Paper( this.loc );
			P.info = ((Disease2_Disease)D.virus2).get_info();
			P.name = "Virus #" + D.virus2.uniqueID;
			this.visible_message( new Txt().The( this.name ).item().str( " prints a sheet of paper." ).ToString() );
			return;
		}

		// Function from file: analyser.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic c2 = null;
			dynamic D = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_Virusdish ) {
				c2 = b;
				D = a;

				if ( !Lang13.Bool( c2.drop_item( D, this ) ) ) {
					return 1;
				}

				if ( !Lang13.Bool( D.analysed ) ) {
					
					if ( !Lang13.Bool( this.dish ) ) {
						this.dish = D;
					} else {
						this.toscan.Add( D );
					}
				}
				this.visible_message( "<span class='notice'>" + b.name + " inserts the " + D.name + " in the " + this.name + ".</span>" );
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: analyser.dm
		public override dynamic RefreshParts(  ) {
			int scancount = 0;
			int lasercount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			scancount = 0;
			lasercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_ScanningModule ) {
					scancount += SP.rating - 1;
				}

				if ( SP is Obj_Item_Weapon_StockParts_MicroLaser ) {
					lasercount += SP.rating - 1;
				}
			}
			this.minimum_growth = Lang13.Initial( this, "minimum_growth" ) - scancount * 3;
			this.process_time = Lang13.Initial( this, "process_time" ) - lasercount;
			return null;
		}

	}

}