// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Voice : Obj_Item_Device_Assembly {

		public bool listening = false;
		public string recorded = "";
		public bool muted = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.starting_materials = new ByTable().Set( "$iron", 500 ).Set( "$glass", 50 );
			this.flags = 16;
			this.accessible_values = new ByTable().Set( "Recording activation message", "listening;number" ).Set( "Activation message", "recorded;text" ).Set( "Muted", "muted;num" );
			this.icon_state = "voice";
		}

		public Obj_Item_Device_Assembly_Voice ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: voice.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			bool _default = false;

			
			if ( this.muted ) {
				return _default;
			}
			_default = base.say( (object)(message), speaking, radio );
			return _default;
		}

		// Function from file: voice.dm
		public override bool toggle_secure(  ) {
			bool _default = false;

			_default = base.toggle_secure();
			this.listening = false;
			return _default;
		}

		// Function from file: voice.dm
		public override string say_quote( dynamic text = null ) {
			return "beeps, " + text;
		}

		// Function from file: voice.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return 0;
			}
			this.activate();
			return 1;
		}

		// Function from file: voice.dm
		public override bool activate(  ) {
			
			if ( this.secured ) {
				
				if ( !( this.holder != null ) ) {
					this.listening = !this.listening;
					this.say( "" + ( this.listening ? "Now" : "No longer" ) + " recording input." );
				}
			}
			return false;
		}

		// Function from file: voice.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Device_Multitool ) {
				this.muted = !this.muted;

				if ( this.muted ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='info'>You mute " ).the( this ).item().str( "'s speaker. This should keep it quiet.</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='info'>You unmute " ).the( this ).item().str( "'s speaker. It will now talk again.</span>" ).ToString() );
				}
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: voice.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( !( _args[1].speaker != null ) || _args[1].speaker == this ) {
				return null;
			}

			if ( this.listening && !Lang13.Bool( _args[1].frequency ) ) {
				this.recorded = _args[1].message;
				this.listening = false;
				this.say( "Activation message is '" + String13.HtmlEncode( _args[1].message ) + "'." );
			} else if ( String13.FindIgnoreCase( _args[1].message, this.recorded, 1, 0 ) != 0 ) {
				
				if ( _args[1].speaker is Obj_Item_Device_Assembly || _args[1].speaker is Obj_Item_Device_AssemblyFrame ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-sigh.ogg", 25, 1 );
				} else {
					this.pulse( false );
				}
			}
			return null;
		}

	}

}