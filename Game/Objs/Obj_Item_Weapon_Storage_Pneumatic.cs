// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Storage_Pneumatic : Obj_Item_Weapon_Storage {

		public dynamic tank = null;
		public Obj_Item_Weapon_Storage tank_container = new Obj_Item_Weapon_Storage();
		public dynamic pressure_setting = 10;
		public ByTable possible_pressure_amounts = new ByTable(new object [] { 5, 10, 20, 25, 50 });
		public int minimum_tank_pressure = 10;
		public bool cooldown = false;
		public int cooldown_time = 30;
		public int force_divisor = 400;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "pneumatic";
			this.w_class = 4;
			this.slot_flags = 512;
			this.max_w_class = 3;
			this.max_combined_w_class = 20;
			this.origin_tech = "materials=3;engineering=3";
			this.icon = "icons/obj/gun.dmi";
			this.icon_state = "pneumatic";
		}

		public Obj_Item_Weapon_Storage_Pneumatic ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pneumatic.dm
		public bool Fire( dynamic target = null, dynamic user = null, dynamic _params = null, bool? reflex = null ) {
			reflex = reflex ?? false;

			dynamic curloc = null;
			dynamic targloc = null;
			dynamic fire_pressure = null;
			Obj_Item _object = null;
			dynamic speed = null;
			dynamic lost_gas_amount = null;
			dynamic removed = null;

			
			if ( !Lang13.Bool( this.tank ) ) {
				GlobalFuncs.to_chat( user, "There is no gas tank in " + this + "!" );
				return false;
			}

			if ( this.cooldown ) {
				GlobalFuncs.to_chat( user, "The chamber hasn't built up enough pressure yet!" );
				return false;
			}
			this.add_fingerprint( user );
			curloc = GlobalFuncs.get_turf( user );
			targloc = GlobalFuncs.get_turf( target );

			if ( !( targloc is Tile ) || !( curloc is Tile ) ) {
				return false;
			}
			fire_pressure = this.tank.air_contents.return_pressure() / 100 * this.pressure_setting;

			if ( Convert.ToDouble( fire_pressure ) < this.minimum_tank_pressure ) {
				GlobalFuncs.to_chat( user, "There isn't enough gas in the tank to fire " + this + "." );
				return false;
			}
			_object = this.contents[1];
			speed = fire_pressure * this.tank.volume / _object.w_class / this.force_divisor;

			if ( Convert.ToDouble( speed ) > 80 ) {
				speed = 80;
			}
			((Ent_Static)user).visible_message( "<span class='danger'>" + user + " fires " + this + " and launches " + _object + " at " + target + "!</span>", "<span class='danger'>You fire " + this + " and launch " + _object + " at " + target + "!</span>" );
			this.remove_from_storage( _object, user.loc );
			_object.throw_at( target, 10, speed );

			if ( _object is Obj_Item_Weapon_ReagentContainers_Food_Snacks && target is Mob_Living_Carbon_Human && _object.Adjacent( target ) ) {
				_object.attack( target, target );
			}
			lost_gas_amount = this.tank.air_contents.total_moles * ( this.pressure_setting / 100 );
			removed = this.tank.air_contents.remove( lost_gas_amount );
			user.loc.assume_air( removed );
			this.cooldown = true;
			Task13.Schedule( this.cooldown_time, (Task13.Closure)(() => {
				this.cooldown = false;
				GlobalFuncs.to_chat( user, "" + this + "'s gauge informs you it's ready to be fired again." );
				return;
			}));
			return false;
		}

		// Function from file: pneumatic.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			
			if ( Lang13.Length( this.contents ) > 0 ) {
				
				if ( user.a_intent == "hurt" ) {
					((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).The( user ).item().str( " fires " ).the( this ).item().str( " point blank at " ).item( M ).str( "!</span>" ).ToString() );
					this.Fire( M, user );
					return null;
				} else {
					this.Fire( M, user );
					return null;
				}
			}
			return null;
		}

		// Function from file: pneumatic.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			
			if ( A is Obj_Item_Weapon_Storage_Backpack ) {
				return false;
			} else if ( A.loc == user.loc ) {
				return false;
			} else if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table), this.loc ) ) ) {
				return false;
			} else if ( A == user ) {
				return false;
			}

			if ( Lang13.Length( this.contents ) == 0 ) {
				GlobalFuncs.to_chat( user, "There's nothing in " + this + " to fire!" );
				return false;
			} else {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.Fire( A, user, _params );
					return;
				}));
			}
			return false;
		}

		// Function from file: pneumatic.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "<span class='info'>The valve is dialed to " + this.pressure_setting + "%.</span>" );

			if ( Lang13.Bool( this.tank ) ) {
				GlobalFuncs.to_chat( user, "<span class='info'>The tank dial reads " + this.tank.air_contents.return_pressure() + " kPa.</span>" );
			} else {
				GlobalFuncs.to_chat( user, "<span class='warning'>Nothing is attached to the tank valve!</span>" );
			}
			return null;
		}

		// Function from file: pneumatic.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			
			if ( !Lang13.Bool( this.tank ) && a is Obj_Item_Weapon_Tank ) {
				
				if ( !Lang13.Bool( b.drop_item( a, this.tank_container ) ) ) {
					b.WriteMsg( new Txt( "<span class='warning'>You can't let go of " ).the( a ).item().str( "!</span>" ).ToString() );
					return _default;
				}
				this.tank = a;
				((Ent_Static)b).visible_message( "" + b + " jams " + a + " into " + this + "'s valve and twists it closed.", "You jam " + a + " into " + this + "'s valve and twist it closed." );
				this.icon_state = "pneumatic-tank";
				this.item_state = "pneumatic-tank";
				b.update_icons();
			} else {
				_default = base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return _default;
		}

		// Function from file: pneumatic.dm
		[Verb]
		[VerbInfo( name: "Eject tank", group: "Object", access: VerbAccess.InRange, range: 0 )]
		public void eject_tank(  ) {
			
			if ( Lang13.Bool( this.tank ) ) {
				GlobalFuncs.to_chat( Task13.User, "You twist the valve and pop the tank out of " + this + "." );
				this.tank.loc = Task13.User.loc;
				this.tank = null;
				this.icon_state = "pneumatic";
				this.item_state = "pneumatic";
				Task13.User.update_icons();
			} else {
				GlobalFuncs.to_chat( Task13.User, "There's no tank in " + this + "." );
			}
			return;
		}

		// Function from file: pneumatic.dm
		[Verb]
		[VerbInfo( name: "Set valve pressure", group: "Object", access: VerbAccess.InRange, range: 0 )]
		public void set_pressure(  ) {
			dynamic N = null;

			N = Interface13.Input( "Percentage of tank used per shot:", "" + this, null, null, this.possible_pressure_amounts, InputType.Null | InputType.Any );

			if ( Lang13.Bool( N ) ) {
				this.pressure_setting = N;
				GlobalFuncs.to_chat( Task13.User, "You dial the pressure valve to " + this.pressure_setting + "%." );
			}
			return;
		}

	}

}