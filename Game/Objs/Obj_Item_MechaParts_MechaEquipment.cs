// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment : Obj_Item_MechaParts {

		public dynamic equip_cooldown = 0;
		public bool equip_ready = true;
		public dynamic energy_drain = 0;
		public Obj_Mecha chassis = null;
		public int range = 1;
		public bool salvageable = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 5;
			this.origin_tech = "materials=2";
			this.reliability = 1000;
			this.icon = "icons/mecha/mecha_equipment.dmi";
			this.icon_state = "mecha_equip";
		}

		// Function from file: mecha_equipment.dm
		public Obj_Item_MechaParts_MechaEquipment ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: mecha_equipment.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( href_list["detach"] ) ) {
				this.detach();
			}
			return null;
		}

		// Function from file: mecha_equipment.dm
		public override dynamic Destroy(  ) {
			
			if ( this.chassis != null ) {
				this.chassis.equipment.Remove( this );

				if ( this.chassis.selected == this ) {
					this.chassis.selected = null;
				}
				this.update_chassis_page();
				this.chassis.occupant_message( "<span class='danger'>The " + this + " is destroyed!</span>" );
				this.chassis.log_append_to_last( "" + this + " is destroyed.", true );

				if ( this is Obj_Item_MechaParts_MechaEquipment_Weapon ) {
					((dynamic)this.chassis.occupant).WriteMsg( new Sound( "sound/mecha/weapdestr.ogg", null, null, null, 50 ) );
				} else {
					((dynamic)this.chassis.occupant).WriteMsg( new Sound( "sound/mecha/critdestr.ogg", null, null, null, 50 ) );
				}
				this.chassis = null;
			}
			return base.Destroy();
		}

		// Function from file: mecha_equipment.dm
		public virtual bool needs_rearm(  ) {
			return false;
		}

		// Function from file: mecha_equipment.dm
		public virtual bool rearm(  ) {
			return false;
		}

		// Function from file: mecha_equipment.dm
		public void log_message( string message = null ) {
			
			if ( this.chassis != null ) {
				this.chassis.log_message( "<i>" + this + ":</i> " + message );
			}
			return;
		}

		// Function from file: mecha_equipment.dm
		public void occupant_message( string message = null ) {
			
			if ( this.chassis != null ) {
				this.chassis.occupant_message( new Txt().icon( this ).str( " " ).item( message ).ToString() );
			}
			return;
		}

		// Function from file: mecha_equipment.dm
		public void set_ready_state( bool state = false ) {
			this.equip_ready = state;

			if ( this.chassis != null ) {
				GlobalFuncs.send_byjax( this.chassis.occupant, "exosuit.browser", new Txt().Ref( this ).ToString(), this.get_equip_info() );
			}
			return;
		}

		// Function from file: mecha_equipment.dm
		public virtual void detach( dynamic moveto = null ) {
			moveto = Lang13.Bool( moveto ) || Lang13.Bool( GlobalFuncs.get_turf( this.chassis ) );

			if ( this.Move( moveto ) ) {
				this.chassis.equipment.Remove( this );

				if ( this.chassis.selected == this ) {
					this.chassis.selected = null;
				}
				this.update_chassis_page();
				this.chassis.log_message( "" + this + " removed from equipment." );
				this.chassis = null;
				this.set_ready_state( true );
			}
			return;
		}

		// Function from file: mecha_equipment.dm
		public virtual void attach( Obj_Mecha M = null ) {
			M.equipment.Add( this );
			this.chassis = M;
			this.loc = M;
			M.log_message( "" + this + " initialized." );

			if ( !Lang13.Bool( M.selected ) ) {
				M.selected = this;
			}
			this.update_chassis_page();
			return;
		}

		// Function from file: mecha_equipment.dm
		public virtual bool can_attach( Obj_Mecha M = null ) {
			
			if ( M.equipment.len < M.max_equip ) {
				return true;
			}
			return false;
		}

		// Function from file: mecha_equipment.dm
		public virtual bool do_after_cooldown( dynamic target = null ) {
			bool _default = false;

			Ent_Static C = null;

			
			if ( !( this.chassis != null ) ) {
				return _default;
			}
			C = this.chassis.loc;
			this.set_ready_state( false );
			this.chassis.use_power( this.energy_drain );
			_default = GlobalFuncs.do_after( this.chassis.occupant, this.equip_cooldown, null, target );
			this.set_ready_state( true );

			if ( !( this.chassis != null ) || this.chassis.loc != C || this != this.chassis.selected ) {
				return false;
			}
			return _default;
		}

		// Function from file: mecha_equipment.dm
		public virtual void start_cooldown(  ) {
			this.set_ready_state( false );
			this.chassis.use_power( this.energy_drain );
			Task13.Sleep( Convert.ToInt32( this.equip_cooldown ) );
			this.set_ready_state( true );
			return;
		}

		// Function from file: mecha_equipment.dm
		[VerbInfo( name: "action" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public virtual bool f_action( dynamic target = null ) {
			return false;
		}

		// Function from file: mecha_equipment.dm
		public virtual bool action_checks( dynamic target = null ) {
			
			if ( !Lang13.Bool( target ) ) {
				return false;
			}

			if ( !( this.chassis != null ) ) {
				return false;
			}

			if ( !this.equip_ready ) {
				return false;
			}

			if ( this.crit_fail ) {
				return false;
			}

			if ( Lang13.Bool( this.energy_drain ) && !this.chassis.has_charge( this.energy_drain ) ) {
				return false;
			}
			return true;
		}

		// Function from file: mecha_equipment.dm
		public int is_melee(  ) {
			return this.range & 1;
		}

		// Function from file: mecha_equipment.dm
		public int is_ranged(  ) {
			return this.range & 2;
		}

		// Function from file: mecha_equipment.dm
		public virtual string get_equip_info(  ) {
			
			if ( !( this.chassis != null ) ) {
				return null;
			}
			return "<span style=\"color:" + ( this.equip_ready ? "#0f0" : "#f00" ) + ";\">*</span>&nbsp;" + ( this.chassis.selected == this ? "<b>" : new Txt( "<a href='?src=" ).Ref( this.chassis ).str( ";select_equip=" ).Ref( this ).str( "'>" ).ToString() ) + this.name + ( this.chassis.selected == this ? "</b>" : "</a>" );
		}

		// Function from file: mecha_equipment.dm
		public virtual void critfail(  ) {
			
			if ( this.chassis != null ) {
				this.log_message( "Critical failure" );
			}
			return;
		}

		// Function from file: mecha_equipment.dm
		public virtual bool update_equip_info(  ) {
			
			if ( this.chassis != null ) {
				GlobalFuncs.send_byjax( this.chassis.occupant, "exosuit.browser", new Txt().Ref( this ).ToString(), this.get_equip_info() );
				return true;
			}
			return false;
		}

		// Function from file: mecha_equipment.dm
		public bool update_chassis_page(  ) {
			
			if ( this.chassis != null ) {
				GlobalFuncs.send_byjax( this.chassis.occupant, "exosuit.browser", "eq_list", this.chassis.get_equipment_list() );
				GlobalFuncs.send_byjax( this.chassis.occupant, "exosuit.browser", "equipment_menu", this.chassis.get_equipment_menu(), "dropdowns" );
				return true;
			}
			return false;
		}

	}

}