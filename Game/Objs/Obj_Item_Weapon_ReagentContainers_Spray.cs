// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Spray : Obj_Item_Weapon_ReagentContainers {

		public bool delay_spraying = true;
		public ByTable ignore_spray_types = new ByTable(new object [] { typeof(Obj_Item_Weapon_Storage), typeof(Obj_Structure_Table), typeof(Obj_Structure_Rack), typeof(Obj_Structure_Closet), typeof(Obj_Structure_Sink) });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "cleaner";
			this.flags = 4352;
			this.slot_flags = 512;
			this.throwforce = 3;
			this.w_class = 2;
			this.throw_range = 10;
			this.amount_per_transfer_from_this = 10;
			this.volume = 250;
			this.possible_transfer_amounts = null;
			this.icon = "icons/obj/janitor.dmi";
			this.icon_state = "cleaner";
		}

		public Obj_Item_Weapon_ReagentContainers_Spray ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: spray.dm
		public virtual void make_puff( dynamic target = null, dynamic user = null ) {
			dynamic transfer_amount = null;
			string mix_color = null;
			Game_Data D = null;
			int? i = null;

			transfer_amount = this.amount_per_transfer_from_this;

			if ( !this.can_transfer_an_APTFT() && !this.is_empty() ) {
				transfer_amount = this.reagents.total_volume;
			}
			mix_color = GlobalFuncs.mix_color_from_reagents( this.reagents.reagent_list );
			D = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_ChemicalPuff), GlobalFuncs.get_turf( this ), mix_color, this.amount_per_transfer_from_this );
			((Reagents)this.reagents).trans_to( D, transfer_amount, 0.3333333432674408 );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				i = null;
				i = 0;

				while (( i ??0) < 3) {
					Map13.StepTowardsSimple( (Ent_Dynamic)(D), target );
					((Obj_Effect_Decal_ChemicalPuff)D).react();
					Task13.Sleep( 3 );
					i++;
				}
				GlobalFuncs.returnToPool( D );
				return;
			}));
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/spray2.ogg", 50, 1, -6 );
			return;
		}

		// Function from file: spray.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.amount_per_transfer_from_this = ( this.amount_per_transfer_from_this == 10 ? 5 : 10 );
			GlobalFuncs.to_chat( user, "<span class='notice'>You switched " + ( this.amount_per_transfer_from_this == 10 ? "on" : "off" ) + " the pressure nozzle. You'll now use " + this.amount_per_transfer_from_this + " units per spray.</span>" );
			return null;
		}

		// Function from file: spray.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic M = null;
			Ent_Static P = null;
			ByTable log_reagent_list = null;
			dynamic reagent_id = null;

			
			if ( flag == true && GlobalFuncs.is_type_in_list( A, this.ignore_spray_types ) ) {
				return false;
			}

			if ( this.delay_spraying ) {
				((Mob)user).delayNextAttack( 8 );
			}

			if ( A is Obj_Structure_ReagentDispensers && flag == true ) {
				this.transfer( A, user, GlobalVars.FALSE, GlobalVars.TRUE );
				return false;
			}

			if ( this.is_empty() ) {
				M = user;

				if ( Lang13.Bool( M ) && Lang13.Bool( M.back ) && M.back is Obj_Item_Weapon_ReagentContainers_Chempack ) {
					P = M.back;

					if ( !Lang13.Bool( ((dynamic)P).safety ) ) {
						
						if ( !Lang13.Bool( ((dynamic)P).is_empty() ) ) {
							
							if ( this is Obj_Item_Weapon_ReagentContainers_Spray_Chemsprayer ) {
								GlobalFuncs.transfer_sub( P, this, this.amount_per_transfer_from_this * 3, user );
							} else {
								GlobalFuncs.transfer_sub( P, this, this.amount_per_transfer_from_this, user );
							}
						} else {
							GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( P ).item().str( " is empty!</span>" ).ToString() );
							return false;
						}
					} else {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " is empty!</span>" ).ToString() );
						return false;
					}
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " is empty!</span>" ).ToString() );
					return false;
				}
			}
			log_reagent_list = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.logged_sprayed_reagents )) {
				reagent_id = _a;
				

				if ( ((Reagents)this.reagents).has_reagent( reagent_id ) ) {
					log_reagent_list.Add( "'" + reagent_id + "'" );
				}
			}

			if ( log_reagent_list.len > 0 ) {
				GlobalFuncs.add_gamelogs( user, new Txt( "sprayed {" ).item( GlobalFuncs.english_list( log_reagent_list, null, ", " ) ).str( "} with " ).the( this ).item().ToString(), GlobalVars.TRUE, GlobalVars.TRUE );
			}
			this.make_puff( A, user );
			return false;
		}

		// Function from file: spray.dm
		[Verb]
		[VerbInfo( name: "Empty Spray Bottle", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void empty(  ) {
			
			if ( Task13.User.loc is Tile ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You empty the " + this + " onto the floor.</span>" );
				((Reagents)this.reagents).reaction( Task13.User.loc );
				Task13.Schedule( 5, (Task13.Closure)(() => {
					((Reagents)this.reagents).clear_reagents();
					return;
				}));
			}
			return;
		}

	}

}