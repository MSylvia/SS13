// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Projectile_Magic_Animate : Obj_Item_Projectile_Magic {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.damage_type = "fire";
			this.icon_state = "red_1";
		}

		public Obj_Item_Projectile_Magic_Animate ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: magic.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			Ent_Static H = null;
			Mob_Living_SimpleAnimal_Hostile_Statue S = null;
			Ent_Static O = null;
			Ent_Static C = null;

			base.Bump( Obstacle, (object)(yes) );

			if ( Obstacle is Obj_Item || Obstacle is Obj_Structure && !GlobalFuncs.is_type_in_list( Obstacle, GlobalVars.protected_objects ) ) {
				
				if ( Obstacle is Obj_Structure_Closet_Statue ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Obstacle.contents, typeof(Mob_Living_Carbon_Human) )) {
						H = _a;
						
						S = new Mob_Living_SimpleAnimal_Hostile_Statue( Obstacle.loc, this.firer );
						S.name = "statue of " + H.name;
						S.faction = new ByTable(new object [] { new Txt().Ref( this.firer ).ToString() });
						S.icon = Obstacle.icon;

						if ( Lang13.Bool( ((dynamic)H).mind ) ) {
							((Mind)((dynamic)H).mind).transfer_to( S );
							S.WriteMsg( "<span class='userdanger'>You are an animate statue. You cannot move when monitored, but are nearly invincible and deadly when unobserved! Do not harm " + this.firer.name + ", your creator.</span>" );
						}
						H = Obstacle;
						H.loc = S;
						GlobalFuncs.qdel( this );
						return null;
					}
				} else {
					O = Obstacle;

					if ( O is Obj_Item_Weapon_Gun ) {
						new Mob_Living_SimpleAnimal_Hostile_Mimic_Copy_Ranged( O.loc, O, this.firer );
					} else {
						new Mob_Living_SimpleAnimal_Hostile_Mimic_Copy( O.loc, O, this.firer );
					}
				}
			} else if ( Obstacle is Mob_Living_SimpleAnimal_Hostile_Mimic_Copy ) {
				C = Obstacle;
				((dynamic)C).ChangeOwner( this.firer );
			}
			return null;
		}

	}

}