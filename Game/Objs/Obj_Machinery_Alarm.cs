// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Alarm : Obj_Machinery {

		public int frequency = 1439;
		public int alarm_frequency = 1437;
		public bool remote_control = false;
		public double? rcon_setting = 2;
		public bool rcon_time = false;
		public bool locked = true;
		public Wires_Alarm wires = null;
		public bool wiresexposed = false;
		public bool aidisabled = false;
		public int AAlarmwires = 31;
		public bool shorted = false;
		public double? mode = 1;
		public double? preset = 1;
		public double? screen = 1;
		public dynamic area_uid = null;
		public int local_danger_level = 0;
		public bool alarmActivated = false;
		public int danger_averted_confidence = 0;
		public int buildstage = 2;
		public dynamic target_temperature = 293.41;
		public bool regulating_temperature = false;
		public RadioFrequency radio_connection = null;
		public ByTable TLV = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 100;
			this.active_power_usage = 200;
			this.power_channel = 3;
			this.req_one_access = new ByTable(new object [] { 24, 11 });
			this.machine_flags = 512;
			this.icon = "icons/obj/monitors.dmi";
			this.icon_state = "alarm0";
		}

		// Function from file: alarm.dm
		public Obj_Machinery_Alarm ( dynamic loc = null, int dir = 0, bool? building = null ) : base( (object)(loc) ) {
			building = building ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.wires = new Wires_Alarm( this );

			if ( building == true ) {
				
				if ( Lang13.Bool( loc ) ) {
					this.loc = loc;
				}

				if ( dir != 0 ) {
					this.dir = dir;
				}
				this.buildstage = 0;
				this.wiresexposed = true;
				this.pixel_x = ( ( dir & 3 ) != 0 ? 0 : ( dir == 4 ? -24 : 24 ) );
				this.pixel_y = ( ( dir & 3 ) != 0 ? ( dir == 1 ? -24 : 24 ) : 0 );
				this.update_icon();

				if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
					this.initialize();
				}
				return;
			}
			this.first_run();
			return;
		}

		// Function from file: alarm.dm
		public override bool wirejack( dynamic P = null ) {
			
			if ( base.wirejack( (object)(P) ) ) {
				this.locked = !this.locked;
				this.update_icon();
				return true;
			}
			return false;
		}

		// Function from file: alarm.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			base.change_area( (object)(oldarea), (object)(newarea) );
			this.name = GlobalFuncs.replacetext( this.name, oldarea, newarea );
			return;
		}

		// Function from file: alarm.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.buildstage < 2 ) {
				GlobalFuncs.to_chat( user, "<span class='info'>It is not wired.</span>" );
			}

			if ( this.buildstage < 1 ) {
				GlobalFuncs.to_chat( user, "<span class='info'>The circuit is missing.</span>" );
			}
			return null;
		}

		// Function from file: alarm.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered( this.power_channel ) ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
			}
			Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
				this.update_icon();
				return;
			}));
			return null;
		}

		// Function from file: alarm.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic coil = null;
			double? i = null;

			this.add_fingerprint( b );

			switch ((int)( this.buildstage )) {
				case 2:
					
					if ( a is Obj_Item_Weapon_Screwdriver ) {
						this.wiresexposed = !this.wiresexposed;
						GlobalFuncs.to_chat( b, "The wires have been " + ( this.wiresexposed ? "exposed" : "unexposed" ) + "." );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
						this.update_icon();
						return null;
					}

					if ( this.wiresexposed && !this.wires.IsAllCut() && ( a is Obj_Item_Device_Multitool || a is Obj_Item_Weapon_Wirecutters ) ) {
						return this.attack_hand( b );
					} else if ( this.wiresexposed && this.wires.IsAllCut() && a is Obj_Item_Weapon_Wirecutters ) {
						this.buildstage = 1;
						this.update_icon();
						((Ent_Static)b).visible_message( new Txt( "<span class='attack'>" ).item( b ).str( " has cut the wiring from " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "You have cut the last of the wiring from " ).the( this ).item().str( "." ).ToString() );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Wirecutter.ogg", 50, 1 );
						GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_CableCoil), GlobalFuncs.get_turf( b ), 5 );
						return null;
					}

					if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
						
						if ( ( this.stat & 3 ) != 0 ) {
							GlobalFuncs.to_chat( b, "It does nothing" );
							return null;
						} else if ( this.allowed( b ) && !( this.wires.IsIndexCut( GlobalVars.AALARM_WIRE_IDSCAN ) != 0 ) ) {
							this.locked = !this.locked;
							GlobalFuncs.to_chat( b, "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the Air Alarm interface.</span>" );
						} else {
							GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
						}
					}
					return base.attackby( (object)(a), (object)(b), (object)(c) );
					break;
				case 1:
					
					if ( a is Obj_Item_Stack_CableCoil ) {
						coil = a;

						if ( Convert.ToDouble( coil.amount ) < 5 ) {
							GlobalFuncs.to_chat( b, "You need more cable for this!" );
							return null;
						}
						i = null;

						while (( i ??0) <= 5) {
							this.wires.UpdateCut( i, true );
							i++;
						}
						GlobalFuncs.to_chat( b, new Txt( "You wire " ).the( this ).item().str( "!" ).ToString() );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
						coil.use( 5 );
						this.buildstage = 2;
						this.update_icon();
						this.first_run();
						return null;
					} else if ( a is Obj_Item_Weapon_Crowbar ) {
						GlobalFuncs.to_chat( b, "You start prying out the circuit..." );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Crowbar.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( b, this, 20 ) && this.buildstage == 1 ) {
							GlobalFuncs.to_chat( b, "You pry out the circuit!" );
							new Obj_Item_Weapon_Circuitboard_AirAlarm( GlobalFuncs.get_turf( b ) );
							this.buildstage = 0;
							this.update_icon();
						}
						return null;
					}
					break;
				case 0:
					
					if ( a is Obj_Item_Weapon_Circuitboard_AirAlarm ) {
						GlobalFuncs.to_chat( b, "You insert the circuit!" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
						GlobalFuncs.qdel( a );
						this.buildstage = 1;
						this.update_icon();
						return null;
					} else if ( a is Obj_Item_Weapon_Wrench ) {
						GlobalFuncs.to_chat( b, "You remove the air alarm assembly from the wall!" );
						new Obj_Item_Mounted_Frame_AlarmFrame( GlobalFuncs.get_turf( b ) );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
						GlobalFuncs.qdel( this );
						return null;
					}
					break;
			}
			return null;
		}

		// Function from file: alarm.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic device_id = null;
			dynamic val = null;
			dynamic newval = null;
			string env = null;
			double? threshold = null;
			dynamic selected = null;
			ByTable thresholds = null;
			dynamic newval2 = null;
			dynamic selected2 = null;
			int max_temperature = 0;
			int min_temperature = 0;
			dynamic input_temperature = null;

			
			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["rcon"] ) ) {
				this.rcon_setting = String13.ParseNumber( href_list["rcon"] );
			}
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["command"] ) ) {
				device_id = href_list["id_tag"];

				dynamic _a = href_list["command"]; // Was a switch-case, sorry for the mess.
				if ( _a=="power" || _a=="adjust_external_pressure" || _a=="set_external_pressure" || _a=="checks" || _a=="co2_scrub" || _a=="tox_scrub" || _a=="n2o_scrub" || _a=="o2_scrub" || _a=="n2_scrub" || _a=="panic_siphon" || _a=="scrubbing" ) {
					val = null;

					if ( Lang13.Bool( href_list["val"] ) ) {
						val = String13.ParseNumber( href_list["val"] );
					} else {
						newval = Interface13.Input( "Enter new value", null, null, null, null, InputType.Num | InputType.Null );

						if ( newval == null ) {
							return null;
						}

						if ( href_list["command"] == "set_external_pressure" ) {
							
							if ( Convert.ToDouble( newval ) > 1101.324951171875 ) {
								newval = 1101.324951171875;
							}

							if ( Convert.ToDouble( newval ) < 0 ) {
								newval = 0;
							}
						}
						val = newval;
					}
					this.send_signal( device_id, new ByTable().Set( href_list["command"], val ) );
				} else if ( _a=="set_threshold" ) {
					env = href_list["env"];
					threshold = String13.ParseNumber( href_list["var"] );
					selected = this.TLV[env];
					thresholds = new ByTable(new object [] { "lower bound", "low warning", "high warning", "upper bound" });
					newval2 = Interface13.Input( "Enter " + thresholds[threshold] + " for " + env, "Alarm triggers", selected[threshold], null, null, InputType.Num | InputType.Null );

					if ( newval2 == null || Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) || this.locked && !( Task13.User is Mob_Living_Silicon ) ) {
						return null;
					}

					if ( Convert.ToDouble( newval2 ) < 0 ) {
						selected[threshold] = -1;
					} else if ( env == "temperature" && Convert.ToDouble( newval2 ) > 5000 ) {
						selected[threshold] = 5000;
					} else if ( env == "pressure" && Convert.ToDouble( newval2 ) > 5066.25 ) {
						selected[threshold] = 5066.25;
					} else if ( env != "temperature" && env != "pressure" && Convert.ToDouble( newval2 ) > 200 ) {
						selected[threshold] = 200;
					} else {
						newval2 = Num13.Round( Convert.ToDouble( newval2 ), 0.01 );
						selected[threshold] = newval2;
					}

					if ( threshold == 1 ) {
						
						if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[2] ) ) {
							selected[2] = selected[1];
						}

						if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[3] ) ) {
							selected[3] = selected[1];
						}

						if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[4] ) ) {
							selected[4] = selected[1];
						}
					}

					if ( threshold == 2 ) {
						
						if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[2] ) ) {
							selected[1] = selected[2];
						}

						if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[3] ) ) {
							selected[3] = selected[2];
						}

						if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[4] ) ) {
							selected[4] = selected[2];
						}
					}

					if ( threshold == 3 ) {
						
						if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[3] ) ) {
							selected[1] = selected[3];
						}

						if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[3] ) ) {
							selected[2] = selected[3];
						}

						if ( Convert.ToDouble( selected[3] ) > Convert.ToDouble( selected[4] ) ) {
							selected[4] = selected[3];
						}
					}

					if ( threshold == 4 ) {
						
						if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[4] ) ) {
							selected[1] = selected[4];
						}

						if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[4] ) ) {
							selected[2] = selected[4];
						}

						if ( Convert.ToDouble( selected[3] ) > Convert.ToDouble( selected[4] ) ) {
							selected[3] = selected[4];
						}
					}
					this.apply_mode();
					return 1;
				}
			}

			if ( Lang13.Bool( href_list["screen"] ) ) {
				this.screen = String13.ParseNumber( href_list["screen"] );
				return 1;
			}

			if ( Lang13.Bool( href_list["atmos_alarm"] ) ) {
				this.alarmActivated = true;
				((Zone)this.areaMaster).updateDangerLevel();
				this.update_icon();
				return 1;
			}

			if ( Lang13.Bool( href_list["atmos_reset"] ) ) {
				this.alarmActivated = false;
				((Zone)this.areaMaster).updateDangerLevel();
				this.update_icon();
				return 1;
			}

			if ( Lang13.Bool( href_list["mode"] ) ) {
				this.mode = String13.ParseNumber( href_list["mode"] );
				this.apply_mode();
				return 1;
			}

			if ( Lang13.Bool( href_list["preset"] ) ) {
				this.preset = String13.ParseNumber( href_list["preset"] );
				this.apply_preset();
				return 1;
			}

			if ( Lang13.Bool( href_list["temperature"] ) ) {
				selected2 = this.TLV["temperature"];
				max_temperature = Num13.MinInt( Convert.ToInt32( selected2[3] - 273.41 ), 90 );
				min_temperature = Num13.MaxInt( Convert.ToInt32( selected2[2] - 273.41 ), -40 );
				input_temperature = Interface13.Input( "What temperature would you like the system to maintain? (Capped between " + min_temperature + "C and " + max_temperature + "C)", "Thermostat Controls", null, null, null, InputType.Num | InputType.Null );

				if ( input_temperature == null ) {
					return null;
				}

				if ( !Lang13.Bool( input_temperature ) || Convert.ToDouble( input_temperature ) >= max_temperature || Convert.ToDouble( input_temperature ) <= min_temperature ) {
					GlobalFuncs.to_chat( Task13.User, "Temperature must be between " + min_temperature + "C and " + max_temperature + "C" );
				} else {
					this.target_temperature = input_temperature + 273.41;
				}
				return 1;
			}
			return null;
		}

		// Function from file: alarm.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( this.buildstage != 2 ) {
				return null;
			}

			if ( Map13.GetDistance( this, user ) > 1 ) {
				
				if ( !( user is Mob_Living_Silicon ) ) {
					Interface13.Browse( user, null, "window=AAlarmwires" );
					return null;
				} else if ( user is Mob_Living_Silicon && this.aidisabled ) {
					GlobalFuncs.to_chat( user, "AI control for this Air Alarm interface has been disabled." );
					Interface13.Browse( user, null, "window=air_alarm" );
					return null;
				}
			}

			if ( this.wiresexposed && ( user is Mob_Living_Silicon_Robot_Mommi || !( user is Mob_Living_Silicon ) ) ) {
				this.wires.Interact( user );
			}

			if ( !this.shorted ) {
				this.ui_interact( user );
			}
			return null;
		}

		// Function from file: alarm.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? true;

			ByTable data = null;

			data = this.get_nano_data( user, GlobalVars.FALSE );
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data, force_open );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "air_alarm.tmpl", this.name, 550, 410 );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			}
			return;
		}

		// Function from file: alarm.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			this.interact( a );
			return _default;
		}

		// Function from file: alarm.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic id_tag = null;
			string dev_type = null;

			
			if ( ( this.stat & 3 ) != 0 || !Lang13.Bool( this.areaMaster ) ) {
				return false;
			}

			if ( this.areaMaster.master_air_alarm != this ) {
				
				if ( this.master_is_operating() ) {
					return false;
				}
				this.elect_master();

				if ( this.areaMaster.master_air_alarm != this ) {
					return false;
				}
			}

			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}
			id_tag = ((dynamic)signal).data["tag"];

			if ( !Lang13.Bool( id_tag ) ) {
				return false;
			}

			if ( ((dynamic)signal).data["area"] != this.area_uid ) {
				return false;
			}

			if ( ((dynamic)signal).data["sigtype"] != "status" ) {
				return false;
			}
			dev_type = ((dynamic)signal).data["device"];

			if ( !this.areaMaster.air_scrub_names.Contains( id_tag ) && !this.areaMaster.air_vent_names.Contains( id_tag ) ) {
				this.register_env_machine( id_tag, dev_type );
			}

			if ( dev_type == "AScr" ) {
				this.areaMaster.air_scrub_info[id_tag] = ((dynamic)signal).data;
			} else if ( dev_type == "AVP" ) {
				this.areaMaster.air_vent_info[id_tag] = ((dynamic)signal).data;
			}
			return false;
		}

		// Function from file: alarm.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.wiresexposed ) {
				this.icon_state = "alarmx";
				return null;
			}

			if ( ( this.stat & 3 ) != 0 || this.shorted ) {
				this.icon_state = "alarmp";
				return null;
			}

			switch ((int)( Num13.MaxInt( this.local_danger_level, this.areaMaster.atmosalm - 1 ) )) {
				case 0:
					this.icon_state = "alarm0";
					break;
				case 1:
					this.icon_state = "alarm2";
					break;
				case 2:
					this.icon_state = "alarm1";
					break;
			}
			return null;
		}

		// Function from file: alarm.dm
		public override dynamic process(  ) {
			Ent_Static location = null;
			GasMixture environment = null;
			dynamic gas = null;
			int heat_capacity = 0;
			int energy_used = 0;
			int old_level = 0;
			int new_danger = 0;

			
			if ( ( this.stat & 3 ) != 0 || this.shorted || this.buildstage != 2 ) {
				this.use_power = 0;
				return null;
			}
			location = this.loc;

			if ( !( location is Tile_Simulated ) ) {
				return null;
			}
			environment = location.return_air();

			if ( ( environment.temperature ??0) < Convert.ToDouble( this.target_temperature - 2 ) || ( environment.temperature ??0) > Convert.ToDouble( this.target_temperature + 2 ) || this.regulating_temperature ) {
				
				if ( this.get_danger_level( this.target_temperature, this.TLV["temperature"] ) != 0 ) {
					return null;
				}

				if ( !this.regulating_temperature ) {
					this.regulating_temperature = true;
					this.visible_message( new Txt().The( this ).item().str( " clicks as it starts " ).item( ( ( environment.temperature ??0) > Convert.ToDouble( this.target_temperature ) ? "cooling" : "heating" ) ).str( " the room." ).ToString(), "You hear a click and a faint electronic hum." );
				}

				if ( Convert.ToDouble( this.target_temperature ) > 363.41 ) {
					this.target_temperature = 363.41;
				}

				if ( Convert.ToDouble( this.target_temperature ) < 233.41 ) {
					this.target_temperature = 233.41;
				}
				gas = location.remove_air( environment.total_moles * 0.25 );

				if ( Lang13.Bool( gas ) ) {
					heat_capacity = ((GasMixture)gas).heat_capacity();
					energy_used = Num13.MinInt( ((int)( Math.Abs( heat_capacity * Convert.ToDouble( gas.temperature - this.target_temperature ) ) )), 1000 );

					if ( ( environment.temperature ??0) > Convert.ToDouble( this.target_temperature ) ) {
						gas.temperature -= energy_used / heat_capacity;
					} else {
						gas.temperature += energy_used / heat_capacity;
					}
					environment.merge( gas );

					if ( Math.Abs( ( environment.temperature ??0) - Convert.ToDouble( this.target_temperature ) ) <= 0.5 ) {
						this.regulating_temperature = false;
						this.visible_message( new Txt().The( this ).item().str( " clicks quietly as it stops " ).item( ( ( environment.temperature ??0) > Convert.ToDouble( this.target_temperature ) ? "cooling" : "heating" ) ).str( " the room." ).ToString(), "You hear a click as a faint electronic humming stops." );
					}
				}
			}
			old_level = this.local_danger_level;
			new_danger = this.calculate_local_danger_level( environment );

			if ( new_danger < old_level ) {
				this.danger_averted_confidence++;
				this.use_power = 1;
			}

			if ( old_level < new_danger || this.danger_averted_confidence >= 5 && new_danger < old_level ) {
				this.setDangerLevel( new_danger );
				this.update_icon();
				this.danger_averted_confidence = 0;
				this.use_power = 2;
			}

			if ( this.mode == 4 && Convert.ToDouble( environment.return_pressure() ) < 5.066249847412109 ) {
				this.mode = 5;
				this.apply_mode();
			}

			switch ((int?)( this.rcon_setting )) {
				case 1:
					this.remote_control = false;
					break;
				case 2:
					
					if ( this.local_danger_level == 2 ) {
						this.remote_control = true;
					} else {
						this.remote_control = false;
					}
					break;
				case 3:
					this.remote_control = true;
					break;
			}
			return null;
		}

		// Function from file: alarm.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.set_frequency( this.frequency );

			if ( !this.master_is_operating() ) {
				this.elect_master();
			}
			return false;
		}

		// Function from file: alarm.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Machinery_Computer_Atmoscontrol AC = null;

			
			if ( this.wires != null ) {
				GlobalFuncs.qdel( this.wires );
				this.wires = null;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_controllers, typeof(Obj_Machinery_Computer_Atmoscontrol) )) {
				AC = _a;
				

				if ( AC.current == this ) {
					AC.current = null;
					GlobalVars.nanomanager.update_uis( this );
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: alarm.dm
		public ByTable get_nano_data( dynamic user = null, bool? fromAtmosConsole = null ) {
			fromAtmosConsole = fromAtmosConsole ?? false;

			ByTable data = null;
			ByTable vents = null;
			dynamic id_tag = null;
			ByTable vent_info = null;
			dynamic long_name = null;
			dynamic vent_data = null;
			ByTable scrubbers = null;
			dynamic id_tag2 = null;
			dynamic long_name2 = null;
			dynamic scrubber_data = null;

			data = new ByTable( 0 );
			data["air"] = this.ui_air_status();
			data["alarmActivated"] = this.alarmActivated;
			data["sensors"] = this.TLV;
			data["locked"] = !( fromAtmosConsole == true ) && !( user is Mob_Living_Silicon ) && this.locked && !GlobalFuncs.isAdminGhost( user );
			data["rcon"] = this.rcon_setting;
			data["target_temp"] = this.target_temperature - 273.41;
			data["atmos_alarm"] = this.areaMaster.atmosalm;
			data["modes"] = new ByTable()
				.Set( 1, new ByTable().Set( "name", "Filtering" ).Set( "desc", "Scrubs out contaminants" ) )
				.Set( 2, new ByTable().Set( "name", "Replace Air" ).Set( "desc", "Siphons out air while replacing" ) )
				.Set( 3, new ByTable().Set( "name", "Panic" ).Set( "desc", "Siphons air out of the room" ) )
				.Set( 4, new ByTable().Set( "name", "Cycle" ).Set( "desc", "Siphons air before replacing" ) )
				.Set( 5, new ByTable().Set( "name", "Fill" ).Set( "desc", "Shuts off scrubbers and opens vents" ) )
				.Set( 6, new ByTable().Set( "name", "Off" ).Set( "desc", "Shuts off vents and scrubbers" ) )
			;
			data["mode"] = this.mode;
			data["presets"] = new ByTable()
				.Set( 1, new ByTable().Set( "name", "Human" ).Set( "desc", "Checks for Oxygen and Nitrogen" ) )
				.Set( 2, new ByTable().Set( "name", "Vox" ).Set( "desc", "Checks for Nitrogen only" ) )
				.Set( 3, new ByTable().Set( "name", "Coldroom" ).Set( "desc", "For server rooms and freezers" ) )
			;
			data["preset"] = this.preset;
			data["screen"] = this.screen;
			vents = new ByTable();

			if ( this.areaMaster.air_vent_names.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.areaMaster.air_vent_names )) {
					id_tag = _a;
					
					vent_info = null;
					vent_info = new ByTable( 0 );
					long_name = this.areaMaster.air_vent_names[id_tag];
					vent_data = this.areaMaster.air_vent_info[id_tag];

					if ( !Lang13.Bool( vent_data ) ) {
						continue;
					}
					vent_info["id_tag"] = id_tag;
					vent_info["name"] = long_name;
					vent_info.Add( vent_data );
					vents.Add( new ByTable(new object [] { vent_info }) );
				}
			}
			data["vents"] = vents;
			scrubbers = new ByTable();

			if ( this.areaMaster.air_scrub_names.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.areaMaster.air_scrub_names )) {
					id_tag2 = _b;
					
					long_name2 = this.areaMaster.air_scrub_names[id_tag2];
					scrubber_data = this.areaMaster.air_scrub_info[id_tag2];

					if ( !Lang13.Bool( scrubber_data ) ) {
						continue;
					}
					scrubber_data["id_tag"] = id_tag2;
					scrubber_data["name"] = long_name2;
					scrubbers.Add( new ByTable(new object [] { scrubber_data }) );
				}
			}
			data["scrubbers"] = scrubbers;
			return data;
		}

		// Function from file: alarm.dm
		public ByTable ui_air_status(  ) {
			dynamic location = null;
			GasMixture environment = null;
			dynamic total = null;
			double partial_pressure = 0;
			ByTable current_settings = null;
			dynamic environment_pressure = null;
			int pressure_dangerlevel = 0;
			int oxygen_dangerlevel = 0;
			double oxygen_percent = 0;
			int nitrogen_dangerlevel = 0;
			double nitrogen_percent = 0;
			int co2_dangerlevel = 0;
			double co2_percent = 0;
			int plasma_dangerlevel = 0;
			double plasma_percent = 0;
			double other_moles = 0;
			Gas G = null;
			int other_dangerlevel = 0;
			int temperature_dangerlevel = 0;
			ByTable data = null;
			ByTable percentages = null;
			ByTable danger = null;

			location = GlobalFuncs.get_turf( this );

			if ( location == null ) {
				return null;
			}
			environment = ((Ent_Static)location).return_air();
			total = environment.oxygen + environment.carbon_dioxide + environment.toxins + environment.nitrogen;

			if ( total == 0 ) {
				return null;
			}
			partial_pressure = ( environment.temperature ??0) * 8.314 / ( environment.volume ??0);
			current_settings = this.TLV["pressure"];
			environment_pressure = environment.return_pressure();
			pressure_dangerlevel = this.get_danger_level( environment_pressure, current_settings );
			current_settings = this.TLV["oxygen"];
			oxygen_dangerlevel = this.get_danger_level( environment.oxygen * partial_pressure, current_settings );
			oxygen_percent = Num13.Round( Convert.ToDouble( environment.oxygen / total * 100 ), 2 );
			current_settings = this.TLV["nitrogen"];
			nitrogen_dangerlevel = this.get_danger_level( environment.nitrogen * partial_pressure, current_settings );
			nitrogen_percent = Num13.Round( Convert.ToDouble( environment.nitrogen / total * 100 ), 2 );
			current_settings = this.TLV["carbon_dioxide"];
			co2_dangerlevel = this.get_danger_level( environment.carbon_dioxide * partial_pressure, current_settings );
			co2_percent = Num13.Round( Convert.ToDouble( environment.carbon_dioxide / total * 100 ), 2 );
			current_settings = this.TLV["plasma"];
			plasma_dangerlevel = this.get_danger_level( environment.toxins * partial_pressure, current_settings );
			plasma_percent = Num13.Round( Convert.ToDouble( environment.toxins / total * 100 ), 2 );
			current_settings = this.TLV["other"];
			other_moles = 0;

			foreach (dynamic _a in Lang13.Enumerate( environment.trace_gases, typeof(Gas) )) {
				G = _a;
				
				other_moles += G.moles ??0;
			}
			other_dangerlevel = this.get_danger_level( other_moles * partial_pressure, current_settings );
			current_settings = this.TLV["temperature"];
			temperature_dangerlevel = this.get_danger_level( environment.temperature, current_settings );
			data = null;
			data = new ByTable( 0 );
			data["pressure"] = environment_pressure;
			data["temperature"] = environment.temperature;
			data["temperature_c"] = Num13.Round( ( environment.temperature ??0) - 273.41, 0.1 );
			percentages = null;
			percentages = new ByTable( 0 );
			percentages["oxygen"] = oxygen_percent;
			percentages["nitrogen"] = nitrogen_percent;
			percentages["co2"] = co2_percent;
			percentages["plasma"] = plasma_percent;
			percentages["other"] = other_moles;
			data["contents"] = percentages;
			danger = null;
			danger = new ByTable( 0 );
			danger["pressure"] = pressure_dangerlevel;
			danger["temperature"] = temperature_dangerlevel;
			danger["oxygen"] = oxygen_dangerlevel;
			danger["nitrogen"] = nitrogen_dangerlevel;
			danger["co2"] = co2_dangerlevel;
			danger["plasma"] = plasma_dangerlevel;
			danger["other"] = other_dangerlevel;
			danger["overall"] = Num13.MaxInt( pressure_dangerlevel, oxygen_dangerlevel, nitrogen_dangerlevel, co2_dangerlevel, plasma_dangerlevel, other_dangerlevel, temperature_dangerlevel );
			data["danger"] = danger;
			return data;
		}

		// Function from file: alarm.dm
		public void air_doors_open( bool manual = false ) {
			((Zone)this.areaMaster).OpenFirelocks();
			return;
		}

		// Function from file: alarm.dm
		public void air_doors_close( bool manual = false ) {
			((Zone)this.areaMaster).CloseFirelocks();
			return;
		}

		// Function from file: alarm.dm
		public void post_alert( int alert_level = 0 ) {
			dynamic frequency = null;
			Game_Data alert_signal = null;

			frequency = GlobalVars.radio_controller.return_frequency( this.alarm_frequency );

			if ( !Lang13.Bool( frequency ) ) {
				return;
			}
			alert_signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)alert_signal).source = this;
			((dynamic)alert_signal).transmission_method = 1;
			((dynamic)alert_signal).data["zone"] = this.areaMaster.name;
			((dynamic)alert_signal).data["type"] = "Atmospheric";

			if ( alert_level == 2 ) {
				((dynamic)alert_signal).data["alert"] = "severe";
			} else if ( alert_level == 1 ) {
				((dynamic)alert_signal).data["alert"] = "minor";
			} else if ( alert_level == 0 ) {
				((dynamic)alert_signal).data["alert"] = "clear";
			}
			frequency.post_signal( this, alert_signal );
			return;
		}

		// Function from file: alarm.dm
		public void setDangerLevel( int new_danger_level = 0 ) {
			
			if ( this.local_danger_level == new_danger_level ) {
				return;
			}
			this.local_danger_level = new_danger_level;

			if ( ((Zone)this.areaMaster).updateDangerLevel() ) {
				this.post_alert( new_danger_level );
			}
			return;
		}

		// Function from file: alarm.dm
		public void apply_mode(  ) {
			dynamic current_pressures = null;
			dynamic target_pressure = null;
			dynamic device_id = null;
			dynamic device_id2 = null;
			dynamic device_id3 = null;
			dynamic device_id4 = null;
			dynamic device_id5 = null;
			dynamic device_id6 = null;
			dynamic device_id7 = null;
			dynamic device_id8 = null;
			dynamic device_id9 = null;
			dynamic device_id10 = null;

			current_pressures = this.TLV["pressure"];
			target_pressure = ( current_pressures[2] + current_pressures[3] ) / 2;

			switch ((int?)( this.mode )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( this.areaMaster.air_scrub_names )) {
						device_id = _a;
						
						this.send_signal( device_id, new ByTable().Set( "power", 1 ).Set( "co2_scrub", 1 ).Set( "o2_scrub", this.preset == 2 ).Set( "n2_scrub", 0 ).Set( "scrubbing", 1 ).Set( "panic_siphon", 0 ) );
					}

					foreach (dynamic _b in Lang13.Enumerate( this.areaMaster.air_vent_names )) {
						device_id2 = _b;
						
						this.send_signal( device_id2, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", target_pressure ) );
					}
					break;
				case 3:
				case 4:
					
					foreach (dynamic _c in Lang13.Enumerate( this.areaMaster.air_scrub_names )) {
						device_id3 = _c;
						
						this.send_signal( device_id3, new ByTable().Set( "power", 1 ).Set( "panic_siphon", 1 ) );
					}

					foreach (dynamic _d in Lang13.Enumerate( this.areaMaster.air_vent_names )) {
						device_id4 = _d;
						
						this.send_signal( device_id4, new ByTable().Set( "power", 0 ) );
					}
					break;
				case 2:
					
					foreach (dynamic _e in Lang13.Enumerate( this.areaMaster.air_scrub_names )) {
						device_id5 = _e;
						
						this.send_signal( device_id5, new ByTable().Set( "power", 1 ).Set( "panic_siphon", 1 ) );
					}

					foreach (dynamic _f in Lang13.Enumerate( this.areaMaster.air_vent_names )) {
						device_id6 = _f;
						
						this.send_signal( device_id6, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", target_pressure ) );
					}
					break;
				case 5:
					
					foreach (dynamic _g in Lang13.Enumerate( this.areaMaster.air_scrub_names )) {
						device_id7 = _g;
						
						this.send_signal( device_id7, new ByTable().Set( "power", 0 ) );
					}

					foreach (dynamic _h in Lang13.Enumerate( this.areaMaster.air_vent_names )) {
						device_id8 = _h;
						
						this.send_signal( device_id8, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", target_pressure ) );
					}
					break;
				case 6:
					
					foreach (dynamic _i in Lang13.Enumerate( this.areaMaster.air_scrub_names )) {
						device_id9 = _i;
						
						this.send_signal( device_id9, new ByTable().Set( "power", 0 ) );
					}

					foreach (dynamic _j in Lang13.Enumerate( this.areaMaster.air_vent_names )) {
						device_id10 = _j;
						
						this.send_signal( device_id10, new ByTable().Set( "power", 0 ) );
					}
					break;
			}
			return;
		}

		// Function from file: alarm.dm
		public bool send_signal( dynamic target = null, ByTable command = null ) {
			Game_Data signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data = command;
			((dynamic)signal).data["tag"] = target;
			((dynamic)signal).data["sigtype"] = "command";
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_FROM_AIRALARM );
			return true;
		}

		// Function from file: alarm.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_TO_AIRALARM );
			return;
		}

		// Function from file: alarm.dm
		public void refresh_all(  ) {
			dynamic id_tag = null;
			dynamic I = null;
			dynamic id_tag2 = null;
			dynamic I2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.areaMaster.air_vent_names )) {
				id_tag = _a;
				
				I = this.areaMaster.air_vent_info[id_tag];

				if ( Lang13.Bool( I ) && Convert.ToDouble( I["timestamp"] + 50 ) > Game13.time ) {
					continue;
				}
				this.send_signal( id_tag, new ByTable(new object [] { "status" }) );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.areaMaster.air_scrub_names )) {
				id_tag2 = _b;
				
				I2 = this.areaMaster.air_scrub_info[id_tag2];

				if ( Lang13.Bool( I2 ) && Convert.ToDouble( I2["timestamp"] + 50 ) > Game13.time ) {
					continue;
				}
				this.send_signal( id_tag2, new ByTable(new object [] { "status" }) );
			}
			return;
		}

		// Function from file: alarm.dm
		public void register_env_machine( dynamic m_id = null, string device_type = null ) {
			string new_name = null;

			
			if ( device_type == "AVP" ) {
				new_name = "" + this.areaMaster.name + " Vent Pump #" + ( this.areaMaster.air_vent_names.len + 1 );
				this.areaMaster.air_vent_names[m_id] = new_name;
			} else if ( device_type == "AScr" ) {
				new_name = "" + this.areaMaster.name + " Air Scrubber #" + ( this.areaMaster.air_scrub_names.len + 1 );
				this.areaMaster.air_scrub_names[m_id] = new_name;
			} else {
				return;
			}
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.send_signal( m_id, new ByTable().Set( "init", new_name ) );
				return;
			}));
			return;
		}

		// Function from file: alarm.dm
		public int get_danger_level( dynamic current_value = null, ByTable danger_levels = null ) {
			
			if ( !( danger_levels != null ) || !( danger_levels.len != 0 ) ) {
				return 0;
			}

			if ( Convert.ToDouble( current_value ) >= Convert.ToDouble( danger_levels[4] ) && Convert.ToDouble( danger_levels[4] ) > 0 || Convert.ToDouble( current_value ) <= Convert.ToDouble( danger_levels[1] ) ) {
				return 2;
			}

			if ( Convert.ToDouble( current_value ) >= Convert.ToDouble( danger_levels[3] ) && Convert.ToDouble( danger_levels[3] ) > 0 || Convert.ToDouble( current_value ) <= Convert.ToDouble( danger_levels[2] ) ) {
				return 1;
			}
			return 0;
		}

		// Function from file: alarm.dm
		public bool elect_master(  ) {
			Obj_Machinery_Alarm AA = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.areaMaster, typeof(Obj_Machinery_Alarm) )) {
				AA = _a;
				

				if ( !( ( AA.stat & 3 ) != 0 ) ) {
					this.areaMaster.master_air_alarm = AA;
					return true;
				}
			}
			return false;
		}

		// Function from file: alarm.dm
		public bool master_is_operating(  ) {
			return this.areaMaster.master_air_alarm != null && !( ( this.areaMaster.master_air_alarm.stat & 3 ) != 0 );
		}

		// Function from file: alarm.dm
		public int calculate_local_danger_level( GasMixture environment = null ) {
			double partial_pressure = 0;
			dynamic environment_pressure = null;
			double other_moles = 0;
			Gas G = null;
			int pressure_dangerlevel = 0;
			int oxygen_dangerlevel = 0;
			int nitrogen_dangerlevel = 0;
			int co2_dangerlevel = 0;
			int plasma_dangerlevel = 0;
			int temperature_dangerlevel = 0;
			int other_dangerlevel = 0;

			
			if ( this.wires.IsIndexCut( GlobalVars.AALARM_WIRE_AALARM ) != 0 ) {
				return 2;
			}

			if ( environment == null ) {
				return 0;
			}
			partial_pressure = ( environment.temperature ??0) * 8.314 / ( environment.volume ??0);
			environment_pressure = environment.return_pressure();
			other_moles = 0;

			foreach (dynamic _a in Lang13.Enumerate( environment.trace_gases, typeof(Gas) )) {
				G = _a;
				
				other_moles += G.moles ??0;
			}
			pressure_dangerlevel = this.get_danger_level( environment_pressure, this.TLV["pressure"] );
			oxygen_dangerlevel = this.get_danger_level( environment.oxygen * partial_pressure, this.TLV["oxygen"] );
			nitrogen_dangerlevel = this.get_danger_level( environment.nitrogen * partial_pressure, this.TLV["nitrogen"] );
			co2_dangerlevel = this.get_danger_level( environment.carbon_dioxide * partial_pressure, this.TLV["carbon_dioxide"] );
			plasma_dangerlevel = this.get_danger_level( environment.toxins * partial_pressure, this.TLV["plasma"] );
			temperature_dangerlevel = this.get_danger_level( environment.temperature, this.TLV["temperature"] );
			other_dangerlevel = this.get_danger_level( other_moles * partial_pressure, this.TLV["other"] );
			return Num13.MaxInt( pressure_dangerlevel, oxygen_dangerlevel, co2_dangerlevel, nitrogen_dangerlevel, plasma_dangerlevel, other_dangerlevel, temperature_dangerlevel );
		}

		// Function from file: alarm.dm
		public void first_run(  ) {
			this.area_uid = this.areaMaster.uid;
			this.name = "" + this.areaMaster.name + " Air Alarm";
			this.apply_preset( true );
			return;
		}

		// Function from file: alarm.dm
		public void apply_preset( bool? no_cycle_after = null ) {
			no_cycle_after = no_cycle_after ?? false;

			Obj_Machinery_Alarm AA = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.areaMaster, typeof(Obj_Machinery_Alarm) )) {
				AA = _a;
				

				if ( !( ( AA.stat & 3 ) != 0 ) && !AA.shorted && AA.preset != this.preset ) {
					AA.preset = this.preset;
					this.apply_preset( true );
				}
			}
			this.TLV["oxygen"] = new ByTable(new object [] { 16, 19, 135, 140 });
			this.TLV["nitrogen"] = new ByTable(new object [] { -1, -1, -1, -1 });
			this.TLV["carbon_dioxide"] = new ByTable(new object [] { -1, -1, 5, 10 });
			this.TLV["plasma"] = new ByTable(new object [] { -1, -1, 0.2, 0.5 });
			this.TLV["other"] = new ByTable(new object [] { -1, -1, 0.5, 1 });
			this.TLV["pressure"] = new ByTable(new object [] { 81.51, 91.19249725341797, 111.4574966430664, 121.59 });
			this.TLV["temperature"] = new ByTable(new object [] { 243.41, 273.41, 313.41, 343.41 });
			this.target_temperature = 293.41;

			switch ((int?)( this.preset )) {
				case 2:
					this.TLV["nitrogen"] = new ByTable(new object [] { 16, 19, 135, 140 });
					this.TLV["oxygen"] = new ByTable(new object [] { -1, -1, 0.5, 1 });
					break;
				case 3:
					this.TLV["oxygen"] = new ByTable(new object [] { -1, -1, -1, -1 });
					this.TLV["carbon_dioxide"] = new ByTable(new object [] { -1, -1, 5, 10 });
					this.TLV["plasma"] = new ByTable(new object [] { -1, -1, 0.2, 0.5 });
					this.TLV["other"] = new ByTable(new object [] { -1, -1, 0.5, 1 });
					this.TLV["pressure"] = new ByTable(new object [] { 0, 10.132499694824219, 141.85499572753906, 162.11 });
					this.TLV["temperature"] = new ByTable(new object [] { 20, 40, 140, 160 });
					this.target_temperature = 90;
					break;
			}

			if ( !( no_cycle_after == true ) ) {
				this.mode = 4;
				this.apply_mode();
			}
			return;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}