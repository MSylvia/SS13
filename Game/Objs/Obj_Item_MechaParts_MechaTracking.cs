// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaTracking : Obj_Item_MechaParts {

		public bool lockdown = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "programming=2;magnets=2";
			this.icon = "icons/obj/device.dmi";
			this.icon_state = "motion2";
		}

		public Obj_Item_MechaParts_MechaTracking ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: mecha_control_console.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: mecha_control_console.dm
		public override dynamic emp_act( int severity = 0 ) {
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: mecha_control_console.dm
		public dynamic get_mecha_log(  ) {
			Ent_Static M = null;

			
			if ( !Lang13.Bool( this.in_mecha() ) ) {
				return 0;
			}
			M = this.loc;
			return ((Obj_Mecha)M).get_log_html();
		}

		// Function from file: mecha_control_console.dm
		[VerbInfo( name: "lockdown" )]
		public void f_lockdown(  ) {
			dynamic M = null;

			M = this.in_mecha();

			if ( Lang13.Bool( M ) ) {
				
				if ( Lang13.Bool( M.state ) ) {
					return;
				}
				M.log_message( "Emergency maintenance protocols activated.", 1 );

				if ( Lang13.Bool( M.occupant ) ) {
					((Obj_Mecha)M).occupant_message( "<font color='red'>Exosuit emergency maintenance protocols activated.</font>" );
					GlobalFuncs.to_chat( M.occupant, new Sound( "sound/mecha/mechlockdown.ogg", null, false ) );
				}
				M.state = 1;
			}
			return;
		}

		// Function from file: mecha_control_console.dm
		public void shock(  ) {
			dynamic M = null;

			M = this.in_mecha();

			if ( Lang13.Bool( M ) ) {
				M.log_message( "Exosuit tracking beacon self-destruct activated.", 1 );
				((Obj_Mecha)M).occupant_message( "<font color='red'><b>Exosuit tracking beacon short-circuits!</b></font>" );
				GlobalFuncs.to_chat( M.occupant, new Sound( "sound/machines/warning-buzzer.ogg", null, false ) );

				if ( Lang13.Bool( ((Obj_Mecha)M).get_charge() ) ) {
					
					if ( Convert.ToDouble( M.cell.charge ) < 5000 && Lang13.Bool( M ) ) {
						((Obj_Mecha)M).use_power( M.cell.charge / 4 );
						((Obj_Mecha)M).take_damage( 25, "energy" );
					}

					if ( Convert.ToDouble( M.cell.charge ) > 5000 && Lang13.Bool( M ) ) {
						((Obj_Mecha)M).take_damage( Num13.Floor( Convert.ToDouble( M.cell.charge / 5000 ) ) * 50, "energy" );
						((Obj_Mecha)M).use_power( Num13.Floor( Convert.ToDouble( M.cell.charge / 5000 ) ) * Rand13.Int( 4000, 5000 ) );
					}
				}
			}
			((Obj_Mecha)M).check_for_internal_damage( new ByTable(new object [] { 1, 2, 16, 4 }), true );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: mecha_control_console.dm
		public dynamic in_mecha(  ) {
			
			if ( this.loc is Obj_Mecha ) {
				return this.loc;
			}
			return 0;
		}

		// Function from file: mecha_control_console.dm
		public dynamic get_mecha_info(  ) {
			Ent_Static M = null;
			dynamic cell_charge = null;
			string answer = null;
			Ent_Static RM = null;

			
			if ( !Lang13.Bool( this.in_mecha() ) ) {
				return 0;
			}
			M = this.loc;
			cell_charge = ((Obj_Mecha)M).get_charge();
			answer = "<b>Name:</b> " + M.name + "<br>\n						<b>Integrity:</b> " + ((dynamic)M).health / Lang13.Initial( M, "health" ) * 100 + "%<br>\n						<b>Cell charge:</b> " + ( cell_charge == null ? "Not found" : "" + ((Obj_Item_Weapon_Cell)((dynamic)M).cell).percent() + "%" ) + "<br>\n						<b>Airtank:</b> " + ((dynamic)M).return_pressure() + "kPa<br>\n						<b>Pilot:</b> " + ( Lang13.Bool( ((dynamic)M).occupant ) || Lang13.Bool( "None" ) ) + "<br>\n						<b>Location:</b> " + ( Lang13.Bool( GlobalFuncs.get_area( M ) ) || Lang13.Bool( "Unknown" ) ) + "<br>\n						<b>Active equipment:</b> " + ( Lang13.Bool( ((dynamic)M).selected ) || Lang13.Bool( "None" ) );

			if ( M is Obj_Mecha_Working_Ripley ) {
				RM = M;
				answer += "<b> Used cargo space:</b> " + ((dynamic)RM).cargo.len / Convert.ToDouble( ((dynamic)RM).cargo_capacity ) * 100 + "%<br>";
			}
			return answer;
		}

	}

}