// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Bed_Chair_Vehicle : Obj_Structure_Bed_Chair {

		public string nick = null;
		public Effect_Effect_System_SparkSpread spark_system = new Effect_Effect_System_SparkSpread();
		public int empstun = 0;
		public double health = 100;
		public double max_health = 100;
		public bool destroyed = false;
		public int? inertia_dir = 0;
		public bool can_spacemove = false;
		public bool ethereal = false;
		public Type keytype = null;
		public dynamic mykey = null;
		public dynamic vin = null;
		public DelayController move_delayer = new DelayController( true, 10000 );
		public int movement_delay = 0;
		public dynamic occupant = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/vehicles.dmi";
		}

		// Function from file: vehicle.dm
		public Obj_Structure_Bed_Chair_Vehicle ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.processing_objects.Or( this );

			if ( !Lang13.Bool( this.nick ) ) {
				this.nick = this.name;
			}

			if ( this.keytype != null && !Lang13.Bool( this.vin ) ) {
				this.mykey = Lang13.Call( this.keytype, this.loc );
				this.mykey.paired_to = this;
			}
			return;
		}

		// Function from file: vehicle.dm
		public override bool lock_atom( dynamic AM = null ) {
			bool _default = false;

			_default = base.lock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}
			this.update_mob();
			this.occupant = AM;
			return _default;
		}

		// Function from file: vehicle.dm
		public override bool unlock_atom( dynamic AM = null ) {
			bool _default = false;

			_default = base.unlock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}
			AM.pixel_x = 0;
			AM.pixel_y = 0;

			if ( this.occupant == AM ) {
				this.occupant = null;
			}
			return _default;
		}

		// Function from file: vehicle.dm
		public override dynamic Bump(Ent_Static Obstacle = null, dynamic yes = null) {
			
			if ( Obstacle == this || this.locked_atoms.len != 0 && Obstacle == this.locked_atoms[1] ) {
				return null;
			}

			if ( Obstacle is Obj_Structure ) {

				if (!Lang13.Bool( ((Obj_Structure)Obstacle).anchored)) {
					((Obj_Structure)Obstacle).Move(Map13.GetStep(Obstacle, this.dir));
				}
			}
			base.Bump( Obstacle );
			return null;
		}

		// Function from file: vehicle.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					this.health -= 100;
					break;
				case 2:
					this.health -= 75;
					break;
				case 3:
					this.health -= 45;
					break;
			}
			this.HealthCheck();
			return false;
		}

		// Function from file: vehicle.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			bool hitrider = false;
			int? act = null;
			dynamic H = null;

			hitrider = false;

			if ( Proj is Obj_Item_Projectile_Ion ) {
				((Obj_Item_Projectile)Proj).on_hit( this, 2 );
				return null;
			}

			if ( Lang13.Bool( this.occupant ) ) {
				
				if ( Rand13.PercentChance( 75 ) ) {
					hitrider = true;
					act = ((Ent_Static)this.occupant).bullet_act( Proj );

					if ( ( act ??0) >= 0 ) {
						this.visible_message( new Txt( "<span class='warning'>" ).item( this.occupant ).str( " is hit by " ).the( Proj ).item().str( "!" ).ToString() );

						if ( Proj is Obj_Item_Projectile_Energy ) {
							this.unlock_atom( this.occupant );
						}
					}
					return null;
				}

				if ( Proj is Obj_Item_Projectile_Energy_Electrode ) {
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.visible_message( new Txt( "<span class='warning'>" ).The( this.name ).item().str( " absorbs " ).the( Proj ).item().ToString() );

						if ( !( this.occupant is Mob_Living_Carbon_Human ) ) {
							((Ent_Static)this.occupant).bullet_act( Proj );
						} else {
							H = this.occupant;
							((Mob_Living)H).electrocute_act( 0, this, 1, false );
						}
						this.unlock_atom( this.occupant );
					}
				}
			}

			if ( !hitrider ) {
				this.visible_message( new Txt( "<span class='warning'>" ).item( Proj ).str( " hits " ).the( this.nick ).item().str( "!</span>" ).ToString() );

				if ( !Proj.nodamage && Proj.damage_type == "brute" || Proj.damage_type == "fire" ) {
					this.health -= Convert.ToDouble( Proj.damage );
				}
				this.HealthCheck();
			}
			return null;
		}

		// Function from file: vehicle.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 1:
					this.empstun = Rand13.Int( 5, 10 );
					break;
				case 2:
					this.empstun = Rand13.Int( 1, 5 );
					break;
			}
			this.visible_message( "<span class='danger'>The " + this.name + "'s motor short circuits!</span>" );
			this.spark_system.attach( this );
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.start();
			return null;
		}

		// Function from file: vehicle.dm
		public override dynamic update_dir(  ) {
			dynamic _default = null;

			_default = base.update_dir();
			this.update_mob();
			return _default;
		}

		// Function from file: vehicle.dm
		public override void handle_layer(  ) {
			
			if ( this.dir == GlobalVars.SOUTH ) {
				this.layer = GlobalVars.FLY_LAYER;
			} else {
				this.layer = GlobalVars.OBJ_LAYER;
			}
			return;
		}

		// Function from file: vehicle.dm
		public override void buckle_mob( dynamic M = null, dynamic user = null ) {
			
			if ( M is Mob_Living_SimpleAnimal ) {
				return;
			}
			base.buckle_mob( (object)(M), (object)(user) );
			return;
		}

		// Function from file: vehicle.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			bool can_pull_tether = false;
			Chain tether_datum = null;
			Ent_Static T = null;
			Chain tether_datum2 = null;

			
			if ( Lang13.Bool( M.stat ) || M.stunned != 0 || M.weakened != 0 || M.paralysis != 0 || this.destroyed ) {
				this.unlock_atom( M );
				return null;
			}

			if ( !this.check_key( M ) ) {
				GlobalFuncs.to_chat( M, new Txt( "<span class='notice'>You'll need the keys in one of your hands to drive " ).the( this ).item().str( ".</span>" ).ToString() );
				return 0;
			}

			if ( this.empstun > 0 ) {
				
				if ( M != null ) {
					GlobalFuncs.to_chat( M, new Txt( "<span class='warning'>" ).The( this ).item().str( " is unresponsive.</span>" ).ToString() );
				}
				return 0;
			}

			if ( this.move_delayer.blocked() ) {
				return 0;
			}

			if ( GlobalFuncs.get_turf( this ) is Tile_Space || Lang13.Bool( this.areaMaster ) && this.areaMaster.has_gravity == false ) {
				
				if ( !this.Process_Spacemove( false ) ) {
					return 0;
				}
			}
			can_pull_tether = false;

			if ( M.tether != null ) {
				
				if ( Lang13.Bool( M.tether.attempt_to_follow( M, Map13.GetStep( this, ((int)( direction ??0 )) ) ) ) ) {
					can_pull_tether = true;
				} else {
					tether_datum = ((dynamic)M.tether).chain_datum;
					tether_datum.snap = true;
					tether_datum.Delete_Chain();
				}
			}
			T = this.loc;
			Map13.Step( this, ((int)( direction ??0 )) );
			this.delayNextMove( this.getMovementDelay() );

			if ( T != this.loc ) {
				((Mob_Living)M).handle_hookchain( direction );
			}

			if ( M.tether != null && can_pull_tether ) {
				((Obj_Effect_Overlay_Chain)M.tether).follow( M, T );
				tether_datum2 = ((dynamic)M.tether).chain_datum;

				if ( !tether_datum2.Check_Integrity() ) {
					tether_datum2.snap = true;
					tether_datum2.Delete_Chain();
				}
			}
			this.update_mob();
			return 0;
		}

		// Function from file: vehicle.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0 ) ) ) {
					
					if ( this.destroyed ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this.name ).item().str( " is destroyed beyond repair.</span>" ).ToString() );
					}
					this.add_fingerprint( b );
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " has fixed some of the dents on " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You fix some of the dents on " ).the( this ).item().str( "</span>" ).ToString() );
					this.health += 20;
					this.HealthCheck();
				} else {
					GlobalFuncs.to_chat( b, "Need more welding fuel!" );
					return null;
				}
			} else if ( a is Obj_Item_Key ) {
				
				if ( this.keytype != null ) {
					GlobalFuncs.to_chat( b, new Txt( "Hold " ).the( a ).item().str( " in one of your hands while you drive " ).the( this ).item().str( "." ).ToString() );
				} else {
					GlobalFuncs.to_chat( b, "You don't need a key." );
				}
			}
			return null;
		}

		// Function from file: vehicle.dm
		public override dynamic process(  ) {
			
			if ( this.empstun > 0 ) {
				this.empstun--;
			}

			if ( this.empstun < 0 ) {
				this.empstun = 0;
			}
			return null;
		}

		// Function from file: vehicle.dm
		public virtual void die(  ) {
			this.destroyed = true;
			this.density = false;
			this.visible_message( new Txt( "<span class='warning'>" ).The( this.nick ).item().str( " explodes!</span>" ).ToString() );
			GlobalFuncs.explosion( this.loc, -1, 0, 2, 7, 10 );
			this.icon_state = "pussywagon_destroyed";
			this.unlock_atom( this.occupant );
			return;
		}

		// Function from file: vehicle.dm
		public virtual void HealthCheck(  ) {
			
			if ( this.health > this.max_health ) {
				this.health = this.max_health;
			}

			if ( this.health <= 0 && !this.destroyed ) {
				this.die();
			}
			return;
		}

		// Function from file: vehicle.dm
		public virtual void update_mob(  ) {
			
			if ( !Lang13.Bool( this.occupant ) ) {
				return;
			}

			switch ((int)( this.dir )) {
				case 2:
					this.occupant.pixel_x = 0;
					this.occupant.pixel_y = 7;
					break;
				case 8:
					this.occupant.pixel_x = 13;
					this.occupant.pixel_y = 7;
					break;
				case 1:
					this.occupant.pixel_x = 0;
					this.occupant.pixel_y = 4;
					break;
				case 4:
					this.occupant.pixel_x = -13;
					this.occupant.pixel_y = 7;
					break;
			}
			return;
		}

		// Function from file: vehicle.dm
		public virtual bool can_buckle( Mob M = null, Mob user = null ) {
			
			if ( M != user || !( user is Mob_Living_Carbon_Human ) || !this.Adjacent( user ) || user.restrained() || user.lying == true || Lang13.Bool( user.stat ) || Lang13.Bool( user.locked_to ) || this.destroyed || Lang13.Bool( this.occupant ) ) {
				return false;
			}
			return true;
		}

		// Function from file: vehicle.dm
		public bool Process_Spacemove( bool? check_drift = null, dynamic user = null ) {
			check_drift = check_drift ?? false;

			int dense_object = 0;
			dynamic turf = null;
			Obj O = null;
			dynamic turf2 = null;
			Obj O2 = null;

			
			if ( this.can_spacemove && Lang13.Bool( this.occupant ) ) {
				return true;
			}
			dense_object = 0;

			if ( !Lang13.Bool( user ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 1 ) )) {
					turf = _a;
					

					if ( turf is Tile_Space ) {
						continue;
					}

					if ( turf is Tile_Simulated_Floor && Lang13.Bool( this.areaMaster ) && this.areaMaster.has_gravity == false ) {
						continue;
					}
					dense_object++;
					break;
				}

				if ( !( dense_object != 0 ) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), Map13.FetchInViewExcludeThis( this, 1 ) ) ) ) {
					dense_object++;
				}

				if ( !( dense_object != 0 ) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Catwalk), Map13.FetchInViewExcludeThis( this, 1 ) ) ) ) {
					dense_object++;
				}

				if ( !( dense_object != 0 ) ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 1 ), typeof(Obj) )) {
						O = _b;
						

						if ( O != null && O.density && Lang13.Bool( O.anchored ) ) {
							dense_object++;
							break;
						}
					}
				}
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInViewExcludeThis( user, 1 ) )) {
					turf2 = _c;
					

					if ( turf2 is Tile_Space ) {
						continue;
					}

					if ( turf2 is Tile_Simulated_Floor && Lang13.Bool( this.areaMaster ) && this.areaMaster.has_gravity == false ) {
						continue;
					}
					dense_object++;
					break;
				}

				if ( !( dense_object != 0 ) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), Map13.FetchInViewExcludeThis( user, 1 ) ) ) ) {
					dense_object++;
				}

				if ( !( dense_object != 0 ) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Catwalk), Map13.FetchInViewExcludeThis( this, 1 ) ) ) ) {
					dense_object++;
				}

				if ( !( dense_object != 0 ) ) {
					
					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInViewExcludeThis( user, 1 ), typeof(Obj) )) {
						O2 = _d;
						

						if ( O2 != null && O2.density && Lang13.Bool( O2.anchored ) ) {
							dense_object++;
							break;
						}
					}
				}
			}

			if ( !( dense_object != 0 ) ) {
				return false;
			}

			if ( Rand13.PercentChance( 5 ) ) {
				GlobalFuncs.to_chat( this, "<span class='bnotice'>You slipped!</span>" );
				this.inertia_dir = this.last_move;
				Map13.Step( this, this.inertia_dir ??0 );
				return false;
			}
			this.inertia_dir = 0;
			return true;
		}

		// Function from file: vehicle.dm
		public virtual bool check_key( Mob user = null ) {
			
			if ( !( this.keytype != null ) ) {
				return true;
			}

			if ( Lang13.Bool( this.mykey ) ) {
				return user.l_hand == this.mykey || user.r_hand == this.mykey;
			}
			return false;
		}

		// Function from file: vehicle.dm
		public void delayNextMove( double delay = 0, bool? additive = null ) {
			additive = additive ?? false;

			this.move_delayer.delayNext( delay, additive );
			return;
		}

		// Function from file: vehicle.dm
		public virtual double getMovementDelay(  ) {
			return this.movement_delay;
		}

	}

}