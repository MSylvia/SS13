// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_HeatExchanger : Obj_Machinery_Atmospherics_Unary {

		public Obj_Machinery_Atmospherics_Unary_HeatExchanger partner = null;
		public int update_cycle = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/atmospherics/heat_exchanger.dmi";
			this.icon_state = "intact";
		}

		public Obj_Machinery_Atmospherics_Unary_HeatExchanger ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: heat_exchanger.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			int air_heat_capacity = 0;
			int other_air_heat_capacity = 0;
			int combined_heat_capacity = 0;
			double? old_temperature = null;
			double? other_old_temperature = null;
			double combined_energy = 0;
			double new_temperature = 0;

			_default = base.process();

			if ( !( this.partner != null ) || !( GlobalVars.air_master != null ) || GlobalVars.air_master.current_cycle <= this.update_cycle ) {
				return _default;
			}
			this.update_cycle = GlobalVars.air_master.current_cycle;
			this.partner.update_cycle = GlobalVars.air_master.current_cycle;
			air_heat_capacity = this.air_contents.heat_capacity();
			other_air_heat_capacity = this.partner.air_contents.heat_capacity();
			combined_heat_capacity = other_air_heat_capacity + air_heat_capacity;
			old_temperature = this.air_contents.temperature;
			other_old_temperature = this.partner.air_contents.temperature;

			if ( combined_heat_capacity > 0 ) {
				combined_energy = ( this.partner.air_contents.temperature ??0) * other_air_heat_capacity + air_heat_capacity * ( this.air_contents.temperature ??0);
				new_temperature = combined_energy / combined_heat_capacity;
				this.air_contents.temperature = new_temperature;
				this.partner.air_contents.temperature = new_temperature;
			}

			if ( this.network != null ) {
				
				if ( Math.Abs( ( old_temperature ??0) - ( this.air_contents.temperature ??0) ) > 1 ) {
					((dynamic)this.network).update = 1;
				}
			}

			if ( this.partner.network != null ) {
				
				if ( Math.Abs( ( other_old_temperature ??0) - ( this.partner.air_contents.temperature ??0) ) > 1 ) {
					((dynamic)this.partner.network).update = 1;
				}
			}
			return 1;
		}

		// Function from file: heat_exchanger.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			int partner_connect = 0;
			Obj_Machinery_Atmospherics_Unary_HeatExchanger target = null;

			
			if ( !( this.partner != null ) ) {
				partner_connect = Num13.Rotate( this.dir, 180 );

				foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this, partner_connect ), typeof(Obj_Machinery_Atmospherics_Unary_HeatExchanger) )) {
					target = _a;
					

					if ( ( target.dir & Map13.GetDistance( this, target ) ) != 0 ) {
						this.partner = target;
						this.partner.partner = this;
						break;
					}
				}
			}
			base.initialize( suppress_icon_check );
			return false;
		}

		// Function from file: heat_exchanger.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.node != null ) {
				this.icon_state = "intact";
			} else {
				this.icon_state = "exposed";
			}
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

	}

}