// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Telecomms_Server : Obj_Machinery_Computer_Telecomms {

		public bool screen = false;
		public ByTable servers = new ByTable();
		public Obj_Machinery_Telecomms SelectedServer = null;
		public dynamic network = "NULL";
		public string temp = "";
		public bool universal_translate = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/comm_server";
			this.req_access = new ByTable(new object [] { 61 });
			this.icon_state = "comm_serv";
		}

		public Obj_Machinery_Computer_Telecomms_Server ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: logbrowser.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/sparks4.ogg", 75, 1 );
				this.emagged = 1;
				GlobalFuncs.to_chat( user, "<span class='notice'>You you disable the security protocols</span>" );
				return 1;
			}
			return 0;
		}

		// Function from file: logbrowser.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: logbrowser.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Obj_Machinery_Telecomms T = null;
			Obj_Machinery_Telecomms_Server T2 = null;
			dynamic D = null;
			dynamic newnet = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			this.add_fingerprint( Task13.User );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["viewserver"] ) ) {
				this.screen = true;

				foreach (dynamic _a in Lang13.Enumerate( this.servers, typeof(Obj_Machinery_Telecomms) )) {
					T = _a;
					

					if ( T.id == href_list["viewserver"] ) {
						this.SelectedServer = T;
						break;
					}
				}
			}

			if ( Lang13.Bool( href_list["operation"] ) ) {
				
				dynamic _c = href_list["operation"]; // Was a switch-case, sorry for the mess.
				if ( _c=="release" ) {
					this.servers = new ByTable();
					this.screen = false;
				} else if ( _c=="mainmenu" ) {
					this.screen = false;
				} else if ( _c=="scan" ) {
					
					if ( this.servers.len > 0 ) {
						this.temp = "<font color = #D70B00>- FAILED: CANNOT PROBE WHEN BUFFER FULL -</font color>";
					} else {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, 25 ), typeof(Obj_Machinery_Telecomms_Server) )) {
							T2 = _b;
							

							if ( T2.network == this.network ) {
								this.servers.Add( T2 );
							}
						}

						if ( !( this.servers.len != 0 ) ) {
							this.temp = "<font color = #D70B00>- FAILED: UNABLE TO LOCATE SERVERS IN [" + this.network + "] -</font color>";
						} else {
							this.temp = "<font color = #336699>- " + this.servers.len + " SERVERS PROBED & BUFFERED -</font color>";
						}
						this.screen = false;
					}
				}
			}

			if ( Lang13.Bool( href_list["delete"] ) ) {
				
				if ( !this.allowed( Task13.User ) && !( this.emagged != 0 ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>ACCESS DENIED.</span>" );
					return null;
				}

				if ( this.SelectedServer != null ) {
					D = ((dynamic)this.SelectedServer).log_entries[String13.ParseNumber( href_list["delete"] )];
					this.temp = "<font color = #336699>- DELETED ENTRY: " + D.name + " -</font color>";
					((dynamic)this.SelectedServer).log_entries.Remove( D );
					GlobalFuncs.qdel( D );
					D = null;
				} else {
					this.temp = "<font color = #D70B00>- FAILED: NO SELECTED MACHINE -</font color>";
				}
			}

			if ( Lang13.Bool( href_list["network"] ) ) {
				newnet = Interface13.Input( Task13.User, "Which network do you want to view?", "Comm Monitor", this.network, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( newnet ) && false ) {
					
					if ( Lang13.Length( newnet ) > 15 ) {
						this.temp = "<font color = #D70B00>- FAILED: NETWORK TAG STRING TOO LENGHTLY -</font color>";
					} else {
						this.network = newnet;
						this.screen = false;
						this.servers = new ByTable();
						this.temp = "<font color = #336699>- NEW NETWORK TAG SET IN ADDRESS [" + this.network + "] -</font color>";
					}
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: logbrowser.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			Obj_Machinery_Telecomms T = null;
			int i = 0;
			CommLogEntry C = null;
			string race = null;
			string language = null;
			dynamic mobtype = null;
			dynamic humans = null;
			dynamic monkeys = null;
			dynamic silicons = null;
			dynamic slimes = null;
			dynamic animals = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "<TITLE>Telecommunication Server Monitor</TITLE><center><b>Telecommunications Server Monitor</b></center>";

			switch ( this.screen ) {
				case false:
					dat += new Txt( "<br>" ).item( this.temp ).str( "<br>\n				<br>Current Network: <a href='?src=" ).Ref( this ).str( ";network=1'>" ).item( this.network ).str( "</a><br>" ).ToString();

					if ( this.servers.len != 0 ) {
						dat += "<br>Detected Telecommunication Servers:<ul>";

						foreach (dynamic _a in Lang13.Enumerate( this.servers, typeof(Obj_Machinery_Telecomms) )) {
							T = _a;
							
							dat += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";viewserver=" ).item( T.id ).str( "'>" ).Ref( T ).str( " " ).item( T.name ).str( "</a> (" ).item( T.id ).str( ")</li>" ).ToString();
						}
						dat += new Txt( "</ul>\n					<br><a href='?src=" ).Ref( this ).str( ";operation=release'>[Flush Buffer]</a>" ).ToString();
					} else {
						dat += new Txt( "<br>No servers detected. Scan for servers: <a href='?src=" ).Ref( this ).str( ";operation=scan'>[Scan]</a>" ).ToString();
					}
					break;
				case true:
					dat += new Txt( "<br>" ).item( this.temp ).str( "<br>\n				<center><a href='?src=" ).Ref( this ).str( ";operation=mainmenu'>[Main Menu]</a>     <a href='?src=" ).Ref( this ).str( ";operation=refresh'>[Refresh]</a></center>\n				<br>Current Network: " ).item( this.network ).str( "\n				<br>Selected Server: " ).item( this.SelectedServer.id ).ToString();

					if ( Convert.ToDouble( ((dynamic)this.SelectedServer).totaltraffic ) >= 1024 ) {
						dat += "<br>Total recorded traffic: " + Num13.Floor( Convert.ToDouble( ((dynamic)this.SelectedServer).totaltraffic / 1024 ) ) + " Terrabytes<br><br>";
					} else {
						dat += "<br>Total recorded traffic: " + ((dynamic)this.SelectedServer).totaltraffic + " Gigabytes<br><br>";
					}
					dat += "Stored Logs: <ol>";
					i = 0;

					foreach (dynamic _b in Lang13.Enumerate( ((dynamic)this.SelectedServer).log_entries, typeof(CommLogEntry) )) {
						C = _b;
						
						i++;

						if ( C.input_type == "Speech File" ) {
							dat += new Txt( "<li><font color = #008F00>" ).item( C.name ).str( "</font color>  <font color = #FF0000><a href='?src=" ).Ref( this ).str( ";delete=" ).item( i ).str( "'>[X]</a></font color><br>" ).ToString();
							race = null;
							language = "Human";
							mobtype = C.parameters["mobtype"];
							humans = Lang13.GetTypes( typeof(Mob_Living_Carbon_Human), typeof(Mob_Living_Carbon_Brain) );
							monkeys = Lang13.GetTypes( typeof(Mob_Living_Carbon_Monkey) );
							silicons = Lang13.GetTypes( typeof(Mob_Living_Silicon) );
							slimes = Lang13.GetTypes( typeof(Mob_Living_Carbon_Slime) );
							animals = Lang13.GetTypes( typeof(Mob_Living_SimpleAnimal) );
							Interface13.Stat( null, humans.Contains( mobtype ) );

							if ( false ) {
								race = "Human";
								language = race;
							} else {
								Interface13.Stat( null, monkeys.Contains( mobtype ) );

								if ( false ) {
									race = "Monkey";
									language = race;
								} else {
									Interface13.Stat( null, ((dynamic)( Lang13.Bool( silicons ) || C.parameters["job"] == "AI" )).Contains( mobtype ) );

									if ( false ) {
										race = "Artificial Life";
									} else {
										Interface13.Stat( null, slimes.Contains( mobtype ) );

										if ( false ) {
											race = "slime";
											language = race;
										} else if ( mobtype is Obj ) {
											race = "Machinery";
											language = race;
										} else {
											Interface13.Stat( null, animals.Contains( mobtype ) );

											if ( mobtype is Obj ) {
												race = "Domestic Animal";
												language = race;
											} else {
												race = "<i>Unidentifiable</i>";
												language = race;
											}
										}
									}
								}
							}

							if ( language == "Human" || this.universal_translate || Lang13.Bool( C.parameters["uspeech"] ) ) {
								dat += "<u><font color = #18743E>Data type</font color></u>: " + C.input_type + "<br>\n							<u><font color = #18743E>Source</font color></u>: " + C.parameters["name"] + " (Job: " + C.parameters["job"] + ")<br>\n							<u><font color = #18743E>Class</font color></u>: " + race + "<br>\n							<u><font color = #18743E>Contents</font color></u>: \"" + C.parameters["message"] + "\"<br>";
							} else {
								dat += "<u><font color = #18743E>Data type</font color></u>: Audio File<br>\n							<u><font color = #18743E>Source</font color></u>: <i>Unidentifiable</i><br>\n							<u><font color = #18743E>Class</font color></u>: " + race + "<br>\n							<u><font color = #18743E>Contents</font color></u>: <i>Unintelligble</i><br>";
							}
							dat += "</li><br>";
						} else if ( C.input_type == "Execution Error" ) {
							dat += new Txt( "<li><font color = #990000>" ).item( C.name ).str( "</font color>  <font color = #FF0000><a href='?src=" ).Ref( this ).str( ";delete=" ).item( i ).str( "'>[X]</a></font color><br>\n						<u><font color = #787700>Output</font color></u>: \"" ).item( C.parameters["message"] ).str( "\"<br>\n						</li><br>" ).ToString();
						}
					}
					dat += "</ol>";
					break;
			}
			Interface13.Browse( a, dat, "window=comm_monitor;size=575x400" );
			GlobalFuncs.onclose( a, "server_control" );
			this.temp = "";
			return null;
		}

	}

}