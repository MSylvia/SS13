// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_AccountDatabase : Obj_Machinery {

		public dynamic receipt_num = null;
		public string machine_id = "";
		public dynamic held_card = null;
		public int access_level = 0;
		public MoneyAccount detailed_account_view = null;
		public bool creating_new_account = false;
		public bool activated = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_one_access = new ByTable(new object [] { 57, 20 });
			this.ghost_read = false;
			this.icon = "icons/obj/virology.dmi";
			this.icon_state = "analyser";
		}

		// Function from file: Accounts.dm
		public Obj_Machinery_AccountDatabase ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic department = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !( GlobalVars.station_account != null ) ) {
				GlobalFuncs.create_station_account();
			}

			if ( GlobalVars.department_accounts.len == 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.station_departments )) {
					department = _a;
					
					GlobalFuncs.create_department_account( department );
				}
			}

			if ( !( GlobalVars.vendor_account != null ) ) {
				GlobalFuncs.create_department_account( "Vendor" );
				GlobalVars.vendor_account = GlobalVars.department_accounts["Vendor"];
			}

			if ( !Lang13.Bool( GlobalVars.current_date_string ) ) {
				GlobalVars.current_date_string = "" + String13.FormatTime( Game13.timeofday, "DD" ) + " " + String13.FormatTime( Game13.timeofday, "Month" ) + ", " + GlobalVars.game_year;
			}
			this.machine_id = "" + GlobalFuncs.station_name() + " Account Database #" + GlobalFuncs.multinum_display( GlobalVars.num_financial_database, 4 );
			GlobalVars.num_financial_database++;
			GlobalVars.account_DBs.Add( this );

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: Accounts.dm
		public MoneyAccount get_account( dynamic account_number = null ) {
			MoneyAccount D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_money_accounts, typeof(MoneyAccount) )) {
				D = _a;
				

				if ( D.account_number == account_number ) {
					return D;
				}
			}
			return null;
		}

		// Function from file: Accounts.dm
		public dynamic attempt_account_access( dynamic attempt_account_number = null, dynamic attempt_pin_number = null, int? security_level_passed = null, bool? pin_needed = null ) {
			security_level_passed = security_level_passed ?? 0;
			pin_needed = pin_needed ?? true;

			MoneyAccount D = null;

			
			if ( !this.activated ) {
				return 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_money_accounts, typeof(MoneyAccount) )) {
				D = _a;
				

				if ( D.account_number == attempt_account_number ) {
					
					if ( ( D.security_level ??0) <= ( security_level_passed ??0) && ( !Lang13.Bool( D.security_level ) || D.remote_access_pin == attempt_pin_number || !( pin_needed == true ) ) ) {
						return D;
					}
				}
			}
			return null;
		}

		// Function from file: Accounts.dm
		public bool charge_to_account( double? attempt_account_number = null, dynamic source_name = null, dynamic purpose = null, string terminal_id = null, double? amount = null ) {
			MoneyAccount D = null;
			Transaction T = null;

			
			if ( !this.activated ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_money_accounts, typeof(MoneyAccount) )) {
				D = _a;
				

				if ( D.account_number == attempt_account_number ) {
					D.money += amount ??0;
					T = new Transaction();
					T.target_name = source_name;
					T.purpose = purpose;

					if ( ( amount ??0) < 0 ) {
						T.amount = "-" + amount;
					} else {
						T.amount = "" + amount;
					}
					T.date = GlobalVars.current_date_string;
					T.time = GlobalFuncs.worldtime2text();
					T.source_terminal = terminal_id;
					D.transaction_log.Add( T );
					return true;
				}
			}
			return false;
		}

		// Function from file: Accounts.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string account_name = null;
			int? starting_funds = null;
			Transaction T = null;
			dynamic I = null;
			dynamic C = null;
			double? index = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["toggle_activated"] ) ) {
				this.activated = !this.activated;
			}

			if ( Lang13.Bool( href_list["choice"] ) ) {
				
				dynamic _a = href_list["choice"]; // Was a switch-case, sorry for the mess.
				if ( _a=="create_account" ) {
					this.creating_new_account = true;
				} else if ( _a=="finalise_create_account" ) {
					account_name = href_list["holder_name"];
					starting_funds = Num13.MaxInt( ((int)( String13.ParseNumber( href_list["starting_funds"] ) ??0 )), 0 );

					if ( ( GlobalVars.station_account.money ??0) - ( starting_funds ??0) > 0 ) {
						GlobalVars.station_account.money -= starting_funds ??0;

						if ( ( starting_funds ??0) > 0 ) {
							T = new Transaction();
							T.target_name = account_name;
							T.purpose = "New account funds initialisation";
							T.amount = "(" + starting_funds + ")";
							T.date = GlobalVars.current_date_string;
							T.time = GlobalFuncs.worldtime2text();
							T.source_terminal = this.machine_id;
							GlobalVars.station_account.transaction_log.Add( T );
						}
						GlobalFuncs.create_account( account_name, starting_funds, this );
						this.creating_new_account = false;
					}
				} else if ( _a=="insert_card" ) {
					
					if ( Lang13.Bool( this.held_card ) ) {
						this.held_card.loc = this.loc;

						if ( Task13.User is Mob_Living_Carbon_Human && !Lang13.Bool( Task13.User.get_active_hand() ) ) {
							Task13.User.put_in_hands( this.held_card );
						}
						this.held_card = null;

						if ( this.access_level < 3 ) {
							this.access_level = 0;
						}
					} else {
						I = Task13.User.get_active_hand();

						if ( I is Obj_Item_Weapon_Card_Emag ) {
							this.emag( Task13.User );
							return null;
						}

						if ( I is Obj_Item_Weapon_Card_Id ) {
							C = I;

							if ( Task13.User.drop_item( C, this ) ) {
								this.held_card = C;

								if ( this.access_level < 3 ) {
									
									if ( Lang13.Bool( C.access.Contains( GlobalVars.access_cent_captain ) ) ) {
										this.access_level = 2;
									} else if ( Lang13.Bool( C.access.Contains( ((dynamic)( Lang13.Bool( C.access ) || GlobalVars.access_captain != 0 )).Contains( GlobalVars.access_hop ) ) ) ) {
										this.access_level = 1;
									}
								}
							}
						}
					}
				} else if ( _a=="view_account_detail" ) {
					index = String13.ParseNumber( href_list["account_index"] );

					if ( Lang13.Bool( index ) && ( index ??0) <= GlobalVars.all_money_accounts.len ) {
						this.detailed_account_view = GlobalVars.all_money_accounts[index];
					}
				} else if ( _a=="view_accounts_list" ) {
					this.detailed_account_view = null;
					this.creating_new_account = false;
				}
			}
			this.attack_hand( Task13.User );
			return null;
		}

		// Function from file: Accounts.dm
		public override int emag( dynamic user = null ) {
			dynamic C = null;

			
			if ( this.emagged != 0 ) {
				this.emagged = 0;
				this.access_level = 0;

				if ( Lang13.Bool( this.held_card ) ) {
					C = this.held_card;

					if ( Lang13.Bool( C.access.Contains( GlobalVars.access_cent_captain ) ) ) {
						this.access_level = 2;
					} else if ( Lang13.Bool( C.access.Contains( ((dynamic)( Lang13.Bool( C.access ) || GlobalVars.access_captain != 0 )).Contains( GlobalVars.access_hop ) ) ) ) {
						this.access_level = 1;
					}
				}
				this.attack_hand( user );
				GlobalFuncs.to_chat( user, "<span class='notice'>You re-enable the security checks of " + this + ".</span>" );
			} else {
				this.emagged = 1;
				this.access_level = 3;
				GlobalFuncs.to_chat( user, "<span class='warning'>You disable the security checks of " + this + ".</span>" );
			}
			return 0;
		}

		// Function from file: Accounts.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic idcard = null;

			
			if ( a is Obj_Item_Weapon_Card ) {
				idcard = a;

				if ( this.access_level == 3 ) {
					return this.attack_hand( b );
				}

				if ( idcard is Obj_Item_Weapon_Card_Emag ) {
					this.emag( b );
					return null;
				}

				if ( !Lang13.Bool( this.held_card ) ) {
					
					if ( Task13.User.drop_item( a, this ) ) {
						this.held_card = idcard;

						if ( Lang13.Bool( idcard.access.Contains( GlobalVars.access_cent_captain ) ) ) {
							this.access_level = 2;
						} else if ( Lang13.Bool( idcard.access.Contains( ((dynamic)( Lang13.Bool( idcard.access ) || GlobalVars.access_captain != 0 )).Contains( GlobalVars.access_hop ) ) ) ) {
							this.access_level = 1;
						}
					}
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: Accounts.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			Transaction T = null;
			int? i = null;
			MoneyAccount D = null;

			
			if ( a is Mob_Living_Carbon_Human && !Lang13.Bool( a.stat ) && Map13.GetDistance( this, a ) <= 1 ) {
				dat = "<b>Accounts Database</b><br>";
				dat += new Txt( "<i>" ).item( this.machine_id ).str( "</i><br>\n			Confirm identity: <a href='?src=" ).Ref( this ).str( ";choice=insert_card'>" ).item( ( Lang13.Bool( this.held_card ) ? this.held_card : ((dynamic)( "-----" )) ) ).str( "</a><br>" ).ToString();

				if ( this.access_level > 0 ) {
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";toggle_activated=1'>" ).item( ( this.activated ? "Disable" : "Enable" ) ).str( " remote access</a><br>\n				You may not edit accounts at this terminal, only create and view them.<br>" ).ToString();

					if ( this.creating_new_account ) {
						dat += new Txt( "<br>\n					<a href='?src=" ).Ref( this ).str( ";choice=view_accounts_list;'>Return to accounts list</a>\n					<form name='create_account' action='?src=" ).Ref( this ).str( "' method='get'>\n					<input type='hidden' name='src' value='" ).Ref( this ).str( @"'>
					<input type='hidden' name='choice' value='finalise_create_account'>
					<b>Holder name:</b> <input type='text' id='holder_name' name='holder_name' style='width:250px; background-color:white;'><br>
					<b>Initial funds:</b> <input type='text' id='starting_funds' name='starting_funds' style='width:250px; background-color:white;'> (subtracted from station account.)<br>
					<i>New accounts are automatically assigned a secret number and pin, which are printed separately in a sealed package.</i><br>
					<b>Ensure that the station account has enough money to create the account, or it will not be created</b>
					<input type='submit' value='Create'><br>
					</form>" ).ToString();
					} else if ( this.detailed_account_view != null ) {
						dat += new Txt( "<br>\n						<a href='?src=" ).Ref( this ).str( ";choice=view_accounts_list;'>Return to accounts list</a><hr>\n						<b>Account number:</b> #" ).item( this.detailed_account_view.account_number ).str( "<br>\n						<b>Account holder:<	/b> " ).item( this.detailed_account_view.owner_name ).str( "<br>\n						<b>Account balance:</b> $" ).item( this.detailed_account_view.money ).str( @"<br>
						<table border=1 style='width:100%'>
						<tr>
						<td><b>Date</b></td>
						<td><b>Time</b></td>
						<td><b>Target</b></td>
						<td><b>Purpose</b></td>
						<td><b>Value</b></td>
						<td><b>Source terminal ID</b></td>
						</tr>" ).ToString();

						foreach (dynamic _a in Lang13.Enumerate( this.detailed_account_view.transaction_log, typeof(Transaction) )) {
							T = _a;
							
							dat += "<tr>\n							<td>" + T.date + "</td>\n							<td>" + T.time + "</td>\n							<td>" + T.target_name + "</td>\n							<td>" + T.purpose + "</td>\n							<td>$" + T.amount + "</td>\n							<td>" + T.source_terminal + "</td>\n							</tr>";
						}
						dat += "</table>";
					} else {
						dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=create_account;'>Create new account</a><br><br>\n						<table border=1 style='width:100%'>" ).ToString();
						i = null;
						i = 1;

						while (( i ??0) <= GlobalVars.all_money_accounts.len) {
							D = GlobalVars.all_money_accounts[i];
							dat += new Txt( "<tr>\n							<td>#" ).item( D.account_number ).str( "</td>\n							<td>" ).item( D.owner_name ).str( "</td>\n							<td><a href='?src=" ).Ref( this ).str( ";choice=view_account_detail;account_index=" ).item( i ).str( "'>View in detail</a></td>\n							</tr>" ).ToString();
							i++;
						}
						dat += "</table>";
					}
				}
				Interface13.Browse( a, dat, "window=account_db;size=700x650" );
			} else {
				Interface13.Browse( a, null, "window=account_db" );
			}
			return null;
		}

		// Function from file: Accounts.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( GlobalVars.centcomm_account_db == this ) {
				GlobalVars.centcomm_account_db = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: Accounts.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );

			if ( this.z == 2 && GlobalVars.centcomm_account_db == null ) {
				GlobalVars.centcomm_account_db = this;
			}
			return false;
		}

	}

}