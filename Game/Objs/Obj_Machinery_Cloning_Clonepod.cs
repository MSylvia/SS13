// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Cloning_Clonepod : Obj_Machinery_Cloning {

		public Mob_Living_Carbon_Human occupant = null;
		public int heal_level = 90;
		public bool locked = false;
		public bool frequency = false;
		public Obj_Machinery_Computer_Cloning connected = null;
		public bool mess = false;
		public bool attempting = false;
		public bool eject_wait = false;
		public double biomass = 0;
		public double time_coeff = 1;
		public double resource_efficiency = 1;
		public string id_tag = "clone_pod";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.req_access = new ByTable(new object [] { 9 });
			this.machine_flags = 135;
			this.light_color = "#7DE1E1";
			this.use_auto_lights = true;
			this.light_range_on = 3;
			this.light_power_on = 2;
			this.icon = "icons/obj/cloning.dmi";
			this.icon_state = "pod_0";
		}

		// Function from file: cloning.dm
		public Obj_Machinery_Cloning_Clonepod ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Clonepod(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: cloning.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			dynamic A = null;
			dynamic A2 = null;
			dynamic A3 = null;

			
			switch ((double?)( severity )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( this )) {
						A = _a;
						
						A.loc = this.loc;
						this.ex_act( severity );
					}
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this )) {
							A2 = _b;
							
							A2.loc = this.loc;
							this.ex_act( severity );
						}
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( this )) {
							A3 = _c;
							
							A3.loc = this.loc;
							this.ex_act( severity );
						}
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: cloning.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Rand13.PercentChance( ((int)( 100 / severity )) ) ) {
				this.malfunction();
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			
			if ( Lang13.Bool( M.stat ) ) {
				return null;
			}
			this.go_out();
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( !this.check_access( a ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access Denied.</span>" );
					return _default;
				} else if ( !this.locked || this.occupant == null ) {
					return _default;
				} else {
					this.locked = false;
					GlobalFuncs.to_chat( b, "System unlocked." );
				}
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat ) {
				
				if ( Lang13.Bool( b.drop_item( a ) ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " processes " ).the( a ).item().str( ".</span>" ).ToString() );
					this.biomass += 50;
					GlobalFuncs.qdel( a );
					return _default;
				}
			}
			return _default;
		}

		// Function from file: cloning.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			this.go_out();
			_default = base.Destroy( (object)(brokenup) );
			return _default;
		}

		// Function from file: cloning.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You cannot disassemble " ).the( this ).item().str( ", it's occupado.</span>" ).ToString() );
				return 0;
			}

			while (this.biomass > 0) {
				new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Syntiflesh( this.loc );
				this.biomass -= 50;
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: cloning.dm
		public override int emag( dynamic user = null ) {
			
			if ( this.occupant == null ) {
				return 0;
			}
			GlobalFuncs.to_chat( user, "You force an emergency ejection." );
			this.locked = false;
			this.go_out();
			return 0;
		}

		// Function from file: cloning.dm
		public override dynamic process(  ) {
			Mob_Living_Carbon_Human H = null;

			
			if ( ( this.stat & 2 ) != 0 ) {
				
				if ( this.occupant != null ) {
					this.locked = false;
					this.go_out();
				}
				return null;
			}

			if ( this.occupant != null && this.occupant.loc == this ) {
				
				if ( this.occupant.stat == 2 || this.occupant.suiciding == true || !Lang13.Bool( this.occupant.key ) ) {
					this.locked = false;
					this.go_out();
					this.connected_message( "Clone Rejected: Deceased." );
					return null;
				} else if ( Convert.ToDouble( this.occupant.health ) < this.heal_level ) {
					this.occupant.Paralyse( 4 );
					this.occupant.adjustCloneLoss( this.time_coeff * -1 );
					this.occupant.adjustBrainLoss( this.time_coeff * -1 );

					if ( ( ((Reagents)this.occupant.reagents).get_reagent_amount( "inaprovaline" ) ?1:0) < 30 ) {
						((Reagents)this.occupant.reagents).add_reagent( "inaprovaline", 60 );
					}
					H = this.occupant;

					if ( H.species is Species_Vox ) {
						((Reagents)this.occupant.reagents).add_reagent( "nitrogen", 10 );
					}
					this.occupant.adjustOxyLoss( -4 );
					this.f_use_power( 7500 );
					return null;
				} else if ( Convert.ToDouble( this.occupant.health ) >= this.heal_level && !this.eject_wait ) {
					this.connected_message( "Cloning Process Complete." );
					this.locked = false;
					this.go_out();
					return null;
				}
			} else if ( !( this.occupant != null ) || this.occupant.loc != this ) {
				this.occupant = null;

				if ( this.locked ) {
					this.locked = false;
				}

				if ( !this.mess ) {
					this.icon_state = "pod_0";
				}
				this.f_use_power( 200 );
				return null;
			}
			return null;
		}

		// Function from file: cloning.dm
		public void malfunction(  ) {
			
			if ( this.occupant != null ) {
				this.connected_message( "Critical Error!" );
				this.mess = true;
				this.icon_state = "pod_g";
				this.occupant.ghostize();
				Task13.Schedule( 5, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this.occupant );
					return;
				}));
			}
			return;
		}

		// Function from file: cloning.dm
		public void go_out(  ) {
			
			if ( this.locked ) {
				return;
			}

			if ( this.mess ) {
				this.mess = false;
				GlobalFuncs.gibs( this.loc );
				this.icon_state = "pod_0";
				return;
			}

			if ( !( this.occupant != null ) ) {
				return;
			}

			if ( this.occupant.client != null ) {
				this.occupant.client.eye = this.occupant.client.mob;
				this.occupant.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
			}
			this.occupant.loc = this.loc;
			this.icon_state = "pod_0";
			this.eject_wait = false;
			GlobalFuncs.domutcheck( this.occupant );
			this.occupant.add_side_effect( "Bad Stomach" );
			this.occupant = null;

			if ( this.biomass > 0 ) {
				this.biomass -= 150 / this.resource_efficiency;
			} else {
				this.biomass = 0;
			}
			this.connected.update_icon();
			return;
		}

		// Function from file: cloning.dm
		public bool connected_message( string message = null ) {
			
			if ( this.connected == null || !( this.connected is Obj_Machinery_Computer_Cloning ) ) {
				return false;
			}

			if ( !Lang13.Bool( message ) ) {
				return false;
			}
			this.connected.temp = message;
			this.connected.updateUsrDialog();
			return true;
		}

		// Function from file: cloning.dm
		public bool growclone( dynamic R = null ) {
			dynamic clonemind = null;
			dynamic G = null;
			Mob_Living_Carbon_Human H = null;
			Spell spell_to_add = null;
			Language L = null;

			
			if ( this.mess || this.attempting ) {
				return false;
			}
			clonemind = Lang13.FindObj( R.mind );

			if ( !( clonemind is Mind ) ) {
				return false;
			}

			if ( Lang13.Bool( clonemind.current ) && Convert.ToInt32( clonemind.current.stat ) != 2 ) {
				return false;
			}

			if ( Lang13.Bool( clonemind.active ) ) {
				
				if ( String13.CKey( clonemind.key ) != R.ckey ) {
					return false;
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					G = _a;
					

					if ( G.ckey == R.ckey ) {
						
						if ( G is Mob_Dead_Observer ) {
							
							if ( G.can_reenter_corpse != 0 ) {
								break;
							} else {
								return false;
							}
						} else if ( Lang13.Bool( G.mind ) && Convert.ToInt32( G.mind.current.stat ) != 2 || G.mind != clonemind ) {
							return false;
						}
					}
				}
			}
			this.heal_level = Rand13.Int( 10, 40 );
			this.attempting = true;
			this.locked = true;
			this.eject_wait = true;
			Task13.Schedule( 30, (Task13.Closure)(() => {
				this.eject_wait = false;
				return;
			}));
			H = new Mob_Living_Carbon_Human( this, R.dna.species );
			this.occupant = H;
			this.icon_state = "pod_1";
			this.connected.update_icon();
			H.dna = ((Dna)R.dna).Clone();
			H.dna.species = R.dna.species;

			if ( H.dna.species != "Human" ) {
				H.set_species( H.dna.species, true );
			}
			H.adjustCloneLoss( 150 );
			H.adjustBrainLoss( this.heal_level + Rand13.Int( 10, 30 ) + 50 );
			H.Paralyse( 4 );
			H.stat = 1;
			H.updatehealth();
			((Mind)clonemind).transfer_to( H );
			H.ckey = R.ckey;
			GlobalFuncs.to_chat( H, "<span class='notice'><b>Consciousness slowly creeps over you as your body regenerates.</b><br><i>So this is what cloning feels like?</i></span>" );
			Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( H.mind ) );

			if ( H.dna.species != "Human" || false ) {
				((GameMode)GlobalVars.ticker.mode).update_all_rev_icons();
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( H.mind ) );

			if ( H.dna.species != "Human" || false ) {
				((GameMode)GlobalVars.ticker.mode).update_all_synd_icons();
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( H.mind ) );

			if ( H.dna.species != "Human" || false ) {
				((GameMode)GlobalVars.ticker.mode).add_cultist( this.occupant.mind );
				((GameMode)GlobalVars.ticker.mode).update_all_cult_icons();
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( H.mind ) );

			if ( H.dna.species != "Human" || false ) {
				((GameMode)GlobalVars.ticker.mode).update_all_wizard_icons();
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.necromancer.Contains( new Txt().Ref( H.mind ).ToString() ) );

			if ( H.dna.species != "Human" || false || false ) {
				((GameMode)GlobalVars.ticker.mode).update_all_necro_icons();
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.implanter.Contains( new Txt().Ref( H.mind ).ToString() ) );

			if ( H.dna.species != "Human" || false || false || false ) {
				((GameMode)GlobalVars.ticker.mode).update_traitor_icons_added( H.mind );
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.thralls.Contains( new Txt().Ref( H.mind ).ToString() ) );

			if ( H.dna.species != "Human" || false || false || false || false ) {
				((GameMode)GlobalVars.ticker.mode).update_vampire_icons_added( H.mind );
			}

			if ( H.mind != null && H.mind.wizard_spells != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( H.mind.wizard_spells, typeof(Spell) )) {
					spell_to_add = _b;
					
					H.add_spell( spell_to_add );
				}
			}
			H.UpdateAppearance();
			H.set_species( R.dna.species );
			GlobalFuncs.randmutb( H );
			H.dna.mutantrace = R.dna.mutantrace;
			H.update_mutantrace();

			foreach (dynamic _c in Lang13.Enumerate( R.languages, typeof(Language) )) {
				L = _c;
				
				H.add_language( L.name );
			}
			H.real_name = H.dna.real_name;
			H.suiciding = false;
			this.attempting = false;
			return true;
		}

		// Function from file: cloning.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic completion = null;

			
			if ( this.occupant == null || ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( !( this.occupant == null ) && this.occupant.stat != 2 ) {
				completion = ( this.occupant.health + 100 ) / ( this.heal_level + 100 ) * 100;
				GlobalFuncs.to_chat( a, "Current clone cycle is " + Num13.Floor( Convert.ToDouble( completion ) ) + "% complete." );
			}
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: cloning.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: cloning.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts_ScanningModule SM = null;
			Obj_Item_Weapon_StockParts_Manipulator MA = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_ScanningModule) )) {
				SM = _a;
				
				T += SM.rating;
			}
			this.time_coeff = T / 2;
			T = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				MA = _b;
				
				T += MA.rating;
			}
			this.resource_efficiency = T / 2;
			T = 0;
			return null;
		}

		// Function from file: cloning.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return "";
		}

		// Function from file: cloning.dm
		[Verb]
		[VerbInfo( name: "Eject Cloner", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void eject(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}
			this.go_out();
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}