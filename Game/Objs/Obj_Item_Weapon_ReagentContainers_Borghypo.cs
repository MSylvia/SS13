// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Borghypo : Obj_Item_Weapon_ReagentContainers {

		public bool mode = true;
		public double? charge_cost = 50;
		public int charge_tick = 0;
		public int recharge_time = 5;
		public bool bypass_protection = false;
		public ByTable reagent_list = new ByTable();
		public ByTable reagent_ids = new ByTable(new object [] { "dexalin", "kelotane", "bicaridine", "antitoxin", "epinephrine", "spaceacillin" });
		public ByTable modes = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "hypo";
			this.possible_transfer_amounts = new ByTable();
			this.icon = "icons/obj/syringe.dmi";
			this.icon_state = "borghypo";
		}

		// Function from file: borghydro.dm
		public Obj_Item_Weapon_ReagentContainers_Borghypo ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			int iteration = 0;
			dynamic R = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			iteration = 1;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_ids )) {
				R = _a;
				
				this.add_reagent( R );
				this.modes[R] = iteration;
				iteration++;
			}
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: borghydro.dm
		public override double examine( dynamic user = null ) {
			Task13.User = user;
			base.examine( (object)(user) );
			this.DescribeContents();
			return 0;
		}

		// Function from file: borghydro.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic chosen_reagent = null;
			dynamic R = null;

			chosen_reagent = this.modes[Interface13.Input( user, "What reagent do you want to dispense?", null, null, this.reagent_ids, InputType.Null | InputType.Any )];

			if ( !Lang13.Bool( chosen_reagent ) ) {
				return null;
			}
			this.mode = Lang13.Bool( chosen_reagent );
			GlobalFuncs.playsound( this.loc, "sound/effects/pop.ogg", 50, 0 );
			R = GlobalVars.chemical_reagents_list[this.reagent_ids[this.mode]];
			user.WriteMsg( "<span class='notice'>" + this + " is now dispensing '" + R.name + "'.</span>" );
			return null;
		}

		// Function from file: borghydro.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			Reagents R = null;
			double? fraction = null;
			dynamic trans = null;

			R = this.reagent_list[this.mode];

			if ( !Lang13.Bool( R.total_volume ) ) {
				user.WriteMsg( "<span class='notice'>The injector is empty.</span>" );
				return false;
			}

			if ( !( M is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( Lang13.Bool( R.total_volume ) && ((Mob_Living)M).can_inject( user, true, this.bypass_protection ) ) {
				M.WriteMsg( "<span class='warning'>You feel a tiny prick!</span>" );
				user.WriteMsg( "<span class='notice'>You inject " + M + " with the injector.</span>" );
				fraction = Num13.MinInt( ((int)( ( this.amount_per_transfer_from_this ??0) / ( R.total_volume ??0) )), 1 );
				R.reaction( M, GlobalVars.INJECT, fraction );

				if ( Lang13.Bool( M.reagents ) ) {
					trans = R.trans_to( M, this.amount_per_transfer_from_this );
					user.WriteMsg( new Txt( "<span class='notice'>" ).item( trans ).str( " unit" ).s().str( " injected.  " ).item( R.total_volume ).str( " unit" ).s().str( " remaining.</span>" ).ToString() );
				}
			}
			return false;
		}

		// Function from file: borghydro.dm
		public virtual void DescribeContents(  ) {
			bool empty = false;
			Reagents RS = null;
			dynamic R = null;

			empty = true;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagents) )) {
				RS = _a;
				
				R = Lang13.FindIn( typeof(Reagent), RS.reagent_list );

				if ( Lang13.Bool( R ) ) {
					Task13.User.WriteMsg( new Txt( "<span class='notice'>It currently has " ).item( R.volume ).str( " unit" ).s().str( " of " ).item( R.name ).str( " stored.</span>" ).ToString() );
					empty = false;
				}
			}

			if ( empty ) {
				Task13.User.WriteMsg( "<span class='warning'>It is currently empty! Allow some time for the internal syntheszier to produce more.</span>" );
			}
			return;
		}

		// Function from file: borghydro.dm
		public virtual void regenerate_reagents(  ) {
			Ent_Static R = null;
			double i = 0;
			Reagents RG = null;

			
			if ( this.loc is Mob_Living_Silicon_Robot ) {
				R = this.loc;

				if ( R != null && Lang13.Bool( ((dynamic)R).cell ) ) {
					
					foreach (dynamic _a in Lang13.IterateRange( 1, this.reagent_ids.len )) {
						i = _a;
						
						RG = this.reagent_list[i];

						if ( ( RG.total_volume ??0) < Convert.ToDouble( RG.maximum_volume ) ) {
							((Obj_Item_Weapon_StockParts_Cell)((dynamic)R).cell).use( this.charge_cost );
							RG.add_reagent( this.reagent_ids[i], 5 );
						}
					}
				}
			}
			return;
		}

		// Function from file: borghydro.dm
		public void add_reagent( dynamic reagent = null ) {
			Reagents RG = null;
			dynamic R = null;

			this.reagent_ids.Or( reagent );
			RG = new Reagents( 30 );
			RG.my_atom = this;
			this.reagent_list.Add( RG );
			R = this.reagent_list[this.reagent_list.len];
			R.add_reagent( reagent, 30 );
			return;
		}

		// Function from file: borghydro.dm
		public override int? process( dynamic seconds = null ) {
			this.charge_tick++;

			if ( this.charge_tick >= this.recharge_time ) {
				this.regenerate_reagents();
				this.charge_tick = 0;
			}
			return 1;
		}

		// Function from file: borghydro.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

	}

}