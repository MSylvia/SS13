// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Cooking_Grill : Obj_Machinery_Cooking {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state_on = "grill_on";
			this.foodChoices = null;
			this.cookTime = 210;
			this.recursive_ingredients = true;
			this.cooks_in_reagents = true;
			this.icon_state = "grill_off";
		}

		public Obj_Machinery_Cooking_Grill ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: cooking_machines.dm
		public override dynamic makeFood( dynamic foodType = null ) {
			dynamic F = null;
			dynamic H = null;

			
			if ( this.cooks_in_reagents ) {
				this.transfer_reagents_to_food();
			}

			if ( this.ingredient is Obj_Item_Weapon_ReagentContainers_Food ) {
				F = this.ingredient;
				((Reagents)F.reagents).add_reagent( "nutriment", 10 );
				((Reagents)F.reagents).trans_to( this.ingredient, this.ingredient.reagents.total_volume );
			}
			this.ingredient.mouse_opacity = 1;

			if ( !( String13.FindIgnoreCase( this.ingredient.name, "rotisserie", 1, 0 ) != 0 ) ) {
				this.ingredient.name = "grilled " + this.ingredient.name;
			}
			this.ingredient.loc = this.loc;

			if ( this.ingredient is Obj_Item_Weapon_Holder ) {
				H = this.ingredient;

				if ( H.stored_mob != null ) {
					((dynamic)H.stored_mob).ghostize();
					((dynamic)H.stored_mob).death();
					GlobalFuncs.qdel( H.stored_mob );
				}
			}
			this.ingredient = null;
			return null;
		}

		// Function from file: cooking_machines.dm
		public override void cook( dynamic foodType = null ) {
			string foodname = null;

			foodname = "rotisserie " + this.ingredient.name;
			this.active = true;
			this.icon_state = this.icon_state_on;
			this.ingredient.pixel_y += 5;
			this.ingredient.loc = this.loc;
			this.ingredient.mouse_opacity = 0;

			if ( this.cook_after( this.cookTime / 3, 14 ) ) {
				this.ingredient.color = "#C28566";

				if ( this.cook_after( this.cookTime / 3, 14 ) ) {
					this.ingredient.color = "#A34719";

					if ( this.cook_after( this.cookTime / 3, 14 ) ) {
						this.makeFood();

						if ( this.use_power != 0 ) {
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), this.cookSound, 100, 1 );
						} else {
							this.visible_message( new Txt( "<span class='notice'>" ).the( foodname ).item().str( " looks ready to eat!</span>" ).ToString() );
						}
					}
				}
			}
			this.icon_state = Lang13.Initial( this, "icon_state" );
			this.active = false;
			return;
		}

		// Function from file: cooking_machines.dm
		public override string validateIngredient( dynamic I = null ) {
			string _default = null;

			_default = base.validateIngredient( (object)(I) );

			if ( _default == "valid" && !GlobalVars.foodNesting ) {
				
				if ( String13.FindIgnoreCase( I.name, "fried", 1, 0 ) != 0 ) {
					_default = "It's already deep-fried.";
				} else if ( String13.FindIgnoreCase( I.name, "rotisserie", 1, 0 ) != 0 ) {
					_default = "It's already rotisseried";
				} else if ( String13.FindIgnoreCase( I.name, "grilled", 1, 0 ) != 0 ) {
					_default = "It's already grilled.";
				}
			}
			return _default;
		}

	}

}