// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_BeaconLocator : Obj_Item_Device {

		public dynamic frequency = 1459;
		public int scan_ticks = 0;
		public Obj_Item_Beacon target_radio = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electronic";
			this.icon_state = "pinoff";
		}

		// Function from file: tools_locater.dm
		public Obj_Item_Device_BeaconLocator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.processing_objects.Add( this );
			return;
		}

		// Function from file: tools_locater.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic new_frequency = null;

			base.Topic( href, href_list, (object)(hclient) );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["reset_tracking"] ) ) {
				this.scan_ticks = 1;
				this.target_radio = null;
			} else if ( Lang13.Bool( href_list["freq"] ) ) {
				new_frequency = this.frequency + String13.ParseNumber( href_list["freq"] );

				if ( Convert.ToDouble( this.frequency ) < 1200 || Convert.ToDouble( this.frequency ) > 1600 ) {
					new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
				}
				this.frequency = new_frequency;
			} else if ( Lang13.Bool( href_list["close"] ) ) {
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=locater" );
			}
			this.updateSelfDialog();
			return null;
		}

		// Function from file: tools_locater.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			dat = "<b>Radio frequency tracker</b><br>";
			dat += new Txt( "\n				<A href='byond://?src=" ).Ref( this ).str( ";reset_tracking=1'>Reset tracker</A><BR>\n				Frequency:\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A>\n				" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n				" ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";close=1'>Close</a><br>" ).ToString();
			Interface13.Browse( user, dat, "window=locater;size=300x150" );
			GlobalFuncs.onclose( user, "locater" );
			return null;
		}

		// Function from file: tools_locater.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			return this.interact( user );
		}

		// Function from file: tools_locater.dm
		public override dynamic process(  ) {
			int cur_dist = 0;
			Obj_Item_Beacon R = null;
			int check_dist = 0;
			dynamic T = null;

			
			if ( this.target_radio != null ) {
				this.dir = Map13.GetDistance( this, this.target_radio );

				dynamic _a = Map13.GetDistance( this, this.target_radio ); // Was a switch-case, sorry for the mess.
				if ( 0<=_a&&_a<=3 ) {
					this.icon_state = "pinondirect";
				} else if ( 4<=_a&&_a<=10 ) {
					this.icon_state = "pinonclose";
				} else if ( 11<=_a&&_a<=30 ) {
					this.icon_state = "pinonmedium";
				} else if ( 31<=_a&&_a<=Double.PositiveInfinity ) {
					this.icon_state = "pinonfar";
				}
			} else if ( this.scan_ticks != 0 ) {
				this.icon_state = "pinonnull";
				this.scan_ticks++;

				if ( Rand13.PercentChance( this.scan_ticks * 10 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						
						if ( GlobalVars.processing_objects.Find( this ) != 0 ) {
							cur_dist = 999;

							foreach (dynamic _b in Lang13.Enumerate( GlobalVars.beacons, typeof(Obj_Item_Beacon) )) {
								R = _b;
								

								if ( R.z == this.z && R.frequency == this.frequency ) {
									check_dist = Map13.GetDistance( this, R );

									if ( check_dist < cur_dist ) {
										cur_dist = check_dist;
										this.target_radio = R;
									}
								}
							}
							this.scan_ticks = 0;
							T = GlobalFuncs.get_turf( this );

							if ( this.target_radio != null ) {
								((Ent_Static)T).visible_message( new Txt().icon( this ).str( " " ).item( this ).str( " " ).item( Rand13.Pick(new object [] { "chirps", "chirrups", "cheeps" }) ).str( " happily." ).ToString() );
							} else {
								((Ent_Static)T).visible_message( new Txt().icon( this ).str( " " ).item( this ).str( " " ).item( Rand13.Pick(new object [] { "chirps", "chirrups", "cheeps" }) ).str( " sadly." ).ToString() );
							}
						}
						return;
					}));
				}
			} else {
				this.icon_state = "pinoff";
			}
			return null;
		}

		// Function from file: tools_locater.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.processing_objects.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}