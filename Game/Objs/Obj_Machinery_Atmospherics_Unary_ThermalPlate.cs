// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_ThermalPlate : Obj_Machinery_Atmospherics_Unary {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.icon = "icons/obj/atmospherics/cold_sink.dmi";
			this.icon_state = "off";
		}

		public Obj_Machinery_Atmospherics_Unary_ThermalPlate ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: thermal_plate.dm
		public bool radiate(  ) {
			dynamic internal_transfer_moles = null;
			GasMixture internal_removed = null;
			int combined_heat_capacity = 0;
			double combined_energy = 0;
			double final_temperature = 0;

			
			if ( this.network != null && Lang13.Bool( ((dynamic)this.network).radiate ) ) {
				this.air_contents.copy_from( ((dynamic)this.network).radiate );
				return false;
			}
			internal_transfer_moles = this.air_contents.f_total_moles() * 0.25;
			internal_removed = this.air_contents.remove( internal_transfer_moles );

			if ( !( internal_removed != null ) ) {
				return false;
			}
			combined_heat_capacity = internal_removed.heat_capacity() + 30000;
			combined_energy = ( internal_removed.temperature ??0) * internal_removed.heat_capacity() + 192000;
			final_temperature = combined_energy / combined_heat_capacity;
			internal_removed.temperature = final_temperature;
			this.air_contents.merge( internal_removed );

			if ( this.network != null ) {
				((dynamic)this.network).update = 1;
				((dynamic)this.network).radiate = this.air_contents;
			}
			return true;
		}

		// Function from file: thermal_plate.dm
		public override void hide( bool? h = null ) {
			string prefix = null;

			prefix = "";

			if ( h == true && this.loc is Tile_Simulated ) {
				prefix = "h";
			}
			this.icon_state = "" + prefix + "off";
			return;
		}

		// Function from file: thermal_plate.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			GasMixture environment = null;
			dynamic environment_moles = null;
			dynamic transfer_moles = null;
			GasMixture external_removed = null;
			dynamic internal_transfer_moles = null;
			GasMixture internal_removed = null;
			int combined_heat_capacity = 0;
			double combined_energy = 0;
			double final_temperature = 0;

			_default = base.process();
			environment = this.loc.return_air();
			environment_moles = environment.f_total_moles();
			transfer_moles = environment_moles * 0.25;
			external_removed = environment.remove( transfer_moles );

			if ( !( external_removed != null ) ) {
				return this.radiate();
			}

			if ( Convert.ToDouble( environment_moles ) < 0.01 ) {
				return this.radiate();
			} else if ( Convert.ToDouble( environment_moles ) < 1 ) {
				return 0;
			}
			internal_transfer_moles = this.air_contents.f_total_moles() * 0.25;
			internal_removed = this.air_contents.remove( internal_transfer_moles );

			if ( !( internal_removed != null ) ) {
				environment.merge( external_removed );
				return _default;
			}
			combined_heat_capacity = internal_removed.heat_capacity() + external_removed.heat_capacity();
			combined_energy = ( internal_removed.temperature ??0) * internal_removed.heat_capacity() + external_removed.heat_capacity() * ( external_removed.temperature ??0);

			if ( !( combined_heat_capacity != 0 ) ) {
				combined_heat_capacity = 1;
			}
			final_temperature = combined_energy / combined_heat_capacity;
			external_removed.temperature = final_temperature;
			environment.merge( external_removed );
			internal_removed.temperature = final_temperature;
			this.air_contents.merge( internal_removed );
			((dynamic)this.network).update = 1;
			return 1;
		}

	}

}