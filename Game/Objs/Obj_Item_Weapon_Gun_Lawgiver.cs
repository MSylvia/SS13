// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Lawgiver : Obj_Item_Weapon_Gun {

		public dynamic stored_magazine = null;
		public dynamic chambered = null;
		public string firing_mode = "stun";
		public string projectile_type = "/obj/item/projectile/energy/electrode";
		public dynamic magazine = null;
		public string dna_profile = null;
		public bool rapidFirecheck = false;
		public bool rapidFirechamber = false;
		public bool rapidFirestop = false;
		public bool rapid_message = false;
		public double damage_multiplier = 1;
		public bool has_played_alert = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "lawgiver";
			this.inhand_states = new ByTable().Set( "left_hand", "icons/mob/in-hand/left/guninhands_left.dmi" ).Set( "right_hand", "icons/mob/in-hand/right/guninhands_right.dmi" );
			this.origin_tech = "combat=5;materials=5;engineering=5";
			this.starting_materials = new ByTable().Set( "$iron", 1000 );
			this.flags = 272;
			this.fire_delay = 0;
			this.fire_sound = "sound/weapons/Taser.ogg";
			this.icon_state = "lawgiver";
		}

		// Function from file: lawgiver.dm
		public Obj_Item_Weapon_Gun_Lawgiver ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.magazine = new Obj_Item_AmmoStorage_Magazine_Lawgiver();
			this.verbs.Remove( typeof(Obj_Item_Weapon_Gun_Lawgiver).GetMethod( "erase_DNA_sample" ) );
			this.update_icon();
			return;
		}

		// Function from file: lawgiver.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			this.getAmmo( user );
			return null;
		}

		// Function from file: lawgiver.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			_params = _params ?? 0;

			dynamic L = null;

			base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );

			if ( Lang13.Bool( this.magazine ) ) {
				L = this.magazine;

				if ( Lang13.Bool( this.magazine ) && !this.countAmmo( L ) && !this.has_played_alert ) {
					GlobalFuncs.playsound( user, "sound/weapons/smg_empty_alarm.ogg", 40, 1 );
					this.has_played_alert = true;
				}
			}
			return false;
		}

		// Function from file: lawgiver.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.target != null ) {
				return base.attack_self( (object)(user), (object)(flag), emp );
			}

			if ( Lang13.Bool( this.magazine ) ) {
				this.RemoveMag( user );
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>There's no magazine loaded in " ).the( this ).item().str( "!</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: lawgiver.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic AM = null;

			
			if ( a is Obj_Item_AmmoStorage_Magazine_Lawgiver ) {
				AM = a;

				if ( !Lang13.Bool( this.magazine ) ) {
					this.LoadMag( AM, b );
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='rose'>There is already a magazine loaded in " ).the( this ).item().str( "!</span>" ).ToString() );
				}
			} else if ( a is Obj_Item_AmmoStorage_Magazine ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='rose'>You can't load " ).the( this ).item().str( " with that kind of magazine!</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: lawgiver.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			
			if ( M == user && ((dynamic)user.zone_sel).selecting == "mouth" && !this.mouthshoot ) {
				
				if ( M.wear_mask is Obj_Item_Clothing_Mask_Happy ) {
					GlobalFuncs.to_chat( M, "<span class='sinister'>BUT WHY? I'M SO HAPPY!</span>" );
					return null;
				}
				this.mouthshoot = true;
				((Ent_Static)M).visible_message( "<span class='warning'>" + user + " sticks their gun in their mouth, ready to pull the trigger...</span>" );

				if ( !GlobalFuncs.do_after( user, this, 40 ) ) {
					((Ent_Static)M).visible_message( "<span class='notice'>" + user + " decided life was worth living</span>" );
					this.mouthshoot = false;
					return null;
				}

				if ( Lang13.Bool( this.dna_profile ) ) {
					
					if ( this.dna_profile != user.dna.unique_enzymes ) {
						this.self_destruct( user );
						return null;
					}
				} else {
					((Ent_Static)user).visible_message( "<span class = 'warning'>" + user + " pulls the trigger.</span>" );
					this.click_empty( user );
					this.say( "PLEASE REGISTER A DNA SAMPLE" );
					return null;
				}

				if ( this.chamber_round() ) {
					((Ent_Static)user).visible_message( "<span class = 'warning'>" + user + " pulls the trigger.</span>" );
					GlobalFuncs.playsound( user, this.fire_sound, 50, 1 );
					((Obj_Item_Projectile)this.in_chamber).on_hit( M );

					if ( !this.in_chamber.nodamage ) {
						((Mob_Living)user).apply_damage( this.in_chamber.damage * 2.5, this.in_chamber.damage_type, "head", null, null, null, new Txt( "Point blank shot in the mouth with " ).a( this.in_chamber ).item().ToString() );
						user.stat = 2;
						((Mob)user).death();
					} else {
						GlobalFuncs.to_chat( user, "<span class = 'notice'>Ow...</span>" );
						((Mob_Living)user).apply_effect( 110, "agony", 0 );
					}
					GlobalFuncs.qdel( this.in_chamber );
					this.in_chamber = null;
					this.mouthshoot = false;
					return null;
				} else {
					this.click_empty( user );
					this.mouthshoot = false;
					return null;
				}
			}

			if ( this.can_shoot() ) {
				
				if ( user.a_intent == "hurt" ) {
					((Ent_Static)user).visible_message( new Txt( "<span class='danger'> " ).The( user ).item().str( " fires " ).the( this ).item().str( " point blank at " ).item( M ).str( "!</span>" ).ToString() );
					this.damage_multiplier = 121;
					this.Fire( M, user, 0, false, true );
					this.damage_multiplier = 1;
					return null;
				} else if ( this.target.Contains( this.target != null && Lang13.Bool( M ) ) ) {
					this.Fire( M, user, 0, false, true );
					return null;
				} else {
					return base.attack( (object)(M), (object)(user), def_zone, eat_override );
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: lawgiver.dm
		public override void Fire( dynamic target = null, dynamic user = null, dynamic _params = null, bool? reflex = null, bool? struggle = null ) {
			reflex = reflex ?? false;
			struggle = struggle ?? false;

			dynamic M = null;
			dynamic M2 = null;
			dynamic H = null;
			dynamic a_hand = null;
			dynamic curloc = null;
			dynamic targloc = null;
			int direction = 0;
			dynamic B = null;
			int movementdirection = 0;
			ByTable mouse_control = null;
			Obj_Item_AmmoCasing_A12mm A = null;
			Obj_Item_AmmoCasing_A75 A2 = null;

			
			if ( Lang13.Bool( this.dna_profile ) ) {
				
				if ( this.dna_profile != user.dna.unique_enzymes ) {
					this.self_destruct( user );
					return;
				}
			} else {
				this.click_empty( user );
				this.say( "PLEASE REGISTER A DNA SAMPLE" );
				return;
			}

			if ( this.firing_mode == "rapid" && !this.rapidFirecheck ) {
				this.rapidFire( target, user, _params, reflex, struggle );
				return;
			}

			if ( !this.ready_to_fire() ) {
				
				if ( Game13.time % 3 != 0 ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>" + this + " is not ready to fire again!" );
				}
				return;
			}

			if ( this.firing_mode == "rapid" && !this.rapidFirechamber ) {
				this.in_chamber = null;

				if ( !this.chamber_round() ) {
					this.rapidFirestop = true;
					this.click_empty( user ); return;
				}
				this.rapidFirechamber = true;
			} else if ( this.firing_mode == "rapid" && this.rapidFirechamber ) {
				this.in_chamber = Lang13.Call( this.projectile_type, this );
			} else if ( this.firing_mode != "rapid" ) {
				this.in_chamber = null;

				if ( !this.chamber_round() ) {
					this.click_empty( user ); return;
				}
			}

			if ( this.clumsy_check ) {
				
				if ( user is Mob_Living ) {
					M = user;

					if ( Lang13.Bool( M.mutations.Contains( 5 ) ) && Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.to_chat( M, "<span class='danger'>" + this + " blows up in your face.</span>" );
						((Mob_Living)M).take_organ_damage( 0, 20 );
						new ByTable().Set( 1, this ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( M, "drop_item" ) );
						GlobalFuncs.qdel( this );
						return;
					}
				}
			}

			if ( !Lang13.Bool( ((Mob)user).IsAdvancedToolUser() ) || user is Mob_Living_Silicon_Robot_Mommi || user is Mob_Living_Carbon_Monkey_Diona ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return;
			}

			if ( user is Mob_Living ) {
				M2 = user;

				if ( Lang13.Bool( M2.mutations.Contains( 4 ) ) ) {
					GlobalFuncs.to_chat( M2, "<span class='warning'>Your meaty finger is much too large for the trigger guard!</span>" );
					return;
				}
			}

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( Lang13.Bool( user.dna ) && ( user.dna.mutantrace == "adamantine" || user.dna.mutantrace == "coalgolem" ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Your fat fingers don't fit in the trigger guard!</span>" );
					return;
				}
				a_hand = ((Mob)H).get_active_hand_organ();

				if ( !((Organ_External)a_hand).can_use_advanced_tools() ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Your " + a_hand + " doesn't have the dexterity to do this!</span>" );
					return;
				}
			}
			this.in_chamber.damage *= this.damage_multiplier;
			this.add_fingerprint( user );
			curloc = GlobalFuncs.get_turf( user );
			targloc = GlobalFuncs.get_turf( target );

			if ( !( targloc is Tile ) || !( curloc is Tile ) ) {
				return;
			}

			if ( !this.special_check( user ) ) {
				return;
			}

			if ( !Lang13.Bool( this.in_chamber ) ) {
				return;
			}
			GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + new Txt().item( user.name ).str( " (" ).item( user.ckey ).str( ") fired " ).the( this ).item().str( " (proj:" ).item( this.in_chamber.name ).str( ") at " ).item( target ).str( " " ).item( ( target is Mob ? "(" + target.ckey + ")" : "" ) ).str( " (" ).item( target.x ).str( "," ).item( target.y ).str( "," ).item( target.z ).str( ")" ).item( ( struggle == true ? " due to being disarmed." : "" ) ).ToString() ) );
			this.in_chamber.firer = user;
			this.in_chamber.def_zone = ((dynamic)user.zone_sel).selecting;

			if ( targloc == curloc ) {
				((Ent_Static)user).bullet_act( this.in_chamber );
				GlobalFuncs.qdel( this.in_chamber );
				this.in_chamber = null;
				this.update_icon();
				return;
			}

			if ( this.firing_mode == "rapid" && !this.rapid_message || this.firing_mode != "rapid" ) {
				
				if ( Lang13.Bool( this.recoil ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						GlobalFuncs.shake_camera( user, ( this.recoil ??0) + 1, this.recoil );
						return;
					}));

					if ( Lang13.Bool( user.locked_to ) && user.locked_to is Obj && !Lang13.Bool( user.locked_to.anchored ) ) {
						direction = Map13.GetDistance( user, target );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							B = user.locked_to;
							movementdirection = Num13.Rotate( direction, 180 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 1 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 1 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 1 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 2 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 2 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 3 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 3 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							Task13.Sleep( 3 );
							B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
							return;
						}));
					}

					if ( user.loc is Tile_Space || user.areaMaster.has_gravity == false ) {
						user.inertia_dir = Map13.GetDistance( target, user );
						Map13.Step( user, Convert.ToInt32( user.inertia_dir ) );
					}
				}
			}
			GlobalFuncs.playsound( user, this.fire_sound, 50, 1 );

			if ( !this.rapid_message ) {
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " fires " + this + ( reflex == true ? " by reflex" : "" ) + "!</span>", "<span class='warning'>You fire " + this + ( reflex == true ? "by reflex" : "" ) + "!</span>", "You hear a " + ( this.in_chamber is Obj_Item_Projectile_Beam ? "laser blast" : "gunshot" ) + "!" );

				if ( this.firing_mode == "rapid" ) {
					this.rapid_message = true;
				}
			}
			this.in_chamber.original = target;
			this.in_chamber.loc = GlobalFuncs.get_turf( user );
			this.in_chamber.starting = GlobalFuncs.get_turf( user );
			this.in_chamber.shot_from = this;
			((Mob)user).delayNextAttack( this.fire_delay );
			this.in_chamber.silenced = this.silenced;
			this.in_chamber.current = curloc;
			((Obj_Item_Projectile)this.in_chamber).OnFired();
			this.in_chamber.yo = Convert.ToDouble( targloc.y - curloc.y );
			this.in_chamber.xo = Convert.ToDouble( targloc.x - curloc.x );
			this.in_chamber.inaccurate = user.locked_to is Obj_Structure_Bed_Chair_Vehicle;

			if ( Lang13.Bool( _params ) ) {
				mouse_control = String13.ParseUrlParams( _params );

				if ( Lang13.Bool( mouse_control["icon-x"] ) ) {
					this.in_chamber.p_x = String13.ParseNumber( mouse_control["icon-x"] );
				}

				if ( Lang13.Bool( mouse_control["icon-y"] ) ) {
					this.in_chamber.p_y = String13.ParseNumber( mouse_control["icon-y"] );
				}
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( Lang13.Bool( this.in_chamber ) ) {
					this.in_chamber.process();
				}
				return;
			}));
			Task13.Sleep( 1 );
			this.in_chamber = null;
			this.update_icon();

			if ( user.hand == true ) {
				((Mob)user).update_inv_l_hand();
			} else {
				((Mob)user).update_inv_r_hand();
			}

			if ( this.firing_mode == "rapid" ) {
				A = new Obj_Item_AmmoCasing_A12mm( user.loc );
				A.BB = null;
				A.update_icon();
			}

			if ( this.firing_mode == "hi-EX" ) {
				A2 = new Obj_Item_AmmoCasing_A75( user.loc );
				A2.BB = null;
				A2.update_icon();
			}
			return;
		}

		// Function from file: lawgiver.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			Ent_Static H = null;

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( _args[1].speaker == this.loc && !Lang13.Bool( _args[1].frequency ) && Lang13.Bool( this.dna_profile ) ) {
				H = this.loc;

				if ( this.dna_profile == ((dynamic)H).dna.unique_enzymes ) {
					this.recoil = 0;

					if ( String13.FindIgnoreCase( _args[1].message, "stun", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "taser", 1, 0 ) != 0 ) {
						this.firing_mode = "stun";
						this.fire_sound = "sound/weapons/Taser.ogg";
						this.projectile_type = "/obj/item/projectile/energy/electrode";
						this.fire_delay = 0;
						Task13.Sleep( 3 );
						this.say( "STUN" );
					} else if ( String13.FindIgnoreCase( _args[1].message, "laser", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "lethal", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "beam", 1, 0 ) != 0 ) {
						this.firing_mode = "laser";
						this.fire_sound = "sound/weapons/lasercannonfire.ogg";
						this.projectile_type = "/obj/item/projectile/beam/heavylaser";
						this.fire_delay = 5;
						Task13.Sleep( 3 );
						this.say( "LASER" );
					} else if ( String13.FindIgnoreCase( _args[1].message, "rapid", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "automatic", 1, 0 ) != 0 ) {
						this.firing_mode = "rapid";
						this.fire_sound = "sound/weapons/Gunshot_c20.ogg";
						this.projectile_type = "/obj/item/projectile/bullet/midbullet/lawgiver";
						this.fire_delay = 0;
						this.rapid_message = false;
						this.recoil = 1;
						Task13.Sleep( 3 );
						this.say( "RAPID FIRE" );
					} else if ( String13.FindIgnoreCase( _args[1].message, "flare", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "incendiary", 1, 0 ) != 0 ) {
						this.firing_mode = "flare";
						this.fire_sound = "sound/weapons/shotgun.ogg";
						this.projectile_type = "/obj/item/projectile/flare";
						this.fire_delay = 5;
						this.recoil = 1;
						Task13.Sleep( 3 );
						this.say( "FLARE" );
					} else if ( String13.FindIgnoreCase( _args[1].message, "hi ex", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "hi-ex", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "explosive", 1, 0 ) != 0 || String13.FindIgnoreCase( _args[1].message, "rocket", 1, 0 ) != 0 ) {
						this.firing_mode = "hi-EX";
						this.fire_sound = "sound/weapons/elecfire.ogg";
						this.projectile_type = "/obj/item/projectile/bullet/gyro";
						this.fire_delay = 4;
						this.recoil = 1;
						Task13.Sleep( 3 );
						this.say( "HI-EX" );
					}
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: lawgiver.dm
		public bool countAmmo( dynamic A = null ) {
			dynamic L = null;

			L = A;

			if ( L.stuncharge == 0 && L.lasercharge == 0 && L.rapid_ammo_count == 0 && L.flare_ammo_count == 0 && L.hi_ex_ammo_count == 0 ) {
				return false;
			} else {
				this.has_played_alert = false;
				return true;
			}
		}

		// Function from file: lawgiver.dm
		public void getAmmo( dynamic user = null ) {
			dynamic L = null;

			
			if ( Lang13.Bool( this.magazine ) ) {
				L = this.magazine;
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>It has enough energy for " ).item( L.stuncharge / 20 ).str( " stun shot" ).s().str( " left.</span>" ).ToString() );
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>It has enough energy for " ).item( L.lasercharge / 20 ).str( " laser shot" ).s().str( " left.</span>" ).ToString() );
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>It has " ).item( L.rapid_ammo_count ).str( " rapid fire round" ).s().str( " remaining.</span>" ).ToString() );
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>It has " ).item( L.flare_ammo_count ).str( " flare round" ).s().str( " remaining.</span>" ).ToString() );
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>It has " ).item( L.hi_ex_ammo_count ).str( " hi-EX round" ).s().str( " remaining.</span>" ).ToString() );
			}
			return;
		}

		// Function from file: lawgiver.dm
		public bool can_shoot(  ) {
			dynamic L = null;

			
			if ( !Lang13.Bool( this.magazine ) ) {
				return false;
			} else {
				L = this.magazine;

				switch ((string)( this.firing_mode )) {
					case "stun":
						
						if ( L.stuncharge >= 20 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							return true;
						} else {
							return false;
						}
						break;
					case "laser":
						
						if ( L.lasercharge >= 20 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							return true;
						} else {
							return false;
						}
						break;
					case "rapid":
						
						if ( L.rapid_ammo_count >= 1 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							return true;
						} else {
							return false;
						}
						break;
					case "flare":
						
						if ( L.flare_ammo_count >= 1 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							return true;
						} else {
							return false;
						}
						break;
					case "hi-EX":
						
						if ( L.hi_ex_ammo_count >= 1 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							return true;
						} else {
							return false;
						}
						break;
				}
			}
			return false;
		}

		// Function from file: lawgiver.dm
		public bool chamber_round(  ) {
			dynamic L = null;

			
			if ( Lang13.Bool( this.in_chamber ) || !Lang13.Bool( this.magazine ) ) {
				return false;
			} else {
				L = this.magazine;

				switch ((string)( this.firing_mode )) {
					case "stun":
						
						if ( L.stuncharge >= 20 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							this.in_chamber = Lang13.Call( this.projectile_type, this );
							L.stuncharge -= 20;
							return true;
						} else {
							return false;
						}
						break;
					case "laser":
						
						if ( L.lasercharge >= 20 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							this.in_chamber = Lang13.Call( this.projectile_type, this );
							L.lasercharge -= 20;
							return true;
						} else {
							return false;
						}
						break;
					case "rapid":
						
						if ( L.rapid_ammo_count >= 1 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							this.in_chamber = Lang13.Call( this.projectile_type, this );
							L.rapid_ammo_count -= 1;
							return true;
						} else {
							return false;
						}
						break;
					case "flare":
						
						if ( L.flare_ammo_count >= 1 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							this.in_chamber = Lang13.Call( this.projectile_type, this );
							L.flare_ammo_count -= 1;
							return true;
						} else {
							return false;
						}
						break;
					case "hi-EX":
						
						if ( L.hi_ex_ammo_count >= 1 ) {
							
							if ( Lang13.Bool( this.in_chamber ) ) {
								return true;
							}

							if ( !Lang13.Bool( this.projectile_type ) ) {
								return false;
							}
							this.in_chamber = Lang13.Call( this.projectile_type, this );
							L.hi_ex_ammo_count -= 1;
							return true;
						} else {
							return false;
						}
						break;
				}
			}
			return false;
		}

		// Function from file: lawgiver.dm
		public void rapidFire( dynamic target = null, dynamic user = null, dynamic _params = null, bool? reflex = null, bool? struggle = null ) {
			reflex = reflex ?? false;
			struggle = struggle ?? false;

			int? i = null;

			this.rapidFirecheck = true;
			i = null;
			i = 1;

			while (( i ??0) <= 3) {
				
				if ( !this.rapidFirestop ) {
					this.Fire( target, user, _params, reflex, struggle );
				}
				i++;
			}
			this.rapidFirecheck = false;
			this.rapidFirechamber = false;
			this.rapidFirestop = false;
			this.rapid_message = false;
			return;
		}

		// Function from file: lawgiver.dm
		public bool RemoveMag( dynamic user = null ) {
			dynamic L = null;

			
			if ( Lang13.Bool( this.magazine ) ) {
				L = this.magazine;
				L.loc = GlobalFuncs.get_turf( this.loc );

				if ( Lang13.Bool( user ) ) {
					((Mob)user).put_in_hands( L );
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You pull the magazine out of " ).the( this ).item().str( "!</span>" ).ToString() );
				}
				L.update_icon();
				this.magazine = null;
				this.update_icon();
				return true;
			}
			return false;
		}

		// Function from file: lawgiver.dm
		public bool LoadMag( dynamic AM = null, dynamic user = null ) {
			
			if ( AM is Obj_Item_AmmoStorage_Magazine_Lawgiver && !Lang13.Bool( this.magazine ) ) {
				
				if ( Lang13.Bool( user ) ) {
					
					if ( Lang13.Bool( user.drop_item( AM, this ) ) ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You load the magazine into " ).the( this ).item().str( ".</span>" ).ToString() );
					} else {
						return false;
					}
				}
				this.magazine = AM;
				AM.update_icon();
				this.update_icon();
				return true;
			}
			return false;
		}

		// Function from file: lawgiver.dm
		public void self_destruct( dynamic user = null ) {
			ByTable req_access = null;

			req_access = new ByTable(new object [] { GlobalVars.access_security });

			if ( GlobalFuncs.can_access( user.GetAccess(), req_access ) ) {
				this.say( "ERROR: DNA PROFILE DOES NOT MATCH" );
				return;
			}
			this.say( "UNAUTHORIZED ACCESS DETECTED" );
			GlobalFuncs.explosion( user, -1, 0, 2 );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: lawgiver.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			dynamic L = null;
			Image magazine_overlay = null;
			Image ammo_overlay = null;
			Ent_Static H = null;
			Image DNA_overlay = null;

			this.overlays.len = 0;

			if ( Lang13.Bool( this.magazine ) ) {
				this.item_state = "" + Lang13.Initial( this, "icon_state" ) + "1";
				L = this.magazine;
				magazine_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + "Mag" );
				ammo_overlay = null;

				if ( this.firing_mode == "stun" && L.stuncharge != 0 ) {
					ammo_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + L.stuncharge / 20 );
				}

				if ( this.firing_mode == "laser" && L.lasercharge != 0 ) {
					ammo_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + L.lasercharge / 20 );
				}

				if ( this.firing_mode == "rapid" && L.rapid_ammo_count != 0 ) {
					ammo_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + L.rapid_ammo_count );
				}

				if ( this.firing_mode == "flare" && L.flare_ammo_count != 0 ) {
					ammo_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + L.flare_ammo_count );
				}

				if ( this.firing_mode == "hi-EX" && L.hi_ex_ammo_count != 0 ) {
					ammo_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + L.hi_ex_ammo_count );
				}
				this.overlays.Add( magazine_overlay );
				this.overlays.Add( ammo_overlay );
			} else {
				this.item_state = "" + Lang13.Initial( this, "icon_state" ) + "0";
			}

			if ( this.loc is Mob_Living_Carbon_Human ) {
				H = this.loc;
				DNA_overlay = null;

				if ( ((dynamic)H).l_hand == this || ((dynamic)H).r_hand == this ) {
					
					if ( Lang13.Bool( this.dna_profile ) ) {
						
						if ( this.dna_profile == ((dynamic)H).dna.unique_enzymes ) {
							DNA_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + "DNAgood" );
						} else {
							DNA_overlay = new Image( "icons/obj/gun.dmi", this, "" + Lang13.Initial( this, "icon_state" ) + "DNAbad" );
						}
						this.overlays.Add( DNA_overlay );
					}
				}
				((dynamic)H).update_inv_r_hand();
				((dynamic)H).update_inv_l_hand();
			}
			return null;
		}

		// Function from file: lawgiver.dm
		public override dynamic equipped( dynamic user = null, dynamic slot = null ) {
			this.update_icon();
			return null;
		}

		// Function from file: lawgiver.dm
		public override dynamic GetVoice(  ) {
			string the_name = null;

			the_name = "The " + this.name;
			return the_name;
		}

		// Function from file: lawgiver.dm
		[Verb]
		[VerbInfo( name: "Erase DNA sample", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void erase_DNA_sample(  ) {
			Ent_Static H = null;

			H = this.loc;

			if ( Lang13.Bool( this.dna_profile ) ) {
				
				if ( this.dna_profile == ((dynamic)H).dna.unique_enzymes ) {
					this.dna_profile = null;
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You erase the DNA profile from " ).the( this ).item().str( ".</span>" ).ToString() );
					this.verbs.Add( typeof(Obj_Item_Weapon_Gun_Lawgiver).GetMethod( "submit_DNA_sample" ) );
					this.verbs.Remove( typeof(Obj_Item_Weapon_Gun_Lawgiver).GetMethod( "erase_DNA_sample" ) );
				} else {
					this.self_destruct( H );
				}
			}
			return;
		}

		// Function from file: lawgiver.dm
		[Verb]
		[VerbInfo( name: "Submit DNA sample", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void submit_DNA_sample(  ) {
			Ent_Static H = null;

			H = this.loc;

			if ( !Lang13.Bool( this.dna_profile ) ) {
				this.dna_profile = ((dynamic)H).dna.unique_enzymes;
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You submit a DNA sample to " ).the( this ).item().str( ".</span>" ).ToString() );
				this.verbs.Add( typeof(Obj_Item_Weapon_Gun_Lawgiver).GetMethod( "erase_DNA_sample" ) );
				this.verbs.Remove( typeof(Obj_Item_Weapon_Gun_Lawgiver).GetMethod( "submit_DNA_sample" ) );
			}
			return;
		}

	}

}