// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ConveyorSwitch : Obj_Machinery {

		public double? position = 0;
		public double? last_pos = -1;
		public double? convdir = 0;
		public bool operated = true;
		public string id_tag = "";
		public int frequency = 1367;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 128;
			this.anchored = 1;
			this.icon = "icons/obj/recycling.dmi";
			this.icon_state = "switch-off";
		}

		// Function from file: conveyor2.dm
		public Obj_Machinery_ConveyorSwitch ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.updateConfig();
				return;
			}));
			return;
		}

		// Function from file: conveyor2.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			int _default = 0;

			_default = base.multitool_topic( user, href_list, (object)(O) );

			if ( _default != 0 ) {
				return _default;
			}
			Interface13.Stat( null, href_list.Contains( "setconvdir" ) );

			if ( _default != 0 ) {
				this.convdir = String13.ParseNumber( href_list["setconvdir"] );
				this.updateConfig();
				return 1;
			}
			return _default;
		}

		// Function from file: conveyor2.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			string dis_id_tag = null;

			dis_id_tag = "-----";

			if ( this.id_tag != null && this.id_tag != "" ) {
				dis_id_tag = this.id_tag;
			}
			return new Txt( "\n		<ul>\n			<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=1367\">Reset</a>)</li>\n			<li><b>ID Tag:</b> <a href=\"?src=" ).Ref( this ).str( ";set_id=1\">" ).item( dis_id_tag ).str( "</a></li>\n			<li><b>Restrict Pulling: </b>\n				" ).item( ( this.convdir == -1 ? "<b>&larr;</b>" : new Txt( "<a href=\"?src=" ).Ref( this ).str( ";setconvdir=-1\">&larr;</a>" ).ToString() ) ).str( "\n				" ).item( ( this.convdir == 0 ? "<b>No</b>" : new Txt( "<a href=\"?src=" ).Ref( this ).str( ";setconvdir= 0\">No</a>" ).ToString() ) ).str( "\n				" ).item( ( this.convdir == 1 ? "<b>&rarr;</b>" : new Txt( "<a href=\"?src=" ).Ref( this ).str( ";setconvdir= 1\">&rarr;</a>" ).ToString() ) ).str( "\n			</li>\n		</ul>" ).ToString();
		}

		// Function from file: conveyor2.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic T = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>Deconstructing " ).the( this ).item().str( "...</span>" ).ToString() );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 100, 1 );

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You disassemble " ).the( this ).item().str( ".</span>" ).ToString() );
					T = GlobalFuncs.get_turf( this );
					new Obj_Item_Device_Assembly_Signaler( T );
					new Obj_Item_Stack_Rods( T, 1 );
					GlobalFuncs.qdel( this );
				}
				return 1;
			}
			return _default;
		}

		// Function from file: conveyor2.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( a, this, "toggled" ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
				return 0;
			}

			if ( !Lang13.Bool( this.convdir ) ) {
				
				if ( this.position == 0 ) {
					
					if ( ( this.last_pos ??0) < 0 ) {
						this.position = 1;
						this.last_pos = 0;
						this.send_command( "forward" );
					} else {
						this.position = -1;
						this.last_pos = 0;
						this.send_command( "reverse" );
					}
				} else {
					this.last_pos = this.position;
					this.position = 0;
					this.send_command( "stop" );
				}
			} else if ( this.position == 0 ) {
				this.position = this.convdir;
				this.send_command( ( this.convdir == 1 ? "forward" : "reverse" ) );
			} else {
				this.position = 0;
				this.send_command( "stop" );
			}
			this.update();
			return null;
		}

		// Function from file: conveyor2.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			
			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			this.update();
			return false;
		}

		// Function from file: conveyor2.dm
		public void send_command( string command = null ) {
			Game_Data signal = null;

			
			if ( this.radio_connection != null ) {
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).source = this;
				((dynamic)signal).transmission_method = 1;
				((dynamic)signal).data["tag"] = this.id_tag;
				((dynamic)signal).data["timestamp"] = Game13.time;
				((dynamic)signal).data["command"] = command;
				this.radio_connection.post_signal( this, signal, null, 30 );
			}
			return;
		}

		// Function from file: conveyor2.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_CONVEYORS );
			return;
		}

		// Function from file: conveyor2.dm
		public void update(  ) {
			
			if ( ( this.position ??0) < 0 ) {
				this.icon_state = "switch-rev";
			} else if ( ( this.position ??0) > 0 ) {
				this.icon_state = "switch-fwd";
			} else {
				this.icon_state = "switch-off";
			}
			return;
		}

		// Function from file: conveyor2.dm
		public void updateConfig(  ) {
			return;
		}

		// Function from file: conveyor2.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}

			if ( this == ((dynamic)signal).source ) {
				return false;
			}

			if ( this.id_tag != ((dynamic)signal).data["tag"] || !Lang13.Bool( ((dynamic)signal).data["command"] ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.convdir ) ) {
				
				dynamic _a = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
				if ( _a=="forward" ) {
					this.position = 1;
					this.last_pos = 0;
				} else if ( _a=="reverse" ) {
					this.position = -1;
					this.last_pos = 0;
				} else if ( _a=="stop" ) {
					this.last_pos = this.position;
					this.position = 0;
				} else {
					Game13.log.WriteMsg( "## TESTING: " + ( "Got unknown command \"" + ((dynamic)signal).data["command"] + "\" from " + this + "!" ) );
					return false;
				}
			} else {
				
				dynamic _b = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
				if ( _b=="forward" ) {
					
					if ( this.convdir == 1 ) {
						this.position = 1;
					}
				} else if ( _b=="reverse" ) {
					
					if ( this.convdir == -1 ) {
						this.position = -1;
					}
				} else if ( _b=="stop" ) {
					this.position = 0;
				} else {
					Game13.log.WriteMsg( "## TESTING: " + ( "Got unknown command \"" + ((dynamic)signal).data["command"] + "\" from " + this + "!" ) );
					return false;
				}
			}
			this.update();
			return false;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}