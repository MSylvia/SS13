// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Battery : Obj_Machinery_Power {

		public dynamic output = 50000;
		public int lastout = 0;
		public double loaddemand = 0;
		public dynamic capacity = 5000000;
		public dynamic charge = 1000000;
		public bool? charging = false;
		public bool chargemode = false;
		public int chargecount = 0;
		public dynamic chargelevel = 50000;
		public bool? online = true;
		public dynamic smes_input_max = 200000;
		public dynamic smes_output_max = 200000;
		public string name_tag = "";
		public bool infinite_power = false;
		public bool last_output = false;
		public bool last_charge = false;
		public bool last_online = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 6;
			this.icon_state = "smes";
		}

		public Obj_Machinery_Power_Battery ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: battery.dm
		public override dynamic emp_act( int severity = 0 ) {
			bool? old_online = null;
			bool? old_charging = null;
			dynamic old_output = null;

			old_online = this.online;
			old_charging = this.charging;
			old_output = this.output;
			this.online = false;
			this.charging = false;
			this.output = 0;
			this.charge = Num13.MaxInt( 0, Convert.ToInt32( this.charge - 1000000 / severity ) );
			Task13.Schedule( 100, (Task13.Closure)(() => {
				
				if ( this.output == 0 ) {
					this.output = old_output;
				}

				if ( this.online == false ) {
					this.online = old_online;
				}

				if ( this.charging == false ) {
					this.charging = old_charging;
				}
				return;
			}));
			base.emp_act( severity );
			return null;
		}

		// Function from file: battery.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() ) {
				return null;
			}

			if ( !( Task13.User is Mob_Living_Carbon_Human || GlobalVars.ticker != null ) && GlobalVars.ticker.mode.name != "monkey" ) {
				
				if ( !( Task13.User is Mob_Living_Silicon_Ai ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't have the dexterity to do this!</span>" );
					return null;
				}
			}

			if ( !( this.loc is Tile ) && !( Task13.User is Mob_Living_Silicon ) ) {
				return 0;
			}

			if ( Lang13.Bool( href_list["cmode"] ) ) {
				this.chargemode = !this.chargemode;

				if ( !this.chargemode ) {
					this.charging = false;
				}
				this.update_icon();
			} else if ( Lang13.Bool( href_list["online"] ) ) {
				this.online = !( this.online == true );
				this.update_icon();
			} else if ( Lang13.Bool( href_list["input"] ) ) {
				
				dynamic _a = href_list["input"]; // Was a switch-case, sorry for the mess.
				if ( _a=="min" ) {
					this.chargelevel = 0;
				} else if ( _a=="max" ) {
					this.chargelevel = this.smes_input_max;
				} else if ( _a=="set" ) {
					this.chargelevel = Interface13.Input( Task13.User, "Enter new input level (0-" + this.smes_input_max + ")", "SMES Input Power Control", this.chargelevel, null, InputType.Num );
				}
				this.chargelevel = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( this.smes_input_max ), Convert.ToInt32( this.chargelevel ) ) );
			} else if ( Lang13.Bool( href_list["output"] ) ) {
				
				dynamic _b = href_list["output"]; // Was a switch-case, sorry for the mess.
				if ( _b=="min" ) {
					this.output = 0;
				} else if ( _b=="max" ) {
					this.output = this.smes_output_max;
				} else if ( _b=="set" ) {
					this.output = Interface13.Input( Task13.User, "Enter new output level (0-" + this.smes_output_max + ")", "SMES Output Power Control", this.output, null, InputType.Num );
				}
				this.output = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( this.smes_output_max ), Convert.ToInt32( this.output ) ) );
			}
			this.investigation_log( "singulo", "input/output; " + ( Convert.ToDouble( this.chargelevel ) > Convert.ToDouble( this.output ) ? "<font color='green'>" : "<font color='red'>" ) + this.chargelevel + "/" + this.output + "</font> | Output-mode: " + ( this.online == true ? "<font color='green'>on</font>" : "<font color='red'>off</font>" ) + " | Input-mode: " + ( this.chargemode ? "<font color='green'>auto</font>" : "<font color='red'>off</font>" ) + " by " + Task13.User.key );
			return 1;
		}

		// Function from file: battery.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return;
			}
			data = new ByTable( 0 );
			data["nameTag"] = this.name_tag;
			data["storedCapacity"] = Num13.Round( Convert.ToDouble( this.charge * 100 / this.capacity ), 0.1 );
			data["charging"] = this.charging;
			data["chargeMode"] = this.chargemode;
			data["chargeLevel"] = this.chargelevel;
			data["chargeMax"] = this.smes_input_max;
			data["outputOnline"] = this.online;
			data["outputLevel"] = this.output;
			data["outputMax"] = this.smes_output_max;
			data["outputLoad"] = Num13.Floor( this.loaddemand );
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "smes.tmpl", "SMES Power Storage Unit", 540, 380 );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			}
			return;
		}

		// Function from file: battery.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.ui_interact( a );
			return null;
		}

		// Function from file: battery.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.add_fingerprint( user );
			this.ui_interact( user );
			return null;
		}

		// Function from file: battery.dm
		public void ion_act(  ) {
			Effect_Effect_System_SmokeSpread smoke = null;
			Effect_Effect_System_SparkSpread s = null;
			Effect_Effect_System_SmokeSpread smoke2 = null;

			
			if ( this.z == 1 ) {
				
				if ( Rand13.PercentChance( 1 ) ) {
					GlobalFuncs.message_admins( "<span class='warning'>SMES explosion in " + GlobalFuncs.get_area( this ) + "</span>" );
					this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " is making strange noises!</span>" ).ToString(), "<span class='warning'>You hear sizzling electronics.</span>" );
					Task13.Sleep( Convert.ToInt32( Rand13.Pick(new object [] { 4, 5, 6, 7, 10, 14 }) * 10 ) );
					smoke = new Effect_Effect_System_SmokeSpread();
					smoke.set_up( 3, 0, this.loc );
					smoke.attach( this );
					smoke.start();
					GlobalFuncs.explosion( this.loc, -1, 0, 1, 3, 0 );
					GlobalFuncs.qdel( this );
					return;
				} else if ( Rand13.PercentChance( 15 ) ) {
					GlobalFuncs.message_admins( "<span class='warning'>SMES power drain in " + GlobalFuncs.get_area( this ) + "</span>" );
					s = new Effect_Effect_System_SparkSpread();
					s.set_up( 3, 1, this );
					s.start();

					if ( Rand13.PercentChance( 50 ) ) {
						this.emp_act( 1 );
					} else {
						this.emp_act( 2 );
					}
				} else if ( Rand13.PercentChance( 5 ) ) {
					GlobalFuncs.message_admins( "<span class='warning'>SMES smoke in " + GlobalFuncs.get_area( this ) + "</span>" );
					smoke2 = new Effect_Effect_System_SmokeSpread();
					smoke2.set_up( 3, 0, this.loc );
					smoke2.attach( this );
					smoke2.start();
				}
			}
			return;
		}

		// Function from file: battery.dm
		public virtual void restore(  ) {
			int _chargedisplay = 0;
			double excess = 0;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return;
			}
			_chargedisplay = this.chargedisplay();
			excess = this.powernet.netexcess;
			excess = Num13.MinInt( this.lastout, ((int)( excess )) );
			excess = Num13.MinInt( Convert.ToInt32( ( this.capacity - this.charge ) / 0.05 ), ((int)( excess )) );
			this.charge += excess * 0.05;
			this.powernet.netexcess -= excess;
			this.loaddemand = this.lastout - excess;

			if ( _chargedisplay != this.chargedisplay() ) {
				this.update_icon();
			}
			return;
		}

		// Function from file: battery.dm
		public int chargedisplay(  ) {
			return Num13.Floor( Convert.ToDouble( this.charge * 5.5 / ( Lang13.Bool( this.capacity ) ? this.capacity : ((dynamic)( 5000000 )) ) ) );
		}

		// Function from file: battery.dm
		public override dynamic process(  ) {
			bool? _charging = null;
			bool? _online = null;
			dynamic excess = null;
			double load = 0;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( this.infinite_power ) {
				this.capacity = Double.PositiveInfinity;
				this.charge = Double.PositiveInfinity;
			}
			_charging = this.charging;
			_online = this.online;
			excess = this.surplus();

			if ( this.charging == true ) {
				
				if ( Convert.ToDouble( excess ) >= Convert.ToDouble( this.chargelevel ) ) {
					load = Num13.MinInt( Convert.ToInt32( ( this.capacity - this.charge ) / 0.05 ), Convert.ToInt32( this.chargelevel ) );
					this.charge += load * 0.05;
					this.add_load( load );
				} else {
					this.charging = GlobalVars.FALSE;
					this.chargecount = 0;
				}
			} else if ( this.chargemode ) {
				
				if ( this.chargecount > Rand13.Int( 3, 6 ) ) {
					this.charging = GlobalVars.TRUE;
					this.chargecount = 0;
				}

				if ( Convert.ToDouble( excess ) > Convert.ToDouble( this.chargelevel ) ) {
					this.chargecount++;
				} else {
					this.chargecount = 0;
				}
			} else {
				this.chargecount = 0;
			}

			if ( this.online == true ) {
				this.lastout = Num13.MinInt( Convert.ToInt32( this.charge / 0.05 ), Convert.ToInt32( this.output ) );
				this.charge -= this.lastout * 0.05;
				this.add_avail( this.lastout );

				if ( Convert.ToDouble( this.charge ) < 0.0 ) {
					this.online = GlobalVars.FALSE;
					this.lastout = 0;
				}
			}

			if ( _charging != this.charging || _online != this.online ) {
				this.update_icon();
			}
			return null;
		}

		// Function from file: battery.dm
		public override dynamic RefreshParts(  ) {
			int capcount = 0;
			int lasercount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			capcount = 0;
			lasercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_Capacitor ) {
					capcount += SP.rating - 1;
				}

				if ( SP is Obj_Item_Weapon_StockParts_MicroLaser ) {
					lasercount += SP.rating - 1;
				}
			}
			this.capacity = Lang13.Initial( this, "capacity" ) + capcount * 500000;
			this.smes_input_max = Lang13.Initial( this, "smes_input_max" ) + lasercount * 25000;
			this.smes_output_max = Lang13.Initial( this, "smes_output_max" ) + lasercount * 25000;
			return null;
		}

		// Function from file: battery.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int clevel = 0;

			this.overlays.len = 0;

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			this.overlays.Add( GlobalVars.battery_online[( this.online == true ?1:0) + 1] );

			if ( this.charging == true ) {
				this.overlays.Add( GlobalVars.battery_charging[2] );
			} else if ( this.chargemode ) {
				this.overlays.Add( GlobalVars.battery_charging[1] );
			}
			clevel = this.chargedisplay();

			if ( clevel > 0 ) {
				this.overlays.Add( GlobalVars.battery_charge[clevel] );
			}
			return null;
		}

	}

}