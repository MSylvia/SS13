// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Vehicle : Obj {

		public Type keytype = null;
		public int next_vehicle_move = 0;
		public int vehicle_move_delay = 2;
		public bool auto_door_open = true;
		public bool generic_pixel_x = false;
		public int generic_pixel_y = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_buckle = 1;
			this.buckle_lying = 0;
			this.icon = "icons/obj/vehicles.dmi";
			this.icon_state = "fuckyou";
		}

		// Function from file: vehicle.dm
		public Obj_Vehicle ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.handle_vehicle_layer();
			return;
		}

		// Function from file: vehicle.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			dynamic _default = null;

			_default = base.Bump( Obstacle, (object)(yes) );

			if ( this.auto_door_open ) {
				
				if ( Obstacle is Obj_Machinery_Door && Lang13.Bool( this.buckled_mob ) ) {
					Obstacle.Bumped( this.buckled_mob );
				}
			}
			return _default;
		}

		// Function from file: vehicle.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( this.keytype != null && Lang13.Bool( ((dynamic)this.keytype).IsInstanceOfType( A ) ) ) {
				user.WriteMsg( new Txt( "Hold " ).item( A ).str( " in one of your hands while you drive " ).the( this.name ).item().str( "." ).ToString() );
			}
			return null;
		}

		// Function from file: vehicle.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;

			base.Move( (object)(NewLoc), Dir, step_x, step_y );
			this.handle_vehicle_layer();
			this.handle_vehicle_offsets();
			return false;
		}

		// Function from file: vehicle.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			
			if ( user.incapacitated() ) {
				this.unbuckle_mob();
			}

			if ( this.keycheck( user ) ) {
				
				if ( !( this.Process_Spacemove( direction ) != 0 ) || !GlobalFuncs.has_gravity( this.loc ) || Game13.time < this.next_vehicle_move || !( this.loc is Tile ) ) {
					return false;
				}
				this.next_vehicle_move = Game13.time + this.vehicle_move_delay;
				Map13.Step( this, direction ??0 );

				if ( Lang13.Bool( this.buckled_mob ) ) {
					
					if ( this.buckled_mob.loc != this.loc ) {
						this.buckled_mob.buckled = null;
						this.buckled_mob.buckled = this;
					}
				}
				this.handle_vehicle_layer();
				this.handle_vehicle_offsets();
			} else {
				user.WriteMsg( new Txt( "<span class='notice'>You'll need the keys in one of your hands to drive " ).the( this.name ).item().str( ".</span>" ).ToString() );
			}
			return false;
		}

		// Function from file: vehicle.dm
		public override bool user_buckle_mob( Ent_Static M = null, Mob user = null ) {
			Ent_Dynamic A = null;

			
			if ( user.incapacitated() ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( A.density ) {
					
					if ( A != this && A != M ) {
						return false;
					}
				}
			}
			M.loc = GlobalFuncs.get_turf( this );
			base.user_buckle_mob( M, user );
			this.handle_vehicle_offsets();
			return false;
		}

		// Function from file: vehicle.dm
		public override dynamic unbuckle_mob( bool? force = null ) {
			force = force ?? false;

			dynamic _default = null;

			
			if ( Lang13.Bool( this.buckled_mob ) ) {
				this.buckled_mob.pixel_x = 0;
				this.buckled_mob.pixel_y = 0;
			}
			_default = base.unbuckle_mob( force );
			return _default;
		}

		// Function from file: vehicle.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			return false;
		}

		// Function from file: vehicle.dm
		public bool keycheck( Mob user = null ) {
			
			if ( this.keytype != null ) {
				
				if ( Lang13.Bool( ((dynamic)this.keytype).IsInstanceOfType( user.l_hand ) ) || Lang13.Bool( ((dynamic)this.keytype).IsInstanceOfType( user.r_hand ) ) ) {
					return true;
				}
			} else {
				return true;
			}
			return false;
		}

		// Function from file: vehicle.dm
		public virtual void handle_vehicle_offsets(  ) {
			
			if ( Lang13.Bool( this.buckled_mob ) ) {
				this.buckled_mob.dir = this.dir;
				this.buckled_mob.pixel_x = this.generic_pixel_x;
				this.buckled_mob.pixel_y = this.generic_pixel_y;
			}
			return;
		}

		// Function from file: vehicle.dm
		public virtual void handle_vehicle_layer(  ) {
			
			if ( this.dir != GlobalVars.NORTH ) {
				this.layer = 401;
			} else {
				this.layer = GlobalVars.OBJ_LAYER;
			}
			return;
		}

	}

}