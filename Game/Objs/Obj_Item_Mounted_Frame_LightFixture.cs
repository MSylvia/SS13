// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Mounted_Frame_LightFixture : Obj_Item_Mounted_Frame {

		public string fixture_type = "tube";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mount_reqs = new ByTable(new object [] { "simfloor" });
			this.icon = "icons/obj/lighting.dmi";
			this.icon_state = "tube-construct-item";
		}

		public Obj_Item_Mounted_Frame_LightFixture ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: lights.dm
		public override void do_build( dynamic on_wall = null, dynamic user = null ) {
			int constrdir = 0;
			dynamic constrloc = null;
			Obj_Machinery_LightConstruct newlight = null;

			GlobalFuncs.to_chat( user, new Txt( "You begin attaching " ).item( this ).str( " to " ).the( on_wall ).item().str( "." ).ToString() );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 75, 1 );
			constrdir = Convert.ToInt32( user.dir );
			constrloc = GlobalFuncs.get_turf( user );

			if ( !GlobalFuncs.do_after( user, on_wall, 30 ) ) {
				return;
			}

			switch ((string)( this.fixture_type )) {
				case "bulb":
					newlight = new Obj_Machinery_LightConstruct_Small( constrloc );
					break;
				case "tube":
					newlight = new Obj_Machinery_LightConstruct( constrloc );
					break;
				default:
					newlight = new Obj_Machinery_LightConstruct_Small( constrloc );
					break;
			}
			newlight.dir = constrdir;
			newlight.fingerprints = this.fingerprints;
			newlight.fingerprintshidden = this.fingerprintshidden;
			newlight.fingerprintslast = this.fingerprintslast;
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " attaches " ).the( this ).item().str( " to " ).the( on_wall ).item().str( "." ).ToString(), new Txt( "You attach " ).the( this ).item().str( " to " ).the( on_wall ).item().str( "." ).ToString() );
			GlobalFuncs.qdel( this );
			return;
		}

	}

}