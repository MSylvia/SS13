// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_DetectiveScanner_Forger : Obj_Item_Device_DetectiveScanner {

		public ByTable custom_forgery = new ByTable( 3 );
		public bool forging = false;

		// Function from file: detective_scanner.dm
		public Obj_Item_Device_DetectiveScanner_Forger ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.custom_forgery[1] = new ByTable();
			this.custom_forgery[2] = new ByTable();
			this.custom_forgery[3] = new ByTable();
			return;
		}

		// Function from file: detective_scanner.dm
		public void clear_forgery(  ) {
			
			if ( this.custom_forgery.len != 0 ) {
				this.custom_forgery[1] = new ByTable();
				this.custom_forgery[2] = new ByTable();
				this.custom_forgery[3] = new ByTable();
			}
			return;
		}

		// Function from file: detective_scanner.dm
		public override bool add_data( dynamic A = null, ByTable blood_DNA_found = null, ByTable fingerprints_found = null, ByTable fibers_found = null ) {
			ByTable data_entry = null;
			ByTable custom_finger = null;
			ByTable custom_fiber = null;
			ByTable custom_blood = null;
			dynamic data_prints = null;
			dynamic print = null;
			dynamic merged_print = null;
			dynamic print2 = null;
			dynamic merged_print2 = null;
			ByTable fibers = null;
			int? j = null;
			int? j2 = null;
			ByTable blood = null;
			dynamic main_blood = null;
			dynamic main_blood2 = null;
			ByTable sum_list = null;

			data_entry = this.stored[new Txt( " " ).Ref( A ).ToString()];
			custom_finger = new ByTable();
			custom_fiber = new ByTable();
			custom_blood = new ByTable();

			if ( this.custom_forgery != null ) {
				custom_finger = this.custom_forgery[1];
				custom_fiber = this.custom_forgery[2];
				custom_blood = this.custom_forgery[3];
			}

			if ( GlobalFuncs.islist( data_entry ) ) {
				data_prints = data_entry[1];

				if ( custom_finger.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( custom_finger )) {
						print = _a;
						
						merged_print = data_prints[print];

						if ( !Lang13.Bool( merged_print ) ) {
							data_prints[print] = custom_finger;
						} else {
							data_prints[print] = GlobalFuncs.stringmerge( data_prints[print], custom_finger[print] );
						}
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( fingerprints_found )) {
						print2 = _b;
						
						merged_print2 = data_prints[print2];

						if ( !Lang13.Bool( merged_print2 ) ) {
							data_prints[print2] = fingerprints_found[print2];
						} else {
							data_prints[print2] = GlobalFuncs.stringmerge( data_prints[print2], fingerprints_found[print2] );
						}
					}
				}
				fibers = data_entry[2];

				if ( !( fibers != null ) ) {
					fibers = new ByTable();
				}

				if ( custom_fiber.len != 0 ) {
					j = null;
					j = 1;

					while (( j ??0) <= custom_fiber.len) {
						
						if ( !( fibers.Find( custom_fiber[j] ) != 0 ) ) {
							fibers.Add( custom_fiber[j] );
						}
						j++;
					}
				} else if ( fibers_found != null && fibers_found.len != 0 ) {
					j2 = null;
					j2 = 1;

					while (( j2 ??0) <= fibers_found.len) {
						
						if ( !( fibers.Find( fibers_found[j2] ) != 0 ) ) {
							fibers.Add( fibers_found[j2] );
						}
						j2++;
					}
				}
				blood = data_entry[3];

				if ( !( blood != null ) ) {
					blood = new ByTable();
				}

				if ( custom_blood.len != 0 ) {
					
					foreach (dynamic _c in Lang13.Enumerate( custom_blood )) {
						main_blood = _c;
						

						if ( !Lang13.Bool( blood[main_blood] ) ) {
							blood[main_blood] = custom_blood[blood];
						}
					}
				} else if ( blood_DNA_found != null && blood_DNA_found.len != 0 ) {
					
					foreach (dynamic _d in Lang13.Enumerate( blood_DNA_found )) {
						main_blood2 = _d;
						

						if ( !Lang13.Bool( blood[main_blood2] ) ) {
							blood[main_blood2] = blood_DNA_found[blood];
						}
					}
				}
				return true;
			}
			sum_list = null;
			sum_list = new ByTable( 4 );

			if ( custom_finger.len != 0 || custom_fiber.len != 0 || custom_blood.len != 0 ) {
				sum_list[1] = ( custom_finger != null ? custom_finger.Copy() : null );
				sum_list[2] = ( custom_fiber != null ? custom_fiber.Copy() : null );
				sum_list[3] = ( custom_blood != null ? custom_blood.Copy() : null );
			} else {
				sum_list[1] = fingerprints_found.Copy();
				sum_list[2] = fibers_found.Copy();
				sum_list[3] = blood_DNA_found.Copy();
			}
			sum_list[4] = new Txt().The( A ).item().str( " in " ).the( GlobalFuncs.get_area( A ) ).item().ToString();
			this.stored[new Txt( " " ).Ref( A ).ToString()] = sum_list;
			this.clear_forgery();
			return false;
		}

		// Function from file: detective_scanner.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			ByTable custom_finger = null;
			ByTable custom_fiber = null;
			ByTable custom_blood = null;
			ByTable blood_DNA_found = null;
			ByTable fingerprints_found = null;
			ByTable fibers_found = null;
			dynamic T = null;
			Ent_Static O = null;
			dynamic i = null;
			ByTable complete_prints = null;
			dynamic i2 = null;
			string print = null;
			dynamic i3 = null;
			dynamic blood = null;
			dynamic blood2 = null;

			custom_finger = new ByTable();
			custom_fiber = new ByTable();
			custom_blood = new ByTable();

			if ( this.custom_forgery != null ) {
				custom_finger = this.custom_forgery[1];
				custom_fiber = this.custom_forgery[2];
				custom_blood = this.custom_forgery[3];
			}

			if ( !GlobalFuncs.in_range( A, user ) ) {
				return false;
			}

			if ( this.loc != user ) {
				return false;
			}

			if ( A is Obj_Machinery_Computer_ForensicScanning ) {
				return false;
			}

			if ( A is Obj_Item_Weapon_FCard ) {
				GlobalFuncs.to_chat( user, "The scanner displays on the screen: \"ERROR 43: Object on Excluded Object List.\"" );
				return false;
			}
			this.add_fingerprint( user );
			blood_DNA_found = this.extract_blood( A );
			fingerprints_found = this.extract_fingerprints( A );
			fibers_found = this.extract_fibers( A );

			if ( A is Tile ) {
				T = A;

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
					O = _a;
					

					if ( O is Obj_Effect_Decal_Cleanable_Blood || O is Obj_Effect_Rune ) {
						blood_DNA_found.Add( this.extract_blood( O ) );
					}
				}
			}

			if ( fingerprints_found.len == 0 && blood_DNA_found.len == 0 && fibers_found.len == 0 ) {
				
				if ( !( custom_finger.len != 0 ) && !( custom_fiber.len != 0 ) && !( custom_blood.len != 0 ) ) {
					((Ent_Static)user).visible_message( new Txt().The( user ).item().str( " scans " ).the( A ).item().str( " with " ).a( this ).item().str( ", the air around " ).item( ( user.gender == GlobalVars.MALE ? "him" : "her" ) ).str( " humming" ).item( ( Rand13.PercentChance( 70 ) ? " gently." : "." ) ).ToString(), "<span class='notice'>Unable to locate any fingerprints, materials, fibers, or blood on " + A + "!</span>", "You hear a faint hum of electrical equipment." );
					return false;
				} else {
					((Ent_Static)user).visible_message( new Txt().The( user ).item().str( " scans " ).the( A ).item().str( " with " ).a( this ).item().str( ", the air around " ).item( ( user.gender == GlobalVars.MALE ? "him" : "her" ) ).str( " humming" ).item( ( Rand13.PercentChance( 70 ) ? " gently." : "." ) ).ToString(), "<span class='notice'>Unable to locate any fingerprints, materials, fibers, or blood on " + A + ", loading custom forgery instead.</span>", "You hear a faint hum of electrical equipment." );
				}
			}

			if ( this.add_data( A, blood_DNA_found, fingerprints_found, fibers_found ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Object already in internal memory. Consolidating data...</span>" );
				return false;
			}

			if ( !( A.fingerprints != null ) || !( A.fingerprints.len != 0 ) ) {
				
				if ( A.fingerprints != null ) {
					Lang13.Delete( A.fingerprints );
					A.fingerprints = null;
				}
			}

			if ( custom_finger.len != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Isolated " + custom_finger.len + " fingerprints: Data Stored: Scan with Hi-Res Forensic Scanner to retrieve.</span>" );
				GlobalFuncs.to_chat( user, "<span class='notice'>&nbsp;&nbsp;Found " + custom_finger.len + " intact prints</span>" );

				foreach (dynamic _b in Lang13.Enumerate( custom_finger )) {
					i = _b;
					
					GlobalFuncs.to_chat( user, "<span class='notice'>&nbsp;&nbsp;&nbsp;&nbsp;" + i + "</span>" );
				}
			} else if ( fingerprints_found.len != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Isolated " + A.fingerprints.len + " fingerprints: Data Stored: Scan with Hi-Res Forensic Scanner to retrieve.</span>" );
				complete_prints = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( fingerprints_found )) {
					i2 = _c;
					
					print = fingerprints_found[i2];

					if ( GlobalFuncs.stringpercent( print ) <= GlobalVars.FINGERPRINT_COMPLETE ) {
						complete_prints.Add( print );
					}
				}

				if ( complete_prints.len < 1 ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>&nbsp;&nbsp;No intact prints found</span>" );
				} else {
					GlobalFuncs.to_chat( user, "<span class='notice'>&nbsp;&nbsp;Found " + complete_prints.len + " intact prints</span>" );

					foreach (dynamic _d in Lang13.Enumerate( complete_prints )) {
						i3 = _d;
						
						GlobalFuncs.to_chat( user, "<span class='notice'>&nbsp;&nbsp;&nbsp;&nbsp;" + i3 + "</span>" );
					}
				}
			}

			if ( custom_fiber.len != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Forged Fibers/Materials Data Found: Scan with Hi-Res Forensic Scanner to retrieve.</span>" );
			} else if ( fibers_found.len != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Fibers/Materials Data Stored: Scan with Hi-Res Forensic Scanner to retrieve.</span>" );
			}

			if ( custom_blood.len != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Forged Blood found. Analysing...</span>" );
				Task13.Schedule( 15, (Task13.Closure)(() => {
					
					foreach (dynamic _e in Lang13.Enumerate( custom_blood )) {
						blood = _e;
						
						GlobalFuncs.to_chat( user, "Blood type: <span class='warning'>" + custom_blood[blood] + " 	 </span>DNA: <span class='warning'>" + blood + "</span>" );
					}
					return;
				}));
			} else if ( blood_DNA_found.len != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Blood found on " + A + ". Analysing...</span>" );
				Task13.Schedule( 15, (Task13.Closure)(() => {
					
					foreach (dynamic _f in Lang13.Enumerate( blood_DNA_found )) {
						blood2 = _f;
						
						GlobalFuncs.to_chat( user, "Blood type: <span class='warning'>" + blood_DNA_found[blood2] + " 	 </span>DNA: <span class='warning'>" + blood2 + "</span>" );
					}
					return;
				}));
			}
			return false;
		}

		// Function from file: detective_scanner.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			ByTable customprints = null;
			ByTable customfiber = null;
			ByTable customblood = null;
			string print = null;
			string fiber = null;
			string blood = null;
			string bloodtype = null;

			customprints = new ByTable();
			customfiber = new ByTable();
			customblood = new ByTable();

			if ( this.forging ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You are already forging evidence</span>" );
				return 0;
			}
			this.clear_forgery();

			while (true) {
				print = String13.HtmlEncode( Interface13.Input( Task13.User, "Please enter a custom fingerprint or hit cancel to finish fingerprints", null, null, null, InputType.Str | InputType.Null ) );

				if ( !( Task13.User.client != null ) ) {
					this.forging = false;
					break;
				}

				if ( !Lang13.Bool( print ) ) {
					break;
				}
				customprints[print] = print;
			}

			while (true) {
				fiber = String13.HtmlEncode( Interface13.Input( Task13.User, "Please enter a custom fiber/material trace or hit cancel to finish fibers/materials", null, null, null, InputType.Str | InputType.Null ) );

				if ( !( Task13.User.client != null ) ) {
					this.forging = false;
					break;
				}

				if ( !Lang13.Bool( fiber ) ) {
					break;
				}
				customfiber[fiber] = null;
			}

			while (true) {
				blood = String13.HtmlEncode( Interface13.Input( Task13.User, "Please enter a custom Blood DNA or hit cancel to finish forging", null, null, null, InputType.Str | InputType.Null ) );
				bloodtype = String13.HtmlEncode( Interface13.Input( Task13.User, "Please enter a custom Blood Type", null, null, null, InputType.Str | InputType.Null ) );

				if ( !( Task13.User.client != null ) ) {
					this.forging = false;
					break;
				}

				if ( !Lang13.Bool( blood ) ) {
					break;
				}
				customblood[blood] = bloodtype;
			}
			this.forging = false;

			if ( !( customprints.len != 0 ) && !( customfiber.len != 0 ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>No forgery saved.</span>" );
				return null;
			}
			GlobalFuncs.to_chat( user, "<span class='notice'>Forgery saved and will be tied to the next applicable scanned item.</span>" );
			this.custom_forgery[1] = ( customprints != null ? customprints.Copy() : null );
			this.custom_forgery[2] = ( customfiber != null ? customfiber.Copy() : null );
			this.custom_forgery[3] = ( customblood != null ? customblood.Copy() : null );
			return null;
		}

	}

}