// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl_FuelInjection : Obj_Machinery_Computer_GeneralAirControl {

		public dynamic device_tag = null;
		public dynamic device_info = null;
		public bool automation = false;
		public int cutoff_temperature = 2000;
		public int on_temperature = 1200;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/injector_control";
			this.icon_state = "atmos";
		}

		public Obj_Machinery_Computer_GeneralAirControl_FuelInjection ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: atmo_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Game_Data signal = null;
			Game_Data signal2 = null;
			Game_Data signal3 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["refresh_status"] ) ) {
				this.device_info = null;

				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).transmission_method = 1;
				((dynamic)signal).source = this;
				((dynamic)signal).data = new ByTable().Set( "tag", this.device_tag ).Set( 2, "status" ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			}

			if ( Lang13.Bool( href_list["toggle_automation"] ) ) {
				this.automation = !this.automation;
				this.investigation_log( "atmos", "was turned " + ( this.automation ? "on" : "off" ) + " by " + GlobalFuncs.key_name( Task13.User ) );
			}

			if ( Lang13.Bool( href_list["toggle_injector"] ) ) {
				this.device_info = null;

				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				signal2 = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal2).transmission_method = 1;
				((dynamic)signal2).source = this;
				((dynamic)signal2).data = new ByTable().Set( "tag", this.device_tag ).Set( 2, "power_toggle" ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal2, GlobalVars.RADIO_ATMOSIA );
			}

			if ( Lang13.Bool( href_list["injection"] ) ) {
				
				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				signal3 = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal3).transmission_method = 1;
				((dynamic)signal3).source = this;
				((dynamic)signal3).data = new ByTable().Set( "tag", this.device_tag ).Set( 2, "inject" ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal3, GlobalVars.RADIO_ATMOSIA );
			}
			return null;
		}

		// Function from file: atmo_control.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic id_tag = null;

			
			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}
			id_tag = ((dynamic)signal).data["tag"];

			if ( this.device_tag == id_tag ) {
				this.device_info = ((dynamic)signal).data;
			} else {
				base.receive_signal( signal, receive_method, (object)(receive_param) );
			}
			return false;
		}

		// Function from file: atmo_control.dm
		public override string return_text(  ) {
			string output = null;
			dynamic power = null;
			dynamic volume_rate = null;

			output = base.return_text();
			output += new Txt( "<fieldset><legend>Fuel Injection System (<A href='?src=" ).Ref( this ).str( ";refresh_status=1'>Refresh</A>)</legend>" ).ToString();

			if ( Lang13.Bool( this.device_info ) ) {
				power = this.device_info["power"];
				volume_rate = this.device_info["volume_rate"];
				output += new Txt( "<table>\n		<tr>\n			<th>Status:</th>\n			<td>" ).item( ( Lang13.Bool( power ) ? "Injecting" : "On Hold" ) ).str( @"</td>
		</tr>
		<tr>
			<th>Rate:</th>
			<td>" ).item( volume_rate ).str( @" L/sec</td>
		</tr>
		<tr>
			<th>Automated Fuel Injection:</th>
			<td><A href='?src=" ).Ref( this ).str( ";toggle_automation=1'>" ).item( ( this.automation ? "Engaged" : "Disengaged" ) ).str( "</A></td>\n		</tr>" ).ToString();

				if ( this.automation ) {
					output += "\n			<tr>\n				<td colspan=\"2\">Injector Controls Locked Out</td>\n			</tr>";
				} else {
					output += new Txt( "\n			<tr>\n				<th>Injector:</th>\n				<td><A href='?src=" ).Ref( this ).str( ";toggle_injector=1'>Toggle Power</A> <A href='?src=" ).Ref( this ).str( ";injection=1'>Inject (1 Cycle)</A></td>\n			</td>" ).ToString();
				}
				output += "</table>";
			} else {
				output += new Txt( "<p style=\"color:red\"><b>ERROR:</b> Can not find device. <A href='?src=" ).Ref( this ).str( ";refresh_status=1'>Search</A></p>" ).ToString();
			}
			output += "</fieldset>";
			return output;
		}

		// Function from file: atmo_control.dm
		public override dynamic process(  ) {
			bool injecting = false;
			dynamic id_tag = null;
			dynamic data = null;
			Game_Data signal = null;

			
			if ( this.automation ) {
				
				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				injecting = false;

				foreach (dynamic _a in Lang13.Enumerate( this.sensor_information )) {
					id_tag = _a;
					
					data = this.sensor_information[id_tag];

					if ( Lang13.Bool( data["temperature"] ) ) {
						
						if ( Convert.ToDouble( data["temperature"] ) >= this.cutoff_temperature ) {
							injecting = false;
							break;
						}

						if ( Convert.ToDouble( data["temperature"] ) <= this.on_temperature ) {
							injecting = true;
						}
					}
				}
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).transmission_method = 1;
				((dynamic)signal).source = this;
				((dynamic)signal).data = new ByTable().Set( "tag", this.device_tag ).Set( "power", injecting ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			}
			base.process();
			return null;
		}

	}

}