// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Barricade : Obj_Structure {

		public double health = 100;
		public double maxhealth = 100;
		public int proj_pass_rate = 50;
		public double ranged_damage_modifier = 1;
		public int material = 1;
		public dynamic debris_type = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
		}

		public Obj_Structure_Barricade ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: deployable.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			dynamic proj = null;

			
			if ( height == 0 ) {
				return true;
			}

			if ( mover is Obj_Item_Projectile ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					return true;
				}
				proj = mover;

				if ( Lang13.Bool( proj.firer ) && this.Adjacent( proj.firer ) ) {
					return true;
				}

				if ( Rand13.PercentChance( this.proj_pass_rate ) ) {
					return true;
				}
				return false;
			} else {
				return false;
			}
		}

		// Function from file: deployable.dm
		public override bool blob_act( dynamic severity = null ) {
			this.take_damage( 25, false, new Txt( "<span class='warning'>The blob eats through " ).the( this ).item().str( "!</span>" ).ToString() );
			return false;
		}

		// Function from file: deployable.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " is blown apart!</span>" ).ToString() );
					GlobalFuncs.qdel( this );
					break;
				case 2:
					this.take_damage( 25, null, new Txt( "<span class='warning'>" ).The( this ).item().str( " is blown apart!</span>" ).ToString() );
					break;
			}
			return false;
		}

		// Function from file: deployable.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( Lang13.Bool( P ) ) {
				base.bullet_act( (object)(P), (object)(def_zone) );
				this.take_damage( P.damage * this.ranged_damage_modifier );
				this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " is hit by " ).item( P ).str( "!</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: deployable.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic WT = null;

			
			if ( A is Obj_Item_Weapon_Weldingtool && user.a_intent == "help" && this.material == 1 ) {
				WT = A;

				if ( this.health < this.maxhealth ) {
					
					if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
						user.WriteMsg( "<span class='notice'>You begin repairing " + this + "...</span>" );
						GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 40, 1 );

						if ( GlobalFuncs.do_after( user, 40 / A.toolspeed, null, this ) ) {
							this.health = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.health + 20 )), ((int)( this.maxhealth )) ) );
							return null;
						}
					}
				}
			} else {
				((Mob)user).changeNext_move( 8 );
				this.visible_message( "<span class='warning'>" + user + " hits " + this + " with " + A + "!</span>", "<span class='warning'>You hit " + this + " with " + A + "!</span>" );
				this.take_damage( A.force );
				((Ent_Dynamic)user).do_attack_animation( this );
			}
			return null;
		}

		// Function from file: deployable.dm
		public override bool attack_animal( Mob_Living user = null ) {
			user.changeNext_move( 8 );
			user.do_attack_animation( this );

			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false || ((dynamic)user).melee_damage_type != "brute" && ((dynamic)user).melee_damage_type != "fire" ) {
				return false;
			}
			this.visible_message( "<span class='danger'>" + user + " " + ((dynamic)user).attacktext + " " + this + "!</span>" );
			GlobalFuncs.add_logs( user, this, "attacked" );
			this.take_damage( ((dynamic)user).melee_damage_upper );
			return false;
		}

		// Function from file: deployable.dm
		public void take_damage( dynamic damage = null, bool? leave_debris = null, string message = null ) {
			leave_debris = leave_debris ?? true;

			this.health -= Convert.ToDouble( damage );

			if ( this.health <= 0 ) {
				
				if ( Lang13.Bool( message ) ) {
					this.visible_message( message );
				} else {
					this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " is smashed apart!</span>" ).ToString() );
				}

				if ( leave_debris == true && Lang13.Bool( this.debris_type ) ) {
					Lang13.Call( this.debris_type, GlobalFuncs.get_turf( this ), 3 );
				}
				GlobalFuncs.qdel( this );
			}
			return;
		}

	}

}