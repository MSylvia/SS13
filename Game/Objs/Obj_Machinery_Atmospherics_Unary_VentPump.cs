// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_VentPump : Obj_Machinery_Atmospherics_Unary {

		public dynamic area_uid = null;
		public string id_tag = null;
		public double? on = 0;
		public double? pump_direction = 1;
		public double? external_pressure_bound = 101.32499694824219;
		public double? internal_pressure_bound = 0;
		public double? pressure_checks = 1;
		public bool welded = false;
		public bool canSpawnMice = true;
		public int frequency = 1439;
		public RadioFrequency radio_connection = null;
		public string radio_filter_out = null;
		public string radio_filter_in = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.machine_flags = 128;
			this.starting_volume = 400;
			this.icon = "icons/obj/atmospherics/vent_pump.dmi";
			this.icon_state = "hoff";
		}

		// Function from file: vent_pump.dm
		public Obj_Machinery_Atmospherics_Unary_VentPump ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.area_uid = this.areaMaster.uid;

			if ( !Lang13.Bool( this.id_tag ) ) {
				this.assign_uid();
				this.id_tag = String13.NumberToString( this.uid );
			}

			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				this.broadcast_status();
			}
			return;
		}

		// Function from file: vent_pump.dm
		public override bool clone( dynamic O = null ) {
			
			if ( this.frequency == 1439 ) {
				this.areaMaster.air_vent_info.Remove( this.id_tag );
				this.areaMaster.air_vent_names.Remove( this.id_tag );
			}
			this.id_tag = O.id_tag;
			this.set_frequency( Convert.ToInt32( O.frequency ) );
			return true;
		}

		// Function from file: vent_pump.dm
		public override bool canClone( dynamic O = null ) {
			return O is Obj_Machinery_Atmospherics_Unary_VentPump;
		}

		// Function from file: vent_pump.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			this.areaMaster.air_vent_info.Remove( this.id_tag );
			this.areaMaster.air_vent_names.Remove( this.id_tag );
			base.change_area( (object)(oldarea), (object)(newarea) );
			this.name = GlobalFuncs.replacetext( this.name, newarea, oldarea );
			this.area_uid = this.areaMaster.uid;
			this.broadcast_status();
			return;
		}

		// Function from file: vent_pump.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			string newid = null;

			Interface13.Stat( null, href_list.Contains( "set_id" ) );

			if ( false ) {
				newid = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( Task13.User, "Specify the new ID tag for this machine", this, this.id_tag, null, InputType.Str | InputType.Null ) ), 1, 1024 );

				if ( !Lang13.Bool( newid ) ) {
					return 0;
				}

				if ( this.frequency == 1439 ) {
					this.areaMaster.air_vent_info.Remove( this.id_tag );
					this.areaMaster.air_vent_names.Remove( this.id_tag );
				}
				this.id_tag = newid;
				this.broadcast_status();
				return 1;
			}
			return base.multitool_topic( user, href_list, (object)(O) );
		}

		// Function from file: vent_pump.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.areaMaster.air_vent_info.Remove( this.id_tag );
			this.areaMaster.air_vent_names.Remove( this.id_tag );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: vent_pump.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>Now welding the vent.</span>" );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						
						if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
							return null;
						}
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 50, 1 );

						if ( !this.welded ) {
							((Ent_Static)b).visible_message( "" + b + " welds the vent shut.", "You weld the vent shut.", "You hear welding." );
							this.welded = true;
							this.update_icon();
						} else {
							((Ent_Static)b).visible_message( "" + b + " unwelds the vent.", "You unweld the vent.", "You hear welding." );
							this.welded = false;
							this.update_icon();
						}
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>The welding tool needs to be on to start this task.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
					return 1;
				}
			}

			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			if ( !( ( this.stat & 2 ) != 0 ) && Lang13.Bool( this.on ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You cannot unwrench this " + this + ", turn it off first.</span>" );
				return 1;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: vent_pump.dm
		public override bool can_crawl_through(  ) {
			return !this.welded;
		}

		// Function from file: vent_pump.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 1439 ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag", "set_id" ) ).str( "</li>\n	</ul>\n	" ).ToString();
		}

		// Function from file: vent_pump.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.update_multitool_menu( user );
			return null;
		}

		// Function from file: vent_pump.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered( this.power_channel ) ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
			}
			this.update_icon();
			return null;
		}

		// Function from file: vent_pump.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.welded ) {
				GlobalFuncs.to_chat( user, "<span class='info'>It seems welded shut.</span>" );
			}
			return null;
		}

		// Function from file: vent_pump.dm
		public override void hide( bool? h = null ) {
			this.update_icon();
			return;
		}

		// Function from file: vent_pump.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			bool handled = false;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				return false;
			}
			handled = false;
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "purge" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.pressure_checks = ((int)( this.pressure_checks )) & ( 65534 );
				this.pump_direction = 0;
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "stabilize" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.pressure_checks = ((int)( this.pressure_checks )) | ( 1 );
				this.pump_direction = 1;
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "power" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.on = String13.ParseNumber( ((dynamic)signal).data["power"] );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "power_toggle" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "checks" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.pressure_checks = String13.ParseNumber( ((dynamic)signal).data["checks"] );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "checks_toggle" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.pressure_checks = ( Lang13.Bool( this.pressure_checks ) ? 0 : 3 );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "direction" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.pump_direction = String13.ParseNumber( ((dynamic)signal).data["direction"] );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "set_internal_pressure" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.internal_pressure_bound = ( ( String13.ParseNumber( ((dynamic)signal).data["set_internal_pressure"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( ((dynamic)signal).data["set_internal_pressure"] ) ??0) >= 5066.25 ? 5066.25 : String13.ParseNumber( ((dynamic)signal).data["set_internal_pressure"] ) ) );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "set_external_pressure" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.external_pressure_bound = ( ( String13.ParseNumber( ((dynamic)signal).data["set_external_pressure"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( ((dynamic)signal).data["set_external_pressure"] ) ??0) >= 5066.25 ? 5066.25 : String13.ParseNumber( ((dynamic)signal).data["set_external_pressure"] ) ) );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "adjust_internal_pressure" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.internal_pressure_bound = ( ( this.internal_pressure_bound ??0) + ( String13.ParseNumber( ((dynamic)signal).data["adjust_internal_pressure"] ) ??0) <= 0 ? 0 : ( ( this.internal_pressure_bound ??0) + ( String13.ParseNumber( ((dynamic)signal).data["adjust_internal_pressure"] ) ??0) >= 5066.25 ? 5066.25 : ( this.internal_pressure_bound ??0) + ( String13.ParseNumber( ((dynamic)signal).data["adjust_internal_pressure"] ) ??0) ) );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "adjust_external_pressure" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.external_pressure_bound = ( ( this.external_pressure_bound ??0) + ( String13.ParseNumber( ((dynamic)signal).data["adjust_external_pressure"] ) ??0) <= 0 ? 0 : ( ( this.external_pressure_bound ??0) + ( String13.ParseNumber( ((dynamic)signal).data["adjust_external_pressure"] ) ??0) >= 5066.25 ? 5066.25 : ( this.external_pressure_bound ??0) + ( String13.ParseNumber( ((dynamic)signal).data["adjust_external_pressure"] ) ??0) ) );
				handled = true;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "init" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				this.name = ((dynamic)signal).data["init"];
				return false;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "status" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "vent" ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.broadcast_status();
					return;
				}));
				return false;
			}

			if ( !handled ) {
				Game13.log.WriteMsg( "## TESTING: " + ( "[" + Game13.timeofday + "]: vent_pump/receive_signal: unknown command \n" + ((dynamic)signal).debug_print() ) );
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.broadcast_status();
				return;
			}));
			this.update_icon();
			return false;
		}

		// Function from file: vent_pump.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );
			this.radio_filter_in = ( this.frequency == 1439 ? GlobalVars.RADIO_FROM_AIRALARM : null );
			this.radio_filter_out = ( this.frequency == 1439 ? GlobalVars.RADIO_TO_AIRALARM : null );

			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: vent_pump.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			base.buildFrom( usr, pipe );
			this.broadcast_status();
			return true;
		}

		// Function from file: vent_pump.dm
		public bool broadcast_status(  ) {
			Game_Data signal = null;
			string new_name = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data = new ByTable()
				.Set( "area", this.area_uid )
				.Set( "tag", this.id_tag )
				.Set( "device", "AVP" )
				.Set( "power", this.on )
				.Set( "direction", ( Lang13.Bool( this.pump_direction ) ? "release" : "siphon" ) )
				.Set( "checks", this.pressure_checks )
				.Set( "internal", this.internal_pressure_bound )
				.Set( "external", this.external_pressure_bound )
				.Set( "timestamp", Game13.time )
				.Set( "sigtype", "status" )
			;

			if ( this.frequency == 1439 ) {
				
				if ( !Lang13.Bool( this.areaMaster.air_vent_names[this.id_tag] ) ) {
					new_name = "" + this.areaMaster.name + " Vent Pump #" + ( this.areaMaster.air_vent_names.len + 1 );
					this.areaMaster.air_vent_names[this.id_tag] = new_name;
					this.name = new_name;
				}
				this.areaMaster.air_vent_info[this.id_tag] = ((dynamic)signal).data;
			}
			this.radio_connection.post_signal( this, signal, this.radio_filter_out );
			return true;
		}

		// Function from file: vent_pump.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency != 0 ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, this.radio_filter_in );
			}

			if ( this.frequency != 1439 ) {
				this.areaMaster.air_vent_info.Remove( this.id_tag );
				this.areaMaster.air_vent_names.Remove( this.id_tag );
				this.name = "Vent Pump";
			} else {
				this.broadcast_status();
			}
			return;
		}

		// Function from file: vent_pump.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			GasMixture environment = null;
			dynamic environment_pressure = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;
			double pressure_delta2 = 0;
			double transfer_moles2 = 0;
			dynamic removed2 = null;

			_default = base.process();

			if ( GlobalVars.disable_vents ) {
				return _default;
			}

			if ( !( this.node != null ) ) {
				return _default;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return _default;
			}

			if ( !Lang13.Bool( this.on ) ) {
				return _default;
			}

			if ( this.welded ) {
				return _default;
			}

			if ( !( this.loc != null ) ) {
				return _default;
			}
			environment = this.loc.return_air();
			environment_pressure = environment.return_pressure();

			if ( Lang13.Bool( this.pump_direction ) ) {
				pressure_delta = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta = Num13.MinInt( ((int)( pressure_delta )), ((int)( ( this.external_pressure_bound ??0) - Convert.ToDouble( environment_pressure ) )) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 2 ) != 0 ) {
					pressure_delta = Num13.MinInt( ((int)( pressure_delta )), Convert.ToInt32( this.air_contents.return_pressure() - this.internal_pressure_bound ) );
				}

				if ( pressure_delta > 0.1 ) {
					
					if ( ( this.air_contents.temperature ??0) > 0 ) {
						transfer_moles = pressure_delta * ( environment.volume ??0) / ( ( this.air_contents.temperature ??0) * 8.314 );
						removed = this.air_contents.remove( transfer_moles );
						this.loc.assume_air( removed );

						if ( this.network != null ) {
							((dynamic)this.network).update = 1;
						}
					}
				}
			} else {
				pressure_delta2 = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( ((int)( pressure_delta2 )), Convert.ToInt32( environment_pressure - this.external_pressure_bound ) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 2 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( ((int)( pressure_delta2 )), ((int)( ( this.internal_pressure_bound ??0) - Convert.ToDouble( this.air_contents.return_pressure() ) )) );
				}

				if ( pressure_delta2 > 0.1 ) {
					
					if ( ( environment.temperature ??0) > 0 ) {
						transfer_moles2 = pressure_delta2 * ( this.air_contents.volume ??0) / ( ( environment.temperature ??0) * 8.314 );
						removed2 = this.loc.remove_air( transfer_moles2 );

						if ( removed2 == null ) {
							return _default;
						}
						this.air_contents.merge( removed2 );

						if ( this.network != null ) {
							((dynamic)this.network).update = 1;
						}
					}
				}
			}
			return 1;
		}

		// Function from file: vent_pump.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			Ent_Static floor = null;

			
			if ( this.welded ) {
				this.icon_state = "hweld";
				return null;
			}

			if ( Lang13.Bool( this.on ) && !( ( this.stat & 3 ) != 0 ) ) {
				
				if ( Lang13.Bool( this.pump_direction ) ) {
					this.icon_state = "hout";
				} else {
					this.icon_state = "hin";
				}
			} else {
				this.icon_state = "hoff";
			}
			base.update_icon( (object)(location), (object)(target) );

			if ( this.loc is Tile_Simulated_Floor && this.node != null ) {
				floor = this.loc;

				if ( Lang13.Bool( ((dynamic)floor).floor_tile ) && this.node.alpha == 128 ) {
					this.underlays.Cut();
				}
			}
			return null;
		}

	}

}