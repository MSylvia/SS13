// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_SpiritBoard : Obj_Structure {

		public bool virgin = true;
		public int cooldown = 0;
		public dynamic planchette = "A";
		public dynamic lastuser = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/objects.dmi";
			this.icon_state = "spirit_board";
		}

		public Obj_Structure_SpiritBoard ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: spirit_board.dm
		public bool spirit_board_checks( dynamic M = null ) {
			int bonus = 0;
			dynamic light_amount = null;
			dynamic T = null;
			int users_in_range = 0;
			Mob_Living L = null;

			bonus = 0;

			if ( M.ckey == this.lastuser ) {
				bonus = 10;
			}

			if ( this.cooldown > Game13.time - ( bonus + 30 ) ) {
				return false;
			}
			light_amount = 0;
			T = GlobalFuncs.get_turf( this );
			light_amount = ((Tile)T).get_lumcount();

			if ( Convert.ToDouble( light_amount ) > 2 ) {
				M.WriteMsg( "<span class='warning'>It's too bright here to use " + this.name + "!</span>" );
				return false;
			}
			users_in_range = 0;

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this, 1 ), typeof(Mob_Living) )) {
				L = _a;
				

				if ( Lang13.Bool( L.ckey ) && L.client != null ) {
					
					if ( Game13.time - L.client.inactivity < Game13.time - 300 || L.stat != 0 || L.restrained() ) {
						M.WriteMsg( "<span class='warning'>" + L + " doesn't seem to be paying attention...</span>" );
					} else {
						users_in_range++;
					}
				}
			}

			if ( users_in_range < 2 ) {
				M.WriteMsg( "<span class='warning'>There aren't enough people to use the " + this.name + "!</span>" );
				return false;
			}
			return true;
		}

		// Function from file: spirit_board.dm
		public bool spirit_board_pick_letter( dynamic M = null ) {
			Ent_Static T = null;

			
			if ( !this.spirit_board_checks( M ) ) {
				return false;
			}

			if ( this.virgin ) {
				this.virgin = false;
				GlobalFuncs.notify_ghosts( "Someone has begun playing with a " + this.name + " in " + GlobalFuncs.get_area( this ) + "!", null, null, this );
			}
			this.planchette = Interface13.Input( "Choose the letter.", "Seance!", null, null, new ByTable(new object [] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" }), InputType.Any );
			GlobalFuncs.add_logs( M, this, "picked a letter on", " which was \"" + this.planchette + "\"." );
			this.cooldown = Game13.time;
			this.lastuser = M.ckey;
			T = this.loc;
			Task13.Sleep( Rand13.Int( 20, 30 ) );

			if ( T == this.loc ) {
				this.visible_message( "<span class='notice'>The planchette slowly moves... and stops at the letter \"" + this.planchette + "\".</span>" );
			}
			return false;
		}

		// Function from file: spirit_board.dm
		public override void attack_ghost( Mob user = null ) {
			this.spirit_board_pick_letter( user );
			return;
		}

		// Function from file: spirit_board.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.spirit_board_pick_letter( a );
			return null;
		}

		// Function from file: spirit_board.dm
		public override double examine( dynamic user = null ) {
			this.desc = "" + Lang13.Initial( this, "desc" ) + " The planchette is sitting at \"" + this.planchette + "\".";
			base.examine( (object)(user) );
			return 0;
		}

	}

}