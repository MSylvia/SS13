// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Healthanalyzer : Obj_Item_Device {

		public string last_reading = null;
		public bool? mode = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "analyzer";
			this.slot_flags = 512;
			this.throwforce = 3;
			this.w_class = 1;
			this.throw_speed = 5;
			this.starting_materials = new ByTable().Set( "$iron", 200 );
			this.w_type = 5;
			this.melt_temperature = 453.41;
			this.origin_tech = "magnets=1;biotech=1";
			this.icon_state = "health";
		}

		public Obj_Item_Device_Healthanalyzer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: scanners.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic _default = null;

			_default = base.attack_self( (object)(user), (object)(flag), emp );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( !Lang13.Bool( user.dexterity_check() ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return _default;
			}

			if ( Lang13.Bool( this.last_reading ) ) {
				GlobalFuncs.to_chat( user, "<span class='bnotice'>Accessing Prior Scan Result</span>" );
				GlobalFuncs.to_chat( user, this.last_reading );
			}
			return _default;
		}

		// Function from file: scanners.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			
			if ( !((Mob)user).hallucinating() ) {
				this.last_reading = GlobalFuncs.healthanalyze( M, user, this.mode );
			} else if ( ((Mob)M).isDead() ) {
				user.show_message( new Txt( "<span class='game say'><b>" ).The( this ).item().str( " beeps</b>, \"It's dead, Jim.\"</span>" ).ToString(), 2, new Txt( "<span class='notice'>" ).The( this ).item().str( " glows black.</span>" ).ToString() );
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " glows " ).item( Rand13.Pick(new object [] { "red", "green", "blue", "pink" }) ).str( "! You wonder what that would mean.</span>" ).ToString() );
			}
			this.add_fingerprint( user );
			return null;
		}

		// Function from file: scanners.dm
		[Verb]
		[VerbInfo( name: "Switch mode", group: "Object" )]
		public void toggle_mode(  ) {
			this.mode = !( this.mode == true );
			GlobalFuncs.to_chat( Task13.User, "The scanner will " + ( this.mode == true ? "now show specific limb damage" : "no longer show specific limb damage" ) + "." );
			return;
		}

	}

}