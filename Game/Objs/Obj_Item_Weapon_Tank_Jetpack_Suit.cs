// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Tank_Jetpack_Suit : Obj_Item_Weapon_Tank_Jetpack {

		public dynamic tank = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "jetpack-void";
			this.cycle_action_type = typeof(Action_ItemAction_Jetpack_Cycle_Suit);
			this.icon_state = "jetpack-void";
		}

		// Function from file: jetpack.dm
		public Obj_Item_Weapon_Tank_Jetpack_Suit ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSobj.processing.Remove( this );
			this.air_contents = null;
			return;
		}

		// Function from file: jetpack.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static H = null;

			
			if ( !( this.loc.loc is Mob_Living_Carbon_Human ) ) {
				this.turn_off();
				return null;
			}
			H = this.loc.loc;

			if ( !Lang13.Bool( this.tank ) || this.tank != ((dynamic)H).s_store ) {
				this.turn_off();
				return null;
			}
			base.process( (object)(seconds) );
			return null;
		}

		// Function from file: jetpack.dm
		public override void turn_off(  ) {
			this.tank = null;
			this.air_contents = null;
			GlobalVars.SSobj.processing.Remove( this );
			base.turn_off();
			return;
		}

		// Function from file: jetpack.dm
		public override void turn_on(  ) {
			Ent_Static H = null;

			
			if ( !( this.loc.loc is Mob_Living_Carbon_Human ) ) {
				return;
			}
			H = this.loc.loc;
			this.tank = ((dynamic)H).s_store;
			this.air_contents = this.tank.air_contents;
			GlobalVars.SSobj.processing.Or( this );
			base.turn_on();
			return;
		}

		// Function from file: jetpack.dm
		public override void cycle( dynamic user = null ) {
			dynamic H = null;

			H = user;

			if ( !( H.s_store is Obj_Item_Weapon_Tank_Internals ) ) {
				user.WriteMsg( "<span class='warning'>You need a tank in your suit storage!</span>" );
				return;
			}
			base.cycle( (object)(user) );
			return;
		}

	}

}