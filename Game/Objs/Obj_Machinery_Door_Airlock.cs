// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Airlock : Obj_Machinery_Door {

		public string id_tag = null;
		public double frequency = 0;
		public ByTable shockedby = new ByTable();
		public RadioFrequency radio_connection = null;
		public int aiControlDisabled = 0;
		public bool hackProof = false;
		public int secondsMainPowerLost = 0;
		public int secondsBackupPowerLost = 0;
		public bool spawnPowerRestoreRunning = false;
		public bool welded = false;
		public bool locked = false;
		public bool lights = true;
		public bool aiDisabledIdScanner = false;
		public bool aiHacking = false;
		public dynamic closeOther = null;
		public dynamic closeOtherId = null;
		public bool lockdownbyai = false;
		public Type doortype = typeof(Obj_Structure_DoorAssembly_DoorAssembly0);
		public bool justzap = false;
		public bool safe = true;
		public dynamic electronics = null;
		public bool hasShocked = false;
		public bool autoclose = true;
		public dynamic charge = null;
		public bool detonated = false;
		public string doorsound = "sound/machines/airlock.ogg";
		public string airlock_material = null;
		public string overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
		public dynamic old_frame_overlay = null;
		public dynamic old_filling_overlay = null;
		public dynamic old_lights_overlay = null;
		public dynamic old_panel_overlay = null;
		public dynamic old_weld_overlay = null;
		public dynamic old_sparks_overlay = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explosion_block = 1;
			this.icon = "icons/obj/doors/airlocks/station/public.dmi";
			this.icon_state = "closed";
		}

		// Function from file: airlock_control.dm
		public Obj_Machinery_Door_Airlock ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.SSradio != null ) {
				this.set_frequency( this.frequency );
			}
			return;
		}

		// Function from file: airlock.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !this.operating && this.density && this.hasPower() && !Lang13.Bool( this.emagged ) ) {
				this.operating = true;
				this.update_icon( 6, 1 );
				Task13.Sleep( 6 );

				if ( Lang13.Bool( GlobalFuncs.qdeleted( this ) ) ) {
					return false;
				}
				this.operating = false;

				if ( !this.open() ) {
					this.update_icon( 1, 1 );
				}
				this.emagged = 1;
				this.desc = "<span class='warning'>Its access panel is smoking slightly.</span>";
				this.lights = false;
				this.locked = true;
				this.loseMainPower();
				this.loseBackupPower();
			}
			return false;
		}

		// Function from file: airlock.dm
		public override bool CanAStarPass( dynamic ID = null, int dir = 0, dynamic caller = null ) {
			return !this.density || this.check_access( ID ) && !this.locked && this.hasPower();
		}

		// Function from file: airlock_control.dm
		public override bool close( int? surpress_send = null ) {
			bool _default = false;

			_default = base.close( surpress_send );

			if ( !Lang13.Bool( surpress_send ) ) {
				this.send_status();
			}
			return _default;
		}

		// Function from file: airlock_control.dm
		public override bool open( int? surpress_send = null ) {
			bool _default = false;

			_default = base.open( surpress_send );

			if ( !Lang13.Bool( surpress_send ) ) {
				this.send_status();
			}
			return _default;
		}

		// Function from file: airlock.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic W = null;
			dynamic cable = null;
			bool? beingcrowbarred = null;
			dynamic A2 = null;
			Obj_Item_Weapon_Electronics_Airlock ae = null;
			dynamic F = null;
			dynamic F2 = null;
			dynamic newCharge = null;

			
			if ( !( Task13.User is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( user ) ) ) ) {
				
				if ( this.isElectrified() ) {
					
					if ( this.shock( user, 75 ) ) {
						return null;
					}
				}
			}

			if ( A is Obj_Item_Device_DetectiveScanner ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Card_Emag ) {
				return null;
			}
			this.add_fingerprint( user );

			if ( A is Obj_Item_Weapon_Weldingtool && !this.operating && this.density ) {
				W = A;

				if ( ((Obj_Item_Weapon_Weldingtool)W).remove_fuel( 0, user ) ) {
					((Ent_Static)user).visible_message( "" + user + " is " + ( this.welded ? "unwelding" : "welding" ) + " the airlock.", "<span class='notice'>You begin " + ( this.welded ? "unwelding" : "welding" ) + " the airlock...</span>", "<span class='italics'>You hear welding.</span>" );
					GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 40, 1 );

					if ( GlobalFuncs.do_after( user, 40 / A.toolspeed, true, this ) ) {
						
						if ( this.density && !this.operating ) {
							
							if ( !( this is Obj_Machinery_Door_Airlock ) || !Lang13.Bool( user ) || !Lang13.Bool( W ) || !((Obj_Item_Weapon_Weldingtool)W).isOn() || !( user.loc != null ) ) {
								return null;
							}
							GlobalFuncs.playsound( this.loc, "sound/items/welder2.ogg", 50, 1 );
							this.welded = !this.welded;
							((Ent_Static)user).visible_message( "" + user.name + " has " + ( this.welded ? "welded shut" : "unwelded" ) + " " + this + ".", "<span class='notice'>You " + ( this.welded ? "weld the airlock shut" : "unweld the airlock" ) + ".</span>" );
							this.update_icon();
						}
					}
				}
				return null;
			} else if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.p_open && this.detonated ) {
					user.WriteMsg( "<span class='warning'>" + this + " has no maintenance panel!</span>" );
					return null;
				}
				this.p_open = !this.p_open;
				user.WriteMsg( "<span class='notice'>You " + ( this.p_open ? "open" : "close" ) + " the maintenance panel of the airlock.</span>" );
				this.update_icon();
			} else if ( Lang13.Bool( GlobalFuncs.is_wire_tool( A ) ) ) {
				return this.attack_hand( user );
			} else if ( A is Obj_Item_Weapon_PaiCable ) {
				cable = A;
				((Obj_Item_Weapon_PaiCable)cable).plugin( this, user );
			} else if ( A is Obj_Item_Weapon_Crowbar || A is Obj_Item_Weapon_Twohanded_Fireaxe ) {
				beingcrowbarred = null;

				if ( A is Obj_Item_Weapon_Crowbar ) {
					beingcrowbarred = true;
				} else {
					beingcrowbarred = false;
				}

				if ( this.p_open && Lang13.Bool( this.charge ) ) {
					user.WriteMsg( "<span class='notice'>You carefully start removing " + this.charge + " from " + this + "...</span>" );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Crowbar.ogg", 50, 1 );

					if ( !GlobalFuncs.do_after( user, 150 / A.toolspeed, null, this ) ) {
						user.WriteMsg( "<span class='warning'>You slip and " + this.charge + " detonates!</span>" );
						((Ent_Static)this.charge).ex_act( 1 );
						((Mob)user).Weaken( 3 );
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " removes " + this.charge + " from " + this + ".</span>", "<span class='notice'>You gently pry out " + this.charge + " from " + this + " and unhook its wires.</span>" );
					this.charge.loc = GlobalFuncs.get_turf( user );
					this.charge = null;
					return null;
				}

				if ( beingcrowbarred == true && this.density && this.welded && !this.operating && this.p_open && !this.hasPower() && !this.locked ) {
					GlobalFuncs.playsound( this.loc, "sound/items/Crowbar.ogg", 100, 1 );
					((Ent_Static)user).visible_message( "" + user + " removes the electronics from the airlock assembly.", "<span class='notice'>You start to remove electronics from the airlock assembly...</span>" );

					if ( GlobalFuncs.do_after( user, 40 / A.toolspeed, null, this ) ) {
						
						if ( this.loc != null ) {
							
							if ( this.doortype != null ) {
								A2 = Lang13.Call( this.doortype, this.loc );
								A2.heat_proof_finished = this.heat_proof;
							} else {
								new Obj_Structure_DoorAssembly_DoorAssembly0( this.loc );
							}

							if ( Lang13.Bool( this.emagged ) ) {
								user.WriteMsg( "<span class='warning'>You discard the damaged electronics.</span>" );
								GlobalFuncs.qdel( this );
								return null;
							}
							user.WriteMsg( "<span class='notice'>You remove the airlock electronics.</span>" );

							if ( !Lang13.Bool( this.electronics ) ) {
								ae = new Obj_Item_Weapon_Electronics_Airlock( this.loc );

								if ( Lang13.Bool( this.req_one_access ) ) {
									ae.one_access = true;
									ae.accesses = this.req_one_access;
								} else {
									ae.accesses = this.req_access;
								}
							} else {
								ae = this.electronics;
								this.electronics = null;
								ae.loc = this.loc;
							}
							GlobalFuncs.qdel( this );
							return null;
						}
					}
				} else if ( this.hasPower() ) {
					user.WriteMsg( "<span class='warning'>The airlock's motors resist your efforts to force it!</span>" );
				} else if ( this.locked ) {
					user.WriteMsg( "<span class='warning'>The airlock's bolts prevent it from being forced!</span>" );
				} else if ( !this.welded && !this.operating ) {
					
					if ( this.density ) {
						
						if ( beingcrowbarred == false ) {
							F = A;

							if ( F.wielded ) {
								Task13.Schedule( 0, (Task13.Closure)(() => {
									this.open( 2 );
									return;
								}));
							} else {
								user.WriteMsg( "<span class='warning'>You need to be wielding the fire axe to do that!</span>" );
							}
						} else {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								this.open( 2 );
								return;
							}));
						}
					} else if ( beingcrowbarred == false ) {
						F2 = A;

						if ( F2.wielded ) {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								this.close( 2 );
								return;
							}));
						} else {
							user.WriteMsg( "<span class='warning'>You need to be wielding the fire axe to do that!</span>" );
						}
					} else {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.close( 2 );
							return;
						}));
					}
				}
			} else if ( A is Obj_Item_Weapon_AirlockPainter ) {
				this.change_paintjob( A, user );
			} else if ( A is Obj_Item_Device_DoorCharge ) {
				
				if ( !this.p_open ) {
					user.WriteMsg( "<span class='warning'>The maintenance panel must be open to apply " + A + "!</span>" );
					return null;
				}

				if ( Lang13.Bool( this.emagged ) ) {
					return null;
				}

				if ( Lang13.Bool( this.charge ) && !this.detonated ) {
					user.WriteMsg( "<span class='warning'>There's already a charge hooked up to this door!</span>" );
					return null;
				}

				if ( this.detonated ) {
					user.WriteMsg( "<span class='warning'>The maintenance panel is destroyed!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='warning'>You apply " + A + ". Next time someone opens the door, it will explode.</span>" );
				user.drop_item();
				this.p_open = false;
				this.update_icon();
				newCharge = A;
				newCharge.loc = this;
				this.charge = newCharge;
				return null;
			} else if ( A is Obj_Item_Weapon_Rcd && this.loc is Tile_Simulated ) {
				return null;
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: airlock.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			hsrc = hsrc ?? 0;

			double? code = null;
			double? code2 = null;

			
			if ( !Lang13.Bool( hsrc ) ) {
				base.Topic( href, href_list, (object)(hsrc) );
			}

			if ( Task13.User.incapacitated() && !Lang13.Bool( GlobalFuncs.IsAdminGhost( Task13.User ) ) ) {
				return null;
			}
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=airlock" );

				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
					return null;
				}
			}

			if ( Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile && this.p_open ) {
				Task13.User.set_machine( this );
			}

			if ( Task13.User is Mob_Living_Silicon && this.canAIControl() || Lang13.Bool( GlobalFuncs.IsAdminGhost( Task13.User ) ) ) {
				
				if ( Lang13.Bool( href_list["aiDisable"] ) ) {
					code = String13.ParseNumber( href_list["aiDisable"] );

					switch ((int?)( code )) {
						case 1:
							
							if ( ((Wires)this.wires).is_cut( "idscan" ) ) {
								Task13.User.WriteMsg( "The IdScan wire has been cut - So, you can't disable it, but it is already disabled anyways." );
							} else if ( this.aiDisabledIdScanner ) {
								Task13.User.WriteMsg( "You've already disabled the IdScan feature." );
							} else {
								this.aiDisabledIdScanner = true;
							}
							break;
						case 2:
							
							if ( this.secondsMainPowerLost == 0 ) {
								this.loseMainPower();
								this.update_icon();
							} else {
								Task13.User.WriteMsg( "Main power is already offline." );
							}
							break;
						case 3:
							
							if ( this.secondsBackupPowerLost == 0 ) {
								this.loseBackupPower();
								this.update_icon();
							} else {
								Task13.User.WriteMsg( "Backup power is already offline." );
							}
							break;
						case 4:
							
							if ( ((Wires)this.wires).is_cut( "bolts" ) ) {
								Task13.User.WriteMsg( "You can't drop the door bolts - The door bolt dropping wire has been cut." );
							} else {
								this.bolt();
							}
							break;
						case 5:
							
							if ( ((Wires)this.wires).is_cut( "shock" ) ) {
								Task13.User.WriteMsg( "Can't un-electrify the airlock - The electrification wire is cut." );
							} else if ( this.secondsElectrified == -1 ) {
								this.secondsElectrified = 0;
							} else if ( this.secondsElectrified > 0 ) {
								this.secondsElectrified = 0;
							}
							break;
						case 8:
							
							if ( ((Wires)this.wires).is_cut( "safety" ) ) {
								Task13.User.WriteMsg( "Control to door sensors is disabled." );
							} else if ( this.safe ) {
								this.safe = false;
							} else {
								Task13.User.WriteMsg( "Firmware reports safeties already overriden." );
							}
							break;
						case 9:
							
							if ( ((Wires)this.wires).is_cut( "timing" ) ) {
								Task13.User.WriteMsg( "Control to door timing circuitry has been severed." );
							} else if ( this.normalspeed ) {
								this.normalspeed = false;
							} else {
								Task13.User.WriteMsg( "Door timing circuitry already accelerated." );
							}
							break;
						case 7:
							
							if ( this.welded ) {
								Task13.User.WriteMsg( "The airlock has been welded shut!" );
							} else if ( this.locked ) {
								Task13.User.WriteMsg( "The door bolts are down!" );
							} else if ( !this.density ) {
								this.close();
							} else {
								this.open();
							}
							break;
						case 10:
							
							if ( ((Wires)this.wires).is_cut( "light" ) ) {
								Task13.User.WriteMsg( "Control to door bolt lights has been severed.</a>" );
							} else if ( this.lights ) {
								this.lights = false;
								this.update_icon();
							} else {
								Task13.User.WriteMsg( "Door bolt lights are already disabled!" );
							}
							break;
						case 11:
							
							if ( this.emergency == true ) {
								this.emergency = false;
								this.update_icon();
							} else {
								Task13.User.WriteMsg( "Emergency access is already disabled!" );
							}
							break;
					}
				} else if ( Lang13.Bool( href_list["aiEnable"] ) ) {
					code2 = String13.ParseNumber( href_list["aiEnable"] );

					switch ((int?)( code2 )) {
						case 1:
							
							if ( ((Wires)this.wires).is_cut( "idscan" ) ) {
								Task13.User.WriteMsg( "You can't enable IdScan - The IdScan wire has been cut." );
							} else if ( this.aiDisabledIdScanner ) {
								this.aiDisabledIdScanner = false;
							} else {
								Task13.User.WriteMsg( "The IdScan feature is not disabled." );
							}
							break;
						case 4:
							
							if ( ((Wires)this.wires).is_cut( "bolts" ) ) {
								Task13.User.WriteMsg( "The door bolt drop wire is cut - you can't raise the door bolts.<br>\n" );
							} else if ( !this.locked ) {
								Task13.User.WriteMsg( "The door bolts are already up.<br>\n" );
							} else if ( this.hasPower() ) {
								this.unbolt();
							} else {
								Task13.User.WriteMsg( "Cannot raise door bolts due to power failure.<br>\n" );
							}
							break;
						case 5:
							
							if ( ((Wires)this.wires).is_cut( "shock" ) ) {
								Task13.User.WriteMsg( "The electrification wire has been cut.<br>\n" );
							} else if ( this.secondsElectrified == -1 ) {
								Task13.User.WriteMsg( "The door is already indefinitely electrified. You'd have to un-electrify it before you can re-electrify it with a non-forever duration.<br>\n" );
							} else if ( this.secondsElectrified != 0 ) {
								Task13.User.WriteMsg( "The door is already electrified. You can't re-electrify it while it's already electrified.<br>\n" );
							} else {
								this.shockedby.Add( "[" + GlobalFuncs.time_stamp() + "]" + Task13.User + "(ckey:" + Task13.User.ckey + ")" );
								GlobalFuncs.add_logs( Task13.User, this, "electrified", null, "at " + this.x + "," + this.y + "," + this.z );
								this.secondsElectrified = 30;
								Task13.Schedule( 10, (Task13.Closure)(() => {
									
									while (this.secondsElectrified > 0) {
										this.secondsElectrified -= 1;

										if ( this.secondsElectrified < 0 ) {
											this.secondsElectrified = 0;
										}
										this.updateUsrDialog();
										Task13.Sleep( 10 );
									}
									return;
								}));
							}
							break;
						case 6:
							
							if ( ((Wires)this.wires).is_cut( "shock" ) ) {
								Task13.User.WriteMsg( "The electrification wire has been cut.<br>\n" );
							} else if ( this.secondsElectrified == -1 ) {
								Task13.User.WriteMsg( "The door is already indefinitely electrified.<br>\n" );
							} else if ( this.secondsElectrified != 0 ) {
								Task13.User.WriteMsg( "The door is already electrified. You can't re-electrify it while it's already electrified.<br>\n" );
							} else {
								this.shockedby.Add( "[" + GlobalFuncs.time_stamp() + "]" + Task13.User + "(ckey:" + Task13.User.ckey + ")" );
								GlobalFuncs.add_logs( Task13.User, this, "electrified", null, "at " + this.x + "," + this.y + "," + this.z );
								this.secondsElectrified = -1;
							}
							break;
						case 8:
							
							if ( ((Wires)this.wires).is_cut( "safety" ) ) {
								Task13.User.WriteMsg( "Control to door sensors is disabled." );
							} else if ( !this.safe ) {
								this.safe = true;
								this.updateUsrDialog();
							} else {
								Task13.User.WriteMsg( "Firmware reports safeties already in place." );
							}
							break;
						case 9:
							
							if ( ((Wires)this.wires).is_cut( "timing" ) ) {
								Task13.User.WriteMsg( "Control to door timing circuitry has been severed." );
							} else if ( !this.normalspeed ) {
								this.normalspeed = true;
								this.updateUsrDialog();
							} else {
								Task13.User.WriteMsg( "Door timing circuitry currently operating normally." );
							}
							break;
						case 7:
							
							if ( this.welded ) {
								Task13.User.WriteMsg( "The airlock has been welded shut!" );
							} else if ( this.locked ) {
								Task13.User.WriteMsg( "The door bolts are down!" );
							} else if ( this.density ) {
								this.open();
							} else {
								this.close();
							}
							break;
						case 10:
							
							if ( ((Wires)this.wires).is_cut( "light" ) ) {
								Task13.User.WriteMsg( "Control to door bolt lights has been severed.</a>" );
							} else if ( !this.lights ) {
								this.lights = true;
								this.update_icon();
								this.updateUsrDialog();
							} else {
								Task13.User.WriteMsg( "Door bolt lights are already enabled!" );
							}
							break;
						case 11:
							
							if ( !( this.emergency == true ) ) {
								this.emergency = true;
								this.update_icon();
							} else {
								Task13.User.WriteMsg( "Emergency access is already enabled!" );
							}
							break;
					}
				}
			}
			this.add_fingerprint( Task13.User );

			if ( !Lang13.Bool( hsrc ) ) {
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: airlock.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic H = null;
			Obj_Item_Organ_Limb affecting = null;

			
			if ( !( a is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( a ) ) ) ) {
				
				if ( this.isElectrified() ) {
					
					if ( this.shock( a, 100 ) ) {
						return null;
					}
				}
			}

			if ( a is Mob_Living_Carbon_Human && Rand13.PercentChance( 40 ) && this.density ) {
				H = a;

				if ( ((Mob_Living)H).getBrainLoss() >= 60 ) {
					GlobalFuncs.playsound( this.loc, "sound/effects/bang.ogg", 25, 1 );

					if ( !( H.head is Obj_Item_Clothing_Head_Helmet ) ) {
						((Ent_Static)H).visible_message( "<span class='danger'>" + a + " headbutts the airlock.</span>", "<span class='userdanger'>You headbutt the airlock!</span>" );
						affecting = ((Mob_Living_Carbon_Human)H).get_organ( "head" );
						((Mob)H).Stun( 5 );
						((Mob)H).Weaken( 5 );

						if ( affecting.take_damage( 10, 0 ) ) {
							((Mob_Living)H).update_damage_overlays(  );
						}
					} else {
						this.visible_message( "<span class='danger'>" + a + " headbutts the airlock. Good thing they're wearing a helmet.</span>" );
					}
					return null;
				}
			}

			if ( this.p_open ) {
				this.wires.interact( a );
			} else {
				base.attack_hand( (object)(a), b, c );
			}
			return null;
		}

		// Function from file: airlock.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: airlock.dm
		public override dynamic attack_ai( dynamic user = null ) {
			string t1 = null;

			
			if ( !this.canAIControl() ) {
				
				if ( this.canAIHack() ) {
					this.hack( user );
					return null;
				} else {
					user.WriteMsg( "<span class='warning'>Airlock AI control has been blocked with a firewall. Unable to hack.</span>" );
				}
			}

			if ( Lang13.Bool( this.emagged ) ) {
				user.WriteMsg( "<span class='warning'>Unable to interface: Airlock is unresponsive.</span>" );
				return null;
			}

			if ( this.detonated ) {
				user.WriteMsg( "<span class='warning'>Unable to interface. Airlock control panel damaged.</span>" );
				return null;
			}
			((Mob)user).set_machine( this );
			t1 = "<B>Airlock Control</B><br>\n";

			if ( this.secondsMainPowerLost > 0 ) {
				
				if ( !((Wires)this.wires).is_cut( "power1" ) && !((Wires)this.wires).is_cut( "power2" ) ) {
					t1 += "Main power is offline for " + this.secondsMainPowerLost + " seconds.<br>\n";
				} else {
					t1 += "Main power is offline indefinitely.<br>\n";
				}
			} else {
				t1 += "Main power is online.";
			}

			if ( this.secondsBackupPowerLost > 0 ) {
				
				if ( !((Wires)this.wires).is_cut( "backup1" ) && !((Wires)this.wires).is_cut( "backup2" ) ) {
					t1 += "Backup power is offline for " + this.secondsBackupPowerLost + " seconds.<br>\n";
				} else {
					t1 += "Backup power is offline indefinitely.<br>\n";
				}
			} else if ( this.secondsMainPowerLost > 0 ) {
				t1 += "Backup power is online.";
			} else {
				t1 += "Backup power is offline, but will turn on if main power fails.";
			}
			t1 += "<br>\n";

			if ( ((Wires)this.wires).is_cut( "idscan" ) ) {
				t1 += "IdScan wire is cut.<br>\n";
			} else if ( this.aiDisabledIdScanner ) {
				t1 += new Txt( "IdScan disabled. <A href='?src=" ).Ref( this ).str( ";aiEnable=1'>Enable?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "IdScan enabled. <A href='?src=" ).Ref( this ).str( ";aiDisable=1'>Disable?</a><br>\n" ).ToString();
			}

			if ( this.emergency == true ) {
				t1 += new Txt( "Emergency Access Override is enabled. <A href='?src=" ).Ref( this ).str( ";aiDisable=11'>Disable?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Emergency Access Override is disabled. <A href='?src=" ).Ref( this ).str( ";aiEnable=11'>Enable?</a><br>\n" ).ToString();
			}

			if ( ((Wires)this.wires).is_cut( "power1" ) ) {
				t1 += "Main Power Input wire is cut.<br>\n";
			}

			if ( ((Wires)this.wires).is_cut( "power2" ) ) {
				t1 += "Main Power Output wire is cut.<br>\n";
			}

			if ( this.secondsMainPowerLost == 0 ) {
				t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiDisable=2'>Temporarily disrupt main power?</a>.<br>\n" ).ToString();
			}

			if ( this.secondsBackupPowerLost == 0 ) {
				t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiDisable=3'>Temporarily disrupt backup power?</a>.<br>\n" ).ToString();
			}

			if ( ((Wires)this.wires).is_cut( "backup1" ) ) {
				t1 += "Backup Power Input wire is cut.<br>\n";
			}

			if ( ((Wires)this.wires).is_cut( "backup2" ) ) {
				t1 += "Backup Power Output wire is cut.<br>\n";
			}

			if ( ((Wires)this.wires).is_cut( "bolts" ) ) {
				t1 += "Door bolt drop wire is cut.<br>\n";
			} else if ( !this.locked ) {
				t1 += new Txt( "Door bolts are up. <A href='?src=" ).Ref( this ).str( ";aiDisable=4'>Drop them?</a><br>\n" ).ToString();
			} else {
				t1 += "Door bolts are down.";

				if ( this.hasPower() ) {
					t1 += new Txt( " <A href='?src=" ).Ref( this ).str( ";aiEnable=4'>Raise?</a><br>\n" ).ToString();
				} else {
					t1 += " Cannot raise door bolts due to power failure.<br>\n";
				}
			}

			if ( ((Wires)this.wires).is_cut( "light" ) ) {
				t1 += "Door bolt lights wire is cut.<br>\n";
			} else if ( !this.lights ) {
				t1 += new Txt( "Door bolt lights are off. <A href='?src=" ).Ref( this ).str( ";aiEnable=10'>Enable?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Door bolt lights are on. <A href='?src=" ).Ref( this ).str( ";aiDisable=10'>Disable?</a><br>\n" ).ToString();
			}

			if ( ((Wires)this.wires).is_cut( "shock" ) ) {
				t1 += "Electrification wire is cut.<br>\n";
			}

			if ( this.secondsElectrified == -1 ) {
				t1 += new Txt( "Door is electrified indefinitely. <A href='?src=" ).Ref( this ).str( ";aiDisable=5'>Un-electrify it?</a><br>\n" ).ToString();
			} else if ( this.secondsElectrified > 0 ) {
				t1 += new Txt( "Door is electrified temporarily (" ).item( this.secondsElectrified ).str( " seconds). <A href='?src=" ).Ref( this ).str( ";aiDisable=5'>Un-electrify it?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Door is not electrified. <A href='?src=" ).Ref( this ).str( ";aiEnable=5'>Electrify it for 30 seconds?</a> Or, <A href='?src=" ).Ref( this ).str( ";aiEnable=6'>Electrify it indefinitely until someone cancels the electrification?</a><br>\n" ).ToString();
			}

			if ( ((Wires)this.wires).is_cut( "safety" ) ) {
				t1 += "Door force sensors not responding.</a><br>\n";
			} else if ( this.safe ) {
				t1 += new Txt( "Door safeties operating normally.  <A href='?src=" ).Ref( this ).str( ";aiDisable=8'>Override?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Danger.  Door safeties disabled.  <A href='?src=" ).Ref( this ).str( ";aiEnable=8'>Restore?</a><br>\n" ).ToString();
			}

			if ( ((Wires)this.wires).is_cut( "timing" ) ) {
				t1 += "Door timing circuitry not responding.</a><br>\n";
			} else if ( this.normalspeed ) {
				t1 += new Txt( "Door timing circuitry operating normally.  <A href='?src=" ).Ref( this ).str( ";aiDisable=9'>Override?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Warning.  Door timing circuitry operating abnormally.  <A href='?src=" ).Ref( this ).str( ";aiEnable=9'>Restore?</a><br>\n" ).ToString();
			}

			if ( this.welded ) {
				t1 += "Door appears to have been welded shut.<br>\n";
			} else if ( !this.locked ) {
				
				if ( this.density ) {
					t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiEnable=7'>Open door</a><br>\n" ).ToString();
				} else {
					t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiDisable=7'>Close door</a><br>\n" ).ToString();
				}
			}
			t1 += new Txt( "<p><a href='?src=" ).Ref( this ).str( ";close=1'>Close</a></p>\n" ).ToString();
			Interface13.Browse( user, t1, "window=airlock" );
			GlobalFuncs.onclose( user, "airlock" );
			return null;
		}

		// Function from file: airlock.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( Lang13.Bool( this.charge ) && !this.p_open && Map13.GetDistance( user, this ) <= 1 ) {
				user.WriteMsg( "<span class='warning'>The maintenance panel seems haphazardly fastened.</span>" );
			}

			if ( Lang13.Bool( this.charge ) && this.p_open ) {
				user.WriteMsg( "<span class='warning'>Something is wired up to the airlock's electronics!</span>" );
			}
			return 0;
		}

		// Function from file: airlock.dm
		public override void do_animate( string animation = null ) {
			
			switch ((string)( animation )) {
				case "opening":
					this.update_icon( 4 );
					break;
				case "closing":
					this.update_icon( 2 );
					break;
				case "deny":
					this.update_icon( 5 );
					Task13.Sleep( 6 );
					this.update_icon( 1 );
					this.icon_state = "closed";
					break;
			}
			return;
		}

		// Function from file: airlock.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			new_state = new_state ?? 0;
			new_icon = new_icon ?? 0;

			
			if ( this.operating && !Lang13.Bool( new_icon ) ) {
				return false;
			}

			dynamic _a = new_state; // Was a switch-case, sorry for the mess.
			if ( _a==0 ) {
				
				if ( this.density ) {
					new_state = 1;
				} else {
					new_state = 3;
				}
				this.icon_state = "";
			} else if ( _a==3 || _a==1 ) {
				this.icon_state = "";
			} else if ( _a==5 || _a==4 || _a==2 || _a==6 ) {
				this.icon_state = "nonexistenticonstate";
			}
			this.set_airlock_overlays( new_state );
			return false;
		}

		// Function from file: airlock.dm
		public override bool requiresID(  ) {
			return !( ((Wires)this.wires).is_cut( "idscan" ) || this.aiDisabledIdScanner );
		}

		// Function from file: airlock.dm
		public override bool hasPower(  ) {
			return ( this.secondsMainPowerLost == 0 || this.secondsBackupPowerLost == 0 ) && !( ( this.stat & 2 ) != 0 );
		}

		// Function from file: airlock.dm
		public override void bumpopen( dynamic user = null ) {
			
			if ( !( Task13.User is Mob_Living_Silicon ) ) {
				
				if ( this.isElectrified() ) {
					
					if ( !this.justzap ) {
						
						if ( this.shock( user, 100 ) ) {
							this.justzap = true;
							Task13.Schedule( 10, (Task13.Closure)(() => {
								this.justzap = false;
								return;
							}));
							return;
						}
					} else {
						return;
					}
				} else if ( user.hallucination > 50 && Rand13.PercentChance( 10 ) && !this.operating ) {
					user.WriteMsg( "<span class='userdanger'>You feel a powerful shock course through your body!</span>" );
					user.staminaloss += 50;
					user.stunned += 5;
					return;
				}
			}
			base.bumpopen( (object)(user) );
			return;
		}

		// Function from file: airlock_control.dm
		public override dynamic Destroy(  ) {
			
			if ( this.frequency != 0 && GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

		// Function from file: airlock_control.dm
		public override void initialize(  ) {
			
			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			this.update_icon();
			return;
		}

		// Function from file: airlock.dm
		public void change_paintjob( dynamic C = null, dynamic user = null ) {
			dynamic W = null;
			ByTable optionlist = null;
			dynamic paintjob = null;

			
			if ( C is Obj_Item_Weapon_AirlockPainter ) {
				W = C;
			} else {
				user.WriteMsg( "If you see this, it means airlock/change_paintjob() was called with something other than an airlock painter. Check your code!" );
				return;
			}

			if ( !Lang13.Bool( W.can_use( user ) ) ) {
				return;
			}

			if ( this.airlock_material == "glass" ) {
				optionlist = new ByTable(new object [] { "Public", "Public2", "Engineering", "Atmospherics", "Security", "Command", "Medical", "Research", "Mining", "Maintenance" });
			} else {
				optionlist = new ByTable(new object [] { "Public", "Engineering", "Atmospherics", "Security", "Command", "Medical", "Research", "Mining", "Maintenance", "External", "High Security" });
			}
			paintjob = Interface13.Input( user, "Please select a paintjob for this airlock.", null, null, optionlist, InputType.Any );

			if ( !( Map13.GetDistance( this, Task13.User ) <= 1 ) && this.loc != Task13.User || !Lang13.Bool( W.use( user ) ) ) {
				return;
			}

			dynamic _a = paintjob; // Was a switch-case, sorry for the mess.
			if ( _a=="Public" ) {
				this.icon = "icons/obj/doors/airlocks/station/public.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssembly0);
			} else if ( _a=="Public2" ) {
				this.icon = "icons/obj/doors/airlocks/station2/glass.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station2/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyGlass);
			} else if ( _a=="Engineering" ) {
				this.icon = "icons/obj/doors/airlocks/station/engineering.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyEng);
			} else if ( _a=="Atmospherics" ) {
				this.icon = "icons/obj/doors/airlocks/station/atmos.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyAtmo);
			} else if ( _a=="Security" ) {
				this.icon = "icons/obj/doors/airlocks/station/security.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblySec);
			} else if ( _a=="Command" ) {
				this.icon = "icons/obj/doors/airlocks/station/command.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyCom);
			} else if ( _a=="Medical" ) {
				this.icon = "icons/obj/doors/airlocks/station/medical.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyMed);
			} else if ( _a=="Research" ) {
				this.icon = "icons/obj/doors/airlocks/station/research.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyResearch);
			} else if ( _a=="Mining" ) {
				this.icon = "icons/obj/doors/airlocks/station/mining.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyMin);
			} else if ( _a=="Maintenance" ) {
				this.icon = "icons/obj/doors/airlocks/station/maintenance.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/station/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyMai);
			} else if ( _a=="External" ) {
				this.icon = "icons/obj/doors/airlocks/external/external.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/external/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyExt);
			} else if ( _a=="High Security" ) {
				this.icon = "icons/obj/doors/airlocks/highsec/highsec.dmi";
				this.overlays_file = "icons/obj/doors/airlocks/highsec/overlays.dmi";
				this.doortype = typeof(Obj_Structure_DoorAssembly_DoorAssemblyHighsecurity);
			}
			this.update_icon();
			return;
		}

		// Function from file: airlock.dm
		[VerbInfo( name: "autoclose" )]
		public void f_autoclose(  ) {
			
			if ( !Lang13.Bool( GlobalFuncs.qdeleted( this ) ) && !this.density && !this.operating && !this.locked && !this.welded && this.autoclose ) {
				this.close();
			}
			return;
		}

		// Function from file: airlock.dm
		public void prison_open(  ) {
			
			if ( Lang13.Bool( this.emagged ) ) {
				return;
			}
			this.locked = false;
			this.open();
			this.locked = true;
			return;
		}

		// Function from file: airlock.dm
		public void hack( dynamic user = null ) {
			
			if ( !this.aiHacking ) {
				this.aiHacking = true;
				user.WriteMsg( "Airlock AI control has been blocked. Beginning fault-detection." );
				Task13.Sleep( 50 );

				if ( this.canAIControl() ) {
					user.WriteMsg( "Alert cancelled. Airlock control has been restored without our assistance." );
					this.aiHacking = false;
					return;
				} else if ( !this.canAIHack() ) {
					user.WriteMsg( "Connection lost! Unable to hack airlock." );
					this.aiHacking = false;
					return;
				}
				user.WriteMsg( "Fault confirmed: airlock control wire disabled or cut." );
				Task13.Sleep( 20 );
				user.WriteMsg( "Attempting to hack into airlock. This may take some time." );
				Task13.Sleep( 200 );

				if ( this.canAIControl() ) {
					user.WriteMsg( "Alert cancelled. Airlock control has been restored without our assistance." );
					this.aiHacking = false;
					return;
				} else if ( !this.canAIHack() ) {
					user.WriteMsg( "Connection lost! Unable to hack airlock." );
					this.aiHacking = false;
					return;
				}
				user.WriteMsg( "Upload access confirmed. Loading control program into airlock software." );
				Task13.Sleep( 170 );

				if ( this.canAIControl() ) {
					user.WriteMsg( "Alert cancelled. Airlock control has been restored without our assistance." );
					this.aiHacking = false;
					return;
				} else if ( !this.canAIHack() ) {
					user.WriteMsg( "Connection lost! Unable to hack airlock." );
					this.aiHacking = false;
					return;
				}
				user.WriteMsg( "Transfer complete. Forcing airlock to execute program." );
				Task13.Sleep( 50 );
				this.aiControlDisabled = 2;
				user.WriteMsg( "Receiving control information from airlock." );
				Task13.Sleep( 10 );
				this.aiHacking = false;

				if ( Lang13.Bool( user ) ) {
					this.attack_ai( user );
				}
			}
			return;
		}

		// Function from file: airlock.dm
		public void set_airlock_overlays( dynamic state = null ) {
			dynamic frame_overlay = null;
			dynamic filling_overlay = null;
			dynamic lights_overlay = null;
			dynamic panel_overlay = null;
			dynamic weld_overlay = null;
			dynamic sparks_overlay = null;

			
			dynamic _a = state; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				frame_overlay = GlobalFuncs.get_airlock_overlay( "closed", this.icon );

				if ( Lang13.Bool( this.airlock_material ) ) {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "" + this.airlock_material + "_closed", this.overlays_file );
				} else {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "fill_closed", this.icon );
				}

				if ( this.p_open ) {
					panel_overlay = GlobalFuncs.get_airlock_overlay( "panel_closed", this.overlays_file );
				}

				if ( this.welded ) {
					weld_overlay = GlobalFuncs.get_airlock_overlay( "welded", this.overlays_file );
				}

				if ( this.lights && this.hasPower() ) {
					
					if ( this.locked ) {
						lights_overlay = GlobalFuncs.get_airlock_overlay( "lights_bolts", this.overlays_file );
					} else if ( this.emergency == true ) {
						lights_overlay = GlobalFuncs.get_airlock_overlay( "lights_emergency", this.overlays_file );
					}
				}
			} else if ( _a==5 ) {
				
				if ( !this.hasPower() ) {
					return;
				}
				frame_overlay = GlobalFuncs.get_airlock_overlay( "closed", this.icon );

				if ( Lang13.Bool( this.airlock_material ) ) {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "" + this.airlock_material + "_closed", this.overlays_file );
				} else {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "fill_closed", this.icon );
				}

				if ( this.p_open ) {
					panel_overlay = GlobalFuncs.get_airlock_overlay( "panel_closed", this.overlays_file );
				}

				if ( this.welded ) {
					weld_overlay = GlobalFuncs.get_airlock_overlay( "welded", this.overlays_file );
				}
				lights_overlay = GlobalFuncs.get_airlock_overlay( "lights_denied", this.overlays_file );
			} else if ( _a==6 ) {
				frame_overlay = GlobalFuncs.get_airlock_overlay( "closed", this.icon );
				sparks_overlay = GlobalFuncs.get_airlock_overlay( "sparks", this.overlays_file );

				if ( Lang13.Bool( this.airlock_material ) ) {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "" + this.airlock_material + "_closed", this.overlays_file );
				} else {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "fill_closed", this.icon );
				}

				if ( this.p_open ) {
					panel_overlay = GlobalFuncs.get_airlock_overlay( "panel_closed", this.overlays_file );
				}

				if ( this.welded ) {
					weld_overlay = GlobalFuncs.get_airlock_overlay( "welded", this.overlays_file );
				}
			} else if ( _a==2 ) {
				frame_overlay = GlobalFuncs.get_airlock_overlay( "closing", this.icon );

				if ( Lang13.Bool( this.airlock_material ) ) {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "" + this.airlock_material + "_closing", this.overlays_file );
				} else {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "fill_closing", this.icon );
				}

				if ( this.lights && this.hasPower() ) {
					lights_overlay = GlobalFuncs.get_airlock_overlay( "lights_closing", this.overlays_file );
				}

				if ( this.p_open ) {
					panel_overlay = GlobalFuncs.get_airlock_overlay( "panel_closing", this.overlays_file );
				}
			} else if ( _a==3 ) {
				frame_overlay = GlobalFuncs.get_airlock_overlay( "open", this.icon );

				if ( Lang13.Bool( this.airlock_material ) ) {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "" + this.airlock_material + "_open", this.overlays_file );
				} else {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "fill_open", this.icon );
				}

				if ( this.p_open ) {
					panel_overlay = GlobalFuncs.get_airlock_overlay( "panel_open", this.overlays_file );
				}
			} else if ( _a==4 ) {
				frame_overlay = GlobalFuncs.get_airlock_overlay( "opening", this.icon );

				if ( Lang13.Bool( this.airlock_material ) ) {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "" + this.airlock_material + "_opening", this.overlays_file );
				} else {
					filling_overlay = GlobalFuncs.get_airlock_overlay( "fill_opening", this.icon );
				}

				if ( this.lights && this.hasPower() ) {
					lights_overlay = GlobalFuncs.get_airlock_overlay( "lights_opening", this.overlays_file );
				}

				if ( this.p_open ) {
					panel_overlay = GlobalFuncs.get_airlock_overlay( "panel_opening", this.overlays_file );
				}
			}

			if ( frame_overlay != this.old_frame_overlay ) {
				this.overlays.Remove( this.old_frame_overlay );
				this.overlays.Add( frame_overlay );
				this.old_frame_overlay = frame_overlay;
			}

			if ( filling_overlay != this.old_filling_overlay ) {
				this.overlays.Remove( this.old_filling_overlay );
				this.overlays.Add( filling_overlay );
				this.old_filling_overlay = filling_overlay;
			}

			if ( lights_overlay != this.old_lights_overlay ) {
				this.overlays.Remove( this.old_lights_overlay );
				this.overlays.Add( lights_overlay );
				this.old_lights_overlay = lights_overlay;
			}

			if ( panel_overlay != this.old_panel_overlay ) {
				this.overlays.Remove( this.old_panel_overlay );
				this.overlays.Add( panel_overlay );
				this.old_panel_overlay = panel_overlay;
			}

			if ( weld_overlay != this.old_weld_overlay ) {
				this.overlays.Remove( this.old_weld_overlay );
				this.overlays.Add( weld_overlay );
				this.old_weld_overlay = weld_overlay;
			}

			if ( sparks_overlay != this.old_sparks_overlay ) {
				this.overlays.Remove( this.old_sparks_overlay );
				this.overlays.Add( sparks_overlay );
				this.old_sparks_overlay = sparks_overlay;
			}
			return;
		}

		// Function from file: airlock.dm
		public bool shock( dynamic user = null, int prb = 0 ) {
			EffectSystem_SparkSpread s = null;

			
			if ( !this.hasPower() ) {
				return false;
			}

			if ( this.hasShocked ) {
				return false;
			}

			if ( !Rand13.PercentChance( prb ) ) {
				return false;
			}
			s = new EffectSystem_SparkSpread();
			s.set_up( 5, 1, this );
			s.start();

			if ( Lang13.Bool( GlobalFuncs.electrocute_mob( user, GlobalFuncs.get_area( this ), this ) ) ) {
				this.hasShocked = true;
				Task13.Schedule( 10, (Task13.Closure)(() => {
					this.hasShocked = false;
					return;
				}));
				return true;
			} else {
				return false;
			}
		}

		// Function from file: airlock.dm
		public void regainBackupPower(  ) {
			
			if ( this.secondsBackupPowerLost > 0 ) {
				this.secondsBackupPowerLost = 0;
			}
			return;
		}

		// Function from file: airlock.dm
		public void loseBackupPower(  ) {
			
			if ( this.secondsBackupPowerLost < 60 ) {
				this.secondsBackupPowerLost = 60;
			}
			return;
		}

		// Function from file: airlock.dm
		public void loseMainPower(  ) {
			bool cont = false;

			
			if ( this.secondsMainPowerLost <= 0 ) {
				this.secondsMainPowerLost = 60;

				if ( this.secondsBackupPowerLost < 10 ) {
					this.secondsBackupPowerLost = 10;
				}
			}

			if ( !this.spawnPowerRestoreRunning ) {
				this.spawnPowerRestoreRunning = true;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					cont = true;

					while (cont) {
						Task13.Sleep( 10 );

						if ( Lang13.Bool( GlobalFuncs.qdeleted( this ) ) ) {
							return;
						}
						cont = false;

						if ( this.secondsMainPowerLost > 0 ) {
							
							if ( !((Wires)this.wires).is_cut( "power1" ) && !((Wires)this.wires).is_cut( "power2" ) ) {
								this.secondsMainPowerLost -= 1;
								this.updateDialog();
							}
							cont = true;
						}

						if ( this.secondsBackupPowerLost > 0 ) {
							
							if ( !((Wires)this.wires).is_cut( "backup1" ) && !((Wires)this.wires).is_cut( "backup2" ) ) {
								this.secondsBackupPowerLost -= 1;
								this.updateDialog();
							}
							cont = true;
						}
					}
					this.spawnPowerRestoreRunning = false;
					this.updateDialog();
					return;
				}));
			}
			return;
		}

		// Function from file: airlock.dm
		public void regainMainPower(  ) {
			
			if ( this.secondsMainPowerLost > 0 ) {
				this.secondsMainPowerLost = 0;
			}
			return;
		}

		// Function from file: airlock.dm
		public int? isAllPowerCut(  ) {
			
			if ( ( ((Wires)this.wires).is_cut( "power1" ) || ((Wires)this.wires).is_cut( "power2" ) ) && ( ((Wires)this.wires).is_cut( "backup1" ) || ((Wires)this.wires).is_cut( "backup2" ) ) ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

		// Function from file: airlock.dm
		public bool canAIHack(  ) {
			return this.aiControlDisabled == 1 && !this.hackProof && !Lang13.Bool( this.isAllPowerCut() );
		}

		// Function from file: airlock.dm
		public bool canAIControl(  ) {
			return this.aiControlDisabled != 1 && !Lang13.Bool( this.isAllPowerCut() );
		}

		// Function from file: airlock.dm
		public bool isElectrified(  ) {
			
			if ( this.secondsElectrified != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: airlock.dm
		public void unbolt(  ) {
			
			if ( !this.locked ) {
				return;
			}
			this.locked = false;
			this.update_icon();
			return;
		}

		// Function from file: airlock.dm
		public void bolt(  ) {
			
			if ( this.locked ) {
				return;
			}
			this.locked = true;
			this.update_icon();
			return;
		}

		// Function from file: airlock_control.dm
		public void set_frequency( double new_frequency = 0 ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );

			if ( new_frequency != 0 ) {
				this.frequency = new_frequency;
				this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_AIRLOCK );
			}
			return;
		}

		// Function from file: airlock_control.dm
		public void send_status(  ) {
			Signal signal = null;

			
			if ( this.radio_connection != null ) {
				signal = new Signal();
				signal.transmission_method = 1;
				signal.data["tag"] = this.id_tag;
				signal.data["timestamp"] = Game13.time;
				signal.data["door_status"] = ( this.density ? "closed" : "open" );
				signal.data["lock_status"] = ( this.locked ? "locked" : "unlocked" );
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_AIRLOCK, 5 );
			}
			return;
		}

		// Function from file: airlock_control.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}

			if ( this.id_tag != signal.data["tag"] || !Lang13.Bool( signal.data["command"] ) ) {
				return false;
			}

			dynamic _a = signal.data["command"]; // Was a switch-case, sorry for the mess.
			if ( _a=="open" ) {
				this.open( 1 );
			} else if ( _a=="close" ) {
				this.close( 1 );
			} else if ( _a=="unlock" ) {
				this.locked = false;
				this.update_icon();
			} else if ( _a=="lock" ) {
				this.locked = true;
				this.update_icon();
			} else if ( _a=="secure_open" ) {
				this.locked = false;
				this.update_icon();
				Task13.Sleep( 2 );
				this.open( 1 );
				this.locked = true;
				this.update_icon();
			} else if ( _a=="secure_close" ) {
				this.locked = false;
				this.close( 1 );
				this.locked = true;
				Task13.Sleep( 2 );
				this.update_icon();
			}
			this.send_status();
			return false;
		}

		// Function from file: cyborg.dm
		public override void BorgAltClick( Mob_Living_Silicon_Robot user = null ) {
			this.AIAltClick();
			return;
		}

		// Function from file: cyborg.dm
		public override void BorgCtrlClick( Mob_Living_Silicon_Robot user = null ) {
			this.AICtrlClick();
			return;
		}

		// Function from file: cyborg.dm
		public override void BorgShiftClick( Mob_Living_Silicon_Robot user = null ) {
			this.AIShiftClick();
			return;
		}

		// Function from file: cyborg.dm
		public override void BorgCtrlShiftClick( Mob_Living_Silicon_Robot user = null ) {
			this.AICtrlShiftClick();
			return;
		}

		// Function from file: ai.dm
		public override void AICtrlShiftClick(  ) {
			
			if ( Lang13.Bool( this.emagged ) ) {
				return;
			}

			if ( !( this.emergency == true ) ) {
				this.Topic( "aiEnable=11", new ByTable().Set( "aiEnable", "11" ), 1 );
			} else {
				this.Topic( "aiDisable=11", new ByTable().Set( "aiDisable", "11" ), 1 );
			}
			return;
		}

		// Function from file: ai.dm
		public override void AIShiftClick(  ) {
			
			if ( Lang13.Bool( this.emagged ) ) {
				return;
			}

			if ( this.density ) {
				this.Topic( "aiEnable=7", new ByTable().Set( "aiEnable", "7" ), 1 );
			} else {
				this.Topic( "aiDisable=7", new ByTable().Set( "aiDisable", "7" ), 1 );
			}
			return;
		}

		// Function from file: ai.dm
		public override void AIAltClick( Mob_Living_Silicon_Ai user = null ) {
			
			if ( Lang13.Bool( this.emagged ) ) {
				return;
			}

			if ( !( this.secondsElectrified != 0 ) ) {
				this.Topic( "aiEnable=6", new ByTable().Set( "aiEnable", "6" ), 1 );
			} else {
				this.Topic( "aiDisable=5", new ByTable().Set( "aiDisable", "5" ), 1 );
			}
			return;
		}

		// Function from file: ai.dm
		public override void AICtrlClick(  ) {
			
			if ( Lang13.Bool( this.emagged ) ) {
				return;
			}

			if ( this.locked ) {
				this.Topic( "aiEnable=4", new ByTable().Set( "aiEnable", "4" ), 1 );
			} else {
				this.Topic( "aiDisable=4", new ByTable().Set( "aiDisable", "4" ), 1 );
			}
			return;
		}

	}

}