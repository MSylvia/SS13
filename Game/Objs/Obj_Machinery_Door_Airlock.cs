// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Airlock : Obj_Machinery_Door {

		public string id_tag = null;
		public dynamic frequency = null;
		public ByTable shockedby = new ByTable();
		public RadioFrequency radio_connection = null;
		public int aiControlDisabled = 0;
		public bool hackProof = false;
		public int secondsMainPowerLost = 0;
		public int secondsBackupPowerLost = 0;
		public bool spawnPowerRestoreRunning = false;
		public bool? welded = null;
		public bool locked = false;
		public bool lights = true;
		public Wires wires = null;
		public bool aiDisabledIdScanner = false;
		public bool aiHacking = false;
		public dynamic closeOther = null;
		public dynamic closeOtherId = null;
		public bool lockdownbyai = false;
		public dynamic assembly_type = typeof(Obj_Structure_DoorAssembly);
		public string mineral = null;
		public bool justzap = false;
		public bool safe = true;
		public dynamic electronics = null;
		public bool hasShocked = false;
		public bool busy = false;
		public int pitch = 30;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explosion_resistance = 15;
			this.power_channel = 3;
			this.custom_aghost_alerts = true;
			this.autoclose = true;
			this.explosion_block = 1;
			this.machine_flags = 514;
			this.icon = "icons/obj/doors/Doorint.dmi";
		}

		// Function from file: airlock_control.dm
		public Obj_Machinery_Door_Airlock ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.radio_controller != null ) {
				this.set_frequency( this.frequency );
			}
			return;
		}

		// Function from file: keycard authentication.dm
		public override bool allowed( dynamic M = null ) {
			
			if ( GlobalVars.maint_all_access && this.check_access_list( new ByTable(new object [] { GlobalVars.access_maint_tunnels }) ) ) {
				return true;
			}
			return base.allowed( (object)(M) );
		}

		// Function from file: airlock.dm
		public override bool wirejack( dynamic P = null ) {
			
			if ( base.wirejack( (object)(P) ) ) {
				this.open( 1 );
				return true;
			}
			return false;
		}

		// Function from file: airlock_control.dm
		public override bool close( bool? surpress_send = null ) {
			bool _default = false;

			_default = base.close( surpress_send );

			if ( !( surpress_send == true ) ) {
				this.send_status();
			}
			return _default;
		}

		// Function from file: airlock_control.dm
		public override bool open( int? surpress_send = null ) {
			bool _default = false;

			_default = base.open( surpress_send );

			if ( !Lang13.Bool( surpress_send ) ) {
				this.send_status();
			}
			return _default;
		}

		// Function from file: airlock.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			int? breaktime = null;
			dynamic DA = null;
			dynamic WT = null;
			bool? beingcrowbarred = null;
			dynamic F = null;
			dynamic F2 = null;

			
			if ( b is Mob_Living_Silicon_Ai || b is Mob_Dead_Observer ) {
				return this.attack_ai( b );
			}

			if ( !( b is Mob_Living_Silicon ) ) {
				
				if ( this.isElectrified() ) {
					
					if ( this.shock( b, 75 ) ) {
						return null;
					}
				}
			}

			if ( a is Obj_Item_Weapon_Batteringram ) {
				((Mob)b).delayNextAttack( 30 );
				breaktime = 60;

				if ( this.welded == true ) {
					breaktime += 30;
				}
				this.visible_message( "<span class='warning'>" + b + " is battering down " + this + "!</span>", "<span class='warning'>You begin to batter " + this + ".</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/shieldbash.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, breaktime ) ) {
					
					if ( this.locked ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/shieldbash.ogg", 50, 1 );
						this.visible_message( "<span class='warning'>" + b + " is battering the bolts!</span>", "<span class='warning'>You begin to smash the bolts...</span>" );

						if ( !GlobalFuncs.do_after( b, this, 190 ) ) {
							return null;
						}
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
					}
					this.visible_message( "<span class='warning'>" + b + " broke down the door!</span>", "<span class='warning'>You broke the door!</span>" );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
					this.operating = -1;
					DA = this.revert( b, Lang13.IntNullable( b.dir ) );
					DA.anchored = 0;
					DA.state = 0;
					DA.update_state();
					GlobalFuncs.qdel( this );
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_Weldingtool ) {
				
				if ( this.density && !( this.operating != 0 ) ) {
					WT = a;

					if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
						
						if ( !( this.welded == true ) ) {
							this.welded = true;
						} else {
							this.welded = null;
						}
						this.update_icon();
					}
				}
			} else if ( a is Obj_Item_Weapon_Wirecutters ) {
				
				if ( !( this.operating != 0 ) && this.panel_open ) {
					this.wires.Interact( b );
				}
			} else if ( a is Obj_Item_Device_Multitool ) {
				
				if ( !( this.operating != 0 ) ) {
					
					if ( this.panel_open ) {
						this.wires.Interact( b );
					} else {
						this.update_multitool_menu( b );
					}
				}
				this.attack_hand( b );
			} else if ( a is Obj_Item_Weapon_Crowbar || a is Obj_Item_Weapon_Fireaxe ) {
				
				if ( this.busy ) {
					return null;
				}
				this.busy = true;
				beingcrowbarred = null;

				if ( a is Obj_Item_Weapon_Crowbar ) {
					beingcrowbarred = true;
				} else {
					beingcrowbarred = false;
				}

				if ( beingcrowbarred == true && ( this.operating == -1 || this.density && this.welded == true && !( this.operating != 0 ) && this.panel_open && ( !this.arePowerSystemsOn() || ( this.stat & 2 ) != 0 ) && !this.locked ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/Crowbar.ogg", 100, 1 );
					((Ent_Static)b).visible_message( "" + b + " removes the electronics from the airlock assembly.", "You start to remove electronics from the airlock assembly." );

					if ( GlobalFuncs.do_after( b, this, 40 ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You removed the airlock electronics!</span>" );
						this.revert( b, null );
						GlobalFuncs.qdel( this );
						return null;
					}
				} else if ( this.arePowerSystemsOn() && !( ( this.stat & 2 ) != 0 ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>The airlock's motors resist your efforts to force it.</span>" );
				} else if ( this.locked ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>The airlock's bolts prevent it from being forced.</span>" );
				} else if ( !( this.welded == true ) && !( this.operating != 0 ) ) {
					
					if ( this.density ) {
						
						if ( beingcrowbarred == false ) {
							F = a;

							if ( Lang13.Bool( F.wielded ) ) {
								Task13.Schedule( 0, (Task13.Closure)(() => {
									this.open( 1 );
									return;
								}));
							} else {
								GlobalFuncs.to_chat( b, "<span class='warning'>You need to be wielding the Fire axe to do that.</span>" );
							}
						} else {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								this.open( 1 );
								return;
							}));
						}
					} else if ( beingcrowbarred == false ) {
						F2 = a;

						if ( Lang13.Bool( F2.wielded ) ) {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								this.close( true );
								return;
							}));
						} else {
							GlobalFuncs.to_chat( b, "<span class='warning'>You need to be wielding the Fire axe to do that.</span>" );
						}
					} else {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.close( true );
							return;
						}));
					}
				}
				this.busy = false;
			} else if ( a is Obj_Item_Weapon_Card_Emag ) {
				
				if ( !( this.operating != 0 ) ) {
					this.operating = -1;

					if ( this.density ) {
						this.door_animate( "spark" );
						Task13.Sleep( 6 );
						this.open( 1 );
					}
					this.operating = -1;
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: airlock.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			
			if ( !( this.operating != 0 ) ) {
				this.panel_open = !this.panel_open;
				this.update_icon();
				return 1;
			}
			return 0;
		}

		// Function from file: airlock.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Mob_Living_Silicon ) && !( a is Mob_Dead_Observer ) && this.Adjacent( a ) ) {
				
				if ( this.isElectrified() ) {
					
					if ( this.shock( a, 100 ) ) {
						return null;
					}
				}
			}

			if ( !this.panel_open && !( this.operating != 0 ) && this.arePowerSystemsOn() && !( ( this.stat & 3 ) != 0 ) && !this.locked ) {
				base.attack_hand( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: airlock.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			string dat = null;
			string dis_id_tag = null;

			dat = "";

			if ( this.requiresID() && !this.allowed( user ) ) {
				return "<b>Access Denied.</b>";
			} else {
				dis_id_tag = "-----";

				if ( this.id_tag != null && this.id_tag != "" ) {
					dis_id_tag = this.id_tag;
				}
				dat += new Txt( "\n		<ul>\n			<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 0 ).str( "\">Reset</a>)</li>\n			<li><b>ID Tag:</b> <a href=\"?src=" ).Ref( this ).str( ";set_id=1\">" ).item( dis_id_tag ).str( "</a></li>\n		</ul>" ).ToString();
			}
			return dat;
		}

		// Function from file: airlock.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			hclient = hclient ?? 0;

			dynamic T = null;
			bool am_in_range = false;
			bool turf_ok = false;
			dynamic P = null;
			string newid = null;
			dynamic newfreq = null;
			double? code = null;
			double? code2 = null;

			T = GlobalFuncs.get_turf( Task13.User );

			if ( !( Task13.User is Mob_Living_Silicon_Ai ) && Convert.ToInt32( T.z ) != this.z ) {
				return 1;
			}

			if ( !Lang13.Bool( hclient ) ) {
				base.Topic( href, href_list, (object)(hclient) );
			}

			if ( !GlobalFuncs.isAdminGhost( Task13.User ) ) {
				
				if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || Convert.ToDouble( Task13.User.size ) < 2 ) {
					return null;
				}
			}
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=airlock" );

				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
					return null;
				}
			}
			am_in_range = GlobalFuncs.in_range( this, Task13.User );
			turf_ok = this.loc is Tile;

			if ( am_in_range && turf_ok ) {
				Task13.User.set_machine( this );

				if ( !this.panel_open ) {
					P = GlobalFuncs.get_multitool( Task13.User );

					if ( Lang13.Bool( P ) && P is Obj_Item_Device_Multitool ) {
						
						if ( href_list.Contains( "set_id" ) ) {
							newid = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( Task13.User, "Specify the new ID tag for this machine", this, this.id_tag, null, InputType.Str | InputType.Null ) ), 1, 1024 );

							if ( Lang13.Bool( newid ) ) {
								this.id_tag = newid;
								this.initialize();
							}
						}

						if ( href_list.Contains( "set_freq" ) ) {
							newfreq = this.frequency;

							if ( href_list["set_freq"] != "-1" ) {
								newfreq = String13.ParseNumber( href_list["set_freq"] );
							} else {
								newfreq = Interface13.Input( Task13.User, "Specify a new frequency (GHz). Decimals assigned automatically.", this, this.frequency, null, InputType.Num | InputType.Null );
							}

							if ( Lang13.Bool( newfreq ) ) {
								
								if ( String13.FindIgnoreCase( String13.NumberToString( Convert.ToDouble( newfreq ) ), ".", 1, 0 ) != 0 ) {
									newfreq *= 10;
								}

								if ( Convert.ToDouble( newfreq ) < 10000 ) {
									this.frequency = newfreq;
									this.initialize();
								}
							}
						}
						Task13.User.set_machine( this );
						this.update_multitool_menu( Task13.User );
					}
				}
			}

			if ( GlobalFuncs.isAdminGhost( Task13.User ) || Task13.User is Mob_Living_Silicon && this.canAIControl() ) {
				
				if ( Lang13.Bool( href_list["aiDisable"] ) ) {
					code = String13.ParseNumber( href_list["aiDisable"] );

					switch ((int?)( code )) {
						case 1:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_IDSCAN ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "The IdScan wire has been cut - So, you can't disable it, but it is already disabled anyways." );
							} else if ( this.aiDisabledIdScanner ) {
								GlobalFuncs.to_chat( Task13.User, "You've already disabled the IdScan feature." );
							} else {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "disabled IDScan on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.aiDisabledIdScanner = true;
							}
							break;
						case 2:
							
							if ( this.secondsMainPowerLost == 0 ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "disrupted main power on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.loseMainPower();
							} else {
								GlobalFuncs.to_chat( Task13.User, "Main power is already offline." );
							}
							break;
						case 3:
							
							if ( this.secondsBackupPowerLost == 0 ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "disrupted backup power on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.loseBackupPower();
							} else {
								GlobalFuncs.to_chat( Task13.User, "Backup power is already offline." );
							}
							break;
						case 4:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_DOOR_BOLTS ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "You can't drop the door bolts - The door bolt dropping wire has been cut." );
							} else if ( !this.locked ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "dropped bolts on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.locked = true;
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") bolted the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
								this.update_icon();
							}
							break;
						case 5:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_ELECTRIFY ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "Can't un-electrify the airlock - The electrification wire is cut." );
							} else if ( this.secondsElectrified == -1 ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "electrified" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.secondsElectrified = 0;
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") un-electrified the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							} else if ( this.secondsElectrified > 0 ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "electrified" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.secondsElectrified = 0;
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") un-electrified the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							}
							break;
						case 8:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_SAFETY ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "Control to door sensors is disabled." );
							} else if ( this.safe ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "disabled safeties on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.safe = false;
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") removed the safeties on the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							} else {
								GlobalFuncs.to_chat( Task13.User, "Firmware reports safeties already overriden." );
							}
							break;
						case 9:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_SPEED ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "Control to door timing circuitry has been severed." );
							} else if ( this.normalspeed ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "disrupted timing on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.normalspeed = false;
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") disrupted door timing on the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							} else {
								GlobalFuncs.to_chat( Task13.User, "Door timing circurity already accellerated." );
							}
							break;
						case 7:
							
							if ( this.welded == true ) {
								GlobalFuncs.to_chat( Task13.User, "The airlock has been welded shut!" );
							} else if ( this.locked ) {
								GlobalFuncs.to_chat( Task13.User, "The door bolts are down!" );
							} else if ( !this.density ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "closed" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.close();
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") closed the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							} else {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "opened" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.open();
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") opened the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							}
							break;
						case 10:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_LIGHT ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "Control to door bolt lights has been severed.</a>" );
							} else if ( this.lights ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "disabled door bolt lights on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.lights = false;
							} else {
								GlobalFuncs.to_chat( Task13.User, "Door bolt lights are already disabled!" );
							}
							break;
					}
				} else if ( Lang13.Bool( href_list["aiEnable"] ) ) {
					code2 = String13.ParseNumber( href_list["aiEnable"] );

					switch ((int?)( code2 )) {
						case 1:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_IDSCAN ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "You can't enable IdScan - The IdScan wire has been cut." );
							} else if ( this.aiDisabledIdScanner ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "enabled ID Scan on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.aiDisabledIdScanner = false;
							} else {
								GlobalFuncs.to_chat( Task13.User, "The IdScan feature is not disabled." );
							}
							break;
						case 4:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_DOOR_BOLTS ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "The door bolt drop wire is cut - you can't raise the door bolts.<br>\n" );
							} else if ( !this.locked ) {
								GlobalFuncs.to_chat( Task13.User, "The door bolts are already up.<br>\n" );
							} else if ( this.arePowerSystemsOn() ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "raised bolts on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.locked = false;
								this.update_icon();
							} else {
								GlobalFuncs.to_chat( Task13.User, "Cannot raise door bolts due to power failure.<br>\n" );
							}
							break;
						case 5:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_ELECTRIFY ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "The electrification wire has been cut.<br>\n" );
							} else if ( this.secondsElectrified == -1 ) {
								GlobalFuncs.to_chat( Task13.User, "The door is already indefinitely electrified. You'd have to un-electrify it before you can re-electrify it with a non-forever duration.<br>\n" );
							} else if ( this.secondsElectrified != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "The door is already electrified. You can't re-electrify it while it's already electrified.<br>\n" );
							} else {
								this.shockedby.Add( "[" + GlobalFuncs.time_stamp() + "]" + Task13.User + "(ckey:" + Task13.User.ckey + ")" );
								Task13.User.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Electrified the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" );
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") Temporarily electrified the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );

								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "electrified (30sec)" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.secondsElectrified = 30;
								Task13.Schedule( 10, (Task13.Closure)(() => {
									
									while (this.secondsElectrified > 0) {
										this.secondsElectrified -= 1;

										if ( this.secondsElectrified < 0 ) {
											this.secondsElectrified = 0;
										}
										this.updateUsrDialog();
										Task13.Sleep( 10 );
									}
									return;
								}));
							}
							break;
						case 6:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_ELECTRIFY ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "The electrification wire has been cut.<br>\n" );
							} else if ( this.secondsElectrified == -1 ) {
								GlobalFuncs.to_chat( Task13.User, "The door is already indefinitely electrified.<br>\n" );
							} else if ( this.secondsElectrified != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "The door is already electrified. You can't re-electrify it while it's already electrified.<br>\n" );
							} else {
								this.shockedby.Add( "[" + GlobalFuncs.time_stamp() + "]" + Task13.User + "(ckey:" + Task13.User.ckey + ")" );
								Task13.User.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Electrified the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" );
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") Electrified the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );

								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "electrified (permanent)" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.secondsElectrified = -1;
							}
							break;
						case 8:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_SAFETY ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "Control to door sensors is disabled." );
							} else if ( !this.safe ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "enabled safeties on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.safe = true;
								this.updateUsrDialog();
							} else {
								GlobalFuncs.to_chat( Task13.User, "Firmware reports safeties already in place." );
							}
							break;
						case 9:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_SPEED ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "Control to door timing circuitry has been severed." );
							} else if ( !this.normalspeed ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "set speed to normal on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.normalspeed = true;
								this.updateUsrDialog();
							} else {
								GlobalFuncs.to_chat( Task13.User, "Door timing circurity currently operating normally." );
							}
							break;
						case 7:
							
							if ( this.welded == true ) {
								GlobalFuncs.to_chat( Task13.User, "The airlock has been welded shut!" );
							} else if ( this.locked ) {
								GlobalFuncs.to_chat( Task13.User, "The door bolts are down!" );
							} else if ( this.density ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "opened" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.open();
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") opened the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							} else {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "closed" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.close();
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") closed the " + this.name + " at " + this.x + " " + this.y + " " + this.z + "</font>" ) ) );
							}
							break;
						case 10:
							
							if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_LIGHT ) != 0 ) {
								GlobalFuncs.to_chat( Task13.User, "Control to door bolt lights has been severed.</a>" );
							} else if ( !this.lights ) {
								
								if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "enabled bolt lights on" ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Nope.</span>" );
									return 0;
								}
								this.lights = true;
								this.updateUsrDialog();
							} else {
								GlobalFuncs.to_chat( Task13.User, "Door bolt lights are already enabled!" );
							}
							break;
					}
				}
			}
			this.add_fingerprint( Task13.User );
			this.update_icon();

			if ( !Lang13.Bool( hclient ) ) {
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: airlock.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			dynamic i = null;
			Effect_Effect_System_SparkSpread s = null;

			
			if ( this.isElectrified() ) {
				
				if ( mover is Obj_Item ) {
					i = mover;

					if ( Lang13.Bool( i.materials ) && ( ((Materials)i.materials).getAmount( "$iron" ) ?1:0) > 0 ) {
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();
					}
				}
			}
			return base.CanPass( (object)(mover), (object)(target), height, air_group );
		}

		// Function from file: airlock.dm
		public override dynamic attack_ai( dynamic user = null ) {
			string t1 = null;

			this.add_hiddenprint( user );

			if ( user is Mob_Living_Silicon_Ai ) {
				
				if ( !this.canAIControl() ) {
					
					if ( this.canAIHack() ) {
						this.hack( user );
						return null;
					} else {
						GlobalFuncs.to_chat( user, "Airlock AI control has been blocked with a firewall. Unable to hack." );
					}
				}
			}
			((Mob)user).set_machine( this );
			t1 = "<B>Airlock Control</B><br>\n";

			if ( this.secondsMainPowerLost > 0 ) {
				
				if ( !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER1 ) != 0 ) && !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER2 ) != 0 ) ) {
					t1 += "Main power is offline for " + this.secondsMainPowerLost + " seconds.<br>\n";
				} else {
					t1 += "Main power is offline indefinitely.<br>\n";
				}
			} else {
				t1 += "Main power is online.";
			}

			if ( this.secondsBackupPowerLost > 0 ) {
				
				if ( !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER1 ) != 0 ) && !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER2 ) != 0 ) ) {
					t1 += "Backup power is offline for " + this.secondsBackupPowerLost + " seconds.<br>\n";
				} else {
					t1 += "Backup power is offline indefinitely.<br>\n";
				}
			} else if ( this.secondsMainPowerLost > 0 ) {
				t1 += "Backup power is online.";
			} else {
				t1 += "Backup power is offline, but will turn on if main power fails.";
			}
			t1 += "<br>\n";

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_IDSCAN ) != 0 ) {
				t1 += "IdScan wire is cut.<br>\n";
			} else if ( this.aiDisabledIdScanner ) {
				t1 += new Txt( "IdScan disabled. <A href='?src=" ).Ref( this ).str( ";aiEnable=1'>Enable?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "IdScan enabled. <A href='?src=" ).Ref( this ).str( ";aiDisable=1'>Disable?</a><br>\n" ).ToString();
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER1 ) != 0 ) {
				t1 += "Main Power Input wire is cut.<br>\n";
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER2 ) != 0 ) {
				t1 += "Main Power Output wire is cut.<br>\n";
			}

			if ( this.secondsMainPowerLost == 0 ) {
				t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiDisable=2'>Temporarily disrupt main power?</a>.<br>\n" ).ToString();
			}

			if ( this.secondsBackupPowerLost == 0 ) {
				t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiDisable=3'>Temporarily disrupt backup power?</a>.<br>\n" ).ToString();
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER1 ) != 0 ) {
				t1 += "Backup Power Input wire is cut.<br>\n";
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER2 ) != 0 ) {
				t1 += "Backup Power Output wire is cut.<br>\n";
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_DOOR_BOLTS ) != 0 ) {
				t1 += "Door bolt drop wire is cut.<br>\n";
			} else if ( !this.locked ) {
				t1 += new Txt( "Door bolts are up. <A href='?src=" ).Ref( this ).str( ";aiDisable=4'>Drop them?</a><br>\n" ).ToString();
			} else {
				t1 += "Door bolts are down.";

				if ( this.arePowerSystemsOn() ) {
					t1 += new Txt( " <A href='?src=" ).Ref( this ).str( ";aiEnable=4'>Raise?</a><br>\n" ).ToString();
				} else {
					t1 += " Cannot raise door bolts due to power failure.<br>\n";
				}
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_LIGHT ) != 0 ) {
				t1 += "Door bolt lights wire is cut.<br>\n";
			} else if ( !this.lights ) {
				t1 += new Txt( "Door lights are off. <A href='?src=" ).Ref( this ).str( ";aiEnable=10'>Enable?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Door lights are on. <A href='?src=" ).Ref( this ).str( ";aiDisable=10'>Disable?</a><br>\n" ).ToString();
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_ELECTRIFY ) != 0 ) {
				t1 += "Electrification wire is cut.<br>\n";
			}

			if ( this.secondsElectrified == -1 ) {
				t1 += new Txt( "Door is electrified indefinitely. <A href='?src=" ).Ref( this ).str( ";aiDisable=5'>Un-electrify it?</a><br>\n" ).ToString();
			} else if ( this.secondsElectrified > 0 ) {
				t1 += new Txt( "Door is electrified temporarily (" ).item( this.secondsElectrified ).str( " seconds). <A href='?src=" ).Ref( this ).str( ";aiDisable=5'>Un-electrify it?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Door is not electrified. <A href='?src=" ).Ref( this ).str( ";aiEnable=5'>Electrify it for 30 seconds?</a> Or, <A href='?src=" ).Ref( this ).str( ";aiEnable=6'>Electrify it indefinitely until someone cancels the electrification?</a><br>\n" ).ToString();
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_SAFETY ) != 0 ) {
				t1 += "Door force sensors not responding.</a><br>\n";
			} else if ( this.safe ) {
				t1 += new Txt( "Door safeties operating normally.  <A href='?src=" ).Ref( this ).str( ";aiDisable=8'> Override?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Danger.  Door safeties disabled.  <A href='?src=" ).Ref( this ).str( ";aiEnable=8'> Restore?</a><br>\n" ).ToString();
			}

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_SPEED ) != 0 ) {
				t1 += "Door timing circuitry not responding.</a><br>\n";
			} else if ( this.normalspeed ) {
				t1 += new Txt( "Door timing circuitry operating normally.  <A href='?src=" ).Ref( this ).str( ";aiDisable=9'> Override?</a><br>\n" ).ToString();
			} else {
				t1 += new Txt( "Warning.  Door timing circuitry operating abnormally.  <A href='?src=" ).Ref( this ).str( ";aiEnable=9'> Restore?</a><br>\n" ).ToString();
			}

			if ( this.welded == true ) {
				t1 += "Door appears to have been welded shut.<br>\n";
			} else if ( !this.locked ) {
				
				if ( this.density ) {
					t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiEnable=7'>Open door</a><br>\n" ).ToString();
				} else {
					t1 += new Txt( "<A href='?src=" ).Ref( this ).str( ";aiDisable=7'>Close door</a><br>\n" ).ToString();
				}
			}
			t1 += new Txt( "<p><a href='?src=" ).Ref( this ).str( ";close=1'>Close</a></p>\n" ).ToString();
			Interface13.Browse( user, t1, "window=airlock" );
			GlobalFuncs.onclose( user, "airlock" );
			return null;
		}

		// Function from file: airlock.dm
		public override void door_animate( string animation = null ) {
			
			switch ((string)( animation )) {
				case "opening":
					
					if ( this.overlays != null ) {
						this.overlays.len = 0;
					}

					if ( this.panel_open ) {
						Task13.Schedule( 2, (Task13.Closure)(() => {
							Icon13.Flick( "o_door_opening", this );
							return;
						}));
					} else {
						Icon13.Flick( "door_opening", this );
					}
					break;
				case "closing":
					
					if ( this.overlays != null ) {
						this.overlays.len = 0;
					}

					if ( this.panel_open ) {
						Icon13.Flick( "o_door_closing", this );
					} else {
						Icon13.Flick( "door_closing", this );
					}
					break;
				case "spark":
					Icon13.Flick( "door_spark", this );
					break;
				case "deny":
					Icon13.Flick( "door_deny", this );
					break;
			}
			return;
		}

		// Function from file: airlock.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			ByTable L = null;

			this.overlays = 0;

			if ( this.density ) {
				
				if ( this.locked && this.lights ) {
					this.icon_state = "door_locked";
				} else {
					this.icon_state = "door_closed";
				}

				if ( this.panel_open || this.welded == true ) {
					L = new ByTable( 0 );

					if ( this.panel_open ) {
						L.Add( "panel_open" );
					}

					if ( this.welded == true ) {
						L.Add( "welded" );
					}
					this.overlays = L;
					L = null;
				}
			} else {
				this.icon_state = "door_open";
			}
			return null;
		}

		// Function from file: airlock.dm
		public override bool shock( dynamic user = null, int? prb = null, double? siemenspassed = null ) {
			Effect_Effect_System_SparkSpread s = null;

			
			if ( ( this.stat & 2 ) != 0 || !this.arePowerSystemsOn() ) {
				return false;
			}

			if ( this.hasShocked ) {
				return false;
			}

			if ( !Rand13.PercentChance( prb ??0 ) ) {
				return false;
			}
			s = new Effect_Effect_System_SparkSpread();
			s.set_up( 5, 1, this );
			s.start();

			if ( Lang13.Bool( GlobalFuncs.electrocute_mob( user, GlobalFuncs.get_area( this ), this ) ) ) {
				this.hasShocked = true;
				Task13.Schedule( 10, (Task13.Closure)(() => {
					this.hasShocked = false;
					return;
				}));
				return true;
			} else {
				return false;
			}
		}

		// Function from file: airlock.dm
		public override bool requiresID(  ) {
			return !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_IDSCAN ) != 0 || this.aiDisabledIdScanner );
		}

		// Function from file: airlock.dm
		public override void bump_open( Mob_Living user = null ) {
			
			if ( !( user is Mob_Living ) ) {
				return;
			}

			if ( !( Task13.User is Mob_Living_Silicon ) ) {
				
				if ( this.isElectrified() ) {
					
					if ( !this.justzap ) {
						
						if ( this.shock( user, 100 ) ) {
							this.justzap = true;
							Task13.Schedule( 10, (Task13.Closure)(() => {
								this.justzap = false;
								return;
							}));
							return;
						}
					} else {
						return;
					}
				} else if ( user.hallucination > 50 && Rand13.PercentChance( 10 ) && this.operating == 0 ) {
					GlobalFuncs.to_chat( user, "<span class='danger'>You feel a powerful shock course through your body!</span>" );
					user.halloss += 10;
					user.stunned += 10;
					return;
				}
			}
			base.bump_open( user );
			return;
		}

		// Function from file: airlock.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.wires != null ) {
				GlobalFuncs.qdel( this.wires );
				this.wires = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: airlock_control.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			
			if ( Lang13.Bool( this.frequency ) ) {
				this.set_frequency( this.frequency );
			}
			this.update_icon();
			return false;
		}

		// Function from file: airlock_control.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			Ent_Static mecha = null;
			Game_Data signal = null;

			base.Bumped( AM, (object)(yes) );

			if ( AM is Obj_Mecha ) {
				mecha = AM;

				if ( this.density && this.radio_connection != null && Lang13.Bool( ((dynamic)mecha).occupant ) && ( this.allowed( ((dynamic)mecha).occupant ) || this.check_access_list( ((dynamic)mecha).operation_req_access ) ) ) {
					signal = GlobalFuncs.getFromPool( typeof(Signal) );
					((dynamic)signal).transmission_method = 1;
					((dynamic)signal).data["tag"] = this.id_tag;
					((dynamic)signal).data["timestamp"] = Game13.time;
					((dynamic)signal).data["door_status"] = ( this.density ? "closed" : "open" );
					((dynamic)signal).data["lock_status"] = ( this.locked ? "locked" : "unlocked" );
					((dynamic)signal).data["bumped_with_access"] = 1;
					this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_AIRLOCK, 5 );
				}
			}
			return false;
		}

		// Function from file: airlock.dm
		public void prison_open(  ) {
			this.locked = false;
			this.open();
			this.locked = true;
			return;
		}

		// Function from file: airlock.dm
		public dynamic revert( dynamic user = null, int? direction = null ) {
			dynamic DA = null;
			Obj_Item_Weapon_Circuitboard_Airlock A = null;

			DA = Lang13.Call( this.assembly_type, this.loc );
			DA.anchored = 1;
			DA.fingerprints.Add( this.fingerprints );
			DA.fingerprintshidden.Add( this.fingerprintshidden );
			DA.fingerprintslast = user.ckey;

			if ( Lang13.Bool( this.mineral ) ) {
				DA.glass = this.mineral;
			} else if ( this.glass && !Lang13.Bool( DA.glass ) ) {
				DA.glass = 1;
			}
			DA.state = 1;
			DA.created_name = this.name;
			DA.update_state();

			if ( !Lang13.Bool( this.electronics ) ) {
				A = new Obj_Item_Weapon_Circuitboard_Airlock( this.loc );

				if ( Lang13.Bool( this.req_access ) && this.req_access.len != 0 ) {
					A.conf_access = this.req_access;
				} else if ( Lang13.Bool( this.req_one_access ) && this.req_one_access.len != 0 ) {
					A.conf_access = this.req_one_access;
					A.one_access = true;
				}
			} else {
				A = this.electronics;
				this.electronics = null;
				A.loc = this.loc;
				A.installed = false;
			}

			if ( this.operating == -1 ) {
				A.icon_state = "door_electronics_smoked";
				this.operating = 0;
			}

			if ( Lang13.Bool( direction ) ) {
				A.throw_at( GlobalFuncs.get_edge_target_turf( this, direction ), 10, 4 );
			}
			return DA;
		}

		// Function from file: airlock.dm
		public void hack( dynamic user = null ) {
			
			if ( !this.aiHacking ) {
				this.aiHacking = true;
				Task13.Schedule( 20, (Task13.Closure)(() => {
					GlobalFuncs.to_chat( user, "Airlock AI control has been blocked. Beginning fault-detection." );
					Task13.Sleep( 50 );

					if ( this.canAIControl() ) {
						GlobalFuncs.to_chat( user, "Alert cancelled. Airlock control has been restored without our assistance." );
						this.aiHacking = false;
						return;
					} else if ( !this.canAIHack() ) {
						GlobalFuncs.to_chat( user, "We've lost our connection! Unable to hack airlock." );
						this.aiHacking = false;
						return;
					}
					GlobalFuncs.to_chat( user, "Fault confirmed: airlock control wire disabled or cut." );
					Task13.Sleep( 20 );
					GlobalFuncs.to_chat( user, "Attempting to hack into airlock. This may take some time." );
					Task13.Sleep( 200 );

					if ( this.canAIControl() ) {
						GlobalFuncs.to_chat( user, "Alert cancelled. Airlock control has been restored without our assistance." );
						this.aiHacking = false;
						return;
					} else if ( !this.canAIHack() ) {
						GlobalFuncs.to_chat( user, "We've lost our connection! Unable to hack airlock." );
						this.aiHacking = false;
						return;
					}
					GlobalFuncs.to_chat( user, "Upload access confirmed. Loading control program into airlock software." );
					Task13.Sleep( 170 );

					if ( this.canAIControl() ) {
						GlobalFuncs.to_chat( user, "Alert cancelled. Airlock control has been restored without our assistance." );
						this.aiHacking = false;
						return;
					} else if ( !this.canAIHack() ) {
						GlobalFuncs.to_chat( user, "We've lost our connection! Unable to hack airlock." );
						this.aiHacking = false;
						return;
					}
					GlobalFuncs.to_chat( user, "Transfer complete. Forcing airlock to execute program." );
					Task13.Sleep( 50 );
					this.aiControlDisabled = 2;
					GlobalFuncs.to_chat( user, "Receiving control information from airlock." );
					Task13.Sleep( 10 );
					this.aiHacking = false;

					if ( Lang13.Bool( user ) ) {
						this.attack_ai( user );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: airlock.dm
		public void regainBackupPower(  ) {
			
			if ( this.secondsBackupPowerLost > 0 ) {
				this.secondsBackupPowerLost = 0;
			}
			return;
		}

		// Function from file: airlock.dm
		public void loseBackupPower(  ) {
			
			if ( this.secondsBackupPowerLost < 60 ) {
				this.secondsBackupPowerLost = 60;
			}
			return;
		}

		// Function from file: airlock.dm
		public void loseMainPower(  ) {
			bool cont = false;

			
			if ( this.secondsMainPowerLost <= 0 ) {
				this.secondsMainPowerLost = 60;

				if ( this.secondsBackupPowerLost < 10 ) {
					this.secondsBackupPowerLost = 10;
				}
			}

			if ( !this.spawnPowerRestoreRunning ) {
				this.spawnPowerRestoreRunning = true;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					cont = true;

					while (cont) {
						Task13.Sleep( 10 );
						cont = false;

						if ( this.secondsMainPowerLost > 0 ) {
							
							if ( !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER1 ) != 0 ) && !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER2 ) != 0 ) ) {
								this.secondsMainPowerLost -= 1;
								this.updateDialog();
							}
							cont = true;
						}

						if ( this.secondsBackupPowerLost > 0 ) {
							
							if ( !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER1 ) != 0 ) && !( this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER2 ) != 0 ) ) {
								this.secondsBackupPowerLost -= 1;
								this.updateDialog();
							}
							cont = true;
						}
					}
					this.spawnPowerRestoreRunning = false;
					this.updateDialog();
					return;
				}));
			}
			return;
		}

		// Function from file: airlock.dm
		public void regainMainPower(  ) {
			
			if ( this.secondsMainPowerLost > 0 ) {
				this.secondsMainPowerLost = 0;
			}
			return;
		}

		// Function from file: airlock.dm
		public bool isAllPowerCut(  ) {
			bool retval = false;

			retval = false;

			if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER1 ) != 0 || this.isWireCut( GlobalVars.AIRLOCK_WIRE_MAIN_POWER2 ) != 0 ) {
				
				if ( this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER1 ) != 0 || this.isWireCut( GlobalVars.AIRLOCK_WIRE_BACKUP_POWER2 ) != 0 ) {
					retval = true;
				}
			}
			return retval;
		}

		// Function from file: airlock.dm
		public bool arePowerSystemsOn(  ) {
			return this.secondsMainPowerLost == 0 || this.secondsBackupPowerLost == 0;
		}

		// Function from file: airlock.dm
		public bool canAIHack(  ) {
			return this.aiControlDisabled == 1 && !this.hackProof && !this.isAllPowerCut();
		}

		// Function from file: airlock.dm
		public bool canAIControl(  ) {
			return this.aiControlDisabled != 1 && !this.isAllPowerCut();
		}

		// Function from file: airlock.dm
		public int isWireCut( double? wireIndex = null ) {
			
			if ( !( this.wires != null ) ) {
				return 1;
			}
			return this.wires.IsIndexCut( wireIndex );
		}

		// Function from file: airlock.dm
		public bool isElectrified(  ) {
			
			if ( this.secondsElectrified != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: airlock_control.dm
		public void set_frequency( dynamic new_frequency = null ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );

			if ( Lang13.Bool( new_frequency ) ) {
				this.frequency = new_frequency;
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_AIRLOCK );
			}
			return;
		}

		// Function from file: airlock_control.dm
		public void send_status(  ) {
			Game_Data signal = null;

			
			if ( this.radio_connection != null ) {
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).transmission_method = 1;
				((dynamic)signal).data["tag"] = this.id_tag;
				((dynamic)signal).data["timestamp"] = Game13.time;
				((dynamic)signal).data["door_status"] = ( this.density ? "closed" : "open" );
				((dynamic)signal).data["lock_status"] = ( this.locked ? "locked" : "unlocked" );
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_AIRLOCK, 5 );
			}
			return;
		}

		// Function from file: airlock_control.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}

			if ( this.id_tag != ((dynamic)signal).data["tag"] || !Lang13.Bool( ((dynamic)signal).data["command"] ) ) {
				return false;
			}

			dynamic _a = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
			if ( _a=="open" ) {
				this.open( 1 );
			} else if ( _a=="close" ) {
				this.close( true );
			} else if ( _a=="unlock" ) {
				this.locked = false;
				this.update_icon();
			} else if ( _a=="lock" ) {
				this.locked = true;
				this.update_icon();
			} else if ( _a=="toggle_lock" ) {
				
				if ( !this.density ) {
					this.close( true );
					Task13.Sleep( 2 );
				}
				this.locked = !this.locked;
				this.update_icon();
			} else if ( _a=="secure_open" ) {
				this.locked = false;
				this.update_icon();
				Task13.Sleep( 2 );
				this.open( 1 );
				this.locked = true;
				this.update_icon();
			} else if ( _a=="secure_close" ) {
				this.locked = false;
				this.close( true );
				this.locked = true;
				Task13.Sleep( 2 );
				this.update_icon();
			}
			this.send_status();
			return false;
		}

		// Function from file: ai.dm
		public override void AIAltClick( Mob_Living_Silicon_Ai user = null ) {
			
			if ( !( this.secondsElectrified != 0 ) ) {
				this.Topic( "aiEnable=6", new ByTable().Set( "aiEnable", "6" ), 1 );
			} else {
				this.Topic( "aiDisable=5", new ByTable().Set( "aiDisable", "5" ), 1 );
			}
			return;
		}

		// Function from file: ai.dm
		public override void AICtrlClick(  ) {
			
			if ( this.locked ) {
				this.Topic( "aiEnable=4", new ByTable().Set( "aiEnable", "4" ), 1 );
			} else {
				this.Topic( "aiDisable=4", new ByTable().Set( "aiDisable", "4" ), 1 );
			}
			return;
		}

		// Function from file: ai.dm
		public override void AIShiftClick(  ) {
			
			if ( this.density ) {
				this.Topic( "aiEnable=7", new ByTable().Set( "aiEnable", "7" ), 1 );
			} else {
				this.Topic( "aiDisable=7", new ByTable().Set( "aiDisable", "7" ), 1 );
			}
			return;
		}

	}

}