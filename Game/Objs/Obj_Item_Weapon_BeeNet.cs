// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_BeeNet : Obj_Item_Weapon {

		public double caught_bees = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "bee_net";
			this.inhand_states = new ByTable().Set( "left_hand", "icons/mob/in-hand/left/beekeeping.dmi" ).Set( "right_hand", "icons/mob/in-hand/right/beekeeping.dmi" );
			this.icon = "icons/obj/apiary_bees_etc.dmi";
			this.icon_state = "bee_net";
		}

		public Obj_Item_Weapon_BeeNet ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: bees_items.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			Tile T = null;
			bool caught = false;
			Mob_Living_SimpleAnimal_Bee B = null;

			T = Map13.GetStep( GlobalFuncs.get_turf( user ), Convert.ToInt32( user.dir ) );
			caught = false;

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Mob_Living_SimpleAnimal_Bee) )) {
				B = _a;
				
				caught = true;

				if ( B.feral < 0 ) {
					this.caught_bees += B.strength;
					GlobalFuncs.qdel( B );
					B = null;
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " nets some bees.</span>", "<span class='notice'>You net up some of the becalmed bees.</span>" );
				} else {
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " swings at some bees, they don't seem to like it.</span>", "<span class='warning'>You swing at some bees, they don't seem to like it.</span>" );
					B.feral = 5;
					B.target = user;
				}
			}

			if ( !caught ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>There are no bees in front of you!</span>" );
			}
			return null;
		}

		// Function from file: bees_items.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic T = null;
			bool caught = false;
			Mob_Living_SimpleAnimal_Bee B = null;

			
			if ( Map13.GetDistance( A, user ) > 1 ) {
				return false;
			}

			if ( A is Obj_Machinery_Apiary ) {
				return false;
			}
			T = GlobalFuncs.get_turf( A );
			caught = false;

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Mob_Living_SimpleAnimal_Bee) )) {
				B = _a;
				
				caught = true;

				if ( B.feral < 0 ) {
					this.caught_bees += B.strength;
					GlobalFuncs.qdel( B );
					B = null;
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " nets some bees.</span>", "<span class='notice'>You net up some of the becalmed bees.</span>" );
				} else {
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " swings at some bees, they don't seem to like it.</span>", "<span class='warning'>You swing at some bees, they don't seem to like it.</span>" );
					B.feral = 5;
					B.target = user;
				}
			}

			if ( !caught ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>There are no bees in front of you!</span>" );
			}
			return false;
		}

		// Function from file: bees_items.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.caught_bees != 0 ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>There's " ).item( this.caught_bees ).str( " caught bee" ).s().str( " in it!</span>" ).ToString() );
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>It has no bees in it.</span>" );
			}
			return null;
		}

		// Function from file: bees_items.dm
		[Verb]
		[VerbInfo( name: "Empty bee net", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void empty_bees(  ) {
			Mob M = null;
			Mob_Living_SimpleAnimal_Bee B = null;
			Mob_Living_SimpleAnimal_Bee B2 = null;

			
			if ( Task13.User is Mob_Living_Carbon ) {
				M = Task13.User;
			}

			while (this.caught_bees > 0) {
				
				while (this.caught_bees > 5) {
					B = new Mob_Living_SimpleAnimal_Bee( this.loc );
					B.feral = 5;
					B.target = M;
					B.strength = 6;
					B.icon_state = "bees_swarm";
					this.caught_bees -= 6;
				}
				B2 = new Mob_Living_SimpleAnimal_Bee( this.loc );
				B2.strength = this.caught_bees;
				B2.icon_state = "bees" + B2.strength;
				B2.feral = 5;
				B2.target = M;
				this.caught_bees = 0;
			}
			return;
		}

	}

}