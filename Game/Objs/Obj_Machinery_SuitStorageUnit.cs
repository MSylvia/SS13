// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SuitStorageUnit : Obj_Machinery {

		public Ent_Static OCCUPANT = null;
		public dynamic SUIT = null;
		public dynamic HELMET = null;
		public dynamic MASK = null;
		public dynamic BOOTS = null;
		public Type SUIT_TYPE = null;
		public Type HELMET_TYPE = null;
		public Type BOOT_TYPE = null;
		public Type MASK_TYPE = null;
		public bool isopen = false;
		public bool islocked = false;
		public bool isUV = false;
		public bool issuperUV = false;
		public bool safetieson = true;
		public int cycletime_left = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 2;
			this.icon = "icons/obj/suitstorage.dmi";
			this.icon_state = "suitstorage-closed-00";
		}

		// Function from file: suit_storage_unit.dm
		public Obj_Machinery_SuitStorageUnit ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();

			if ( this.SUIT_TYPE != null ) {
				this.SUIT = Lang13.Call( this.SUIT_TYPE, this );
			}

			if ( this.HELMET_TYPE != null ) {
				this.HELMET = Lang13.Call( this.HELMET_TYPE, this );
			}

			if ( this.MASK_TYPE != null ) {
				this.MASK = Lang13.Call( this.MASK_TYPE, this );
			}

			if ( this.BOOT_TYPE != null ) {
				this.BOOTS = Lang13.Call( this.BOOT_TYPE, this );
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			GlobalFuncs.to_chat( a, "<font color='blue'>The console controls are far too complicated for your tiny brain!</font>" );
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;
			dynamic G = null;
			Ent_Static M = null;
			dynamic S2 = null;
			dynamic H = null;
			dynamic M2 = null;
			dynamic M3 = null;

			
			if ( ( this.stat & 1 ) != 0 && a is Obj_Item_Weapon_Solder ) {
				S = a;

				if ( !Lang13.Bool( S.remove_fuel( 4, b ) ) ) {
					return null;
				}
				GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 100, 1 );

				if ( GlobalFuncs.do_after( b, this, 40 ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 100, 1 );
					this.stat &= 0;
					GlobalFuncs.to_chat( b, "<span class='notice'>You repair the blown out electronics in the suit storage unit.</span>" );
				}
			}

			if ( ( this.stat & 2 ) != 0 && a is Obj_Item_Weapon_Crowbar && !this.islocked ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
				GlobalFuncs.to_chat( b, "<span class='notice'>You begin prying the equipment out of the suit storage unit</span>" );

				if ( GlobalFuncs.do_after( b, this, 20 ) ) {
					this.dump_everything();
					this.update_icon();
				}
			}

			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( a is Obj_Item_Weapon_Grab ) {
				G = a;

				if ( !( G.affecting is Mob ) ) {
					return null;
				}

				if ( !this.isopen ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>The unit's doors are shut.</font>" );
					return null;
				}

				if ( ( this.stat & 2 ) != 0 || ( this.stat & 1 ) != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>The unit is not operational.</font>" );
					return null;
				}

				if ( this.OCCUPANT != null || Lang13.Bool( this.HELMET ) || Lang13.Bool( this.SUIT ) || Lang13.Bool( this.BOOTS ) ) {
					GlobalFuncs.to_chat( b, "<font color='red'>The unit's storage area is too cluttered.</font>" );
					return null;
				}
				this.visible_message( "" + b + " starts putting " + G.affecting.name + " into the Suit Storage Unit." );

				if ( GlobalFuncs.do_after( b, this, 20 ) ) {
					
					if ( !Lang13.Bool( G ) || !Lang13.Bool( G.affecting ) ) {
						return null;
					}
					M = G.affecting;

					if ( Lang13.Bool( ((dynamic)M).client ) ) {
						((dynamic)M).client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
						((dynamic)M).client.eye = this;
					}
					M.loc = this;
					this.OCCUPANT = M;
					this.isopen = false;
					this.add_fingerprint( b );
					GlobalFuncs.qdel( G );
					G = null;
					this.updateUsrDialog();
					this.update_icon();
					return null;
				}
				return null;
			}

			if ( a is Obj_Item_Clothing_Suit_Space ) {
				
				if ( !this.isopen ) {
					return null;
				}
				S2 = a;

				if ( Lang13.Bool( this.SUIT ) ) {
					GlobalFuncs.to_chat( b, "<font color='blue'>The unit already contains a suit.</font>" );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( S2, this ) ) ) {
					GlobalFuncs.to_chat( b, "You load the " + S2.name + " into the storage compartment." );
					this.SUIT = S2;
					this.update_icon();
					this.updateUsrDialog();
				}
				return null;
			}

			if ( a is Obj_Item_Clothing_Head_Helmet ) {
				
				if ( !this.isopen ) {
					return null;
				}
				H = a;

				if ( Lang13.Bool( this.HELMET ) ) {
					GlobalFuncs.to_chat( b, "<font color='blue'>The unit already contains a helmet.</font>" );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( H, this ) ) ) {
					GlobalFuncs.to_chat( b, "You load the " + H.name + " into the storage compartment." );
					this.HELMET = H;
					this.update_icon();
					this.updateUsrDialog();
					return null;
				}
			}

			if ( a is Obj_Item_Clothing_Mask ) {
				
				if ( !this.isopen ) {
					return null;
				}
				M2 = a;

				if ( Lang13.Bool( this.MASK ) ) {
					GlobalFuncs.to_chat( b, "<font color='blue'>The unit already contains a mask.</font>" );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( M2, this ) ) ) {
					GlobalFuncs.to_chat( b, "You load the " + M2.name + " into the storage compartment." );
					this.MASK = M2;
					this.update_icon();
					this.updateUsrDialog();
				}
				return null;
			}

			if ( a is Obj_Item_Clothing_Shoes ) {
				
				if ( !this.isopen ) {
					return null;
				}
				M3 = a;

				if ( Lang13.Bool( this.BOOTS ) ) {
					GlobalFuncs.to_chat( b, "<font color='blue'>The unit already contains shoes.</font>" );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( M3, this ) ) ) {
					GlobalFuncs.to_chat( b, new Txt( "You load " ).the( M3.name ).item().str( " into the storage compartment." ).ToString() );
					this.BOOTS = M3;
					this.update_icon();
					this.updateUsrDialog();
				}
				return null;
			}
			this.update_icon();
			this.updateUsrDialog();
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) );
			this.updateUsrDialog();
			return 0;
		}

		// Function from file: suit_storage_unit.dm
		public void eject_occupant( Ent_Static user = null ) {
			
			if ( this.islocked ) {
				return;
			}

			if ( !( this.OCCUPANT != null ) ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)this.OCCUPANT).client ) ) {
				
				if ( user != this.OCCUPANT ) {
					GlobalFuncs.to_chat( this.OCCUPANT, "<font color='blue'>The machine kicks you out!</font>" );
				}

				if ( user.loc != this.loc ) {
					GlobalFuncs.to_chat( this.OCCUPANT, "<font color='blue'>You leave the not-so-cozy confines of the SSU.</font>" );
				}
				((dynamic)this.OCCUPANT).client.eye = ((dynamic)this.OCCUPANT).client.mob;
				((dynamic)this.OCCUPANT).client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
			}
			this.OCCUPANT.loc = this.loc;
			this.OCCUPANT = null;

			if ( !this.isopen ) {
				this.isopen = true;
			}
			this.update_icon();
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void start_UV( Mob user = null ) {
			int i = 0;
			int burndamage = 0;
			int burndamage2 = 0;

			
			if ( this.isUV || this.isopen ) {
				return;
			}

			if ( this.OCCUPANT != null && this.safetieson ) {
				GlobalFuncs.to_chat( user, "<font color='red'><B>WARNING:</B> Biological entity detected in the confines of the Unit's storage. Cannot initiate cycle.</font>" );
				return;
			}

			if ( !Lang13.Bool( this.HELMET ) && !Lang13.Bool( this.MASK ) && !Lang13.Bool( this.SUIT ) && !Lang13.Bool( this.BOOTS ) && !( this.OCCUPANT != null ) ) {
				GlobalFuncs.to_chat( user, "<font color='red'>Unit storage bays empty. Nothing to disinfect -- Aborting.</font>" );
				return;
			}
			GlobalFuncs.to_chat( user, "You start the Unit's cauterisation cycle." );
			this.cycletime_left = 20;
			this.isUV = true;

			if ( this.OCCUPANT != null && !this.islocked ) {
				this.islocked = true;
			}
			this.update_icon();
			this.updateUsrDialog();
			i = 0;

			while (i < 4) {
				Task13.Sleep( 50 );

				if ( this.OCCUPANT != null ) {
					
					if ( this.issuperUV ) {
						burndamage = Rand13.Int( 28, 35 );
						((dynamic)this.OCCUPANT).take_organ_damage( 0, burndamage );
						((dynamic)this.OCCUPANT).emote( "scream", null, null, 1 );
					} else {
						burndamage2 = Rand13.Int( 6, 10 );
						((dynamic)this.OCCUPANT).take_organ_damage( 0, burndamage2 );
						((dynamic)this.OCCUPANT).emote( "scream", null, null, 1 );
					}
				}

				if ( i == 3 ) {
					
					if ( !this.issuperUV ) {
						
						if ( Lang13.Bool( this.HELMET ) ) {
							((Ent_Static)this.HELMET).clean_blood();
							((Obj_Item)this.HELMET).decontaminate();
						}

						if ( Lang13.Bool( this.SUIT ) ) {
							((Ent_Static)this.SUIT).clean_blood();
							((Obj_Item)this.SUIT).decontaminate();
						}

						if ( Lang13.Bool( this.MASK ) ) {
							((Ent_Static)this.MASK).clean_blood();
							((Obj_Item)this.MASK).decontaminate();
						}

						if ( Lang13.Bool( this.BOOTS ) ) {
							((Ent_Static)this.BOOTS).clean_blood();
							((Obj_Item)this.BOOTS).decontaminate();
						}
					} else {
						
						if ( Lang13.Bool( this.HELMET ) ) {
							this.HELMET = null;
						}

						if ( Lang13.Bool( this.SUIT ) ) {
							this.SUIT = null;
						}

						if ( Lang13.Bool( this.MASK ) ) {
							this.MASK = null;
						}

						if ( Lang13.Bool( this.BOOTS ) ) {
							this.BOOTS = null;
						}
						this.visible_message( "<font color='red'>With a loud whining noise, the Suit Storage Unit's door grinds open. Puffs of ashen smoke come out of its chamber.</font>" );
						this.stat |= 1;
						this.isopen = true;
						this.islocked = false;
						this.eject_occupant( this.OCCUPANT );
					}
					this.isUV = false;
				}
				i++;
			}
			this.update_icon();
			this.updateUsrDialog();
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void toggle_lock( Mob user = null ) {
			
			if ( this.OCCUPANT != null && this.safetieson ) {
				GlobalFuncs.to_chat( user, "<font color='red'>The Unit's safety protocols disallow locking when a biological form is detected inside its compartments.</font>" );
				return;
			}

			if ( this.isopen ) {
				return;
			}
			this.islocked = !this.islocked;
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void toggle_open( Mob user = null ) {
			
			if ( this.islocked || this.isUV ) {
				GlobalFuncs.to_chat( user, "<font color='red'>Unable to open unit.</font>" );
				return;
			}

			if ( this.OCCUPANT != null ) {
				this.eject_occupant( user );
				return;
			}
			this.isopen = !this.isopen;
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void dump_everything(  ) {
			this.islocked = false;

			if ( Lang13.Bool( this.SUIT ) ) {
				this.SUIT.loc = this.loc;
				this.SUIT = null;
			}

			if ( Lang13.Bool( this.HELMET ) ) {
				this.HELMET.loc = this.loc;
				this.HELMET = null;
			}

			if ( Lang13.Bool( this.MASK ) ) {
				this.MASK.loc = this.loc;
				this.MASK = null;
			}

			if ( Lang13.Bool( this.BOOTS ) ) {
				this.BOOTS.loc = this.loc;
				this.BOOTS = null;
			}

			if ( this.OCCUPANT != null ) {
				this.eject_occupant( this.OCCUPANT );
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void dispense_boots( Mob user = null ) {
			
			if ( !Lang13.Bool( this.BOOTS ) ) {
				return;
			} else {
				this.BOOTS.loc = this.loc;
				this.BOOTS = null;
				return;
			}
		}

		// Function from file: suit_storage_unit.dm
		public void dispense_mask( Mob user = null ) {
			
			if ( !Lang13.Bool( this.MASK ) ) {
				return;
			} else {
				this.MASK.loc = this.loc;
				this.MASK = null;
				return;
			}
		}

		// Function from file: suit_storage_unit.dm
		public void dispense_suit( Mob user = null ) {
			
			if ( !Lang13.Bool( this.SUIT ) ) {
				return;
			} else {
				this.SUIT.loc = this.loc;
				this.SUIT = null;
				return;
			}
		}

		// Function from file: suit_storage_unit.dm
		public void dispense_helmet( Mob user = null ) {
			
			if ( !Lang13.Bool( this.HELMET ) ) {
				return;
			} else {
				this.HELMET.loc = this.loc;
				this.HELMET = null;
				return;
			}
		}

		// Function from file: suit_storage_unit.dm
		public void togglesafeties( Mob user = null ) {
			
			if ( !this.panel_open ) {
				return;
			} else {
				GlobalFuncs.to_chat( user, "You push the button. The coloured LED next to it changes." );
				this.safetieson = !this.safetieson;
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void toggleUV( Mob user = null ) {
			
			if ( !this.panel_open ) {
				return;
			} else {
				
				if ( this.issuperUV ) {
					GlobalFuncs.to_chat( user, "You slide the dial back towards \"185nm\"." );
					this.issuperUV = false;
				} else {
					GlobalFuncs.to_chat( user, "You crank the dial all the way up to \"15nm\"." );
					this.issuperUV = true;
				}
				return;
			}
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			} else {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["toggleUV"] ) ) {
					this.toggleUV( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["togglesafeties"] ) ) {
					this.togglesafeties( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["dispense_helmet"] ) ) {
					this.dispense_helmet( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["dispense_suit"] ) ) {
					this.dispense_suit( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["dispense_mask"] ) ) {
					this.dispense_mask( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["dispense_boots"] ) ) {
					this.dispense_boots( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["toggle_open"] ) ) {
					this.toggle_open( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["toggle_lock"] ) ) {
					this.toggle_lock( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["start_UV"] ) ) {
					this.start_UV( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["eject_guy"] ) ) {
					this.eject_occupant( Task13.User );
					this.updateUsrDialog();
					this.update_icon();
				}
			}
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( this.panel_open ) {
				dat += "<HEAD><TITLE>Suit storage unit: Maintenance panel</TITLE></HEAD>\n			<Font color ='black'><B>Maintenance panel controls</B></font><HR>\n			<font color ='grey'>The panel is ridden with controls, button and meters, labeled in strange signs and symbols that <BR>you cannot understand. Probably the manufactoring world's language.<BR> Among other things, a few controls catch your eye.<BR><BR>";
				dat += new Txt( "<font color ='black'>A small dial with a \"Ã«\" symbol embroidded on it. It's pointing towards a gauge that reads " ).item( ( this.issuperUV ? "15nm" : "185nm" ) ).str( "</font>.<BR> <font color='blue'><A href='?src=" ).Ref( this ).str( ";toggleUV=1'> Turn towards " ).item( ( this.issuperUV ? "185nm" : "15nm" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "<font color ='black'>A thick old-style button, with 2 grimy LED lights next to it. The " ).item( ( this.safetieson ? "<font color='green'><B>GREEN</B></font>" : "<font color='red'><B>RED</B></font>" ) ).str( " LED is on.</font><BR><font color ='blue'><A href='?src=" ).Ref( this ).str( ";togglesafeties=1'>Press button</a></font>" ).ToString();
				dat += new Txt( "<HR><BR><A href='?src=" ).Ref( a ).str( ";mach_close=suit_storage_unit'>Close panel</A>" ).ToString();
			} else if ( this.isUV ) {
				dat += "<HEAD><TITLE>Suit storage unit</TITLE></HEAD>\n			<font color ='red'><B>Unit is cauterising contents with selected UV ray intensity. Please wait.</font></B><BR>";
			} else if ( !( ( this.stat & 1 ) != 0 ) ) {
				dat += "<HEAD><TITLE>Suit storage unit</TITLE></HEAD>\n				<font color='blue'><font size = 4><B>U-Stor-It Suit Storage Unit, model DS1900</B></FONT><BR>\n				<B>Welcome to the Unit control panel.</B><HR>";
				dat += "<font color='black'>Helmet storage compartment: <B>" + ( Lang13.Bool( this.HELMET ) ? this.HELMET.name : "</font><font color ='grey'>No helmet detected." ) + "</B></font><BR>";

				if ( Lang13.Bool( this.HELMET ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dispense_helmet=1'>Dispense helmet</A><BR>" ).ToString();
				}
				dat += "<font color='black'>Suit storage compartment: <B>" + ( Lang13.Bool( this.SUIT ) ? this.SUIT.name : "</font><font color ='grey'>No exosuit detected." ) + "</B></font><BR>";

				if ( Lang13.Bool( this.SUIT ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dispense_suit=1'>Dispense suit</A><BR>" ).ToString();
				}
				dat += "<font color='black'>Breathmask storage compartment: <B>" + ( Lang13.Bool( this.MASK ) ? this.MASK.name : "</font><font color ='grey'>No breathmask detected." ) + "</B></font><BR>";

				if ( Lang13.Bool( this.MASK ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dispense_mask=1'>Dispense mask</A><BR>" ).ToString();
				}
				dat += "<font color='black'>Boot storage compartment: <B>" + ( Lang13.Bool( this.BOOTS ) ? this.BOOTS.name : "</font><font color ='grey'>No boots detected." ) + "</B></font><BR>";

				if ( Lang13.Bool( this.BOOTS ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dispense_boots=1'>Dispense boots</A><BR>" ).ToString();
				}

				if ( this.OCCUPANT != null ) {
					dat += new Txt( "<HR><B><font color ='red'>WARNING: Biological entity detected inside the Unit's storage. Please remove.</B></font><BR>\n					<A href='?src=" ).Ref( this ).str( ";eject_guy=1'>Eject extra load</A>" ).ToString();
				}
				dat += new Txt( "<HR><font color='black'>Unit is: " ).item( ( this.isopen ? "Open" : "Closed" ) ).str( " - <A href='?src=" ).Ref( this ).str( ";toggle_open=1'>" ).item( ( this.isopen ? "Close" : "Open" ) ).str( " Unit</A></font> " ).ToString();

				if ( this.isopen ) {
					dat += "<HR>";
				} else {
					dat += new Txt( " - <A href='?src=" ).Ref( this ).str( ";toggle_lock=1'><font color ='orange'>*" ).item( ( this.islocked ? "Unlock" : "Lock" ) ).str( " Unit*</A></font><HR>" ).ToString();
				}
				dat += "Unit status: " + ( this.islocked ? "<font color ='red'><B>**LOCKED**</B></font><BR>" : "<font color ='green'><B>**UNLOCKED**</B></font><BR>" );
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";start_UV=1'>Start Disinfection cycle</A><BR>" ).ToString();
				dat += new Txt( "<BR><BR><A href='?src=" ).Ref( a ).str( ";mach_close=suit_storage_unit'>Close control panel</A>" ).ToString();
			} else {
				dat += "<HEAD><TITLE>Suit storage unit</TITLE></HEAD>\n				<font color='maroon'><B>Unit chamber is too contaminated to continue usage. Please call for a qualified individual to perform maintenance.</font></B><BR><BR>";
				dat += new Txt( "<HR><A href='?src=" ).Ref( a ).str( ";mach_close=suit_storage_unit'>Close control panel</A>" ).ToString();
			}
			Interface13.Browse( a, dat, "window=suit_storage_unit;size=400x500" );
			GlobalFuncs.onclose( a, "suit_storage_unit" );
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.dump_everything();
					}
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.dump_everything();
						GlobalFuncs.qdel( this );
					}
					return false;
					break;
				default:
					return false;
					break;
			}
			return false;
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
				this.update_icon();
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.stat |= 2;
					this.islocked = false;
					this.isopen = true;
					this.update_icon();
					return;
				}));
			}
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 2 ) != 0 || ( this.stat & 1 ) != 0 ) {
				this.icon_state = "suitstorage-off";
				return null;
			}

			if ( !this.isopen ) {
				this.icon_state = "suitstorage-closed-" + this.issuperUV + this.isUV;
			} else {
				this.icon_state = "suitstorage-open-" + ( Lang13.Bool( this.HELMET ) ? "1" : "0" ) + ( Lang13.Bool( this.SUIT ) ? "1" : "0" );
			}
			return null;
		}

		// Function from file: suit_storage_unit.dm
		[Verb]
		[VerbInfo( name: "Hide in Suit Storage Unit", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_inside(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}

			if ( !this.isopen ) {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>The unit's doors are shut.</font>" );
				return;
			}

			if ( ( this.stat & 2 ) != 0 || ( this.stat & 1 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>The unit is not operational.</font>" );
				return;
			}

			if ( this.OCCUPANT != null || Lang13.Bool( this.HELMET ) || Lang13.Bool( this.SUIT ) || Lang13.Bool( this.BOOTS ) ) {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>It's too cluttered inside for you to fit in!</font>" );
				return;
			}
			this.visible_message( "" + Task13.User + " starts squeezing into the suit storage unit!" );

			if ( GlobalFuncs.do_after( Task13.User, this, 10 ) ) {
				Task13.User.stop_pulling();
				Task13.User.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
				Task13.User.client.eye = this;
				Task13.User.loc = this;
				this.OCCUPANT = Task13.User;
				this.isopen = false;
				this.update_icon();
				this.add_fingerprint( Task13.User );
				this.updateUsrDialog();
				return;
			} else {
				this.OCCUPANT = null;
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		[Verb]
		[VerbInfo( name: "Eject Suit Storage Unit", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void get_out(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}
			this.eject_occupant( Task13.User );
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			this.update_icon();
			return;
		}

	}

}