// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Syringe : Obj_Item_Weapon_ReagentContainers {

		public int mode = 0;
		public bool can_draw_blood = true;
		public bool can_stab = true;
		public ByTable injectable_types = new ByTable(new object [] { 
											typeof(Obj_Item_Weapon_ReagentContainers_Food), 
											typeof(Obj_Item_SlimeExtract), 
											typeof(Obj_Item_Clothing_Mask_Cigarette), 
											typeof(Obj_Item_Weapon_Storage_Fancy_Cigarettes), 
											typeof(Obj_Item_Weapon_Implantcase_Chem), 
											typeof(Obj_Item_Weapon_ReagentContainers_Pill_TimeRelease)
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "syringe_0";
			this.sharpness = 1;
			this.possible_transfer_amounts = null;
			this.volume = 15;
			this.starting_materials = new ByTable().Set( "$glass", 1000 );
			this.w_type = 2;
			this.icon = "icons/obj/syringe.dmi";
			this.icon_state = "0";
		}

		public Obj_Item_Weapon_ReagentContainers_Syringe ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: syringes.dm
		public void syringestab( dynamic target = null, dynamic user = null ) {
			dynamic H = null;
			dynamic target_zone = null;
			dynamic affecting = null;
			dynamic hit_area = null;
			bool deflected = false;
			double? syringestab_amount_transferred = null;

			
			if ( target is Mob_Living_Carbon_Human ) {
				H = target;
				target_zone = GlobalFuncs.check_zone( ((dynamic)user.zone_sel).selecting );
				affecting = ((Mob_Living_Carbon_Human)H).get_organ( target_zone );

				if ( !Lang13.Bool( affecting ) ) {
					return;
				} else if ( Lang13.Bool( affecting.status & 64 ) ) {
					GlobalFuncs.to_chat( user, "What " + affecting.display_name + "?" );
					return;
				}
				hit_area = affecting.display_name;

				if ( user != target && ((Mob_Living_Carbon_Human)H).check_shields( 7, "the " + this.name ) ) {
					return;
				}
				deflected = target != user && ((Mob_Living)target).getarmor( target_zone, "melee" ) > 5 && Rand13.PercentChance( 50 );
				GlobalFuncs.add_attacklogs( user, target, ( deflected ? "attempted to inject" : "injected" ), this, "Deflected: " + ( deflected ? "YES" : "NO" ) + "; Reagents: " + GlobalFuncs.english_list( this.get_reagent_names() ), !deflected );

				if ( deflected ) {
					((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " tries to stab " ).item( target ).str( " in " ).the( hit_area ).item().str( " with " ).the( this ).item().str( ", but the attack is deflected by armor!</span>" ).ToString(), new Txt( "<span class='danger'>You try to stab " ).item( target ).str( " in " ).the( hit_area ).item().str( " with " ).the( this ).item().str( ", but the attack is deflected by armor!</span>" ).ToString() );
					((Mob)user).u_equip( this, true );
					GlobalFuncs.qdel( this );
					return;
				} else {
					((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " stabs " ).item( target ).str( " in " ).the( hit_area ).item().str( " with " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='danger'>You stab " ).item( target ).str( " in " ).the( hit_area ).item().str( " with " ).the( this ).item().str( "!</span>" ).ToString() );
					affecting.take_damage( 3 );
				}
			} else {
				((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " stabs " ).item( target ).str( " with " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='danger'>You stab " ).item( target ).str( " with " ).the( this ).item().str( "!</span>" ).ToString() );
				((Mob_Living)target).take_organ_damage( 3 );
			}
			((Reagents)this.reagents).reaction( target, GlobalVars.INGEST );
			syringestab_amount_transferred = Rand13.Int( 0, ((int)( ( this.reagents.total_volume ??0) - 5 )) );
			((Reagents)this.reagents).trans_to( target, syringestab_amount_transferred );
			this.desc += " It is broken.";
			this.mode = 2;
			this.add_blood( target );
			this.add_fingerprint( Task13.User );
			this.update_icon();
			return;
		}

		// Function from file: syringes.dm
		public bool get_injection_action( dynamic target = null ) {
			dynamic H = null;

			
			if ( target is Mob_Living_Carbon_Human ) {
				H = target;
				return ( Lang13.Bool( H.wear_suit ) && H.wear_suit is Obj_Item_Clothing_Suit_Space ? true : false );
			} else {
				return false;
			}
		}

		// Function from file: syringes.dm
		public virtual int get_injection_time( dynamic target = null ) {
			dynamic H = null;

			
			if ( target is Mob_Living_Carbon_Human ) {
				H = target;
				return ( Lang13.Bool( H.wear_suit ) && H.wear_suit is Obj_Item_Clothing_Suit_Space ? 60 : 30 );
			} else {
				return 30;
			}
		}

		// Function from file: syringes.dm
		public void handle_inject( dynamic target = null, dynamic user = null ) {
			string reagent_names = null;
			ByTable bad_reagents = null;
			dynamic tx_amount = null;

			
			if ( this.is_empty() ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is empty.</span>" ).ToString() );
				return;
			}

			if ( !( target is Mob ) && !Lang13.Bool( ((Ent_Static)target).is_open_container() ) && !GlobalFuncs.is_type_in_list( target, this.injectable_types ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You cannot directly fill this object.</span>" );
				return;
			}

			if ( ( target.reagents.total_volume ??0) >= Convert.ToDouble( target.reagents.maximum_volume ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( target ).item().str( " is full.</span>" ).ToString() );
				return;
			}

			if ( target is Mob && target != user ) {
				
				if ( this.get_injection_action( target ) ) {
					((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " begins hunting for an injection port " ).the( this ).item().str( " on " ).item( target ).str( "'s suit!</span>" ).ToString(), new Txt( "<span class='warning'>You begin hunting for an injection port for " ).the( this ).item().str( " on " ).item( target ).str( "'s suit!</span>" ).ToString() );
				} else {
					((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " is trying to inject " ).item( target ).str( " with " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>You try to inject " ).item( target ).str( " with " ).the( this ).item().str( "!</span>" ).ToString() );
				}

				if ( !GlobalFuncs.do_mob( user, target, this.get_injection_time( target ) ) ) {
					return;
				}
				((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " injects " ).item( target ).str( " with the " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>You inject " ).item( target ).str( " with " ).the( this ).item().str( "!</span>" ).ToString() );

				if ( target is Mob_Living ) {
					reagent_names = GlobalFuncs.english_list( this.get_reagent_names() );
					GlobalFuncs.add_attacklogs( user, target, "injected", this, "Reagents: " + reagent_names, GlobalVars.TRUE );
				}
			}
			bad_reagents = ((Reagents)this.reagents).get_bad_reagent_names();
			tx_amount = Num13.MinInt( Convert.ToInt32( this.amount_per_transfer_from_this ), ((int)( this.reagents.total_volume ??0 )) );

			if ( target is Mob ) {
				((Reagents)this.reagents).reaction( target, GlobalVars.INGEST );
			}
			tx_amount = ((Reagents)this.reagents).trans_to( target, tx_amount );
			GlobalFuncs.to_chat( user, "<span class='notice'>You inject " + tx_amount + " units of the solution. The syringe now contains " + this.reagents.total_volume + " units.</span>" );

			if ( Convert.ToDouble( tx_amount ) > 0 && target is Obj && target.log_reagents && bad_reagents != null && bad_reagents.len > 0 ) {
				GlobalFuncs.log_reagents( user, this, target, tx_amount, bad_reagents );
			}

			if ( this.is_empty() ) {
				this.mode = 0;
				this.update_icon();
			}
			return;
		}

		// Function from file: syringes.dm
		public void handle_draw( dynamic target = null, dynamic user = null ) {
			dynamic H = null;
			dynamic T = null;
			dynamic amount = null;
			dynamic B = null;
			dynamic tx_amount = null;

			
			if ( !Lang13.Bool( target ) ) {
				return;
			}

			if ( this.is_full() ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is full.</span>" ).ToString() );
				return;
			}

			if ( target is Mob ) {
				
				if ( !this.can_draw_blood ) {
					GlobalFuncs.to_chat( user, "This needle isn't designed for drawing fluids from living things." );
					return;
				}

				if ( target is Mob_Living_Carbon_Slime ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You are unable to locate any blood.</span>" );
					return;
				}

				if ( ((Reagents)this.reagents).has_reagent( "blood" ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>There is already a blood sample in this syringe!</span>" );
					return;
				}

				if ( target is Mob_Living_Carbon_Human ) {
					H = target;

					if ( Lang13.Bool( H.species ) && ( H.species.chem_flags & 8 ) != 0 ) {
						((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " attempts to poke " ).item( H ).str( " with " ).the( this ).item().str( " but it won't go in!</span>" ).ToString(), new Txt( "<span class='notice'>You fail to pierce " ).item( H ).str( " with " ).the( this ).item().str( "</span>" ).ToString() );
						return;
					}
				}

				if ( target is Mob_Living_Carbon ) {
					T = target;

					if ( !Lang13.Bool( T.dna ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You are unable to locate any blood.</span>" );
						Game13.log.WriteMsg( "## WARNING: " + new Txt( "Tried to draw blood or equivalent from " ).item( target ).str( " (" ).Ref( target ).str( ") but it's missing their DNA datum!" ).ToString() );
						return;
					}

					if ( Lang13.Bool( T.mutations.Contains( 8 ) ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You are unable to locate any blood.</span>" );
						return;
					}
					amount = this.reagents.maximum_volume - this.reagents.total_volume;
					B = ((Mob_Living_Carbon)T).take_blood( null, amount );

					if ( Lang13.Bool( B ) ) {
						((Reagents)this.reagents).add_reagent( "blood", amount, B.data );
						((Ent_Static)user).visible_message( "<span class='notice'>" + user + " takes a blood sample from " + target + ".</span>", "<span class='notice'>You take a blood sample from " + target + ".</span>" );
					} else {
						((Ent_Static)user).visible_message( "<span class='warning'>" + user + " inserts the syringe into " + target + ", draws back the plunger and gets... nothing?</span>", "<span class='warning'>You insert the syringe into " + target + ", draw back the plunger and get... nothing?</span>" );
					}
				}
			} else if ( target is Obj ) {
				
				if ( !Lang13.Bool( ((Ent_Static)target).is_open_container() ) && !( target is Obj_Structure_ReagentDispensers ) && !( target is Obj_Item_SlimeExtract ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You cannot directly remove reagents from this object." );
					return;
				}
				tx_amount = 0;

				if ( target is Obj_Item_Weapon_ReagentContainers || target is Obj_Structure_ReagentDispensers ) {
					tx_amount = GlobalFuncs.transfer_sub( target, this, this.amount_per_transfer_from_this, user );
				} else {
					tx_amount = ((Reagents)target.reagents).trans_to( this, this.amount_per_transfer_from_this );
				}

				if ( Convert.ToDouble( tx_amount ) > 0 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You fill " ).the( this ).item().str( " with " ).item( tx_amount ).str( " units of the solution.</span>" ).ToString() );
				} else if ( tx_amount == 0 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( target ).item().str( " is empty.</span>" ).ToString() );
				}
			}

			if ( this.is_full() ) {
				this.mode = 1;
				this.update_icon();
			}
			return;
		}

		// Function from file: syringes.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			double rounded_vol = 0;
			string injoverlay = null;
			Image filling = null;

			
			if ( this.mode == 2 ) {
				this.icon_state = "broken";
				this.overlays.len = 0;
				return null;
			}
			rounded_vol = Num13.Round( this.reagents.total_volume ??0, 5 );
			this.overlays.len = 0;

			if ( this.loc is Mob ) {
				
				switch ((int)( this.mode )) {
					case 0:
						injoverlay = "draw";
						break;
					case 1:
						injoverlay = "inject";
						break;
				}
				this.overlays.Add( injoverlay );
			}
			this.icon_state = "" + rounded_vol;
			this.item_state = "syringe_" + rounded_vol;

			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				filling = new Image( "icons/obj/reagentfillings.dmi", this, "syringe10" );
				filling.icon_state = "syringe" + rounded_vol;
				filling.icon += GlobalFuncs.mix_color_from_reagents( this.reagents.reagent_list );
				this.overlays.Add( filling );
			}
			return null;
		}

		// Function from file: syringes.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			
			if ( flag == false ) {
				return false;
			}

			if ( !Lang13.Bool( A.reagents ) ) {
				return false;
			}

			if ( this.mode == 2 ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is broken!</span>" ).ToString() );
				return false;
			}

			if ( user.a_intent == "hurt" && A is Mob ) {
				
				if ( Lang13.Bool( user.mutations.Contains( 5 ) ) && Rand13.PercentChance( 50 ) ) {
					A = user;
				}

				if ( A != user && !this.can_stab ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You can't grasp " ).the( this ).item().str( " properly for stabbing!</span>" ).ToString() );
					return false;
				}
				this.syringestab( A, user );
				return false;
			}

			if ( this.mode == 0 ) {
				this.handle_draw( A, user );
			} else if ( this.mode == 1 ) {
				this.handle_inject( A, user );
			}
			return false;
		}

		// Function from file: syringes.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: syringes.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			this.update_icon();
			return null;
		}

		// Function from file: syringes.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			switch ((int)( this.mode )) {
				case 0:
					this.mode = 1;
					break;
				case 1:
					this.mode = 0;
					break;
				case 2:
					return null;
					break;
			}
			this.update_icon();
			return null;
		}

		// Function from file: syringes.dm
		public override dynamic dropped( dynamic user = null ) {
			base.dropped( (object)(user) );
			this.update_icon();
			return null;
		}

		// Function from file: syringes.dm
		public override bool pickup( Mob user = null ) {
			base.pickup( user );
			this.update_icon();
			return false;
		}

		// Function from file: syringes.dm
		public override void on_reagent_change(  ) {
			this.update_icon();
			return;
		}

		// Function from file: syringes.dm
		public override dynamic suicide_act( Mob_Living_Carbon_Human user = null ) {
			GlobalFuncs.to_chat( Map13.FetchViewers( null, user ), new Txt( "<span class='danger'>" ).item( user ).str( " appears to be injecting an air bubble using a " ).item( this.name ).str( "! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
			return 8;
		}

	}

}