// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Syringe : Obj_Item_Weapon_ReagentContainers {

		public bool mode = false;
		public bool busy = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "syringe_0";
			this.possible_transfer_amounts = new ByTable();
			this.volume = 15;
			this.materials = new ByTable().Set( "$metal", 10 ).Set( "$glass", 20 );
			this.icon = "icons/obj/syringe.dmi";
			this.icon_state = "0";
		}

		// Function from file: syringes.dm
		public Obj_Item_Weapon_ReagentContainers_Syringe ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.list_reagents != null ) {
				this.mode = true;
				this.update_icon();
			}
			return;
		}

		// Function from file: syringes.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			int rounded_vol = 0;
			string injoverlay = null;
			Image filling = null;

			rounded_vol = Num13.MaxInt( 0, Num13.MinInt( ((int)( Num13.Round( this.reagents.total_volume ??0, 5 ) )), 15 ) );
			this.overlays.Cut();

			if ( this.loc is Mob ) {
				
				switch ((bool)( this.mode )) {
					case false:
						injoverlay = "draw";
						break;
					case true:
						injoverlay = "inject";
						break;
				}
				this.overlays.Add( injoverlay );
			}
			this.icon_state = "" + rounded_vol;
			this.item_state = "syringe_" + rounded_vol;

			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				filling = new Image( "icons/obj/reagentfillings.dmi", this, "syringe10" );
				filling.icon_state = "syringe" + rounded_vol;
				filling.color = GlobalFuncs.mix_color_from_reagents( this.reagents.reagent_list );
				this.overlays.Add( filling );
			}
			return false;
		}

		// Function from file: syringes.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic M = null;
			dynamic H = null;
			dynamic amount = null;
			dynamic T = null;
			dynamic B = null;
			dynamic H2 = null;
			dynamic trans = null;
			ByTable rinject = null;
			Reagent R = null;
			string contained = null;
			dynamic M2 = null;
			double? fraction = null;
			ByTable rinject2 = null;
			Reagent R2 = null;
			string contained2 = null;
			dynamic M3 = null;
			double? fraction2 = null;
			Reagent_Blood B2 = null;
			Reagent_Blood d = null;
			dynamic C = null;

			
			if ( this.busy ) {
				return false;
			}

			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( !Lang13.Bool( target.reagents ) ) {
				return false;
			}

			if ( target is Mob_Living ) {
				M = target;

				if ( !((Mob_Living)M).can_inject( user, true ) ) {
					return false;
				}
			}

			switch ((bool)( this.mode )) {
				case false:
					
					if ( ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.reagents.maximum_volume ) ) {
						user.WriteMsg( "<span class='notice'>The syringe is full.</span>" );
						return false;
					}

					if ( target is Mob ) {
						
						if ( target is Mob_Living_Carbon_Human ) {
							H = target;

							if ( Lang13.Bool( ((dynamic)( H.dna.species.specflags != null && !( H.dna.species.exotic_blood != null ) )).Contains( 1024 ) ) ) {
								user.WriteMsg( "<span class='warning'>You are unable to locate any blood!</span>" );
								return false;
							}
						}

						if ( Lang13.Bool( this.reagents.has_reagent( "blood" ) ) ) {
							user.WriteMsg( "<span class='warning'>There is already a blood sample in this syringe!</span>" );
							return false;
						}

						if ( target is Mob_Living_Carbon ) {
							amount = this.reagents.maximum_volume - this.reagents.total_volume;
							T = target;

							if ( !Lang13.Bool( T.has_dna() ) || Lang13.Bool( T.disabilities & 128 ) ) {
								user.WriteMsg( "<span class='warning'>You are unable to locate any blood!</span>" );
								return false;
							}

							if ( target != user ) {
								((Ent_Static)target).visible_message( "<span class='danger'>" + user + " is trying to take a blood sample from " + target + "!</span>", "<span class='userdanger'>" + user + " is trying to take a blood sample from " + target + "!</span>" );
								this.busy = true;

								if ( !GlobalFuncs.do_mob( user, target ) ) {
									this.busy = false;
									return false;
								}
							}
							this.busy = false;
							B = null;
							B = ((Mob_Living_Carbon)T).take_blood( this, amount );

							if ( !Lang13.Bool( B ) && target is Mob_Living_Carbon_Human ) {
								H2 = target;

								if ( H2.dna.species.exotic_blood != null && Lang13.Bool( H2.reagents.total_volume ) ) {
									((Reagents)target.reagents).trans_to( this, amount );
								} else {
									user.WriteMsg( "<span class='warning'>You are unable to locate any blood!</span>" );
									return false;
								}
							}

							if ( Lang13.Bool( B ) ) {
								this.reagents.reagent_list.Add( B );
								this.reagents.update_total();
								this.on_reagent_change();
								this.reagents.handle_reactions();
							}
							((Ent_Static)user).visible_message( "" + user + " takes a blood sample from " + target + "." );
						}
					} else {
						
						if ( !Lang13.Bool( target.reagents.total_volume ) ) {
							user.WriteMsg( "<span class='warning'>" + target + " is empty!</span>" );
							return false;
						}

						if ( !Lang13.Bool( ((Ent_Static)target).is_open_container() ) && !( target is Obj_Structure_ReagentDispensers ) && !( target is Obj_Item_SlimeExtract ) ) {
							user.WriteMsg( "<span class='warning'>You cannot directly remove reagents from " + target + "!</span>" );
							return false;
						}
						trans = ((Reagents)target.reagents).trans_to( this, this.amount_per_transfer_from_this );
						user.WriteMsg( "<span class='notice'>You fill " + this + " with " + trans + " units of the solution.</span>" );
					}

					if ( ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.reagents.maximum_volume ) ) {
						this.mode = !this.mode;
						this.update_icon();
					}
					break;
				case true:
					
					if ( !Lang13.Bool( this.reagents.total_volume ) ) {
						user.WriteMsg( "<span class='notice'>" + this + " is empty.</span>" );
						return false;
					}

					if ( !Lang13.Bool( ((Ent_Static)target).is_open_container() ) && !( target is Mob ) && !( target is Obj_Item_Weapon_ReagentContainers_Food ) && !( target is Obj_Item_SlimeExtract ) && !( target is Obj_Item_Clothing_Mask_Cigarette ) && !( target is Obj_Item_Weapon_Storage_Fancy_Cigarettes ) ) {
						user.WriteMsg( "<span class='warning'>You cannot directly fill " + target + "!</span>" );
						return false;
					}

					if ( ( target.reagents.total_volume ??0) >= Convert.ToDouble( target.reagents.maximum_volume ) ) {
						user.WriteMsg( "<span class='notice'>" + target + " is full.</span>" );
						return false;
					}

					if ( target is Mob && target != user ) {
						((Ent_Static)target).visible_message( "<span class='danger'>" + user + " is trying to inject " + target + "!</span>", "<span class='userdanger'>" + user + " is trying to inject " + target + "!</span>" );

						if ( !GlobalFuncs.do_mob( user, target ) ) {
							return false;
						}

						if ( !Lang13.Bool( this.reagents.total_volume ) ) {
							return false;
						}

						if ( ( target.reagents.total_volume ??0) >= Convert.ToDouble( target.reagents.maximum_volume ) ) {
							return false;
						}
						((Ent_Static)target).visible_message( "<span class='danger'>" + user + " injects " + target + " with the syringe!", "<span class='userdanger'>" + user + " injects " + target + " with the syringe!" );
						rinject = new ByTable();

						foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
							R = _a;
							
							rinject.Add( R.name );
						}
						contained = GlobalFuncs.english_list( rinject );
						M2 = target;
						GlobalFuncs.add_logs( user, M2, "injected", this, "which had " + contained );
						fraction = Num13.MinInt( ((int)( ( this.amount_per_transfer_from_this ??0) / ( this.reagents.total_volume ??0) )), 1 );
						this.reagents.reaction( target, GlobalVars.INJECT, fraction );
					}

					if ( target is Mob && target == user ) {
						rinject2 = new ByTable();

						foreach (dynamic _b in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
							R2 = _b;
							
							rinject2.Add( R2.name );
						}
						contained2 = GlobalFuncs.english_list( rinject2 );
						M3 = target;
						GlobalFuncs.log_attack( "<font color='red'>" + user.name + " (" + user.ckey + ") injected " + M3.name + " (" + M3.ckey + ") with " + this.name + ", which had " + contained2 + " (INTENT: " + String13.ToUpper( user.a_intent ) + ")</font>" );
						M3.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Injected themselves (" + contained2 + ") with " + this.name + ".</font>";
						fraction2 = Num13.MinInt( ((int)( ( this.amount_per_transfer_from_this ??0) / ( this.reagents.total_volume ??0) )), 1 );
						this.reagents.reaction( target, GlobalVars.INJECT, fraction2 );
					}
					Task13.Schedule( 5, (Task13.Closure)(() => {
						B2 = null;

						foreach (dynamic _c in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent_Blood) )) {
							d = _c;
							
							B2 = d;
							break;
						}

						if ( B2 != null && target is Mob_Living_Carbon ) {
							C = target;
							((Mob_Living_Carbon)C).inject_blood( this, 5 );
						} else {
							this.reagents.trans_to( target, this.amount_per_transfer_from_this );
						}
						user.WriteMsg( "<span class='notice'>You inject " + this.amount_per_transfer_from_this + " units of the solution. The syringe now contains " + this.reagents.total_volume + " units.</span>" );

						if ( ( this.reagents.total_volume ??0) <= 0 && this.mode ) {
							this.mode = false;
							this.update_icon();
						}
						return;
					}));
					break;
			}
			return false;
		}

		// Function from file: syringes.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			return null;
		}

		// Function from file: syringes.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand();
		}

		// Function from file: syringes.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			base.attack_hand( (object)(a), b, c );
			this.update_icon();
			return null;
		}

		// Function from file: syringes.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.mode = !this.mode;
			this.update_icon();
			return null;
		}

		// Function from file: syringes.dm
		public override bool dropped( dynamic user = null ) {
			base.dropped( (object)(user) );
			this.update_icon();
			return false;
		}

		// Function from file: syringes.dm
		public override bool pickup( dynamic user = null ) {
			base.pickup( (object)(user) );
			this.update_icon();
			return false;
		}

		// Function from file: syringes.dm
		public override void on_reagent_change(  ) {
			this.update_icon();
			return;
		}

	}

}