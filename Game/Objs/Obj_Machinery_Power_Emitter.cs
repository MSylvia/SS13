// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Emitter : Obj_Machinery_Power {

		public bool? active = false;
		public bool v_powered = false;
		public int fire_delay = 100;
		public int last_shot = 0;
		public int shot_number = 0;
		public bool locked = false;
		public int frequency = 0;
		public dynamic id_tag = null;
		public RadioFrequency radio_connection = null;
		public Obj_Effect_Beam_Emitter beam = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 11 });
			this.idle_power_usage = 10;
			this.active_power_usage = 300;
			this.machine_flags = 217;
			this.icon = "icons/obj/singularity.dmi";
			this.icon_state = "emitter";
		}

		public Obj_Machinery_Power_Emitter ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: emitter.dm
		public override bool clone( dynamic O = null ) {
			this.id_tag = O.id_tag;
			this.set_frequency( Convert.ToInt32( O.id_tag ) );
			return false;
		}

		// Function from file: emitter.dm
		public override bool canClone( dynamic O = null ) {
			return O is Obj_Machinery_Power_Emitter;
		}

		// Function from file: emitter.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.emagged != 0 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The lock appears to be broken.</span>" );
					return _default;
				}

				if ( this.allowed( b ) ) {
					
					if ( this.active == true ) {
						this.locked = !this.locked;
						GlobalFuncs.to_chat( b, "<span class='notice'>The controls are now " + ( this.locked ? "locked" : "unlocked" ) + ".</span>" );
					} else {
						this.locked = false;
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>The controls can only be locked when " ).the( this ).item().str( " is online</span>" ).ToString() );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
				return _default;
			}
			return _default;
		}

		// Function from file: emitter.dm
		public override int weldToFloor( dynamic WT = null, dynamic user = null ) {
			
			if ( base.weldToFloor( (object)(WT), (object)(user) ) == 1 ) {
				
				dynamic _a = this.state; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					this.disconnect_from_network();
				} else if ( _a==2 ) {
					this.connect_to_network();
				}
				return 1;
			}
			return -1;
		}

		// Function from file: emitter.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( this.active == true ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>Turn off " ).the( this ).item().str( " first.</span>" ).ToString() );
				return 0;
			}
			return base.wrenchAnchor( (object)(user) );
		}

		// Function from file: emitter.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.locked = false;
				this.emagged = 1;
				((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " shorts out " ).the( this ).item().str( "'s lock.</span>" ).ToString(), new Txt( "<span class='warning'>You short out " ).the( this ).item().str( "'s lock.</span>" ).ToString() );
				return 0;
			}
			return 0;
		}

		// Function from file: emitter.dm
		public override dynamic process(  ) {
			Effect_Effect_System_SparkSpread Sparks = null;

			
			if ( !Lang13.Bool( this.anchored ) ) {
				this.active = false;
				this.update_icon();
				this.update_beam();
				return null;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( this.state != 2 || !Lang13.Bool( this.powernet ) && Lang13.Bool( this.active_power_usage ) ) {
				this.active = false;
				this.update_icon();
				this.update_beam();
				return null;
			}

			if ( this.last_shot + this.fire_delay <= Game13.time && this.active == true ) {
				
				if ( !Lang13.Bool( this.active_power_usage ) || Lang13.Bool( this.avail(  ) ) ) {
					this.add_load( this.active_power_usage );

					if ( !this.v_powered ) {
						this.v_powered = true;
						this.update_icon();
						this.update_beam();
						this.investigation_log( "singulo", "regained power and turned <font color='green'>on</font>" );
					}
				} else {
					
					if ( this.v_powered ) {
						this.v_powered = false;
						this.update_beam();
						this.update_icon();
						this.investigation_log( "singulo", "lost power and turned <font color='red'>off</font>" );
					}
					return null;
				}
				this.last_shot = Game13.time;

				if ( this.shot_number < 3 ) {
					this.fire_delay = 2;
					this.shot_number++;
				} else {
					this.fire_delay = Rand13.Int( 20, 100 );
					this.shot_number = 0;
				}

				if ( Rand13.PercentChance( 35 ) ) {
					Sparks = new Effect_Effect_System_SparkSpread();
					Sparks.set_up( 5, 1, this );
					Sparks.start();
				}
			}
			return null;
		}

		// Function from file: emitter.dm
		public override dynamic emp_act( int severity = 0 ) {
			return 1;
		}

		// Function from file: emitter.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( a.stat ) && !GlobalFuncs.isAdminGhost( a ) ) {
				return null;
			}
			this.add_fingerprint( a );

			if ( this.state == 2 ) {
				
				if ( !Lang13.Bool( this.get_powernet() ) ) {
					GlobalFuncs.to_chat( a, new Txt( "<span class='warning'>" ).The( this ).item().str( " isn't connected to a wire.</span>" ).ToString() );
					return 1;
				}

				if ( !this.locked ) {
					
					if ( this.active == true ) {
						this.turn_off();
						((Ent_Static)a).visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " turns " ).the( this ).item().str( " off." ).ToString(), new Txt( "<span class='notice'>You turn " ).the( this ).item().str( " off." ).ToString() );
						GlobalFuncs.message_admins( new Txt( "Emitter turned off by " ).item( GlobalFuncs.key_name( a, a.client ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( a ).str( "'>?</A>) in (" ).item( this.x ).str( "," ).item( this.y ).str( "," ).item( this.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
						GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Emitter turned off by " + a.ckey + "(" + a + ") in (" + this.x + "," + this.y + "," + this.z + ")" ) ) );
						this.investigation_log( "singulo", "turned <font color='red'>off</font> by " + a.key );
					} else {
						this.turn_on();
						((Ent_Static)a).visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " turns " ).the( this ).item().str( " on." ).ToString(), new Txt( "<span class='notice'>You turn " ).the( this ).item().str( " on." ).ToString() );
						GlobalFuncs.message_admins( new Txt( "Emitter turned on by " ).item( GlobalFuncs.key_name( a, a.client ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( a ).str( "'>?</A>) in (" ).item( this.x ).str( "," ).item( this.y ).str( "," ).item( this.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
						GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Emitter turned on by " + a.ckey + "(" + a + ") in (" + this.x + "," + this.y + "," + this.z + ")" ) ) );
						this.investigation_log( "singulo", "turned <font color='green'>on</font> by " + a.key );
					}
				} else {
					GlobalFuncs.to_chat( a, new Txt( "<span class='warning'>" ).The( this ).item().str( "'s controls are locked!</span>" ).ToString() );
				}
			} else {
				GlobalFuncs.to_chat( a, new Txt( "<span class='warning'>" ).The( this ).item().str( " needs to be firmly secured to the floor first.</span>" ).ToString() );
				return 1;
			}
			return null;
		}

		// Function from file: emitter.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.v_powered && Lang13.Bool( this.get_powernet() ) && Lang13.Bool( this.avail(  ) ) && this.active == true ) {
				this.icon_state = "emitter_+a";
			} else {
				this.icon_state = "emitter";
			}
			return null;
		}

		// Function from file: emitter.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalFuncs.qdel( this.beam );
			GlobalFuncs.message_admins( "Emitter deleted at (" + this.x + "," + this.y + "," + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Emitter deleted at (" + this.x + "," + this.y + "," + this.z + ")" ) ) );
			this.investigation_log( "singulo", "<font color='red'>deleted</font> at (" + this.x + "," + this.y + "," + this.z + ")" );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: emitter.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			bool? on = null;
			string statestr = null;

			
			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)signal).data["command"] ) ) {
				
				dynamic _a = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
				if ( _a=="on" ) {
					on = true;
				} else if ( _a=="off" ) {
					on = false;
				} else if ( _a=="set" ) {
					on = Convert.ToDouble( ((dynamic)signal).data["state"] ) > 0;
				} else if ( _a=="toggle" ) {
					on = !( this.active == true );
				}

				if ( !( on == null ) && Lang13.Bool( this.anchored ) && this.state == 2 && on != this.active ) {
					this.active = on;
					statestr = ( on == true ? "on" : "off" );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Emitter turned " + statestr + " by radio signal (" + ((dynamic)signal).data["command"] + " @ " + this.frequency + ") in (" + this.x + "," + this.y + "," + this.z + ")" ) ) );
					this.investigation_log( "singulo", "turned <font color='orange'>" + statestr + "</font> by radio signal (" + ((dynamic)signal).data["command"] + " @ " + this.frequency + ")" );
					this.update_icon();
					this.update_beam();
				}
			}
			return false;
		}

		// Function from file: emitter.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 1439 ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag", "set_id" ) ).str( "</a></li>\n	</ul>\n	" ).ToString();
		}

		// Function from file: emitter.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );

			if ( this.state == 2 && Lang13.Bool( this.anchored ) ) {
				this.connect_to_network();
				this.update_icon();
				this.update_beam();
			}

			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: emitter.dm
		public void turn_off(  ) {
			this.active = false;
			this.update_icon();
			this.update_beam();
			return;
		}

		// Function from file: emitter.dm
		public void turn_on(  ) {
			this.active = true;
			this.shot_number = 0;
			this.fire_delay = 100;
			this.update_icon();
			this.update_beam();
			return;
		}

		// Function from file: emitter.dm
		public void update_beam(  ) {
			
			if ( this.active == true && this.v_powered ) {
				
				if ( !( this.beam != null ) ) {
					this.beam = new Obj_Effect_Beam_Emitter( this.loc );
					this.beam.dir = this.dir;
					this.beam.emit( this );
				}
			} else if ( this.beam != null ) {
				this.beam._re_emit = false;
				GlobalFuncs.qdel( this.beam );
				this.beam = null;
			}
			return;
		}

		// Function from file: emitter.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency != 0 ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

		// Function from file: emitter.dm
		[Verb]
		[VerbInfo( name: "Rotate (Counter-Clockwise)", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate_ccw(  ) {
			
			if ( Lang13.Bool( this.anchored ) || Lang13.Bool( Task13.User.stat ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>It is fastened to the floor!</span>" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return true;
		}

		// Function from file: emitter.dm
		[Verb]
		[VerbInfo( name: "Rotate (Clockwise)", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate_cw(  ) {
			
			if ( Lang13.Bool( this.anchored ) || Lang13.Bool( Task13.User.stat ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>It is fastened to the floor!</span>" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			return true;
		}

	}

}