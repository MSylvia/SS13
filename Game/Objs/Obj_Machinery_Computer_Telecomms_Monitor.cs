// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Telecomms_Monitor : Obj_Machinery_Computer_Telecomms {

		public bool screen = false;
		public ByTable machinelist = new ByTable();
		public Obj_Machinery_Telecomms SelectedMachine = null;
		public dynamic network = "NULL";
		public string temp = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/comm_monitor";
			this.icon_state = "comm_monitor";
		}

		public Obj_Machinery_Computer_Telecomms_Monitor ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: telemonitor.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/sparks4.ogg", 75, 1 );
				this.emagged = 1;
				GlobalFuncs.to_chat( user, "<span class='notice'>You you disable the security protocols</span>" );
				return 1;
			}
			return 0;
		}

		// Function from file: telemonitor.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: telemonitor.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Obj_Machinery_Telecomms T = null;
			Obj_Machinery_Telecomms T2 = null;
			dynamic newnet = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			this.add_fingerprint( Task13.User );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["viewmachine"] ) ) {
				this.screen = true;

				foreach (dynamic _a in Lang13.Enumerate( this.machinelist, typeof(Obj_Machinery_Telecomms) )) {
					T = _a;
					

					if ( T.id == href_list["viewmachine"] ) {
						this.SelectedMachine = T;
						break;
					}
				}
			}

			if ( Lang13.Bool( href_list["operation"] ) ) {
				
				dynamic _c = href_list["operation"]; // Was a switch-case, sorry for the mess.
				if ( _c=="release" ) {
					this.machinelist = new ByTable();
					this.screen = false;
				} else if ( _c=="mainmenu" ) {
					this.screen = false;
				} else if ( _c=="probe" ) {
					
					if ( this.machinelist.len > 0 ) {
						this.temp = "<font color = #D70B00>- FAILED: CANNOT PROBE WHEN BUFFER FULL -</font color>";
					} else {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, 25 ), typeof(Obj_Machinery_Telecomms) )) {
							T2 = _b;
							

							if ( T2.network == this.network ) {
								this.machinelist.Add( T2 );
							}
						}

						if ( !( this.machinelist.len != 0 ) ) {
							this.temp = "<font color = #D70B00>- FAILED: UNABLE TO LOCATE NETWORK ENTITIES IN [" + this.network + "] -</font color>";
						} else {
							this.temp = "<font color = #336699>- " + this.machinelist.len + " ENTITIES LOCATED & BUFFERED -</font color>";
						}
						this.screen = false;
					}
				}
			}

			if ( Lang13.Bool( href_list["network"] ) ) {
				newnet = Interface13.Input( Task13.User, "Which network do you want to view?", "Comm Monitor", this.network, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( newnet ) && false ) {
					
					if ( Lang13.Length( newnet ) > 15 ) {
						this.temp = "<font color = #D70B00>- FAILED: NETWORK TAG STRING TOO LENGHTLY -</font color>";
					} else {
						this.network = newnet;
						this.screen = false;
						this.machinelist = new ByTable();
						this.temp = "<font color = #336699>- NEW NETWORK TAG SET IN ADDRESS [" + this.network + "] -</font color>";
					}
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: telemonitor.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			Obj_Machinery_Telecomms T = null;
			Obj_Machinery_Telecomms T2 = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "<TITLE>Telecommunications Monitor</TITLE><center><b>Telecommunications Monitor</b></center>";

			switch ((bool)( this.screen )) {
				case 0:
					dat += new Txt( "<br>" ).item( this.temp ).str( "<br><br>\n				<br>Current Network: <a href='?src=" ).Ref( this ).str( ";network=1'>" ).item( this.network ).str( "</a><br>" ).ToString();

					if ( this.machinelist.len != 0 ) {
						dat += "<br>Detected Network Entities:<ul>";

						foreach (dynamic _a in Lang13.Enumerate( this.machinelist, typeof(Obj_Machinery_Telecomms) )) {
							T = _a;
							
							dat += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";viewmachine=" ).item( T.id ).str( "'>" ).Ref( T ).str( " " ).item( T.name ).str( "</a> (" ).item( T.id ).str( ")</li>" ).ToString();
						}
						dat += new Txt( "</ul>\n					<br><a href='?src=" ).Ref( this ).str( ";operation=release'>[Flush Buffer]</a>" ).ToString();
					} else {
						dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=probe'>[Probe Network]</a>" ).ToString();
					}
					break;
				case 1:
					dat += new Txt( "<br>" ).item( this.temp ).str( "<br>\n				<center><a href='?src=" ).Ref( this ).str( ";operation=mainmenu'>[Main Menu]</a></center>\n				<br>Current Network: " ).item( this.network ).str( "<br>\n				Selected Network Entity: " ).item( this.SelectedMachine.name ).str( " (" ).item( this.SelectedMachine.id ).str( ")<br>\n				Linked Entities: <ol>" ).ToString();

					foreach (dynamic _b in Lang13.Enumerate( this.SelectedMachine.links, typeof(Obj_Machinery_Telecomms) )) {
						T2 = _b;
						

						if ( !T2.v_hide ) {
							dat += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";viewmachine=" ).item( T2.id ).str( "'>" ).Ref( T2.id ).str( " " ).item( T2.name ).str( "</a> (" ).item( T2.id ).str( ")</li>" ).ToString();
						}
					}
					dat += "</ol>";
					break;
			}
			Interface13.Browse( a, dat, "window=comm_monitor;size=575x400" );
			GlobalFuncs.onclose( a, "server_control" );
			this.temp = "";
			return null;
		}

	}

}