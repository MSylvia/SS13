// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SortingMachine : Obj_Machinery {

		public Ent_Dynamic mover = null;
		public int input_dir = 4;
		public int output_dir = 8;
		public int filter_dir = 2;
		public dynamic max_items_moved = 100;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 134;
			this.idle_power_usage = 100;
			this.icon = "icons/obj/recycling.dmi";
			this.icon_state = "grinder-b1";
		}

		// Function from file: sortingmachinery.dm
		public Obj_Machinery_SortingMachine ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.mover = new Ent_Dynamic();
			return;
		}

		// Function from file: sortingmachinery.dm
		public virtual bool sort( Ent_Dynamic A = null ) {
			return Rand13.PercentChance( 50 );
		}

		// Function from file: sortingmachinery.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			int _default = 0;

			double? changingdir = null;
			dynamic newdir = null;
			ByTable dirlist = null;
			dynamic olddir = null;
			int conflictingdir = 0;

			_default = base.multitool_topic( user, href_list, (object)(O) );

			if ( _default != 0 ) {
				return _default;
			}

			if ( href_list.Contains( "changedir" ) ) {
				changingdir = String13.ParseNumber( href_list["changedir"] );
				changingdir = ( ( changingdir ??0) <= 1 ? 1 : ( ( changingdir ??0) >= 3 ? 3 : changingdir ) );
				newdir = Interface13.Input( "Select the new direction", "MinerX SortMaster 5000", "North", null, new ByTable(new object [] { "North", "South", "East", "West" }), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( newdir ) ) {
					return 1;
				}
				newdir = GlobalFuncs.text2dir( newdir );
				dirlist = new ByTable(new object [] { this.input_dir, this.output_dir, this.filter_dir });
				olddir = dirlist[changingdir];
				dirlist[changingdir] = -1;
				conflictingdir = dirlist.Find( newdir );

				if ( conflictingdir != 0 ) {
					dirlist[conflictingdir] = olddir;
				}
				dirlist[changingdir] = newdir;
				this.input_dir = Convert.ToInt32( dirlist[1] );
				this.output_dir = Convert.ToInt32( dirlist[2] );
				this.filter_dir = Convert.ToInt32( dirlist[3] );
				return 1;
			}
			return _default;
		}

		// Function from file: sortingmachinery.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n		<ul>\n			<li><b>Sorting directions:</b></li>\n			<li><b>Input: </b><a href='?src=" ).Ref( this ).str( ";changedir=1'>" ).item( GlobalFuncs.capitalize( GlobalFuncs.dir2text( this.input_dir ) ) ).str( "</a></li>\n			<li><b>Output: </b><a href='?src=" ).Ref( this ).str( ";changedir=2'>" ).item( GlobalFuncs.capitalize( GlobalFuncs.dir2text( this.output_dir ) ) ).str( "</a></li>\n			<li><b>Selected: </b><a href='?src=" ).Ref( this ).str( ";changedir=3'>" ).item( GlobalFuncs.capitalize( GlobalFuncs.dir2text( this.filter_dir ) ) ).str( "</a></li>\n		</ul>\n	" ).ToString();
		}

		// Function from file: sortingmachinery.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}
			this.add_fingerprint( Task13.User );
			return _default;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.interact( a );
			return null;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.interact( user );
			return null;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic process(  ) {
			Tile in_T = null;
			Tile out_T = null;
			Tile filter_T = null;
			ByTable affecting = null;
			int items_moved = 0;
			Ent_Dynamic A = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			in_T = Map13.GetStep( this, this.input_dir );
			out_T = Map13.GetStep( this, this.output_dir );
			filter_T = Map13.GetStep( this, this.filter_dir );

			if ( !out_T.CanPass( this.mover, out_T ) || !out_T.Enter( this.mover ) || !filter_T.CanPass( this.mover, filter_T ) || !filter_T.Enter( this.mover ) ) {
				return null;
			}
			affecting = in_T.contents;
			items_moved = 0;

			foreach (dynamic _a in Lang13.Enumerate( affecting, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( Lang13.Bool( A.anchored ) ) {
					continue;
				}

				if ( this.sort( A ) ) {
					A.forceMove( filter_T );
				} else {
					A.forceMove( out_T );
				}
				items_moved++;

				if ( items_moved >= Convert.ToDouble( this.max_items_moved ) ) {
					break;
				}
			}
			return null;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts_MatterBin bin = null;
			Obj_Item_Weapon_StockParts_Capacitor C = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				bin = _a;
				
				T += bin.rating;
			}
			this.max_items_moved = Lang13.Initial( this, "max_items_moved" ) * ( T / 3 );
			T = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Capacitor) )) {
				C = _b;
				
				T += C.rating - 1;
			}
			this.idle_power_usage = Lang13.Initial( this, "idle_power_usage" ) - T * Convert.ToDouble( Lang13.Initial( this, "idle_power_usage" ) / 4 );
			return null;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			_default = base.Destroy( (object)(brokenup) );
			GlobalFuncs.qdel( this.mover );
			this.mover = null;
			return _default;
		}

	}

}