// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics : Obj_Machinery {

		public bool nodealert = false;
		public bool update_icon_ready = false;
		public int starting_volume = 200;
		public double? initialize_directions = 0;
		public bool can_be_coloured = false;
		public Image centre_overlay = null;
		public dynamic log = null;
		public dynamic node_con = null;
		public dynamic node_ex = null;
		public int pipe_flags = 0;
		public Type mirror = null;
		public dynamic default_colour = null;
		public Image pipe_image = null;
		public int? piping_layer = 3;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.power_channel = 3;
			this.internal_gravity = true;
		}

		// Function from file: atmospherics.dm
		public Obj_Machinery_Atmospherics ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.machines.Remove( this );
			GlobalVars.atmos_machines.Or( this );
			return;
		}

		// Function from file: atmospherics.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			Obj_Machinery_Atmospherics target_move = null;

			
			if ( !( ( ((int)( direction ??0 )) & ((int)( this.initialize_directions ??0 )) ) != 0 ) ) {
				return null;
			}
			target_move = this.findConnecting( direction, Lang13.IntNullable( ((dynamic)M).ventcrawl_layer ) );

			if ( target_move != null ) {
				
				if ( GlobalFuncs.is_type_in_list( target_move, GlobalVars.ventcrawl_machinery ) && target_move.can_crawl_through() ) {
					((Mob_Living)M).remove_ventcrawl();
					M.forceMove( target_move.loc );
					M.visible_message( "You hear something squeezing through the ducts.", "You climb out the ventilation system." );
				} else if ( target_move.can_crawl_through() ) {
					
					if ( target_move.return_network( target_move ) != this.return_network( this ) ) {
						((Mob_Living)M).remove_ventcrawl();
						((Mob_Living)M).add_ventcrawl( target_move );
					}
					M.forceMove( target_move );
					M.client.eye = target_move;

					if ( Game13.time - Convert.ToDouble( ((dynamic)M).last_played_vent ) > 30 ) {
						((dynamic)M).last_played_vent = Game13.time;
						GlobalFuncs.playsound( this, "sound/machines/ventcrawl.ogg", 50, 1, -3 );
					}
				}
			} else if ( ( ((int)( direction ??0 )) & ((int)( this.initialize_directions ??0 )) ) != 0 || GlobalFuncs.is_type_in_list( this, GlobalVars.ventcrawl_machinery ) && this.can_crawl_through() ) {
				((Mob_Living)M).remove_ventcrawl();
				M.forceMove( this.loc );
				M.visible_message( "You hear something squeezing through the pipes.", "You climb out the ventilation system." );
			}
			M.canmove = false;
			Task13.Schedule( 1, (Task13.Closure)(() => {
				M.canmove = true;
				return;
			}));
			return null;
		}

		// Function from file: atmospherics.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			Ent_Dynamic L = null;

			
			if ( Obj is Mob_Living ) {
				L = Obj;
				((dynamic)L).ventcrawl_layer = this.piping_layer;
			}
			return null;
		}

		// Function from file: atmospherics.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic pipe = null;
			Ent_Static T = null;
			GasMixture int_air = null;
			GasMixture env_air = null;
			Obj_Machinery_Atmospherics P = null;
			GasMixture transit = null;
			dynamic pipe_parent = null;

			
			if ( a is Obj_Item_Pipe ) {
				pipe = a;

				if ( Lang13.Bool( b.drop_item( pipe ) ) ) {
					pipe.setPipingLayer( this.piping_layer );
					return 1;
				}
			}

			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			if ( ( ( this.machine_flags ??0) & 8 ) != 0 ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			T = this.loc;

			if ( this.level == 1 && T is Tile && Lang13.Bool( ((dynamic)T).intact ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You must remove the plating first.</span>" );
				return 1;
			}
			int_air = this.return_air();
			env_air = this.loc.return_air();
			this.add_fingerprint( b );

			if ( Convert.ToDouble( int_air.return_pressure() - env_air.return_pressure() ) > 202.41 ) {
				
				if ( a is Obj_Item_Weapon_Wrench_Socket && this is Obj_Machinery_Atmospherics_Pipe ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You begin to open the pressure release valve on the pipe...</span>" );

					if ( GlobalFuncs.do_after( b, this, 50 ) ) {
						
						if ( !( this.loc != null ) ) {
							return null;
						}
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/hiss.ogg", 50, 1 );
						((Ent_Static)b).visible_message( new Txt().item( b ).str( " vents " ).the( this ).item().str( "." ).ToString(), new Txt( "You have vented " ).the( this ).item().str( "." ).ToString(), "You hear a ratchet." );
						P = this;
						transit = new GasMixture();
						transit.add( int_air );
						pipe_parent = ((dynamic)P).parent;

						if ( Lang13.Bool( pipe_parent ) ) {
							transit.divide( pipe_parent.members.len );
							env_air.add( transit );
						}
						GlobalFuncs.qdel( transit );
						transit = null;
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You cannot unwrench this " + this + ", it's too exerted due to internal pressure.</span>" );
					return 1;
				}
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
			GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You begin to unfasten " ).the( this ).item().str( "...</span>" ).ToString() );

			if ( GlobalFuncs.do_after( b, this, 40 ) ) {
				((Ent_Static)b).visible_message( new Txt().item( b ).str( " unfastens " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You have unfastened " ).the( this ).item().str( ".</span>" ).ToString(), "You hear a ratchet." );
				GlobalFuncs.getFromPool( typeof(Obj_Item_Pipe), this.loc, null, null, this );
				GlobalFuncs.qdel( this );
			}
			return 1;
		}

		// Function from file: atmospherics.dm
		public override dynamic cultify(  ) {
			
			if ( this.invisibility != 100 ) {
				this.invisibility = 100;
			}
			return null;
		}

		// Function from file: atmospherics.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			
			if ( this.timestopped ) {
				return 0;
			}
			_default = this.build_network();
			return _default;
		}

		// Function from file: atmospherics.dm
		public virtual bool can_crawl_through(  ) {
			return true;
		}

		// Function from file: atmospherics.dm
		public virtual bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			GlobalFuncs.error( "" + this + " does not define a buildFrom!" );
			return GlobalVars.FALSE;
		}

		// Function from file: atmospherics.dm
		public virtual dynamic disconnect( Obj_Machinery_Atmospherics reference = null ) {
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual ByTable return_network_air( PipeNetwork reference = null ) {
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual bool reassign_network( Game_Data old_network = null, PipeNetwork new_network = null ) {
			return false;
		}

		// Function from file: atmospherics.dm
		public virtual void unassign_network( PipeNetwork reference = null ) {
			return;
		}

		// Function from file: atmospherics.dm
		public virtual dynamic return_network( Obj reference = null ) {
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual dynamic build_network(  ) {
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual dynamic network_expand( PipeNetwork new_network = null, Obj_Machinery_Atmospherics reference = null ) {
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual void findAllConnections( double? connect_dirs = null ) {
			int node_id = 0;
			dynamic direction = null;
			Obj_Machinery_Atmospherics found = null;
			bool node_type = false;
			string node_var = null;

			node_id = 0;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _b;
				

				if ( ( ((int)( connect_dirs ??0 )) & Convert.ToInt32( direction ) ) != 0 ) {
					node_id++;
					found = null;
					node_type = this.getNodeType( node_id );

					switch ((bool)( node_type )) {
						case false:
							found = this.findConnecting( direction );
							break;
						case true:
							found = this.findConnectingHE( direction );
							break;
						default:
							GlobalFuncs.error( "UNKNOWN RESPONSE FROM " + this.type + "/getNodeType(" + node_id + "): " + node_type );
							return;
							break;
					}

					if ( !( found != null ) ) {
						continue;
					}
					node_var = "node" + node_id;

					if ( !this.vars.Contains( node_var ) ) {
						Game13.log.WriteMsg( "## TESTING: " + ( "" + node_var + " not in vars." ) );
						return;
					}

					if ( !Lang13.Bool( this.vars[node_var] ) ) {
						this.vars[node_var] = found;
					}
				}
			}
			return;
		}

		// Function from file: atmospherics.dm
		public virtual bool getNodeType( dynamic node_id = null ) {
			return false;
		}

		// Function from file: atmospherics.dm
		public virtual bool isConnectable( Obj_Machinery_Atmospherics target = null, dynamic direction = null, int? given_layer = null ) {
			return target.piping_layer == given_layer || ( target.pipe_flags & 2 ) != 0;
		}

		// Function from file: atmospherics.dm
		public Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging findConnectingHE( dynamic direction = null, int? given_layer = null ) {
			given_layer = given_layer ?? this.piping_layer;

			Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging target = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this, Convert.ToInt32( direction ) ), typeof(Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging) )) {
				target = _a;
				

				if ( ( ((int)( target.initialize_directions_he ??0 )) & Map13.GetDistance( target, this ) ) != 0 ) {
					
					if ( this.isConnectable( target, direction, given_layer ) && target.isConnectable( this, Num13.Rotate( direction, 180 ), given_layer ) ) {
						return target;
					}
				}
			}
			return null;
		}

		// Function from file: atmospherics.dm
		public Obj_Machinery_Atmospherics findConnecting( dynamic direction = null, int? given_layer = null ) {
			given_layer = given_layer ?? this.piping_layer;

			Obj_Machinery_Atmospherics target = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this, Convert.ToInt32( direction ) ), typeof(Obj_Machinery_Atmospherics) )) {
				target = _a;
				

				if ( ( ((int)( target.initialize_directions ??0 )) & Map13.GetDistance( target, this ) ) != 0 ) {
					
					if ( this.isConnectable( target, direction, given_layer ) && target.isConnectable( this, Num13.Rotate( direction, 180 ), given_layer ) ) {
						return target;
					}
				}
			}
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual void setPipingLayer( int? new_layer = null ) {
			new_layer = new_layer ?? 3;

			this.piping_layer = new_layer;
			this.pixel_x = ( ( this.piping_layer ??0) - 3 ) * 5;
			this.pixel_y = ( ( this.piping_layer ??0) - 3 ) * -5;
			this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) + ( ( this.piping_layer ??0) - 3 ) * 0.05 );
			return;
		}

		// Function from file: atmospherics.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			ByTable missing_nodes = null;
			dynamic direction = null;
			Obj_Machinery_Atmospherics connected_node = null;
			int con_dir = 0;
			dynamic nodecon = null;
			ByTable centre_colour = null;
			ByTable other_colour = null;
			ByTable average_colour = null;
			dynamic missing_dir = null;
			dynamic nodeex = null;

			
			if ( !this.can_be_coloured && Lang13.Bool( this.color ) ) {
				this.default_colour = this.color;
				this.color = null;
			} else if ( this.can_be_coloured && Lang13.Bool( this.default_colour ) ) {
				this.color = this.default_colour;
				this.default_colour = null;
			}

			if ( !( GlobalVars.node_con.len != 0 ) || !( GlobalVars.node_ex.len != 0 ) ) {
				GlobalVars.node_con["" + GlobalVars.NORTH] = new Image( "icons/obj/pipes.dmi", "pipe_intact", null, null, 1 );
				GlobalVars.node_con["" + GlobalVars.SOUTH] = new Image( "icons/obj/pipes.dmi", "pipe_intact", null, null, 2 );
				GlobalVars.node_con["" + GlobalVars.EAST] = new Image( "icons/obj/pipes.dmi", "pipe_intact", null, null, 4 );
				GlobalVars.node_con["" + GlobalVars.WEST] = new Image( "icons/obj/pipes.dmi", "pipe_intact", null, null, 8 );
				GlobalVars.node_ex["" + GlobalVars.NORTH] = new Image( "icons/obj/pipes.dmi", "pipe_exposed", null, null, 1 );
				GlobalVars.node_ex["" + GlobalVars.SOUTH] = new Image( "icons/obj/pipes.dmi", "pipe_exposed", null, null, 2 );
				GlobalVars.node_ex["" + GlobalVars.EAST] = new Image( "icons/obj/pipes.dmi", "pipe_exposed", null, null, 4 );
				GlobalVars.node_ex["" + GlobalVars.WEST] = new Image( "icons/obj/pipes.dmi", "pipe_exposed", null, null, 8 );
			}
			this.alpha = ( this.invisibility != 0 ? 128 : 255 );

			if ( !this.update_icon_ready ) {
				this.update_icon_ready = true;
			} else {
				this.underlays.Cut();
			}
			missing_nodes = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				

				if ( Lang13.Bool( direction & this.initialize_directions ) ) {
					missing_nodes.Add( direction );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( target, typeof(Obj_Machinery_Atmospherics) )) {
				connected_node = _b;
				
				con_dir = Map13.GetDistance( this, connected_node );
				missing_nodes.Remove( con_dir );
				nodecon = GlobalVars.node_con["" + con_dir];

				if ( Lang13.Bool( nodecon ) ) {
					
					if ( Lang13.Bool( this.default_colour ) && Lang13.Bool( connected_node.default_colour ) && connected_node.default_colour != this.default_colour ) {
						centre_colour = GlobalFuncs.GetHexColors( this.default_colour );
						other_colour = GlobalFuncs.GetHexColors( connected_node.default_colour );
						average_colour = new ByTable(new object [] { ( centre_colour[1] + other_colour[1] ) / 2, ( centre_colour[2] + other_colour[2] ) / 2, ( centre_colour[3] + other_colour[3] ) / 2 });
						nodecon.color = String13.ColorCode( Convert.ToInt32( average_colour[1] ), Convert.ToInt32( average_colour[2] ), Convert.ToInt32( average_colour[3] ) );
					} else if ( Lang13.Bool( this.color ) ) {
						nodecon.color = null;
					} else if ( Lang13.Bool( connected_node.color ) ) {
						nodecon.color = connected_node.color;
					} else if ( Lang13.Bool( this.default_colour ) ) {
						nodecon.color = this.default_colour;
					} else if ( Lang13.Bool( connected_node.default_colour ) && connected_node.default_colour != "#B4B4B4" ) {
						nodecon.color = connected_node.default_colour;
					} else {
						nodecon.color = "#B4B4B4";
					}
					this.underlays.Add( nodecon );
				}

				if ( !Lang13.Bool( location ) && connected_node.update_icon_ready && !( connected_node is Obj_Machinery_Atmospherics_Pipe_Simple ) ) {
					connected_node.update_icon( 1 );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( missing_nodes )) {
				missing_dir = _c;
				
				nodeex = GlobalVars.node_ex["" + missing_dir];

				if ( !Lang13.Bool( this.color ) ) {
					nodeex.color = ( Lang13.Bool( this.default_colour ) ? this.default_colour : ((dynamic)( "#B4B4B4" )) );
				} else {
					nodeex.color = null;
				}
				this.underlays.Add( nodeex );
			}
			return null;
		}

		// Function from file: atmospherics.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Mob_Living M = null;
			Mob_Living M2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Mob_Living) )) {
				M = _a;
				
				M.remove_ventcrawl();
				M.forceMove( this.loc );
			}

			if ( this.pipe_image != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
					M2 = _b;
					

					if ( M2.client != null ) {
						M2.client.images.Remove( this.pipe_image );
						M2.pipes_shown.Remove( this.pipe_image );
					}
				}
				this.pipe_image = null;
			}
			GlobalVars.atmos_machines.Remove( this );
			this.centre_overlay = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}