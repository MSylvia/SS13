// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_WallmedFrame : Obj_Machinery {

		public bool on = true;
		public int build = 0;
		public Type boardtype = typeof(Obj_Item_Weapon_Circuitboard_Vendomat);
		public dynamic _circuitboard = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/vending.dmi";
			this.icon_state = "wallmed_frame0";
		}

		// Function from file: vending.dm
		public Obj_Machinery_WallmedFrame ( dynamic loc = null, int ndir = 0 ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.dir = ndir;
			this.pixel_x = ( ( this.dir & 3 ) != 0 ? 0 : ( this.dir == 4 ? 30 : -30 ) );
			this.pixel_y = ( ( this.dir & 3 ) != 0 ? ( this.dir == 1 ? 30 : -30 ) : 0 );
			return;
		}

		// Function from file: vending.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			Ent_Static user_loc = null;
			Ent_Static pack_loc = null;
			Ent_Static self_loc = null;
			Obj_Machinery_Vending_Wallmed1 newnanomed = null;
			Obj_Item_Emptyvendomatpack emptypack = null;

			
			if ( this.build == 3 ) {
				
				if ( O is Obj_Structure_Vendomatpack ) {
					
					if ( O is Obj_Structure_Vendomatpack_Medical ) {
						GlobalFuncs.to_chat( user, "<span class='notice'>You start refilling the vending machine with the recharge pack's materials.</span>" );
						user_loc = user.loc;
						pack_loc = O.loc;
						self_loc = this.loc;
						Task13.Sleep( 30 );

						if ( !Lang13.Bool( user ) || !( O != null ) || !( this != null ) ) {
							return false;
						}

						if ( user.loc == user_loc && O.loc == pack_loc && Lang13.Bool( this.anchored ) && self_loc == this.loc && !Lang13.Bool( user.stat ) && !Lang13.Bool( user.stunned ) && !( user.weakened != 0 ) && !( user.paralysis != 0 ) && !( user.lying == true ) ) {
							GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).icon( this ).str( " You finish refilling the vending machine.</span>" ).ToString() );
							GlobalFuncs.playsound( this, "sound/machines/hiss.ogg", 50, 0, 0 );
							newnanomed = new Obj_Machinery_Vending_Wallmed1( this.loc );
							newnanomed.name = "Emergency NanoMed";
							newnanomed.pixel_x = this.pixel_x;
							newnanomed.pixel_y = this.pixel_y;
							emptypack = new Obj_Item_Emptyvendomatpack( O.loc );
							emptypack.icon_state = O.icon_state;
							emptypack.overlays.Add( new Image( "icons/obj/vending_pack.dmi", "emptypack" ) );
							GlobalFuncs.qdel( O );
							this.contents.len = 0;
							GlobalFuncs.qdel( this );
						}
					} else {
						GlobalFuncs.to_chat( user, "<span class='warning'>This recharge pack isn't meant for this kind of vending machines.</span>" );
					}
				}
			}
			return false;
		}

		// Function from file: vending.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;
			dynamic C2 = null;
			dynamic C3 = null;

			
			switch ((int)( this.build )) {
				case 0:
					
					if ( a is Obj_Item_Weapon_Screwdriver ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "You begin removing screws from " ).the( this ).item().str( " backplate..." ).ToString() );

						if ( GlobalFuncs.do_after( b, this, 50 ) ) {
							GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You unscrew " ).the( this ).item().str( " from the wall.</span>" ).ToString() );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
							new Obj_Item_Mounted_Frame_Wallmed( GlobalFuncs.get_turf( this ) );
							GlobalFuncs.qdel( this );
						}
						return 1;
					}

					if ( a is Obj_Item_Weapon_Circuitboard ) {
						C = a;

						if ( !( C is Obj_Item_Weapon_Circuitboard_Vendomat ) ) {
							GlobalFuncs.to_chat( b, "<span class='warning'>You cannot install this type of board into a NanoMed frame.</span>" );
							return null;
						}
						GlobalFuncs.to_chat( Task13.User, new Txt( "You begin to insert " ).the( C ).item().str( " into " ).the( this ).item().str( "." ).ToString() );

						if ( GlobalFuncs.do_after( b, this, 10 ) ) {
							
							if ( Lang13.Bool( b.drop_item( C, this ) ) ) {
								GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You secure " ).the( C ).item().str( "!</span>" ).ToString() );
								this._circuitboard = C;
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
								this.build++;
								this.update_icon();
							}
						}
						return 1;
					}
					break;
				case 1:
					
					if ( a is Obj_Item_Weapon_Crowbar ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "You begin to pry out " ).the( a ).item().str( " into " ).the( this ).item().str( "." ).ToString() );

						if ( GlobalFuncs.do_after( b, this, 10 ) ) {
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
							this.build--;
							this.update_icon();
							C2 = null;

							if ( Lang13.Bool( this._circuitboard ) ) {
								this._circuitboard.loc = GlobalFuncs.get_turf( this );
								C2 = this._circuitboard;
								this._circuitboard = null;
							} else {
								C2 = Lang13.Call( this.boardtype, GlobalFuncs.get_turf( this ) );
							}
							((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b.name ).str( " has removed " ).the( C2 ).item().str( "!</span>" ).ToString(), new Txt( "You remove " ).the( C2 ).item().str( "." ).ToString() );
						}
						return 1;
					}

					if ( a is Obj_Item_Stack_CableCoil ) {
						C3 = a;
						GlobalFuncs.to_chat( b, new Txt( "You start adding cables to " ).the( this ).item().str( "..." ).ToString() );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( b, this, 20 ) && Convert.ToDouble( C3.amount ) >= 5 ) {
							C3.use( 5 );
							this.build++;
							this.update_icon();
							((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b.name ).str( " has added cables to " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "You add cables to " ).the( this ).item().str( "." ).ToString() );
						}
					}
					break;
				case 2:
					
					if ( a is Obj_Item_Weapon_Wirecutters ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "You begin to remove the wiring from " ).the( this ).item().str( "." ).ToString() );

						if ( GlobalFuncs.do_after( b, this, 50 ) ) {
							new Obj_Item_Stack_CableCoil( this.loc, 5 );
							((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " cut the cables.</span>", "You cut the cables." );
							this.build--;
							this.update_icon();
						}
						return 1;
					}

					if ( a is Obj_Item_Weapon_Screwdriver ) {
						GlobalFuncs.to_chat( b, new Txt( "You begin to complete " ).the( this ).item().str( "..." ).ToString() );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( b, this, 20 ) ) {
							
							if ( !Lang13.Bool( this._circuitboard ) ) {
								this._circuitboard = Lang13.Call( this.boardtype, this );
							}
							this.build++;
							this.update_icon();
							((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b.name ).str( " has finished " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "You finish " ).the( this ).item().str( "." ).ToString() );
						}
						return 1;
					}
					break;
				case 3:
					
					if ( a is Obj_Item_Weapon_Screwdriver ) {
						GlobalFuncs.to_chat( b, new Txt( "You begin to unscrew " ).the( this ).item().str( "..." ).ToString() );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( b, this, 30 ) ) {
							this.build--;
							this.update_icon();
						}
						return 1;
					}
					break;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: vending.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "wallmed_frame" + this.build;
			return null;
		}

	}

}