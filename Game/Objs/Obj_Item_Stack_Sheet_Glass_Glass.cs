// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Stack_Sheet_Glass_Glass : Obj_Item_Stack_Sheet_Glass {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.singular_name = "glass sheet";
			this.starting_materials = new ByTable().Set( "$glass", 3750 );
			this.rglass = typeof(Obj_Item_Stack_Sheet_Glass_Rglass);
			this.icon_state = "sheet-glass";
		}

		public Obj_Item_Stack_Sheet_Glass_Glass ( dynamic newloc = null, int? amount = null ) : base( (object)(newloc), amount ) {
			
		}

		// Function from file: glass.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic CC = null;

			
			if ( a is Obj_Item_Stack_CableCoil ) {
				CC = a;

				if ( Convert.ToDouble( CC.amount ) < 2 ) {
					GlobalFuncs.to_chat( b, "<B>There is not enough wire in this coil. You need at least two lengths.</B>" );
					return null;
				}
				((Obj_Item_Stack)CC).use( 2 );
				this.use( 1 );
				GlobalFuncs.to_chat( b, "<span class='notice'>You attach some wires to the " + this.name + ".</span>" );
				GlobalFuncs.drop_stack( typeof(Obj_Item_Stack_LightW), GlobalFuncs.get_turf( b ), 1, b );
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

	}

}