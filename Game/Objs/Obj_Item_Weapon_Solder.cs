// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Solder : Obj_Item_Weapon {

		public double? max_fuel = 20;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.hitsound = "sound/weapons/toolhit.ogg";
			this.slot_flags = 512;
			this.force = 3;
			this.sharpness = 1;
			this.throwforce = 5;
			this.throw_speed = 1;
			this.throw_range = 5;
			this.w_class = 2;
			this.starting_materials = new ByTable().Set( "$iron", 70 ).Set( "$glass", 30 );
			this.w_type = 1;
			this.melt_temperature = 1783.1500244140625;
			this.origin_tech = "engineering=1";
			this.icon_state = "solder-0";
		}

		// Function from file: tools.dm
		public Obj_Item_Weapon_Solder ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( this.max_fuel );
			return;
		}

		// Function from file: tools.dm
		public bool remove_fuel( bool amount = false, Mob user = null ) {
			
			if ( ( ((Reagents)this.reagents).get_reagent_amount( "sacid" ) ?1:0) >= ( amount ?1:0) ) {
				((Reagents)this.reagents).remove_reagent( "sacid", amount );
				this.update_icon();
				return true;
			} else {
				user.simple_message( "<span class='warn'>The tool does not have enough acid!</span>", "<span class='warn'>The tool is too thirsty!</span>" );
				return false;
			}
		}

		// Function from file: tools.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			double space = 0;
			double? transfer_amount = null;

			
			if ( a is Obj_Item_Weapon_ReagentContainers_Glass ) {
				G = a;

				if ( G.reagents.reagent_list.len > 1 ) {
					((Mob)b).simple_message( "<span class='warning'>The mixture is rejected by the tool.</span>", "<span class='warning'>The tool isn't THAT thirsty.</span>" );
					return null;
				}

				if ( !((Reagents)G.reagents).has_reagent( "sacid", 1 ) ) {
					((Mob)b).simple_message( "<span class='warning'>The tool is not compatible with that.</span>", "<span class='warning'>The tool won't drink that.</span>" );
					return null;
				} else {
					space = ( this.max_fuel ??0) - ( this.reagents.total_volume ??0);

					if ( !( space != 0 ) ) {
						((Mob)b).simple_message( "<span class='warning'>The tool is full!</span>", "<span class='warning'>The tool isn't thirsty.</span>" );
						return null;
					}
					transfer_amount = Num13.MinInt( Convert.ToInt32( G.amount_per_transfer_from_this ), ((int)( space )) );
					((Mob)b).simple_message( "<span class='info'>You transfer " + transfer_amount + " units to the " + this + ".</span>", "<span class='info'>The tool gulps down your drink!</span>" );
					((Reagents)G.reagents).trans_id_to( this, "sacid", transfer_amount );
					this.update_icon();
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: tools.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "It contains " + ((Reagents)this.reagents).get_reagent_amount( "sacid" ) + "/" + this.max_fuel + " units of fuel!" );
			return null;
		}

		// Function from file: tools.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );

			dynamic _a = ((Reagents)this.reagents).get_reagent_amount( "sacid" ); // Was a switch-case, sorry for the mess.
			if ( 16<=_a&&_a<=Double.PositiveInfinity ) {
				this.icon_state = "solder-20";
			} else if ( 11<=_a&&_a<=15 ) {
				this.icon_state = "solder-15";
			} else if ( 6<=_a&&_a<=10 ) {
				this.icon_state = "solder-10";
			} else if ( 1<=_a&&_a<=5 ) {
				this.icon_state = "solder-5";
			} else if ( _a==0 ) {
				this.icon_state = "solder-0";
			}
			return null;
		}

	}

}