// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_MineralDoor : Obj_Structure {

		public string mineralType = "metal";
		public bool state = false;
		public bool isSwitchingStates = false;
		public int close_delay = -1;
		public double hardness = 1;
		public int? oreAmount = 7;
		public string openSound = "sound/effects/stonedoor_openclose.ogg";
		public string closeSound = "sound/effects/stonedoor_openclose.ogg";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/doors/mineral_doors.dmi";
			this.icon_state = "metal";
		}

		// Function from file: mineral_doors.dm
		public Obj_Structure_MineralDoor ( dynamic location = null ) : base( (object)(location) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon_state = this.mineralType;
			this.name = "" + this.mineralType + " door";
			this.air_update_turf( true );
			return;
		}

		// Function from file: mineral_doors.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			severity = severity ?? 1;

			
			switch ((int?)( severity )) {
				case 1:
					this.Dismantle( true );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 20 ) ) {
						this.Dismantle( true );
					} else {
						this.hardness--;
						this.CheckHardness();
					}
					break;
				case 3:
					this.hardness -= 0.1;
					this.CheckHardness();
					break;
			}
			return false;
		}

		// Function from file: mineral_doors.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			this.hardness -= Convert.ToDouble( P.damage );
			base.bullet_act( (object)(P), (object)(def_zone) );
			this.CheckHardness();
			return null;
		}

		// Function from file: mineral_doors.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic digTool = null;

			
			if ( A is Obj_Item_Weapon_Pickaxe ) {
				digTool = A;
				user.WriteMsg( "<span class='notice'>You start digging the " + this.name + "...</span>" );

				if ( GlobalFuncs.do_after( user, digTool.digspeed * this.hardness, null, this ) && this != null ) {
					user.WriteMsg( "<span class='notice'>You finish digging.</span>" );
					this.Dismantle();
				}
			} else if ( A is Obj_Item_Weapon ) {
				this.hardness -= Convert.ToDouble( A.force / 100 );
				user.WriteMsg( "<span class='danger'>You hit the " + this.name + " with your " + A.name + "!</span>" );
				this.CheckHardness();
			} else {
				this.attack_hand( user );
			}
			return null;
		}

		// Function from file: mineral_doors.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.state ) {
				this.icon_state = "" + this.mineralType + "open";
			} else {
				this.icon_state = this.mineralType;
			}
			return false;
		}

		// Function from file: mineral_doors.dm
		public virtual void Dismantle( bool? devastated = null ) {
			devastated = devastated ?? false;

			Type ore = null;
			int? i = null;
			Type ore2 = null;
			int? i2 = null;
			Type ore3 = null;
			int? i3 = null;
			Type ore4 = null;
			int? i4 = null;

			
			if ( !( devastated == true ) ) {
				
				if ( this.mineralType == "metal" ) {
					ore = typeof(Obj_Item_Stack_Sheet_Metal);
					i = null;
					i = 1;

					while (( i ??0) <= ( this.oreAmount ??0)) {
						Lang13.Call( ore, GlobalFuncs.get_turf( this ) );
						i++;
					}
				} else {
					ore2 = Lang13.FindClass( "/obj/item/stack/sheet/mineral/" + this.mineralType );
					i2 = null;
					i2 = 1;

					while (( i2 ??0) <= ( this.oreAmount ??0)) {
						Lang13.Call( ore2, GlobalFuncs.get_turf( this ) );
						i2++;
					}
				}
			} else if ( this.mineralType == "metal" ) {
				ore3 = typeof(Obj_Item_Stack_Sheet_Metal);
				i3 = null;
				i3 = 3;

				while (( i3 ??0) <= ( this.oreAmount ??0)) {
					Lang13.Call( ore3, GlobalFuncs.get_turf( this ) );
					i3++;
				}
			} else {
				ore4 = Lang13.FindClass( "/obj/item/stack/sheet/mineral/" + this.mineralType );
				i4 = null;
				i4 = 3;

				while (( i4 ??0) <= ( this.oreAmount ??0)) {
					Lang13.Call( ore4, GlobalFuncs.get_turf( this ) );
					i4++;
				}
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: mineral_doors.dm
		public void CheckHardness(  ) {
			
			if ( this.hardness <= 0 ) {
				this.Dismantle( true );
			}
			return;
		}

		// Function from file: mineral_doors.dm
		public virtual void Close(  ) {
			dynamic T = null;
			Mob_Living L = null;

			T = GlobalFuncs.get_turf( this );

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Mob_Living) )) {
				L = _a;
				
				return;
			}
			this.isSwitchingStates = true;
			GlobalFuncs.playsound( this.loc, this.closeSound, 100, 1 );
			Icon13.Flick( "" + this.mineralType + "closing", this );
			Task13.Sleep( 10 );
			this.density = true;
			this.opacity = true;
			this.state = false;
			this.air_update_turf( true );
			this.update_icon();
			this.isSwitchingStates = false;
			return;
		}

		// Function from file: mineral_doors.dm
		public void Open(  ) {
			this.isSwitchingStates = true;
			GlobalFuncs.playsound( this.loc, this.openSound, 100, 1 );
			Icon13.Flick( "" + this.mineralType + "opening", this );
			Task13.Sleep( 10 );
			this.density = false;
			this.opacity = false;
			this.state = true;
			this.air_update_turf( true );
			this.update_icon();
			this.isSwitchingStates = false;

			if ( this.close_delay != -1 ) {
				Task13.Schedule( this.close_delay, (Task13.Closure)(() => {
					
					if ( !this.isSwitchingStates && this.state ) {
						this.Close();
					}
					return;
				}));
			}
			return;
		}

		// Function from file: mineral_doors.dm
		public void SwitchState(  ) {
			
			if ( this.state ) {
				this.Close();
			} else {
				this.Open();
			}
			return;
		}

		// Function from file: mineral_doors.dm
		public void TryToSwitchState( dynamic user = null ) {
			dynamic M = null;
			dynamic C = null;

			
			if ( this.isSwitchingStates ) {
				return;
			}

			if ( user is Mob_Living ) {
				M = user;

				if ( Game13.time - M.last_bumped <= 60 ) {
					return;
				}

				if ( Lang13.Bool( M.client ) ) {
					
					if ( M is Mob_Living_Carbon ) {
						C = M;

						if ( !Lang13.Bool( C.handcuffed ) ) {
							this.SwitchState();
						}
					} else {
						this.SwitchState();
					}
				}
			} else if ( user is Obj_Mecha ) {
				this.SwitchState();
			}
			return;
		}

		// Function from file: mineral_doors.dm
		public override bool CanAtmosPass( dynamic T = null ) {
			return !this.density;
		}

		// Function from file: mineral_doors.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			
			if ( mover is Obj_Effect_Beam ) {
				return !this.opacity;
			}
			return !this.density;
		}

		// Function from file: mineral_doors.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.TryToSwitchState( a ); return null;
		}

		// Function from file: mineral_doors.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.TryToSwitchState( a ); return null;
		}

		// Function from file: mineral_doors.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( user is Mob_Living_Silicon_Ai ) {
				return null;
			} else if ( user is Mob_Living_Silicon_Robot ) {
				
				if ( Map13.GetDistance( user, this ) <= 1 ) {
					this.TryToSwitchState( user ); return null;
				}
			}
			return null;
		}

		// Function from file: mineral_doors.dm
		public override bool Bumped( dynamic AM = null ) {
			base.Bumped( (object)(AM) );

			if ( !this.state ) {
				this.TryToSwitchState( AM ); return false;
			}
			return false;
		}

		// Function from file: mineral_doors.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Ent_Static T = null;

			T = this.loc;
			base.Move( (object)(NewLoc), Dir, step_x, step_y );
			this.move_update_air( T );
			return false;
		}

		// Function from file: mineral_doors.dm
		public override dynamic Destroy(  ) {
			this.density = false;
			this.air_update_turf( true );
			return base.Destroy();
		}

	}

}