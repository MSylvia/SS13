// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_PortablesConnector : Obj_Machinery_Atmospherics_Unary {

		public Obj connected_device = null;
		public bool on = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.use_power = 0;
			this.level = 0;
			this.icon = "icons/obj/atmospherics/portables_connector.dmi";
			this.icon_state = "hintact";
		}

		// Function from file: portables_connector.dm
		public Obj_Machinery_Atmospherics_Unary_PortablesConnector ( dynamic loc = null ) : base( (object)(loc) ) {
			this.initialize_directions = this.dir;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: portables_connector.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			if ( this.connected_device != null ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You cannot unwrench this " + this + ", dettach " + this.connected_device + " first.</span>" );
				return 1;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_PortableAtmospherics), this.loc ) ) ) {
				return 1;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: portables_connector.dm
		public override ByTable return_network_air( PipeNetwork reference = null ) {
			ByTable results = null;

			results = new ByTable();

			if ( this.connected_device != null ) {
				results.Add( ((dynamic)this.connected_device).air_contents );
			}
			return results;
		}

		// Function from file: portables_connector.dm
		public override dynamic return_network( Obj reference = null ) {
			this.build_network();

			if ( reference == this.node ) {
				return this.network;
			}

			if ( reference == this.connected_device ) {
				return this.network;
			}
			return null;
		}

		// Function from file: portables_connector.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.connected_device != null ) {
				((Obj_Machinery_PortableAtmospherics)this.connected_device).disconnect();
			}

			if ( this.node != null ) {
				this.node.disconnect( this );

				if ( this.network != null ) {
					GlobalFuncs.returnToPool( this.network );
				}
			}
			this.node = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: portables_connector.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			_default = base.process();

			if ( !this.on ) {
				return _default;
			}

			if ( !( this.connected_device != null ) ) {
				this.on = false;
				return _default;
			}

			if ( this.network != null ) {
				((dynamic)this.network).update = 1;
			}
			return 1;
		}

		// Function from file: portables_connector.dm
		public override void hide( bool? h = null ) {
			this.update_icon();
			return;
		}

		// Function from file: portables_connector.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			Ent_Static floor = null;

			base.update_icon( (object)(location), (object)(target) );

			if ( this.loc is Tile_Simulated_Floor && this.node != null ) {
				floor = this.loc;

				if ( Lang13.Bool( ((dynamic)floor).floor_tile ) && this.node.alpha == 128 ) {
					this.underlays.Cut();
				}
			}
			return null;
		}

	}

}