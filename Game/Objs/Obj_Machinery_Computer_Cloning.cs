// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Cloning : Obj_Machinery_Computer {

		public ByTable links = new ByTable();
		public dynamic scanner = null;
		public Base_Data pod1 = null;
		public string temp = "";
		public string scantemp = "Scanner unoccupied";
		public double? menu = 1;
		public ByTable records = new ByTable();
		public dynamic active_record = null;
		public dynamic diskette = null;
		public bool loading = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/cloning";
			this.req_access = new ByTable(new object [] { 19 });
			this.light_color = "#6496FA";
			this.icon_state = "cloning";
		}

		// Function from file: cloning.dm
		public Obj_Machinery_Computer_Cloning ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.updatemodules();
				return;
				return;
			}));
			return;
		}

		// Function from file: cloning.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays = 0;

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				
				if ( Lang13.Bool( this.scanner ) && Lang13.Bool( this.scanner.occupant ) ) {
					this.overlays.Add( "cloning-scan" );
				}

				if ( this.pod1 != null && Lang13.Bool( ((dynamic)this.pod1).occupant ) ) {
					this.overlays.Add( "cloning-pod" );
				}
			}
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic C = null;
			dynamic C2 = null;
			bool success = false;
			Mob_Living selected = null;
			string answer = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( this.loading ) {
				return null;
			}

			if ( Lang13.Bool( href_list["scan"] ) && !( this.scanner == null ) ) {
				this.scantemp = "";
				this.loading = true;
				this.updateUsrDialog();
				Task13.Schedule( 20, (Task13.Closure)(() => {
					this.scan_mob( this.scanner.occupant );
					this.loading = false;
					this.updateUsrDialog();
					return;
				}));
			} else if ( Lang13.Bool( href_list["lock"] ) && !( this.scanner == null ) ) {
				
				if ( !Lang13.Bool( this.scanner.locked ) && Lang13.Bool( this.scanner.occupant ) ) {
					this.scanner.locked = 1;
				} else {
					this.scanner.locked = 0;
				}
			} else if ( Lang13.Bool( href_list["view_rec"] ) ) {
				this.active_record = Lang13.FindObj( href_list["view_rec"] );

				if ( this.active_record is Dna2_Record ) {
					
					if ( this.active_record.ckey == null ) {
						GlobalFuncs.qdel( this.active_record );
						this.active_record = null;
						this.temp = "ERROR: Record Corrupt";
					} else {
						this.menu = 3;
					}
				} else {
					this.active_record = null;
					this.temp = "Record missing.";
				}
			} else if ( Lang13.Bool( href_list["del_rec"] ) ) {
				
				if ( !Lang13.Bool( this.active_record ) || ( this.menu ??0) < 3 ) {
					return null;
				}

				if ( this.menu == 3 ) {
					this.temp = "Delete record?";
					this.menu = 4;
				} else if ( this.menu == 4 ) {
					C = Task13.User.get_active_hand();

					if ( C is Obj_Item_Weapon_Card_Id || C is Obj_Item_Device_Pda ) {
						
						if ( this.check_access( C ) ) {
							this.records.Remove( this.active_record );
							GlobalFuncs.qdel( this.active_record );
							this.active_record = null;
							this.temp = "Record deleted.";
							this.menu = 2;
						} else {
							this.temp = "Access Denied.";
						}
					}
				}
			} else if ( Lang13.Bool( href_list["disk"] ) ) {
				
				dynamic _a = href_list["disk"]; // Was a switch-case, sorry for the mess.
				if ( _a=="load" ) {
					
					if ( this.diskette == null || this.diskette.buf == null ) {
						this.temp = "Load error.";
						this.updateUsrDialog();
						return null;
					}

					if ( this.active_record == null ) {
						this.temp = "Record error.";
						this.menu = 1;
						this.updateUsrDialog();
						return null;
					}
					this.active_record = this.diskette.buf;
					this.temp = "Load successful.";
				} else if ( _a=="eject" ) {
					
					if ( !( this.diskette == null ) ) {
						this.diskette.loc = this.loc;
						this.diskette = null;
					}
				}
			} else if ( Lang13.Bool( href_list["save_disk"] ) ) {
				
				if ( this.diskette == null || this.diskette.read_only || this.active_record == null ) {
					this.temp = "Save error.";
					this.updateUsrDialog();
					return null;
				}
				this.diskette.buf = this.active_record;
				this.diskette.buf.types = 0;

				dynamic _b = href_list["save_disk"]; // Was a switch-case, sorry for the mess.
				if ( _b=="ui" ) {
					this.diskette.buf.types = 1;
				} else if ( _b=="ue" ) {
					this.diskette.buf.types = 3;
				} else if ( _b=="se" ) {
					this.diskette.buf.types = 4;
				}
				this.diskette.name = "data disk - '" + ( Lang13.Bool( this.active_record.dna.real_name ) && this.active_record.dna.real_name != "" ? this.active_record.dna.real_name : "Unknown" ) + "'";
				this.temp = "Save [" + href_list["save_disk"] + "] successful.";
			} else if ( Lang13.Bool( href_list["refresh"] ) ) {
				this.updateUsrDialog();
			} else if ( Lang13.Bool( href_list["clone"] ) ) {
				C2 = Lang13.FindObj( href_list["clone"] );

				if ( C2 is Dna2_Record ) {
					
					if ( !( this.pod1 != null ) || !this.canLink( this.pod1 ) ) {
						this.temp = "Error: No Clonepod detected.";
					} else if ( Lang13.Bool( ((dynamic)this.pod1).occupant ) ) {
						this.temp = "Error: Clonepod is currently occupied.";
					} else if ( Convert.ToDouble( ((dynamic)this.pod1).biomass ) < 150 ) {
						this.temp = "Error: Not enough biomass.";
					} else if ( Lang13.Bool( ((dynamic)this.pod1).mess ) ) {
						this.temp = "Error: Clonepod malfunction.";
					} else if ( !Lang13.Bool( GlobalVars.config.revival_cloning ) ) {
						this.temp = "Error: Unable to initiate cloning cycle.";
					}
					success = ((Obj_Machinery_Cloning_Clonepod)this.pod1).growclone( C2 );

					if ( success ) {
						this.temp = "Initiating cloning cycle...";
						this.records.Remove( C2 );
						GlobalFuncs.qdel( C2 );
						C2 = null;
						this.menu = 1;
					} else {
						selected = GlobalFuncs.find_dead_player( "" + C2.ckey );

						if ( !( selected != null ) ) {
							this.temp = "Initiating cloning cycle...<br>Error: Post-initialisation failed. Cloning cycle aborted.";
							return null;
						}
						selected.WriteMsg( "sound/machines/chime.ogg" );
						answer = Interface13.Alert( selected, "Do you want to return to life?", "Cloning", "Yes", "No" );

						if ( answer != "No" && ((Obj_Machinery_Cloning_Clonepod)this.pod1).growclone( C2 ) ) {
							this.temp = "Initiating cloning cycle...";
							this.records.Remove( C2 );
							GlobalFuncs.qdel( C2 );
							this.menu = 1;
						} else {
							this.temp = "Initiating cloning cycle...<br>Error: Post-initialisation failed. Cloning cycle aborted.";
						}
					}
				} else {
					this.temp = "Error: Data corruption.";
				}
			} else if ( Lang13.Bool( href_list["menu"] ) ) {
				this.menu = String13.ParseNumber( href_list["menu"] );
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			Dna2_Record R = null;
			dynamic H = null;

			((Mob)a).set_machine( this );
			this.add_fingerprint( a );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			this.updatemodules();
			dat = "<h3>Cloning System Control</h3>";
			dat += new Txt( "<font size=-1><a href='byond://?src=" ).Ref( this ).str( ";refresh=1'>Refresh</a></font>\n		<br><tt>" ).item( this.temp ).str( "</tt><br>" ).ToString();

			switch ((double?)( this.menu )) {
				case 1:
					dat += "<h4>Modules</h4>";

					if ( this.scanner == null ) {
						dat += " <font color=red>Scanner-ERROR</font><br>";
					} else {
						dat += " <font color=green>Scanner-Found!</font><br>";
					}

					if ( this.pod1 == null ) {
						dat += " <font color=red>Pod-ERROR</font><br>";
					} else {
						dat += " <font color=green>Pod-Found!</font><br>";
					}
					dat += "<h4>Scanner Functions</h4>";

					if ( this.loading ) {
						dat += "<b>Scanning...</b><br>";
					} else {
						dat += "<b>" + this.scantemp + "</b><br>";
					}

					if ( this.scanner == null ) {
						dat += "No scanner connected!<br>";
					} else {
						
						if ( Lang13.Bool( this.scanner.occupant ) ) {
							
							if ( this.scantemp == "Scanner unoccupied" ) {
								this.scantemp = "";
							}
							dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";scan=1'>Scan - " ).item( this.scanner.occupant ).str( "</a><br>" ).ToString();
						} else {
							this.scantemp = "Scanner unoccupied";
						}
						dat += new Txt( "Lock status: <a href='byond://?src=" ).Ref( this ).str( ";lock=1'>" ).item( ( Lang13.Bool( this.scanner.locked ) ? "Locked" : "Unlocked" ) ).str( "</a><br>" ).ToString();
					}

					if ( !( this.pod1 == null ) ) {
						dat += "Biomass: <i>" + ((dynamic)this.pod1).biomass + "</i><br>";
					}
					dat += new Txt( "<h4>Database Functions</h4>\n				<a href='byond://?src=" ).Ref( this ).str( ";menu=2'>View Records</a><br>" ).ToString();

					if ( Lang13.Bool( this.diskette ) ) {
						dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";disk=eject'>Eject Disk</a>" ).ToString();
					}
					break;
				case 2:
					dat += new Txt( "<h4>Current records</h4>\n				<a href='byond://?src=" ).Ref( this ).str( ";menu=1'>Back</a><br><ul>" ).ToString();

					foreach (dynamic _a in Lang13.Enumerate( this.records, typeof(Dna2_Record) )) {
						R = _a;
						
						dat += new Txt( "<li><a href='byond://?src=" ).Ref( this ).str( ";view_rec=" ).Ref( R ).str( "'>" ).item( ( Lang13.Bool( R.dna.real_name ) && R.dna.real_name != "" ? R.dna.real_name : ((dynamic)( "Unknown" )) ) ).str( "</a></li>" ).ToString();
					}
					break;
				case 3:
					dat += new Txt( "<h4>Selected Record</h4>\n				<a href='byond://?src=" ).Ref( this ).str( ";menu=2'>Back</a><br>" ).ToString();

					if ( !Lang13.Bool( this.active_record ) ) {
						dat += "<font color=red>ERROR: Record not found.</font>";
					} else {
						dat += new Txt( "<br><font size=1><a href='byond://?src=" ).Ref( this ).str( ";del_rec=1'>Delete Record</a></font><br>\n					<b>Name:</b> " ).item( ( Lang13.Bool( this.active_record.dna.real_name ) && this.active_record.dna.real_name != "" ? this.active_record.dna.real_name : "Unknown" ) ).str( "<br>" ).ToString();
						H = null;

						if ( Lang13.Bool( this.active_record.implant ) ) {
							H = Lang13.FindObj( this.active_record.implant );
						}

						if ( Lang13.Bool( H ) && H is Obj_Item_Weapon_Implant_Health ) {
							dat += "<b>Health:</b> " + ((Obj_Item_Weapon_Implant_Health)H).sensehealth() + " | OXY-BURN-TOX-BRUTE<br>";
						} else {
							dat += "<font color=red>Unable to locate implant.</font><br>";
						}

						if ( !( this.diskette == null ) ) {
							dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";disk=load'>Load from disk.</a>\n						| Save: <a href='byond://?src=" ).Ref( this ).str( ";save_disk=ue'>UI + UE</a>\n						| Save: <a href='byond://?src=" ).Ref( this ).str( ";save_disk=ui'>UI</a>\n						| Save: <a href='byond://?src=" ).Ref( this ).str( ";save_disk=se'>SE</a>\n						<br>" ).ToString();
						} else {
							dat += "<br>";
						}
						dat += "<b>UI:</b> " + this.active_record.dna.uni_identity + "<br>\n				<b>SE:</b> " + this.active_record.dna.struc_enzymes + "<br><br>";

						if ( this.pod1 != null && Convert.ToDouble( ((dynamic)this.pod1).biomass ) >= 150 ) {
							dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";clone=" ).Ref( this.active_record ).str( "'>Clone</a><br>" ).ToString();
						} else {
							dat += "<b>Insufficient biomass</b><br>";
						}
					}
					break;
				case 4:
					
					if ( !Lang13.Bool( this.active_record ) ) {
						this.menu = 2;
					}
					dat = new Txt().item( this.temp ).str( "<br>\n				<h4>Confirm Record Deletion</h4>\n				<b><a href='byond://?src=" ).Ref( this ).str( ";del_rec=1'>Scan card to confirm.</a></b><br>\n				<b><a href='byond://?src=" ).Ref( this ).str( ";menu=3'>No</a></b>" ).ToString();
					break;
			}
			Interface13.Browse( a, dat, "window=cloning" );
			GlobalFuncs.onclose( a, "cloning" );
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: cloning.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: cloning.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( a is Obj_Item_Weapon_Disk_Data ) {
				
				if ( !Lang13.Bool( this.diskette ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.diskette = a;
						GlobalFuncs.to_chat( b, new Txt( "You insert " ).the( a ).item().str( "." ).ToString() );
						this.updateUsrDialog();
						return 1;
					}
				}
			}
			return _default;
		}

		// Function from file: cloning.dm
		public Dna2_Record find_record( string find_key = null ) {
			Dna2_Record selected_record = null;
			Dna2_Record R = null;

			selected_record = null;

			foreach (dynamic _a in Lang13.Enumerate( this.records, typeof(Dna2_Record) )) {
				R = _a;
				

				if ( R.ckey == find_key ) {
					selected_record = R;
					break;
				}
			}
			return selected_record;
		}

		// Function from file: cloning.dm
		public void scan_mob( Mob_Living subject = null ) {
			Mob_Dead_Observer ghost = null;
			dynamic Brain = null;
			dynamic B = null;
			Dna2_Record R = null;
			dynamic imp = null;

			
			if ( subject == null || !( subject is Mob_Living_Carbon_Human ) || !( subject.dna != null ) || subject is Mob_Living_Carbon_Human_Manifested ) {
				this.scantemp = "Error: Unable to locate valid genetic data.";
				return;
			}

			if ( !subject.has_brain() ) {
				this.scantemp = "Error: No signs of intelligence detected.";
				return;
			}
			Interface13.Stat( null, subject.mutations.Contains( 8 ) );

			if ( !subject.has_brain() || subject.suiciding == true ) {
				this.scantemp = "Error: Mental interface failure.";
				return;
			}

			if ( !( subject.client != null ) && subject.mind != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
					ghost = _a;
					

					if ( ghost.mind == subject.mind && ghost.client != null && ghost.can_reenter_corpse != 0 ) {
						GlobalFuncs.to_chat( ghost, "sound/effects/adminhelp.ogg" );
						GlobalFuncs.to_chat( ghost, new Txt( "<span class='interface'><b><font size = 3>Someone is trying to clone your corpse. Return to your body if you want to be cloned!</b> (Verbs -> Ghost -> Re-enter corpse, or <a href='?src=" ).Ref( ghost ).str( ";reentercorpse=1'>click here!</a>)</font></span>" ).ToString() );
						this.scantemp = "Error: Subject's brain is not responding to scanning stimuli, subject may be brain dead. Please try again in five seconds.";
						return;
					}
				}
				this.scantemp = "Error: Mental interface failure.";
				return;
			}

			if ( !Lang13.Bool( subject.ckey ) ) {
				this.scantemp = "Error: Mental interface failure.";
				return;
			} else if ( !( this.find_record( subject.ckey ) == null ) ) {
				this.scantemp = "Subject already in database.";
				return;
			}
			subject.dna.check_integrity();
			Brain = ((dynamic)subject).internal_organs_by_name["brain"];
			B = subject.has_brain_worms();

			if ( Lang13.Bool( B ) && B.controlling ) {
				((dynamic)subject).do_release_control( 1 );
			}
			R = new Dna2_Record();

			if ( !( Brain.owner_dna == null ) && Brain.owner_dna != subject.dna ) {
				R.dna = Brain.owner_dna;
			} else {
				R.dna = subject.dna;
			}
			R.ckey = subject.ckey;
			R.id = String13.SubStr( Num13.Md5( R.dna.real_name ), 2, 6 );
			R.name = R.dna.real_name;
			R.types = 7;
			R.languages = subject.languages.Copy();
			imp = Lang13.FindIn( typeof(Obj_Item_Weapon_Implant_Health), subject );

			if ( imp == null ) {
				imp = new Obj_Item_Weapon_Implant_Health( subject );
				imp.implanted = subject;
				R.implant = new Txt().Ref( imp ).ToString();
			} else {
				R.implant = new Txt().Ref( imp ).ToString();
			}

			if ( !( subject.mind == null ) ) {
				R.mind = new Txt().Ref( subject.mind ).ToString();
			}
			this.records.Add( R );
			this.scantemp = "Subject successfully scanned.";
			return;
		}

		// Function from file: cloning.dm
		public Obj_Machinery_Cloning_Clonepod findcloner(  ) {
			Obj_Machinery_Cloning_Clonepod pod_found = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( 7, this ), typeof(Obj_Machinery_Cloning_Clonepod) )) {
				pod_found = _a;
				

				if ( pod_found.connected != null ) {
					continue;
				}
				pod_found.connected = this;
				return pod_found;
			}
			return null;
		}

		// Function from file: cloning.dm
		public dynamic findscanner(  ) {
			dynamic scannerf = null;

			scannerf = null;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				this.dir = Convert.ToInt32( _a );
				
				scannerf = Lang13.FindIn( typeof(Obj_Machinery_DnaScannernew), Map13.GetStep( this, this.dir ) );

				if ( !( scannerf == null ) ) {
					break;
				}
			}
			return scannerf;
		}

		// Function from file: cloning.dm
		public void updatemodules(  ) {
			this.scanner = this.findscanner();

			if ( !( this.pod1 == null ) ) {
				((dynamic)this.pod1).connected = this;
			}
			return;
		}

		// Function from file: cloning.dm
		public override bool linkWith( Mob user = null, Base_Data buffer = null, ByTable context = null ) {
			
			if ( buffer is Obj_Machinery_Cloning_Clonepod ) {
				this.pod1 = buffer;
				return true;
			}
			return false;
		}

		// Function from file: cloning.dm
		public override Base_Data getLink( double? idx = null ) {
			return ( ( idx ??0) >= 1 && ( idx ??0) <= this.links.len ? this.links[idx] : null );
		}

		// Function from file: cloning.dm
		public override bool? isLinkedWith( Base_Data O = null ) {
			Interface13.Stat( null, this.links.Contains( O != null && O != null ) );
			return null;
		}

		// Function from file: cloning.dm
		public override bool canLink( Base_Data O = null, ByTable context = null ) {
			return O is Obj_Machinery_Cloning && Map13.GetDistance( this, O ) < 7;
		}

		// Function from file: cloning.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return "";
		}

		// Function from file: cloning.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.pod1 = this.findcloner();
			return false;
		}

	}

}