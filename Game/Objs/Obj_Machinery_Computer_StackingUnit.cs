// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_StackingUnit : Obj_Machinery_Computer {

		public dynamic stacker_tag = null;
		public int frequency = 1367;
		public RadioFrequency radio_connection = null;
		public dynamic stacker_data = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.light_color = "#64C864";
			this.circuit = "/obj/item/weapon/circuitboard/stacking_machine_console";
			this.icon_state = "computer_generic";
		}

		// Function from file: machine_stacking.dm
		public Obj_Machinery_Computer_StackingUnit ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: machine_stacking.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n		<ul>\n			<li><b>Frequency: </b><a href='?src=" ).Ref( this ).str( ";set_freq=-1'>" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "</a></li>\n			<li>" ).item( this.format_tag( "Stacker ID Tag", "stacker_tag" ) ).str( "</li>\n		</ul>\n	" ).ToString();
		}

		// Function from file: machine_stacking.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.stacker_tag ) {
				return false;
			}
			this.stacker_data = ((dynamic)signal).data;
			this.updateUsrDialog();
			return false;
		}

		// Function from file: machine_stacking.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			
			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: machine_stacking.dm
		public void request_status(  ) {
			this.stacker_data = null;
			this.send_signal( new ByTable().Set( "sigtype", "status" ) );
			return;
		}

		// Function from file: machine_stacking.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency );
			return;
		}

		// Function from file: machine_stacking.dm
		public void send_signal( ByTable data = null ) {
			Game_Data signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).source = this;
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).data["tag"] = this.stacker_tag;
			((dynamic)signal).data += data;
			this.radio_connection.post_signal( this, signal );
			return;
		}

		// Function from file: machine_stacking.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			ByTable signal_data = null;

			
			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine(  );
				}
				return 1;
			}
			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["release"] ) ) {
				signal_data = new ByTable().Set( "release", href_list["release"] );
				this.send_signal( signal_data );
				this.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: machine_stacking.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			dynamic typepath = null;
			dynamic stack = null;
			Browser popup = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !Lang13.Bool( this.stacker_data ) ) {
				this.request_status();

				if ( !Lang13.Bool( this.stacker_data ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Unable to find a stacking machine.</span>" );
					((Mob)user).unset_machine(  );
					return null;
				}
			}
			((Mob)user).set_machine( this );
			dat = "";

			foreach (dynamic _a in Lang13.Enumerate( this.stacker_data["stacks"] )) {
				typepath = _a;
				
				stack = this.stacker_data["stacks"][typepath];

				if ( Lang13.Bool( stack ) && Lang13.Bool( stack["amount"] ) ) {
					dat += new Txt().item( stack["name"] ).str( ": " ).item( stack["amount"] ).str( " <A href='?src=" ).Ref( this ).str( ";release=" ).item( typepath ).str( "'>Release</A><br>" ).ToString();
				}
			}
			dat += "<br>Stacking: " + this.stacker_data["stack_amt"];
			popup = new Browser( user, "stacking_machine_console", this.name, 200, 200, this );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: machine_stacking.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: machine_stacking.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.interact( user );
			return null;
		}

	}

}