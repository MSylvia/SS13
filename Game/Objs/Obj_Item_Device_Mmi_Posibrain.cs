// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Mmi_Posibrain : Obj_Item_Device_Mmi {

		public bool searching = false;
		public int askDelay = 600;
		public ByTable ghost_volunteers = new ByTable( 0 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "engineering=4;materials=4;bluespace=2;programming=4";
			this.req_access = new ByTable(new object [] { 29 });
			this.locked = 2;
			this.icon_state = "posibrain";
		}

		// Function from file: posibrain.dm
		public Obj_Item_Device_Mmi_Posibrain ( dynamic loc = null ) : base( (object)(loc) ) {
			this.brainmob = new Mob_Living_Carbon_Brain( this );
			this.brainmob.name = "" + Rand13.PickFromTable( new ByTable(new object [] { "PBU", "HIU", "SINA", "ARMA", "OSI" }) ) + "-" + Rand13.Int( 100, 999 );
			this.brainmob.real_name = this.brainmob.name;
			this.brainmob.loc = this;
			this.brainmob.container = this;
			this.brainmob.stat = 0;
			this.brainmob.silent = 0;
			GlobalVars.dead_mob_list.Remove( this.brainmob );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: posibrain.dm
		public override void OnMobDeath( Mob holder = null ) {
			this.visible_message( "<span class='danger'>" + holder + " begins to go dark, having seemingly thought himself to death</span>", null, "<span class='danger'>You hear the wistful sigh of a hopeful machine powering off with a tone of finality.<span>" );
			this.icon_state = "posibrain";
			this.searching = false;
			return;
		}

		// Function from file: posibrain.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			dynamic T = null;
			dynamic M = null;

			
			if ( this.searching ) {
				this.volunteer( user );
			} else {
				T = GlobalFuncs.get_turf( this.loc );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, T ) )) {
					M = _a;
					
					M.show_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " pings softly.</span>" ).ToString() );
				}
			}
			return null;
		}

		// Function from file: posibrain.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.try_handling_mommi_construction( a, b ) == true ) {
				return null;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: posibrain.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( !( this.brainmob != null ) ) {
				return null;
			} else {
				
				switch ((int)( severity )) {
					case 1:
						this.brainmob.emp_damage += Rand13.Int( 20, 30 );
						break;
					case 2:
						this.brainmob.emp_damage += Rand13.Int( 10, 20 );
						break;
					case 3:
						this.brainmob.emp_damage += Rand13.Int( 0, 10 );
						break;
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: posibrain.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.brainmob != null ) {
				
				if ( this.brainmob.stat == 2 ) {
					GlobalFuncs.to_chat( user, "<span class='deadsay'>It appears to be completely inactive.</span>" );
				} else if ( !( this.brainmob.client != null ) ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>It appears to be in stand-by mode.</span>" );
				} else if ( !Lang13.Bool( this.brainmob.key ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>It doesn't seem to be responsive.</span>" );
				}
			}
			return null;
		}

		// Function from file: posibrain.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic O = null;

			
			if ( href_list.Contains( "signup" ) ) {
				O = Lang13.FindObj( href_list["signup"] );

				if ( !Lang13.Bool( O ) ) {
					return null;
				}
				this.volunteer( O );
			}
			return null;
		}

		// Function from file: posibrain.dm
		public void volunteer( dynamic O = null ) {
			
			if ( !this.searching ) {
				GlobalFuncs.to_chat( O, "Not looking for a ghost, yet." );
				return;
			}

			if ( !( O is Mob_Dead_Observer ) ) {
				GlobalFuncs.to_chat( O, "<span class='warning'>NO.</span>" );
				return;
			}

			if ( this.ghost_volunteers.Contains( O ) ) {
				GlobalFuncs.to_chat( O, "<span class='notice'>Removed from registration list.</span>" );
				this.ghost_volunteers.Remove( O );
				return;
			}

			if ( !this.check_observer( O ) ) {
				GlobalFuncs.to_chat( O, new Txt( "<span class='warning'>You cannot be " ).a( this ).item().str( ".</span>" ).ToString() );
				return;
			}
			GlobalFuncs.to_chat( O, "<span class='notice'>You've been added to the list of ghosts that may become this " + this + ".  Click again to unvolunteer.</span>" );
			this.ghost_volunteers.Add( O );
			return;
		}

		// Function from file: posibrain.dm
		public void reset_search(  ) {
			dynamic T = null;
			dynamic M = null;

			
			if ( this.brainmob != null && Lang13.Bool( this.brainmob.key ) ) {
				return;
			}
			this.searching = false;
			this.icon_state = "posibrain";
			T = GlobalFuncs.get_turf( this.loc );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, T ) )) {
				M = _a;
				
				M.show_message( "<span class='notice'>The " + this + " buzzes quietly, and the golden lights fade away. Perhaps you could try again?</span>" );
			}
			return;
		}

		// Function from file: posibrain.dm
		public void transfer_personality( dynamic candidate = null ) {
			dynamic T = null;
			dynamic M = null;

			this.searching = false;
			this.brainmob.ckey = candidate.ckey;
			this.brainmob.stat = 0;
			this.name = "positronic brain (" + this.brainmob.name + ")";
			GlobalFuncs.to_chat( this.brainmob, new Txt( "<b>You are " ).a( this ).item().str( ", brought into existence on " ).item( GlobalFuncs.station_name() ).str( ".</b>" ).ToString() );
			GlobalFuncs.to_chat( this.brainmob, "<b>As a synthetic intelligence, you answer to all crewmembers, as well as the AI.</b>" );
			GlobalFuncs.to_chat( this.brainmob, "<b>Remember, the purpose of your existence is to serve the crew and the station. Above all else, do no harm.</b>" );
			this.brainmob.mind.assigned_role = "Positronic Brain";
			T = GlobalFuncs.get_turf( this.loc );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, T ) )) {
				M = _a;
				
				M.show_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " chimes quietly.</span>" ).ToString() );
			}
			this.icon_state = "posibrain-occupied";
			return;
		}

		// Function from file: posibrain.dm
		public void question( dynamic C = null ) {
			string response = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( C ) ) {
					return;
				}
				response = Interface13.Alert( C, new Txt( "Someone is requesting a personality for " ).a( this ).item().str( ". Would you like to play as one?" ).ToString(), "" + this + " request", "Yes", "No", "Never for this round" );

				if ( !Lang13.Bool( C ) || Lang13.Bool( this.brainmob.key ) || false == this.searching ) {
					return;
				}

				if ( response == "Yes" ) {
					this.transfer_personality( C.mob );
				}
				return;
			}));
			return;
		}

		// Function from file: posibrain.dm
		public bool check_observer( dynamic O = null ) {
			
			if ( O.has_enabled_antagHUD == 1 && GlobalVars.config.antag_hud_restricted ) {
				return false;
			}

			if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( O, "posibrain" ) ) ) {
				return false;
			}

			if ( Lang13.Bool( O.client ) ) {
				return true;
			}
			return false;
		}

		// Function from file: posibrain.dm
		public void request_player(  ) {
			Mob_Dead_Observer O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "posibrain" ), typeof(Mob_Dead_Observer) )) {
				O = _a;
				

				if ( O.client != null ) {
					
					if ( this.check_observer( O ) ) {
						GlobalFuncs.to_chat( O, new Txt( "<span class=\"recruit\">You are a possible candidate for " ).a( this ).item().str( ". Get ready. (<a href='?src=" ).Ref( O ).str( ";jump=" ).Ref( this ).str( "'>Teleport</a> | <a href='?src=" ).Ref( this ).str( ";signup=" ).Ref( O ).str( "'>Retract</a>)</span>" ).ToString() );
						this.ghost_volunteers.Add( O );
					}
				}
			}
			return;
		}

		// Function from file: posibrain.dm
		public void search_for_candidates(  ) {
			dynamic O = null;

			this.icon_state = "posibrain-searching";
			this.ghost_volunteers.len = 0;
			this.searching = true;
			this.request_player();
			Task13.Schedule( 600, (Task13.Closure)(() => {
				
				if ( this.ghost_volunteers.len != 0 ) {
					O = Rand13.PickFromTable( this.ghost_volunteers );

					if ( O is Mob_Dead_Observer && Lang13.Bool( O.client ) && Lang13.Bool( O.key ) ) {
						this.transfer_personality( O );
					}
				}
				this.reset_search();
				return;
			}));
			return;
		}

		// Function from file: posibrain.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.brainmob != null && !Lang13.Bool( this.brainmob.key ) && !this.searching ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You carefully locate the manual activation switch and start " ).the( this ).item().str( "'s boot process.</span>" ).ToString() );
				this.search_for_candidates();
			}
			return null;
		}

	}

}