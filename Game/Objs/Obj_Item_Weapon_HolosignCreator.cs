// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_HolosignCreator : Obj_Item_Weapon {

		public ByTable signs = new ByTable();
		public int max_signs = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electronic";
			this.force = 5;
			this.w_class = 2;
			this.throw_speed = 3;
			this.origin_tech = "programming=3";
			this.icon = "icons/obj/janitor.dmi";
			this.icon_state = "signmaker";
		}

		public Obj_Item_Weapon_HolosignCreator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: janisigns.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			ByTable L = null;
			dynamic sign = null;

			
			if ( this.signs.len != 0 ) {
				L = this.signs.Copy();

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					sign = _a;
					
					GlobalFuncs.qdel( sign );
					this.signs.Remove( sign );
				}
				user.WriteMsg( "<span class='notice'>You clear all active holograms.</span>" );
			}
			return null;
		}

		// Function from file: janisigns.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			return false;
		}

		// Function from file: janisigns.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic T = null;
			dynamic H = null;

			
			if ( proximity_flag == true ) {
				
				if ( !this.check_allowed_items( target, true ) ) {
					return false;
				}
				T = GlobalFuncs.get_turf( target );
				H = Lang13.FindIn( typeof(Obj_Effect_Overlay_Holograph), T );

				if ( Lang13.Bool( H ) ) {
					user.WriteMsg( "<span class='notice'>You use " + this + " to destroy " + H + ".</span>" );
					this.signs.Remove( H );
					GlobalFuncs.qdel( H );
				} else if ( this.signs.len < this.max_signs ) {
					H = new Obj_Effect_Overlay_Holograph( GlobalFuncs.get_turf( target ) );
					this.signs.Add( H );
					user.WriteMsg( new Txt( "<span class='notice'>You create " ).a( H ).item().str( " with " ).item( this ).str( ".</span>" ).ToString() );
				} else {
					user.WriteMsg( "<span class='notice'>" + this + " is projecting at max capacity!</span>" );
				}
			}
			return false;
		}

	}

}