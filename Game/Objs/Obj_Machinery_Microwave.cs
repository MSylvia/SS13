// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Microwave : Obj_Machinery {

		public bool operating = false;
		public int dirty = 0;
		public int broken = 0;
		public dynamic max_n_of_items = 10;
		public bool? efficiency = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 5;
			this.active_power_usage = 100;
			this.icon = "icons/obj/kitchen.dmi";
			this.icon_state = "mw";
			this.layer = 2.9;
		}

		// Function from file: microwave.dm
		public Obj_Machinery_Microwave ( dynamic loc = null ) : base( (object)(loc) ) {
			this.create_reagents( 100 );
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Microwave( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 2 ) );
			this.RefreshParts();
			return;
		}

		// Function from file: microwave.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) || Lang13.Bool( this.panel_open ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( this.operating ) {
				this.updateUsrDialog();
				return null;
			}

			dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
			if ( _a=="cook" ) {
				this.cook();
			} else if ( _a=="dispose" ) {
				this.dispose();
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: microwave.dm
		public void broke(  ) {
			EffectSystem_SparkSpread s = null;

			s = new EffectSystem_SparkSpread();
			s.set_up( 2, 1, this );
			s.start();
			this.icon_state = "mwb";
			this.visible_message( "<span class='warning'>The microwave breaks!</span>" );
			this.broken = 2;
			this.flags = null;
			this.operating = false;
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void muck_finish(  ) {
			Obj_Item_Weapon_ReagentContainers_Food_Snacks S = null;

			GlobalFuncs.playsound( this.loc, "sound/machines/ding.ogg", 50, 1 );
			this.visible_message( "<span class='warning'>The microwave gets covered in muck!</span>" );
			this.dirty = 100;
			this.icon_state = "mwbloody";
			this.operating = false;
			this.updateUsrDialog();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) )) {
				S = _a;
				

				if ( Rand13.PercentChance( 50 ) ) {
					new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Badrecipe( this );
					GlobalFuncs.qdel( S );
				}
			}
			return;
		}

		// Function from file: microwave.dm
		public void muck_start(  ) {
			GlobalFuncs.playsound( this.loc, "sound/effects/splat.ogg", 50, 1 );
			this.icon_state = "mwbloody1";
			return;
		}

		// Function from file: microwave.dm
		public void dispose(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				
				O.loc = this.loc;
			}
			Task13.User.WriteMsg( "<span class='notice'>You dispose of the microwave contents.</span>" );
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void stop(  ) {
			GlobalFuncs.playsound( this.loc, "sound/machines/ding.ogg", 50, 1 );
			this.abort();
			return;
		}

		// Function from file: microwave.dm
		public void abort(  ) {
			this.operating = false;
			this.icon_state = "mw";
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void start(  ) {
			this.visible_message( "The microwave turns on.", "<span class='italics'>You hear a microwave humming.</span>" );
			this.operating = true;
			this.icon_state = "mw1";
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public bool has_extra_item(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				

				if ( !( O is Obj_Item_Weapon_ReagentContainers_Food ) && !( O is Obj_Item_Weapon_Grown ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: microwave.dm
		public bool microwaving( int seconds = 0 ) {
			double i = 0;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, seconds )) {
				i = _a;
				

				if ( ( this.stat & 3 ) != 0 ) {
					return false;
				}
				this.f_use_power( 500 );
				Task13.Sleep( Num13.MaxInt( 12 - ( this.efficiency == true ?1:0) * 2, 2 ) );
			}
			return true;
		}

		// Function from file: microwave.dm
		public void cook(  ) {
			Obj_Item_Weapon_ReagentContainers_Food_Snacks F = null;
			dynamic S = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}
			this.start();

			if ( Rand13.PercentChance( Num13.MaxInt( ((int)( 5 / ( this.efficiency == true ?1:0) - 5 )), this.dirty * 5 ) ) ) {
				this.muck_start();

				if ( !this.microwaving( 4 ) ) {
					this.muck_finish();
					return;
				}
				this.muck_finish();
				return;
			} else if ( this.has_extra_item() ) {
				
				if ( !this.microwaving( 4 ) ) {
					this.broke();
					return;
				}
				this.broke();
				return;
			} else {
				
				if ( !this.microwaving( 10 ) ) {
					this.abort();
					return;
				}
				this.stop();

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) )) {
					F = _a;
					

					if ( F.cooked_type != null ) {
						S = Lang13.Call( F.cooked_type, GlobalFuncs.get_turf( this ) );
						F.initialize_cooked_food( S, this.efficiency );
						GlobalFuncs.feedback_add_details( "food_made", "" + F.type );
					} else {
						new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Badrecipe( this );

						if ( this.dirty < 100 ) {
							this.dirty++;
						}
					}
					GlobalFuncs.qdel( F );
				}
				return;
			}
			return;
		}

		// Function from file: microwave.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			ByTable items_counts = null;
			Obj O = null;
			dynamic O2 = null;
			dynamic N = null;
			Browser popup = null;

			
			if ( Lang13.Bool( this.panel_open ) || !Lang13.Bool( this.anchored ) ) {
				return null;
			}
			dat = "<div class='statusDisplay'>";

			if ( this.broken > 0 ) {
				dat += "ERROR: 09734014-A2379-D18746 --Bad memory<BR>Contact your operator or use command line to rebase memory ///git checkout {HEAD} -a commit pull --rebase push {*NEW HEAD*}</div>";
			} else if ( this.operating ) {
				dat += "Microwaving in progress!<BR>Please wait...!</div>";
			} else if ( this.dirty == 100 ) {
				dat += "ERROR: >> 0 --Response input zero<BR>Contact your operator of the device manifactor support.</div>";
			} else {
				items_counts = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					O = _a;
					
					items_counts[O.name]++;
				}

				foreach (dynamic _b in Lang13.Enumerate( items_counts )) {
					O2 = _b;
					
					N = items_counts[O2];
					dat += "" + GlobalFuncs.capitalize( O2 ) + ": " + N + "<BR>";
				}

				if ( items_counts.len == 0 ) {
					dat += "The microwave is empty.</div>";
				} else {
					dat = "<h3>Ingredients:</h3>" + dat + "</div>";
				}
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";action=cook'>Turn on</A>" ).ToString();
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";action=dispose'>Eject ingredients</A><BR>" ).ToString();
			}
			popup = new Browser( user, "microwave", this.name, 300, 300 );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: microwave.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			this.interact( a );
			return null;
		}

		// Function from file: microwave.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return 0;
		}

		// Function from file: microwave.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: microwave.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic clean_spray = null;
			dynamic P = null;
			dynamic T = null;
			int loaded = 0;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks S = null;

			
			if ( this.operating ) {
				return null;
			}

			if ( !( this.broken != 0 ) && this.dirty < 100 ) {
				
				if ( this.default_deconstruction_screwdriver( user, "mw-o", "mw", A ) ) {
					return null;
				}

				if ( this.default_unfasten_wrench( user, A ) ) {
					return null;
				}

				if ( this.exchange_parts( user, A ) ) {
					return null;
				}
			}

			if ( this.default_deconstruction_crowbar( A ) ) {
				return null;
			}

			if ( this.broken > 0 ) {
				
				if ( this.broken == 2 && A is Obj_Item_Weapon_Wirecutters ) {
					((Ent_Static)user).visible_message( "" + user + " starts to fix part of the microwave.", "<span class='notice'>You start to fix part of the microwave...</span>" );

					if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
						((Ent_Static)user).visible_message( "" + user + " fixes part of the microwave.", "<span class='notice'>You fix part of the microwave.</span>" );
						this.broken = 1;
					}
				} else if ( this.broken == 1 && A is Obj_Item_Weapon_Weldingtool ) {
					((Ent_Static)user).visible_message( "" + user + " starts to fix part of the microwave.", "<span class='notice'>You start to fix part of the microwave...</span>" );

					if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
						((Ent_Static)user).visible_message( "" + user + " fixes the microwave.", "<span class='notice'>You fix the microwave.</span>" );
						this.icon_state = "mw";
						this.broken = 0;
						this.dirty = 0;
						this.flags = 4096;
						return 0;
					}
				} else {
					user.WriteMsg( "<span class='warning'>It's broken!</span>" );
					return 1;
				}
			} else if ( A is Obj_Item_Weapon_ReagentContainers_Spray ) {
				clean_spray = A;

				if ( Lang13.Bool( ((Reagents)clean_spray.reagents).has_reagent( "cleaner", Lang13.DoubleNullable( clean_spray.amount_per_transfer_from_this ) ) ) ) {
					((Reagents)clean_spray.reagents).remove_reagent( "cleaner", clean_spray.amount_per_transfer_from_this, true );
					GlobalFuncs.playsound( this.loc, "sound/effects/spray3.ogg", 50, 1, -6 );
					((Ent_Static)user).visible_message( "" + user + " has cleaned the microwave.", "<span class='notice'>You clean the microwave.</span>" );
					this.dirty = 0;
					this.broken = 0;
					this.icon_state = "mw";
					this.flags = 4096;
					this.updateUsrDialog();
					return 1;
				} else {
					user.WriteMsg( "<span class='warning'>You need more space cleaner!<span>" );
					return 1;
				}
			} else if ( A is Obj_Item_Weapon_Soap ) {
				P = A;
				((Ent_Static)user).visible_message( "" + user + " starts to clean the microwave.", "<span class='notice'>You start to clean the microwave...</span>" );

				if ( GlobalFuncs.do_after( user, P.cleanspeed, null, this ) ) {
					((Ent_Static)user).visible_message( "" + user + " has cleaned the microwave.", "<span class='notice'>You clean the microwave.</span>" );
					this.dirty = 0;
					this.broken = 0;
					this.icon_state = "mw";
					this.flags = 4096;
				}
			} else if ( this.dirty == 100 ) {
				user.WriteMsg( "<span class='warning'>It's dirty!</span>" );
				return 1;
			} else if ( A is Obj_Item_Weapon_Storage_Bag_Tray ) {
				T = A;
				loaded = 0;

				foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) )) {
					S = _a;
					

					if ( this.contents.len >= Convert.ToDouble( this.max_n_of_items ) ) {
						user.WriteMsg( "<span class='warning'>" + this + " is full, you cannot put more!</span>" );
						return 1;
					}
					((Obj_Item_Weapon_Storage)T).remove_from_storage( S, this );
					loaded++;
				}

				if ( loaded != 0 ) {
					user.WriteMsg( "<span class='notice'>You insert " + loaded + " items into " + this + ".</span>" );
				}
			} else if ( A is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
				
				if ( this.contents.len >= Convert.ToDouble( this.max_n_of_items ) ) {
					user.WriteMsg( "<span class='warning'>" + this + " is full, you cannot put more!</span>" );
					return 1;
				} else {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						user.WriteMsg( new Txt( "<span class='warning'>" ).the( A ).item().str( " is stuck to your hand, you cannot put it in " ).the( this ).item().str( "!</span>" ).ToString() );
						return 0;
					}
					A.loc = this;
					((Ent_Static)user).visible_message( new Txt().item( user ).str( " has added " ).the( A ).item().str( " to " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You add " ).the( A ).item().str( " to " ).the( this ).item().str( ".</span>" ).ToString() );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: microwave.dm
		public override void RefreshParts(  ) {
			dynamic E = null;
			dynamic max_items = null;
			Obj_Item_Weapon_StockParts_MicroLaser M = null;
			Obj_Item_Weapon_StockParts_MatterBin M2 = null;

			max_items = 10;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				M = _a;
				
				E += M.rating;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M2 = _b;
				
				max_items = M2.rating * 10;
			}
			this.efficiency = Lang13.BoolNullable( E );
			this.max_n_of_items = max_items;
			return;
		}

	}

}