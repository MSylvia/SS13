// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Microwave : Obj_Machinery {

		public bool operating = false;
		public bool opened = false;
		public int dirty = 0;
		public int broken = 0;
		public dynamic available_recipes = null;
		public dynamic acceptable_items = null;
		public dynamic acceptable_reagents = null;
		public ByTable holdingitems = new ByTable();
		public int limit = 100;
		public dynamic speed_multiplier = 1;
		public dynamic scanning_power = 0;
		public dynamic accepts_reagents_from = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 5;
			this.active_power_usage = 100;
			this.machine_flags = 46;
			this.flags = 20480;
			this.pass_flags = 1;
			this.icon = "icons/obj/kitchen.dmi";
			this.icon_state = "mw";
			this.layer = 2.9;
		}

		// Function from file: microwave.dm
		public Obj_Machinery_Microwave ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic type = null;
			Recipe recipe = null;
			dynamic item = null;
			dynamic reagent = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Microwave(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			this.create_reagents( 100 );

			if ( !( GlobalVars.available_recipes != null ) ) {
				GlobalVars.available_recipes = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Recipe) ) - typeof(Recipe) )) {
					type = _a;
					
					GlobalVars.available_recipes.Add( Lang13.Call( type ) );
				}
				GlobalVars.acceptable_items = new ByTable();
				GlobalVars.acceptable_reagents = new ByTable();

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.available_recipes, typeof(Recipe) )) {
					recipe = _d;
					

					foreach (dynamic _b in Lang13.Enumerate( recipe.items )) {
						item = _b;
						
						GlobalVars.acceptable_items.Or( item );
					}

					foreach (dynamic _c in Lang13.Enumerate( recipe.reagents )) {
						reagent = _c;
						
						GlobalVars.acceptable_reagents.Or( reagent );
					}
				}
			}
			return;
		}

		// Function from file: microwave.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( this.operating ) {
				this.updateUsrDialog();
				return null;
			}

			dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
			if ( _a=="cook" ) {
				this.cook();
			} else if ( _a=="dispose" ) {
				this.dispose();
			}
			return null;
		}

		// Function from file: microwave.dm
		public Obj_Item_Weapon_ReagentContainers_Food_Snacks_Badrecipe fail(  ) {
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Badrecipe ffuu = null;
			int amount = 0;
			Obj O = null;
			string id = null;

			ffuu = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Badrecipe( this );
			amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.contents - ffuu, typeof(Obj) )) {
				O = _a;
				
				amount++;

				if ( Lang13.Bool( O.reagents ) ) {
					id = ((Reagents)O.reagents).get_master_reagent_id();

					if ( Lang13.Bool( id ) ) {
						amount += ((Reagents)O.reagents).get_reagent_amount( id ) ?1:0;
					}
				}
				GlobalFuncs.qdel( O );
				O = null;
			}
			((Reagents)this.reagents).clear_reagents();
			((Reagents)ffuu.reagents).add_reagent( "carbon", amount );
			((Reagents)ffuu.reagents).add_reagent( "toxin", amount / 10 );
			return ffuu;
		}

		// Function from file: microwave.dm
		public void broke(  ) {
			Effect_Effect_System_SparkSpread s = null;

			s = new Effect_Effect_System_SparkSpread();
			s.set_up( 2, 1, this );
			s.start();
			this.icon_state = "mwb";
			this.visible_message( "<span class='warning'>The microwave breaks!</span>" );
			this.broken = 2;
			this.flags = 0;
			this.operating = false;
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void muck_finish(  ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/ding.ogg", 50, 1 );
			this.visible_message( "<span class='warning'>The microwave gets covered in muck!</span>" );
			this.dirty = 100;
			this.flags = 0;
			this.icon_state = "mwbloody";
			this.operating = false;
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void muck_start(  ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/splat.ogg", 50, 1 );
			this.icon_state = "mwbloody1";
			return;
		}

		// Function from file: microwave.dm
		public void dispose(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				
				O.loc = this.loc;
			}

			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				this.dirty++;
			}
			((Reagents)this.reagents).clear_reagents();
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You dispose of the microwave contents.</span>" );
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void stop(  ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/ding.ogg", 50, 1 );
			this.operating = false;
			this.icon_state = "mw";
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void abort(  ) {
			this.operating = false;
			this.icon_state = "mw";
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public void start(  ) {
			this.visible_message( "<span class='notice'>The microwave turns on.</span>", "<span class='notice'>You hear a microwave.</span>" );
			this.operating = true;
			this.icon_state = "mw1";
			this.updateUsrDialog();
			return;
		}

		// Function from file: microwave.dm
		public bool has_extra_item(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				

				if ( !( O is Obj_Item_Weapon_ReagentContainers_Food ) && !( O is Obj_Item_Weapon_Grown ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: microwave.dm
		public bool wzhzhzh( int seconds = 0 ) {
			double i = 0;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, seconds )) {
				i = _a;
				

				if ( ( this.stat & 3 ) != 0 ) {
					return false;
				}
				this.f_use_power( 500 );
				Task13.Sleep( ((int)( 10 / Convert.ToDouble( this.speed_multiplier ) )) );
			}
			return true;
		}

		// Function from file: microwave.dm
		public void cook(  ) {
			Recipe recipe = null;
			dynamic cooked = null;
			int halftime = 0;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}
			this.start();

			if ( this.reagents.total_volume == 0 && !Lang13.Bool( Lang13.FindIn( typeof(Obj), this.contents ) ) ) {
				
				if ( !this.wzhzhzh( 10 ) ) {
					this.abort();
					return;
				}
				this.stop();
				return;
			}
			recipe = GlobalFuncs.select_recipe( GlobalVars.available_recipes, this );

			if ( !( recipe != null ) ) {
				this.dirty += 1;

				if ( Rand13.PercentChance( Num13.MaxInt( 10, this.dirty * 5 ) ) ) {
					
					if ( !this.wzhzhzh( 4 ) ) {
						this.abort();
						return;
					}
					this.muck_start();
					this.wzhzhzh( 4 );
					this.muck_finish();
					cooked = this.fail();
					cooked.loc = this.loc;
					return;
				} else if ( this.has_extra_item() ) {
					
					if ( !this.wzhzhzh( 4 ) ) {
						this.abort();
						return;
					}
					this.broke();
					cooked = this.fail();
					cooked.loc = this.loc;
					return;
				} else {
					
					if ( !this.wzhzhzh( 10 ) ) {
						this.abort();
						return;
					}
					this.stop();
					cooked = this.fail();
					cooked.loc = this.loc;
					return;
				}
			} else {
				halftime = Num13.Floor( recipe.time / 10 / 2 );

				if ( !this.wzhzhzh( halftime ) ) {
					this.abort();
					return;
				}

				if ( !this.wzhzhzh( halftime ) ) {
					this.abort();
					cooked = this.fail();
					cooked.loc = this.loc;
					return;
				}
				cooked = recipe.make_food( this );
				this.stop();

				if ( Lang13.Bool( cooked ) ) {
					cooked.loc = this.loc;
				}
				return;
			}
			return;
		}

		// Function from file: microwave.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			ByTable items_counts = null;
			ByTable items_measures = null;
			ByTable items_measures_p = null;
			Obj O = null;
			string display_name = null;
			dynamic O2 = null;
			bool N = false;
			Reagent R = null;
			string display_name2 = null;
			Recipe recipe = null;
			Type O3 = null;
			dynamic display_name3 = null;

			dat = "";

			if ( this.broken > 0 ) {
				dat = "<TT>Bzzzzttttt</TT>";
			} else if ( this.operating ) {
				dat = "<TT>Microwaving in progress!<BR>Please wait...!</TT>";
			} else if ( this.dirty == 100 ) {
				dat = "<TT>This microwave is dirty!<BR>Please clean it before use!</TT>";
			} else {
				items_counts = new ByTable();
				items_measures = new ByTable();
				items_measures_p = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					O = _a;
					
					display_name = O.name;

					if ( O is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat ) {
						items_measures[display_name] = "slab of meat";
						items_measures_p[display_name] = "slabs of meat";
					}

					if ( O is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Carpmeat ) {
						items_measures[display_name] = "fillet of meat";
						items_measures_p[display_name] = "fillets of meat";
					}

					if ( O is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Egg ) {
						items_measures[display_name] = "egg";
						items_measures_p[display_name] = "eggs";
					}

					if ( O is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Tofu ) {
						items_measures[display_name] = "tofu chunk";
						items_measures_p[display_name] = "tofu chunks";
					}

					if ( O is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Donkpocket ) {
						display_name = "Turnovers";
						items_measures[display_name] = "turnover";
						items_measures_p[display_name] = "turnovers";
					}
					items_counts[display_name]++;
				}

				foreach (dynamic _b in Lang13.Enumerate( items_counts )) {
					O2 = _b;
					
					N = Lang13.Bool( items_counts[O2] );

					if ( !items_measures.Contains( O2 ) ) {
						dat += new Txt( "<B>" ).item( GlobalFuncs.capitalize( O2 ) ).str( ":</B> " ).item( N ).str( " " ).item( String13.ToLower( O2 ) ).s().str( "<BR>" ).ToString();
					} else if ( N ) {
						dat += "<B>" + GlobalFuncs.capitalize( O2 ) + ":</B> " + N + " " + items_measures[O2] + "<BR>";
					} else {
						dat += "<B>" + GlobalFuncs.capitalize( O2 ) + ":</B> " + N + " " + items_measures_p[O2] + "<BR>";
					}
				}

				foreach (dynamic _c in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					R = _c;
					
					display_name2 = R.name;

					if ( R.id == "capsaicin" ) {
						display_name2 = "Hotsauce";
					}

					if ( R.id == "frostoil" ) {
						display_name2 = "Coldsauce";
					}
					dat += new Txt( "<B>" ).item( display_name2 ).str( ":</B> " ).item( R.volume ).str( " unit" ).s().str( "<BR>" ).ToString();
				}

				if ( items_counts.len == 0 && this.reagents.reagent_list.len == 0 ) {
					dat = "<B>The microwave is empty</B><BR>";
				} else {
					dat = "<b>Ingredients:</b><br>" + dat + "<HR><BR>";

					if ( Convert.ToDouble( this.scanning_power ) >= 2 ) {
						recipe = GlobalFuncs.select_recipe( GlobalVars.available_recipes, this );

						if ( !( recipe != null ) ) {
							dat += "<font color = 'red'>ERROR: No matching recipe found!</font><br>";
						} else {
							O3 = recipe.result;
							display_name3 = Lang13.Initial( O3, "name" );
							dat += "<b>Expected result: </b>" + display_name3 + "<br>";
						}
					}
				}
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";action=cook'>Turn on!<BR><A href='?src=" ).Ref( this ).str( ";action=dispose'>Eject ingredients!<BR>" ).ToString();
			}
			Interface13.Browse( user, "<HEAD><TITLE>Microwave Controls</TITLE></HEAD><TT>" + dat + "</TT>", "window=microwave" );
			GlobalFuncs.onclose( user, "microwave" );
			return null;
		}

		// Function from file: microwave.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			((Mob)a).set_machine( this );
			this.interact( a );
			return null;
		}

		// Function from file: microwave.dm
		public override dynamic attack_ai( dynamic user = null ) {
			dynamic R = null;

			
			if ( user is Mob_Living_Silicon_Robot ) {
				R = user;

				if ( R.module is Obj_Item_Weapon_RobotModule_Butler ) {
					((Mob)user).set_machine( this );
					this.interact( user );
					return 1;
				}
				GlobalFuncs.to_chat( user, "<span class='warning'>You aren't equipped to interface with technology this old!</span>" );
				return 0;
			}
			return null;
		}

		// Function from file: microwave.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: microwave.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic R = null;
			dynamic B = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks G = null;
			Reagent R2 = null;
			dynamic G2 = null;

			
			if ( this.broken > 0 ) {
				
				if ( this.broken == 2 && a is Obj_Item_Weapon_Screwdriver ) {
					((Ent_Static)b).visible_message( "<span class='notice'>" + b + " starts to fix part of the microwave.</span>", "<span class='notice'>You start to fix part of the microwave.</span>" );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						((Ent_Static)b).visible_message( "<span class='notice'>" + b + " fixes part of the microwave.</span>", "<span class='notice'>You have fixed part of the microwave.</span>" );
						this.broken = 1;
					}
				} else if ( this.broken == 1 && a is Obj_Item_Weapon_Wrench ) {
					((Ent_Static)b).visible_message( "<span class='notice'>" + b + " starts to fix part of the microwave.</span>", "<span class='notice'>You start to fix part of the microwave.</span>" );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						((Ent_Static)b).visible_message( "<span class='notice'>" + b + " fixes the microwave.</span>", "<span class='notice'>You have fixed the microwave.</span>" );
						this.icon_state = "mw";
						this.broken = 0;
						this.dirty = 0;
						this.flags = 4096;
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>It's broken!</span>" );
					return 1;
				}
			} else if ( this.dirty == 100 ) {
				R = a;

				if ( R is Obj_Item_Weapon_ReagentContainers ) {
					
					if ( R.reagents.amount_cache.len == 1 && ((Reagents)R.reagents).has_reagent( "cleaner", 5 ) ) {
						((Ent_Static)b).visible_message( "<span class='notice'>" + b + " starts to clean the microwave.</span>", "<span class='notice'>You start to clean the microwave.</span>" );

						if ( GlobalFuncs.do_after( b, this, 20 ) ) {
							((Reagents)R.reagents).remove_reagent( "cleaner", 5 );
							((Ent_Static)b).visible_message( "<span class='notice'>" + b + "  has cleaned  the microwave.</span>", "<span class='notice'>You have cleaned the microwave.</span>" );
							this.dirty = 0;
							this.broken = 0;
							this.icon_state = "mw";
							this.flags = 4096;
							return 1;
						}
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>It's too dirty!</span>" );
					return 1;
				}
			}

			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( this.holdingitems != null && this.holdingitems.len >= this.limit ) {
				GlobalFuncs.to_chat( Task13.User, "The machine cannot hold anymore items." );
				return 1;
			} else if ( a is Obj_Item_Weapon_Storage_Bag_Plants || a is Obj_Item_Weapon_Storage_Bag_Food_Borg ) {
				B = a;

				foreach (dynamic _a in Lang13.Enumerate( a.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) )) {
					G = _a;
					
					((Obj_Item_Weapon_Storage)B).remove_from_storage( G, this );

					if ( this.contents != null && this.contents.len >= this.limit ) {
						GlobalFuncs.to_chat( b, "You fill the Microwave to the brim." );
						break;
					}
				}

				if ( !( a.contents.len != 0 ) ) {
					GlobalFuncs.to_chat( b, new Txt( "You empty " ).the( a ).item().str( " into the Microwave." ).ToString() );
					this.updateUsrDialog();
					return 0;

					if ( !GlobalFuncs.is_type_in_list( a.contents ) ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>Your " + a + " contains components unsuitable for cookery.</span>" );
						return 1;
					}
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.holdingitems.Add( a );
					this.updateUsrDialog();
				}
				return 1;
			} else if ( GlobalFuncs.is_type_in_list( a, GlobalVars.acceptable_items ) ) {
				
				if ( a is Obj_Item_Stack && Convert.ToDouble( a.amount ) > 1 ) {
					Lang13.Call( a.type, this );
					a.use( 1 );
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " has added one of " ).item( a ).str( " to " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You add one of " ).item( a ).str( " to " ).the( this ).item().str( ".</span>" ).ToString() );
				} else if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " has added " ).the( a ).item().str( " to " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You add " ).the( a ).item().str( " to " ).the( this ).item().str( ".</span>" ).ToString() );
				}
			} else if ( GlobalFuncs.is_type_in_list( a, GlobalVars.accepts_reagents_from ) ) {
				
				if ( !Lang13.Bool( a.reagents ) ) {
					return 1;
				}

				foreach (dynamic _b in Lang13.Enumerate( a.reagents.reagent_list, typeof(Reagent) )) {
					R2 = _b;
					

					if ( !GlobalVars.acceptable_reagents.Contains( R2.id ) ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>Your " + a + " contains components unsuitable for cookery.</span>" );
						return 1;
					}
				}
			} else if ( a is Obj_Item_Weapon_Grab ) {
				G2 = a;
				GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>This is ridiculous. You can not fit " ).the( G2.affecting ).item().str( " in this " ).item( this ).str( ".</span>" ).ToString() );
				return 1;
			} else {
				GlobalFuncs.to_chat( b, "<span class='warning'>You have no idea what you can cook with this " + a + ".</span>" );
				return 1;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: microwave.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts_MicroLaser M = null;
			Obj_Item_Weapon_StockParts_ScanningModule M2 = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				M = _a;
				
				T += M.rating - 1;
			}
			this.speed_multiplier = Lang13.Initial( this, "speed_multiplier" ) + T * 0.5;
			T = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_ScanningModule) )) {
				M2 = _b;
				
				T += M2.rating - 1;
			}
			this.scanning_power = Lang13.Initial( this, "scanning_power" ) + T;
			return null;
		}

	}

}