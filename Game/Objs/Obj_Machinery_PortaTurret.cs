// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortaTurret : Obj_Machinery {

		public string lasercolor = "";
		public bool raised = false;
		public bool raising = false;
		public double health = 80;
		public bool locked = true;
		public dynamic installation = null;
		public bool gun_charge = false;
		public Type projectile = null;
		public Type eprojectile = null;
		public double reqpower = 0;
		public string fire_sound = "sound/weapons/laser.ogg";
		public string efire_sound = "sound/weapons/laser.ogg";
		public bool? iconholder = null;
		public bool egun = false;
		public Obj_Machinery_PortaTurretCover cover = null;
		public bool last_fired = false;
		public int shot_delay = 15;
		public bool check_records = true;
		public bool criminals = true;
		public bool auth_weapons = false;
		public bool stun_all = false;
		public bool check_anomalies = true;
		public bool ai = false;
		public bool attacked = false;
		public bool on = true;
		public bool disabled = false;
		public Effect_Effect_System_SparkSpread spark_system = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 45;
			this.anchored = 1;
			this.idle_power_usage = 50;
			this.active_power_usage = 300;
			this.req_access = new ByTable(new object [] { 1 });
			this.machine_flags = 1;
			this.icon = "icons/obj/turrets.dmi";
			this.icon_state = "grey_target_prism";
		}

		// Function from file: portable_turret.dm
		public Obj_Machinery_PortaTurret ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon_state = "" + this.lasercolor + "grey_target_prism";
			this.spark_system = new Effect_Effect_System_SparkSpread();
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.attach( this );
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.update_gun();
				return;
			}));
			return;
		}

		// Function from file: portable_turret.dm
		public override dynamic process(  ) {
			ByTable targets = null;
			ByTable secondarytargets = null;
			Mob_Living_SimpleAnimal C = null;
			Mob_Living_Carbon C2 = null;
			int dst = 0;
			dynamic t = null;
			dynamic M = null;
			dynamic t2 = null;

			
			if ( this.cover == null && Lang13.Bool( this.anchored ) ) {
				
				if ( ( this.stat & 1 ) != 0 ) {
					GlobalFuncs.qdel( this.cover );
				} else {
					this.cover = new Obj_Machinery_PortaTurretCover( this.loc );
					this.cover.Parent_Turret = this;
				}
			}

			if ( ( this.stat & 3 ) != 0 ) {
				this.popDown();
				return null;
			}

			if ( !this.on ) {
				this.popDown();
				return null;
			}
			targets = new ByTable();
			secondarytargets = new ByTable();

			if ( this.check_anomalies ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Mob_Living_SimpleAnimal) )) {
					C = _a;
					

					if ( Lang13.Bool( C.stat ) ) {
						continue;
					}

					if ( Lang13.Bool( C.flags & 128 ) ) {
						continue;
					}

					if ( GlobalFuncs.dd_hasprefix( C.faction, "lazarus" ) != 0 ) {
						continue;
					}
					targets.Add( C );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Mob_Living_Carbon) )) {
				C2 = _b;
				

				if ( Lang13.Bool( C2.flags & 128 ) ) {
					continue;
				}

				if ( C2 is Mob_Living_Carbon_Alien && this.check_anomalies ) {
					
					if ( !Lang13.Bool( C2.stat ) ) {
						targets.Add( C2 );
					}
				} else if ( this.emagged != 0 ) {
					targets.Add( C2 );
				} else {
					
					if ( Lang13.Bool( C2.stat ) || Lang13.Bool( C2.handcuffed ) ) {
						continue;
					}
					dst = Map13.GetDistance( this, C2 );

					if ( dst > 7 ) {
						continue;
					}

					if ( this.ai ) {
						
						if ( C2.lying == true ) {
							
							if ( Lang13.Bool( this.lasercolor ) ) {
								continue;
							} else {
								secondarytargets.Add( C2 );
								continue;
							}
						} else {
							targets.Add( C2 );
							continue;
						}
					}

					if ( C2 is Mob_Living_Carbon_Human ) {
						
						if ( this.assess_perp( C2 ) < 4 ) {
							continue;
						}
					} else if ( C2 is Mob_Living_Carbon_Monkey ) {
						continue;
					}

					if ( C2.lying == true ) {
						secondarytargets.Add( C2 );
						continue;
					}
					targets.Add( C2 );
				}
			}

			if ( targets.len > 0 ) {
				t = Rand13.PickFromTable( targets );

				if ( t is Mob_Living ) {
					M = t;

					if ( Convert.ToInt32( M.stat ) != 2 ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.popUp();
							return;
						}));
						this.dir = Map13.GetDistance( this, M );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.shootAt( M );
							return;
						}));
					}
				}

				if ( Rand13.PercentChance( 15 ) ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/move1.wav", 60, 1 );
					} else {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/move2.wav", 60, 1 );
					}
				}
			} else if ( secondarytargets.len > 0 ) {
				t2 = Rand13.PickFromTable( secondarytargets );

				if ( t2 is Mob_Living ) {
					
					if ( Convert.ToInt32( t2.stat ) != 2 ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.popUp();
							return;
						}));
						this.dir = Map13.GetDistance( this, t2 );
						this.shootAt( t2 );
					}
				}

				if ( Rand13.PercentChance( 15 ) ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/move1.wav", 60, 1 );
					} else {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/move2.wav", 60, 1 );
					}
				}
			} else {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.popDown();
					return;
				}));
			}
			return null;
		}

		// Function from file: portable_turret.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( ( severity ??0) >= 3 ) {
				GlobalFuncs.qdel( this );
			} else {
				this.die();
			}
			return false;
		}

		// Function from file: portable_turret.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( this.on ) {
				this.check_records = Lang13.Bool( Rand13.Pick(new object [] { 0, 1 }) );
				this.criminals = Lang13.Bool( Rand13.Pick(new object [] { 0, 1 }) );
				this.auth_weapons = Lang13.Bool( Rand13.Pick(new object [] { 0, 1 }) );
				this.stun_all = Lang13.Bool( Rand13.Pick(new object [] { 0, 0, 0, 0, 1 }) );

				if ( Rand13.PercentChance( 5 ) ) {
					this.emagged = 1;
				}
				this.on = false;
				Task13.Sleep( Rand13.Int( 60, 600 ) );

				if ( !this.on ) {
					this.on = true;
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: portable_turret.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( this.on ) {
				
				if ( !this.attacked && !( this.emagged != 0 ) ) {
					this.attacked = true;
					Task13.Schedule( 0, (Task13.Closure)(() => {
						Task13.Sleep( 60 );
						this.attacked = false;
						return;
					}));
				}
			}
			this.health -= Convert.ToDouble( Proj.damage );
			base.bullet_act( (object)(Proj), (object)(def_zone) );

			if ( Rand13.PercentChance( 45 ) && Convert.ToDouble( Proj.damage ) > 0 ) {
				this.spark_system.start();
			}

			if ( this.health <= 0 ) {
				this.die();
			}

			if ( this.lasercolor == "b" && !this.disabled ) {
				
				if ( Proj is Obj_Item_Projectile_Beam_Lastertag_Red ) {
					this.disabled = true;
					GlobalFuncs.qdel( Proj );
					Proj = null;
					Task13.Sleep( 100 );
					this.disabled = false;
				}
			}

			if ( this.lasercolor == "r" && !this.disabled ) {
				
				if ( Proj is Obj_Item_Projectile_Beam_Lastertag_Blue ) {
					this.disabled = true;
					GlobalFuncs.qdel( Proj );
					Proj = null;
					Task13.Sleep( 100 );
					this.disabled = false;
				}
			}
			return null;
		}

		// Function from file: portable_turret.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic Gun = null;
			Game_Data M = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				
				if ( a is Obj_Item_Weapon_Crowbar ) {
					GlobalFuncs.to_chat( b, "You begin prying the metal coverings off." );
					Task13.Sleep( 20 );

					if ( Rand13.PercentChance( 70 ) ) {
						GlobalFuncs.to_chat( b, "You remove the turret and salvage some components." );

						if ( Lang13.Bool( this.installation ) ) {
							Gun = Lang13.Call( this.installation, this.loc );
							Gun.power_supply.charge = this.gun_charge;
							Gun.update_icon();
							this.lasercolor = null;
						}

						if ( Rand13.PercentChance( 50 ) ) {
							M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), this.loc );
							((dynamic)M).amount = Rand13.Int( 1, 4 );
						}

						if ( Rand13.PercentChance( 50 ) ) {
							new Obj_Item_Device_Assembly_ProxSensor( Map13.GetTile( this.x, this.y, this.z ) );
						}
					} else {
						GlobalFuncs.to_chat( b, "You remove the turret but did not manage to salvage anything." );
					}
					GlobalFuncs.qdel( this );
				}
				return null;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_Wrench && !this.on ) {
				
				if ( this.raised ) {
					return null;
				}

				if ( !Lang13.Bool( this.anchored ) ) {
					this.anchored = 1;
					this.invisibility = 45;
					this.icon_state = "" + this.lasercolor + "grey_target_prism";
					GlobalFuncs.to_chat( b, "You secure the exterior bolts on the turret." );
					this.cover = new Obj_Machinery_PortaTurretCover( this.loc );
					this.cover.Parent_Turret = this;
				} else {
					this.anchored = 0;
					GlobalFuncs.to_chat( b, "You unsecure the exterior bolts on the turret." );
					this.icon_state = "turretCover";
					this.invisibility = 0;
					GlobalFuncs.qdel( this.cover );
				}
			} else if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.allowed( b ) ) {
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "Controls are now " + ( this.locked ? "locked." : "unlocked." ) );
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
			} else {
				((Mob)b).delayNextAttack( 10 );
				this.health -= Convert.ToDouble( a.force * 0.5 );

				if ( this.health <= 0 ) {
					this.die();
				}

				if ( Convert.ToDouble( a.force * 0.5 ) > 1 ) {
					
					if ( !this.attacked && !( this.emagged != 0 ) ) {
						this.attacked = true;
						Task13.Schedule( 0, (Task13.Closure)(() => {
							Task13.Sleep( 60 );
							this.attacked = false;
							return;
						}));
					}
				}
			}
			return null;
		}

		// Function from file: portable_turret.dm
		public override int emag( dynamic user = null ) {
			dynamic O = null;

			
			if ( !( this.emagged != 0 ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You short out " + this + "'s threat assessment circuits.</span>" );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						O = _a;
						
						O.show_message( "<span class='warning'>" + this + " hums oddly...</span>", 1 );
					}
					return;
				}));
				this.emagged = 1;
				this.on = false;
				Task13.Sleep( 60 );
				this.on = true;
			}
			return 0;
		}

		// Function from file: portable_turret.dm
		public override dynamic power_change(  ) {
			
			if ( !Lang13.Bool( this.anchored ) ) {
				this.icon_state = "turretCover";
				return null;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "" + this.lasercolor + "destroyed_target_prism";
			} else if ( Lang13.Bool( this.powered() ) ) {
				
				if ( this.on ) {
					
					if ( this.installation == typeof(Obj_Item_Weapon_Gun_Energy_Laser) || this.installation == typeof(Obj_Item_Weapon_Gun_Energy_PulseRifle) ) {
						this.icon_state = "" + this.lasercolor + "orange_target_prism";
					} else {
						this.icon_state = "" + this.lasercolor + "target_prism";
					}
				} else {
					this.icon_state = "" + this.lasercolor + "grey_target_prism";
				}
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.icon_state = "" + this.lasercolor + "grey_target_prism";
					this.stat |= 2;
					return;
				}));
			}
			return null;
		}

		// Function from file: portable_turret.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["power"] ) && this.allowed( Task13.User ) ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					this.on = !this.on;
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>It has to be secured first!</span>" );
				}
				this.updateUsrDialog();
				return null;
			}

			dynamic _a = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _a=="authweapon" ) {
				this.auth_weapons = !this.auth_weapons;
			} else if ( _a=="checkrecords" ) {
				this.check_records = !this.check_records;
			} else if ( _a=="shootcrooks" ) {
				this.criminals = !this.criminals;
			} else if ( _a=="shootall" ) {
				this.stun_all = !this.stun_all;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: portable_turret.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic dat = null;
			dynamic H = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( !Lang13.Bool( this.lasercolor ) ) {
				dat += "\n<TT><B>Automatic Portable Turret Installation</B></TT><BR><BR>\nStatus: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.on ? "On" : "Off" ) ).str( "</A>" ).ToString() + "<BR>\nBehaviour controls are " + ( this.locked ? "locked" : "unlocked" );

				if ( !this.locked ) {
					dat += "<BR>\nCheck for Weapon Authorization: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=authweapon'>" ).item( ( this.auth_weapons ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nCheck Security Records: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=checkrecords'>" ).item( ( this.check_records ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize Identified Criminals: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=shootcrooks'>" ).item( ( this.criminals ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize All Non-Security and Non-Command Personnel: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=shootall'>" ).item( ( this.stun_all ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize All Unidentified Life Signs: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=checkxenos'>" ).item( ( this.check_anomalies ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>";
				}
			} else {
				
				if ( a is Mob_Living_Carbon_Human ) {
					H = a;

					if ( this.lasercolor == "b" && H.wear_suit is Obj_Item_Clothing_Suit_Redtag ) {
						return _default;
					}

					if ( this.lasercolor == "r" && H.wear_suit is Obj_Item_Clothing_Suit_Bluetag ) {
						return _default;
					}
				}
				dat += "\n<TT><B>Automatic Portable Turret Installation</B></TT><BR><BR>\nStatus: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.on ? "On" : "Off" ) ).str( "</A>" ).ToString() + "<BR>";
			}
			Interface13.Browse( a, "<HEAD><TITLE>Automatic Portable Turret Installation</TITLE></HEAD>" + dat, "window=autosec" );
			GlobalFuncs.onclose( a, "autosec" );
			return _default;
		}

		// Function from file: portable_turret.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: portable_turret.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalFuncs.qdel( this.cover );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: portable_turret.dm
		public void shootAt( dynamic target = null ) {
			dynamic H = null;
			dynamic T = null;
			dynamic U = null;
			dynamic A = null;

			
			if ( this.disabled ) {
				return;
			}

			if ( Lang13.Bool( this.lasercolor ) && target is Mob_Living_Carbon_Human ) {
				H = target;

				if ( H.lying == true ) {
					return;
				}
			}

			if ( !( this.emagged != 0 ) ) {
				
				if ( this.last_fired || !this.raised ) {
					return;
				}
				this.last_fired = true;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					Task13.Sleep( this.shot_delay );
					this.last_fired = false;
					return;
				}));
			}
			T = GlobalFuncs.get_turf( this );
			U = GlobalFuncs.get_turf( target );

			if ( !( T is Tile ) || !( U is Tile ) ) {
				return;
			}

			if ( !this.raised ) {
				return;
			}

			if ( this.iconholder == true ) {
				this.icon_state = "" + this.lasercolor + "target_prism";
			} else {
				this.icon_state = "" + this.lasercolor + "orange_target_prism";
			}

			if ( this.emagged != 0 ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), this.efire_sound, 75, 1 );
				A = Lang13.Call( this.eprojectile, this.loc );
			} else {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), this.fire_sound, 75, 1 );
				A = Lang13.Call( this.projectile, this.loc );
			}
			A.original = target.loc;

			if ( !( this.emagged != 0 ) ) {
				this.f_use_power( this.reqpower );
			} else {
				this.f_use_power( this.reqpower * 2 );
			}
			A.starting = T;
			A.shot_from = this;
			A.current = T;
			A.yo = Convert.ToDouble( U.y - T.y );
			A.xo = Convert.ToDouble( U.x - T.x );
			Task13.Schedule( 1, (Task13.Closure)(() => {
				((Obj_Item_Projectile)A).OnFired();
				((Obj)A).process();
				return;
			}));
			return;
		}

		// Function from file: portable_turret.dm
		public int assess_perp( Mob_Living_Carbon perp = null ) {
			int threatcount = 0;
			Data_Record E = null;
			string perpname = null;
			dynamic id = null;
			Data_Record R = null;

			threatcount = 0;

			if ( this.emagged != 0 ) {
				return 10;
			}

			if ( this.stun_all && !this.allowed( perp ) || this.attacked && !this.allowed( perp ) ) {
				
				if ( !this.allowed( perp ) ) {
					return 10;
				}
			}

			if ( this.auth_weapons ) {
				
				if ( ((dynamic)perp).wear_id == null || ((Obj_Item)((dynamic)perp).wear_id).GetID() is Obj_Item_Weapon_Card_Id_Syndicate ) {
					
					if ( this.allowed( perp ) && !Lang13.Bool( this.lasercolor ) ) {
						return 0;
					}

					if ( perp.l_hand is Obj_Item_Weapon_Gun && !( perp.l_hand is Obj_Item_Weapon_Gun_Projectile_Shotgun ) || perp.l_hand is Obj_Item_Weapon_Melee_Baton ) {
						threatcount += 4;
					}

					if ( perp.r_hand is Obj_Item_Weapon_Gun && !( perp.r_hand is Obj_Item_Weapon_Gun_Projectile_Shotgun ) || perp.r_hand is Obj_Item_Weapon_Melee_Baton ) {
						threatcount += 4;
					}

					if ( ((dynamic)perp).belt is Obj_Item_Weapon_Gun || ((dynamic)perp).belt is Obj_Item_Weapon_Melee_Baton ) {
						threatcount += 2;
					}
				}
			}

			if ( this.lasercolor == "b" ) {
				threatcount = 0;

				if ( ((dynamic)perp).wear_suit is Obj_Item_Clothing_Suit_Redtag ) {
					threatcount += 4;
				}

				if ( perp.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag || perp.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
					threatcount += 4;
				}

				if ( ((dynamic)perp).belt is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
					threatcount += 2;
				}
			}

			if ( this.lasercolor == "r" ) {
				threatcount = 0;

				if ( ((dynamic)perp).wear_suit is Obj_Item_Clothing_Suit_Bluetag ) {
					threatcount += 4;
				}

				if ( perp.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag || perp.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
					threatcount += 4;
				}

				if ( ((dynamic)perp).belt is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
					threatcount += 2;
				}
			}

			if ( this.check_records ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
					E = _b;
					
					perpname = perp.name;

					if ( Lang13.Bool( ((dynamic)perp).wear_id ) ) {
						id = ((Obj_Item)((dynamic)perp).wear_id).GetID();

						if ( Lang13.Bool( id ) ) {
							perpname = id.registered_name;
						}
					}

					if ( E.fields["name"] == perpname ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
							R = _a;
							

							if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "*Arrest*" ) {
								threatcount = 4;
								break;
							}
						}
					}
				}
			}
			return threatcount;
		}

		// Function from file: portable_turret.dm
		public void popDown(  ) {
			
			if ( this.disabled ) {
				return;
			}

			if ( this.raising || !this.raised ) {
				return;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				return;
			}
			this.layer = 3;
			this.raising = true;
			Icon13.Flick( "popdown", this.cover );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/open.wav", 60, 1 );
			Task13.Sleep( 10 );
			this.raising = false;
			this.cover.icon_state = "turretCover";
			this.raised = false;
			this.invisibility = 2;
			this.icon_state = "" + this.lasercolor + "grey_target_prism";
			return;
		}

		// Function from file: portable_turret.dm
		public void popUp(  ) {
			
			if ( this.disabled ) {
				return;
			}

			if ( this.raising || this.raised ) {
				return;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				return;
			}
			this.invisibility = 0;
			this.raising = true;
			Icon13.Flick( "popup", this.cover );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/open.wav", 60, 1 );
			Task13.Sleep( 5 );
			Task13.Sleep( 5 );
			this.raising = false;
			this.cover.icon_state = "openTurretCover";
			this.raised = true;
			this.layer = 4;
			return;
		}

		// Function from file: portable_turret.dm
		public void die(  ) {
			this.health = 0;
			this.density = false;
			this.stat |= 1;
			this.icon_state = "" + this.lasercolor + "destroyed_target_prism";
			this.invisibility = 0;
			this.spark_system.start();
			this.density = true;
			GlobalFuncs.qdel( this.cover );
			return;
		}

		// Function from file: portable_turret.dm
		public void update_gun(  ) {
			dynamic E = null;

			
			if ( !Lang13.Bool( this.installation ) ) {
				this.projectile = typeof(Obj_Item_Projectile_Energy_Electrode);
				this.eprojectile = typeof(Obj_Item_Projectile_Beam);
				this.reqpower = 200;
				this.iconholder = true;
			} else {
				E = Lang13.Call( this.installation );

				switch ((Type)( E.type )) {
					case typeof(Obj_Item_Weapon_Gun_Energy_Laser_Bluetag):
						this.projectile = typeof(Obj_Item_Projectile_Beam_Lastertag_Blue);
						this.eprojectile = typeof(Obj_Item_Projectile_Beam_Lastertag_Omni);
						this.iconholder = null;
						this.reqpower = 100;
						this.lasercolor = "b";
						this.req_access = new ByTable(new object [] { GlobalVars.access_maint_tunnels });
						this.check_records = false;
						this.criminals = false;
						this.auth_weapons = true;
						this.stun_all = false;
						this.check_anomalies = false;
						this.shot_delay = 30;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Laser_Redtag):
						this.projectile = typeof(Obj_Item_Projectile_Beam_Lastertag_Red);
						this.eprojectile = typeof(Obj_Item_Projectile_Beam_Lastertag_Omni);
						this.iconholder = null;
						this.reqpower = 100;
						this.lasercolor = "r";
						this.req_access = new ByTable(new object [] { GlobalVars.access_maint_tunnels });
						this.check_records = false;
						this.criminals = false;
						this.auth_weapons = true;
						this.stun_all = false;
						this.check_anomalies = false;
						this.shot_delay = 30;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Laser_Practice):
						this.projectile = typeof(Obj_Item_Projectile_Beam_Practice);
						this.eprojectile = typeof(Obj_Item_Projectile_Beam);
						this.iconholder = null;
						this.reqpower = 100;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_PulseRifle):
						this.projectile = typeof(Obj_Item_Projectile_Beam_Pulse);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 700;
						this.fire_sound = "sound/weapons/pulse.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Staff):
						this.projectile = typeof(Obj_Item_Projectile_Change);
						this.eprojectile = this.projectile;
						this.iconholder = true;
						this.reqpower = 700;
						this.fire_sound = "sound/weapons/radgun.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Ionrifle):
						this.projectile = typeof(Obj_Item_Projectile_Ion);
						this.eprojectile = this.projectile;
						this.iconholder = true;
						this.reqpower = 700;
						this.fire_sound = "sound/weapons/ion.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Taser):
						this.projectile = typeof(Obj_Item_Projectile_Energy_Electrode);
						this.eprojectile = this.projectile;
						this.iconholder = true;
						this.reqpower = 200;
						this.fire_sound = "sound/weapons/Taser.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Stunrevolver):
						this.projectile = typeof(Obj_Item_Projectile_Energy_Electrode);
						this.eprojectile = this.projectile;
						this.iconholder = true;
						this.reqpower = 200;
						this.fire_sound = "sound/weapons/Gunshot.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Lasercannon):
						this.projectile = typeof(Obj_Item_Projectile_Beam_Heavylaser);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 600;
						this.fire_sound = "sound/weapons/lasercannonfire.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Decloner):
						this.projectile = typeof(Obj_Item_Projectile_Energy_Declone);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 600;
						this.fire_sound = "sound/weapons/pulse3.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Crossbow_Largecrossbow):
						this.projectile = typeof(Obj_Item_Projectile_Energy_Bolt_Large);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 125;
						this.fire_sound = "sound/weapons/ebow.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Crossbow):
						this.projectile = typeof(Obj_Item_Projectile_Energy_Bolt);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 50;
						this.fire_sound = "sound/weapons/ebow.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Laser):
						this.projectile = typeof(Obj_Item_Projectile_Beam);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 500;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Ricochet):
						this.projectile = typeof(Obj_Item_Projectile_Ricochet);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 500;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Bison):
						this.projectile = typeof(Obj_Item_Projectile_Beam_Bison);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 250;
						this.fire_sound = "sound/weapons/bison_fire.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Polarstar_Spur):
						this.projectile = typeof(Obj_Item_Projectile_Spur);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 700;
						this.fire_sound = "sound/weapons/spur_high.ogg";
						this.efire_sound = this.fire_sound;
						break;
					case typeof(Obj_Item_Weapon_Gun_Energy_Polarstar):
						this.projectile = typeof(Obj_Item_Projectile_Spur_Polarstar);
						this.eprojectile = this.projectile;
						this.iconholder = null;
						this.reqpower = 400;
						this.fire_sound = "sound/weapons/spur_high.ogg";
						this.efire_sound = this.fire_sound;
						break;
					default:
						this.projectile = typeof(Obj_Item_Projectile_Energy_Electrode);
						this.eprojectile = typeof(Obj_Item_Projectile_Beam);
						this.iconholder = true;
						this.egun = true;
						this.reqpower = 200;
						this.fire_sound = "sound/weapons/Taser.ogg";
						break;
				}

				if ( !( this.eprojectile != null ) || !( this.projectile != null ) ) {
					this.projectile = typeof(Obj_Item_Projectile_Energy_Electrode);
					this.eprojectile = typeof(Obj_Item_Projectile_Beam);
					this.iconholder = true;
					this.egun = true;
					this.reqpower = 200;
					this.fire_sound = "sound/weapons/Taser.ogg";
				}
			}
			return;
		}

	}

}