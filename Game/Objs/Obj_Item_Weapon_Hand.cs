// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Hand : Obj_Item_Weapon {

		public bool concealed = false;
		public ByTable cards = new ByTable();
		public HtmlInterface_Cards hi = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.icon = "playing_cards.dmi";
			this.icon_state = "empty";
		}

		// Function from file: cards.dm
		public Obj_Item_Weapon_Hand ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.hi = new HtmlInterface_Cards( this, "Your hand", 540, 302 );
			this.update_conceal();
			return;
		}

		// Function from file: cards.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic card = null;

			
			if ( hsrc is HtmlInterfaceClient ) {
				
				dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
				if ( _a=="play_card" ) {
					card = Lang13.FindObj( href_list["card"] );

					if ( this.cards.Contains( card ) ) {
						this.__CallVerb("Discard", card );
					}
				} else if ( _a=="toggle_conceal" ) {
					this.__CallVerb("Toggle conceal" );
				}
			}
			return null;
		}

		// Function from file: cards.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			Playingcard P = null;
			Image I = null;
			int origin = 0;
			int offset = 0;
			int i = 0;
			Image I2 = null;
			Playingcard P2 = null;
			string html = null;
			Playingcard card = null;

			
			if ( !( this.cards.len != 0 ) ) {
				GlobalFuncs.qdel( this );
			} else {
				
				if ( this.cards.len > 1 ) {
					this.name = "hand of cards";
					this.desc = "Some playing cards.";
				} else {
					this.name = "a playing card";
					this.desc = "A playing card.";
				}
				this.overlays.len = 0;

				if ( this.cards.len == 1 ) {
					P = this.cards[1];
					I = new Image( this.icon, ( this.concealed ? "card_back" : "" + P.card_icon ) );
					I.pixel_x = I.pixel_x + Rand13.Int( 10 ) + -5;
					I.pixel_y = I.pixel_y + Rand13.Int( 10 ) + -5;
					this.overlays.Add( I );
				} else {
					origin = -12;
					offset = Num13.Floor( 32 / this.cards.len );
					i = 0;

					foreach (dynamic _a in Lang13.Enumerate( this.cards, typeof(Playingcard) )) {
						P2 = _a;
						
						I2 = new Image( this.icon, ( this.concealed ? "card_back" : "" + P2.card_icon ) );
						I2.pixel_x = origin + offset * i;
						this.overlays.Add( I2 );
						i = i + 1;
					}
				}
				html = "";

				foreach (dynamic _b in Lang13.Enumerate( this.cards, typeof(Playingcard) )) {
					card = _b;
					
					html = html + new Txt( "<a href=\"byond://?src=" ).Ref( this.hi ).str( "&action=play_card&card=" ).Ref( card ).str( "\" class=\"card " ).item( card.suit ).str( " " ).item( card.number ).str( "\"></a>" ).ToString();
				}
				this.hi.updateContent( "hand", html );
			}
			return false;
		}

		// Function from file: cards.dm
		public bool hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			return Lang13.Bool( hclient.client.mob ) && Lang13.Bool( hclient.client.mob.stat ) == false && hclient.client.mob.contents.Contains( this );
		}

		// Function from file: cards.dm
		public void update_conceal(  ) {
			
			if ( this.concealed ) {
				this.hi.updateContent( "headbar", new Txt( "You are currently concealing your hand. <a href=\"byond://?src=" ).Ref( this.hi ).str( "&action=toggle_conceal\">Reveal your hand.</a>" ).ToString() );
			} else {
				this.hi.updateContent( "headbar", new Txt( "You are currently revealing your hand. <a href=\"byond://?src=" ).Ref( this.hi ).str( "&action=toggle_conceal\">Conceal your hand.</a>" ).ToString() );
			}
			return;
		}

		// Function from file: cards.dm
		public override double examine( dynamic user = null ) {
			double _default = 0;

			Playingcard card = null;

			_default = base.examine( (object)(user) );

			if ( ( !this.concealed || this.loc == Task13.User ) && this.cards.len != 0 ) {
				Task13.User.show_message( "It contains: ", 1 );

				foreach (dynamic _a in Lang13.Enumerate( this.cards, typeof(Playingcard) )) {
					card = _a;
					
					Task13.User.show_message( "The " + card.name + ".", 1 );
				}
			}
			return _default;
		}

		// Function from file: cards.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.hi.show( user );
			return null;
		}

		// Function from file: cards.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic H = null;
			Playingcard P = null;

			
			if ( A is Obj_Item_Weapon_Hand ) {
				H = A;

				foreach (dynamic _a in Lang13.Enumerate( this.cards, typeof(Playingcard) )) {
					P = _a;
					
					H.cards.Add( P );
				}
				H.update_icon();
				GlobalFuncs.qdel( this );
			} else {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: cards.dm
		public override dynamic Destroy(  ) {
			
			if ( this.hi != null ) {
				GlobalFuncs.qdel( this.hi );
			}
			return base.Destroy();
		}

		// Function from file: cards.dm
		[Verb]
		[VerbInfo( name: "Toggle conceal", desc: "Toggle concealment of your hand", group: "Object" )]
		public void toggle_conceal(  ) {
			this.concealed = !this.concealed;
			this.update_conceal();
			Task13.User.visible_message( new Txt().The( Task13.User ).item().str( " " ).item( ( this.concealed ? "conceals" : "reveals" ) ).str( " their hand." ).ToString() );
			this.update_icon();
			return;
		}

		// Function from file: cards.dm
		[Verb]
		[VerbInfo( name: "Discard", desc: "Place a card from your hand in front of you.", group: "Object" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.FromMemberVar, "cards" )]
		public void discard( dynamic card = null ) {
			Obj_Item_Weapon_Hand H = null;

			
			if ( !Lang13.Bool( card ) ) {
				return;
			}
			H = new Obj_Item_Weapon_Hand( this.loc );
			H.concealed = false;
			H.update_conceal();
			H.cards.Add( card );
			this.cards.Remove( card );
			H.update_icon();

			if ( !( H != null ) ) {
				Task13.Crash( "" + "code/modules/games/cards.dm" + ":" + 169 + ":Assertion Failed: " + "H" );
			}
			Task13.User.visible_message( new Txt().The( Task13.User ).item().str( " plays " ).the( card.name ).item().str( "." ).ToString() );
			H.loc = Map13.GetStep( Task13.User, Task13.User.dir );
			this.update_icon();
			return;
		}

	}

}