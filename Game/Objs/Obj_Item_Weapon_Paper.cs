// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Paper : Obj_Item_Weapon {

		public dynamic info = null;
		public dynamic info_links = null;
		public string stamps = null;
		public double? fields = null;
		public ByTable stamped = null;
		public bool rigged = false;
		public bool spam_flag = false;
		public string log = "";
		public dynamic img = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throwforce = 0;
			this.w_class = 1;
			this.w_type = 6;
			this.throw_range = 1;
			this.throw_speed = 1;
			this.pressure_resistance = 1;
			this.attack_verb = new ByTable(new object [] { "slapped" });
			this.autoignition_temperature = 519.1500244140625;
			this.fire_fuel = 1;
			this.icon = "icons/obj/bureaucracy.dmi";
			this.icon_state = "paper";
			this.layer = 3.9;
		}

		// Function from file: paper.dm
		public Obj_Item_Weapon_Paper ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pixel_y = Rand13.Int( -8, 8 );
			this.pixel_x = Rand13.Int( -9, 9 );
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.update_icon();
				this.updateinfolinks();
				return;
				return;
			}));
			return;
		}

		// Function from file: paper.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			bool clown = false;
			Image stampoverlay = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );
			clown = false;

			if ( Lang13.Bool( b.mind ) && b.mind.assigned_role == "Clown" ) {
				clown = true;
			}

			if ( a is Obj_Item_Weapon_Pen || a is Obj_Item_Toy_Crayon ) {
				
				if ( a is Obj_Item_Weapon_Pen_Robopen && Convert.ToInt32( a.mode ) == 2 ) {
					((Obj_Item_Weapon_Pen_Robopen)a).RenamePaper( b, this );
				} else {
					Interface13.Browse( b, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY" + ( Lang13.Bool( this.color ) ? " bgcolor=" + this.color : "" ) + ">" + this.info_links + this.stamps + "</BODY></HTML>", "window=" + this.name );
				}
				return null;
			} else if ( a is Obj_Item_Weapon_Stamp ) {
				
				if ( a is Obj_Item_Weapon_Stamp_Clown && !clown ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You are totally unable to use the stamp. HONK!</span>" );
					return null;
				}
				this.stamps += ( this.stamps == "" ? "<HR>" : "<BR>" ) + ( "<i>This " + this.name + " has been stamped with the " + a.name + ".</i>" );
				stampoverlay = new Image( "icons/obj/bureaucracy.dmi" );
				stampoverlay.pixel_x = Rand13.Int( -2, 2 );
				stampoverlay.pixel_y = Rand13.Int( -3, 2 );
				stampoverlay.icon_state = "paper_" + a.icon_state;

				if ( !( this.stamped != null ) ) {
					this.stamped = new ByTable();
				}
				this.stamped.Add( a.type );
				this.overlays.Add( stampoverlay );
				GlobalFuncs.to_chat( b, "<span class='notice'>You stamp " + this + " with your rubber stamp.</span>" );
			} else if ( a is Obj_Item_Weapon_Photo ) {
				
				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					
					if ( Lang13.Bool( this.img ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>This paper already has a photo attached.</span>" );
						return null;
					}
					this.img = a;
					GlobalFuncs.to_chat( b, "<span class='notice'>You attach the photo to the piece of paper.</span>" );
				}
			} else if ( Lang13.Bool( ((Obj)a).is_hot() ) ) {
				this.ashify_item( b );
				return null;
			}
			this.add_fingerprint( b );
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: paper.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob H = null;
			string id = null;
			dynamic t = null;
			dynamic i = null;
			int laststart = 0;
			int j = 0;

			base.Topic( href, href_list, (object)(hclient) );

			if ( !( Task13.User != null ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() ) {
				return null;
			}

			if ( Lang13.Bool( href_list["picture"] ) ) {
				
				if ( !( Task13.User is Mob_Living_Carbon_Human ) ) {
					return null;
				}
				H = Task13.User;
				H.put_in_hands( this.img );
				this.img = null;
			}

			if ( Lang13.Bool( href_list["write"] ) ) {
				id = href_list["write"];
				t = GlobalFuncs.sanitize( Interface13.Input( "Enter what you want to write:", "Write", null, null, null, InputType.StrMultiline ), 1024 );
				i = Task13.User.get_active_hand();

				if ( !( i is Obj_Item_Weapon_Pen ) && !( i is Obj_Item_Toy_Crayon ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Please ensure your pen is in your active hand and that you're holding the paper.</span>" );
					return null;
				}

				if ( !this.Adjacent( Task13.User, 1 ) ) {
					return null;
				}
				this.log += "<br />[" + GlobalFuncs.time_stamp() + "] " + GlobalFuncs.key_name( Task13.User ) + " added: " + t;
				t = GlobalFuncs.replacetext( t, "\n", "<BR>" );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					t = this.parsepencode( Task13.User, i, t );
					laststart = 1;

					while (true) {
						j = String13.FindIgnoreCase( t, "<span class=\"paper_field\">", laststart, 0 );

						if ( j == 0 ) {
							break;
						}
						laststart = j + 1;
						this.fields++;
					}

					if ( id != "end" ) {
						this.addtofield( String13.ParseNumber( id ), t );
					} else {
						this.info += t;
						this.updateinfolinks();
					}
					Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY" + ( Lang13.Bool( this.color ) ? " bgcolor=" + this.color : "" ) + ">" + this.info_links + this.stamps + "</BODY></HTML>", "window=" + this.name );
					this.update_icon();
					return;
				}));
			}

			if ( Lang13.Bool( href_list["help"] ) ) {
				this.openhelp( Task13.User );
			}
			return null;
		}

		// Function from file: paper.dm
		public bool canfold( Mob user = null ) {
			
			if ( !( user != null ) ) {
				return false;
			}

			if ( Lang13.Bool( user.stat ) || user.restrained() ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You can't do that while restrained.</span>" );
				return false;
			}

			if ( user.l_hand != this && user.r_hand != this ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You'll need " + this + " in your hands to do that.</span>" );
				return false;
			}
			return true;
		}

		// Function from file: paper.dm
		public virtual void openhelp( Mob user = null ) {
			Interface13.Browse( user, @"<HTML><HEAD><TITLE>Pen Help</TITLE></HEAD>
	<BODY>
		<b><center>Crayon&Pen commands</center></b><br>
		<br>
		[br] : Creates a linebreak.<br>
		[center] - [/center] : Centers the text.<br>
		[b] - [/b] : Makes the text <b>bold</b>.<br>
		[i] - [/i] : Makes the text <i>italic</i>.<br>
		[u] - [/u] : Makes the text <u>underlined</u>.<br>
		[large] - [/large] : Increases the <span style=""font-size:25px"">size</span> of the text.<br>
		[sign] : Inserts a signature of your name in a foolproof way.<br>
		[field] : Inserts an invisible field which lets you start type from there. Useful for forms.<br>
		<br>
		<b><center>Pen exclusive commands</center></b><br>
		[small] - [/small] : Decreases the <span style=""font-size:15px"">size</span> of the text.<br>
		[tiny] - [/tiny] : Sharply decreases the <span style=""font-size:10px"">size</span> of the text.<br>
		[list] - [/list] : A list.<br>
		[*] : A dot used for lists.<br>
		[hr] : Adds a horizontal rule.<br>
		[img]http://url[/img] : Add an image.<br>
		<br>
		<center>Fonts</center><br>
		[agency] - [/agency] : <span style=""font-family:Agency FB"">Agency FB</span><br>
		[algerian] - [/algerian] : <span style=""font-family:Algerian"">Algerian</span><br>
		[arial] - [/arial] : <span style=""font-family:Arial"">Arial</span><br>
		[arialb] - [/arialb] : <span style=""font-family:Arial Black"">Arial Black</span><br>
		[calibri] - [/calibri] : <span style=""font-family:Calibri"">Calibri</span><br>
		[courier] - [/courier] : <span style=""font-family:Courier"">Courier</span><br>
		[helvetica] - [/helvetica] : <span style=""font-family:Helvetica"">Helvetica</span><br>
		[impact] - [/impact] : <span style=""font-family:Impact"">Impact</span><br>
		[palatino] - [/palatino] : <span style=""font-family:Palatino Linotype"">Palatino Linotype</span><br>
		[tnr] - [/tnr] : <span style=""font-family:Times New Roman"">Times New Roman</span>
	</BODY></HTML>", "window=paper_help" );
			return;
		}

		// Function from file: paper.dm
		public dynamic parsepencode( Mob user = null, dynamic i = null, dynamic t = null ) {
			dynamic P = null;
			dynamic C = null;

			
			if ( i is Obj_Item_Weapon_Pen ) {
				P = i;
				t = ((Obj_Item_Weapon_Pen)P).Format( user, t, this );
			} else if ( i is Obj_Item_Toy_Crayon ) {
				C = i;
				t = ((Obj_Item_Toy_Crayon)C).Format( user, t, this );
			}
			return t;
		}

		// Function from file: paper.dm
		public void clearpaper(  ) {
			this.info = null;
			this.stamps = null;
			this.stamped = new ByTable();
			this.overlays.len = 0;
			this.updateinfolinks();
			this.update_icon();
			return;
		}

		// Function from file: paper.dm
		public void updateinfolinks(  ) {
			double? i = null;

			this.info_links = this.info;
			i = 0;
			i = 1;

			while (( i ??0) <= ( this.fields ??0)) {
				
				if ( ( i ??0) >= 50 ) {
					break;
				}

				if ( ( i ??0) % 25 == 0 ) {
					Task13.Sleep( 1 );
				}
				this.addtofield( i, new Txt( "<A href='?src=" ).Ref( this ).str( ";write=" ).item( i ).str( "'>write</A> " ).ToString(), true );
				this.addtofield( i, new Txt( "<A href='?src=" ).Ref( this ).str( ";help=" ).item( i ).str( "'>help</A> " ).ToString(), true );
				i++;
			}
			this.info_links += new Txt( "<A href='?src=" ).Ref( this ).str( ";write=end'>write</A> " ).ToString();
			this.info_links += new Txt( "<A href='?src=" ).Ref( this ).str( ";help=end'>help</A> " ).ToString();
			return;
		}

		// Function from file: paper.dm
		public void addtofield( double? id = null, dynamic text = null, bool? links = null ) {
			links = links ?? false;

			double? locid = null;
			int laststart = 0;
			int textindex = 0;
			int softcount = 0;
			int istart = 0;
			int iend = 0;
			string before = null;
			string after = null;
			string before2 = null;
			string after2 = null;

			locid = 0;
			laststart = 1;
			textindex = 1;
			softcount = 0;

			while (true) {
				
				if ( softcount > 50 ) {
					break;
				}

				if ( softcount % 25 == 0 ) {
					Task13.Sleep( 1 );
				}
				istart = 0;

				if ( links == true ) {
					istart = String13.FindIgnoreCase( this.info_links, "<span class=\"paper_field\">", laststart, 0 );
				} else {
					istart = String13.FindIgnoreCase( this.info, "<span class=\"paper_field\">", laststart, 0 );
				}

				if ( istart == 0 ) {
					return;
				}
				softcount++;
				laststart = istart + 1;
				locid++;

				if ( locid == id ) {
					iend = 1;

					if ( links == true ) {
						iend = String13.FindIgnoreCase( this.info_links, "</span>", istart, 0 );
					} else {
						iend = String13.FindIgnoreCase( this.info, "</span>", istart, 0 );
					}
					textindex = iend;
					break;
				}
			}

			if ( links == true ) {
				before = String13.SubStr( this.info_links, 1, textindex );
				after = String13.SubStr( this.info_links, textindex, 0 );
				this.info_links = before + text + after;
			} else {
				before2 = String13.SubStr( this.info, 1, textindex );
				after2 = String13.SubStr( this.info, textindex, 0 );
				this.info = before2 + text + after2;
				this.updateinfolinks();
			}
			return;
		}

		// Function from file: paper.dm
		public override dynamic attack_ai( dynamic user = null ) {
			int dist = 0;

			
			if ( user is Mob_Living_Silicon_Ai && Lang13.Bool( user.current ) ) {
				dist = Map13.GetDistance( this, user.current );
			} else {
				dist = Map13.GetDistance( this, user );
			}

			if ( dist < 2 || user is Mob_Living_Silicon_Ai && ( user.ai_flags & 2 ) != 0 ) {
				Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY" + ( Lang13.Bool( this.color ) ? " bgcolor=" + this.color : "" ) + ">" + this.info + this.stamps + "</BODY></HTML>", "window=" + this.name );
				GlobalFuncs.onclose( Task13.User, "" + this.name );
			} else {
				Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY" + ( Lang13.Bool( this.color ) ? " bgcolor=" + this.color : "" ) + ">" + GlobalFuncs.stars( this.info ) + this.stamps + "</BODY></HTML>", "window=" + this.name );
				GlobalFuncs.onclose( Task13.User, "" + this.name );
			}
			return null;
		}

		// Function from file: paper.dm
		public override dynamic attack_robot( Mob_Living_Silicon_Robot user = null ) {
			
			if ( user is Mob_Living_Silicon_Robot_Mommi && this.Adjacent( user ) ) {
				return this.attack_hand( user );
			} else {
				return this.attack_ai( user );
			}
		}

		// Function from file: paper.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			user.__CallVerb("Examine", this );

			if ( this.rigged && GlobalVars.Holiday == "April Fool's Day" ) {
				
				if ( !this.spam_flag ) {
					this.spam_flag = true;
					GlobalFuncs.playsound( this.loc, "sound/items/bikehorn.ogg", 50, 1 );
					Task13.Schedule( 20, (Task13.Closure)(() => {
						this.spam_flag = false;
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: paper.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string info_2 = null;

			
			if ( GlobalFuncs.in_range( user, this ) ) {
				info_2 = "";

				if ( Lang13.Bool( this.img ) ) {
					Interface13.CacheBrowseResource( user, this.img.img, "tmp_photo.png" );
					info_2 = new Txt( "<img src='tmp_photo.png' width='192' style='-ms-interpolation-mode:nearest-neighbor' /><br><a href='?src=" ).Ref( this ).str( ";picture=1'>Remove</a><br>" ).ToString();
				}

				if ( !( user is Mob_Living_Carbon_Human || user is Mob_Dead_Observer || user is Mob_Living_Silicon ) ) {
					Interface13.Browse( user, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY" + ( Lang13.Bool( this.color ) ? " bgcolor=" + this.color : "" ) + ">" + info_2 + GlobalFuncs.stars( this.info ) + this.stamps + "</BODY></HTML>", "window=" + this.name );
					GlobalFuncs.onclose( user, "" + this.name );
				} else {
					Interface13.Browse( user, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY" + ( Lang13.Bool( this.color ) ? " bgcolor=" + this.color : "" ) + ">" + info_2 + this.info + this.stamps + "</BODY></HTML>", "window=" + this.name );
					GlobalFuncs.onclose( user, "" + this.name );
				}
			} else {
				base.examine( (object)(user), size );
				GlobalFuncs.to_chat( user, "<span class='notice'>It is too far away to read.</span>" );
			}
			return null;
		}

		// Function from file: paper.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = Lang13.Initial( this, "icon_state" );

			if ( Lang13.Bool( this.info ) ) {
				this.icon_state += "_words";
			}
			return null;
		}

		// Function from file: cosmetics.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic H = null;

			
			if ( ((dynamic)user.zone_sel).selecting == "mouth" ) {
				
				if ( !( M is Mob ) ) {
					return null;
				}

				if ( M is Mob_Living_Carbon_Human ) {
					H = M;

					if ( H == user ) {
						GlobalFuncs.to_chat( user, "<span class='notice'>You wipe off the lipstick with " + this + ".</span>" );
						H.lip_style = null;
						((Mob_Living_Carbon_Human)H).update_body();
					} else {
						((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " begins to wipe " ).item( H ).str( "'s lipstick off with " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='notice'>You begin to wipe off " + H + "'s lipstick.</span>" );

						if ( GlobalFuncs.do_after( user, H, 10 ) && GlobalFuncs.do_after( H, null, 10, 5, false ) ) {
							((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " wipes " ).item( H ).str( "'s lipstick off with " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='notice'>You wipe off " + H + "'s lipstick.</span>" );
							H.lip_style = null;
							((Mob_Living_Carbon_Human)H).update_body();
						}
					}
				}
			} else {
				base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: paper.dm
		[Verb]
		[VerbInfo( name: "Fold paper", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public dynamic fold(  ) {
			dynamic _default = null;

			Obj_Item_Weapon_PFolded P = null;

			
			if ( !this.canfold( Task13.User ) ) {
				return _default;
			}
			_default = GlobalVars.paper_folding_results[Interface13.Input( "What do you want to make the paper into?", "Paper Folding", null, null, GlobalVars.paper_folding_results, InputType.Null | InputType.Any )];

			if ( _default == null ) {
				return _default;
			}

			if ( !this.canfold( Task13.User ) ) {
				return _default;
			}
			Task13.User.drop_item( this, null, true );
			P = Lang13.Call( _default, GlobalFuncs.get_turf( Task13.User ) );
			P.unfolded = this;
			this.loc = P;
			Task13.User.put_in_hands( P );
			P.pixel_y = this.pixel_y;
			P.pixel_x = this.pixel_x;

			if ( this is Obj_Item_Weapon_Paper_Nano ) {
				P.color = "#9A9A9A";
				P.nano = true;
			}
			Task13.User.visible_message( new Txt( "<span class='notice'>" ).item( Task13.User ).str( " folds " ).the( this.name ).item().str( " into a " ).item( P.name ).str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You fold " ).the( this.name ).item().str( " into a " ).item( P.name ).str( ".</span>" ).ToString() );
			P.add_fingerprint( Task13.User );
			return _default;
		}

		// Function from file: paper.dm
		[Verb]
		[VerbInfo( name: "Rename paper", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public virtual void rename(  ) {
			string n_name = null;

			Interface13.Stat( null, Task13.User.mutations.Contains( 5 ) );

			if ( false && Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You cut yourself on " + this + ".</span>" );
				return;
			}
			n_name = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "What would you like to label " + this + "?", "Paper Labelling", null, null, InputType.Str ) ), 1, 26 );

			if ( this.loc == Task13.User && !Task13.User.isUnconscious() ) {
				this.name = "paper" + ( Lang13.Bool( n_name ) ? "- '" + n_name + "'" : null );
			}
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}