// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Target : Obj_Item {

		public double hp = 1800;
		public Icon virtualIcon = null;
		public ByTable bulletholes = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/objects.dmi";
			this.icon_state = "target_h";
		}

		public Obj_Item_Target ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: shooting_range.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			double? p_x = null;
			double? p_y = null;
			int decaltype = 0;
			dynamic O = null;
			Obj bmark = null;
			Bullethole B = null;

			p_x = ( Proj.p_x ??0) + Convert.ToDouble( Rand13.Pick(new object [] { 0, 0, 0, 0, 0, -1, 1 }) );
			p_y = ( Proj.p_y ??0) + Convert.ToDouble( Rand13.Pick(new object [] { 0, 0, 0, 0, 0, -1, 1 }) );
			decaltype = 1;

			if ( Lang13.Bool( Proj.IsInstanceOfType( typeof(Obj_Item_Projectile_Bullet) ) ) ) {
				decaltype = 2;
			}
			this.virtualIcon = new Icon( this.icon, this.icon_state );

			if ( Lang13.Bool( this.virtualIcon.GetPixel( p_x, p_y ) ) ) {
				this.hp -= Convert.ToDouble( Proj.damage );

				if ( this.hp <= 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewersExcludeThis( null, null ) )) {
						O = _a;
						

						if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
							GlobalFuncs.to_chat( O, "<span class='warning'>" + this + " breaks into tiny pieces and collapses!</span>" );
						}
					}
					GlobalFuncs.qdel( this );
				}
				bmark = new Obj();
				bmark.pixel_x = ((int)( p_x ??0 ));
				bmark.pixel_y = ((int)( p_y ??0 ));
				bmark.icon = "icons/effects/effects.dmi";
				bmark.layer = 3.5;
				bmark.icon_state = "scorch";

				if ( decaltype == 1 ) {
					bmark.pixel_x--;
					bmark.pixel_y--;

					if ( Convert.ToDouble( Proj.damage ) >= 20 || Proj is Obj_Item_Projectile_Beam_Practice ) {
						bmark.icon_state = "scorch";
						bmark.dir = Convert.ToInt32( Rand13.Pick(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH, GlobalVars.EAST, GlobalVars.WEST }) );
					} else {
						bmark.icon_state = "light_scorch";
					}
				} else {
					bmark.icon_state = "dent";
				}

				if ( Convert.ToDouble( Proj.damage ) >= 10 && this.bulletholes.len <= 35 ) {
					
					if ( decaltype == 2 ) {
						
						if ( Rand13.PercentChance( Convert.ToInt32( Proj.damage + 30 ) ) ) {
							new Bullethole( this, bmark.pixel_x, bmark.pixel_y );
						}
					} else if ( Rand13.PercentChance( Convert.ToInt32( Proj.damage - 10 ) ) ) {
						new Bullethole( this, bmark.pixel_x, bmark.pixel_y );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( this.bulletholes, typeof(Bullethole) )) {
					B = _b;
					
					this.virtualIcon.DrawBox( null, B.b1x1, B.b1y, B.b1x2, B.b1y );
					this.virtualIcon.DrawBox( null, B.b2x, B.b2y1, B.b2x, B.b2y2 );
				}
				this.overlays.Add( bmark );
				this.icon = this.virtualIcon;
				return null;
			}
			return -1;
		}

		// Function from file: shooting_range.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Structure_TargetStake stake = null;
			Obj_Structure_TargetStake T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 3 ), typeof(Obj_Structure_TargetStake) )) {
				T = _a;
				

				if ( T.pinned_target == this ) {
					stake = T;
					break;
				}
			}

			if ( stake != null ) {
				
				if ( Lang13.Bool( stake.pinned_target ) ) {
					stake.density = true;
					this.density = false;
					this.layer = GlobalVars.OBJ_LAYER;
					this.loc = a.loc;

					if ( a is Mob_Living_Carbon_Human ) {
						
						if ( !Lang13.Bool( ((Mob)a).get_active_hand() ) ) {
							((Mob)a).put_in_hands( this );
							GlobalFuncs.to_chat( a, "You take the target out of the stake." );
						}
					} else {
						this.loc = GlobalFuncs.get_turf( a );
						GlobalFuncs.to_chat( a, "You take the target out of the stake." );
					}
					stake.pinned_target = null;
					return null;
				}
			} else {
				base.attack_hand( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: shooting_range.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					this.overlays.len = 0;
					GlobalFuncs.to_chat( Task13.User, "You slice off " + this + "'s uneven chunks of aluminum and scorch marks." );
					return null;
				}
			}
			return null;
		}

		// Function from file: shooting_range.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Obj_Structure_TargetStake M = null;

			base.Move( (object)(NewLoc), Dir, step_x, step_y );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 3 ), typeof(Obj_Structure_TargetStake) )) {
				M = _a;
				

				if ( !M.density && M.pinned_target == this ) {
					M.loc = this.loc;
				}
			}
			return false;
		}

		// Function from file: shooting_range.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Structure_TargetStake T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 3 ), typeof(Obj_Structure_TargetStake) )) {
				T = _a;
				

				if ( T.pinned_target == this ) {
					T.pinned_target = null;
					T.density = true;
					break;
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}