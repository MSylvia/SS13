// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_Cap : Obj_Machinery_Atmospherics_Unary {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_be_coloured = true;
			this.icon = "icons/obj/pipes.dmi";
			this.icon_state = "cap";
			this.layer = 2.4;
		}

		public Obj_Machinery_Atmospherics_Unary_Cap ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: cap.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Device_Rcd_Rpd || a is Obj_Item_Device_PipePainter ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Red ) {
				this.color = "#B70000";
				GlobalFuncs.to_chat( b, "<span class='warning'>You paint the pipe red.</span>" );
				this.update_icon();
				return 1;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Blue ) {
				this.color = "#0000B7";
				GlobalFuncs.to_chat( b, "<span class='warning'>You paint the pipe blue.</span>" );
				this.update_icon();
				return 1;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Green ) {
				this.color = "#00B900";
				GlobalFuncs.to_chat( b, "<span class='warning'>You paint the pipe green.</span>" );
				this.update_icon();
				return 1;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Yellow ) {
				this.color = "#B77900";
				GlobalFuncs.to_chat( b, "<span class='warning'>You paint the pipe yellow.</span>" );
				this.update_icon();
				return 1;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: cap.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays = 0;
			this.alpha = ( this.invisibility != 0 ? 128 : 255 );
			this.icon_state = "cap";
			return null;
		}

		// Function from file: cap.dm
		public override void hide( bool? h = null ) {
			
			if ( this.level == 1 && this.loc is Tile_Simulated ) {
				this.invisibility = ( h == true ? 101 : 0 );
			}
			this.update_icon();
			return;
		}

	}

}