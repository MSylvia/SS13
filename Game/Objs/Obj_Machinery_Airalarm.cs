// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Airalarm : Obj_Machinery {

		public int danger_level = 0;
		public double? mode = 1;
		public bool locked = true;
		public int? aidisabled = 0;
		public int? shorted = 0;
		public int buildstage = 2;
		public double frequency = 1439;
		public double alarm_frequency = 1437;
		public RadioFrequency radio_connection = null;
		public ByTable TLV = new ByTable()
											.Set( "pressure", new Tlv( 81.51, 91.19249725341797, 111.4574966430664, 121.59 ) )
											.Set( "temperature", new Tlv( 273.41, 283.41, 313.41, 339.41 ) )
											.Set( "o2", new Tlv( 16, 19, 135, 140 ) )
											.Set( "n2", new Tlv( -1, -1, 1000, 1000 ) )
											.Set( "co2", new Tlv( -1, -1, 5, 10 ) )
											.Set( "plasma", new Tlv( -1, -1, 0.2, 0.5 ) )
											.Set( "n2o", new Tlv( -1, -1, 0.2, 0.5 ) )
										;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 4;
			this.active_power_usage = 8;
			this.power_channel = 3;
			this.req_access = new ByTable(new object [] { 24 });
			this.icon = "icons/obj/monitors.dmi";
			this.icon_state = "alarm0";
		}

		// Function from file: airalarm.dm
		public Obj_Machinery_Airalarm ( dynamic loc = null, dynamic ndir = null, dynamic nbuild = null ) : base( (object)(loc) ) {
			dynamic A = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.wires = new Wires_Airalarm( this );

			if ( Lang13.Bool( ndir ) ) {
				this.dir = Convert.ToInt32( ndir );
			}

			if ( Lang13.Bool( nbuild ) ) {
				this.buildstage = 0;
				this.panel_open = 1;
				this.pixel_x = ( ( this.dir & 3 ) != 0 ? 0 : ( this.dir == 4 ? -24 : 24 ) );
				this.pixel_y = ( ( this.dir & 3 ) != 0 ? ( this.dir == 1 ? -24 : 24 ) : 0 );
			}
			A = GlobalFuncs.get_area_master( this );

			if ( this.name == Lang13.Initial( this, "name" ) ) {
				this.name = "" + A.name + " Air Alarm";
			}
			this.update_icon();

			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				this.initialize();
			}
			return;
		}

		// Function from file: airalarm.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( Lang13.Bool( this.emagged ) ) {
				return false;
			}
			this.emagged = GlobalVars.TRUE;
			this.visible_message( "<span class='warning'>Sparks fly out of the " + this + "!</span>", "<span class='notice'>You emag the " + this + ", disabling its safeties.</span>" );
			GlobalFuncs.playsound( this.loc, "sound/effects/sparks4.ogg", 50, 1 );
			return false;
		}

		// Function from file: airalarm.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: airalarm.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Item_Stack_CableCoil cable = null;
			dynamic cable2 = null;

			
			switch ((int)( this.buildstage )) {
				case 2:
					
					if ( A is Obj_Item_Weapon_Wirecutters && Lang13.Bool( this.panel_open ) && Lang13.Bool( ((Wires)this.wires).is_all_cut() ) ) {
						GlobalFuncs.playsound( this.loc, "sound/items/Wirecutter.ogg", 50, 1 );
						user.WriteMsg( "<span class='notice'>You cut the final wires.</span>" );
						cable = new Obj_Item_Stack_CableCoil( this.loc );
						cable.amount = 5;
						this.buildstage = 1;
						this.update_icon();
						return null;
					} else if ( A is Obj_Item_Weapon_Screwdriver ) {
						GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );
						this.panel_open = !Lang13.Bool( this.panel_open ) ?1:0;
						user.WriteMsg( "<span class='notice'>The wires have been " + ( Lang13.Bool( this.panel_open ) ? "exposed" : "unexposed" ) + ".</span>" );
						this.update_icon();
						return null;
					} else if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
						
						if ( ( this.stat & 3 ) != 0 ) {
							user.WriteMsg( "<span class='warning'>It does nothing!</span>" );
						} else if ( this.allowed( Task13.User ) && !((Wires)this.wires).is_cut( "idscan" ) ) {
							this.locked = !this.locked;
							user.WriteMsg( "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the air alarm interface.</span>" );
						} else {
							user.WriteMsg( "<span class='danger'>Access denied.</span>" );
						}
						return null;
					} else if ( Lang13.Bool( this.panel_open ) && Lang13.Bool( GlobalFuncs.is_wire_tool( A ) ) ) {
						this.wires.interact( user );
						return null;
					}
					break;
				case 1:
					
					if ( A is Obj_Item_Weapon_Crowbar ) {
						((Ent_Static)user).visible_message( "" + user.name + " removes the electronics from " + this.name + ".", "<span class='notice'>You start prying out the circuit...</span>" );
						GlobalFuncs.playsound( this.loc, "sound/items/Crowbar.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
							
							if ( this.buildstage == 1 ) {
								user.WriteMsg( "<span class='notice'>You remove the air alarm electronics.</span>" );
								new Obj_Item_Weapon_Electronics_Airalarm( this.loc );
								GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );
								this.buildstage = 0;
								this.update_icon();
							}
						}
						return null;
					}

					if ( A is Obj_Item_Stack_CableCoil ) {
						cable2 = A;

						if ( ( ((Obj_Item_Stack)cable2).get_amount() ??0) < 5 ) {
							user.WriteMsg( "<span class='warning'>You need five lengths of cable to wire the fire alarm!</span>" );
							return null;
						}
						((Ent_Static)user).visible_message( "" + user.name + " wires the air alarm.", "<span class='notice'>You start wiring the air alarm...</span>" );

						if ( GlobalFuncs.do_after( user, 20, null, this ) ) {
							
							if ( ( ((Obj_Item_Stack)cable2).get_amount() ??0) >= 5 && this.buildstage == 1 ) {
								cable2.use( 5 );
								user.WriteMsg( "<span class='notice'>You wire the air alarm.</span>" );
								this.wires.repair();
								this.aidisabled = 0;
								this.locked = true;
								this.mode = 1;
								this.shorted = 0;
								this.post_alert( 0 );
								this.buildstage = 2;
								this.update_icon();
							}
						}
						return null;
					}
					break;
				case 0:
					
					if ( A is Obj_Item_Weapon_Electronics_Airalarm ) {
						
						if ( ((Mob)user).unEquip( A ) ) {
							user.WriteMsg( "<span class='notice'>You insert the circuit.</span>" );
							this.buildstage = 1;
							this.update_icon();
							GlobalFuncs.qdel( A );
						}
						return null;
					}

					if ( A is Obj_Item_Weapon_Wrench ) {
						user.WriteMsg( new Txt( "<span class='notice'>You detach " ).the( this ).item().str( " from the wall.</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
						new Obj_Item_Wallframe_Airalarm( user.loc );
						GlobalFuncs.qdel( this );
						return null;
					}
					break;
			}
			return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
		}

		// Function from file: airalarm.dm
		public override int? process( dynamic seconds = null ) {
			dynamic location = null;
			Tlv cur_tlv = null;
			GasMixture environment = null;
			ByTable env_gases = null;
			dynamic partial_pressure = null;
			double environment_pressure = 0;
			int pressure_dangerlevel = 0;
			int temperature_dangerlevel = 0;
			int gas_dangerlevel = 0;
			dynamic gas_id = null;
			int old_danger_level = 0;

			
			if ( ( this.stat & 3 ) != 0 || Lang13.Bool( this.shorted ) ) {
				return null;
			}
			location = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( location ) ) {
				return null;
			}
			environment = ((Ent_Static)location).return_air();
			env_gases = environment.gases;
			partial_pressure = environment.temperature * 8.31 / environment.volume;
			cur_tlv = this.TLV["pressure"];
			environment_pressure = environment.return_pressure();
			pressure_dangerlevel = cur_tlv.get_danger_level( environment_pressure );
			cur_tlv = this.TLV["temperature"];
			temperature_dangerlevel = cur_tlv.get_danger_level( environment.temperature );
			gas_dangerlevel = 0;

			foreach (dynamic _a in Lang13.Enumerate( env_gases )) {
				gas_id = _a;
				

				if ( !this.TLV.Contains( gas_id ) ) {
					continue;
				}
				cur_tlv = this.TLV[gas_id];
				gas_dangerlevel = Num13.MaxInt( gas_dangerlevel, cur_tlv.get_danger_level( env_gases[gas_id][1] * partial_pressure ) );
			}
			environment.garbage_collect();
			old_danger_level = this.danger_level;
			this.danger_level = Num13.MaxInt( pressure_dangerlevel, temperature_dangerlevel, gas_dangerlevel );

			if ( old_danger_level != this.danger_level ) {
				this.apply_danger_level();
			}

			if ( this.mode == 4 && environment_pressure < 5.066249847412109 ) {
				this.mode = 1;
				this.apply_mode();
			}
			return null;
		}

		// Function from file: airalarm.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			dynamic A = null;

			
			if ( Lang13.Bool( this.panel_open ) ) {
				
				switch ((int)( this.buildstage )) {
					case 2:
						this.icon_state = "alarmx";
						break;
					case 1:
						this.icon_state = "alarm_b2";
						break;
					case 0:
						this.icon_state = "alarm_b1";
						break;
				}
				return false;
			}

			if ( ( this.stat & 3 ) != 0 || Lang13.Bool( this.shorted ) ) {
				this.icon_state = "alarmp";
				return false;
			}
			A = GlobalFuncs.get_area_master( this );

			switch ((int)( Num13.MaxInt( this.danger_level, A.atmosalm ) )) {
				case 0:
					this.icon_state = "alarm0";
					break;
				case 1:
					this.icon_state = "alarm2";
					break;
				case 2:
					this.icon_state = "alarm1";
					break;
			}
			return false;
		}

		// Function from file: airalarm.dm
		public void apply_danger_level(  ) {
			dynamic A = null;
			int new_area_danger_level = 0;
			dynamic R = null;
			Obj_Machinery_Airalarm AA = null;

			A = GlobalFuncs.get_area_master( this );
			new_area_danger_level = 0;

			foreach (dynamic _b in Lang13.Enumerate( A.related )) {
				R = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( R, typeof(Obj_Machinery_Airalarm) )) {
					AA = _a;
					

					if ( !( ( AA.stat & 3 ) != 0 ) && !Lang13.Bool( AA.shorted ) ) {
						new_area_danger_level = Num13.MaxInt( new_area_danger_level, AA.danger_level );
					}
				}
			}

			if ( ((Zone)A).atmosalert( new_area_danger_level, this ) ) {
				this.post_alert( new_area_danger_level );
			}
			this.update_icon();
			return;
		}

		// Function from file: airalarm.dm
		public void post_alert( int alert_level = 0 ) {
			RadioFrequency frequency = null;
			dynamic A = null;
			Signal alert_signal = null;

			frequency = GlobalVars.SSradio.return_frequency( this.alarm_frequency );

			if ( !( frequency != null ) ) {
				return;
			}
			A = GlobalFuncs.get_area_master( this );
			alert_signal = new Signal();
			alert_signal.source = this;
			alert_signal.transmission_method = 1;
			alert_signal.data["zone"] = A.name;
			alert_signal.data["type"] = "Atmospheric";

			if ( alert_level == 2 ) {
				alert_signal.data["alert"] = "severe";
			} else if ( alert_level == 1 ) {
				alert_signal.data["alert"] = "minor";
			} else if ( alert_level == 0 ) {
				alert_signal.data["alert"] = "clear";
			}
			frequency.post_signal( this, alert_signal, null, -1 );
			return;
		}

		// Function from file: airalarm.dm
		public void apply_mode(  ) {
			dynamic A = null;
			dynamic device_id = null;
			dynamic device_id2 = null;
			dynamic device_id3 = null;
			dynamic device_id4 = null;
			dynamic device_id5 = null;
			dynamic device_id6 = null;
			dynamic device_id7 = null;
			dynamic device_id8 = null;
			dynamic device_id9 = null;
			dynamic device_id10 = null;
			dynamic device_id11 = null;
			dynamic device_id12 = null;
			dynamic device_id13 = null;
			dynamic device_id14 = null;
			dynamic device_id15 = null;
			dynamic device_id16 = null;

			A = GlobalFuncs.get_area_master( this );

			switch ((int?)( this.mode )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( A.air_scrub_names )) {
						device_id = _a;
						
						this.send_signal( device_id, new ByTable().Set( "power", 1 ).Set( "co2_scrub", 1 ).Set( "tox_scrub", 0 ).Set( "n2o_scrub", 0 ).Set( "scrubbing", 1 ).Set( "widenet", 0 ) );
					}

					foreach (dynamic _b in Lang13.Enumerate( A.air_vent_names )) {
						device_id2 = _b;
						
						this.send_signal( device_id2, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 101.32499694824219 ) );
					}
					break;
				case 8:
					
					foreach (dynamic _c in Lang13.Enumerate( A.air_scrub_names )) {
						device_id3 = _c;
						
						this.send_signal( device_id3, new ByTable().Set( "power", 1 ).Set( "co2_scrub", 1 ).Set( "tox_scrub", 1 ).Set( "n2o_scrub", 1 ).Set( "scrubbing", 1 ).Set( "widenet", 1 ) );
					}

					foreach (dynamic _d in Lang13.Enumerate( A.air_vent_names )) {
						device_id4 = _d;
						
						this.send_signal( device_id4, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 101.32499694824219 ) );
					}
					break;
				case 2:
					
					foreach (dynamic _e in Lang13.Enumerate( A.air_scrub_names )) {
						device_id5 = _e;
						
						this.send_signal( device_id5, new ByTable().Set( "power", 1 ).Set( "widenet", 0 ).Set( "scrubbing", 0 ) );
					}

					foreach (dynamic _f in Lang13.Enumerate( A.air_vent_names )) {
						device_id6 = _f;
						
						this.send_signal( device_id6, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 202.41 ) );
					}
					break;
				case 9:
					
					foreach (dynamic _g in Lang13.Enumerate( A.air_scrub_names )) {
						device_id7 = _g;
						
						this.send_signal( device_id7, new ByTable().Set( "power", 1 ).Set( "co2_scrub", 1 ).Set( "tox_scrub", 0 ).Set( "n2o_scrub", 0 ).Set( "scrubbing", 1 ).Set( "widenet", 0 ) );
					}

					foreach (dynamic _h in Lang13.Enumerate( A.air_vent_names )) {
						device_id8 = _h;
						
						this.send_signal( device_id8, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 303.9749755859375 ) );
					}
					break;
				case 3:
				case 4:
					
					foreach (dynamic _i in Lang13.Enumerate( A.air_scrub_names )) {
						device_id9 = _i;
						
						this.send_signal( device_id9, new ByTable().Set( "power", 1 ).Set( "widenet", 1 ).Set( "scrubbing", 0 ) );
					}

					foreach (dynamic _j in Lang13.Enumerate( A.air_vent_names )) {
						device_id10 = _j;
						
						this.send_signal( device_id10, new ByTable().Set( "power", 0 ) );
					}
					break;
				case 7:
					
					foreach (dynamic _k in Lang13.Enumerate( A.air_scrub_names )) {
						device_id11 = _k;
						
						this.send_signal( device_id11, new ByTable().Set( "power", 1 ).Set( "widenet", 0 ).Set( "scrubbing", 0 ) );
					}

					foreach (dynamic _l in Lang13.Enumerate( A.air_vent_names )) {
						device_id12 = _l;
						
						this.send_signal( device_id12, new ByTable().Set( "power", 0 ) );
					}
					break;
				case 5:
					
					foreach (dynamic _m in Lang13.Enumerate( A.air_scrub_names )) {
						device_id13 = _m;
						
						this.send_signal( device_id13, new ByTable().Set( "power", 0 ) );
					}

					foreach (dynamic _n in Lang13.Enumerate( A.air_vent_names )) {
						device_id14 = _n;
						
						this.send_signal( device_id14, new ByTable().Set( "power", 0 ) );
					}
					break;
				case 6:
					
					foreach (dynamic _o in Lang13.Enumerate( A.air_scrub_names )) {
						device_id15 = _o;
						
						this.send_signal( device_id15, new ByTable().Set( "power", 0 ) );
					}

					foreach (dynamic _p in Lang13.Enumerate( A.air_vent_names )) {
						device_id16 = _p;
						
						this.send_signal( device_id16, new ByTable().Set( "power", 1 ).Set( "checks", 2 ).Set( "set_internal_pressure", 0 ) );
					}
					break;
			}
			return;
		}

		// Function from file: airalarm.dm
		public bool send_signal( dynamic target = null, ByTable command = null ) {
			Signal signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = new Signal();
			signal.transmission_method = 1;
			signal.source = this;
			signal.data = command;
			signal.data["tag"] = target;
			signal.data["sigtype"] = "command";
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_FROM_AIRALARM );
			return true;
		}

		// Function from file: airalarm.dm
		public void set_frequency( double new_frequency = 0 ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_TO_AIRALARM );
			return;
		}

		// Function from file: airalarm.dm
		public void refresh_all(  ) {
			dynamic A = null;
			dynamic id_tag = null;
			dynamic I = null;
			dynamic id_tag2 = null;
			dynamic I2 = null;

			A = GlobalFuncs.get_area_master( this );

			foreach (dynamic _a in Lang13.Enumerate( A.air_vent_names )) {
				id_tag = _a;
				
				I = A.air_vent_info[id_tag];

				if ( Lang13.Bool( I ) && Convert.ToDouble( I["timestamp"] + 50 ) > Game13.time ) {
					continue;
				}
				this.send_signal( id_tag, new ByTable(new object [] { "status" }) );
			}

			foreach (dynamic _b in Lang13.Enumerate( A.air_scrub_names )) {
				id_tag2 = _b;
				
				I2 = A.air_scrub_info[id_tag2];

				if ( Lang13.Bool( I2 ) && Convert.ToDouble( I2["timestamp"] + 50 ) > Game13.time ) {
					continue;
				}
				this.send_signal( id_tag2, new ByTable(new object [] { "status" }) );
			}
			return;
		}

		// Function from file: airalarm.dm
		public bool shock( dynamic user = null, int prb = 0 ) {
			EffectSystem_SparkSpread s = null;

			
			if ( ( this.stat & 2 ) != 0 ) {
				return false;
			}

			if ( !Rand13.PercentChance( prb ) ) {
				return false;
			}
			s = new EffectSystem_SparkSpread();
			s.set_up( 5, 1, this );
			s.start();

			if ( Lang13.Bool( GlobalFuncs.electrocute_mob( user, GlobalFuncs.get_area( this ), this ) ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: airalarm.dm
		public void reset( dynamic wire = null ) {
			
			dynamic _a = wire; // Was a switch-case, sorry for the mess.
			if ( _a=="power" ) {
				
				if ( !((Wires)this.wires).is_cut( "power" ) ) {
					this.shorted = GlobalVars.FALSE;
					this.update_icon();
				}
			} else if ( _a=="ai" ) {
				
				if ( !((Wires)this.wires).is_cut( "ai" ) ) {
					this.aidisabled = GlobalVars.FALSE;
				}
			}
			return;
		}

		// Function from file: airalarm.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic device_id = null;
			dynamic A = null;
			dynamic target = null;
			dynamic env = null;
			dynamic name = null;
			Base_Data tlv = null;
			dynamic value = null;
			dynamic A2 = null;
			dynamic A3 = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) || this.buildstage != 2 ) {
				return _default;
			}

			if ( this.locked && !Task13.User.has_unlimited_silicon_privilege || Task13.User.has_unlimited_silicon_privilege && Lang13.Bool( this.aidisabled ) ) {
				return _default;
			}
			device_id = _params["id_tag"];

			switch ((string)( action )) {
				case "lock":
					
					if ( Task13.User.has_unlimited_silicon_privilege && !((Wires)this.wires).is_cut( "idscan" ) ) {
						this.locked = !this.locked;
						_default = GlobalVars.TRUE;
					}
					break;
				case "power":
				case "co2_scrub":
				case "tox_scrub":
				case "n2o_scrub":
				case "widenet":
				case "scrubbing":
					this.send_signal( device_id, new ByTable().Set( "" + action, String13.ParseNumber( _params["val"] ) ) );
					_default = GlobalVars.TRUE;
					break;
				case "excheck":
					this.send_signal( device_id, new ByTable().Set( "checks", ((int)( String13.ParseNumber( _params["val"] ) ??0 )) ^ 1 ) );
					_default = GlobalVars.TRUE;
					break;
				case "incheck":
					this.send_signal( device_id, new ByTable().Set( "checks", ((int)( String13.ParseNumber( _params["val"] ) ??0 )) ^ 2 ) );
					_default = GlobalVars.TRUE;
					break;
				case "set_external_pressure":
					A = GlobalFuncs.get_area_master( this );
					target = Interface13.Input( "New target pressure:", this.name, A.air_vent_info[device_id]["external"], null, null, InputType.Num | InputType.Null );

					if ( !( target == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
						this.send_signal( device_id, new ByTable().Set( "set_external_pressure", target ) );
						_default = GlobalVars.TRUE;
					}
					break;
				case "reset_external_pressure":
					this.send_signal( device_id, new ByTable(new object [] { "reset_external_pressure" }) );
					_default = GlobalVars.TRUE;
					break;
				case "threshold":
					env = _params["env"];
					name = _params["var"];
					tlv = this.TLV[env];

					if ( tlv == null ) {
						return _default;
					}
					value = Interface13.Input( "New " + name + " for " + env + ":", name, tlv.vars[name], null, null, InputType.Num | InputType.Null );

					if ( !( value == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
						
						if ( Convert.ToDouble( value ) < 0 ) {
							tlv.vars[name] = -1;
						} else {
							tlv.vars[name] = Num13.Round( Convert.ToDouble( value ), 0.01 );
						}
						_default = GlobalVars.TRUE;
					}
					break;
				case "mode":
					this.mode = String13.ParseNumber( _params["mode"] );
					this.apply_mode();
					_default = GlobalVars.TRUE;
					break;
				case "alarm":
					A2 = GlobalFuncs.get_area_master( this );

					if ( ((Zone)A2).atmosalert( 2, this ) ) {
						this.post_alert( 2 );
					}
					_default = GlobalVars.TRUE;
					break;
				case "reset":
					A3 = GlobalFuncs.get_area_master( this );

					if ( ((Zone)A3).atmosalert( 0, this ) ) {
						this.post_alert( 0 );
					}
					_default = GlobalVars.TRUE;
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: airalarm.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			dynamic A = null;
			dynamic T = null;
			GasMixture environment = null;
			Tlv cur_tlv = null;
			double pressure = 0;
			dynamic temperature = null;
			double total_moles = 0;
			dynamic partial_pressure = null;
			dynamic gas_id = null;
			dynamic id_tag = null;
			dynamic long_name = null;
			dynamic info = null;
			dynamic id_tag2 = null;
			dynamic long_name2 = null;
			dynamic info2 = null;
			Tlv selected = null;
			ByTable thresholds = null;
			dynamic gas_id2 = null;

			data = new ByTable().Set( "locked", this.locked ).Set( "siliconUser", user.has_unlimited_silicon_privilege ).Set( "emagged", this.emagged ).Set( "danger_level", this.danger_level );
			A = GlobalFuncs.get_area( this );
			data["atmos_alarm"] = A.atmosalm;
			data["fire_alarm"] = A.fire;
			T = GlobalFuncs.get_turf( this );
			environment = ((Ent_Static)T).return_air();
			data["environment_data"] = new ByTable();
			pressure = environment.return_pressure();
			cur_tlv = this.TLV["pressure"];
			data["environment_data"] += new ByTable(new object [] { new ByTable().Set( "name", "Pressure" ).Set( "value", pressure ).Set( "unit", "kPa" ).Set( "danger_level", cur_tlv.get_danger_level( pressure ) ) });
			temperature = environment.temperature;
			cur_tlv = this.TLV["temperature"];
			data["environment_data"] += new ByTable(new object [] { 
				new ByTable()
					.Set( "name", "Temperature" )
					.Set( "value", temperature )
					.Set( "unit", "K (" + Num13.Round( Convert.ToDouble( temperature - 273.41 ), 0.1 ) + "C)" )
					.Set( "danger_level", cur_tlv.get_danger_level( temperature ) )
				
			 });
			total_moles = environment.total_moles();
			partial_pressure = environment.temperature * 8.31 / environment.volume;

			foreach (dynamic _a in Lang13.Enumerate( environment.gases )) {
				gas_id = _a;
				

				if ( !this.TLV.Contains( gas_id ) ) {
					continue;
				}
				cur_tlv = this.TLV[gas_id];
				data["environment_data"] += new ByTable(new object [] { 
					new ByTable()
						.Set( "name", environment.gases[gas_id][3][2] )
						.Set( "value", environment.gases[gas_id][1] / total_moles * 100 )
						.Set( "unit", "%" )
						.Set( "danger_level", cur_tlv.get_danger_level( environment.gases[gas_id][1] * partial_pressure ) )
					
				 });
			}

			if ( !this.locked || user.has_unlimited_silicon_privilege ) {
				data["vents"] = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( A.air_vent_names )) {
					id_tag = _b;
					
					long_name = A.air_vent_names[id_tag];
					info = A.air_vent_info[id_tag];

					if ( !Lang13.Bool( info ) || Convert.ToDouble( info["frequency"] ) != this.frequency ) {
						continue;
					}
					data["vents"] += new ByTable(new object [] { 
						new ByTable()
							.Set( "id_tag", id_tag )
							.Set( "long_name", GlobalFuncs.sanitize( long_name ) )
							.Set( "power", info["power"] )
							.Set( "checks", info["checks"] )
							.Set( "excheck", info["checks"] & 1 )
							.Set( "incheck", info["checks"] & 2 )
							.Set( "direction", info["direction"] )
							.Set( "external", info["external"] )
							.Set( "extdefault", Convert.ToDouble( info["external"] ) == 101.32499694824219 )
						
					 });
				}
				data["scrubbers"] = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( A.air_scrub_names )) {
					id_tag2 = _c;
					
					long_name2 = A.air_scrub_names[id_tag2];
					info2 = A.air_scrub_info[id_tag2];

					if ( !Lang13.Bool( info2 ) || Convert.ToDouble( info2["frequency"] ) != this.frequency ) {
						continue;
					}
					data["scrubbers"] += new ByTable(new object [] { 
						new ByTable()
							.Set( "id_tag", id_tag2 )
							.Set( "long_name", GlobalFuncs.sanitize( long_name2 ) )
							.Set( "power", info2["power"] )
							.Set( "scrubbing", info2["scrubbing"] )
							.Set( "widenet", info2["widenet"] )
							.Set( "filter_co2", info2["filter_co2"] )
							.Set( "filter_toxins", info2["filter_toxins"] )
							.Set( "filter_n2o", info2["filter_n2o"] )
						
					 });
				}
				data["mode"] = this.mode;
				data["modes"] = new ByTable();
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Filtering - Scrubs out contaminants" ).Set( "mode", 1 ).Set( "selected", this.mode == 1 ).Set( "danger", 0 ) });
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Contaminated - Scrubs out ALL contaminants quickly" ).Set( "mode", 8 ).Set( "selected", this.mode == 8 ).Set( "danger", 0 ) });
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Draught - Siphons out air while replacing" ).Set( "mode", 2 ).Set( "selected", this.mode == 2 ).Set( "danger", 0 ) });
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Refill - Triple vent output" ).Set( "mode", 9 ).Set( "selected", this.mode == 9 ).Set( "danger", 0 ) });
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Cycle - Siphons air before replacing" ).Set( "mode", 4 ).Set( "selected", this.mode == 4 ).Set( "danger", 1 ) });
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Siphon - Siphons air out of the room" ).Set( "mode", 7 ).Set( "selected", this.mode == 7 ).Set( "danger", 1 ) });
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Panic Siphon - Siphons air out of the room quickly" ).Set( "mode", 3 ).Set( "selected", this.mode == 3 ).Set( "danger", 1 ) });
				data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Off - Shuts off vents and scrubbers" ).Set( "mode", 5 ).Set( "selected", this.mode == 5 ).Set( "danger", 0 ) });

				if ( Lang13.Bool( this.emagged ) ) {
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Flood - Shuts off scrubbers and opens vents" ).Set( "mode", 6 ).Set( "selected", this.mode == 6 ).Set( "danger", 1 ) });
				}
				selected = null;
				thresholds = new ByTable();
				selected = this.TLV["pressure"];
				thresholds.Add( new ByTable(new object [] { new ByTable().Set( "name", "Pressure" ).Set( "settings", new ByTable() ) }) );
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "min2" ).Set( "selected", selected.min2 ) });
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "min1" ).Set( "selected", selected.min1 ) });
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "max1" ).Set( "selected", selected.max1 ) });
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "max2" ).Set( "selected", selected.max2 ) });
				selected = this.TLV["temperature"];
				thresholds.Add( new ByTable(new object [] { new ByTable().Set( "name", "Temperature" ).Set( "settings", new ByTable() ) }) );
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "min2" ).Set( "selected", selected.min2 ) });
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "min1" ).Set( "selected", selected.min1 ) });
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "max1" ).Set( "selected", selected.max1 ) });
				thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "max2" ).Set( "selected", selected.max2 ) });

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.meta_gas_info )) {
					gas_id2 = _d;
					

					if ( !this.TLV.Contains( gas_id2 ) ) {
						continue;
					}
					selected = this.TLV[gas_id2];
					thresholds.Add( new ByTable(new object [] { new ByTable().Set( "name", GlobalVars.meta_gas_info[gas_id2][2] ).Set( "settings", new ByTable() ) }) );
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", gas_id2 ).Set( "val", "min2" ).Set( "selected", selected.min2 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", gas_id2 ).Set( "val", "min1" ).Set( "selected", selected.min1 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", gas_id2 ).Set( "val", "max1" ).Set( "selected", selected.max1 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", gas_id2 ).Set( "val", "max2" ).Set( "selected", selected.max2 ) });
				}
				data["thresholds"] = thresholds;
			}
			return data;
		}

		// Function from file: airalarm.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "airalarm", this.name, 440, 650, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: airalarm.dm
		public override int ui_status( dynamic user = null, UiState state = null ) {
			
			if ( user.has_unlimited_silicon_privilege && Lang13.Bool( this.aidisabled ) ) {
				user.WriteMsg( "AI control has been disabled." );
			} else if ( !Lang13.Bool( this.shorted ) ) {
				return base.ui_status( (object)(user), state );
			}
			return -1;
		}

		// Function from file: airalarm.dm
		public override void initialize(  ) {
			this.set_frequency( this.frequency );
			return;
		}

		// Function from file: airalarm.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			GlobalFuncs.qdel( this.wires );
			this.wires = null;
			return base.Destroy();
		}

	}

}