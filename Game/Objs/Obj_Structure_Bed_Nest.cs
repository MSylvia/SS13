// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Bed_Nest : Obj_Structure_Bed {

		public int health = 100;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/mob/alien.dmi";
			this.icon_state = "nest";
		}

		public Obj_Structure_Bed_Nest ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: alien_nests.dm
		public override bool unlock_atom( dynamic AM = null ) {
			bool _default = false;

			_default = base.unlock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}
			AM.pixel_y -= 6;
			return _default;
		}

		// Function from file: alien_nests.dm
		public override bool lock_atom( dynamic AM = null ) {
			bool _default = false;

			_default = base.lock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}
			AM.pixel_y += 6;
			return _default;
		}

		// Function from file: alien_nests.dm
		public void healthcheck(  ) {
			
			if ( this.health <= 0 ) {
				this.density = false;
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: alien_nests.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic aforce = null;

			aforce = a.force;
			this.health = Num13.MaxInt( 0, ((int)( this.health - Convert.ToDouble( aforce ) )) );
			GlobalFuncs.playsound( this.loc, "sound/effects/attackblob.ogg", 100, 1 );
			((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " hits " ).the( this ).item().str( " with " ).the( a ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>You hit " ).the( this ).item().str( " with " ).the( a ).item().str( "!</span>" ).ToString() );
			((Mob)b).delayNextAttack( 10 );
			this.healthcheck();
			return null;
		}

		// Function from file: alien_nests.dm
		public override void buckle_mob( dynamic M = null, dynamic user = null ) {
			
			if ( this.locked_atoms.len != 0 || !( M is Mob ) || Map13.GetDistance( this, user ) > 1 || M.loc != this.loc || ((Mob)user).restrained() || Lang13.Bool( Task13.User.stat ) || Lang13.Bool( M.locked_to ) || user is Mob_Living_Silicon_Pai ) {
				return;
			}

			if ( M is Mob_Living_Carbon_Alien ) {
				return;
			}

			if ( !( user is Mob_Living_Carbon_Alien_Humanoid ) ) {
				return;
			}

			if ( M == Task13.User ) {
				return;
			} else {
				((Ent_Static)M).visible_message( new Txt( "<span class='notice'>" ).item( user.name ).str( " secretes a thick vile goo, securing " ).item( M.name ).str( " into " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>" ).item( user.name ).str( " drenches you in a foul-smelling resin, trapping you in " ).the( this ).item().str( "!</span>" ).ToString(), "<span class='notice'>You hear squelching...</span>" );
			}
			this.lock_atom( M );
			M.pixel_y = 6;
			this.add_fingerprint( user );
			return;
		}

		// Function from file: alien_nests.dm
		public override void manual_unbuckle( dynamic user = null ) {
			Ent_Static M = null;

			
			if ( this.locked_atoms.len != 0 ) {
				M = this.locked_atoms[1];

				if ( M != user ) {
					M.visible_message( "<span class='notice'>" + user.name + " pulls " + M.name + " free from the sticky nest!</span>", "<span class='notice'>" + user.name + " pulls you free from the gelatinous resin.</span>", "<span class='notice'>You hear squelching...</span>" );
					this.unlock_atom( M );
				} else {
					M.visible_message( "<span class='warning'>" + M.name + " struggles to break free of the gelatinous resin...</span>", "<span class='warning'>You struggle to break free from the gelatinous resin...</span>", "<span class='notice'>You hear squelching...</span>" );
					Task13.Schedule( 1200, (Task13.Closure)(() => {
						
						if ( Lang13.Bool( user ) && M != null && user.locked_to == this ) {
							this.unlock_atom( M );
						}
						return;
					}));
				}
				this.add_fingerprint( user );
			}
			return;
		}

	}

}