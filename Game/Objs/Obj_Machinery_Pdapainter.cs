// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Pdapainter : Obj_Machinery {

		public dynamic storedpda = null;
		public ByTable colorlist = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/pda.dmi";
			this.icon_state = "pdapainter";
		}

		// Function from file: PDApainter.dm
		public Obj_Machinery_Pdapainter ( dynamic loc = null ) : base( (object)(loc) ) {
			ByTable blocked = null;
			dynamic P = null;
			dynamic D = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			blocked = new ByTable(new object [] { 
				typeof(Obj_Item_Device_Pda_Ai_Pai), 
				typeof(Obj_Item_Device_Pda_Ai), 
				typeof(Obj_Item_Device_Pda_Heads), 
				typeof(Obj_Item_Device_Pda_Clear), 
				typeof(Obj_Item_Device_Pda_Syndicate)
			 });

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Device_Pda) ) - blocked )) {
				P = _a;
				
				D = Lang13.Call( P );
				D.name = D.icon_state;
				this.colorlist.Add( D );
			}
			return;
		}

		// Function from file: PDApainter.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: PDApainter.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic P = null;

			base.attack_hand( (object)(a), b, c );
			this.add_fingerprint( a );

			if ( Lang13.Bool( this.storedpda ) ) {
				P = Interface13.Input( a, "Select your color!", "PDA Painting", null, this.colorlist, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( P ) ) {
					return null;
				}

				if ( !( Map13.GetDistance( this, a ) <= 1 ) ) {
					return null;
				}

				if ( !Lang13.Bool( this.storedpda ) ) {
					return null;
				}
				this.storedpda.icon_state = P.icon_state;
				this.storedpda.desc = P.desc;
				this.ejectpda();
			} else {
				a.WriteMsg( "<span class='notice'>The " + this + " is empty.</span>" );
			}
			return null;
		}

		// Function from file: PDApainter.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic P = null;

			
			if ( this.default_unfasten_wrench( user, A ) ) {
				this.power_change();
				return null;
			}

			if ( A is Obj_Item_Device_Pda ) {
				
				if ( Lang13.Bool( this.storedpda ) ) {
					user.WriteMsg( "<span class='warning'>There is already a PDA inside!</span>" );
					return null;
				} else {
					P = ((Mob)user).get_active_hand();

					if ( P is Obj_Item_Device_Pda ) {
						
						if ( !Lang13.Bool( user.drop_item() ) ) {
							return null;
						}
						this.storedpda = P;
						P.loc = this;
						((Ent_Static)P).add_fingerprint( user );
						this.update_icon();
					}
				}
			}
			return null;
		}

		// Function from file: PDApainter.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-broken";
				return false;
			}

			if ( Lang13.Bool( this.storedpda ) ) {
				this.overlays.Add( "" + Lang13.Initial( this, "icon_state" ) + "-closed" );
			}

			if ( Lang13.Bool( this.powered() ) ) {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			} else {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-off";
			}
			return false;
		}

		// Function from file: PDApainter.dm
		[Verb]
		[VerbInfo( name: "Eject PDA", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void ejectpda(  ) {
			
			if ( Task13.User.stat != 0 || Task13.User.restrained() || !Task13.User.canmove ) {
				return;
			}

			if ( Lang13.Bool( this.storedpda ) ) {
				this.storedpda.loc = GlobalFuncs.get_turf( this.loc );
				this.storedpda = null;
				this.update_icon();
			} else {
				Task13.User.WriteMsg( "<span class='notice'>The " + this + " is empty.</span>" );
			}
			return;
		}

	}

}