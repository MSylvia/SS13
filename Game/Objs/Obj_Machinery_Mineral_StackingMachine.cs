// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_StackingMachine : Obj_Machinery_Mineral {

		public Ent_Dynamic mover = null;
		public int in_dir = 1;
		public int out_dir = 2;
		public ByTable stacks = new ByTable();
		public int stack_amt = 50;
		public dynamic max_moved = 100;
		public dynamic id_tag = null;
		public int frequency = 1367;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 166;
			this.icon = "icons/obj/machines/mining_machines.dmi";
			this.icon_state = "stacker";
		}

		// Function from file: machine_stacking.dm
		public Obj_Machinery_Mineral_StackingMachine ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_StackingUnit(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_Capacitor()
			 });
			this.RefreshParts();
			this.mover = new Ent_Dynamic();

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: machine_stacking.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			this.id_tag = null;
			GlobalFuncs.qdel( this.mover );
			this.mover = null;
			_default = base.Destroy( (object)(brokenup) );
			return _default;
		}

		// Function from file: machine_stacking.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			double? changingdir = null;
			dynamic newdir = null;
			ByTable dirlist = null;
			dynamic olddir = null;
			int conflictingdir = 0;

			Interface13.Stat( null, href_list.Contains( "changedir" ) );

			if ( false ) {
				changingdir = String13.ParseNumber( href_list["changedir"] );
				changingdir = ( ( changingdir ??0) <= 1 ? 1 : ( ( changingdir ??0) >= 2 ? 2 : changingdir ) );
				newdir = Interface13.Input( "Select the new direction", this.name, "North", null, new ByTable(new object [] { "North", "South", "East", "West" }), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( newdir ) ) {
					return 1;
				}
				newdir = GlobalFuncs.text2dir( newdir );
				dirlist = new ByTable(new object [] { this.in_dir, this.out_dir });
				olddir = dirlist[changingdir];
				dirlist[changingdir] = -1;
				conflictingdir = dirlist.Find( newdir );

				if ( conflictingdir != 0 ) {
					dirlist[conflictingdir] = olddir;
				}
				dirlist[changingdir] = newdir;
				this.in_dir = Convert.ToInt32( dirlist[1] );
				this.out_dir = Convert.ToInt32( dirlist[2] );
				return 1;
			}
			return base.multitool_topic( user, href_list, (object)(O) );
		}

		// Function from file: machine_stacking.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n		<ul>\n			<li><b>Frequency: </b><a href='?src=" ).Ref( this ).str( ";set_freq=-1'>" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "</a></li>\n			<li>" ).item( this.format_tag( "ID Tag", "id_tag" ) ).str( "</li>\n			<li><b>Input: </b><a href='?src=" ).Ref( this ).str( ";changedir=1'>" ).item( GlobalFuncs.capitalize( GlobalFuncs.dir2text( this.in_dir ) ) ).str( "</a></li>\n			<li><b>Output: </b><a href='?src=" ).Ref( this ).str( ";changedir=2'>" ).item( GlobalFuncs.capitalize( GlobalFuncs.dir2text( this.out_dir ) ) ).str( "</a></li>\n		</ul>\n	" ).ToString();
		}

		// Function from file: machine_stacking.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)signal).data["release"] ) ) {
				this.release_stack( ((dynamic)signal).data["release"] );
				this.broadcast_status();
				return true;
			}
			return false;
		}

		// Function from file: machine_stacking.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			
			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: machine_stacking.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency );
			return;
		}

		// Function from file: machine_stacking.dm
		public void broadcast_status(  ) {
			ByTable data = null;
			ByTable stack_data = null;
			dynamic stack_id = null;
			dynamic stack = null;

			data = new ByTable();
			stack_data = new ByTable( this.stacks.len );

			foreach (dynamic _a in Lang13.Enumerate( this.stacks )) {
				stack_id = _a;
				
				stack = this.stacks[stack_id];
				stack_data[stack_id] = new ByTable().Set( "amount", stack.amount ).Set( "name", stack.name );
			}
			data["stacks"] = stack_data;
			data["stack_amt"] = this.stack_amt;
			this.send_signal( data );
			return;
		}

		// Function from file: machine_stacking.dm
		public void send_signal( ByTable data = null ) {
			Game_Data signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).source = this;
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).data["tag"] = this.id_tag;
			((dynamic)signal).data += data;
			this.radio_connection.post_signal( this, signal );
			return;
		}

		// Function from file: machine_stacking.dm
		public void release_stack( dynamic typepath = null, bool? forced = null ) {
			forced = forced ?? false;

			Tile out_T = null;
			Base_Data stack = null;
			Game_Data stacked = null;
			int release_amount = 0;

			Interface13.Stat( null, this.stacks.Contains( typepath ) );

			if ( !( forced == null ) ) {
				return;
			}
			out_T = Map13.GetStep( this, this.out_dir );

			if ( out_T.density && !( forced == true ) ) {
				return;
			}
			stack = this.stacks[typepath];
			stacked = GlobalFuncs.getFromPool( stack.type );
			release_amount = Num13.MinInt( Convert.ToInt32( ((dynamic)stack).amount ), this.stack_amt );
			((dynamic)stacked).amount = release_amount;
			((dynamic)stacked).forceMove( out_T );
			((dynamic)stack).amount -= release_amount;

			if ( Lang13.Bool( ((dynamic)stack).amount ) == false ) {
				this.stacks.Remove( typepath );
				GlobalFuncs.returnToPool( stack );
			}
			return;
		}

		// Function from file: machine_stacking.dm
		public override dynamic process(  ) {
			Tile in_T = null;
			Tile out_T = null;
			Game_Data stack = null;
			int moved = 0;
			Ent_Dynamic A = null;
			Ent_Dynamic stackA = null;
			dynamic typepath = null;

			in_T = Map13.GetStep( this, this.in_dir );
			out_T = Map13.GetStep( this, this.out_dir );

			if ( !in_T.CanPass( this.mover, in_T ) || !in_T.Enter( this.mover ) || !out_T.CanPass( this.mover, out_T ) || !out_T.Enter( this.mover ) ) {
				return null;
			}
			moved = 0;

			foreach (dynamic _a in Lang13.Enumerate( in_T.contents, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( Lang13.Bool( A.anchored ) ) {
					continue;
				}

				if ( A is Obj_Item_Stack ) {
					stackA = A;
					Interface13.Stat( null, this.stacks.Contains( "" + stackA.type ) );

					if ( !false ) {
						stack = GlobalFuncs.getFromPool( stackA.type, this );
						((dynamic)stack).amount = ((dynamic)stackA).amount;
					} else {
						stack = this.stacks["" + stackA.type];
						((dynamic)stack).amount += ((dynamic)stackA).amount;
					}
					this.stacks["" + stackA.type] = stack;
					GlobalFuncs.returnToPool( stackA );
				} else {
					A.forceMove( out_T );
				}
				moved++;

				if ( moved >= Convert.ToDouble( this.max_moved ) ) {
					break;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.stacks )) {
				typepath = _b;
				
				stack = this.stacks[typepath];

				if ( Convert.ToDouble( ((dynamic)stack).amount ) >= this.stack_amt ) {
					this.release_stack( typepath );
				}
			}
			this.broadcast_status();
			return null;
		}

		// Function from file: machine_stacking.dm
		public override dynamic power_change(  ) {
			dynamic _default = null;

			_default = base.power_change();
			this.update_icon();
			return _default;
		}

		// Function from file: machine_stacking.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				this.icon_state = "stacker_o";
			} else {
				this.icon_state = "stacker";
			}
			return null;
		}

		// Function from file: machine_stacking.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts_MatterBin bin = null;
			Obj_Item_Weapon_StockParts_Capacitor C = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				bin = _a;
				
				T += bin.rating;
			}
			this.max_moved = Lang13.Initial( this, "max_moved" ) * ( T / 3 );
			T = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Capacitor) )) {
				C = _b;
				
				T += C.rating - 1;
			}
			this.idle_power_usage = Lang13.Initial( this, "idle_power_usage" ) - T * Convert.ToDouble( Lang13.Initial( this, "idle_power_usage" ) / 4 );
			return null;
		}

	}

}