// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Optable : Obj_Machinery {

		public Ent_Static victim = null;
		public bool strapped = false;
		public bool rating = true;
		public dynamic computer = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 1;
			this.active_power_usage = 5;
			this.throwpass = true;
			this.icon = "icons/obj/surgery.dmi";
			this.icon_state = "table2-idle";
		}

		// Function from file: OpTable.dm
		public Obj_Machinery_Optable ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				this.dir = Convert.ToInt32( _a );
				
				this.computer = Lang13.FindIn( typeof(Obj_Machinery_Computer_Operating), Map13.GetStep( this, this.dir ) );

				if ( Lang13.Bool( this.computer ) ) {
					break;
				}
			}
			return;
		}

		// Function from file: OpTable.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 40 ) ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );

					switch ((bool)( this.rating )) {
						case 1:
							new Obj_Item_Weapon_StockParts_ScanningModule( this.loc );
							break;
						case 2:
							new Obj_Item_Weapon_StockParts_ScanningModule_Adv( this.loc );
							break;
						case 3:
							new Obj_Item_Weapon_StockParts_ScanningModule_Adv_Phasic( this.loc );
							break;
					}
					new Obj_Structure_Table_Reinforced( this.loc );
					GlobalFuncs.qdel( this );
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_Grab ) {
				
				if ( a.affecting is Mob_Living_Carbon ) {
					this.take_victim( a.affecting, Task13.User );
					GlobalFuncs.returnToPool( a );
					return null;
				}
			}

			if ( b is Mob_Living_Silicon_Robot ) {
				return null;
			}
			return null;
		}

		// Function from file: OpTable.dm
		public override dynamic process(  ) {
			this.check_victim();
			return null;
		}

		// Function from file: OpTable.dm
		public void take_victim( Ent_Static C = null, dynamic user = null ) {
			
			if ( this.victim != null ) {
				GlobalFuncs.to_chat( user, "<span class='bnotice'>The table is already occupied!</span>" );
			}
			((dynamic)C).unlock_from();
			((dynamic)C).forceMove( this.loc );

			if ( Lang13.Bool( ((dynamic)C).client ) ) {
				((dynamic)C).client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
				((dynamic)C).client.eye = this;
			}

			if ( C is Mob_Living_Carbon_Human ) {
				this.victim = C;
				((dynamic)C).resting = 1;
				((dynamic)C).update_canmove();
			}

			if ( C == user ) {
				((Ent_Static)user).visible_message( "" + user + " climbs on the operating table.", "You climb on the operating table." );
			} else {
				this.visible_message( "<span class='warning'>" + C + " has been laid on the operating table by " + user + ".</span>" );
			}
			this.add_fingerprint( user );
			return;
		}

		// Function from file: OpTable.dm
		public bool check_victim(  ) {
			
			if ( this.victim != null ) {
				
				if ( this.victim.loc == this.loc ) {
					
					if ( Lang13.Bool( ((dynamic)this.victim).lying ) ) {
						
						if ( Lang13.Bool( ((dynamic)this.victim).pulse ) ) {
							this.icon_state = "table2-active";
						} else {
							this.icon_state = "table2-idle";
						}
						return true;
					}
				}
				((dynamic)this.victim).reset_view();
				this.victim = null;
			}
			this.icon_state = "table2-idle";
			return false;
		}

		// Function from file: OpTable.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			Ent_Static L = null;

			
			if ( O is Obj_Item_Weapon || ((Mob)user).get_active_hand() == O ) {
				
				if ( Lang13.Bool( user.drop_item( O ) ) ) {
					
					if ( O.loc != this.loc ) {
						Map13.Step( (Ent_Dynamic)(O), Map13.GetDistance( O, this ) );
					}
				}
				return false;
			} else {
				
				if ( !( O is Mob ) ) {
					return false;
				}

				if ( O.loc == user || !( O.loc is Tile ) || !( user.loc is Tile ) ) {
					return false;
				}

				if ( ((Mob)user).incapacitated() || user.lying == true ) {
					return false;
				}

				if ( Lang13.Bool( ((dynamic)O).anchored ) || !this.Adjacent( user ) || !((Ent_Static)user).Adjacent( this ) ) {
					return false;
				}

				if ( O is Mob_Living_SimpleAnimal || O is Mob_Living_Silicon ) {
					return false;
				}

				if ( !( user is Mob_Living_Carbon_Human ) && !( user is Mob_Living_Silicon_Robot ) ) {
					return false;
				}

				if ( user.loc == null ) {
					return false;
				}
				L = O;

				if ( !( L is Mob_Living ) || Lang13.Bool( ((dynamic)L).locked_to ) || L == user ) {
					return false;
				}
				this.take_victim( L, user );
				return false;
			}
		}

		// Function from file: OpTable.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 1 ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: OpTable.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Interface13.Stat( null, Task13.User.mutations.Contains( 4 ) );

			if ( false ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You destroy the table.</span>" );
				this.visible_message( "<span class='warning'>" + Task13.User + " destroys the operating table!</span>" );
				this.density = false;
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: OpTable.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			Interface13.Stat( null, Task13.User.mutations.Contains( 4 ) );

			if ( false ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You destroy the operating table.</span>" );
				this.visible_message( "<span class='warning'>" + Task13.User + " destroys the operating table!</span>" );
				this.density = false;
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Optable), a.loc ) ) ) {
				Map13.Step( a, Map13.GetDistance( a, this ) );

				if ( a.loc == this.loc ) {
					a.layer = GlobalVars.TURF_LAYER;
					this.visible_message( "The monkey hides under the table!" );
				}
			}
			return null;
		}

		// Function from file: OpTable.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: OpTable.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.density = false;
					}
					break;
			}
			return false;
		}

		// Function from file: OpTable.dm
		[Verb]
		[VerbInfo( name: "Climb On Table", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void climb_on(  ) {
			
			if ( Task13.User.isUnconscious() || !( Task13.User is Mob_Living_Carbon_Human ) || Lang13.Bool( Task13.User.locked_to ) || Task13.User.restrained() ) {
				return;
			}
			this.take_victim( Task13.User, Task13.User );
			return;
		}

	}

}