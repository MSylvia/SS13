// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Binary_DpVentPump : Obj_Machinery_Atmospherics_Binary {

		public double? on = 0;
		public double? pump_direction = 1;
		public double? external_pressure_bound = 101.32499694824219;
		public double? input_pressure_min = 0;
		public double? output_pressure_max = 0;
		public double? pressure_checks = 1;
		public int frequency = 0;
		public dynamic id_tag = null;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.machine_flags = 128;
			this.icon = "icons/obj/atmospherics/dp_vent_pump.dmi";
			this.icon_state = "off";
		}

		public Obj_Machinery_Atmospherics_Binary_DpVentPump ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: dp_vent_pump.dm
		public override bool clone( dynamic O = null ) {
			this.id_tag = O.id_tag;
			this.set_frequency( Convert.ToInt32( O.frequency ) );
			return true;
		}

		// Function from file: dp_vent_pump.dm
		public override bool canClone( dynamic O = null ) {
			return O is Obj_Machinery_Atmospherics_Binary_DpVentPump;
		}

		// Function from file: dp_vent_pump.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.update_multitool_menu( user );
			return null;
		}

		// Function from file: dp_vent_pump.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: dp_vent_pump.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			bool handled = false;

			
			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" ) {
				return false;
			}
			handled = false;

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "power" ) ) ) {
				this.on = String13.ParseNumber( ((dynamic)signal).data["power"] );
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "power_toggle" ) ) ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "direction" ) ) ) {
				this.pump_direction = String13.ParseNumber( ((dynamic)signal).data["direction"] );
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "checks" ) ) ) {
				this.pressure_checks = String13.ParseNumber( ((dynamic)signal).data["checks"] );
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "purge" ) ) ) {
				this.pressure_checks = ((int)( this.pressure_checks )) & ( 65534 );
				this.pump_direction = 0;
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "stabilize" ) ) ) {
				this.pressure_checks = ((int)( this.pressure_checks )) | ( 1 );
				this.pump_direction = 1;
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "set_input_pressure" ) ) ) {
				this.input_pressure_min = ( ( String13.ParseNumber( ((dynamic)signal).data["set_input_pressure"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( ((dynamic)signal).data["set_input_pressure"] ) ??0) >= 5066.25 ? 5066.25 : String13.ParseNumber( ((dynamic)signal).data["set_input_pressure"] ) ) );
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "set_output_pressure" ) ) ) {
				this.output_pressure_max = ( ( String13.ParseNumber( ((dynamic)signal).data["set_output_pressure"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( ((dynamic)signal).data["set_output_pressure"] ) ??0) >= 5066.25 ? 5066.25 : String13.ParseNumber( ((dynamic)signal).data["set_output_pressure"] ) ) );
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "set_external_pressure" ) ) ) {
				this.external_pressure_bound = ( ( String13.ParseNumber( ((dynamic)signal).data["set_external_pressure"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( ((dynamic)signal).data["set_external_pressure"] ) ??0) >= 5066.25 ? 5066.25 : String13.ParseNumber( ((dynamic)signal).data["set_external_pressure"] ) ) );
				handled = true;
			}

			if ( Lang13.Bool( ((dynamic)signal).data.Contains( "status" ) ) ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.broadcast_status();
					return;
				}));
				return false;
			}

			if ( !handled ) {
				Game13.log.WriteMsg( "## TESTING: " + ( "[" + Game13.timeofday + "]: dp_vent_pump/receive_signal: unknown command \n" + ((dynamic)signal).debug_print() ) );
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.broadcast_status();
				return;
			}));
			this.update_icon();
			return false;
		}

		// Function from file: dp_vent_pump.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );

			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: dp_vent_pump.dm
		public bool broadcast_status(  ) {
			Game_Data signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data = new ByTable()
				.Set( "tag", this.id_tag )
				.Set( "device", "ADVP" )
				.Set( "power", this.on )
				.Set( "direction", ( Lang13.Bool( this.pump_direction ) ? "release" : "siphon" ) )
				.Set( "checks", this.pressure_checks )
				.Set( "input", this.input_pressure_min )
				.Set( "output", this.output_pressure_max )
				.Set( "external", this.external_pressure_bound )
				.Set( "sigtype", "status" )
			;
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			return true;
		}

		// Function from file: dp_vent_pump.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency != 0 ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

		// Function from file: dp_vent_pump.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			GasMixture environment = null;
			dynamic environment_pressure = null;
			int pressure_delta = 0;
			double transfer_moles = 0;
			dynamic removed = null;
			int pressure_delta2 = 0;
			double transfer_moles2 = 0;
			dynamic removed2 = null;

			_default = base.process();

			if ( !Lang13.Bool( this.on ) ) {
				return _default;
			}
			environment = this.loc.return_air();
			environment_pressure = environment.return_pressure();

			if ( Lang13.Bool( this.pump_direction ) ) {
				pressure_delta = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta = Num13.MinInt( pressure_delta, ((int)( ( this.external_pressure_bound ??0) - Convert.ToDouble( environment_pressure ) )) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 2 ) != 0 ) {
					pressure_delta = Num13.MinInt( pressure_delta, Convert.ToInt32( this.air1.return_pressure() - this.input_pressure_min ) );
				}

				if ( pressure_delta > 0 ) {
					
					if ( ( this.air1.temperature ??0) > 0 ) {
						transfer_moles = pressure_delta * ( environment.volume ??0) / ( ( this.air1.temperature ??0) * 8.314 );
						removed = this.air1.remove( transfer_moles );
						this.loc.assume_air( removed );

						if ( this.network1 != null ) {
							((dynamic)this.network1).update = 1;
						}
					}
				}
			} else {
				pressure_delta2 = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( pressure_delta2, Convert.ToInt32( environment_pressure - this.external_pressure_bound ) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 4 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( pressure_delta2, ((int)( ( this.output_pressure_max ??0) - Convert.ToDouble( this.air2.return_pressure() ) )) );
				}

				if ( pressure_delta2 > 0 ) {
					
					if ( ( environment.temperature ??0) > 0 ) {
						transfer_moles2 = pressure_delta2 * ( this.air2.volume ??0) / ( ( environment.temperature ??0) * 8.314 );
						removed2 = this.loc.remove_air( transfer_moles2 );
						this.air2.merge( removed2 );

						if ( this.network2 != null ) {
							((dynamic)this.network2).update = 1;
						}
					}
				}
			}
			return 1;
		}

		// Function from file: dp_vent_pump.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 1439 ).str( "\">Reset</a>)</li>\n		<li><b>ID Tag:</b> <a href=\"?src=" ).Ref( this ).str( ";set_id=1\">" ).item( this.id_tag ).str( "</a></li>\n	</ul>\n	" ).ToString();
		}

		// Function from file: dp_vent_pump.dm
		public override void hide( bool? h = null ) {
			
			if ( Lang13.Bool( this.on ) ) {
				
				if ( Lang13.Bool( this.pump_direction ) ) {
					this.icon_state = "" + ( h == true && this.loc is Tile_Simulated ? "h" : "" ) + "out";
				} else {
					this.icon_state = "" + ( h == true && this.loc is Tile_Simulated ? "h" : "" ) + "in";
				}
			} else {
				this.icon_state = "" + ( h == true && this.loc is Tile_Simulated ? "h" : "" ) + "off";
				this.on = 0;
			}
			return;
		}

		// Function from file: dp_vent_pump.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( Lang13.Bool( this.on ) ) {
				
				if ( Lang13.Bool( this.pump_direction ) ) {
					this.icon_state = "" + ( this.level == 1 && this.loc is Tile_Simulated ? "h" : "" ) + "out";
				} else {
					this.icon_state = "" + ( this.level == 1 && this.loc is Tile_Simulated ? "h" : "" ) + "in";
				}
			} else {
				this.icon_state = "" + ( this.level == 1 && this.loc is Tile_Simulated ? "h" : "" ) + "off";
				this.on = 0;
			}
			return null;
		}

	}

}