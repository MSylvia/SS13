// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Rcd : Obj_Item_MechaParts_MechaEquipment {

		public double? mode = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "materials=4;bluespace=3;magnets=4;powerstorage=4";
			this.equip_cooldown = 10;
			this.energy_drain = 250;
			this.range = 3;
			this.icon_state = "mecha_rcd";
		}

		// Function from file: work_tools.dm
		public Obj_Item_MechaParts_MechaEquipment_Rcd ( dynamic loc = null ) : base( (object)(loc) ) {
			GlobalVars.rcd_list.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: work_tools.dm
		public override string get_equip_info(  ) {
			return new Txt().item( base.get_equip_info() ).str( " [<a href='?src=" ).Ref( this ).str( ";mode=0'>D</a>|<a href='?src=" ).Ref( this ).str( ";mode=1'>C</a>|<a href='?src=" ).Ref( this ).str( ";mode=2'>A</a>]" ).ToString();
		}

		// Function from file: work_tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( href_list["mode"] ) ) {
				this.mode = String13.ParseNumber( href_list["mode"] );

				switch ((int?)( this.mode )) {
					case 0:
						this.occupant_message( "Switched RCD to Deconstruct." );
						this.energy_drain = Lang13.Initial( this, "energy_drain" );
						break;
					case 1:
						this.occupant_message( "Switched RCD to Construct." );
						this.energy_drain = Lang13.Initial( this, "energy_drain" ) * 2;
						break;
					case 2:
						this.occupant_message( "Switched RCD to Construct Airlock." );
						this.energy_drain = Lang13.Initial( this, "energy_drain" ) * 2;
						break;
				}
			}
			return null;
		}

		// Function from file: work_tools.dm
		public override bool do_after_cooldown( dynamic target = null ) {
			bool _default = false;

			_default = base.do_after_cooldown( (object)(target) );
			return _default;
		}

		// Function from file: work_tools.dm
		[VerbInfo( name: "action" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public override bool f_action( dynamic target = null ) {
			dynamic W = null;
			dynamic F = null;
			dynamic S = null;
			dynamic F2 = null;
			Obj_Machinery_Door_Airlock T = null;

			
			if ( target is Tile_Space_Transit ) {
				return false;
			}

			if ( !( target is Tile ) && !( target is Obj_Machinery_Door_Airlock ) ) {
				target = GlobalFuncs.get_turf( target );
			}

			if ( !this.action_checks( target ) || Map13.GetDistance( this.chassis, target ) > 3 ) {
				return false;
			}
			GlobalFuncs.playsound( this.chassis, "sound/machines/click.ogg", 50, 1 );

			switch ((int?)( this.mode )) {
				case 0:
					
					if ( target is Tile_Simulated_Wall ) {
						W = target;
						this.occupant_message( "Deconstructing " + W + "..." );

						if ( this.do_after_cooldown( W ) ) {
							this.chassis.spark_system.start();
							((Tile)W).ChangeTurf( typeof(Tile_Simulated_Floor_Plating) );
							GlobalFuncs.playsound( W, "sound/items/Deconstruct.ogg", 50, 1 );
						}
					} else if ( target is Tile_Simulated_Floor ) {
						F = target;
						this.occupant_message( "Deconstructing " + F + "..." );

						if ( this.do_after_cooldown( target ) ) {
							this.chassis.spark_system.start();
							((Tile)F).ChangeTurf( F.baseturf );
							GlobalFuncs.playsound( F, "sound/items/Deconstruct.ogg", 50, 1 );
						}
					} else if ( target is Obj_Machinery_Door_Airlock ) {
						this.occupant_message( "Deconstructing " + target + "..." );

						if ( this.do_after_cooldown( target ) ) {
							this.chassis.spark_system.start();
							GlobalFuncs.qdel( target );
							GlobalFuncs.playsound( target, "sound/items/Deconstruct.ogg", 50, 1 );
						}
					}
					break;
				case 1:
					
					if ( target is Tile_Space ) {
						S = target;
						this.occupant_message( "Building Floor..." );

						if ( this.do_after_cooldown( S ) ) {
							((Tile)S).ChangeTurf( typeof(Tile_Simulated_Floor_Plating) );
							GlobalFuncs.playsound( S, "sound/items/Deconstruct.ogg", 50, 1 );
							this.chassis.spark_system.start();
						}
					} else if ( target is Tile_Simulated_Floor ) {
						F2 = target;
						this.occupant_message( "Building Wall..." );

						if ( this.do_after_cooldown( F2 ) ) {
							((Tile)F2).ChangeTurf( typeof(Tile_Simulated_Wall) );
							GlobalFuncs.playsound( F2, "sound/items/Deconstruct.ogg", 50, 1 );
							this.chassis.spark_system.start();
						}
					}
					break;
				case 2:
					
					if ( target is Tile_Simulated_Floor ) {
						this.occupant_message( "Building Airlock..." );

						if ( this.do_after_cooldown( target ) ) {
							this.chassis.spark_system.start();
							T = new Obj_Machinery_Door_Airlock( target );
							T.autoclose = true;
							GlobalFuncs.playsound( target, "sound/items/Deconstruct.ogg", 50, 1 );
							GlobalFuncs.playsound( target, "sound/effects/sparks2.ogg", 50, 1 );
						}
					}
					break;
			}
			return false;
		}

		// Function from file: work_tools.dm
		public override dynamic Destroy(  ) {
			GlobalVars.rcd_list.Remove( this );
			base.Destroy();
			return null;
		}

	}

}