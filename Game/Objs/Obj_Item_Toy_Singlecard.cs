// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Toy_Singlecard : Obj_Item_Toy {

		public string cardname = null;
		public Obj_Item_Toy_Cards parentdeck = null;
		public bool flipped = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pixel_x = -5;
			this.icon = "icons/obj/toy.dmi";
			this.icon_state = "singlecard_down";
		}

		// Function from file: playing_cards.dm
		public Obj_Item_Toy_Singlecard ( dynamic NewLoc = null, Obj_Item_Toy_Cards cardsource = null, string newcardname = null ) : base( (object)(NewLoc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( cardsource != null ) {
				this.parentdeck = cardsource;
			}

			if ( Lang13.Bool( newcardname ) ) {
				this.cardname = newcardname;
				this.name = this.cardname;
			}
			this.update_icon();
			return;
		}

		// Function from file: playing_cards.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			((Ent_Static)user).visible_message( "<span class = 'notice'>" + user + " flips a card over.</span>", "<span class = 'notice'>You flip the card over.</span>" );
			this.Flip();
			return base.attack_self( (object)(user), (object)(flag), emp );
		}

		// Function from file: playing_cards.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;
			Obj_Item_Toy_Cardhand H = null;
			dynamic H2 = null;
			bool compatible = false;
			Obj_Item_Toy_Singlecard card = null;

			
			if ( a is Obj_Item_Toy_Singlecard ) {
				C = a;

				if ( !( Lang13.Bool( C.parentdeck ) || this.parentdeck != null ) || C.parentdeck == this.parentdeck ) {
					H = new Obj_Item_Toy_Cardhand( b.loc );
					H.parentdeck = C.parentdeck;
					new ByTable().Set( 1, C ).Set( 2, H ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( b, "drop_item" ) );
					((Mob)b).put_in_active_hand( H );
					GlobalFuncs.to_chat( b, new Txt( "<span class = 'notice'>You combine " ).the( C ).item().str( " and " ).the( this ).item().str( " into a hand.</span>" ).ToString() );
					new ByTable().Set( 1, C ).Set( 2, H ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( b, "drop_item" ) );
					((Mob)b).remove_from_mob( this );
					this.forceMove( H );
					H.currenthand.Add( C );
					H.currenthand.Add( this );
					H.update_icon();
					((Mob)b).put_in_hands( H );
				} else {
					GlobalFuncs.to_chat( b, "<span class = 'notice'>You can't mix cards from other decks.</span>" );
				}
			} else if ( a is Obj_Item_Toy_Cardhand ) {
				H2 = a;
				compatible = true;

				foreach (dynamic _a in Lang13.Enumerate( H2.currenthand, typeof(Obj_Item_Toy_Singlecard) )) {
					card = _a;
					

					if ( !( !( card.parentdeck != null || this.parentdeck != null ) || card.parentdeck == this.parentdeck ) ) {
						compatible = false;
					}
				}

				if ( compatible ) {
					b.WriteMsg( new Txt( "<span class = 'notice'>You add " ).the( this ).item().str( " to your hand.</span>" ).ToString() );
					b.drop_item( this, H2 );
					((Mob)b).remove_from_mob( this );
					this.forceMove( H2 );
					H2.currenthand.Add( this );
					H2.update_icon();
				} else {
					b.WriteMsg( "<span class = 'notice'>You can't mix cards from other decks.</span>" );
				}
			}

			if ( a is Obj_Item_Toy_Cards ) {
				return ((Ent_Static)a).attackby( this, b );
			}
			return null;
		}

		// Function from file: playing_cards.dm
		public void Flip(  ) {
			this.flipped = !this.flipped;
			this.update_icon();
			return;
		}

		// Function from file: playing_cards.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			dynamic cardUser = null;

			base.examine( (object)(user), size );

			if ( user is Mob_Living_Carbon_Human ) {
				cardUser = user;

				if ( ((Mob)cardUser).get_item_by_slot( 4 ) == this || ((Mob)cardUser).get_item_by_slot( 5 ) == this ) {
					((Ent_Static)cardUser).visible_message( new Txt( "<span class = 'notice'>" ).item( cardUser ).str( " checks " ).his_her_its_their().str( " card." ).ToString(), "<span class = 'notice'>The card reads: " + this.name + "</span>" );
				} else {
					GlobalFuncs.to_chat( cardUser, "<span class = 'notice'>You need to have the card in your hand to check it.</span>" );
				}
			}
			return null;
		}

		// Function from file: playing_cards.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.flipped ) {
				this.icon_state = "singlecard_down";
				this.pixel_x = -5;
				this.name = "card";
			} else {
				
				if ( Lang13.Bool( this.cardname ) ) {
					this.icon_state = "sc_" + this.cardname;
					this.name = this.cardname;
				} else {
					this.icon_state = "sc_Ace of Spades";
					this.name = "What Card";
				}
				this.pixel_x = 5;
			}
			return null;
		}

	}

}