// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Junction : Obj_Machinery_Atmospherics_Pipe_HeatExchanging {

		public override int device_type
		{
			get { return 2; }
		}

		protected override void __FieldInit() {
			base.__FieldInit();

			this.minimum_temperature_difference = 300;
			this.thermal_conductivity = 0;
			this.initialize_directions = 1;
			this.initialize_directions_he = 2;
			this.icon = "icons/obj/atmospherics/pipes/junction.dmi";
			this.icon_state = "intact";
		}

		public Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Junction ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			
		}

		// Function from file: junction.dm
		public override bool can_be_node( Obj_Machinery_Atmospherics target = null, double iteration = 0 ) {
			dynamic init_dir = null;
			Obj_Machinery_Atmospherics H = null;

			
			switch ((int)( iteration )) {
				case 1:
					init_dir = target.initialize_directions;
					break;
				case 2:
					H = target;

					if ( !( H is Obj_Machinery_Atmospherics_Pipe_HeatExchanging ) ) {
						return false;
					}
					init_dir = ((dynamic)H).initialize_directions_he;
					break;
			}

			if ( Lang13.Bool( init_dir & Map13.GetDistance( target, this ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: junction.dm
		public override void atmosinit( ByTable node_connects = null ) {
			int node2_connect = 0;
			int node1_connect = 0;
			ByTable node_connects2 = null;

			node2_connect = this.dir;
			node1_connect = Num13.Rotate( this.dir, 180 );
			node_connects2 = new ByTable(new object [] { node1_connect, node2_connect });
			base.atmosinit( node_connects2 );
			return;
		}

		// Function from file: junction.dm
		public override void SetInitDirections(  ) {
			
			switch ((int)( this.dir )) {
				case 2:
					this.initialize_directions = GlobalVars.NORTH;
					this.initialize_directions_he = GlobalVars.SOUTH;
					break;
				case 1:
					this.initialize_directions = GlobalVars.SOUTH;
					this.initialize_directions_he = GlobalVars.NORTH;
					break;
				case 4:
					this.initialize_directions = GlobalVars.WEST;
					this.initialize_directions_he = GlobalVars.EAST;
					break;
				case 8:
					this.initialize_directions = GlobalVars.EAST;
					this.initialize_directions_he = GlobalVars.WEST;
					break;
			}
			return;
		}

	}

}