// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Scrubber : Obj_Machinery_PortableAtmospherics {

		public bool on = false;
		public double volume_rate = 800;
		public double minrate = 0;
		public double maxrate = 1013.25;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 750;
			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "pscrubber:0";
		}

		public Obj_Machinery_PortableAtmospherics_Scrubber ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: scrubber.dm
		public override void AltClick( Mob user = null ) {
			
			if ( !Task13.User.incapacitated() && this.Adjacent( Task13.User ) && Lang13.Bool( Task13.User.dexterity_check() ) ) {
				this.eject_holding();
				return;
			}
			base.AltClick( user ); return;
		}

		// Function from file: scrubber.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			double? diff = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["power"] ) ) {
				this.on = !this.on;
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["remove_tank"] ) ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					this.eject_holding();
				}
			}

			if ( Lang13.Bool( href_list["volume_adj"] ) ) {
				diff = String13.ParseNumber( href_list["volume_adj"] );
				this.volume_rate = ( this.volume_rate + ( diff ??0) <= this.minrate ? this.minrate : ( this.volume_rate + ( diff ??0) >= this.maxrate ? this.maxrate : this.volume_rate + ( diff ??0) ) );
			}
			this.add_fingerprint( Task13.User );
			return 1;
		}

		// Function from file: scrubber.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;

			data = new ByTable( 0 );
			data["portConnected"] = ( Lang13.Bool( this.connected_port ) ? true : false );
			data["tankPressure"] = Num13.Floor( Convert.ToDouble( ( Convert.ToDouble( this.air_contents.return_pressure() ) > 0 ? this.air_contents.return_pressure() : ((dynamic)( 0 )) ) ) );
			data["rate"] = Num13.Floor( this.volume_rate );
			data["minrate"] = Num13.Floor( this.minrate );
			data["maxrate"] = Num13.Floor( this.maxrate );
			data["on"] = ( this.on ? true : false );
			data["hasHoldingTank"] = ( Lang13.Bool( this.holding ) ? true : false );

			if ( Lang13.Bool( this.holding ) ) {
				data["holdingTank"] = new ByTable()
					.Set( "name", this.holding.name )
					.Set( "tankPressure", Num13.Floor( Convert.ToDouble( ( Convert.ToDouble( this.holding.air_contents.return_pressure() ) > 0 ? this.holding.air_contents.return_pressure() : ((dynamic)( 0 )) ) ) ) )
				;
			}
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "portscrubber.tmpl", "Portable Scrubber", 480, 400 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

		// Function from file: scrubber.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.ui_interact( a );
			return null;
		}

		// Function from file: scrubber.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: scrubber.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: scrubber.dm
		public override GasMixture return_air(  ) {
			return this.air_contents;
		}

		// Function from file: scrubber.dm
		public override dynamic process(  ) {
			GasMixture environment = null;
			double transfer_moles = 0;
			dynamic removed = null;
			GasMixture filtered_out = null;
			Gas trace_gas = null;
			Gas trace_gas2 = null;

			base.process();

			if ( this.on ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					environment = this.holding.air_contents;
				} else {
					environment = this.loc.return_air();
				}
				transfer_moles = Num13.MinInt( 1, ((int)( this.volume_rate / ( environment.volume ??0) )) ) * Convert.ToDouble( environment.f_total_moles() );

				if ( Lang13.Bool( this.holding ) ) {
					removed = environment.remove( transfer_moles );
				} else {
					removed = this.loc.remove_air( transfer_moles );
				}

				if ( Lang13.Bool( removed ) ) {
					filtered_out = new GasMixture();
					filtered_out.temperature = Lang13.DoubleNullable( removed.temperature );
					filtered_out.toxins = removed.toxins;
					removed.toxins = 0;
					filtered_out.carbon_dioxide = removed.carbon_dioxide;
					removed.carbon_dioxide = 0;

					if ( removed.trace_gases.len > 0 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
							trace_gas = _a;
							

							if ( trace_gas is Gas_SleepingAgent ) {
								removed.trace_gases.Remove( trace_gas );
								filtered_out.trace_gases.Add( trace_gas );
							}
						}
					}

					if ( removed.trace_gases.len > 0 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
							trace_gas2 = _b;
							

							if ( trace_gas2 is Gas_OxygenAgentB ) {
								removed.trace_gases.Remove( trace_gas2 );
								filtered_out.trace_gases.Add( trace_gas2 );
							}
						}
					}
					this.air_contents.merge( filtered_out );

					if ( Lang13.Bool( this.holding ) ) {
						environment.merge( removed );
					} else {
						this.loc.assume_air( removed );
					}
				}
				GlobalVars.nanomanager.update_uis( this );
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays = 0;

			if ( this.on ) {
				this.icon_state = "pscrubber:1";
			} else {
				this.icon_state = "pscrubber:0";
			}

			if ( Lang13.Bool( this.holding ) ) {
				this.overlays.Add( "scrubber-open" );
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.overlays.Add( "scrubber-connector" );
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return null;
			}

			if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
				this.on = !this.on;
				this.update_icon();
			}
			GlobalVars.nanomanager.update_uis( this );
			base.emp_act( severity );
			return null;
		}

	}

}