// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Scrubber : Obj_Machinery_PortableAtmospherics {

		public int? on = 0;
		public double volume_rate = 1000;
		public ByTable scrubbing = new ByTable(new object [] { "plasma", "co2", "n2o", "agent_b" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 1000;
			this.icon_state = "pscrubber:0";
		}

		public Obj_Machinery_PortableAtmospherics_Scrubber ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: scrubber.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "power":
					this.on = !Lang13.Bool( this.on ) ?1:0;
					_default = GlobalVars.TRUE;
					break;
				case "eject":
					
					if ( Lang13.Bool( this.holding ) ) {
						this.holding.loc = GlobalFuncs.get_turf( this );
						this.holding = null;
						_default = GlobalVars.TRUE;
					}
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: scrubber.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["on"] = this.on;
			data["connected"] = ( Lang13.Bool( this.connected_port ) ? true : false );
			data["pressure"] = Num13.Floor( ( this.air_contents.return_pressure() != 0 ? this.air_contents.return_pressure() : 0 ) );

			if ( Lang13.Bool( this.holding ) ) {
				data["holding"] = new ByTable();
				data["holding"]["name"] = this.holding.name;
				data["holding"]["pressure"] = Num13.Floor( Convert.ToDouble( this.holding.air_contents.return_pressure() ) );
			}
			return data;
		}

		// Function from file: scrubber.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.physical_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "portable_scrubber", this.name, 420, 335, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: scrubber.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( this.is_operational() ) {
				
				if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
					this.on = !Lang13.Bool( this.on ) ?1:0;
				}
				this.update_icon();
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: scrubber.dm
		public void scrub( GasMixture mixture = null ) {
			double transfer_moles = 0;
			GasMixture filtering = null;
			GasMixture filtered = null;
			dynamic gas = null;

			transfer_moles = Num13.MinInt( 1, ((int)( this.volume_rate / ( mixture.volume ??0) )) ) * mixture.total_moles();
			filtering = mixture.remove( transfer_moles );
			filtered = new GasMixture();

			if ( !( filtering != null ) ) {
				return;
			}
			filtered.temperature = filtering.temperature;

			foreach (dynamic _a in Lang13.Enumerate( filtering.gases & this.scrubbing )) {
				gas = _a;
				
				filtered.add_gas( gas );
				filtered.gases[gas][1] = filtering.gases[gas][1];
				filtering.gases[gas][1] = 0;
			}
			filtering.garbage_collect();
			this.air_contents.merge( filtered );
			mixture.merge( filtering );

			if ( !Lang13.Bool( this.holding ) ) {
				this.air_update_turf();
			}
			return;
		}

		// Function from file: scrubber.dm
		public override int? process_atmos(  ) {
			dynamic T = null;

			base.process_atmos();

			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( Lang13.Bool( this.holding ) ) {
				this.scrub( this.holding.air_contents );
			} else {
				T = GlobalFuncs.get_turf( this );
				this.scrub( ((Ent_Static)T).return_air() );
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "pscrubber:" + this.on;
			this.overlays.Cut();

			if ( Lang13.Bool( this.holding ) ) {
				this.overlays.Add( "scrubber-open" );
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.overlays.Add( "scrubber-connector" );
			}
			return false;
		}

		// Function from file: scrubber.dm
		public override dynamic Destroy(  ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this );
			((Ent_Static)T).assume_air( this.air_contents );
			this.air_update_turf();
			return base.Destroy();
		}

	}

}