// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Tool_HydraulicClamp : Obj_Item_MechaParts_MechaEquipment_Tool {

		public int dam_force = 20;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.equip_cooldown = 15;
			this.energy_drain = 10;
			this.icon_state = "mecha_clamp";
		}

		public Obj_Item_MechaParts_MechaEquipment_Tool_HydraulicClamp ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tools.dm
		public override bool action( dynamic target = null ) {
			Obj_Mecha R = null;
			dynamic supermatter = null;
			ByTable living_in_target = null;
			dynamic O = null;
			dynamic FD = null;
			int count = 0;
			Obj_Item_Weapon_Ore I = null;
			Ent_Static T = null;
			ByTable oh_shit_new_living_in_target = null;
			dynamic M = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( !( this.chassis is Obj_Mecha_Working_Ripley ) ) {
				return false;
			}
			R = this.chassis;

			if ( target is Obj_Machinery_Power_Supermatter ) {
				supermatter = target;

				if ( Lang13.Bool( supermatter.damage ) ) {
					this.occupant_message( "<span class='danger'>The supermatter is fluctuating too wildly to safely lift!</span>" );
					return false;
				}
			}

			if ( target is Obj_Structure_Bed ) {
				this.occupant_message( "<span class='warning'>Safety features prevent this action.</span>" );
				return false;
			}
			living_in_target = ((Ent_Static)target).search_contents_for( typeof(Mob_Living) );

			if ( living_in_target.len != 0 ) {
				this.occupant_message( "<span class='warning'>Safety features prevent this action.</span>" );
				return false;
			}

			if ( target is Obj ) {
				O = target;

				if ( O is Obj_Machinery_Door_Firedoor ) {
					FD = O;

					if ( !Lang13.Bool( FD.operating ) ) {
						((Obj_Machinery_Door_Firedoor)FD).force_open( this.chassis.occupant, this );
					}
					return false;
				}

				if ( !Lang13.Bool( O.anchored ) ) {
					
					if ( O is Obj_Item_Weapon_Ore && Lang13.Bool( ((dynamic)R).ore_box ) ) {
						count = 0;

						foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( target ), typeof(Obj_Item_Weapon_Ore) )) {
							I = _a;
							

							if ( Lang13.Bool( I.material ) ) {
								((Materials)((dynamic)R).ore_box.materials).addAmount( I.material, 1 );
								GlobalFuncs.returnToPool( I );
								count++;
							}
						}

						if ( count != 0 ) {
							this.log_message( "Loaded " + count + " ore into compatible ore box." );
							this.occupant_message( "<font color='blue'>" + count + " ore successfully loaded into cargo compartment.</font>" );
							this.chassis.visible_message( "" + this.chassis + " scoops up the ore from the ground and loads it into cargo compartment." );
						}
					} else if ( ((dynamic)R).cargo.len < Convert.ToDouble( ((dynamic)R).cargo_capacity ) ) {
						this.occupant_message( "You lift " + target + " and start to load it into cargo compartment." );
						this.chassis.visible_message( "" + this.chassis + " lifts " + target + " and starts to load it into cargo compartment." );
						this.set_ready_state( false );
						this.chassis.use_power( this.energy_drain );
						O.anchored = 1;
						T = this.chassis.loc;

						if ( this.do_after_cooldown( target ) ) {
							oh_shit_new_living_in_target = ((Ent_Static)target).search_contents_for( typeof(Mob_Living) );

							if ( oh_shit_new_living_in_target.len != 0 ) {
								return false;
							}

							if ( T == this.chassis.loc && this == this.chassis.selected ) {
								((dynamic)R).cargo += O;
								O.loc = this.chassis;

								if ( !Lang13.Bool( ((dynamic)R).ore_box ) && O is Obj_Structure_OreBox ) {
									((dynamic)R).ore_box = O;
								}
								O.anchored = 0;
								this.occupant_message( "<font color='blue'>" + target + " succesfully loaded.</font>" );
								this.log_message( "Loaded " + O + ". Cargo compartment capacity: " + ( ((dynamic)R).cargo_capacity - ((dynamic)R).cargo.len ) );
							} else {
								this.occupant_message( "<font color='red'>You must hold still while handling objects.</font>" );
								O.anchored = Lang13.Initial( O, "anchored" );
							}
						}
					} else {
						this.occupant_message( "<font color='red'>Not enough room in cargo compartment.</font>" );
					}
				} else {
					this.occupant_message( "<font color='red'>" + target + " is firmly secured.</font>" );
				}
			} else if ( target is Mob_Living ) {
				M = target;

				if ( Convert.ToInt32( M.stat ) == 2 ) {
					return false;
				}

				if ( ((dynamic)this.chassis.occupant).a_intent == "hurt" ) {
					((Mob_Living)M).take_overall_damage( this.dam_force );

					if ( !Lang13.Bool( M ) ) {
						return false;
					}
					((Mob_Living)M).adjustOxyLoss( Num13.Floor( this.dam_force / 2 ) );
					((Mob_Living)M).updatehealth();
					this.occupant_message( "<span class='warning'>You squeeze " + target + " with " + this.name + ". Something cracks.</span>" );
					this.chassis.visible_message( "<span class='warning'>" + this.chassis + " squeezes " + target + ".</span>" );
					M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='orange'> Mech Squeezed by " + this.chassis.occupant.name + " (" + ((dynamic)this.chassis.occupant).ckey + ") with " + this.name + "</font>" );
					((dynamic)this.chassis.occupant).attack_log += "[" + GlobalFuncs.time_stamp() + "]<font color='red'> Mech Squeezed " + M.name + " (" + M.ckey + ") with " + this.name + "</font>";
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + this.chassis.occupant.name + " (" + ((dynamic)this.chassis.occupant).ckey + ") mech squeezed " + M.name + " (" + M.ckey + ") with " + this.name + "</font>" ) ) );
				} else {
					Map13.StepAway( M, this.chassis, null );
					this.occupant_message( "You push " + target + " out of the way." );
					this.chassis.visible_message( "" + this.chassis + " pushes " + target + " out of the way." );
				}
				this.set_ready_state( false );
				this.chassis.use_power( this.energy_drain );
				this.do_after_cooldown();
			}
			return true;
		}

		// Function from file: tools.dm
		public override void detach( dynamic moveto = null ) {
			Obj_Mecha R = null;

			base.detach( (object)(moveto) );

			if ( this.chassis is Obj_Mecha_Working_Ripley ) {
				R = this.chassis;
				((dynamic)R).hydraulic_clamp = null;
			}
			return;
		}

		// Function from file: tools.dm
		public override void attach( Obj_Mecha M = null ) {
			Obj_Mecha R = null;

			base.attach( M );

			if ( this.chassis is Obj_Mecha_Working_Ripley ) {
				R = this.chassis;
				((dynamic)R).hydraulic_clamp = this;
			}
			return;
		}

		// Function from file: tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Working_Ripley ) {
					return true;
				}
			}
			return false;
		}

	}

}