// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Spacepod : Obj {

		public Mob occupant = null;
		public Spacepod_Equipment equipment_system = null;
		public dynamic battery = null;
		public GasMixture cabin_air = null;
		public Obj_Machinery_PortableAtmospherics_Canister_Air internal_tank = null;
		public Effect_Effect_System_Trail_SpaceTrail ion_trail = null;
		public bool use_internal_tank = false;
		public GlobalIterator_PodPreserveTemp pr_int_temp_processor = null;
		public GlobalIterator_PodTankGiveAir pr_give_air = null;
		public double? inertia_dir = 0;
		public bool hatch_open = false;
		public int next_firetime = 0;
		public ByTable pod_overlays = null;
		public int health = 400;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.infra_luminosity = 15;
			this.anchored = 1;
			this.unacidable = true;
			this.internal_gravity = true;
			this.icon = "icons/48x48/pods.dmi";
			this.layer = 3.9;
		}

		// Function from file: spacepods.dm
		public Obj_Spacepod ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !( this.pod_overlays != null ) ) {
				this.pod_overlays = new ByTable( 2 );
				this.pod_overlays[1] = new Image( this.icon, null, "pod_damage" );
				this.pod_overlays[2] = new Image( this.icon, null, "pod_fire" );
			}
			this.bound_width = 64;
			this.bound_height = 64;
			this.dir = ((int)( GlobalVars.EAST ));
			this.battery = new Obj_Item_Weapon_Cell_High();
			this.add_cabin();
			this.add_airtank();
			this.ion_trail = new Effect_Effect_System_Trail_SpaceTrail();
			this.ion_trail.set_up( this );
			this.ion_trail.start();
			this.use_internal_tank = true;
			this.pr_int_temp_processor = new GlobalIterator_PodPreserveTemp( new ByTable(new object [] { this }) );
			this.pr_give_air = new GlobalIterator_PodTankGiveAir( new ByTable(new object [] { this }) );
			this.equipment_system = new Spacepod_Equipment( this );
			return;
		}

		// Function from file: spacepods.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			bool moveship = false;

			moveship = true;

			if ( Lang13.Bool( this.battery ) && Convert.ToDouble( this.battery.charge ) >= 3 && this.health != 0 ) {
				this.dir = ((int)( direction ??0 ));

				switch ((int?)( direction )) {
					case 1:
						
						if ( this.inertia_dir == 2 ) {
							this.inertia_dir = 0;
							moveship = false;
						}
						break;
					case 2:
						
						if ( this.inertia_dir == 1 ) {
							this.inertia_dir = 0;
							moveship = false;
						}
						break;
					case 4:
						
						if ( this.inertia_dir == 8 ) {
							this.inertia_dir = 0;
							moveship = false;
						}
						break;
					case 8:
						
						if ( this.inertia_dir == 4 ) {
							this.inertia_dir = 0;
							moveship = false;
						}
						break;
				}

				if ( moveship ) {
					this.Move( Map13.GetStep( this, ((int)( direction ??0 )) ), ((int?)( direction )) );

					if ( this.loc is Tile_Space ) {
						this.inertia_dir = direction;
					}
				}
			} else {
				
				if ( !Lang13.Bool( this.battery ) ) {
					GlobalFuncs.to_chat( M, "<span class='warning'>No energy cell detected.</span>" );
				} else if ( Convert.ToDouble( this.battery.charge ) < 3 ) {
					GlobalFuncs.to_chat( M, "<span class='warning'>Not enough charge left.</span>" );
				} else if ( !( this.health != 0 ) ) {
					GlobalFuncs.to_chat( M, "<span class='warning'>She's dead, Jim</span>" );
				} else {
					GlobalFuncs.to_chat( M, "<span class='warning'>Unknown error has occurred, yell at pomf.</span>" );
				}
				return 0;
			}
			this.battery.charge = Num13.MaxInt( 0, Convert.ToInt32( this.battery.charge - 3 ) );
			return null;
		}

		// Function from file: spacepods.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;
			step_x = step_x ?? 0;
			step_y = step_y ?? 0;

			bool _default = false;

			Ent_Static oldloc = null;

			oldloc = this.loc;
			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( this.dir != 0 && oldloc != NewLoc ) {
				this.loc.Entered( this, oldloc );
			}
			return _default;
		}

		// Function from file: spacepods.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			
			if ( O != user ) {
				return false;
			}
			this.move_inside(  );
			return false;
		}

		// Function from file: spacepods.dm
		public override GasMixture return_air(  ) {
			
			if ( this.use_internal_tank ) {
				return this.cabin_air;
			}
			return this.get_turf_air();
		}

		// Function from file: spacepods.dm
		public override dynamic remove_air( dynamic amount = null ) {
			dynamic T = null;

			
			if ( this.use_internal_tank ) {
				return this.cabin_air.remove( amount );
			} else {
				T = GlobalFuncs.get_turf( this );

				if ( Lang13.Bool( T ) ) {
					return ((Ent_Static)T).remove_air( amount );
				}
			}
			return null;
		}

		// Function from file: spacepods.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			ByTable possible = null;
			dynamic SPE = null;

			
			if ( !this.hatch_open ) {
				return base.attack_hand( (object)(a), (object)(b), (object)(c) );
			}

			if ( !( this.equipment_system != null ) || !( this.equipment_system is Spacepod_Equipment ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>The pod has no equipment datum, or is the wrong type, yell at pomf.</span>" );
				return null;
			}
			possible = new ByTable();

			if ( Lang13.Bool( this.battery ) ) {
				possible.Add( "Energy Cell" );
			}

			if ( Lang13.Bool( this.equipment_system.weapon_system ) ) {
				possible.Add( "Weapon System" );
			}

			dynamic _a = Interface13.Input( a, "Remove which equipment?", null, null, possible, InputType.Null | InputType.Any ); // Was a switch-case, sorry for the mess.
			if ( _a=="Energy Cell" ) {
				
				if ( ((Mob)a).put_in_any_hand_if_possible( this.battery ) ) {
					GlobalFuncs.to_chat( a, new Txt( "<span class='notice'>You remove " ).the( this.battery ).item().str( " from the space pod</span>" ).ToString() );
					this.battery = null;
				}
			} else if ( _a=="Weapon System" ) {
				SPE = this.equipment_system.weapon_system;

				if ( ((Mob)a).put_in_any_hand_if_possible( SPE ) ) {
					GlobalFuncs.to_chat( a, new Txt( "<span class='notice'>You remove " ).the( SPE ).item().str( " from the equipment system.</span>" ).ToString() );
					SPE.my_atom = null;
					this.equipment_system.weapon_system = null;
					this.verbs.Remove( Lang13.GetTypes( "/obj/item/device/spacepod_equipment/weaponry/proc" ) );
				} else {
					GlobalFuncs.to_chat( a, "<span class='warning'>You need an open hand to do that.</span>" );
				}
			}
			return null;
		}

		// Function from file: spacepods.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Crowbar ) {
				this.hatch_open = !this.hatch_open;
				GlobalFuncs.to_chat( b, "<span class='notice'>You " + ( this.hatch_open ? "open" : "close" ) + " the maintenance hatch.</span>" );
			}

			if ( a is Obj_Item_Weapon_Cell ) {
				
				if ( !this.hatch_open ) {
					return base.attackby( (object)(a), (object)(b), (object)(c) );
				}

				if ( Lang13.Bool( this.battery ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>The pod already has a battery.</span>" );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.battery = a;
					return null;
				}
			}

			if ( a is Obj_Item_Device_SpacepodEquipment ) {
				
				if ( !this.hatch_open ) {
					return base.attackby( (object)(a), (object)(b), (object)(c) );
				}

				if ( !( this.equipment_system != null ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The pod has no equipment datum, yell at pomf</span>" );
					return null;
				}

				if ( a is Obj_Item_Device_SpacepodEquipment_Weaponry ) {
					
					if ( Lang13.Bool( this.equipment_system.weapon_system ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>The pod already has a weapon system, remove it first.</span>" );
						return null;
					} else if ( Lang13.Bool( b.drop_item( a, this.equipment_system ) ) ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You insert " ).the( a ).item().str( " into the equipment system.</span>" ).ToString() );
						this.equipment_system.weapon_system = a;
						this.equipment_system.weapon_system.my_atom = this;
						Lang13.Call( typeof(Obj_Item_Device_SpacepodEquipment_Weaponry).GetMethod( "fire_weapon_system" ), this, this.equipment_system.weapon_system.verb_name, this.equipment_system.weapon_system.verb_desc );
						return null;
					}
				}
			}
			return null;
		}

		// Function from file: spacepods.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			Mob H = null;

			
			switch ((int?)( severity )) {
				case 1:
					H = this.occupant;

					if ( H != null ) {
						H.loc = GlobalFuncs.get_turf( this );
						H.ex_act( ( severity ??0) + 1 );
						GlobalFuncs.to_chat( H, new Txt( "<span class='warning'>You are forcefully thrown from " ).the( this ).item().str( "!</span>" ).ToString() );
					}
					Lang13.Delete( this.ion_trail );
					this.ion_trail = null;
					Lang13.Delete( this );
					Task13.Source = null;
					return false;
					break;
				case 2:
					this.deal_damage( 100 );
					break;
				case 3:
					
					if ( Rand13.PercentChance( 40 ) ) {
						this.deal_damage( 50 );
					}
					break;
			}
			return false;
		}

		// Function from file: spacepods.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Lang13.Bool( Proj.damage ) && !Proj.nodamage ) {
				this.deal_damage( Convert.ToInt32( Proj.damage ) );
			}
			return null;
		}

		// Function from file: spacepods.dm
		public bool Process_Spacemove( bool? check_drift = null, dynamic user = null ) {
			check_drift = check_drift ?? false;

			int dense_object = 0;
			dynamic direction = null;
			Tile cardinal = null;

			dense_object = 0;

			if ( !Lang13.Bool( user ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.NORTHEAST, GlobalVars.EAST }) )) {
					direction = _a;
					
					cardinal = Map13.GetStep( this, Convert.ToInt32( direction ) );

					if ( cardinal is Tile_Space ) {
						continue;
					}
					dense_object++;
					break;
				}
			}

			if ( !( dense_object != 0 ) ) {
				return false;
			}
			this.inertia_dir = 0;
			return true;
		}

		// Function from file: spacepods.dm
		public bool enter_after( int delay = 0, Mob user = null, int? numticks = null ) {
			numticks = numticks ?? 5;

			double delayfraction = 0;
			Ent_Static T = null;
			int? i = null;

			delayfraction = delay / ( numticks ??0);
			T = user.loc;
			i = null;
			i = 0;

			while (( i ??0) < ( numticks ??0)) {
				Task13.Sleep( ((int)( delayfraction )) );

				if ( !( this != null ) || !( user != null ) || !user.canmove || !( user.loc == T ) ) {
					return false;
				}
				i++;
			}
			return true;
		}

		// Function from file: spacepods.dm
		public bool moved_inside( Mob H = null ) {
			
			if ( Map13.FetchInRange( null, 1 ).Contains( H != null && H.client != null && H != null ) ) {
				H.reset_view( this );
				H.stop_pulling();
				H.forceMove( this );
				this.occupant = H;
				this.add_fingerprint( H );
				this.forceMove( this.loc );
				GlobalFuncs.playsound( this, "sound/machines/windowdoor.ogg", 50, 1 );
				return true;
			} else {
				return false;
			}
		}

		// Function from file: spacepods.dm
		public dynamic return_temperature(  ) {
			dynamic _default = null;

			GasMixture t_air = null;

			_default = 0;

			if ( this.use_internal_tank ) {
				_default = this.cabin_air.return_temperature();
			} else {
				t_air = this.get_turf_air();

				if ( t_air != null ) {
					_default = t_air.return_temperature();
				}
			}
			return _default;
		}

		// Function from file: spacepods.dm
		public dynamic return_pressure(  ) {
			dynamic _default = null;

			GasMixture t_air = null;

			_default = 0;

			if ( this.use_internal_tank ) {
				_default = this.cabin_air.return_pressure();
			} else {
				t_air = this.get_turf_air();

				if ( t_air != null ) {
					_default = t_air.return_pressure();
				}
			}
			return _default;
		}

		// Function from file: spacepods.dm
		public GasMixture get_turf_air(  ) {
			GasMixture _default = null;

			dynamic T = null;

			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				_default = ((Ent_Static)T).return_air();
			}
			return _default;
		}

		// Function from file: spacepods.dm
		public Obj_Machinery_PortableAtmospherics_Canister_Air add_airtank(  ) {
			this.internal_tank = new Obj_Machinery_PortableAtmospherics_Canister_Air( this );
			return this.internal_tank;
		}

		// Function from file: spacepods.dm
		public GasMixture add_cabin(  ) {
			this.cabin_air = new GasMixture();
			this.cabin_air.temperature = 293.41;
			this.cabin_air.volume = 200;
			this.cabin_air.oxygen = ( this.cabin_air.volume ??0) * 0.01 / ( ( this.cabin_air.temperature ??0) * 8.314 );
			this.cabin_air.nitrogen = ( this.cabin_air.volume ??0) * 0.79 / ( ( this.cabin_air.temperature ??0) * 8.314 );
			return this.cabin_air;
		}

		// Function from file: spacepods.dm
		public void deal_damage( int damage = 0 ) {
			int oldhealth = 0;
			double percentage = 0;
			Sound S = null;
			Sound S2 = null;
			int? i = null;

			oldhealth = this.health;
			this.health = Num13.MaxInt( 0, this.health - damage );
			percentage = this.health / Convert.ToDouble( Lang13.Initial( this, "health" ) ) * 100;

			if ( this.occupant != null && oldhealth > this.health && percentage <= 25 && percentage > 0 ) {
				S = new Sound( "sound/effects/engine_alert2.ogg" );
				S.wait = false;
				S.channel = 0;
				S.volume = 50;
				this.occupant.WriteMsg( S );
			}

			if ( this.occupant != null && oldhealth > this.health && !( this.health != 0 ) ) {
				S2 = new Sound( "sound/effects/engine_alert1.ogg" );
				S2.wait = false;
				S2.channel = 0;
				S2.volume = 50;
				this.occupant.WriteMsg( S2 );
			}

			if ( !( this.health != 0 ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( this.occupant != null ) {
						GlobalFuncs.to_chat( this.occupant, "<big><span class='warning'>Critical damage to the vessel detected, core explosion imminent!</span></big>" );
					}
					i = null;
					i = 10;

					while (( i ??0) >= 0) {
						
						if ( this.occupant != null ) {
							GlobalFuncs.to_chat( this.occupant, "<span class='warning'>" + i + "</span>" );
						}

						if ( i == 0 ) {
							GlobalFuncs.explosion( this.loc, 2, 4, 8 );
						}
						Task13.Sleep( 10 );
						i--;
					}
					return;
				}));
			}
			this.update_icons();
			return;
		}

		// Function from file: spacepods.dm
		public void update_icons(  ) {
			
			if ( !( this.pod_overlays != null ) ) {
				this.pod_overlays = new ByTable( 2 );
				this.pod_overlays[1] = new Image( this.icon, null, "pod_damage" );
				this.pod_overlays[2] = new Image( this.icon, null, "pod_fire" );
			}

			if ( this.health <= Num13.Floor( Convert.ToDouble( Lang13.Initial( this, "health" ) / 2 ) ) ) {
				this.overlays.Add( this.pod_overlays[1] );

				if ( this.health <= Num13.Floor( Convert.ToDouble( Lang13.Initial( this, "health" ) / 4 ) ) ) {
					this.overlays.Add( this.pod_overlays[2] );
				} else {
					this.overlays.Remove( this.pod_overlays[2] );
				}
			} else {
				this.overlays.Remove( this.pod_overlays[1] );
			}
			return;
		}

		// Function from file: spacepods.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.occupant != null ) {
				this.occupant.loc = this.loc;
				this.occupant.gib();
				this.occupant = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: spacepods.dm
		[Verb]
		[VerbInfo( name: "Exit pod", group: "Spacepod", access: VerbAccess.InUserLocation )]
		public void exit_pod(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}
			this.inertia_dir = 0;
			this.occupant.loc = this.loc;
			this.occupant = null;
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You climb out of the pod</span>" );
			return;
		}

		// Function from file: spacepods.dm
		[Verb]
		[VerbInfo( name: "Enter Pod", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_inside(  ) {
			Mob_Living_Carbon_Slime M = null;

			
			if ( Task13.User.incapacitated() || Task13.User.lying == true ) {
				return;
			}

			if ( !( Task13.User is Mob_Living_Carbon_Human ) ) {
				return;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'><B>The " + this.name + " is already occupied!</B></span>" );
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( Task13.User, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == Task13.User ) {
					GlobalFuncs.to_chat( Task13.User, "You're too busy getting your life sucked out of you." );
					return;
				}
			}
			this.visible_message( "<span class='notice'>" + Task13.User + " starts to climb into " + this.name + "</span>" );

			if ( this.enter_after( 40, Task13.User ) ) {
				
				if ( !( this.occupant != null ) ) {
					this.moved_inside( Task13.User );
				} else if ( this.occupant != Task13.User ) {
					GlobalFuncs.to_chat( Task13.User, "" + this.occupant + " was faster. Try better next time, loser." );
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "You stop entering the exosuit." );
			}
			return;
		}

		// Function from file: spacepods.dm
		[Verb]
		[VerbInfo( name: "Toggle internal airtank usage", group: "Spacepod", access: VerbAccess.InUserLocation )]
		public void toggle_internal_tank(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}
			this.use_internal_tank = !this.use_internal_tank;
			GlobalFuncs.to_chat( this.occupant, "<span class='notice'>Now taking air from " + ( this.use_internal_tank ? "internal airtank" : "environment" ) + ".</span>" );
			return;
		}

	}

}