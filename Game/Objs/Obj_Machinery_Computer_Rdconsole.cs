// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Rdconsole : Obj_Machinery_Computer {

		public Research files = null;
		public dynamic t_disk = null;
		public dynamic d_disk = null;
		public Obj_Machinery_RND linked_destroy = null;
		public Obj_Machinery_RND linked_lathe = null;
		public Obj_Machinery_RND linked_imprinter = null;
		public ByTable linked_machines = new ByTable();
		public ByTable research_machines = new ByTable(new object [] { 
											typeof(Obj_Machinery_RND_Fabricator_Protolathe), 
											typeof(Obj_Machinery_RND_DestructiveAnalyzer), 
											typeof(Obj_Machinery_RND_Fabricator_CircuitImprinter), 
											typeof(Obj_Machinery_RND_Fabricator_Mech), 
											typeof(Obj_Machinery_RND_Fabricator_Pod), 
											typeof(Obj_Machinery_RND_Fabricator_MechanicFab), 
											typeof(Obj_Machinery_RND_Fabricator_MechanicFab_Flatpacker), 
											typeof(Obj_Machinery_RND_ReverseEngine), 
											typeof(Obj_Machinery_RND_Blueprinter)
										 });
		public double? screen = 1;
		public int id = 0;
		public bool sync = true;
		public ByTable filtered = new ByTable().Set( "protolathe", new ByTable() ).Set( "imprinter", new ByTable() );
		public bool autorefresh = true;
		public ByTable part_sets = new ByTable()
											.Set( "Stock Parts", new ByTable() )
											.Set( "Bluespace", new ByTable() )
											.Set( "Data", new ByTable() )
											.Set( "Engineering", new ByTable() )
											.Set( "Medical", new ByTable() )
											.Set( "Mining", new ByTable() )
											.Set( "Robotics", new ByTable() )
											.Set( "Weapons", new ByTable() )
											.Set( "Armor", new ByTable() )
											.Set( "Misc", new ByTable() )
										;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/rdconsole";
			this.req_access = new ByTable(new object [] { 7 });
			this.starting_materials = new ByTable();
			this.light_color = "#E17DE1";
			this.icon_state = "rdcomp";
		}

		// Function from file: rdconsole.dm
		public Obj_Machinery_Computer_Rdconsole ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Machinery_RND_Server_Centcom S = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.files = new Research(  );

			if ( !( this.id != 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RND_Server_Centcom) )) {
					S = _a;
					
					S.initialize();
					break;
				}
			}
			return;
		}

		// Function from file: rdconsole.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;
			Tech T = null;
			Tech T2 = null;
			dynamic M = null;
			Design D = null;
			ByTable remain_link = null;
			Obj_Machinery_RND R = null;
			dynamic temp_tech = null;
			dynamic T3 = null;
			dynamic name_set = null;
			dynamic name_set2 = null;
			Design D2 = null;
			string temp_dat = null;
			int upTo = 0;
			dynamic M2 = null;
			double num_units_avail = 0;
			dynamic matID = null;
			dynamic M3 = null;
			Reagent R2 = null;
			int? i = null;
			dynamic I = null;
			dynamic name_set3 = null;
			dynamic name_set4 = null;
			Design D3 = null;
			string temp_dat2 = null;
			int upTo2 = 0;
			dynamic M4 = null;
			double num_units_avail2 = 0;
			Reagent R3 = null;
			dynamic matID2 = null;
			dynamic M5 = null;
			int? i2 = null;
			dynamic I2 = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = new ByTable(new object [] { "<style>a:link {color: #0066CC} a:visited {color: #0066CC}</style>" });
			this.files.RefreshResearch();

			dynamic _a = this.screen; // Was a switch-case, sorry for the mess.
			if ( 2<=_a&&_a<=2.9 ) {
				
				if ( this.linked_destroy == null ) {
					this.screen = 2;
				} else if ( ((dynamic)this.linked_destroy).loaded_item == null ) {
					this.screen = 201;
				} else {
					this.screen = 2.2;
				}
			} else if ( 3<=_a&&_a<=3.9 ) {
				
				if ( this.linked_lathe == null ) {
					this.screen = 3;
				}
			} else if ( 4<=_a&&_a<=4.9 ) {
				
				if ( this.linked_imprinter == null ) {
					this.screen = 4;
				}
			}

			switch ((int?)( this.screen )) {
				case 0:
					dat += "Updating Database....";
					break;
				case ((int)( 0.1 )):
					dat += "Processing and Updating Database...";
					break;
				case ((int)( 0.2 )):
					dat += new Txt( "SYSTEM LOCKED<BR><BR>\n				<A href='?src=" ).Ref( this ).str( ";lock=1.6'>Unlock</A>" ).ToString();
					break;
				case ((int)( 0.3 )):
					dat += "Constructing Prototypes. Please Wait...";
					break;
				case ((int)( 0.4 )):
					dat += "Imprinting Circuit. Please Wait...";
					break;
				case 1:
					dat += new Txt( "Main Menu:<BR><BR>\n				<A href='?src=" ).Ref( this ).str( ";menu=1.1'>Current Research Levels</A><BR>" ).ToString();

					if ( Lang13.Bool( this.t_disk ) ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.2'>Disk Operations</A><BR>" ).ToString();
					} else if ( Lang13.Bool( this.d_disk ) ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.4'>Disk Operations</A><BR>" ).ToString();
					} else {
						dat += "(Please Insert Disk)<BR>";
					}

					if ( this.linked_destroy != null ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=2.2'>Destructive Analyzer Menu</A><BR>" ).ToString();
					}

					if ( this.linked_lathe != null ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.1'>Protolathe Construction Menu</A><BR>" ).ToString();
					}

					if ( this.linked_imprinter != null ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.1'>Circuit Construction Menu</A><BR>" ).ToString();
					}

					if ( Lang13.Bool( a.client.holder ) ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";hax=1'>MAXIMUM SCIENCE</A><BR>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.6'>Settings</A>" ).ToString();
					break;
				case ((int)( 1.1 )):
					dat += "Current Research Levels:<BR><BR>";

					foreach (dynamic _b in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
						T = _b;
						
						dat += "" + T.name + "<BR>\n					* Level: " + T.level + "<BR>\n					* Summary: " + T.desc + "<HR>";
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					break;
				case ((int)( 1.2 )):
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>\n				Disk Contents: (Technology Data Disk)<BR><BR>" ).ToString();

					if ( this.t_disk.stored == null ) {
						dat += new Txt( "The disk has no data stored on it.<HR>\n					Operations:\n					<A href='?src=" ).Ref( this ).str( ";menu=1.3'>Load Tech to Disk</A> || " ).ToString();
					} else {
						dat += new Txt( "Name: " ).item( this.t_disk.stored.name ).str( "<BR>\n					Level: " ).item( this.t_disk.stored.level ).str( "<BR>\n					Description: " ).item( this.t_disk.stored.desc ).str( "<HR>\n					Operations:\n					<A href='?src=" ).Ref( this ).str( ";updt_tech=1'>Upload to Database</A> ||\n					<A href='?src=" ).Ref( this ).str( ";clear_tech=1'>Clear Disk</A> || " ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_tech=1'>Eject Disk</A>" ).ToString();
					break;
				case ((int)( 121 )):
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A> ||\n				<A href='?src=" ).Ref( this ).str( ";menu=1.2'>Return to Disk Operations</A><HR>\n				Load Technology to Disk:<BR><BR>" ).ToString();

					foreach (dynamic _c in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
						T2 = _c;
						
						dat += new Txt().item( T2.name ).str( "\n					<A href='?src=" ).Ref( this ).str( ";copy_tech=1;copy_tech_ID=" ).item( T2.id ).str( "'>(Copy to Disk)</A><BR>" ).ToString();
					}
					break;
				case ((int)( 131 )):
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>" ).ToString();

					if ( this.d_disk.blueprint == null ) {
						dat += new Txt( "The disk has no data stored on it.<HR>\n					Operations:\n					<A href='?src=" ).Ref( this ).str( ";menu=1.5'>Load Design to Disk</A> || " ).ToString();
					} else {
						dat += "Name: " + this.d_disk.blueprint.name + "<BR>\n					Level: " + ( this.d_disk.blueprint.reliability + Rand13.Int( -15, 15 ) <= 0 ? 0 : ( this.d_disk.blueprint.reliability + Rand13.Int( -15, 15 ) >= 100 ? 100 : this.d_disk.blueprint.reliability + Rand13.Int( -15, 15 ) ) ) + "<BR>";

						switch ((int)( this.d_disk.blueprint.build_type )) {
							case 1:
								dat += "Lathe Type: Circuit Imprinter<BR>";
								break;
							case 2:
								dat += "Lathe Type: Proto-lathe<BR>";
								break;
							case 4:
								dat += "Lathe Type: Auto-lathe<BR>";
								break;
						}
						dat += "Required Materials:<BR>";

						foreach (dynamic _e in Lang13.Enumerate( this.d_disk.blueprint.materials )) {
							M = _e;
							

							if ( String13.SubStr( M, 1, 2 ) == "$" ) {
								dat += "* " + String13.SubStr( M, 2, 0 ) + " x " + this.d_disk.blueprint.materials[M] + "<BR>";
							} else {
								dat += "* " + M + " x " + this.d_disk.blueprint.materials[M] + "<BR>";
							}
						}
						dat += new Txt( "<HR>Operations:\n					<A href='?src=" ).Ref( this ).str( ";updt_design=1'>Upload to Database</A> ||\n					<A href='?src=" ).Ref( this ).str( ";clear_design=1'>Clear Disk</A> || " ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_design=1'>Eject Disk</A>" ).ToString();
					break;
				case ((int)( 1.5 )):
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A> ||\n				<A href='?src=" ).Ref( this ).str( ";menu=1.4'>Return to Disk Operations</A><HR>\n				Load Design to Disk:<BR><BR>" ).ToString();

					foreach (dynamic _f in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D = _f;
						
						dat += new Txt().item( D.name ).str( "\n					<A href='?src=" ).Ref( this ).str( ";copy_design=1;copy_design_ID=" ).item( D.id ).str( "'>(Copy to Disk)</A><BR>" ).ToString();
					}
					break;
				case ((int)( 1.6 )):
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>\n				R&D Console Setting:<BR><BR>" ).ToString();

					if ( this.sync ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";sync=1'>Sync Database with Network</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";togglesync=1'>Disconnect from Research Network</A><BR>" ).ToString();
					} else {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";togglesync=1'>Connect to Research Network</A><BR>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.7'>Device Linkage Menu</A><BR>\n				<A href='?src=" ).Ref( this ).str( ";lock=0.2'>Lock Console</A><BR>\n				<A href='?src=" ).Ref( this ).str( ";reset=1'>Reset R&D Database.</A><BR>" ).ToString();
					break;
				case ((int)( 1.7 )):
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A> ||\n				<A href='?src=" ).Ref( this ).str( ";menu=1.6'>Settings Menu</A><HR>\n				R&D Console Device Linkage Menu:<BR><BR>\n				<A href='?src=" ).Ref( this ).str( ";find_device=1'>Re-sync with Nearby Devices</A><BR>\n				Linked Devices:<BR>" ).ToString();
					remain_link = this.linked_machines;

					if ( this.linked_destroy != null ) {
						dat += new Txt( "* Destructive Analyzer <A href='?src=" ).Ref( this ).str( ";disconnect=destroy'>(Disconnect)</A><BR>" ).ToString();
						remain_link.Remove( this.linked_destroy );
					} else {
						dat += "* (No Destructive Analyzer Linked)<BR>";
					}

					if ( this.linked_lathe != null ) {
						dat += new Txt( "* Protolathe <A href='?src=" ).Ref( this ).str( ";disconnect=lathe'>(Disconnect)</A><BR>" ).ToString();
						remain_link.Remove( this.linked_lathe );
					} else {
						dat += "* (No Protolathe Linked)<BR>";
					}

					if ( this.linked_imprinter != null ) {
						dat += new Txt( "* Circuit Imprinter <A href='?src=" ).Ref( this ).str( ";disconnect=imprinter'>(Disconnect)</A><BR>" ).ToString();
						remain_link.Remove( this.linked_imprinter );
					} else {
						dat += "* (No Circuit Imprinter Linked)<BR>";
					}

					if ( remain_link != null ) {
						
						foreach (dynamic _g in Lang13.Enumerate( remain_link, typeof(Obj_Machinery_RND) )) {
							R = _g;
							
							dat += "* " + R.name + " <BR>";
						}
					}
					break;
				case 2:
					dat += new Txt( "NO DESTRUCTIVE ANALYZER LINKED TO CONSOLE<BR><BR>\n				<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					break;
				case ((int)( 201 )):
					dat += new Txt( "No Item Loaded. Standing-by...<BR><HR>\n				<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					break;
				case ((int)( 2.2 )):
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>\n				Deconstruction Menu<HR>\n				Name: " ).item( ((dynamic)this.linked_destroy).loaded_item.name ).str( "<BR>\n				Origin Tech:<BR>" ).ToString();
					temp_tech = ((dynamic)this.linked_destroy).ConvertReqString2List( ((dynamic)this.linked_destroy).loaded_item.origin_tech );

					foreach (dynamic _h in Lang13.Enumerate( temp_tech )) {
						T3 = _h;
						
						dat += "* " + this.CallTechName( T3 ) + " " + temp_tech[T3] + "<BR>";
					}
					dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";deconstruct=1'>Deconstruct Item</A> ||\n				<A href='?src=" ).Ref( this ).str( ";eject_item=1'>Eject Item</A> || " ).ToString();
					break;
				case 3:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>\n				NO PROTOLATHE LINKED TO CONSOLE<BR><BR>" ).ToString();
					break;
				case ((int)( 301 )):
					dat += this.protolathe_header() + new Txt( "Protolathe Construction Menu [<A href='?src=" ).Ref( this ).str( ";toggleAutoRefresh=1'>Auto-Refresh: " ).item( ( this.autorefresh ? "ON" : "OFF" ) ).str( "</A>]<HR>" ).ToString();
					dat += "Filter: ";

					foreach (dynamic _i in Lang13.Enumerate( ((dynamic)this.linked_lathe).part_sets )) {
						name_set = _i;
						

						if ( Lang13.Bool( this.filtered["protolathe"].Contains( name_set ) ) ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";toggleCategory=" ).item( name_set ).str( ";machine=" ).item( "protolathe" ).str( "' style='color: #A66300'>" ).item( name_set ).str( "</a> / " ).ToString();
						} else {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";toggleCategory=" ).item( name_set ).str( ";machine=" ).item( "protolathe" ).str( "' style='color: #0066CC'>" ).item( name_set ).str( "</a> / " ).ToString();
						}
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";toggleAllCategories=1;machine=" ).item( "protolathe" ).str( "' style='color: #0066CC'>Filter All</a><HR>" ).ToString();

					foreach (dynamic _l in Lang13.Enumerate( ((dynamic)this.linked_lathe).part_sets )) {
						name_set2 = _l;
						

						if ( Lang13.Bool( this.filtered["protolathe"].Contains( name_set2 ) ) ) {
							continue;
						}
						dat += "<h2>" + name_set2 + "</h2><ul>";

						foreach (dynamic _k in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
							D2 = _k;
							

							if ( !( ( D2.build_type & 2 ) != 0 ) || D2.category != name_set2 ) {
								continue;
							}
							temp_dat = "" + D2.name + " " + ((Obj_Machinery_RND_Fabricator)this.linked_lathe).output_part_cost( D2 );
							upTo = 10;

							foreach (dynamic _j in Lang13.Enumerate( D2.materials )) {
								M2 = _j;
								
								num_units_avail = ((Obj_Machinery_RND_Fabricator)this.linked_lathe).check_mat( D2, M2 );

								if ( num_units_avail != 0 ) {
									upTo = Num13.MinInt( upTo, ((int)( num_units_avail )) );
								} else {
									break;
								}
							}

							if ( upTo != 0 ) {
								dat += new Txt( "<li>\n							<A href='?src=" ).Ref( this ).str( ";build=" ).item( D2.id ).str( ";n=1;now=1'>" ).item( temp_dat ).str( "</A> Queue: " ).ToString();

								if ( upTo >= 5 ) {
									dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D2.id ).str( ";n=5'>(&times;5)</A>" ).ToString();
								}

								if ( upTo >= 10 ) {
									dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D2.id ).str( ";n=10'>(&times;10)</A>" ).ToString();
								}
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D2.id ).str( ";customamt=1'>(Custom)</A>" ).ToString();
								dat += "</li>";
							} else {
								dat += "<li>" + temp_dat + "</li>";
							}
						}
						dat += "</ul>";
					}
					break;
				case ((int)( 3.2 )):
					dat += this.protolathe_header() + "Material Storage<ul>";

					foreach (dynamic _m in Lang13.Enumerate( ((dynamic)this.linked_lathe.materials).storage )) {
						matID = _m;
						
						M3 = ((dynamic)this.linked_lathe.materials).getMaterial( matID );
						dat += "<li>" + ((dynamic)this.linked_lathe.materials).storage[matID] + " cm<sup>3</sup> of " + M3.processed_name;

						if ( Convert.ToDouble( ((dynamic)this.linked_lathe.materials).storage[matID] ) >= M3.cc_per_sheet ) {
							dat += new Txt( " - <A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=" ).item( matID ).str( ";lathe_ejectsheet_amt=1'>(1 Sheet)</A> " ).ToString();

							if ( Convert.ToDouble( ((dynamic)this.linked_lathe.materials).storage[matID] ) >= M3.cc_per_sheet * 5 ) {
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=" ).item( matID ).str( ";lathe_ejectsheet_amt=5'>(5 Sheets)</A> " ).ToString();
							}
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=" ).item( matID ).str( ";lathe_ejectsheet_amt=50'>(Max Sheets)</A>" ).ToString();
						} else {
							dat += " - <em>(Empty)</em>";
						}
						dat += "</li>";
					}
					dat += "</ul>";
					break;
				case ((int)( 321 )):
					dat += this.protolathe_header() + "Chemical Storage<BR><HR>";

					foreach (dynamic _n in Lang13.Enumerate( this.linked_lathe.reagents.reagent_list, typeof(Reagent) )) {
						R2 = _n;
						
						dat += new Txt( "Name: " ).item( R2.name ).str( " | Units: " ).item( R2.volume ).str( "\n					<A href='?src=" ).Ref( this ).str( ";disposep=" ).item( R2.id ).str( "'>(Purge)</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";disposeallP=1'><U>Disposal All Chemicals in Storage</U></A><BR>" ).ToString();
					}
					break;
				case ((int)( 3.4 )):
					dat += this.protolathe_header() + "Production Queue<BR><HR><ul>";
					i = null;
					i = 1;

					while (( i ??0) <= ((dynamic)this.linked_lathe).queue.len) {
						I = ((dynamic)this.linked_lathe).queue[i];
						dat += "<li>Name: " + I.name;

						if ( this.linked_lathe.stopped ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";removeQItem=" ).item( i ).str( ";device=protolathe'>(Remove)</A></li>" ).ToString();
						}
						i++;
					}
					dat += new Txt( "</ul><A href='?src=" ).Ref( this ).str( ";clearQ=1;device=protolathe'>Remove All Queued Items</A><br />" ).ToString();

					if ( this.linked_lathe.stopped ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";setProtolatheStopped=0' style='color:green'>Start Production</A>" ).ToString();
					} else {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";setProtolatheStopped=1' style='color:red'>Stop Production</A>" ).ToString();
					}
					break;
				case 4:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>\n				NO CIRCUIT IMPRINTER LINKED TO CONSOLE<BR><BR>" ).ToString();
					break;
				case ((int)( 401 )):
					dat += new Txt().item( this.CircuitImprinterHeader() ).str( "\n				Circuit Imprinter Menu [<A href='?src=" ).Ref( this ).str( ";toggleAutoRefresh=1'>Auto-Refresh: " ).item( ( this.autorefresh ? "ON" : "OFF" ) ).str( "</A>]<BR>\n				<b>Material Amount:</b> " ).item( this.linked_imprinter.TotalMaterials() ).str( " cm<sup>3</sup><BR>\n				<b>Chemical Volume:</b> " ).item( this.linked_imprinter.reagents.total_volume ).str( "<HR>" ).ToString();
					dat += "Filter: ";

					foreach (dynamic _o in Lang13.Enumerate( ((dynamic)this.linked_imprinter).part_sets )) {
						name_set3 = _o;
						

						if ( Lang13.Bool( this.filtered["imprinter"].Contains( name_set3 ) ) ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";toggleCategory=" ).item( name_set3 ).str( ";machine=" ).item( "imprinter" ).str( "' style='color: #A66300'>" ).item( name_set3 ).str( "</a> / " ).ToString();
						} else {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";toggleCategory=" ).item( name_set3 ).str( ";machine=" ).item( "imprinter" ).str( "' style='color: #0066CC'>" ).item( name_set3 ).str( "</a> / " ).ToString();
						}
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";toggleAllCategories=1;machine=" ).item( "imprinter" ).str( "' style='color: #0066CC'>Filter All</a><HR>" ).ToString();

					foreach (dynamic _r in Lang13.Enumerate( ((dynamic)this.linked_imprinter).part_sets )) {
						name_set4 = _r;
						

						if ( Lang13.Bool( this.filtered["imprinter"].Contains( name_set4 ) ) ) {
							continue;
						}
						dat += "<h2>" + name_set4 + "</h2><ul>";

						foreach (dynamic _q in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
							D3 = _q;
							

							if ( !( ( D3.build_type & 1 ) != 0 ) || D3.category != name_set4 ) {
								continue;
							}
							temp_dat2 = "" + D3.name + " " + ((Obj_Machinery_RND_Fabricator)this.linked_imprinter).output_part_cost( D3 );
							upTo2 = 10;

							foreach (dynamic _p in Lang13.Enumerate( D3.materials )) {
								M4 = _p;
								
								num_units_avail2 = ((Obj_Machinery_RND_Fabricator)this.linked_imprinter).check_mat( D3, M4 );

								if ( num_units_avail2 != 0 ) {
									upTo2 = Num13.MinInt( upTo2, ((int)( num_units_avail2 )) );
								} else {
									break;
								}
							}

							if ( upTo2 != 0 ) {
								dat += new Txt( "<li><A href='?src=" ).Ref( this ).str( ";imprint=" ).item( D3.id ).str( ";n=1;now=1'>" ).item( temp_dat2 ).str( "</A> Queue: " ).ToString();

								if ( upTo2 >= 5 ) {
									dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprint=" ).item( D3.id ).str( ";n=5'>(&times;5)</A>" ).ToString();
								}

								if ( upTo2 >= 10 ) {
									dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprint=" ).item( D3.id ).str( ";n=10'>(&times;10)</A>" ).ToString();
								}
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprint=" ).item( D3.id ).str( ";customamt=1'>(Custom)</A>" ).ToString();
								dat += "</li>";
							} else {
								dat += "<li>" + temp_dat2 + "</li>";
							}
						}
						dat += "</ul>";
					}
					break;
				case ((int)( 411 )):
					dat += "" + this.CircuitImprinterHeader() + "\n				Chemical Storage<HR>";

					foreach (dynamic _s in Lang13.Enumerate( this.linked_imprinter.reagents.reagent_list, typeof(Reagent) )) {
						R3 = _s;
						
						dat += new Txt( "Name: " ).item( R3.name ).str( " | Units: " ).item( R3.volume ).str( "\n					<A href='?src=" ).Ref( this ).str( ";disposeI=" ).item( R3.id ).str( "'>(Purge)</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";disposeallI=1'><U>Disposal All Chemicals in Storage</U></A><BR>" ).ToString();
					}
					break;
				case ((int)( 4.3 )):
					dat += "" + this.CircuitImprinterHeader() + "\n				Material Storage<HR><ul>";

					foreach (dynamic _t in Lang13.Enumerate( ((dynamic)this.linked_imprinter.materials).storage )) {
						matID2 = _t;
						
						M5 = ((dynamic)this.linked_imprinter.materials).getMaterial( matID2 );

						if ( !this.linked_imprinter.allowed_materials.Contains( matID2 ) ) {
							continue;
						}
						dat += "<li>" + ((dynamic)this.linked_imprinter.materials).storage[matID2] + " cm<sup>3</sup> of " + M5.processed_name;

						if ( Convert.ToDouble( ((dynamic)this.linked_imprinter.materials).storage[matID2] ) >= M5.cc_per_sheet ) {
							dat += new Txt( " - <A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=" ).item( matID2 ).str( ";imprinter_ejectsheet_amt=1'>(1 Sheet)</A> " ).ToString();

							if ( Convert.ToDouble( ((dynamic)this.linked_imprinter.materials).storage[matID2] ) >= M5.cc_per_sheet * 5 ) {
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=" ).item( matID2 ).str( ";imprinter_ejectsheet_amt=5'>(5 Sheets)</A> " ).ToString();
							}
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=" ).item( matID2 ).str( ";imprinter_ejectsheet_amt=50'>(Max Sheets)</A>" ).ToString();
						} else {
							dat += " - <em>(Empty)</em>";
						}
						dat += "</li>";
					}
					dat += "</ul>";
					break;
				case ((int)( 4.4 )):
					dat += this.CircuitImprinterHeader() + "Production Queue<BR><HR><ul>";
					i2 = null;
					i2 = 1;

					while (( i2 ??0) <= ((dynamic)this.linked_imprinter).queue.len) {
						I2 = ((dynamic)this.linked_imprinter).queue[i2];
						dat += "<li>Name: " + I2.name;

						if ( this.linked_imprinter.stopped ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";removeQItem=" ).item( i2 ).str( ";device=imprinter'>(Remove)</A></li>" ).ToString();
						}
						i2++;
					}
					dat += new Txt( "</ul><A href='?src=" ).Ref( this ).str( ";clearQ=1;device=imprinter'>Remove All Queued Items</A><br />" ).ToString();

					if ( this.linked_imprinter.stopped ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";setImprinterStopped=0' style='color:green'>Start Production</A>" ).ToString();
					} else {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";setImprinterStopped=1' style='color:red'>Stop Production</A>" ).ToString();
					}
					break;
			}
			dat = GlobalFuncs.list2text( dat );
			Interface13.Browse( a, "<TITLE>Research and Development Console</TITLE><HR>" + dat, "window=rdconsole;size=575x400" );
			GlobalFuncs.onclose( a, "rdconsole" );
			return null;
		}

		// Function from file: rdconsole.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			bool updateAfter = false;
			double? temp_screen = null;
			Tech T = null;
			Design D = null;
			dynamic choice = null;
			dynamic temp_tech = null;
			dynamic T2 = null;
			dynamic matID = null;
			Obj I = null;
			dynamic M = null;
			Obj S = null;
			Obj_Machinery_RND_Server S2 = null;
			bool server_processed = false;
			Tech T3 = null;
			Design D2 = null;
			Tech T4 = null;
			Design D3 = null;
			Design being_built = null;
			Design D4 = null;
			int power = 0;
			dynamic M2 = null;
			double? n = null;
			double? i = null;
			Design being_built2 = null;
			Design D5 = null;
			int power2 = 0;
			dynamic M3 = null;
			double? n2 = null;
			double? i2 = null;
			double? i3 = null;
			double? desired_num_sheets = null;
			dynamic matID2 = null;
			dynamic M4 = null;
			dynamic sheet = null;
			int available_num_sheets = 0;
			double? desired_num_sheets2 = null;
			dynamic matID3 = null;
			dynamic M5 = null;
			dynamic sheet2 = null;
			int available_num_sheets2 = 0;
			string choice2 = null;
			dynamic cat = null;
			dynamic machine = null;
			string machine2 = null;
			ByTable tempfilter = null;
			dynamic name_set = null;
			dynamic name_set2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			updateAfter = true;
			this.add_fingerprint( Task13.User );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["menu"] ) ) {
				temp_screen = String13.ParseNumber( href_list["menu"] );

				if ( ( temp_screen ??0) <= 1.1 || 2 <= ( temp_screen ??0) && 4.9 >= ( temp_screen ??0) || this.allowed( Task13.User ) || this.emagged != 0 ) {
					this.screen = temp_screen;
				} else {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
				}
			} else if ( Lang13.Bool( href_list["updt_tech"] ) ) {
				this.screen = 0;
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.screen = 1.2;
					this.files.AddTech2Known( this.t_disk.stored );

					if ( Lang13.Bool( this.t_disk.stored.new_category ) && !this.part_sets.Contains( this.t_disk.stored.new_category ) ) {
						this.part_sets.Add( this.t_disk.stored.new_category );
						this.part_sets[this.t_disk.stored.new_category] = new ByTable();

						if ( this.linked_lathe != null ) {
							((dynamic)this.linked_lathe).part_sets = this.part_sets;
						}
					}
					this.updateUsrDialog();
					this.griefProtection();
					return;
				}));
			} else if ( Lang13.Bool( href_list["hax"] ) ) {
				
				if ( !( Task13.User.client.holder != null ) ) {
					return null;
				}
				this.screen = 0;
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.Maximize();
					this.screen = 1;
					this.updateUsrDialog();
					this.griefProtection();
					return;
				}));
			} else if ( Lang13.Bool( href_list["clear_tech"] ) ) {
				this.t_disk.stored = null;
			} else if ( Lang13.Bool( href_list["eject_tech"] ) ) {
				this.t_disk.loc = this.loc;
				this.t_disk = null;
				this.screen = 1;
			} else if ( Lang13.Bool( href_list["copy_tech"] ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
					T = _a;
					

					if ( href_list["copy_tech_ID"] == T.id ) {
						this.t_disk.stored = T;
						break;
					}
				}
				this.screen = 1.2;
			} else if ( Lang13.Bool( href_list["updt_design"] ) ) {
				this.screen = 0;
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.screen = 131;
					this.files.AddDesign2Known( this.d_disk.blueprint );
					this.updateUsrDialog();
					this.griefProtection();
					return;
				}));
			} else if ( Lang13.Bool( href_list["clear_design"] ) ) {
				this.d_disk.blueprint = null;
			} else if ( Lang13.Bool( href_list["eject_design"] ) ) {
				this.d_disk.loc = this.loc;
				this.d_disk = null;
				this.screen = 1;
			} else if ( Lang13.Bool( href_list["copy_design"] ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
					D = _b;
					

					if ( href_list["copy_design_ID"] == D.id ) {
						this.d_disk.blueprint = D;
						break;
					}
				}
				this.screen = 131;
			} else if ( Lang13.Bool( href_list["eject_item"] ) ) {
				
				if ( this.linked_destroy != null ) {
					
					if ( this.linked_destroy.busy ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The destructive analyzer is busy at the moment.</span>" );
					} else if ( Lang13.Bool( ((dynamic)this.linked_destroy).loaded_item ) ) {
						((dynamic)this.linked_destroy).loaded_item.loc = this.linked_destroy.loc;
						((dynamic)this.linked_destroy).loaded_item = null;
						this.linked_destroy.icon_state = "d_analyzer";
						this.screen = 201;
					}
				}
			} else if ( Lang13.Bool( href_list["deconstruct"] ) ) {
				
				if ( this.linked_destroy != null ) {
					
					if ( !this.allowed( Task13.User ) ) {
						GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
						return null;
					}

					if ( this.linked_destroy.busy ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The destructive analyzer is busy at the moment.</span>" );
					} else {
						choice = Interface13.Input( "Proceeding will destroy loaded item.", null, null, null, new ByTable(new object [] { "Proceed", "Cancel" }), InputType.Any );

						if ( choice == "Cancel" || !( this.linked_destroy != null ) ) {
							return null;
						}
						this.linked_destroy.busy = true;
						this.screen = 0.1;
						this.updateUsrDialog();
						Icon13.Flick( "d_analyzer_process", this.linked_destroy );
						Task13.Schedule( 24, (Task13.Closure)(() => {
							
							if ( this.linked_destroy != null ) {
								
								if ( !this.linked_destroy.hacked ) {
									
									if ( !Lang13.Bool( ((dynamic)this.linked_destroy).loaded_item ) ) {
										GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The destructive analyzer appears to be empty.</span>" );
										this.screen = 1;
										this.linked_destroy.busy = false;
										return;
									}

									if ( Convert.ToDouble( ((dynamic)this.linked_destroy).loaded_item.reliability ) >= 90 ) {
										temp_tech = ((dynamic)this.linked_destroy).ConvertReqString2List( ((dynamic)this.linked_destroy).loaded_item.origin_tech );

										foreach (dynamic _c in Lang13.Enumerate( temp_tech )) {
											T2 = _c;
											
											this.files.UpdateTech( T2, Convert.ToInt32( temp_tech[T2] ) );
										}
									}

									if ( Convert.ToDouble( ((dynamic)this.linked_destroy).loaded_item.reliability ) < 100 && ((dynamic)this.linked_destroy).loaded_item.crit_fail ) {
										this.files.UpdateDesign( ((dynamic)this.linked_destroy).loaded_item.type );
									}

									if ( this.linked_lathe != null && Lang13.Bool( ((dynamic)this.linked_destroy).loaded_item.materials ) ) {
										
										foreach (dynamic _d in Lang13.Enumerate( ((dynamic)this.linked_destroy).loaded_item.materials.storage )) {
											matID = _d;
											
											((dynamic)this.linked_lathe.materials).addAmount( matID, ((dynamic)this.linked_destroy).loaded_item.materials.storage[matID] );
										}
									}
									((dynamic)this.linked_destroy).loaded_item = null;
								}

								foreach (dynamic _f in Lang13.Enumerate( this.linked_destroy.contents, typeof(Obj) )) {
									I = _f;
									

									foreach (dynamic _e in Lang13.Enumerate( I.contents )) {
										M = _e;
										
										((Mob)M).death();
									}

									if ( I is Obj_Item_Stack_Sheet ) {
										S = I;

										if ( Convert.ToDouble( ((dynamic)S).amount ) > 1 ) {
											((dynamic)S).amount--;
											((dynamic)this.linked_destroy).loaded_item = S;
										} else {
											GlobalFuncs.qdel( S );
											S = null;
											this.linked_destroy.icon_state = "d_analyzer";
										}
									} else if ( !Lang13.Bool( this.linked_destroy.component_parts.Contains( I ) ) ) {
										GlobalFuncs.qdel( I );
										I = null;
										this.linked_destroy.icon_state = "d_analyzer";
									}
								}
								this.f_use_power( 250 );
								this.screen = 1;
								this.updateUsrDialog();
								this.linked_destroy.busy = false;
							}
							return;
						}));
					}
				}
			} else if ( Lang13.Bool( href_list["lock"] ) ) {
				
				if ( this.allowed( Task13.User ) ) {
					this.screen = String13.ParseNumber( href_list["lock"] );
				} else {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
				}
			} else if ( Lang13.Bool( href_list["sync"] ) ) {
				this.screen = 0;

				if ( !this.sync ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You must connect to the network first!</span>" );
				} else {
					this.griefProtection();
					Task13.Schedule( 30, (Task13.Closure)(() => {
						
						if ( this != null ) {
							
							foreach (dynamic _k in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RND_Server) )) {
								S2 = _k;
								
								server_processed = false;

								if ( S2.disabled ) {
									continue;
								}

								if ( S2.id_with_upload.Contains( this.id ) || S2 is Obj_Machinery_RND_Server_Centcom ) {
									
									foreach (dynamic _g in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
										T3 = _g;
										
										S2.files.AddTech2Known( T3 );
									}

									foreach (dynamic _h in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
										D2 = _h;
										
										S2.files.AddDesign2Known( D2 );
									}
									S2.files.RefreshResearch();
									server_processed = true;
								}

								if ( S2.id_with_download.Contains( this.id ) && !( S2 is Obj_Machinery_RND_Server_Centcom ) || S2.hacked ) {
									
									foreach (dynamic _i in Lang13.Enumerate( S2.files.known_tech, typeof(Tech) )) {
										T4 = _i;
										
										this.files.AddTech2Known( T4 );
									}

									foreach (dynamic _j in Lang13.Enumerate( S2.files.known_designs, typeof(Design) )) {
										D3 = _j;
										
										this.files.AddDesign2Known( D3 );
									}
									this.files.RefreshResearch();
									server_processed = true;
								}

								if ( !( S2 is Obj_Machinery_RND_Server_Centcom ) && server_processed ) {
									S2.produce_heat( 100 );
								}
							}
							this.screen = 1.6;
							this.updateUsrDialog();
						}
						return;
					}));
				}
			} else if ( Lang13.Bool( href_list["togglesync"] ) ) {
				this.sync = !this.sync;
			} else if ( Lang13.Bool( href_list["build"] ) ) {
				
				if ( !this.autorefresh ) {
					updateAfter = false;
				}

				if ( this.linked_lathe != null ) {
					being_built = null;

					foreach (dynamic _l in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D4 = _l;
						

						if ( D4.id == href_list["build"] ) {
							being_built = D4;
							break;
						}
					}

					if ( being_built != null ) {
						power = 2000;

						foreach (dynamic _m in Lang13.Enumerate( being_built.materials )) {
							M2 = _m;
							
							power += Num13.Floor( Convert.ToDouble( being_built.materials[M2] / 5 ) );
						}
						power = Num13.MaxInt( 2000, power );
						n = null;

						if ( Lang13.Bool( href_list["customamt"] ) ) {
							n = Num13.Floor( Convert.ToDouble( Interface13.Input( "Queue how many? (Maximum " + ( 30 - ((dynamic)this.linked_lathe).queue.len ) + ")", "Protolathe Queue", null, null, null, InputType.Num | InputType.Null ) ) );

							if ( !( this.linked_lathe != null ) ) {
								return null;
							}
						} else {
							n = String13.ParseNumber( href_list["n"] );
						}
						n = ( ( n ??0) <= 0 ? 0 : ( ( n ??0) >= 30 - ((dynamic)this.linked_lathe).queue.len ? 30 - ((dynamic)this.linked_lathe).queue.len : n ) );
						i = null;
						i = 1;

						while (( i ??0) <= ( n ??0)) {
							this.f_use_power( power );
							((dynamic)this.linked_lathe).queue += being_built;
							i++;
						}

						if ( href_list["now"] == "1" ) {
							this.linked_lathe.stopped = false;
						}
					}
				}
			} else if ( Lang13.Bool( href_list["imprint"] ) ) {
				
				if ( !this.autorefresh ) {
					updateAfter = false;
				}

				if ( this.linked_imprinter != null ) {
					being_built2 = null;

					if ( ((dynamic)this.linked_imprinter).queue.len >= 30 ) {
						GlobalFuncs.to_chat( Task13.User, "<span class=\"warning\">Maximum number of items in production queue exceeded.</span>" );
						return null;
					}

					foreach (dynamic _n in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D5 = _n;
						

						if ( D5.id == href_list["imprint"] ) {
							being_built2 = D5;
							break;
						}
					}

					if ( being_built2 != null ) {
						power2 = 2000;

						foreach (dynamic _o in Lang13.Enumerate( being_built2.materials )) {
							M3 = _o;
							
							power2 += Num13.Floor( Convert.ToDouble( being_built2.materials[M3] / 5 ) );
						}
						power2 = Num13.MaxInt( 2000, power2 );
						n2 = null;

						if ( Lang13.Bool( href_list["customamt"] ) ) {
							n2 = Num13.Floor( Convert.ToDouble( Interface13.Input( "Queue how many? (Maximum " + ( 30 - ((dynamic)this.linked_imprinter).queue.len ) + ")", "Circuit Imprinter Queue", null, null, null, InputType.Num | InputType.Null ) ) );

							if ( !( this.linked_imprinter != null ) ) {
								return null;
							}
						} else {
							n2 = String13.ParseNumber( href_list["n"] );
						}
						n2 = ( ( n2 ??0) <= 0 ? 0 : ( ( n2 ??0) >= 30 - ((dynamic)this.linked_imprinter).queue.len ? 30 - ((dynamic)this.linked_imprinter).queue.len : n2 ) );
						i2 = null;
						i2 = 1;

						while (( i2 ??0) <= ( n2 ??0)) {
							((dynamic)this.linked_imprinter).queue += being_built2;
							this.f_use_power( power2 );
							i2++;
						}

						if ( href_list["now"] == "1" ) {
							this.linked_imprinter.stopped = false;
						}
					}
				}
			} else if ( Lang13.Bool( href_list["disposeI"] ) && this.linked_imprinter != null ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
					return null;
				}
				((Reagents)this.linked_imprinter.reagents).del_reagent( href_list["dispose"] );
			} else if ( Lang13.Bool( href_list["disposeallI"] ) && this.linked_imprinter != null ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
					return null;
				}
				((Reagents)this.linked_imprinter.reagents).clear_reagents();
			} else if ( Lang13.Bool( href_list["disposeP"] ) && this.linked_lathe != null ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
					return null;
				}
				((Reagents)this.linked_lathe.reagents).del_reagent( href_list["dispose"] );
			} else if ( Lang13.Bool( href_list["disposeallP"] ) && this.linked_lathe != null ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
					return null;
				}
				((Reagents)this.linked_lathe.reagents).clear_reagents();
			} else if ( Lang13.Bool( href_list["removeQItem"] ) ) {
				i3 = String13.ParseNumber( href_list["removeQItem"] );

				dynamic _p = href_list["device"]; // Was a switch-case, sorry for the mess.
				if ( _p=="protolathe" ) {
					
					if ( this.linked_lathe != null ) {
						((dynamic)this.linked_lathe).queue.Cut( ((int?)( i3 )), ((int)( ( i3 ??0) + 1 )) );
					}
				} else if ( _p=="imprinter" ) {
					
					if ( this.linked_imprinter != null ) {
						((dynamic)this.linked_imprinter).queue.Cut( ((int?)( i3 )), ((int)( ( i3 ??0) + 1 )) );
					}
				}
			} else if ( Lang13.Bool( href_list["clearQ"] ) ) {
				
				dynamic _q = href_list["device"]; // Was a switch-case, sorry for the mess.
				if ( _q=="protolathe" ) {
					
					if ( this.linked_lathe != null ) {
						((dynamic)this.linked_lathe).queue.len = 0;
					}
				} else if ( _q=="imprinter" ) {
					
					if ( this.linked_imprinter != null ) {
						((dynamic)this.linked_imprinter).queue.len = 0;
					}
				}
			} else if ( Lang13.Bool( href_list["setProtolatheStopped"] ) && this.linked_lathe != null ) {
				this.linked_lathe.stopped = href_list["setProtolatheStopped"] == "1";
			} else if ( Lang13.Bool( href_list["setImprinterStopped"] ) && this.linked_imprinter != null ) {
				this.linked_imprinter.stopped = href_list["setImprinterStopped"] == "1";
			} else if ( Lang13.Bool( href_list["lathe_ejectsheet"] ) && this.linked_lathe != null ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
					return null;
				}
				desired_num_sheets = String13.ParseNumber( href_list["lathe_ejectsheet_amt"] );

				if ( ( desired_num_sheets ??0) <= 0 ) {
					return null;
				}
				matID2 = href_list["lathe_ejectsheet"];
				M4 = ((dynamic)this.linked_lathe.materials).getMaterial( matID2 );

				if ( !( M4 is Material ) ) {
					Game13.log.WriteMsg( "## WARNING: " + ( "PROTOLATHE: Unknown material " + matID2 + "! (" + href + ")" ) );
				} else {
					sheet = Lang13.Call( M4.sheettype, this.linked_lathe.get_output() );
					available_num_sheets = Num13.Floor( Convert.ToDouble( ((dynamic)this.linked_lathe.materials).storage[matID2] / sheet.perunit ) );

					if ( available_num_sheets > 0 ) {
						sheet.amount = Num13.MinInt( available_num_sheets, ((int)( desired_num_sheets ??0 )) );
						((dynamic)this.linked_lathe.materials).removeAmount( matID2, sheet.amount * sheet.perunit );
					} else {
						GlobalFuncs.qdel( sheet );
						sheet = null;
					}
				}
			} else if ( Lang13.Bool( href_list["imprinter_ejectsheet"] ) && this.linked_imprinter != null ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unauthorized Access." );
					return null;
				}
				desired_num_sheets2 = String13.ParseNumber( href_list["imprinter_ejectsheet_amt"] );

				if ( ( desired_num_sheets2 ??0) <= 0 ) {
					return null;
				}
				matID3 = href_list["imprinter_ejectsheet"];
				M5 = ((dynamic)this.linked_imprinter.materials).getMaterial( matID3 );

				if ( !( M5 is Material ) ) {
					Game13.log.WriteMsg( "## WARNING: " + ( "IMPRINTER: Unknown material " + matID3 + "! (" + href + ")" ) );
				} else {
					sheet2 = Lang13.Call( M5.sheettype, this.linked_imprinter.get_output() );
					available_num_sheets2 = Num13.Floor( Convert.ToDouble( ((dynamic)this.linked_imprinter.materials).storage[matID3] / sheet2.perunit ) );

					if ( available_num_sheets2 > 0 ) {
						sheet2.amount = Num13.MinInt( available_num_sheets2, ((int)( desired_num_sheets2 ??0 )) );
						((dynamic)this.linked_imprinter.materials).removeAmount( matID3, sheet2.amount * sheet2.perunit );
					} else {
						GlobalFuncs.qdel( sheet2 );
						sheet2 = null;
					}
				}
			} else if ( Lang13.Bool( href_list["find_device"] ) ) {
				this.screen = 0;
				Task13.Schedule( 20, (Task13.Closure)(() => {
					this.SyncRDevices();
					this.screen = 1.7;
					this.updateUsrDialog();
					return;
				}));
			} else if ( Lang13.Bool( href_list["disconnect"] ) ) {
				
				dynamic _r = href_list["disconnect"]; // Was a switch-case, sorry for the mess.
				if ( _r=="destroy" ) {
					this.linked_destroy.linked_console = null;
					this.linked_destroy.update_icon();
					this.linked_destroy = null;
				} else if ( _r=="lathe" ) {
					this.linked_lathe.linked_console = null;
					this.linked_lathe.update_icon();
					this.linked_lathe = null;
				} else if ( _r=="imprinter" ) {
					this.linked_imprinter.linked_console = null;
					this.linked_imprinter.update_icon();
					this.linked_imprinter = null;
				}
			} else if ( Lang13.Bool( href_list["reset"] ) ) {
				this.griefProtection();
				choice2 = Interface13.Alert( "R&D Console Database Reset", "Are you sure you want to reset the R&D console's database? Data lost cannot be recovered.", "Continue", "Cancel" );

				if ( choice2 == "Continue" ) {
					this.screen = 0;
					GlobalFuncs.qdel( this.files );
					this.files = new Research(  );
					Task13.Schedule( 20, (Task13.Closure)(() => {
						this.screen = 1.6;
						this.updateUsrDialog();
						return;
					}));
				}
			} else if ( Lang13.Bool( href_list["toggleCategory"] ) ) {
				cat = href_list["toggleCategory"];
				machine = href_list["machine"];

				if ( Lang13.Bool( this.filtered[machine].Contains( cat ) ) ) {
					this.filtered[machine] -= cat;
				} else {
					this.filtered[machine] += cat;
				}
			} else if ( Lang13.Bool( href_list["toggleAllCategories"] ) ) {
				machine2 = href_list["machine"];
				tempfilter = this.filtered[machine2];

				if ( tempfilter.len == ( machine2 == "protolathe" ? ((dynamic)this.linked_lathe).part_sets.len : ((dynamic)this.linked_imprinter).part_sets.len ) ) {
					this.filtered[machine2] = new ByTable();
				} else {
					this.filtered[machine2] = new ByTable();

					if ( machine2 == "protolathe" ) {
						
						foreach (dynamic _s in Lang13.Enumerate( ((dynamic)this.linked_lathe).part_sets )) {
							name_set = _s;
							
							this.filtered[machine2] += name_set;
						}
					} else {
						
						foreach (dynamic _t in Lang13.Enumerate( ((dynamic)this.linked_imprinter).part_sets )) {
							name_set2 = _t;
							
							this.filtered[machine2] += name_set2;
						}
					}
				}
			} else if ( Lang13.Bool( href_list["toggleAutoRefresh"] ) ) {
				this.autorefresh = !this.autorefresh;
			}

			if ( updateAfter ) {
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: rdconsole.dm
		public override int emag( dynamic user = null ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/sparks4.ogg", 75, 1 );
			this.emagged = 1;
			GlobalFuncs.to_chat( user, "<span class='notice'>You disable the security protocols</span>" );
			return 0;
		}

		// Function from file: rdconsole.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_Disk ) {
				
				if ( Lang13.Bool( this.t_disk ) || Lang13.Bool( this.d_disk ) ) {
					GlobalFuncs.to_chat( b, "A disk is already loaded into the machine." );
					return null;
				}

				if ( a is Obj_Item_Weapon_Disk_TechDisk ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.t_disk = a;
					}
				} else if ( a is Obj_Item_Weapon_Disk_DesignDisk ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.d_disk = a;
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Machine cannot accept disks in that format.</span>" );
					return null;
				}
				GlobalFuncs.to_chat( b, "<span class='notice'>You add the disk to the machine!</span>" );
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: rdconsole.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.SyncRDevices();
			return false;
		}

		// Function from file: rdconsole.dm
		public string CircuitImprinterHeader(  ) {
			ByTable options = null;

			options = new ByTable();

			if ( this.screen != 401 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.1'>Design Selection</A>" ).ToString() );
			}

			if ( this.screen != 4.3 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.3'>Material Storage</A>" ).ToString() );
			}

			if ( this.screen != 411 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.2'>Chemical Storage</A>" ).ToString() );
			}

			if ( this.screen != 4.4 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.4'>Production Queue</A> (" ).item( ((dynamic)this.linked_imprinter).queue.len ).str( ")" ).ToString() );
			}
			return new Txt( "[<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>]\n	<div class=\"header\">" ).item( GlobalFuncs.list2text( options, " || " ) ).str( "</div><hr />" ).ToString();
		}

		// Function from file: rdconsole.dm
		public string protolathe_header(  ) {
			ByTable options = null;

			options = new ByTable();

			if ( this.screen != 301 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.1'>Design Selection</A>" ).ToString() );
			}

			if ( this.screen != 3.2 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.2'>Material Storage</A>" ).ToString() );
			}

			if ( this.screen != 321 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.3'>Chemical Storage</A>" ).ToString() );
			}

			if ( this.screen != 3.4 ) {
				options.Add( new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.4'>Production Queue</A> (" ).item( ((dynamic)this.linked_lathe).queue.len ).str( ")" ).ToString() );
			}
			return new Txt( "[<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>]\n	<div class=\"header\">" ).item( GlobalFuncs.list2text( options, " || " ) ).str( "</div><hr />" ).ToString();
		}

		// Function from file: rdconsole.dm
		public void griefProtection(  ) {
			Obj_Machinery_RND_Server_Centcom C = null;
			Tech T = null;
			Design D = null;

			
			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RND_Server_Centcom) )) {
				C = _c;
				

				foreach (dynamic _a in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
					T = _a;
					
					C.files.AddTech2Known( T );
				}

				foreach (dynamic _b in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
					D = _b;
					
					C.files.AddDesign2Known( D );
				}
				C.files.RefreshResearch();
			}
			return;
		}

		// Function from file: rdconsole.dm
		public void SyncRDevices(  ) {
			Obj_Machinery_RND D = null;
			Obj_Machinery_RND D2 = null;

			
			if ( !( this.areaMaster is Zone ) || this.areaMaster.type == typeof(Zone) ) {
				this.say( "Unable to process synchronization" );
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.rnd_machines, typeof(Obj_Machinery_RND) )) {
				D = _a;
				

				if ( D.linked_console != null || D.disabled || D.panel_open || !Lang13.Bool( D.areaMaster ) || D.areaMaster != this.areaMaster ) {
					continue;
				}

				if ( this.research_machines.Contains( D.type ) ) {
					this.linked_machines.Add( D );
					D.linked_console = this;
					D.update_icon();
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.linked_machines, typeof(Obj_Machinery_RND) )) {
				D2 = _c;
				

				if ( this.linked_lathe != null && this.linked_destroy != null && this.linked_imprinter != null ) {
					break;
				}

				dynamic _b = D2.type; // Was a switch-case, sorry for the mess.
				if ( _b==typeof(Obj_Machinery_RND_Fabricator_Protolathe) ) {
					
					if ( !( this.linked_lathe != null ) ) {
						this.linked_lathe = D2;
					}
				} else if ( _b==typeof(Obj_Machinery_RND_DestructiveAnalyzer) ) {
					
					if ( !( this.linked_destroy != null ) ) {
						this.linked_destroy = D2;
					}
				} else if ( _b==typeof(Obj_Machinery_RND_Fabricator_CircuitImprinter) ) {
					
					if ( !( this.linked_imprinter != null ) ) {
						this.linked_imprinter = D2;
					}
				}
			}

			if ( this.linked_lathe != null ) {
				((dynamic)this.linked_lathe).part_sets = this.part_sets;
			}
			return;
		}

		// Function from file: rdconsole.dm
		public string CallMaterialName( string ID = null ) {
			dynamic return_name = null;
			dynamic mat = null;
			dynamic R = null;
			dynamic T = null;

			return_name = null;

			if ( String13.SubStr( ID, 1, 2 ) == "$" ) {
				mat = ((Materials)this.materials).getMaterial( ID );
				return mat.processed_name;
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Reagent) ) - typeof(Reagent) )) {
					R = _a;
					
					T = Lang13.Call( R );

					if ( T.id == ID ) {
						return_name = T.name;
						break;
					}
				}
			}
			return return_name;
		}

		// Function from file: rdconsole.dm
		public dynamic CallTechName( dynamic ID = null ) {
			dynamic check_tech = null;
			dynamic return_name = null;
			dynamic T = null;

			return_name = "";

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Tech) ) - typeof(Tech) )) {
				T = _a;
				
				check_tech = T;

				if ( Lang13.Initial( check_tech, "id" ) == ID ) {
					return_name = Lang13.Initial( check_tech, "name" );
					break;
				}
			}
			return return_name;
		}

		// Function from file: rdconsole.dm
		public void Maximize(  ) {
			Tech KT = null;

			this.files.known_tech = GlobalVars.tech_list.Copy();

			foreach (dynamic _a in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
				KT = _a;
				

				if ( KT.level < KT.max_level ) {
					KT.level = KT.max_level;
				}
			}
			return;
		}

		// Function from file: rdconsole.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			Obj_Machinery_RND R = null;

			_default = base.Destroy( (object)(brokenup) );

			foreach (dynamic _a in Lang13.Enumerate( this.linked_machines, typeof(Obj_Machinery_RND) )) {
				R = _a;
				
				R.linked_console = null;
				this.linked_machines.Remove( R );
				R.update_icon();
			}

			if ( this.linked_destroy != null ) {
				this.linked_destroy.linked_console = null;
				this.linked_destroy.update_icon();
				this.linked_destroy = null;
			}

			if ( this.linked_imprinter != null ) {
				this.linked_imprinter.linked_console = null;
				this.linked_imprinter.update_icon();
				this.linked_imprinter = null;
			}

			if ( this.linked_lathe != null ) {
				this.linked_lathe.linked_console = null;
				this.linked_lathe.update_icon();
				this.linked_lathe = null;
			}
			return _default;
		}

	}

}