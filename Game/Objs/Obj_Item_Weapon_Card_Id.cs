// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Card_Id : Obj_Item_Weapon_Card {

		public dynamic access = new ByTable();
		public dynamic registered_name = "Unknown";
		public dynamic blood_type = "[UNSET]";
		public dynamic dna_hash = "[UNSET]";
		public dynamic fingerprint_hash = "[UNSET]";
		public string bans = null;
		public dynamic assignment = null;
		public dynamic rank = null;
		public bool dorm = false;
		public MoneyAccount virtual_wallet = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "card-id";
			this.slot_flags = 256;
			this.icon_state = "id";
		}

		// Function from file: cards_ids.dm
		public Obj_Item_Weapon_Card_Id ( dynamic loc = null ) : base( (object)(loc) ) {
			Ent_Static H = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_virtual_wallet();
			Task13.Schedule( 30, (Task13.Closure)(() => {
				
				if ( this.loc is Mob_Living_Carbon_Human ) {
					H = this.loc;
					this.SetOwnerInfo( H );
				}
				this.update_virtual_wallet();
				return;
			}));
			return;
		}

		// Function from file: human_resources.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic D = null;

			
			if ( a is Obj_Item_DemoteChip ) {
				D = a;

				if ( this.registered_name != D.target_name ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>Failed to apply, names do not match.</span>" );
				} else if ( this.bans != null ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>This card already has a microchip applied</span>" );
				} else if ( this.icon_state == "gold" ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>This microchip cannot apply to this card type.</span>" );
				} else {
					
					if ( D.cap ) {
						this.access -= GlobalFuncs.get_region_accesses( 5 );
						this.bans = this.bans + "5";
					}

					if ( D.hop ) {
						this.access -= GlobalFuncs.get_region_accesses( 6 );
						this.access -= GlobalFuncs.get_region_accesses( 7 );
						this.bans = this.bans + "67";
					}

					if ( D.hos ) {
						this.access -= GlobalFuncs.get_region_accesses( 1 );
						this.bans = this.bans + "1";
					}

					if ( D.ce ) {
						this.access -= GlobalFuncs.get_region_accesses( 4 );
						this.bans = this.bans + "4";
					}

					if ( D.rd ) {
						this.access -= GlobalFuncs.get_region_accesses( 3 );
						this.bans = this.bans + "3";
					}

					if ( D.cmo ) {
						this.access -= GlobalFuncs.get_region_accesses( 2 );
						this.bans = this.bans + "2";
					}

					if ( this.bans == null ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You require at least one stamp.</span>" );
						return null;
					}
					this.icon_state = "centcom_old";
					Lang13.Delete( D );
					D = null;
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: cards_ids.dm
		public dynamic GetJobRealName(  ) {
			
			if ( GlobalFuncs.get_all_jobs().Contains( this.rank ) ) {
				return this.rank;
			}

			if ( GlobalFuncs.get_all_jobs().Contains( this.assignment ) ) {
				return this.assignment;
			}
			return "Unknown";
		}

		// Function from file: cards_ids.dm
		public dynamic GetJobName(  ) {
			dynamic jobName = null;
			dynamic alt_jobName = null;

			jobName = this.assignment;
			alt_jobName = this.rank;

			if ( GlobalFuncs.get_all_job_icons().Contains( jobName ) ) {
				return jobName;
			}

			if ( GlobalFuncs.get_all_job_icons().Contains( alt_jobName ) ) {
				return alt_jobName;
			}

			if ( GlobalFuncs.get_all_centcom_jobs().Contains( ((dynamic)( GlobalFuncs.get_all_centcom_jobs() != null || Lang13.Bool( alt_jobName ) )).Contains( jobName ) ) ) {
				return "Centcom";
			}
			return "Unknown";
		}

		// Function from file: cards_ids.dm
		public dynamic GetBalance( bool? format = null ) {
			format = format ?? false;

			dynamic amt = null;
			MoneyAccount acct = null;

			amt = 0;
			acct = this.get_card_account( this );

			if ( acct != null ) {
				amt = acct.money;
			}

			if ( format == true ) {
				amt = "$" + GlobalFuncs.num2septext( amt );
			}
			return amt;
		}

		// Function from file: cards_ids.dm
		public void SetOwnerInfo( Ent_Static H = null ) {
			
			if ( !( H != null ) || !Lang13.Bool( ((dynamic)H).dna ) ) {
				return;
			}
			this.blood_type = ((dynamic)H).dna.b_type;
			this.dna_hash = ((dynamic)H).dna.unique_enzymes;
			this.fingerprint_hash = Num13.Md5( ((dynamic)H).dna.uni_identity );
			return;
		}

		// Function from file: cards_ids.dm
		public void UpdateName(  ) {
			this.name = "" + this.registered_name + "'s ID Card (" + this.assignment + ")";
			return;
		}

		// Function from file: cards_ids.dm
		public void update_virtual_wallet( int? new_funds = null ) {
			new_funds = new_funds ?? 0;

			
			if ( !( this.virtual_wallet != null ) ) {
				this.virtual_wallet = new MoneyAccount();
				this.virtual_wallet.v_virtual = true;
			}
			this.virtual_wallet.owner_name = this.registered_name;

			if ( Lang13.Bool( new_funds ) ) {
				this.virtual_wallet.money = new_funds;
			}

			if ( !Lang13.Bool( this.virtual_wallet.account_number ) ) {
				this.virtual_wallet.account_number = GlobalVars.next_account_number;
				GlobalVars.next_account_number += Rand13.Int( 1, 25 );
			}
			return;
		}

		// Function from file: cards_ids.dm
		public override dynamic GetID(  ) {
			return this;
		}

		// Function from file: cards_ids.dm
		public override dynamic GetAccess(  ) {
			return this.access;
		}

		// Function from file: cards_ids.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " shows you: " ).icon( this ).str( " " ).item( this.name ).str( ": assignment: " ).item( this.assignment ).ToString(), new Txt( "You flash your ID card: " ).icon( this ).str( " " ).item( this.name ).str( ": assignment: " ).item( this.assignment ).ToString() );
			this.add_fingerprint( user );
			return null;
		}

		// Function from file: cards_ids.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.Adjacent( user ) ) {
				user.show_message( "The current assignment on the card is " + this.assignment + ".", 1 );
				user.show_message( "The blood type on the card is " + this.blood_type + ".", 1 );
				user.show_message( "The DNA hash on the card is " + this.dna_hash + ".", 1 );
				user.show_message( "The fingerprint hash on the card is " + this.fingerprint_hash + ".", 1 );
			}
			return null;
		}

	}

}