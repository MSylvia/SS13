// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Scrubber_Huge : Obj_Machinery_PortableAtmospherics_Scrubber {

		public bool movable = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.active_power_usage = 500;
			this.idle_power_usage = 10;
			this.volume_rate = 1500;
			this.volume = 50000;
			this.icon_state = "scrubber:0";
		}

		public Obj_Machinery_PortableAtmospherics_Scrubber_Huge ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: scrubber.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( this.default_unfasten_wrench( user, A ) ) {
				
				if ( !this.movable ) {
					this.on = GlobalVars.FALSE;
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override int? process_atmos(  ) {
			dynamic T = null;
			Tile_Simulated AT = null;

			
			if ( !Lang13.Bool( this.anchored ) && !this.movable || !this.is_operational() ) {
				this.on = GlobalVars.FALSE;
				this.update_icon();
			}
			this.use_power = ( this.on ??0) + 1;

			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}
			base.process_atmos();

			if ( !Lang13.Bool( this.holding ) ) {
				T = GlobalFuncs.get_turf( this );

				foreach (dynamic _a in Lang13.Enumerate( ((Tile)T).GetAtmosAdjacentTurfs( GlobalVars.TRUE ), typeof(Tile_Simulated) )) {
					AT = _a;
					
					this.scrub( AT.return_air() );
				}
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "scrubber:" + this.on;
			return false;
		}

	}

}