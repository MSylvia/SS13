// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Conveyor : Obj_Machinery {

		public int operating = 0;
		public bool operable = true;
		public bool in_reverse = false;
		public double? forwards = null;
		public double? backwards = null;
		public double? movedir = null;
		public ByTable affecting = null;
		public string id_tag = "";
		public int frequency = 1367;
		public RadioFrequency radio_connection = null;
		public int max_moved = 25;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 134;
			this.icon = "icons/obj/recycling.dmi";
			this.icon_state = "conveyor0";
		}

		// Function from file: conveyor2.dm
		public Obj_Machinery_Conveyor ( dynamic loc = null, double? newdir = null, bool? building = null ) : base( (object)(loc) ) {
			building = building ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.machines.Remove( this );
			GlobalVars.fast_machines.Add( this );

			if ( Lang13.Bool( newdir ) ) {
				this.dir = ((int)( newdir ??0 ));
			}
			this.component_parts = new ByTable(new object [] { new Obj_Item_Weapon_Circuitboard_Conveyor() });
			this.updateConfig( !( building == true ) );
			return;
		}

		// Function from file: conveyor2.dm
		public override dynamic power_change(  ) {
			base.power_change();
			this.update();
			return null;
		}

		// Function from file: conveyor2.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			((Mob)a).Move_Pulled( this );
			return null;
		}

		// Function from file: conveyor2.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			int _default = 0;

			_default = base.multitool_topic( user, href_list, (object)(O) );

			if ( _default != 0 ) {
				return _default;
			}

			if ( href_list.Contains( "setdir" ) ) {
				this.operating = 0;
				this.dir = ((int)( String13.ParseNumber( href_list["setdir"] ) ??0 ));
				this.updateConfig();
				return 1;
			}

			if ( href_list.Contains( "reverse" ) ) {
				this.operating = 0;
				this.in_reverse = !this.in_reverse;
				this.updateConfig();
				return 1;
			}
			return _default;
		}

		// Function from file: conveyor2.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			string dis_id_tag = null;

			dis_id_tag = "-----";

			if ( this.id_tag != null && this.id_tag != "" ) {
				dis_id_tag = this.id_tag;
			}
			return new Txt( "\n	<ul>\n		<li><b>Direction:</b>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.NORTH ).str( "\" title=\"North\">" ).item( ( this.in_reverse ? "&darr;" : "&uarr;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.EAST ).str( "\" title=\"East\">" ).item( ( this.in_reverse ? "&larr;" : "&rarr;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.SOUTH ).str( "\" title=\"South\">" ).item( ( this.in_reverse ? "&uarr;" : "&darr;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.WEST ).str( "\" title=\"West\">" ).item( ( this.in_reverse ? "&rarr;" : "&larr;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.NORTHEAST ).str( "\" title=\"Northeast\">" ).item( ( this.in_reverse ? "&#8601;" : "&#8599;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.NORTHWEST ).str( "\" title=\"Northwest\">" ).item( ( this.in_reverse ? "&#8598;" : "&#8600;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.SOUTHEAST ).str( "\" title=\"Southeast\">" ).item( ( this.in_reverse ? "&#8600;" : "&#8598;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.SOUTHWEST ).str( "\" title=\"Southwest\">" ).item( ( this.in_reverse ? "&#8599;" : "&#8601;" ) ).str( "</a>\n			<a href=\"?src=" ).Ref( this ).str( ";reverse\" title=\"Reverse Direction\">&#8644;</a>\n		</li>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=1367\">Reset</a>)</li>\n		<li><b>ID Tag:</b> <a href=\"?src=" ).Ref( this ).str( ";set_id=1\">" ).item( dis_id_tag ).str( "</a></li>\n	</ul>" ).ToString();
		}

		// Function from file: conveyor2.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			b.drop_item( a, this.loc );
			return 0;
		}

		// Function from file: conveyor2.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( this.operating != 0 ) {
				GlobalFuncs.to_chat( user, new Txt( "You can't reach " ).the( this ).item().str( "'s panel through the moving machinery." ).ToString() );
				return -1;
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: conveyor2.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			
			if ( this.operating != 0 ) {
				GlobalFuncs.to_chat( user, new Txt( "You can't reach " ).the( this ).item().str( "'s panel through the moving machinery." ).ToString() );
				return -1;
			}
			return base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) );
		}

		// Function from file: conveyor2.dm
		public override dynamic process(  ) {
			int items_moved = 0;
			Ent_Dynamic A = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !( this.operating != 0 ) ) {
				return null;
			}
			this.f_use_power( 100 );
			this.affecting = this.loc.contents - this;
			Task13.Schedule( 1, (Task13.Closure)(() => {
				items_moved = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.affecting, typeof(Ent_Dynamic) )) {
					A = _a;
					

					if ( !Lang13.Bool( A.anchored ) ) {
						
						if ( A.loc == this.loc ) {
							Map13.Step( A, ((int)( this.movedir ??0 )) );
							items_moved++;
						}
					}

					if ( items_moved >= this.max_moved ) {
						break;
					}
				}
				return;
			}));
			return null;
		}

		// Function from file: conveyor2.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}

			if ( this.id_tag != ((dynamic)signal).data["tag"] || !Lang13.Bool( ((dynamic)signal).data["command"] ) ) {
				return false;
			}

			dynamic _a = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
			if ( _a=="forward" ) {
				this.operating = 1;
				this.setmove();
				return true;
			} else if ( _a=="reverse" ) {
				this.operating = -1;
				this.setmove();
				return true;
			} else if ( _a=="stop" ) {
				this.operating = 0;
				this.update();
				return true;
			} else {
				Game13.log.WriteMsg( "## TESTING: " + ( "Got unknown command \"" + ((dynamic)signal).data["command"] + "\" from " + this + "!" ) );
			}
			return false;
		}

		// Function from file: conveyor2.dm
		public void set_operable( int stepdir = 0, string match_id = null, dynamic op = null ) {
			dynamic C = null;

			
			if ( this.id_tag != match_id ) {
				return;
			}
			this.operable = Lang13.Bool( op );
			this.update();
			C = Lang13.FindIn( typeof(Obj_Machinery_Conveyor), Map13.GetStep( this, stepdir ) );

			if ( Lang13.Bool( C ) ) {
				((Obj_Machinery_Conveyor)C).set_operable( stepdir, this.id_tag, op );
			}
			return;
		}

		// Function from file: conveyor2.dm
		public void broken(  ) {
			this.stat |= 1;
			this.update();
			return;
		}

		// Function from file: conveyor2.dm
		public virtual void update(  ) {
			int disp_op = 0;

			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "conveyor-broken";
				this.operating = 0;
				return;
			}

			if ( !this.operable ) {
				this.operating = 0;
			}

			if ( ( this.stat & 2 ) != 0 ) {
				this.operating = 0;
			}
			disp_op = this.operating;

			if ( this.in_reverse && disp_op != 0 ) {
				disp_op = -this.operating;
			}
			this.icon_state = "conveyor" + disp_op;
			return;
		}

		// Function from file: conveyor2.dm
		public void setmove(  ) {
			
			if ( this.operating == 1 ) {
				this.movedir = this.forwards;
			} else {
				this.movedir = this.backwards;
			}
			this.update();
			return;
		}

		// Function from file: conveyor2.dm
		public void updateConfig( bool? startup = null ) {
			startup = startup ?? false;

			double? next_backwards = null;

			
			switch ((int)( this.dir )) {
				case 1:
					this.forwards = GlobalVars.NORTH;
					this.backwards = GlobalVars.SOUTH;
					break;
				case 2:
					this.forwards = GlobalVars.SOUTH;
					this.backwards = GlobalVars.NORTH;
					break;
				case 4:
					this.forwards = GlobalVars.EAST;
					this.backwards = GlobalVars.WEST;
					break;
				case 8:
					this.forwards = GlobalVars.WEST;
					this.backwards = GlobalVars.EAST;
					break;
				case 5:
					this.forwards = GlobalVars.EAST;
					this.backwards = GlobalVars.SOUTH;
					break;
				case 9:
					this.forwards = GlobalVars.SOUTH;
					this.backwards = GlobalVars.WEST;
					break;
				case 6:
					this.forwards = GlobalVars.NORTH;
					this.backwards = GlobalVars.EAST;
					break;
				case 10:
					this.forwards = GlobalVars.WEST;
					this.backwards = GlobalVars.NORTH;
					break;
			}

			if ( this.in_reverse ) {
				next_backwards = this.forwards;
				this.forwards = this.backwards;
				this.backwards = next_backwards;
			}

			if ( !( startup == true ) ) {
				this.initialize();
			}
			return;
		}

		// Function from file: conveyor2.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_CONVEYORS );
			return;
		}

		// Function from file: conveyor2.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			
			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			this.update();
			return false;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}