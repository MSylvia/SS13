// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Anodevice : Obj_Item_Weapon {

		public double cooldown = 0;
		public bool activated = false;
		public bool timing = false;
		public int time = 50;
		public int archived_time = 50;
		public dynamic inserted_battery = null;
		public dynamic archived_loc = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/xenoarchaeology.dmi";
			this.icon_state = "anodev";
		}

		// Function from file: ano_device_battery.dm
		public Obj_Item_Weapon_Anodevice ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.processing_objects.Add( this );
			return;
		}

		// Function from file: ano_device_battery.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.processing_objects.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: ano_device_battery.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Map13.GetDistance( this, Task13.User ) > 1 ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["neg_changetime_max"] ) ) {
				this.time += -100;

				if ( this.time > Convert.ToDouble( this.inserted_battery.capacity ) ) {
					this.time = Convert.ToInt32( this.inserted_battery.capacity );
				} else if ( this.time < 0 ) {
					this.time = 0;
				}
			}

			if ( Lang13.Bool( href_list["neg_changetime"] ) ) {
				this.time += -10;

				if ( this.time > Convert.ToDouble( this.inserted_battery.capacity ) ) {
					this.time = Convert.ToInt32( this.inserted_battery.capacity );
				} else if ( this.time < 0 ) {
					this.time = 0;
				}
			}

			if ( Lang13.Bool( href_list["changetime"] ) ) {
				this.time += 10;

				if ( this.time > Convert.ToDouble( this.inserted_battery.capacity ) ) {
					this.time = Convert.ToInt32( this.inserted_battery.capacity );
				} else if ( this.time < 0 ) {
					this.time = 0;
				}
			}

			if ( Lang13.Bool( href_list["changetime_max"] ) ) {
				this.time += 100;

				if ( this.time > Convert.ToDouble( this.inserted_battery.capacity ) ) {
					this.time = Convert.ToInt32( this.inserted_battery.capacity );
				} else if ( this.time < 0 ) {
					this.time = 0;
				}
			}

			if ( Lang13.Bool( href_list["startup"] ) ) {
				this.activated = true;
				this.timing = false;

				if ( !Lang13.Bool( this.inserted_battery.battery_effect.activated ) ) {
					((ArtifactEffect)this.inserted_battery.battery_effect).ToggleActivate( true );
				}
			}

			if ( Lang13.Bool( href_list["shutdown"] ) ) {
				this.activated = false;
			}

			if ( Lang13.Bool( href_list["starttimer"] ) ) {
				this.timing = true;
				this.archived_time = this.time;
			}

			if ( Lang13.Bool( href_list["ejectbattery"] ) ) {
				this.shutdown_emission();
				this.inserted_battery.loc = GlobalFuncs.get_turf( this );
				this.inserted_battery = null;
				this.UpdateSprite();
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=anodevice" );
				Task13.User.unset_machine(  );
				return null;
			}
			this.interact( Task13.User );
			base.Topic( href, href_list, (object)(hclient) );
			this.updateDialog();
			return null;
		}

		// Function from file: ano_device_battery.dm
		public void UpdateSprite(  ) {
			double p = 0;

			
			if ( !Lang13.Bool( this.inserted_battery ) ) {
				this.icon_state = "anodev";
				return;
			}
			p = Convert.ToDouble( this.inserted_battery.stored_charge / this.inserted_battery.capacity * 100 );
			p = Num13.MinInt( ((int)( p )), 100 );
			this.icon_state = "anodev" + Num13.Round( p, 25 );
			return;
		}

		// Function from file: ano_device_battery.dm
		public void shutdown_emission(  ) {
			
			if ( this.activated ) {
				this.activated = false;
				this.timing = false;
				this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " buzzes.</span>" ).ToString(), new Txt().icon( this ).str( "<span class='notice'>You hear something buzz.</span>" ).ToString() );
				this.cooldown = this.archived_time / 2;

				if ( Lang13.Bool( this.inserted_battery.battery_effect.activated ) ) {
					((ArtifactEffect)this.inserted_battery.battery_effect).ToggleActivate( true );
				}
			}
			return;
		}

		// Function from file: ano_device_battery.dm
		public override dynamic process(  ) {
			dynamic T = null;

			
			if ( this.cooldown > 0 ) {
				this.cooldown -= 1;

				if ( this.cooldown <= 0 ) {
					this.cooldown = 0;
					this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " chimes.</span>" ).ToString(), new Txt( "<span class='notice'>" ).icon( this ).str( " You hear something chime.</span>" ).ToString() );
				}
			} else if ( this.activated ) {
				
				if ( Lang13.Bool( this.inserted_battery ) && Lang13.Bool( this.inserted_battery.battery_effect ) ) {
					
					if ( !Lang13.Bool( this.inserted_battery.battery_effect.activated ) ) {
						((ArtifactEffect)this.inserted_battery.battery_effect).ToggleActivate( true );
					}
					T = GlobalFuncs.get_turf( this );

					if ( T != this.archived_loc ) {
						this.archived_loc = T;
						((ArtifactEffect)this.inserted_battery.battery_effect).UpdateMove();
					}
					this.inserted_battery.battery_effect.process();

					if ( Lang13.Bool( this.inserted_battery.battery_effect.effect ) == false && this.loc is Mob ) {
						((ArtifactEffect)this.inserted_battery.battery_effect).DoEffectTouch( this.loc );
					}
					this.inserted_battery.stored_charge -= 1;

					if ( Convert.ToDouble( this.inserted_battery.stored_charge ) <= 0 ) {
						this.shutdown_emission();
					}

					if ( this.timing ) {
						this.time -= 1;

						if ( this.time <= 0 ) {
							this.shutdown_emission();
						}
					}
				} else {
					Sys13.Shutdown();
				}
			}
			return null;
		}

		// Function from file: ano_device_battery.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			((Mob)user).set_machine( this );
			dat = "<b>Anomalous Materials Energy Utilizer</b><br>";

			if ( Lang13.Bool( this.inserted_battery ) ) {
				
				if ( this.cooldown != 0 ) {
					dat += "Cooldown in progress, please wait.<br>";
				} else if ( this.activated ) {
					
					if ( this.timing ) {
						dat += "Device active.<br>";
					} else {
						dat += "Device active in timed mode.<br>";
					}
				}
				dat += "" + this.inserted_battery + " inserted, anomaly ID: " + ( Lang13.Bool( this.inserted_battery.battery_effect.artifact_id ) ? this.inserted_battery.battery_effect.artifact_id : "NA" ) + "<BR>";
				dat += "<b>Total Power:</b> " + this.inserted_battery.stored_charge + "/" + this.inserted_battery.capacity + "<BR><BR>";
				dat += new Txt( "<b>Timed activation:</b> <A href='?src=" ).Ref( this ).str( ";neg_changetime_max=-100'>--</a> <A href='?src=" ).Ref( this ).str( ";neg_changetime=-10'>-</a> " ).item( ( this.time >= 1000 ? "" + this.time / 10 : ( this.time >= 100 ? " " + this.time / 10 : "  " + this.time / 10 ) ) ).str( " <A href='?src=" ).Ref( this ).str( ";changetime=10'>+</a> <A href='?src=" ).Ref( this ).str( ";changetime_max=100'>++</a><BR>" ).ToString();

				if ( this.cooldown != 0 ) {
					dat += "<font color=red>Cooldown in progress.</font><BR>";
					dat += "<br>";
				} else if ( !this.activated ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";startup=1'>Start</a><BR>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";startup=1;starttimer=1'>Start in timed mode</a><BR>" ).ToString();
				} else {
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";shutdown=1'>Shutdown emission</a><br>" ).ToString();
					dat += "<br>";
				}
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ejectbattery=1'>Eject battery</a><BR>" ).ToString();
			} else {
				dat += "Please insert battery<br>";
				dat += "<br>";
				dat += "<br>";
				dat += "<br>";
				dat += "<br>";
				dat += "<br>";
				dat += "<br>";
			}
			dat += "<hr>";
			dat += new Txt( "<a href='?src=" ).Ref( this ).str( "'>Refresh</a> <a href='?src=" ).Ref( this ).str( ";close=1'>Close</a>" ).ToString();
			Interface13.Browse( user, dat, "window=anodevice;size=400x500" );
			GlobalFuncs.onclose( user, "anodevice" );
			return null;
		}

		// Function from file: ano_device_battery.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( GlobalFuncs.in_range( this, user ) ) {
				return this.interact( user );
			}
			return null;
		}

		// Function from file: ano_device_battery.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Anobattery ) {
				
				if ( !Lang13.Bool( this.inserted_battery ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert the battery.</span>" );
						this.inserted_battery = a;
						this.UpdateSprite();
					}
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

	}

}