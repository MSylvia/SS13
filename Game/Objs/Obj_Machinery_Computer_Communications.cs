// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Communications : Obj_Machinery_Computer {

		public int authenticated = 0;
		public string auth_id = "Unknown";
		public ByTable messagetitle = new ByTable();
		public ByTable messagetext = new ByTable();
		public double? currmsg = 0;
		public double? aicurrmsg = 0;
		public int state = 1;
		public int aistate = 1;
		public bool message_cooldown = false;
		public bool ai_message_cooldown = false;
		public double? tmp_alertlevel = 0;
		public bool STATE_DEFAULT = true;
		public int STATE_CALLSHUTTLE = 2;
		public int STATE_CANCELSHUTTLE = 3;
		public int STATE_MESSAGELIST = 4;
		public int STATE_VIEWMESSAGE = 5;
		public int STATE_DELMESSAGE = 6;
		public int STATE_STATUSDISPLAY = 7;
		public int STATE_ALERT_LEVEL = 8;
		public int STATE_CONFIRM_LEVEL = 9;
		public int STATE_TOGGLE_EMERGENCY = 10;
		public string status_display_freq = "1435";
		public dynamic stat_msg1 = null;
		public dynamic stat_msg2 = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "comm";
			this.icon_keyboard = "tech_key";
			this.req_access = new ByTable(new object [] { 19 });
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Communications);
		}

		// Function from file: communications.dm
		public Obj_Machinery_Computer_Communications ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			GlobalVars.shuttle_caller_list.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: communications.dm
		public override dynamic Destroy(  ) {
			GlobalVars.shuttle_caller_list.Remove( this );
			GlobalVars.SSshuttle.autoEvac();
			return base.Destroy();
		}

		// Function from file: communications.dm
		public void post_status( string command = null, dynamic data1 = null, dynamic data2 = null ) {
			RadioFrequency frequency = null;
			Signal status_signal = null;

			frequency = GlobalVars.SSradio.return_frequency( 1435 );

			if ( !( frequency != null ) ) {
				return;
			}
			status_signal = new Signal();
			status_signal.source = this;
			status_signal.transmission_method = 1;
			status_signal.data["command"] = command;

			switch ((string)( command )) {
				case "message":
					status_signal.data["msg1"] = data1;
					status_signal.data["msg2"] = data2;
					break;
				case "alert":
					status_signal.data["picture_state"] = data1;
					break;
			}
			frequency.post_signal( this, status_signal );
			return;
		}

		// Function from file: communications.dm
		public void make_announcement( Mob user = null, bool? is_silicon = null ) {
			string input = null;

			input = GlobalFuncs.stripped_input( user, "Please choose a message to announce to the station crew.", "What?" );

			if ( !Lang13.Bool( input ) || !user.canUseTopic( this ) ) {
				return;
			}

			if ( is_silicon == true ) {
				GlobalFuncs.minor_announce( input, "" + user.name + " Announces:" );
				this.ai_message_cooldown = true;
				Task13.Schedule( 600, (Task13.Closure)(() => {
					this.ai_message_cooldown = false;
					return;
				}));
			} else {
				GlobalFuncs.priority_announce( String13.HtmlDecode( input ), null, "sound/misc/announce.ogg", "Captain" );
				this.message_cooldown = true;
				Task13.Schedule( 600, (Task13.Closure)(() => {
					this.message_cooldown = false;
					return;
				}));
			}
			GlobalFuncs.log_say( "" + GlobalFuncs.key_name( user ) + " has made a priority announcement: " + input );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " has made a priority announcement." );
			return;
		}

		// Function from file: communications.dm
		public string interact_ai( dynamic user = null ) {
			string dat = null;
			int? i = null;

			dat = "";

			switch ((int)( this.aistate )) {
				case 1:
					
					if ( Lang13.Bool( GlobalVars.SSshuttle.emergencyLastCallLoc ) ) {
						dat += "<BR>Latest emergency signal trace attempt successful.<BR>Last signal origin: <b>" + GlobalFuncs.format_text( GlobalVars.SSshuttle.emergencyLastCallLoc.name ) + "</b>.<BR>";
					} else {
						dat += "<BR>Latest emergency signal trace attempt failed.<BR>";
					}

					if ( this.authenticated != 0 ) {
						dat += "Current login: " + this.auth_id;
					} else {
						dat += "Current login: None";
					}
					dat += "<BR><BR><B>General Functions</B>";
					dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-messagelist'>Message List</A> ]" ).ToString();

					if ( GlobalVars.SSshuttle.emergency.mode <= 0 ) {
						dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-callshuttle'>Call Emergency Shuttle</A> ]" ).ToString();
					}
					dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-status'>Set Status Display</A> ]" ).ToString();
					dat += "<BR><BR><B>Special Functions</B>";
					dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-announce'>Make an Announcement</A> ]" ).ToString();
					dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-changeseclevel'>Change Alert Level</A> ]" ).ToString();
					dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-emergencyaccess'>Emergency Maintenance Access</A> ]" ).ToString();
					break;
				case 2:
					dat += this.get_call_shuttle_form( true );
					break;
				case 4:
					dat += "Messages:";
					i = null;
					i = 1;

					while (( i ??0) <= this.messagetitle.len) {
						dat += new Txt( "<BR><A HREF='?src=" ).Ref( this ).str( ";operation=ai-viewmessage;message-num=" ).item( i ).str( "'>" ).item( this.messagetitle[i] ).str( "</A>" ).ToString();
						i++;
					}
					break;
				case 5:
					
					if ( Lang13.Bool( this.aicurrmsg ) ) {
						dat += "<B>" + this.messagetitle[this.aicurrmsg] + "</B><BR><BR>" + this.messagetext[this.aicurrmsg];
						dat += new Txt( "<BR><BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-delmessage'>Delete</A> ]" ).ToString();
					} else {
						this.aistate = GlobalVars.STATE_MESSAGELIST;
						this.attack_hand( user );
						return null;
					}
					break;
				case 6:
					
					if ( Lang13.Bool( this.aicurrmsg ) ) {
						dat += new Txt( "Are you sure you want to delete this message? [ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-delmessage2'>OK</A> | <A HREF='?src=" ).Ref( this ).str( ";operation=ai-viewmessage'>Cancel</A> ]" ).ToString();
					} else {
						this.aistate = GlobalVars.STATE_MESSAGELIST;
						this.attack_hand( user );
						return null;
					}
					break;
				case 7:
					dat += "Set Status Displays<BR>";
					dat += new Txt( "[ <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=blank'>Clear</A> ]<BR>" ).ToString();
					dat += new Txt( "[ <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=shuttle'>Shuttle ETA</A> ]<BR>" ).ToString();
					dat += new Txt( "[ <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=message'>Message</A> ]" ).ToString();
					dat += new Txt( "<ul><li> Line 1: <A HREF='?src=" ).Ref( this ).str( ";operation=setmsg1'>" ).item( ( Lang13.Bool( this.stat_msg1 ) ? this.stat_msg1 : ((dynamic)( "(none)" )) ) ).str( "</A>" ).ToString();
					dat += new Txt( "<li> Line 2: <A HREF='?src=" ).Ref( this ).str( ";operation=setmsg2'>" ).item( ( Lang13.Bool( this.stat_msg2 ) ? this.stat_msg2 : ((dynamic)( "(none)" )) ) ).str( "</A></ul><br>" ).ToString();
					dat += new Txt( "[ Alert: <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=default'>None</A> |" ).ToString();
					dat += new Txt( " <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=redalert'>Red Alert</A> |" ).ToString();
					dat += new Txt( " <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=lockdown'>Lockdown</A> |" ).ToString();
					dat += new Txt( " <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=biohazard'>Biohazard</A> ]<BR><HR>" ).ToString();
					break;
				case 8:
					dat += "Current alert level: " + GlobalFuncs.get_security_level() + "<BR>";

					if ( GlobalVars.security_level == 3 ) {
						dat += "<font color='red'><b>The self-destruct mechanism is active. Find a way to deactivate the mechanism to lower the alert level or evacuate.</b></font>";
					} else {
						dat += new Txt( "<A HREF='?src=" ).Ref( this ).str( ";operation=ai-securitylevel;newalertlevel=" ).item( 1 ).str( "'>Blue</A><BR>" ).ToString();
						dat += new Txt( "<A HREF='?src=" ).Ref( this ).str( ";operation=ai-securitylevel;newalertlevel=" ).item( 0 ).str( "'>Green</A>" ).ToString();
					}
					break;
				case 10:
					
					if ( GlobalVars.emergency_access ) {
						dat += "<b>Emergency Maintenance Access is currently <font color='red'>ENABLED</font></b>";
						dat += new Txt( "<BR>Restore maintenance access restrictions? <BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-disableemergency'>OK</A> | <A HREF='?src=" ).Ref( this ).str( ";operation=ai-viewmessage'>Cancel</A> ]" ).ToString();
					} else {
						dat += "<b>Emergency Maintenance Access is currently <font color='green'>DISABLED</font></b>";
						dat += new Txt( "<BR>Lift access restrictions on maintenance and external airlocks? <BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=ai-enableemergency'>OK</A> | <A HREF='?src=" ).Ref( this ).str( ";operation=ai-viewmessage'>Cancel</A> ]" ).ToString();
					}
					break;
			}
			dat += new Txt( "<BR><BR>[ " ).item( ( this.aistate != ( GlobalVars.STATE_DEFAULT ?1:0) ? new Txt( "<A HREF='?src=" ).Ref( this ).str( ";operation=ai-main'>Main Menu</A> | " ).ToString() : "" ) ).str( "<A HREF='?src=" ).Ref( user ).str( ";mach_close=communications'>Close</A> ]" ).ToString();
			return dat;
		}

		// Function from file: communications.dm
		public string get_cancel_shuttle_form(  ) {
			string form_id = null;
			string dat = null;

			form_id = "cancelshuttle";
			dat = this.get_javascript_header( form_id );
			dat += new Txt( "<form name='cancelshuttle' id='" ).item( form_id ).str( "' action='?src=" ).Ref( this ).str( "' method='get' style='display: inline'>" ).ToString();
			dat += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
			dat += "<input type='hidden' name='operation' value='cancelshuttle2'>";
			dat += "<BR>Are you sure you want to cancel the shuttle? [ <a href='#' onclick='submit()'>Cancel</a> ]";
			return dat;
		}

		// Function from file: communications.dm
		public string get_call_shuttle_form( bool? ai_interface = null ) {
			ai_interface = ai_interface ?? false;

			string form_id = null;
			string dat = null;

			form_id = "callshuttle";
			dat = this.get_javascript_header( form_id );
			dat += new Txt( "<form name='callshuttle' id='" ).item( form_id ).str( "' action='?src=" ).Ref( this ).str( "' method='get' style='display: inline'>" ).ToString();
			dat += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
			dat += "<input type='hidden' name='operation' value='" + ( ai_interface == true ? "ai-callshuttle2" : "callshuttle2" ) + "'>";
			dat += "<b>Nature of emergency:</b><BR> <input type='text' id='reasonfield' name='call' style='width:250px; background-color:#FFDDDD; onkeydown='getLength() onkeyup='getLength()' onkeypress='getLength()'>";
			dat += "<BR>Are you sure you want to call the shuttle? [ <a href='#' onclick='submit()'>Call</a> ]";
			return dat;
		}

		// Function from file: communications.dm
		public string get_javascript_header( string form_id = null ) {
			string dat = null;

			dat = "<script type=\"text/javascript\">\n						function getLength(){\n							var reasonField = document.getElementById('reasonfield');\n							if(reasonField.value.length >= " + GlobalVars.CALL_SHUTTLE_REASON_LENGTH + @"){
								reasonField.style.backgroundColor = ""#DDFFDD"";
							}
							else {
								reasonField.style.backgroundColor = ""#FFDDDD"";
							}
						}
						function submit() {
							document.getElementById('" + form_id + "').submit();\n						}\n					</script>";
			return dat;
		}

		// Function from file: communications.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;
			double timeleft = 0;
			Browser popup = null;
			string dat2 = null;
			int? i = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}

			if ( this.z > 6 ) {
				a.WriteMsg( "<span class='boldannounce'>Unable to establish a connection</span>: ÿ\"You're too far away from the station!" );
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "";

			if ( GlobalVars.SSshuttle.emergency.mode == 2 ) {
				timeleft = GlobalVars.SSshuttle.emergency.timeLeft();
				dat += "<B>Emergency shuttle</B>\n<BR>\nETA: " + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 );
			}
			popup = new Browser( a, "communications", "Communications Console", 400, 500 );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );

			if ( a is Mob_Living_Silicon ) {
				dat2 = this.interact_ai( a );

				if ( Lang13.Bool( dat2 ) ) {
					dat += dat2;
					popup.set_content( dat );
					popup.open();
				}
				return null;
			}

			switch ((int)( this.state )) {
				case 1:
					
					if ( this.authenticated != 0 ) {
						
						if ( Lang13.Bool( GlobalVars.SSshuttle.emergencyLastCallLoc ) ) {
							dat += "<BR>Most recent shuttle call/recall traced to: <b>" + GlobalFuncs.format_text( GlobalVars.SSshuttle.emergencyLastCallLoc.name ) + "</b>";
						} else {
							dat += "<BR>Unable to trace most recent shuttle call/recall signal.";
						}
						dat += "<BR>Logged in as: " + this.auth_id;
						dat += "<BR>";
						dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=logout'>Log Out</A> ]<BR>" ).ToString();
						dat += "<BR><B>General Functions</B>";
						dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=messagelist'>Message List</A> ]" ).ToString();

						switch ((int)( GlobalVars.SSshuttle.emergency.mode )) {
							case 0:
							case 1:
								dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=callshuttle'>Call Emergency Shuttle</A> ]" ).ToString();
								break;
							default:
								dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=cancelshuttle'>Cancel Shuttle Call</A> ]" ).ToString();
								break;
						}
						dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=status'>Set Status Display</A> ]" ).ToString();

						if ( this.authenticated == 2 ) {
							dat += "<BR><BR><B>Captain Functions</B>";
							dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=announce'>Make a Captain's Announcement</A> ]" ).ToString();
							dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=changeseclevel'>Change Alert Level</A> ]" ).ToString();
							dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=emergencyaccess'>Emergency Maintenance Access</A> ]" ).ToString();
							dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=nukerequest'>Request Nuclear Authentication Codes</A> ]" ).ToString();

							if ( this.emagged == 0 ) {
								dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=MessageCentcomm'>Send Message to Centcom</A> ]" ).ToString();
							} else {
								dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=MessageSyndicate'>Send Message to [UNKNOWN]</A> ]" ).ToString();
								dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=RestoreBackup'>Restore Backup Routing Data</A> ]" ).ToString();
							}
						}
					} else {
						dat += new Txt( "<BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=login'>Log In</A> ]" ).ToString();
					}
					break;
				case 2:
					dat += this.get_call_shuttle_form();
					break;
				case 3:
					dat += this.get_cancel_shuttle_form();
					break;
				case 4:
					dat += "Messages:";
					i = null;
					i = 1;

					while (( i ??0) <= this.messagetitle.len) {
						dat += new Txt( "<BR><A HREF='?src=" ).Ref( this ).str( ";operation=viewmessage;message-num=" ).item( i ).str( "'>" ).item( this.messagetitle[i] ).str( "</A>" ).ToString();
						i++;
					}
					break;
				case 5:
					
					if ( Lang13.Bool( this.currmsg ) ) {
						dat += "<B>" + this.messagetitle[this.currmsg] + "</B><BR><BR>" + this.messagetext[this.currmsg];

						if ( this.authenticated != 0 ) {
							dat += new Txt( "<BR><BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=delmessage'>Delete ]" ).ToString();
						}
					} else {
						this.state = GlobalVars.STATE_MESSAGELIST;
						this.attack_hand( a );
						return null;
					}
					break;
				case 6:
					
					if ( Lang13.Bool( this.currmsg ) ) {
						dat += new Txt( "Are you sure you want to delete this message? [ <A HREF='?src=" ).Ref( this ).str( ";operation=delmessage2'>OK</A> | <A HREF='?src=" ).Ref( this ).str( ";operation=viewmessage'>Cancel</A> ]" ).ToString();
					} else {
						this.state = GlobalVars.STATE_MESSAGELIST;
						this.attack_hand( a );
						return null;
					}
					break;
				case 7:
					dat += "Set Status Displays<BR>";
					dat += new Txt( "[ <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=blank'>Clear</A> ]<BR>" ).ToString();
					dat += new Txt( "[ <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=shuttle'>Shuttle ETA</A> ]<BR>" ).ToString();
					dat += new Txt( "[ <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=message'>Message</A> ]" ).ToString();
					dat += new Txt( "<ul><li> Line 1: <A HREF='?src=" ).Ref( this ).str( ";operation=setmsg1'>" ).item( ( Lang13.Bool( this.stat_msg1 ) ? this.stat_msg1 : ((dynamic)( "(none)" )) ) ).str( "</A>" ).ToString();
					dat += new Txt( "<li> Line 2: <A HREF='?src=" ).Ref( this ).str( ";operation=setmsg2'>" ).item( ( Lang13.Bool( this.stat_msg2 ) ? this.stat_msg2 : ((dynamic)( "(none)" )) ) ).str( "</A></ul><br>" ).ToString();
					dat += new Txt( "[ Alert: <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=default'>None</A> |" ).ToString();
					dat += new Txt( " <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=redalert'>Red Alert</A> |" ).ToString();
					dat += new Txt( " <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=lockdown'>Lockdown</A> |" ).ToString();
					dat += new Txt( " <A HREF='?src=" ).Ref( this ).str( ";operation=setstat;statdisp=alert;alert=biohazard'>Biohazard</A> ]<BR><HR>" ).ToString();
					break;
				case 8:
					dat += "Current alert level: " + GlobalFuncs.get_security_level() + "<BR>";

					if ( GlobalVars.security_level == 3 ) {
						dat += "<font color='red'><b>The self-destruct mechanism is active. Find a way to deactivate the mechanism to lower the alert level or evacuate.</b></font>";
					} else {
						dat += new Txt( "<A HREF='?src=" ).Ref( this ).str( ";operation=securitylevel;newalertlevel=" ).item( 1 ).str( "'>Blue</A><BR>" ).ToString();
						dat += new Txt( "<A HREF='?src=" ).Ref( this ).str( ";operation=securitylevel;newalertlevel=" ).item( 0 ).str( "'>Green</A>" ).ToString();
					}
					break;
				case 9:
					dat += "Current alert level: " + GlobalFuncs.get_security_level() + "<BR>";
					dat += "Confirm the change to: " + GlobalFuncs.num2seclevel( this.tmp_alertlevel ) + "<BR>";
					dat += new Txt( "<A HREF='?src=" ).Ref( this ).str( ";operation=swipeidseclevel'>Swipe ID</A> to confirm change.<BR>" ).ToString();
					break;
				case 10:
					
					if ( GlobalVars.emergency_access ) {
						dat += "<b>Emergency Maintenance Access is currently <font color='red'>ENABLED</font></b>";
						dat += new Txt( "<BR>Restore maintenance access restrictions? <BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=disableemergency'>OK</A> | <A HREF='?src=" ).Ref( this ).str( ";operation=viewmessage'>Cancel</A> ]" ).ToString();
					} else {
						dat += "<b>Emergency Maintenance Access is currently <font color='green'>DISABLED</font></b>";
						dat += new Txt( "<BR>Lift access restrictions on maintenance and external airlocks? <BR>[ <A HREF='?src=" ).Ref( this ).str( ";operation=enableemergency'>OK</A> | <A HREF='?src=" ).Ref( this ).str( ";operation=viewmessage'>Cancel</A> ]" ).ToString();
					}
					break;
			}
			dat += new Txt( "<BR><BR>[ " ).item( ( this.state != ( GlobalVars.STATE_DEFAULT ?1:0) ? new Txt( "<A HREF='?src=" ).Ref( this ).str( ";operation=main'>Main Menu</A> | " ).ToString() : "" ) ).str( "<A HREF='?src=" ).Ref( a ).str( ";mach_close=communications'>Close</A> ]" ).ToString();
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: communications.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !Lang13.Bool( this.emagged ) ) {
				this.emagged = 1;

				if ( this.authenticated == 1 ) {
					this.authenticated = 2;
				}
				user.WriteMsg( "<span class='notice'>You scramble the communication routing circuits.</span>" );
			}
			return false;
		}

		// Function from file: communications.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Card_Id ) {
				this.attack_hand( user );
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: communications.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic CM = null;
			Mob M = null;
			dynamic I = null;
			dynamic pda = null;
			Mob M2 = null;
			dynamic I2 = null;
			dynamic pda2 = null;
			int old_level = 0;
			dynamic title = null;
			dynamic text = null;
			string input = null;
			string input2 = null;
			string input3 = null;
			dynamic title2 = null;
			dynamic text2 = null;
			int old_level2 = 0;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( this.z > 2 ) {
				Task13.User.WriteMsg( "<span class='boldannounce'>Unable to establish a connection</span>: ÿ\"You're too far away from the station!" );
				return null;
			}
			Task13.User.set_machine( this );

			if ( !Lang13.Bool( href_list["operation"] ) ) {
				return null;
			}
			CM = this.circuit;

			dynamic _d = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _d=="main" ) {
				this.state = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="login" ) {
				M = Task13.User;
				I = M.get_active_hand();

				if ( I is Obj_Item_Device_Pda ) {
					pda = I;
					I = pda.id;
				}

				if ( Lang13.Bool( I ) && I is Obj_Item_Weapon_Card_Id ) {
					
					if ( this.check_access( I ) ) {
						this.authenticated = 1;
						this.auth_id = "" + I.registered_name + " (" + I.assignment + ")";

						if ( Lang13.Bool( I.access.Contains( 20 ) ) ) {
							this.authenticated = 2;
						}
					}

					if ( Lang13.Bool( this.emagged ) ) {
						this.authenticated = 2;
						this.auth_id = "Unknown";
					}
				}
			} else if ( _d=="logout" ) {
				this.authenticated = 0;
			} else if ( _d=="swipeidseclevel" ) {
				M2 = Task13.User;
				I2 = M2.get_active_hand();

				if ( I2 is Obj_Item_Device_Pda ) {
					pda2 = I2;
					I2 = pda2.id;
				}

				if ( Lang13.Bool( I2 ) && I2 is Obj_Item_Weapon_Card_Id ) {
					
					if ( Lang13.Bool( I2.access.Contains( GlobalVars.access_captain ) ) ) {
						old_level = GlobalVars.security_level;

						if ( !Lang13.Bool( this.tmp_alertlevel ) ) {
							this.tmp_alertlevel = 0;
						}

						if ( ( this.tmp_alertlevel ??0) < 0 ) {
							this.tmp_alertlevel = 0;
						}

						if ( ( this.tmp_alertlevel ??0) > 1 ) {
							this.tmp_alertlevel = 1;
						}
						GlobalFuncs.set_security_level( this.tmp_alertlevel );

						if ( GlobalVars.security_level != old_level ) {
							GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Task13.User ) + " has changed the security level to " + GlobalFuncs.get_security_level() + "." );
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changed the security level to " + GlobalFuncs.get_security_level() + "." );

							switch ((int)( GlobalVars.security_level )) {
								case 0:
									GlobalFuncs.feedback_inc( "alert_comms_green", 1 );
									break;
								case 1:
									GlobalFuncs.feedback_inc( "alert_comms_blue", 1 );
									break;
							}
						}
						this.tmp_alertlevel = 0;
					} else {
						Task13.User.WriteMsg( "<span class='warning'>You are not authorized to do this!</span>" );
						this.tmp_alertlevel = 0;
					}
					this.state = GlobalVars.STATE_DEFAULT ?1:0;
				} else {
					Task13.User.WriteMsg( "<span class='warning'>You need to swipe your ID!</span>" );
				}
			} else if ( _d=="announce" ) {
				
				if ( this.authenticated == 2 && !this.message_cooldown ) {
					this.make_announcement( Task13.User );
				} else if ( this.authenticated == 2 && this.message_cooldown ) {
					Task13.User.WriteMsg( "Intercomms recharging. Please stand by." );
				}
			} else if ( _d=="callshuttle" ) {
				this.state = GlobalVars.STATE_DEFAULT ?1:0;

				if ( this.authenticated != 0 ) {
					this.state = GlobalVars.STATE_CALLSHUTTLE;
				}
			} else if ( _d=="callshuttle2" ) {
				
				if ( this.authenticated != 0 ) {
					GlobalVars.SSshuttle.requestEvac( Task13.User, href_list["call"] );

					if ( GlobalVars.SSshuttle.emergency.timer != 0 ) {
						this.post_status( "shuttle" );
					}
				}
				this.state = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="cancelshuttle" ) {
				this.state = GlobalVars.STATE_DEFAULT ?1:0;

				if ( this.authenticated != 0 ) {
					this.state = GlobalVars.STATE_CANCELSHUTTLE;
				}
			} else if ( _d=="cancelshuttle2" ) {
				
				if ( this.authenticated != 0 ) {
					GlobalVars.SSshuttle.cancelEvac( Task13.User );
				}
				this.state = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="messagelist" ) {
				this.currmsg = 0;
				this.state = GlobalVars.STATE_MESSAGELIST;
			} else if ( _d=="viewmessage" ) {
				this.state = GlobalVars.STATE_VIEWMESSAGE;

				if ( !Lang13.Bool( this.currmsg ) ) {
					
					if ( Lang13.Bool( href_list["message-num"] ) ) {
						this.currmsg = String13.ParseNumber( href_list["message-num"] );
					} else {
						this.state = GlobalVars.STATE_MESSAGELIST;
					}
				}
			} else if ( _d=="delmessage" ) {
				this.state = ( Lang13.Bool( this.currmsg ) ? GlobalVars.STATE_DELMESSAGE : GlobalVars.STATE_MESSAGELIST );
			} else if ( _d=="delmessage2" ) {
				
				if ( this.authenticated != 0 ) {
					
					if ( Lang13.Bool( this.currmsg ) ) {
						title = this.messagetitle[this.currmsg];
						text = this.messagetext[this.currmsg];
						this.messagetitle.Remove( title );
						this.messagetext.Remove( text );

						if ( this.currmsg == this.aicurrmsg ) {
							this.aicurrmsg = 0;
						}
						this.currmsg = 0;
					}
					this.state = GlobalVars.STATE_MESSAGELIST;
				} else {
					this.state = GlobalVars.STATE_VIEWMESSAGE;
				}
			} else if ( _d=="status" ) {
				this.state = GlobalVars.STATE_STATUSDISPLAY;
			} else if ( _d=="securitylevel" ) {
				this.tmp_alertlevel = String13.ParseNumber( href_list["newalertlevel"] );

				if ( !Lang13.Bool( this.tmp_alertlevel ) ) {
					this.tmp_alertlevel = 0;
				}
				this.state = GlobalVars.STATE_CONFIRM_LEVEL;
			} else if ( _d=="changeseclevel" ) {
				this.state = GlobalVars.STATE_ALERT_LEVEL;
			} else if ( _d=="emergencyaccess" ) {
				this.state = GlobalVars.STATE_TOGGLE_EMERGENCY;
			} else if ( _d=="enableemergency" ) {
				GlobalFuncs.make_maint_all_access();
				GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Task13.User ) + " enabled emergency maintenance access." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " enabled emergency maintenance access." );
				this.state = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="disableemergency" ) {
				GlobalFuncs.revoke_maint_all_access();
				GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Task13.User ) + " disabled emergency maintenance access." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " disabled emergency maintenance access." );
				this.state = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="setstat" ) {
				
				dynamic _b = href_list["statdisp"]; // Was a switch-case, sorry for the mess.
				if ( _b=="message" ) {
					this.post_status( "message", this.stat_msg1, this.stat_msg2 );
				} else if ( _b=="alert" ) {
					this.post_status( "alert", href_list["alert"] );
				} else {
					this.post_status( href_list["statdisp"] );
				}
			} else if ( _d=="setmsg1" ) {
				this.stat_msg1 = GlobalFuncs.reject_bad_text( Interface13.Input( "Line 1", "Enter Message Text", this.stat_msg1, null, null, InputType.Str | InputType.Null ), 40 );
				this.updateDialog();
			} else if ( _d=="setmsg2" ) {
				this.stat_msg2 = GlobalFuncs.reject_bad_text( Interface13.Input( "Line 2", "Enter Message Text", this.stat_msg2, null, null, InputType.Str | InputType.Null ), 40 );
				this.updateDialog();
			} else if ( _d=="MessageCentcomm" ) {
				
				if ( this.authenticated == 2 ) {
					
					if ( ((Obj_Item_Weapon_Circuitboard_Communications)CM).cooldownLeft() != 0 ) {
						Task13.User.WriteMsg( "Arrays recycling.  Please stand by." );
						return null;
					}
					input = GlobalFuncs.stripped_input( Task13.User, "Please choose a message to transmit to Centcom via quantum entanglement.  Please be aware that this process is very expensive, and abuse will lead to... termination.  Transmission does not guarantee a response.", "Send a message to Centcomm.", "" );

					if ( !Lang13.Bool( input ) || !Map13.FetchInView( this, 1 ).Contains( Task13.User ) ) {
						return null;
					}
					GlobalFuncs.Centcomm_announce( input, Task13.User );
					Task13.User.WriteMsg( "Message transmitted." );
					GlobalFuncs.log_say( "" + GlobalFuncs.key_name( Task13.User ) + " has made a Centcom announcement: " + input );
					CM.lastTimeUsed = Game13.time;
				}
			} else if ( _d=="MessageSyndicate" ) {
				
				if ( this.authenticated == 2 && Lang13.Bool( this.emagged ) ) {
					
					if ( ((Obj_Item_Weapon_Circuitboard_Communications)CM).cooldownLeft() != 0 ) {
						Task13.User.WriteMsg( "Arrays recycling.  Please stand by." );
						return null;
					}
					input2 = GlobalFuncs.stripped_input( Task13.User, "Please choose a message to transmit to [ABNORMAL ROUTING COORDINATES] via quantum entanglement.  Please be aware that this process is very expensive, and abuse will lead to... termination. Transmission does not guarantee a response.", "Send a message to /??????/.", "" );

					if ( !Lang13.Bool( input2 ) || !Map13.FetchInView( this, 1 ).Contains( Task13.User ) ) {
						return null;
					}
					GlobalFuncs.Syndicate_announce( input2, Task13.User );
					Task13.User.WriteMsg( "Message transmitted." );
					GlobalFuncs.log_say( "" + GlobalFuncs.key_name( Task13.User ) + " has made a Syndicate announcement: " + input2 );
					CM.lastTimeUsed = Game13.time;
				}
			} else if ( _d=="RestoreBackup" ) {
				Task13.User.WriteMsg( "Backup routing data restored!" );
				this.emagged = 0;
				this.updateDialog();
			} else if ( _d=="nukerequest" ) {
				
				if ( this.authenticated == 2 ) {
					
					if ( ((Obj_Item_Weapon_Circuitboard_Communications)CM).cooldownLeft() != 0 ) {
						Task13.User.WriteMsg( "Arrays recycling. Please stand by." );
						return null;
					}
					input3 = GlobalFuncs.stripped_input( Task13.User, "Please enter the reason for requesting the nuclear self-destruct codes. Misuse of the nuclear request system will not be tolerated under any circumstances.  Transmission does not guarantee a response.", "Self Destruct Code Request.", "" );

					if ( !Lang13.Bool( input3 ) || !Map13.FetchInView( this, 1 ).Contains( Task13.User ) ) {
						return null;
					}
					GlobalFuncs.Nuke_request( input3, Task13.User );
					Task13.User.WriteMsg( "Request sent." );
					GlobalFuncs.log_say( "" + GlobalFuncs.key_name( Task13.User ) + " has requested the nuclear codes from Centcomm" );
					GlobalFuncs.priority_announce( "The codes for the on-station nuclear self-destruct have been requested by " + Task13.User + ". Confirmation or denial of this request will be sent shortly.", "Nuclear Self Destruct Codes Requested", "sound/AI/commandreport.ogg" );
					CM.lastTimeUsed = Game13.time;
				}
			} else if ( _d=="ai-main" ) {
				this.aicurrmsg = 0;
				this.aistate = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="ai-callshuttle" ) {
				this.aistate = GlobalVars.STATE_CALLSHUTTLE;
			} else if ( _d=="ai-callshuttle2" ) {
				GlobalVars.SSshuttle.requestEvac( Task13.User, href_list["call"] );
				this.aistate = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="ai-messagelist" ) {
				this.aicurrmsg = 0;
				this.aistate = GlobalVars.STATE_MESSAGELIST;
			} else if ( _d=="ai-viewmessage" ) {
				this.aistate = GlobalVars.STATE_VIEWMESSAGE;

				if ( !Lang13.Bool( this.aicurrmsg ) ) {
					
					if ( Lang13.Bool( href_list["message-num"] ) ) {
						this.aicurrmsg = String13.ParseNumber( href_list["message-num"] );
					} else {
						this.aistate = GlobalVars.STATE_MESSAGELIST;
					}
				}
			} else if ( _d=="ai-delmessage" ) {
				this.aistate = ( Lang13.Bool( this.aicurrmsg ) ? GlobalVars.STATE_DELMESSAGE : GlobalVars.STATE_MESSAGELIST );
			} else if ( _d=="ai-delmessage2" ) {
				
				if ( Lang13.Bool( this.aicurrmsg ) ) {
					title2 = this.messagetitle[this.aicurrmsg];
					text2 = this.messagetext[this.aicurrmsg];
					this.messagetitle.Remove( title2 );
					this.messagetext.Remove( text2 );

					if ( this.currmsg == this.aicurrmsg ) {
						this.currmsg = 0;
					}
					this.aicurrmsg = 0;
				}
				this.aistate = GlobalVars.STATE_MESSAGELIST;
			} else if ( _d=="ai-status" ) {
				this.aistate = GlobalVars.STATE_STATUSDISPLAY;
			} else if ( _d=="ai-announce" ) {
				
				if ( !this.ai_message_cooldown ) {
					this.make_announcement( Task13.User, true );
				}
			} else if ( _d=="ai-securitylevel" ) {
				this.tmp_alertlevel = String13.ParseNumber( href_list["newalertlevel"] );

				if ( !Lang13.Bool( this.tmp_alertlevel ) ) {
					this.tmp_alertlevel = 0;
				}
				old_level2 = GlobalVars.security_level;

				if ( !Lang13.Bool( this.tmp_alertlevel ) ) {
					this.tmp_alertlevel = 0;
				}

				if ( ( this.tmp_alertlevel ??0) < 0 ) {
					this.tmp_alertlevel = 0;
				}

				if ( ( this.tmp_alertlevel ??0) > 1 ) {
					this.tmp_alertlevel = 1;
				}
				GlobalFuncs.set_security_level( this.tmp_alertlevel );

				if ( GlobalVars.security_level != old_level2 ) {
					GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Task13.User ) + " has changed the security level to " + GlobalFuncs.get_security_level() + "." );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changed the security level to " + GlobalFuncs.get_security_level() + "." );

					switch ((int)( GlobalVars.security_level )) {
						case 0:
							GlobalFuncs.feedback_inc( "alert_comms_green", 1 );
							break;
						case 1:
							GlobalFuncs.feedback_inc( "alert_comms_blue", 1 );
							break;
					}
				}
				this.tmp_alertlevel = 0;
				this.aistate = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="ai-changeseclevel" ) {
				this.aistate = GlobalVars.STATE_ALERT_LEVEL;
			} else if ( _d=="ai-emergencyaccess" ) {
				this.aistate = GlobalVars.STATE_TOGGLE_EMERGENCY;
			} else if ( _d=="ai-enableemergency" ) {
				GlobalFuncs.make_maint_all_access();
				GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Task13.User ) + " enabled emergency maintenance access." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " enabled emergency maintenance access." );
				this.aistate = GlobalVars.STATE_DEFAULT ?1:0;
			} else if ( _d=="ai-disableemergency" ) {
				GlobalFuncs.revoke_maint_all_access();
				GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Task13.User ) + " disabled emergency maintenance access." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " disabled emergency maintenance access." );
				this.aistate = GlobalVars.STATE_DEFAULT ?1:0;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: communications.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Lang13.Bool( base.process( (object)(seconds) ) ) ) {
				
				if ( this.state != GlobalVars.STATE_STATUSDISPLAY ) {
					this.updateDialog();
				}
			}
			return null;
		}

	}

}