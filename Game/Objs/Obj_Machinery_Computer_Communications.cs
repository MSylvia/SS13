// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Communications : Obj_Machinery_Computer {

		public bool prints_intercept = true;
		public int authenticated = 0;
		public ByTable messagetitle = new ByTable();
		public ByTable messagetext = new ByTable();
		public double? currmsg = 0;
		public double? aicurrmsg = 0;
		public int menu_state = 1;
		public int ai_menu_state = 1;
		public bool message_cooldown = false;
		public bool centcomm_message_cooldown = false;
		public double? tmp_alertlevel = 0;
		public string status_display_freq = "1435";
		public dynamic stat_msg1 = null;
		public dynamic stat_msg2 = null;
		public string display_type = "blank";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 19 });
			this.circuit = "/obj/item/weapon/circuitboard/communications";
			this.light_color = "#6496FA";
			this.icon_state = "comm";
		}

		public Obj_Machinery_Computer_Communications ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: communications.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Machinery_Computer_Communications commconsole = null;
			Obj_Item_Weapon_Circuitboard_Communications commboard = null;
			Mob_Living_Silicon_Ai shuttlecaller = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_Communications) )) {
				commconsole = _a;
				

				if ( commconsole.loc is Tile && commconsole != this ) {
					return base.Destroy( (object)(brokenup) );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Weapon_Circuitboard_Communications) )) {
				commboard = _b;
				

				if ( commboard.loc is Tile || commboard.loc is Obj_Item_Weapon_Storage ) {
					return base.Destroy( (object)(brokenup) );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
				shuttlecaller = _c;
				

				if ( !Lang13.Bool( shuttlecaller.stat ) && shuttlecaller.client != null && shuttlecaller.loc is Tile ) {
					return base.Destroy( (object)(brokenup) );
				}
			}

			if ( GlobalVars.ticker.mode.name == "revolution" || GlobalVars.ticker.mode.name == "AI malfunction" || GlobalVars.sent_strike_team ) {
				return base.Destroy( (object)(brokenup) );
			}
			GlobalVars.emergency_shuttle.incall( 2 );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "All the AIs, comm consoles and boards are destroyed. Shuttle called." ) );
			GlobalFuncs.message_admins( "All the AIs, comm consoles and boards are destroyed. Shuttle called." );
			GlobalFuncs.captain_announce( "The emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes." );
			GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/shuttlecalled.ogg" ) );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: communications.dm
		public void post_status( string command = null, dynamic data1 = null, dynamic data2 = null ) {
			dynamic frequency = null;
			Game_Data status_signal = null;

			frequency = GlobalVars.radio_controller.return_frequency( 1435 );

			if ( !Lang13.Bool( frequency ) ) {
				return;
			}
			status_signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)status_signal).source = this;
			((dynamic)status_signal).transmission_method = 1;
			((dynamic)status_signal).data["command"] = command;

			switch ((string)( command )) {
				case "message":
					((dynamic)status_signal).data["msg1"] = data1;
					((dynamic)status_signal).data["msg2"] = data2;
					GlobalFuncs.log_admin( "STATUS: " + this.fingerprintslast + " set status screen message with " + this + ": " + data1 + " " + data2 );
					break;
				case "alert":
					((dynamic)status_signal).data["picture_state"] = data1;
					break;
			}
			frequency.post_signal( this, status_signal );
			return;
		}

		// Function from file: communications.dm
		public int getMenuState( Mob user = null ) {
			
			if ( user is Mob_Living_Silicon ) {
				return this.ai_menu_state;
			} else {
				return this.menu_state;
			}
		}

		// Function from file: communications.dm
		public void setMenuState( Mob user = null, int value = 0 ) {
			
			if ( user is Mob_Living_Silicon ) {
				this.ai_menu_state = value;
			} else {
				this.menu_state = value;
			}
			return;
		}

		// Function from file: communications.dm
		public double? getCurrentMessage( dynamic user = null ) {
			
			if ( user is Mob_Living_Silicon ) {
				return this.aicurrmsg;
			} else {
				return this.currmsg;
			}
		}

		// Function from file: communications.dm
		public void setCurrentMessage( Mob user = null, double? value = null ) {
			
			if ( user is Mob_Living_Silicon ) {
				this.aicurrmsg = value;
			} else {
				this.currmsg = value;
			}
			return;
		}

		// Function from file: communications.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			dynamic initial_icon = null;

			base.update_icon( (object)(location), (object)(target) );
			initial_icon = Lang13.Initial( this, "icon_state" );
			this.icon_state = "" + ( this.emagged != 0 ? "" + initial_icon + "-emag" : "" + initial_icon );

			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "" + initial_icon + "b";
			} else if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "" + initial_icon + "0";
			}
			return null;
		}

		// Function from file: communications.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.emagged = 1;
				GlobalFuncs.to_chat( user, "Syndicate routing data uploaded!" );
				new Obj_Effect_Effect_Sparks( GlobalFuncs.get_turf( this ) );
				GlobalFuncs.playsound( this.loc, "sparks", 50, 1 );
				this.authenticated = 2;
				this.setMenuState( Task13.User, 1 );
				this.update_icon();
				return 1;
			}
			return 0;
		}

		// Function from file: communications.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable msg_data = null;
			int? i = null;
			ByTable cur_msg = null;
			ByTable shuttle = null;
			double timeleft = 0;

			
			if ( Lang13.Bool( user.stat ) ) {
				return;
			}
			data = new ByTable( 0 );
			data["is_ai"] = user is Mob_Living_Silicon;
			data["menu_state"] = ( Lang13.Bool( data["is_ai"] ) ? this.ai_menu_state : this.menu_state );
			data["emagged"] = this.emagged;
			data["authenticated"] = this.authenticated;
			data["screen"] = this.getMenuState( Task13.User );
			data["stat_display"] = new ByTable()
				.Set( "type", this.display_type )
				.Set( "line_1", ( Lang13.Bool( this.stat_msg1 ) ? this.stat_msg1 : ((dynamic)( "-----" )) ) )
				.Set( "line_2", ( Lang13.Bool( this.stat_msg2 ) ? this.stat_msg2 : ((dynamic)( "-----" )) ) )
				.Set( "presets", new ByTable(new object [] { 
					new ByTable().Set( "name", "blank" ).Set( "label", "Clear" ).Set( "desc", "Blank slate" ), 
					new ByTable().Set( "name", "shuttle" ).Set( "label", "Shuttle ETA" ).Set( "desc", "Display how much time is left." ), 
					new ByTable().Set( "name", "message" ).Set( "label", "Message" ).Set( "desc", "A custom message." )
				 }) )
				.Set( "alerts", new ByTable(new object [] { 
					new ByTable().Set( "alert", "default" ).Set( "label", "Nanotrasen" ).Set( "desc", "Oh god." ), 
					new ByTable().Set( "alert", "redalert" ).Set( "label", "Red Alert" ).Set( "desc", "Nothing to do with communists." ), 
					new ByTable().Set( "alert", "lockdown" ).Set( "label", "Lockdown" ).Set( "desc", "Let everyone know they're on lockdown." ), 
					new ByTable().Set( "alert", "biohazard" ).Set( "label", "Biohazard" ).Set( "desc", "Great for virus outbreaks and parties." )
				 }) )
			;
			data["security_level"] = GlobalVars.security_level;
			data["str_security_level"] = GlobalFuncs.get_security_level();
			data["levels"] = new ByTable(new object [] { new ByTable().Set( "id", 0 ).Set( "name", "Green" ), new ByTable().Set( "id", 1 ).Set( "name", "Blue" ) });
			data["ert_sent"] = GlobalVars.send_emergency_team;
			msg_data = new ByTable( 0 );
			i = null;
			i = 1;

			while (( i ??0) <= this.messagetext.len) {
				cur_msg = null;
				cur_msg = new ByTable( 0 );
				cur_msg["title"] = this.messagetitle[i];
				cur_msg["body"] = this.messagetext[i];
				cur_msg["id"] = i;
				msg_data.Add( new ByTable(new object [] { cur_msg }) );
				i++;
			}
			data["messages"] = msg_data;
			data["current_message"] = ( Lang13.Bool( data["is_ai"] ) ? this.aicurrmsg : this.currmsg );
			shuttle = null;
			shuttle = new ByTable( 0 );
			shuttle["on"] = GlobalVars.emergency_shuttle.online;

			if ( GlobalVars.emergency_shuttle.online && GlobalVars.emergency_shuttle.location == 0 ) {
				timeleft = GlobalVars.emergency_shuttle.timeleft();
				shuttle["eta"] = "" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 );
			}
			shuttle["pos"] = GlobalVars.emergency_shuttle.location;
			shuttle["can_recall"] = !( GlobalVars.recall_time_limit != 0 && Game13.time >= GlobalVars.recall_time_limit );
			data["shuttle"] = shuttle;
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "comm_console.tmpl", "Communications Console", 400, 500 );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			}
			return;
		}

		// Function from file: communications.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			Interface13.Stat( null, new ByTable(new object [] { 1, 2 }).Contains( this.z ) );

			if ( !Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				GlobalFuncs.to_chat( a, "<span class='danger'>Unable to establish a connection: </span>You're too far away from the station!" );
				return null;
			}
			this.ui_interact( a );
			return null;
		}

		// Function from file: communications.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: communications.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: communications.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob M = null;
			dynamic I = null;
			dynamic pda = null;
			Mob M2 = null;
			dynamic I2 = null;
			dynamic pda2 = null;
			int old_level = 0;
			dynamic input = null;
			dynamic T = null;
			Mob M3 = null;
			dynamic I3 = null;
			dynamic pda3 = null;
			string response = null;
			string response2 = null;
			dynamic justification = null;
			string response3 = null;
			string response4 = null;
			double? id = null;
			dynamic title = null;
			dynamic text = null;
			dynamic input2 = null;
			dynamic T2 = null;
			dynamic input3 = null;
			dynamic T3 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}
			Interface13.Stat( null, new ByTable(new object [] { 1, 2 }).Contains( this.z ) );

			if ( !Lang13.Bool( href_list["close"] ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Unable to establish a connection: </span>You're too far away from the station!" );
				return null;
			}
			Task13.User.set_machine( this );

			if ( !Lang13.Bool( href_list["operation"] ) ) {
				return null;
			}

			dynamic _c = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _c=="main" ) {
				this.setMenuState( Task13.User, 1 );
			} else if ( _c=="login" ) {
				M = Task13.User;
				I = M.get_active_hand();

				if ( I is Obj_Item_Device_Pda ) {
					pda = I;
					I = pda.id;
				}

				if ( I is Obj_Item_Weapon_Card_Emag ) {
					this.emag( Task13.User );
				}

				if ( Lang13.Bool( I ) && I is Obj_Item_Weapon_Card_Id ) {
					
					if ( this.check_access( I ) ) {
						this.authenticated = 1;
					}
					Interface13.Stat( null, I.access.Contains( 20 ) );

					if ( this.check_access( I ) ) {
						this.authenticated = 2;
					}
				}
			} else if ( _c=="logout" ) {
				this.authenticated = 0;
				this.setMenuState( Task13.User, 1 );
			} else if ( _c=="changeseclevel" ) {
				this.setMenuState( Task13.User, 4 );
			} else if ( _c=="newalertlevel" ) {
				
				if ( Task13.User is Mob_Living_Silicon ) {
					return null;
				}
				this.tmp_alertlevel = String13.ParseNumber( href_list["level"] );
				M2 = Task13.User;
				I2 = M2.get_active_hand();

				if ( I2 is Obj_Item_Device_Pda ) {
					pda2 = I2;
					I2 = pda2.id;
				}

				if ( Lang13.Bool( I2 ) && I2 is Obj_Item_Weapon_Card_Id ) {
					Interface13.Stat( I2.access, ((dynamic)( Lang13.Bool( I2.access ) || GlobalVars.access_heads != 0 )).Contains( GlobalVars.access_captain ) );
					Interface13.Stat( null, null.Contains( null ) );

					if ( false ) {
						old_level = GlobalVars.security_level;

						if ( !Lang13.Bool( this.tmp_alertlevel ) ) {
							this.tmp_alertlevel = 0;
						}

						if ( ( this.tmp_alertlevel ??0) < 0 ) {
							this.tmp_alertlevel = 0;
						}

						if ( ( this.tmp_alertlevel ??0) > 1 ) {
							this.tmp_alertlevel = 1;
						}
						GlobalFuncs.set_security_level( this.tmp_alertlevel );

						if ( GlobalVars.security_level != old_level ) {
							GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( Task13.User ) + " has changed the security level to " + GlobalFuncs.get_security_level() + "." ) ) );
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changed the security level to " + GlobalFuncs.get_security_level() + "." );

							switch ((int)( GlobalVars.security_level )) {
								case 0:
									GlobalFuncs.feedback_inc( "alert_comms_green", 1 );
									break;
								case 1:
									GlobalFuncs.feedback_inc( "alert_comms_blue", 1 );
									break;
							}
						}
						this.tmp_alertlevel = 0;
					} else {
						GlobalFuncs.to_chat( Task13.User, "You are not authorized to do this." );
						this.tmp_alertlevel = 0;
					}
					this.setMenuState( Task13.User, 1 );
				} else {
					GlobalFuncs.to_chat( Task13.User, "You need to swipe your ID." );
				}
			} else if ( _c=="announce" ) {
				
				if ( this.authenticated == 2 && !( Task13.User is Mob_Living_Silicon ) ) {
					
					if ( this.message_cooldown ) {
						return null;
					}
					input = GlobalFuncs.stripped_input( Task13.User, "Please choose a message to announce to the station crew.", "What?" );

					if ( !Lang13.Bool( input ) || !false ) {
						return null;
					}
					GlobalFuncs.captain_announce( input );
					T = GlobalFuncs.get_turf( Task13.User );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( Task13.User ) + " (@" + T.x + "," + T.y + "," + T.z + ") has made a captain announcement: " + input ) ) );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has made a captain announcement." );
					this.message_cooldown = true;
					Task13.Schedule( 600, (Task13.Closure)(() => {
						this.message_cooldown = false;
						return;
					}));
				}
			} else if ( _c=="emergency_screen" ) {
				M3 = Task13.User;
				I3 = M3.get_active_hand();

				if ( I3 is Obj_Item_Device_Pda ) {
					pda3 = I3;
					I3 = pda3.id;
				}

				if ( Lang13.Bool( I3 ) && I3 is Obj_Item_Weapon_Card_Id ) {
					Interface13.Stat( null, I3.access.Contains( GlobalVars.access_captain ) );

					if ( false ) {
						this.authenticated = 2;
					}
				}

				if ( this.authenticated != 2 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You do not have clearance to use this function.</span>" );
					return null;
				}
				this.setMenuState( Task13.User, 5 );
				return null;
			} else if ( _c=="request_emergency_team" ) {
				
				if ( this.menu_state != 5 ) {
					return null;
				}

				if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Warning: The evac shuttle has already arrived.</span>" );
					return null;
				}

				if ( !((UniversalState)GlobalVars.universe).OnShuttleCall( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this.name ).item().str( " cannot establish a bluespace connection.</span>" ).ToString() );
					return null;
				}

				if ( GlobalVars.sent_strike_team ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>PKI AUTH ERROR: SERVER REPORTS BLACKLISTED COMMUNICATION KEY PLEASE CONTACT SERVICE TECHNICIAN</span>" );
					return null;
				}

				if ( Game13.time < 6000 ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>The emergency response team is away on another mission, Please wait another " ).item( Num13.Floor( ( 6000 - Game13.time ) / 600 ) ).str( " minute" ).s().str( " before trying again.</span>" ).ToString() );
					return null;
				}

				if ( GlobalVars.emergency_shuttle.online ) {
					GlobalFuncs.to_chat( Task13.User, "The emergency shuttle is already on its way." );
					return null;
				}
				Interface13.Stat( null, new ByTable(new object [] { "red", "delta" }).Contains( GlobalFuncs.get_security_level() ) );

				if ( !GlobalVars.emergency_shuttle.online ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The station must be in an emergency to request a Response Team.</span>" );
					return null;
				}

				if ( this.authenticated != 2 || Task13.User is Mob_Living_Silicon ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this.name ).item().str( "'s screen flashes, \"Access Denied\".</span>" ).ToString() );
					return null;
				}

				if ( GlobalVars.send_emergency_team ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Central Command has already dispatched a Response Team to " + GlobalFuncs.station_name() + "</span>" );
					return null;
				}
				response = Interface13.Alert( Task13.User, "Are you sure you want to request a response team?", "ERT Request", "Yes", "No" );

				if ( response != "Yes" ) {
					return null;
				}
				GlobalFuncs.trigger_armed_response_team( true );
				this.setMenuState( Task13.User, 1 );
				return null;
			} else if ( _c=="callshuttle" ) {
				
				if ( this.authenticated != 0 ) {
					response2 = Interface13.Alert( "Are you sure you wish to call the shuttle?", "Confirm", "Yes", "No" );

					if ( response2 == "Yes" ) {
						justification = GlobalFuncs.stripped_input( Task13.User, "Please input a concise justification for the shuttle call. Note that failure to properly justify a shuttle call may lead to recall or termination", "Nanotrasen Anti-Comdom Systems" );

						if ( !Lang13.Bool( justification ) || !false ) {
							return null;
						}
						GlobalFuncs.call_shuttle_proc( Task13.User, justification );

						if ( GlobalVars.emergency_shuttle.online ) {
							this.post_status( "shuttle" );
						}
					}
				}
				this.setMenuState( Task13.User, 1 );
			} else if ( _c=="cancelshuttle" ) {
				
				if ( Task13.User is Mob_Living_Silicon ) {
					return null;
				}

				if ( this.authenticated != 0 ) {
					response3 = Interface13.Alert( "Are you sure you wish to recall the shuttle?", "Confirm", "Yes", "No" );

					if ( response3 == "Yes" ) {
						GlobalFuncs.recall_shuttle( Task13.User );

						if ( GlobalVars.emergency_shuttle.online ) {
							this.post_status( "shuttle" );
						}
					}
				}
				this.setMenuState( Task13.User, 1 );
			} else if ( _c=="messagelist" ) {
				this.currmsg = 0;

				if ( Lang13.Bool( href_list["msgid"] ) ) {
					this.setCurrentMessage( Task13.User, String13.ParseNumber( href_list["msgid"] ) );
				}
				this.setMenuState( Task13.User, 3 );
			} else if ( _c=="delmessage" ) {
				
				if ( Lang13.Bool( href_list["msgid"] ) ) {
					this.currmsg = String13.ParseNumber( href_list["msgid"] );
				}
				response4 = Interface13.Alert( "Are you sure you wish to delete this message?", "Confirm", "Yes", "No" );

				if ( response4 == "Yes" ) {
					
					if ( Lang13.Bool( this.currmsg ) ) {
						id = this.getCurrentMessage();
						title = this.messagetitle[id];
						text = this.messagetext[id];
						this.messagetitle.Remove( title );
						this.messagetext.Remove( text );

						if ( this.currmsg == id ) {
							this.currmsg = 0;
						}

						if ( this.aicurrmsg == id ) {
							this.aicurrmsg = 0;
						}
					}
				}
				this.setMenuState( Task13.User, 3 );
			} else if ( _c=="status" ) {
				this.setMenuState( Task13.User, 2 );
			} else if ( _c=="setstat" ) {
				this.display_type = href_list["statdisp"];

				switch ((string)( this.display_type )) {
					case "message":
						this.post_status( "message", this.stat_msg1, this.stat_msg2 );
						break;
					case "alert":
						this.post_status( "alert", href_list["alert"] );
						this.display_type = href_list["alert"];
						break;
					default:
						this.post_status( href_list["statdisp"] );
						break;
				}
				this.setMenuState( Task13.User, 2 );
			} else if ( _c=="setmsg1" ) {
				this.stat_msg1 = GlobalFuncs.reject_bad_text( GlobalFuncs.trim( String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Line 1", "Enter Message Text", this.stat_msg1, null, null, InputType.Str | InputType.Null ) ), 1, 40 ) ), 40 );
				this.setMenuState( Task13.User, 2 );
			} else if ( _c=="setmsg2" ) {
				this.stat_msg2 = GlobalFuncs.reject_bad_text( GlobalFuncs.trim( String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Line 2", "Enter Message Text", this.stat_msg2, null, null, InputType.Str | InputType.Null ) ), 1, 40 ) ), 40 );
				this.setMenuState( Task13.User, 2 );
			} else if ( _c=="MessageCentcomm" ) {
				
				if ( this.authenticated == 2 ) {
					
					if ( this.centcomm_message_cooldown ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Arrays recycling.  Please stand by for a few seconds.</span>" );
						return null;
					}
					input2 = GlobalFuncs.stripped_input( Task13.User, "Please choose a message to transmit to Centcomm via quantum entanglement.  Please be aware that this process is very expensive, and abuse will lead to... termination.  Transmission does not guarantee a response. There is a 30 second delay before you may send another message, be clear, full and concise.", "To abort, send an empty message.", "" );

					if ( !Lang13.Bool( input2 ) || !false ) {
						return null;
					}
					GlobalFuncs.Centcomm_announce( input2, Task13.User );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Message transmitted.</span>" );
					T2 = GlobalFuncs.get_turf( Task13.User );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( Task13.User ) + " (@" + T2.x + "," + T2.y + "," + T2.z + ") has sent a bluespace message to Centcomm: " + input2 ) ) );
					this.centcomm_message_cooldown = true;
					Task13.Schedule( 300, (Task13.Closure)(() => {
						this.centcomm_message_cooldown = false;
						return;
					}));
				}
				this.setMenuState( Task13.User, 1 );
			} else if ( _c=="MessageSyndicate" ) {
				
				if ( this.authenticated == 2 && this.emagged != 0 ) {
					
					if ( this.centcomm_message_cooldown ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Arrays recycling.  Please stand by for a few seconds.</span>" );
						return null;
					}
					input3 = GlobalFuncs.stripped_input( Task13.User, "Please choose a message to transmit to [ABNORMAL ROUTING CORDINATES] via quantum entanglement.  Please be aware that this process is very expensive, and abuse will lead to... termination. Transmission does not guarantee a response. There is a 30 second delay before you may send another message, be clear, full and concise.", "To abort, send an empty message.", "" );

					if ( !Lang13.Bool( input3 ) || !false ) {
						return null;
					}
					GlobalFuncs.Syndicate_announce( input3, Task13.User );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Message transmitted.</span>" );
					T3 = GlobalFuncs.get_turf( Task13.User );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( Task13.User ) + " (@" + T3.x + "," + T3.y + "," + T3.z + ") has sent a bluespace message to the syndicate: " + input3 ) ) );
					this.centcomm_message_cooldown = true;
					Task13.Schedule( 300, (Task13.Closure)(() => {
						this.centcomm_message_cooldown = false;
						return;
					}));
				}
				this.setMenuState( Task13.User, 1 );
			} else if ( _c=="RestoreBackup" ) {
				GlobalFuncs.to_chat( Task13.User, "Backup routing data restored!" );
				this.emagged = 0;
				this.setMenuState( Task13.User, 1 );
				this.update_icon();
			}
			return 1;
		}

	}

}