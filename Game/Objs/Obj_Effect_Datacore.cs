// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Datacore : Obj_Effect {

		public ByTable medical = new ByTable();
		public ByTable general = new ByTable();
		public ByTable security = new ByTable();
		public ByTable locked = new ByTable();

		public Obj_Effect_Datacore ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: obj.dm
		public ByTable get_manifest_json(  ) {
			ByTable heads = null;
			ByTable sec = null;
			ByTable eng = null;
			ByTable med = null;
			ByTable sci = null;
			ByTable civ = null;
			ByTable bot = null;
			ByTable misc = null;
			Data_Record t = null;
			string name = null;
			string rank = null;
			dynamic real_rank = null;
			dynamic isactive = null;
			bool department = false;
			bool depthead = false;

			
			if ( GlobalVars.PDA_Manifest.len != 0 ) {
				return GlobalVars.PDA_Manifest;
			}
			heads = new ByTable( 0 );
			sec = new ByTable( 0 );
			eng = new ByTable( 0 );
			med = new ByTable( 0 );
			sci = new ByTable( 0 );
			civ = new ByTable( 0 );
			bot = new ByTable( 0 );
			misc = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
				t = _a;
				
				name = GlobalFuncs.sanitize( t.fields["name"] );
				rank = GlobalFuncs.sanitize( t.fields["rank"] );
				real_rank = t.fields["real_rank"];
				isactive = t.fields["p_stat"];
				department = false;
				depthead = false;
				Interface13.Stat( null, GlobalVars.command_positions.Contains( real_rank ) );

				if ( t is Data_Record ) {
					heads[++heads.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
					department = true;
					depthead = true;

					if ( rank == "Captain" && heads.len != 1 ) {
						heads.Swap( 1, heads.len );
					}
				}
				Interface13.Stat( null, GlobalVars.security_positions.Contains( real_rank ) );

				if ( t is Data_Record ) {
					sec[++sec.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
					department = true;

					if ( depthead && sec.len != 1 ) {
						sec.Swap( 1, sec.len );
					}
				}
				Interface13.Stat( null, GlobalVars.engineering_positions.Contains( real_rank ) );

				if ( t is Data_Record ) {
					eng[++eng.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
					department = true;

					if ( depthead && eng.len != 1 ) {
						eng.Swap( 1, eng.len );
					}
				}
				Interface13.Stat( null, GlobalVars.medical_positions.Contains( real_rank ) );

				if ( t is Data_Record ) {
					med[++med.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
					department = true;

					if ( depthead && med.len != 1 ) {
						med.Swap( 1, med.len );
					}
				}
				Interface13.Stat( null, GlobalVars.science_positions.Contains( real_rank ) );

				if ( t is Data_Record ) {
					sci[++sci.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
					department = true;

					if ( depthead && sci.len != 1 ) {
						sci.Swap( 1, sci.len );
					}
				}
				Interface13.Stat( null, GlobalVars.civilian_positions.Contains( real_rank ) );

				if ( t is Data_Record ) {
					civ[++civ.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
					department = true;

					if ( depthead && civ.len != 1 ) {
						civ.Swap( 1, civ.len );
					}
				}
				Interface13.Stat( null, GlobalVars.nonhuman_positions.Contains( real_rank ) );

				if ( t is Data_Record ) {
					bot[++bot.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
					department = true;
				}

				if ( !department && !false ) {
					misc[++misc.len] = new ByTable().Set( "name", name ).Set( "rank", rank ).Set( "active", isactive );
				}
			}
			GlobalVars.PDA_Manifest = new ByTable().Set( "heads", heads ).Set( "sec", sec ).Set( "eng", eng ).Set( "med", med ).Set( "sci", sci ).Set( "civ", civ ).Set( "bot", bot ).Set( "misc", misc );
			return GlobalVars.PDA_Manifest;
		}

		// Function from file: obj.dm
		public string get_manifest( bool? monochrome = null, bool? OOC = null ) {
			ByTable heads = null;
			ByTable sec = null;
			ByTable eng = null;
			ByTable med = null;
			ByTable sci = null;
			ByTable civ = null;
			ByTable bot = null;
			ByTable misc = null;
			ByTable isactive = null;
			string dat = null;
			bool even = false;
			Data_Record t = null;
			dynamic name = null;
			dynamic rank = null;
			dynamic real_rank = null;
			bool active = false;
			bool SSD = false;
			dynamic M = null;
			bool department = false;

			heads = new ByTable();
			sec = new ByTable();
			eng = new ByTable();
			med = new ByTable();
			sci = new ByTable();
			civ = new ByTable();
			bot = new ByTable();
			misc = new ByTable();
			isactive = new ByTable();
			dat = "\n	<head><style>\n		.manifest {border-collapse:collapse;}\n		.manifest td, th {border:1px solid " + ( monochrome == true ? "black" : "#DEF; background-color:white; color:black" ) + "; padding:.25em}\n		.manifest th {height: 2em; " + ( monochrome == true ? "border-top-width: 3px" : "background-color: #48C; color:white" ) + "}\n		.manifest tr.head th { " + ( monochrome == true ? "border-top-width: 1px" : "background-color: #488;" ) + " }\n		.manifest td:first-child {text-align:right}\n		.manifest tr.alt td {" + ( monochrome == true ? "border-top-width: 2px" : "background-color: #DEF" ) + @"}
	</style></head>
	<table class=""manifest"" width='350px'>
	<tr class='head'><th>Name</th><th>Rank</th><th>Activity</th></tr>
	";
			even = false;

			foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
				t = _b;
				
				name = t.fields["name"];
				rank = t.fields["rank"];
				real_rank = t.fields["real_rank"];

				if ( OOC == true ) {
					active = false;
					SSD = false;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
						M = _a;
						

						if ( M.real_name == name ) {
							
							if ( !Lang13.Bool( M.client ) ) {
								SSD = true;
								break;
							}

							if ( Lang13.Bool( M.client ) && M.client.inactivity <= 6000 ) {
								active = true;
								break;
							}
						}
					}
					isactive[name] = ( SSD ? "SSD" : ( active ? "Active" : "Inactive" ) );
				} else {
					isactive[name] = t.fields["p_stat"];
				}
				department = false;
				Interface13.Stat( null, GlobalVars.command_positions.Contains( real_rank ) );

				if ( OOC == true ) {
					heads[name] = rank;
					department = true;
				}
				Interface13.Stat( null, GlobalVars.security_positions.Contains( real_rank ) );

				if ( OOC == true ) {
					sec[name] = rank;
					department = true;
				}
				Interface13.Stat( null, GlobalVars.engineering_positions.Contains( real_rank ) );

				if ( OOC == true ) {
					eng[name] = rank;
					department = true;
				}
				Interface13.Stat( null, GlobalVars.medical_positions.Contains( real_rank ) );

				if ( OOC == true ) {
					med[name] = rank;
					department = true;
				}
				Interface13.Stat( null, GlobalVars.science_positions.Contains( real_rank ) );

				if ( OOC == true ) {
					sci[name] = rank;
					department = true;
				}
				Interface13.Stat( null, GlobalVars.civilian_positions.Contains( real_rank ) );

				if ( OOC == true ) {
					civ[name] = rank;
					department = true;
				}
				Interface13.Stat( null, GlobalVars.nonhuman_positions.Contains( real_rank ) );

				if ( OOC == true ) {
					bot[name] = rank;
					department = true;
				}

				if ( !department && !false ) {
					misc[name] = rank;
				}
			}

			if ( heads.len > 0 ) {
				dat += "<tr><th colspan=3>Heads</th></tr>";

				foreach (dynamic _c in Lang13.Enumerate( heads )) {
					this.name = _c;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + heads[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}

			if ( sec.len > 0 ) {
				dat += "<tr><th colspan=3>Security</th></tr>";

				foreach (dynamic _d in Lang13.Enumerate( sec )) {
					this.name = _d;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + sec[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}

			if ( eng.len > 0 ) {
				dat += "<tr><th colspan=3>Engineering</th></tr>";

				foreach (dynamic _e in Lang13.Enumerate( eng )) {
					this.name = _e;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + eng[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}

			if ( med.len > 0 ) {
				dat += "<tr><th colspan=3>Medical</th></tr>";

				foreach (dynamic _f in Lang13.Enumerate( med )) {
					this.name = _f;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + med[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}

			if ( sci.len > 0 ) {
				dat += "<tr><th colspan=3>Science</th></tr>";

				foreach (dynamic _g in Lang13.Enumerate( sci )) {
					this.name = _g;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + sci[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}

			if ( civ.len > 0 ) {
				dat += "<tr><th colspan=3>Civilian</th></tr>";

				foreach (dynamic _h in Lang13.Enumerate( civ )) {
					this.name = _h;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + civ[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}

			if ( bot.len > 0 ) {
				dat += "<tr><th colspan=3>Silicon</th></tr>";

				foreach (dynamic _i in Lang13.Enumerate( bot )) {
					this.name = _i;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + bot[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}

			if ( misc.len > 0 ) {
				dat += "<tr><th colspan=3>Miscellaneous</th></tr>";

				foreach (dynamic _j in Lang13.Enumerate( misc )) {
					this.name = _j;
					
					dat += "<tr" + ( even ? " class='alt'" : "" ) + "><td>" + this.name + "</td><td>" + misc[this.name] + "</td><td>" + isactive[this.name] + "</td></tr>";
					even = !even;
				}
			}
			dat += "</table>";
			dat = GlobalFuncs.replacetext( dat, "\n", "" );
			dat = GlobalFuncs.replacetext( dat, "	", "" );
			return dat;
		}

		// Function from file: datacore.dm
		public void manifest_inject( dynamic H = null ) {
			dynamic assignment = null;
			dynamic id = null;
			Data_Record G = null;
			Data_Record M = null;
			Data_Record S = null;
			Data_Record L = null;

			
			if ( GlobalVars.PDA_Manifest.len != 0 ) {
				GlobalVars.PDA_Manifest.len = 0;
			}

			if ( Lang13.Bool( H.mind ) && H.mind.assigned_role != "MODE" ) {
				
				if ( Lang13.Bool( H.mind.role_alt_title ) ) {
					assignment = H.mind.role_alt_title;
				} else if ( Lang13.Bool( H.mind.assigned_role ) ) {
					assignment = H.mind.assigned_role;
				} else if ( Lang13.Bool( H.job ) ) {
					assignment = H.job;
				} else {
					assignment = "Unassigned";
				}
				id = GlobalFuncs.add_zero( GlobalFuncs.num2hex( Rand13.Int( 1, 16777215 ) ), 6 );
				G = new Data_Record();
				G.fields["id"] = id;
				G.fields["name"] = H.real_name;
				G.fields["real_rank"] = H.mind.assigned_role;
				G.fields["rank"] = assignment;
				G.fields["age"] = H.age;
				G.fields["fingerprint"] = Num13.Md5( H.dna.uni_identity );
				G.fields["p_stat"] = "Active";
				G.fields["m_stat"] = "Stable";
				G.fields["sex"] = H.gender;
				G.fields["species"] = ((Mob)H).get_species();
				G.fields["photo"] = GlobalFuncs.get_id_photo( H );

				if ( Lang13.Bool( H.gen_record ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( H, "Records" ) ) ) {
					G.fields["notes"] = H.gen_record;
				} else {
					G.fields["notes"] = "No notes found.";
				}
				this.general.Add( G );
				M = new Data_Record();
				M.fields["id"] = id;
				M.fields["name"] = H.real_name;
				M.fields["b_type"] = H.b_type;
				M.fields["b_dna"] = H.dna.unique_enzymes;
				M.fields["mi_dis"] = "None";
				M.fields["mi_dis_d"] = "No minor disabilities have been declared.";
				M.fields["ma_dis"] = "None";
				M.fields["ma_dis_d"] = "No major disabilities have been diagnosed.";
				M.fields["alg"] = "None";
				M.fields["alg_d"] = "No allergies have been detected in this patient.";
				M.fields["cdi"] = "None";
				M.fields["cdi_d"] = "No diseases have been diagnosed at the moment.";

				if ( Lang13.Bool( H.med_record ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( H, "Records" ) ) ) {
					M.fields["notes"] = H.med_record;
				} else {
					M.fields["notes"] = "No notes found.";
				}
				this.medical.Add( M );
				S = new Data_Record();
				S.fields["id"] = id;
				S.fields["name"] = H.real_name;
				S.fields["criminal"] = "None";
				S.fields["mi_crim"] = "None";
				S.fields["mi_crim_d"] = "No minor crime convictions.";
				S.fields["ma_crim"] = "None";
				S.fields["ma_crim_d"] = "No major crime convictions.";
				S.fields["notes"] = "No notes.";

				if ( Lang13.Bool( H.sec_record ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( H, "Records" ) ) ) {
					S.fields["notes"] = H.sec_record;
				} else {
					S.fields["notes"] = "No notes.";
				}
				this.security.Add( S );
				L = new Data_Record();
				L.fields["id"] = Num13.Md5( "" + H.real_name + H.mind.assigned_role );
				L.fields["name"] = H.real_name;
				L.fields["rank"] = H.mind.assigned_role;
				L.fields["age"] = H.age;
				L.fields["sex"] = H.gender;
				L.fields["b_type"] = H.b_type;
				L.fields["b_dna"] = H.dna.unique_enzymes;
				L.fields["enzymes"] = H.dna.SE;
				L.fields["identity"] = H.dna.UI;
				L.fields["image"] = GlobalFuncs.getFlatIcon( H );
				this.locked.Add( L );
			}
			return;
		}

		// Function from file: datacore.dm
		public void manifest_modify( dynamic name = null, dynamic assignment = null ) {
			dynamic real_title = null;
			Data_Record foundrecord = null;
			ByTable all_jobs = null;
			Job J = null;
			ByTable alttitles = null;

			
			if ( GlobalVars.PDA_Manifest.len != 0 ) {
				GlobalVars.PDA_Manifest.len = 0;
			}
			real_title = assignment;
			foundrecord = GlobalFuncs.find_record( "name", name, GlobalVars.data_core.general );
			all_jobs = GlobalFuncs.get_job_datums();

			foreach (dynamic _a in Lang13.Enumerate( all_jobs, typeof(Job) )) {
				J = _a;
				
				alttitles = GlobalFuncs.get_alternate_titles( J.title );

				if ( !( J != null ) ) {
					continue;
				}
				Interface13.Stat( null, alttitles.Contains( assignment ) );

				if ( !( J != null ) ) {
					real_title = J.title;
					break;
				}
			}

			if ( foundrecord != null ) {
				foundrecord.fields["rank"] = assignment;
				foundrecord.fields["real_rank"] = real_title;
			}
			return;
		}

		// Function from file: datacore.dm
		public void manifest( bool? nosleep = null ) {
			nosleep = nosleep ?? false;

			Mob_Living_Carbon_Human H = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( !( nosleep == true ) ) {
					Task13.Sleep( 40 );
				}

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
					H = _a;
					
					this.manifest_inject( H );
				}
				return;
				return;
			}));
			return;
		}

	}

}