// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Toy_Cardhand : Obj_Item_Toy {

		public ByTable currenthand = new ByTable();
		public dynamic parentdeck = null;
		public int max_hand_size = 5;
		public ContextClick_Cardhand hand_click = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/toy.dmi";
			this.icon_state = "handbase";
		}

		// Function from file: playing_cards.dm
		public Obj_Item_Toy_Cardhand ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.hand_click = new ContextClick_Cardhand( this );
			return;
		}

		// Function from file: playing_cards.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int? i = null;
			dynamic card = null;

			this.overlays.len = 0;
			i = null;
			i = this.currenthand.len;

			while (( i ??0) >= 1) {
				card = this.currenthand[i];

				if ( Lang13.Bool( card ) ) {
					card.layer = GlobalVars.FLOAT_LAYER;
					card.pixel_x = ( i ??0) * ( 9 - this.currenthand.len ) - 9;
					this.overlays.Add( card );
				}
				i--;
			}
			return null;
		}

		// Function from file: playing_cards.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( ((Mob)a).get_inactive_hand() == this ) {
				return this.hand_click.action( null, a, b );
			}
			return base.attack_hand( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: playing_cards.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			Obj_Item_Toy_Singlecard card = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.currenthand, typeof(Obj_Item_Toy_Singlecard) )) {
				card = _a;
				
				card.Flip();
				this.update_icon();
			}
			return base.attack_self( (object)(user), (object)(flag), emp );
		}

		// Function from file: playing_cards.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic H = null;
			bool compatible = false;
			int cardcount = 0;
			Obj_Item_Toy_Singlecard card = null;
			Obj_Item_Toy_Singlecard sourcecard = null;
			Obj_Item_Toy_Singlecard card2 = null;

			
			if ( a is Obj_Item_Toy_Singlecard ) {
				
				if ( !( Lang13.Bool( a.parentdeck ) || Lang13.Bool( this.parentdeck ) ) || a.parentdeck == this.parentdeck ) {
					
					if ( this.currenthand.len >= this.max_hand_size ) {
						GlobalFuncs.to_chat( b, "<span class = 'warning'>You can't add any more cards to this hand.</span>" );
						return null;
					}

					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.hand_click.action( a, b, c );
						((Ent_Static)b).visible_message( "<span class = 'notice'>" + b + " adds a card to their hand.</span>", "<span class = 'notice'>You add the " + a.cardname + " to your hand.</span>" );
						this.update_icon();
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class = 'warning'>You can't mix cards from other decks.</span>" );
				}
				return 1;
			} else if ( a is Obj_Item_Toy_Cardhand ) {
				H = a;
				compatible = true;
				cardcount = H.currenthand.len + this.currenthand.len;

				if ( cardcount > 5 ) {
					compatible = false;
				}

				foreach (dynamic _b in Lang13.Enumerate( H.currenthand, typeof(Obj_Item_Toy_Singlecard) )) {
					card = _b;
					

					foreach (dynamic _a in Lang13.Enumerate( this.currenthand, typeof(Obj_Item_Toy_Singlecard) )) {
						sourcecard = _a;
						

						if ( !( !( card.parentdeck != null || sourcecard.parentdeck != null ) || card.parentdeck == sourcecard.parentdeck ) ) {
							compatible = false;
						}
					}
				}

				if ( compatible ) {
					b.WriteMsg( new Txt( "<span class = 'notice'>You add " ).the( this ).item().str( " to your hand.</span>" ).ToString() );

					foreach (dynamic _c in Lang13.Enumerate( this.currenthand, typeof(Obj_Item_Toy_Singlecard) )) {
						card2 = _c;
						
						this.currenthand.Remove( card2 );
						H.currenthand.Add( card2 );
					}
					this.forceMove( H );
					H.update_icon();
					GlobalFuncs.qdel( this );
				} else if ( cardcount > 5 ) {
					b.WriteMsg( "<span class = 'notice'>You can't make a hand that large.</span>" );
				} else {
					b.WriteMsg( "<span class = 'warning'> You can't mix cards from other decks.</span>" );
				}
			}

			if ( a is Obj_Item_Toy_Cards ) {
				return ((Ent_Static)a).attackby( this, b );
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: playing_cards.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			ByTable name_list = null;
			Obj_Item_Toy_Singlecard card = null;

			base.examine( (object)(user), size );
			name_list = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.currenthand, typeof(Obj_Item_Toy_Singlecard) )) {
				card = _a;
				
				name_list.Add( card.name );
			}
			user.show_message( "It holds " + GlobalFuncs.english_list( name_list ), 1 );
			return null;
		}

	}

}