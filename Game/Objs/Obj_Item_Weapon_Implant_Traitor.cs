// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implant_Traitor : Obj_Item_Weapon_Implant {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "implant_evil";
		}

		public Obj_Item_Weapon_Implant_Traitor ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: implant.dm
		[VerbInfo( name: "implanted" )]
		[VerbArg( 1, InputType.Mob )]
		[VerbArg( 2, InputType.Mob )]
		public override bool f_implanted( dynamic M = null, dynamic user = null ) {
			dynamic implanters = null;
			string _ref = null;
			dynamic H = null;
			Objective_Protect p = null;
			Objective objective = null;

			_ref = new Txt().Ref( user.mind ).ToString();

			if ( !( M is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( !Lang13.Bool( M.mind ) ) {
				return false;
			}
			H = M;

			if ( M == user ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You feel quite stupid for doing that.</span>" );

				if ( user is Mob_Living ) {
					user.brainloss += 10;
				}
				return false;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Implant_Traitor), Lang13.Bool( H.contents ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Implant_Loyalty), H.contents ) ) ) ) ) {
				((Ent_Static)H).visible_message( "" + H + " seems to resist the implant!", "You feel a strange sensation in your head that quickly dissipates." );
				return false;
			} else if ( GlobalVars.ticker.mode.traitors.Contains( H.mind ) ) {
				((Ent_Static)H).visible_message( "" + H + " seems to resist the implant!", "You feel a familiar sensation in your head that quickly dissipates." );
				return false;
			}
			H.implanting = true;
			GlobalFuncs.to_chat( H, "<span class = 'notice'>You feel a surge of loyalty towards " + user.name + ".</span>" );

			if ( !GlobalVars.ticker.mode.implanter.Contains( user.mind ) ) {
				GlobalVars.ticker.mode.implanter[_ref] = new ByTable();
			}
			implanters = GlobalVars.ticker.mode.implanter[_ref];
			implanters.Add( H.mind );
			GlobalVars.ticker.mode.implanted.Add( H.mind );
			GlobalVars.ticker.mode.implanted[H.mind] = user.mind;
			GlobalVars.ticker.mode.implanter[_ref] = implanters;
			GlobalVars.ticker.mode.traitors.Add( H.mind );
			H.mind.special_role = "traitor";
			GlobalFuncs.to_chat( H, "<B><span class = 'warning'>You've been shown the Greytide by " + user.name + "!</B> You now must lay down your life to protect them and assist in their goals at any cost.</span>" );
			p = new Objective_Protect();
			p.owner = H.mind;
			p.target = user.mind;
			p.explanation_text = "Protect " + user.real_name + ", the " + ( user.mind.assigned_role == "MODE" ? user.mind.special_role : user.mind.assigned_role ) + ".";
			H.mind.objectives += p;

			foreach (dynamic _a in Lang13.Enumerate( H.mind.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( H, "<B>Objective #1</B>: " + objective.explanation_text );
			}
			((GameMode)GlobalVars.ticker.mode).update_traitor_icons_added( H.mind );
			((GameMode)GlobalVars.ticker.mode).update_traitor_icons_added( user.mind );
			GlobalFuncs.log_admin( "" + String13.CKey( user.key ) + " has mind-slaved " + String13.CKey( H.key ) + "." );
			return true;
		}

		// Function from file: implant.dm
		public override string get_data(  ) {
			string dat = null;

			dat = @"
<b>Implant Specifications:</b><BR>
<b>Name:</b> Greytide Mind-Slave Implant<BR>
<b>Life:</b> ??? <BR>
<b>Important Notes:</b> Any humanoid injected with this implant will become loyal to the injector and the greytide, unless of course the host is already loyal to someone else.<BR>
<HR>
<b>Implant Details:</b><BR>
<b>Function:</b> Contains a small pod of nanobots that manipulate the host's mental functions.<BR>
<b>Special Features:</b> Glory to the Greytide!<BR>
<b>Integrity:</b> Implant will last so long as the nanobots are inside the bloodstream.";
			return dat;
		}

	}

}