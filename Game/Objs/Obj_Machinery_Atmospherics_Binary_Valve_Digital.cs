// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Binary_Valve_Digital : Obj_Machinery_Atmospherics_Binary_Valve {

		public dynamic frequency = 0;
		public string id_tag = null;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 128;
			this.icon = "icons/obj/atmospherics/digital_valve.dmi";
		}

		public Obj_Machinery_Atmospherics_Binary_Valve_Digital ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: valve.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( this.frequency ) && a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You cannot unwrench this " + this + ", it's digitally connected to another device.</span>" );
				return 1;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: valve.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			bool state_changed = false;

			
			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag ) {
				return false;
			}
			state_changed = false;

			dynamic _a = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
			if ( _a=="valve_open" ) {
				
				if ( !this.open ) {
					this.f_open();
					state_changed = true;
				}
			} else if ( _a=="valve_close" ) {
				
				if ( this.open ) {
					this.close();
					state_changed = true;
				}
			} else if ( _a=="valve_set" ) {
				
				if ( Lang13.Bool( ((dynamic)signal).data["state"] ) ) {
					
					if ( !this.open ) {
						this.f_open();
						state_changed = true;
					}
				} else if ( this.open ) {
					this.close();
					state_changed = true;
				}
			} else if ( _a=="valve_toggle" ) {
				
				if ( this.open ) {
					this.close();
				} else {
					this.f_open();
				}
				state_changed = true;
			}

			if ( state_changed ) {
				this.investigation_log( "atmos", "was " + ( Lang13.Bool( this.state ) ? "opened (side)" : "closed (straight) " ) + " by a signal" );
			}
			return false;
		}

		// Function from file: valve.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string newid = null;
			dynamic newfreq = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( !( Task13.User is Mob_Living_Silicon ) ) {
				
				if ( !( Task13.User.get_active_hand() is Obj_Item_Device_Multitool ) ) {
					return null;
				}
			}
			Interface13.Stat( null, href_list.Contains( "set_id" ) );

			if ( !( Task13.User is Mob_Living_Silicon ) ) {
				newid = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( Task13.User, "Specify the new ID tag for this machine", this, this.id_tag, null, InputType.Str | InputType.Null ) ), 1, 1024 );

				if ( Lang13.Bool( newid ) ) {
					this.id_tag = newid;
					this.initialize();
				}
			}
			Interface13.Stat( null, href_list.Contains( "set_freq" ) );

			if ( !( Task13.User is Mob_Living_Silicon ) ) {
				newfreq = this.frequency;

				if ( href_list["set_freq"] != "-1" ) {
					newfreq = String13.ParseNumber( href_list["set_freq"] );
				} else {
					newfreq = Interface13.Input( Task13.User, "Specify a new frequency (GHz). Decimals assigned automatically.", this, this.frequency, null, InputType.Num | InputType.Null );
				}

				if ( Lang13.Bool( newfreq ) ) {
					
					if ( String13.FindIgnoreCase( String13.NumberToString( Convert.ToDouble( newfreq ) ), ".", 1, 0 ) != 0 ) {
						newfreq *= 10;
					}

					if ( Convert.ToDouble( newfreq ) < 10000 ) {
						this.frequency = newfreq;
						this.initialize();
					}
				}
			}
			this.update_multitool_menu( Task13.User );
			return null;
		}

		// Function from file: valve.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 1439 ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag", "set_id" ) ).str( "</a></li>\n	</ul>\n	" ).ToString();
		}

		// Function from file: valve.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );

			if ( Lang13.Bool( this.frequency ) ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: valve.dm
		public void set_frequency( dynamic new_frequency = null ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( Lang13.Bool( this.frequency ) ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

		// Function from file: valve.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !this.allowed( a ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>Access denied.</span>" );
				return null;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: valve.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

	}

}