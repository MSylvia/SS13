// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_OutletInjector : Obj_Machinery_Atmospherics_Unary {

		public double? on = 0;
		public bool injecting = false;
		public double? volume_rate = 50;
		public int max_rate = 50;
		public int frequency = 0;
		public dynamic id_tag = null;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.machine_flags = 128;
			this.icon = "icons/obj/atmospherics/outlet_injector.dmi";
			this.icon_state = "off";
		}

		public Obj_Machinery_Atmospherics_Unary_OutletInjector ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: outlet_injector.dm
		public override bool clone( dynamic O = null ) {
			this.id_tag = O.id_tag;
			this.set_frequency( Convert.ToInt32( O.frequency ) );
			return true;
		}

		// Function from file: outlet_injector.dm
		public override bool canClone( dynamic O = null ) {
			return O is Obj_Machinery_Atmospherics_Unary_OutletInjector;
		}

		// Function from file: outlet_injector.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			if ( !( ( this.stat & 2 ) != 0 ) && Lang13.Bool( this.on ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You cannot unwrench this " + this + ", turn it off first.</span>" );
				return 1;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: outlet_injector.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 1439 ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag", "set_id" ) ).str( "</a></li>\n	</ul>\n" ).ToString();
		}

		// Function from file: outlet_injector.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.update_multitool_menu( user );
			return null;
		}

		// Function from file: outlet_injector.dm
		public override void hide( bool? h = null ) {
			
			if ( this.node != null ) {
				
				if ( Lang13.Bool( this.on ) ) {
					this.icon_state = "" + ( h == true && this.loc is Tile_Simulated ? "h" : "" ) + "on";
				} else {
					this.icon_state = "" + ( h == true && this.loc is Tile_Simulated ? "h" : "" ) + "off";
				}
			} else {
				this.icon_state = "" + ( h == true && this.loc is Tile_Simulated ? "h" : "" ) + "exposed";
				this.on = 0;
			}
			return;
		}

		// Function from file: outlet_injector.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			double? number = null;

			
			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "injector" ) {
				return false;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "power" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "injector" ) {
				this.on = String13.ParseNumber( ((dynamic)signal).data["power"] );
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "power_toggle" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "injector" ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "inject" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "injector" ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.inject();
					return;
				}));
				return false;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "set_volume_rate" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "injector" ) {
				number = String13.ParseNumber( ((dynamic)signal).data["set_volume_rate"] );
				this.volume_rate = ( ( number ??0) <= 0 ? 0 : ( ( number ??0) >= ( this.air_contents.volume ??0) ? this.air_contents.volume : number ) );
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "status" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "injector" ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.broadcast_status();
					return;
				}));
				return false;
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.broadcast_status();
				return;
			}));
			this.update_icon();
			return false;
		}

		// Function from file: outlet_injector.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );
			this.set_frequency( this.frequency );
			return false;
		}

		// Function from file: outlet_injector.dm
		public bool broadcast_status(  ) {
			Game_Data signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data = new ByTable().Set( "tag", this.id_tag ).Set( "device", "AO" ).Set( "power", this.on ).Set( "volume_rate", this.volume_rate ).Set( "sigtype", "status" );
			this.radio_connection.post_signal( this, signal );
			return true;
		}

		// Function from file: outlet_injector.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency != 0 ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency );
			}
			return;
		}

		// Function from file: outlet_injector.dm
		public bool inject(  ) {
			dynamic transfer_moles = null;
			GasMixture removed = null;

			
			if ( Lang13.Bool( this.on ) || this.injecting ) {
				return false;
			}
			this.injecting = true;

			if ( ( this.air_contents.temperature ??0) > 0 ) {
				transfer_moles = this.air_contents.return_pressure() * this.volume_rate / ( ( this.air_contents.temperature ??0) * 8.314 );
				removed = this.air_contents.remove( transfer_moles );
				this.loc.assume_air( removed );

				if ( this.network != null ) {
					((dynamic)this.network).update = 1;
				}
			}
			Icon13.Flick( "inject", this );
			return false;
		}

		// Function from file: outlet_injector.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			dynamic transfer_moles = null;
			GasMixture removed = null;

			_default = base.process();
			this.injecting = false;

			if ( !Lang13.Bool( this.on ) || ( this.stat & 2 ) != 0 ) {
				return _default;
			}

			if ( ( this.air_contents.temperature ??0) > 0 ) {
				transfer_moles = this.air_contents.return_pressure() * this.volume_rate / ( ( this.air_contents.temperature ??0) * 8.314 );
				removed = this.air_contents.remove( transfer_moles );
				this.loc.assume_air( removed );

				if ( this.network != null ) {
					((dynamic)this.network).update = 1;
				}
			}
			return 1;
		}

		// Function from file: outlet_injector.dm
		public override dynamic power_change(  ) {
			int old_stat = 0;

			old_stat = this.stat;
			base.power_change();

			if ( old_stat != this.stat ) {
				this.update_icon();
			}
			return null;
		}

		// Function from file: outlet_injector.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			Ent_Static floor = null;

			
			if ( this.node != null ) {
				
				if ( Lang13.Bool( this.on ) && !( ( this.stat & 2 ) != 0 ) ) {
					this.icon_state = "hon";
				} else {
					this.icon_state = "hoff";
				}
			} else {
				this.icon_state = "exposed";
				this.on = 0;
			}
			base.update_icon( (object)(location), (object)(target) );

			if ( this.loc is Tile_Simulated_Floor && this.node != null ) {
				floor = this.loc;

				if ( Lang13.Bool( ((dynamic)floor).floor_tile ) && this.node.alpha == 128 ) {
					this.underlays.Cut();
				}
			}
			return null;
		}

	}

}