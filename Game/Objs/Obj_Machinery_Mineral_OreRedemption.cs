// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_OreRedemption : Obj_Machinery_Mineral {

		public dynamic input = null;
		public dynamic output = null;
		public int stack_amt = 50;
		public dynamic inserted_id = null;
		public double credits = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.req_one_access = new ByTable(new object [] { 54, 33, 25, 47, 56, 39 });
			this.starting_materials = new ByTable();
			this.icon = "icons/obj/machines/mining_machines.dmi";
			this.icon_state = "ore_redemption";
		}

		public Obj_Machinery_Mineral_OreRedemption ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: ore_redemption.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true ) {
				return false;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 2 ) != 0 ) {
				return !this.opacity;
			}
			return !this.density;
		}

		// Function from file: ore_redemption.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: ore_redemption.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			MoneyAccount acct = null;
			dynamic I = null;
			dynamic release = null;
			dynamic mat = null;
			dynamic desired = null;
			dynamic _out = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["choice"] ) ) {
				
				if ( this.inserted_id is Obj_Item_Weapon_Card_Id ) {
					
					if ( href_list["choice"] == "eject" ) {
						this.inserted_id.loc = this.loc;
						((Obj)this.inserted_id).verb_pickup();
						this.inserted_id = null;
					}

					if ( href_list["choice"] == "claim" ) {
						acct = this.get_card_account( this.inserted_id );

						if ( acct != null && acct.charge( -this.credits, null, "Claimed mining credits.", null, null, "Ore Redemption" ) ) {
							this.credits = 0;
							GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Credits transferred.</span>" );
						} else {
							GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Failed to claim credits.</span>" );
						}
					}
				} else if ( href_list["choice"] == "insert" ) {
					I = Task13.User.get_active_hand();

					if ( I is Obj_Item_Weapon_Card_Id ) {
						
						if ( Task13.User.drop_item( I, this ) ) {
							this.inserted_id = I;
						}
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>No valid ID.</span>" );
						return 1;
					}
				}
			} else if ( Lang13.Bool( href_list["release"] ) && this.inserted_id is Obj_Item_Weapon_Card_Id ) {
				
				if ( this.check_access( this.inserted_id ) ) {
					release = href_list["release"];
					mat = ((dynamic)this.materials).getMaterial( release );

					if ( !Lang13.Bool( mat ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to find material " + release + "!</span>" );
						return 1;
					}
					desired = Interface13.Input( "How much?", "How much " + mat.processed_name + " to eject?", ((dynamic)this.materials).storage[release], null, null, InputType.Num );

					if ( desired == 0 ) {
						return 1;
					}
					_out = Lang13.Call( mat.sheettype, this.output.loc );
					_out.redeemed = true;
					_out.amount = ( Convert.ToDouble( desired ) <= 0 ? ((dynamic)( 0 )) : ( Convert.ToDouble( desired ) >= Num13.MinInt( Convert.ToInt32( ((dynamic)this.materials).storage[release] ), Convert.ToInt32( _out.max_amount ) ) ? ((dynamic)( Num13.MinInt( Convert.ToInt32( ((dynamic)this.materials).storage[release] ), Convert.ToInt32( _out.max_amount ) ) )) : desired ) );
					((dynamic)this.materials).removeAmount( release, _out.amount );
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: ore_redemption.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic dat = null;
			dynamic O = null;
			dynamic mat = null;

			dat += "<b>Ore Redemption Machine</b><br><br>";
			dat += "This machine only accepts ore. Gibtonite and Slag are not accepted.<br><br>";
			dat += "Current unclaimed credits: $" + GlobalFuncs.num2septext( this.credits ) + "<br>";

			if ( this.inserted_id is Obj_Item_Weapon_Card_Id ) {
				dat += new Txt( "You have " ).item( ((Obj_Item_Weapon_Card_Id)this.inserted_id).GetBalance( true ) ).str( " credits in your bank account. <A href='?src=" ).Ref( this ).str( ";choice=eject'>Eject ID.</A><br>" ).ToString();
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choice=claim'>Claim points.</A><br>" ).ToString();
			} else {
				dat += new Txt( "No ID inserted.  <A href='?src=" ).Ref( this ).str( ";choice=insert'>Insert ID.</A><br>" ).ToString();
			}

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
				O = _a;
				

				if ( Convert.ToDouble( ((dynamic)this.materials).storage[O] ) > 0 ) {
					mat = ((dynamic)this.materials).getMaterial( O );
					dat += new Txt().item( GlobalFuncs.capitalize( mat.processed_name ) ).str( ": " ).item( ((dynamic)this.materials).storage[O] ).str( " <A href='?src=" ).Ref( this ).str( ";release=" ).item( mat.id ).str( "'>Release</A><br>" ).ToString();
				}
			}
			dat += "<br>This unit can hold stacks of " + this.stack_amt + " sheets of each mineral type.<br><br>";
			dat += "<HR><b>Mineral Value List:</b><BR>" + this.get_ore_values();
			Interface13.Browse( user, "" + dat, "window=console_stacking_machine" );
			((Mob)user).set_machine( this );
			GlobalFuncs.onclose( user, "console_stacking_machine" );
			return null;
		}

		// Function from file: ore_redemption.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: ore_redemption.dm
		public override dynamic process(  ) {
			dynamic T = null;
			int i = 0;
			dynamic O = null;
			dynamic B = null;
			dynamic mat_id = null;
			dynamic mat = null;

			T = GlobalFuncs.get_turf( this.input );

			if ( Lang13.Bool( T ) ) {
				
				if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Ore), T ) ) ) {
					i = 0;

					while (i < 10) {
						O = Lang13.FindIn( typeof(Obj_Item_Weapon_Ore), T );

						if ( O is Obj_Item_Weapon_Ore_Slag ) {
							
						} else if ( Lang13.Bool( O ) ) {
							this.process_sheet( O );
							GlobalVars.score["oremined"] += 1;
						} else {
							break;
						}
						i++;
					}
				} else {
					B = Lang13.FindIn( typeof(Obj_Structure_OreBox), T );

					if ( Lang13.Bool( B ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( B.materials.storage )) {
							mat_id = _a;
							
							mat = ((Materials)B.materials).getMaterial( mat_id );
							((dynamic)this.materials).addAmount( mat_id, B.materials.storage[mat_id] );
							GlobalVars.score["oremined"] += B.materials.storage[mat_id];
							this.credits += Convert.ToDouble( mat.value * B.materials.storage[mat_id] );
							((Materials)B.materials).removeAmount( mat_id, Convert.ToInt32( B.materials.storage[mat_id] ) );
						}
					}
				}
			}
			return null;
		}

		// Function from file: ore_redemption.dm
		public string get_ore_values(  ) {
			string dat = null;
			dynamic mat_id = null;
			dynamic mat = null;

			dat = "<table border='0' width='300'>";

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
				mat_id = _a;
				
				mat = ((Materials)this.materials).getMaterial( mat_id );
				dat += "<tr><td>" + GlobalFuncs.capitalize( mat.processed_name ) + "</td><td>" + mat.value + "</td></tr>";
			}
			dat += "</table>";
			return dat;
		}

		// Function from file: ore_redemption.dm
		public Game_Data SmeltMineral( dynamic O = null ) {
			dynamic mat = null;
			Game_Data M = null;

			
			if ( Lang13.Bool( O.material ) ) {
				mat = ((dynamic)this.materials).getMaterial( O.material );
				M = GlobalFuncs.getFromPool( mat.sheettype, this );
				((dynamic)M).redeemed = 1;
				return M;
			}
			return null;
		}

		// Function from file: ore_redemption.dm
		public void process_sheet( dynamic O = null ) {
			Game_Data processed_sheet = null;
			dynamic mat = null;

			processed_sheet = this.SmeltMineral( O );

			if ( processed_sheet != null ) {
				mat = ((dynamic)this.materials).getMaterial( O.material );
				((dynamic)this.materials).addAmount( O.material, ((dynamic)processed_sheet).amount );
				this.credits += Convert.ToDouble( mat.value * ((dynamic)processed_sheet).amount );
			}
			GlobalFuncs.returnToPool( O );
			return;
		}

		// Function from file: ore_redemption.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic I = null;

			
			if ( a is Obj_Item_Weapon_Card_Id ) {
				
				if ( this.inserted_id is Obj_Item_Weapon_Card_Id ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>There already is an ID in " ).the( this ).item().str( ".</span>" ).ToString() );
					return null;
				}
				I = Task13.User.get_active_hand();

				if ( I is Obj_Item_Weapon_Card_Id ) {
					
					if ( Task13.User.drop_item( I, this ) ) {
						this.inserted_id = I;
					}
				}
			}
			return null;
		}

		// Function from file: ore_redemption.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			dynamic dir = null;
			dynamic dir2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				this.input = Lang13.FindIn( typeof(Obj_Machinery_Mineral_Input), Map13.GetStep( this, Convert.ToInt32( dir ) ) );

				if ( Lang13.Bool( this.input ) ) {
					break;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir2 = _b;
				
				this.output = Lang13.FindIn( typeof(Obj_Machinery_Mineral_Output), Map13.GetStep( this, Convert.ToInt32( dir2 ) ) );

				if ( Lang13.Bool( this.output ) ) {
					break;
				}
			}
			return false;
		}

	}

}