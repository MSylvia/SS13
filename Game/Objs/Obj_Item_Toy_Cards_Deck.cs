// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Toy_Cards_Deck : Obj_Item_Toy_Cards {

		public int cooldown = 0;
		public Obj_Machinery_Computer_Holodeck holo = null;
		public dynamic cards = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 2;
			this.icon = "icons/obj/toy.dmi";
			this.icon_state = "deck_nanotrasen_full";
		}

		// Function from file: toys.dm
		public Obj_Item_Toy_Cards_Deck ( dynamic loc = null ) : base( (object)(loc) ) {
			int? i = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon_state = "deck_" + this.deckstyle + "_full";
			i = null;
			i = 2;

			while (( i ??0) <= 10) {
				this.cards += "" + i + " of Hearts";
				this.cards += "" + i + " of Spades";
				this.cards += "" + i + " of Clubs";
				this.cards += "" + i + " of Diamonds";
				i++;
			}
			this.cards += "King of Hearts";
			this.cards += "King of Spades";
			this.cards += "King of Clubs";
			this.cards += "King of Diamonds";
			this.cards += "Queen of Hearts";
			this.cards += "Queen of Spades";
			this.cards += "Queen of Clubs";
			this.cards += "Queen of Diamonds";
			this.cards += "Jack of Hearts";
			this.cards += "Jack of Spades";
			this.cards += "Jack of Clubs";
			this.cards += "Jack of Diamonds";
			this.cards += "Ace of Hearts";
			this.cards += "Ace of Spades";
			this.cards += "Ace of Clubs";
			this.cards += "Ace of Diamonds";
			return;
		}

		// Function from file: toys.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			Mob M = null;

			M = Task13.User;

			if ( !( Task13.User is Mob_Living_Carbon_Human ) || Task13.User.incapacitated() || Lang13.Bool( Task13.User.lying ) ) {
				return null;
			}

			if ( this.Adjacent( Task13.User ) ) {
				
				if ( over == M && this.loc != M ) {
					M.put_in_hands( this );
					Task13.User.WriteMsg( "<span class='notice'>You pick up the deck.</span>" );
				} else if ( over is Obj_Screen ) {
					
					dynamic _a = over.name; // Was a switch-case, sorry for the mess.
					if ( _a=="l_hand" ) {
						
						if ( !this.remove_item_from_storage( M ) ) {
							M.unEquip( this );
						}
						M.put_in_l_hand( this );
					} else {
						
						if ( !this.remove_item_from_storage( M ) ) {
							M.unEquip( this );
						}
						M.put_in_r_hand( this );
						;
					}
				}
			} else {
				Task13.User.WriteMsg( "<span class='warning'>You can't reach it from here!</span>" );
			}
			return null;
		}

		// Function from file: toys.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Toy_Cards_Singlecard ) {
				
				if ( A.parentdeck == this ) {
					
					if ( !((Mob)user).unEquip( A ) ) {
						user.WriteMsg( "<span class='warning'>The card is stuck to your hand, you can't add it to the deck!</span>" );
						return null;
					}
					this.cards += A.cardname;
					((Ent_Static)user).visible_message( "" + user + " adds a card to the bottom of the deck.", "<span class='notice'>You add the card to the bottom of the deck.</span>" );
					GlobalFuncs.qdel( A );
				} else {
					user.WriteMsg( "<span class='warning'>You can't mix cards from other decks!</span>" );
				}

				if ( this.cards.len > 26 ) {
					this.icon_state = "deck_" + this.deckstyle + "_full";
				} else if ( this.cards.len > 10 ) {
					this.icon_state = "deck_" + this.deckstyle + "_half";
				} else if ( this.cards.len > 1 ) {
					this.icon_state = "deck_" + this.deckstyle + "_low";
				}
			}
			return null;
		}

		// Function from file: toys.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.cooldown < Game13.time - 50 ) {
				this.cards = GlobalFuncs.shuffle( this.cards );
				GlobalFuncs.playsound( user, "sound/items/cardshuffle.ogg", 50, 1 );
				((Ent_Static)user).visible_message( "" + user + " shuffles the deck.", "<span class='notice'>You shuffle the deck.</span>" );
				this.cooldown = Game13.time;
			}
			return null;
		}

		// Function from file: toys.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic choice = null;
			Obj_Item_Toy_Cards_Singlecard H = null;
			Obj_Item_Toy_Cards_Deck O = null;

			
			if ( Lang13.Bool( a.lying ) ) {
				return null;
			}
			choice = null;

			if ( this.cards.len == 0 ) {
				this.icon_state = "deck_" + this.deckstyle + "_empty";
				a.WriteMsg( "<span class='warning'>There are no more cards to draw!</span>" );
				return null;
			}
			H = new Obj_Item_Toy_Cards_Singlecard( a.loc );

			if ( this.holo != null ) {
				this.holo.spawned += H;
			}
			choice = this.cards[1];
			H.cardname = choice;
			H.parentdeck = this;
			O = this;
			H.apply_card_vars( H, O );
			this.cards -= choice;
			H.pickup( a );
			((Mob)a).put_in_hands( H );
			((Ent_Static)a).visible_message( "" + a + " draws a card from the deck.", "<span class='notice'>You draw a card from the deck.</span>" );

			if ( this.cards.len > 26 ) {
				this.icon_state = "deck_" + this.deckstyle + "_full";
			} else if ( this.cards.len > 10 ) {
				this.icon_state = "deck_" + this.deckstyle + "_half";
			} else if ( this.cards.len > 1 ) {
				this.icon_state = "deck_" + this.deckstyle + "_low";
			}
			return null;
		}

	}

}