// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Telecomms_Relay : Obj_Machinery_Telecomms {

		public bool broadcasting = true;
		public bool receiving = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 30;
			this.machinetype = 8;
			this.heatgen = 0;
			this.circuitboard = "/obj/item/weapon/circuitboard/telecomms/relay";
			this.long_range_link = true;
			this.icon_state = "relay";
		}

		public Obj_Machinery_Telecomms_Relay ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: telecomunications.dm
		public override void receive_information( Game_Data signal = null, Obj_Machinery_Telecomms machine_from = null ) {
			
			if ( this.can_send( signal ) ) {
				((dynamic)signal).data["level"] |= this.listening_level;
			}
			return;
		}

		// Function from file: machine_interactions.dm
		public override void Options_Topic( string href = null, ByTable href_list = null ) {
			bool result = false;

			
			if ( Lang13.Bool( href_list["receive"] ) ) {
				this.receiving = !this.receiving;
				this.temp = "<font color = #666633>-% Receiving mode changed. %-</font color>";
			}

			if ( Lang13.Bool( href_list["broadcast"] ) ) {
				this.broadcasting = !this.broadcasting;
				this.temp = "<font color = #666633>-% Broadcasting mode changed. %-</font color>";
			}

			if ( Lang13.Bool( href_list["change_listening"] ) ) {
				result = this.toggle_level();

				if ( result ) {
					this.temp = "<font color = #666633>-% " + this + "'s signal has been successfully changed.</font color>";
				} else {
					this.temp = "<font color = #666633>-% " + this + " could not lock it's signal onto the station. Two broadcasters or receivers required.</font color>";
				}
			}
			return;
		}

		// Function from file: machine_interactions.dm
		public override string Options_Menu(  ) {
			string dat = null;

			dat = "";

			if ( this.z == 3 ) {
				dat += new Txt( "<br>Signal Locked to Station: <A href='?src=" ).Ref( this ).str( ";change_listening=1'>" ).item( ( this.listening_level == 1 ? "TRUE" : "FALSE" ) ).str( "</a>" ).ToString();
			}
			dat += new Txt( "<br>Broadcasting: <A href='?src=" ).Ref( this ).str( ";broadcast=1'>" ).item( ( this.broadcasting ? "YES" : "NO" ) ).str( "</a>\n		<br>Receiving:    <A href='?src=" ).Ref( this ).str( ";receive=1'>" ).item( ( this.receiving ? "YES" : "NO" ) ).str( "</a>" ).ToString();
			return dat;
		}

		// Function from file: telecomunications.dm
		public bool can_receive( Game_Data signal = null ) {
			
			if ( !this.can( signal ) ) {
				return false;
			}
			return this.receiving;
		}

		// Function from file: telecomunications.dm
		public bool can_send( Game_Data signal = null ) {
			
			if ( !this.can( signal ) ) {
				return false;
			}
			return this.broadcasting;
		}

		// Function from file: telecomunications.dm
		public bool can( Game_Data signal = null ) {
			
			if ( !this.on ) {
				return false;
			}

			if ( !this.is_freq_listening( signal ) ) {
				return false;
			}
			return true;
		}

		// Function from file: machine_interactions.dm
		public bool toggle_level(  ) {
			dynamic position = null;

			position = GlobalFuncs.get_turf( this );

			if ( this.listening_level == 1 ) {
				this.listening_level = Convert.ToInt32( position.z );
				return true;
			} else if ( Convert.ToInt32( position.z ) == 3 ) {
				this.listening_level = 1;
				return true;
			}
			return false;
		}

	}

}