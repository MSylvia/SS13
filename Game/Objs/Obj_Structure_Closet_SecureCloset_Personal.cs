// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_SecureCloset_Personal : Obj_Structure_Closet_SecureCloset {

		public dynamic registered_name = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 21 });
		}

		// Function from file: personal.dm
		public Obj_Structure_Closet_SecureCloset_Personal ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Rand13.PercentChance( 50 ) ) {
				new Obj_Item_Weapon_Storage_Backpack_Dufflebag( this );
			}

			if ( Rand13.PercentChance( 50 ) ) {
				new Obj_Item_Weapon_Storage_Backpack( this );
			} else {
				new Obj_Item_Weapon_Storage_Backpack_SatchelNorm( this );
			}
			new Obj_Item_Device_Radio_Headset( this );
			return;
		}

		// Function from file: tgstation.dme
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic I = null;

			
			if ( A is Obj_Item ) {
				I = ((Obj_Item)A).GetID();

				if ( I is Obj_Item_Weapon_Card_Id ) {
					
					if ( this.broken ) {
						user.WriteMsg( "<span class='danger'>It appears to be broken.</span>" );
						return null;
					}

					if ( !Lang13.Bool( I ) || !Lang13.Bool( I.registered_name ) ) {
						return null;
					}

					if ( this.allowed( user ) || !Lang13.Bool( this.registered_name ) || I is Obj_Item_Weapon_Card_Id && this.registered_name == I.registered_name ) {
						this.locked = !this.locked;
						this.update_icon();

						if ( !Lang13.Bool( this.registered_name ) ) {
							this.registered_name = I.registered_name;
							this.desc = "Owned by " + I.registered_name + ".";
						}
					} else {
						user.WriteMsg( "<span class='danger'>Access Denied.</span>" );
					}
				} else {
					base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

	}

}