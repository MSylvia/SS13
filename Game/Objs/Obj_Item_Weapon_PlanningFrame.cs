// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_PlanningFrame : Obj_Item_Weapon {

		public bool purge = false;
		public bool assuming_base = false;
		public ByTable modules = new ByTable();
		public dynamic laws = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 5;
			this.w_class = 2;
			this.throwforce = 5;
			this.throw_speed = 3;
			this.throw_range = 15;
			this.origin_tech = "programming=3";
			this.item_state = "electronic";
			this.starting_materials = new ByTable().Set( "$glass", 0.5333333611488342 );
			this.w_type = 5;
			this.icon = "icons/obj/module.dmi";
			this.icon_state = "planning frame";
		}

		// Function from file: planning_frame.dm
		public Obj_Item_Weapon_PlanningFrame ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.laws = Lang13.Call( GlobalVars.base_law_type );
			return;
		}

		// Function from file: planning_frame.dm
		public void clear_supplied_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_supplied_laws();
			return;
		}

		// Function from file: planning_frame.dm
		public void add_supplied_law( dynamic number = null, dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_supplied_law( number, law );
			return;
		}

		// Function from file: planning_frame.dm
		public void clear_ion_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_ion_laws();
			return;
		}

		// Function from file: planning_frame.dm
		public void add_ion_law( dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_ion_law( law );
			return;
		}

		// Function from file: planning_frame.dm
		public void clear_inherent_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_inherent_laws();
			return;
		}

		// Function from file: planning_frame.dm
		public void add_inherent_law( dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_inherent_law( law );
			return;
		}

		// Function from file: planning_frame.dm
		public void set_zeroth_law( string law = null, dynamic law_borg = null ) {
			this.laws_sanity_check();
			((AiLaws)this.laws).set_zeroth_law( law, law_borg );
			return;
		}

		// Function from file: planning_frame.dm
		public void laws_sanity_check(  ) {
			
			if ( !Lang13.Bool( this.laws ) ) {
				this.laws = Lang13.Call( GlobalVars.base_law_type );
			}
			return;
		}

		// Function from file: planning_frame.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			this.laws_sanity_check();

			if ( this.modules.len != 0 && this.modules[1] is Obj_Item_Weapon_AiModule_Purge ) {
				GlobalFuncs.to_chat( user, "<b>Purge module inserted!</b> - All laws will be cleared prior to adding the ones below." );
			}

			if ( !this.laws.inherent_cleared ) {
				GlobalFuncs.to_chat( user, "<b><u>Assuming that default laws are unchanged</u>, the laws currently inserted would read as:</b>" );
			} else {
				GlobalFuncs.to_chat( user, "<b>The laws currently inserted would read as:</b>" );
			}

			if ( this.modules.len == 0 ) {
				GlobalFuncs.to_chat( user, "<i>No modules have been inserted!</i>" );
				return null;
			}
			this.laws.show_laws( user );
			return null;
		}

		// Function from file: planning_frame.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			Obj_Item_Weapon_AiModule mod = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.modules, typeof(Obj_Item_Weapon_AiModule) )) {
				mod = _a;
				
				GlobalFuncs.qdel( mod );
			}
			this.modules.len = 0;
			GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You clear " ).the( this ).item().str( "'s memory buffers!</span>" ).ToString() );
			this.laws = Lang13.Call( GlobalVars.base_law_type );
			return null;
		}

		// Function from file: planning_frame.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic module = null;

			
			if ( a is Obj_Item_Weapon_AiModule ) {
				module = a;

				if ( !Lang13.Bool( module.validate( this.laws, this, b ) ) ) {
					return null;
				}

				if ( !((Obj_Item_Weapon_AiModule)module).upload( this.laws, this, b ) ) {
					return null;
				}
				this.modules.Add( module.copy() );
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You insert " ).the( module ).item().str( " into " ).the( this ).item().str( ", and the device reads the module's contents.</span>" ).ToString() );
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: planning_frame.dm
		[Verb]
		[VerbInfo( name: "Dry Run" )]
		public void dry_run(  ) {
			int? i = null;
			Obj_Item_Weapon_AiModule module = null;
			string notes = null;

			GlobalFuncs.to_chat( Task13.User, "You read through the list of modules to emulate, in their run order:" );
			i = null;
			i = 1;

			while (( i ??0) <= this.modules.len) {
				module = this.modules[i];
				notes = "<span class='notice'>Looks OK!</span>";

				if ( ( i ??0) > 1 && this.modules[i] is Obj_Item_Weapon_AiModule_Purge ) {
					notes = "<span class='danger'>This should be the first module!</span>";
				}

				if ( !module.validate( this.laws, this, Task13.User ) ) {
					notes = "<span class='danger'>A red light is blinking!</span>";
				}

				if ( ( module.modflags & 1 ) != 0 ) {
					notes = "<span class='danger'>Your heart skips a beat!</span>";
				}
				GlobalFuncs.to_chat( Task13.User, " " + ( ( i ??0) - 1 ) + ". " + module.name + " - " + notes );
				i++;
			}
			return;
		}

	}

}