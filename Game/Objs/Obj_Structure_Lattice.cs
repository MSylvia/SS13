// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Lattice : Obj_Structure {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.canSmoothWith = "/obj/structure/lattice=0&/obj/structure/catwalk=0&/turf=0";
			this.icon_state = "latticefull";
			this.layer = 2.3;
		}

		// Function from file: lattice.dm
		public Obj_Structure_Lattice ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon = "icons/obj/smoothlattice.dmi";
			this.relativewall();
			this.relativewall_neighbours();
			return;
		}

		// Function from file: lattice.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WeldingTool = null;
			dynamic T = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WeldingTool = a;

				if ( Lang13.Bool( WeldingTool.remove_fuel( 0, b ) ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>Slicing " + this + " joints...</span>" );
				}
				new Obj_Item_Stack_Rods( this.loc );
				GlobalFuncs.qdel( this );
			} else {
				T = GlobalFuncs.get_turf( this );
				((Ent_Static)T).attackby( a, b );
			}
			return null;
		}

		// Function from file: lattice.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					GlobalFuncs.qdel( this );
					break;
			}
			return false;
		}

		// Function from file: lattice.dm
		public override bool blob_act( dynamic severity = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: lattice.dm
		public override bool isSmoothableNeighbor( Ent_Static A = null ) {
			
			if ( A is Tile_Space ) {
				return false;
			}
			return base.isSmoothableNeighbor( A );
		}

		// Function from file: lattice.dm
		public override void relativewall(  ) {
			int junction = 0;

			junction = this.findSmoothingNeighbors();
			this.icon_state = "lattice" + junction;
			return;
		}

	}

}