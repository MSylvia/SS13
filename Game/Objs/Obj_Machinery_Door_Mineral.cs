// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Mineral : Obj_Machinery_Door {

		public double hardness = 3;
		public int oreAmount = 7;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.use_power = 0;
			this.prefix = "metal";
			this.explosion_block = 1;
			this.soundeffect = "sound/effects/stonedoor_openclose.ogg";
			this.icon = "icons/obj/doors/mineral.dmi";
		}

		// Function from file: mineral.dm
		public Obj_Machinery_Door_Mineral ( dynamic location = null ) : base( (object)(location) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon_state = "" + this.prefix + "door_closed";
			this.name = "" + this.prefix + " door";
			return;
		}

		// Function from file: mineral.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			severity = severity ?? 1;


			switch ((int?)(severity)) {
				case 1:
					this.Dismantle( true );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 20 ) ) {
						this.Dismantle( true );
					} else {
						this.hardness--;
						this.CheckHardness();
					}
					break;
				case 3:
					this.hardness -= 0.1;
					this.CheckHardness();
					break;
			}
			return false;
		}

		// Function from file: mineral.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic digTool = null;

			
			if ( a is Obj_Item_Weapon_Pickaxe ) {
				digTool = a;
				GlobalFuncs.to_chat( b, new Txt( "You start digging " ).the( this ).item().str( "." ).ToString() );

				if ( GlobalFuncs.do_after( b, ( digTool.digspeed ??0) * this.hardness ) && this != null ) {
					GlobalFuncs.to_chat( b, "You finished digging." );
					this.Dismantle(); return null;
				}
			} else if ( a is Obj_Item_Weapon_Card ) {
				GlobalFuncs.to_chat( b, new Txt( "You swipe your card at " ).the( this ).item().str( ", petulantly expecting a result." ).ToString() );
				return null;
			} else {
				this.hardness -= Convert.ToDouble( a.force / 100 );
				GlobalFuncs.to_chat( b, new Txt( "You hit " ).the( this ).item().str( " with your " ).item( a.name ).str( "!" ).ToString() );
				((Mob)b).delayNextAttack( 10 );
				this.CheckHardness();
			}
			return null;
		}

		// Function from file: mineral.dm
		public override bool close( bool? surpress_send = null ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), this.soundeffect, 100, 1 );
			return base.close( surpress_send );
		}

		// Function from file: mineral.dm
		public override bool open( int? surpress_send = null ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), this.soundeffect, 100, 1 );
			return base.open( surpress_send );
		}

		// Function from file: mineral.dm
		public virtual void Dismantle( bool? devastated = null ) {
			devastated = devastated ?? false;

			dynamic ore = null;
			Type P = null;

			
			if ( this.prefix == "metal" ) {
				ore = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
			} else {
				P = Lang13.FindClass( "/obj/item/stack/sheet/mineral/" + this.prefix );
				ore = Lang13.Call( P, GlobalFuncs.get_turf( this ) );
			}
			ore.amount = this.oreAmount;

			if ( devastated == true ) {
				ore.amount -= 2;
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: mineral.dm
		public virtual void CheckHardness(  ) {
			
			if ( this.hardness <= 0 ) {
				this.Dismantle( true );
			}
			return;
		}

		// Function from file: mineral.dm
		public bool SwitchState(  ) {
			
			if ( !this.density ) {
				return this.close();
			} else {
				return this.open();
			}
		}

		// Function from file: mineral.dm
		public virtual void TryToSwitchState( dynamic user = null ) {
			
			if ( this.operating != 0 ) {
				return;
			}

			if ( !((Mob)user).restrained() && Convert.ToDouble( user.size ) > 1 ) {
				this.add_fingerprint( user );
				this.SwitchState();
			}
			return;
		}

		// Function from file: mineral.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.TryToSwitchState( a ); return null;
		}

		// Function from file: mineral.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			this.TryToSwitchState( a ); return null;
		}

		// Function from file: mineral.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( user is Mob_Living_Silicon_Ai ) {
				return null;
			} else if ( user is Mob_Living_Silicon_Robot && Map13.GetDistance( user, this ) <= 1 ) {
				this.TryToSwitchState( user ); return null;
			}
			return null;
		}

		// Function from file: mineral.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			Ent_Static M = null;

			
			if ( this.operating != 0 ) {
				return false;
			}

			if ( AM is Obj_Mecha ) {
				this.open();
			} else if ( AM is Obj_Machinery_Bot ) {
				this.open();
			} else if ( AM is Mob ) {
				M = AM;

				if ( Convert.ToDouble( ((dynamic)M).last_airflow ) > Game13.time - Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowDelay) ) ) ) {
					return false;
				}

				if ( Game13.time - M.last_bumped <= 10 ) {
					return false;
				}
				M.last_bumped = Game13.time;
				this.TryToSwitchState( AM );
			}
			return false;
		}

	}

}