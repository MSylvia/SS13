// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Blob_Node : Obj_Effect_Blob {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 100;
			this.fire_resist = 2;
			this.custom_process = true;
			this.icon_state = "blob_node";
		}

		// Function from file: node.dm
		public Obj_Effect_Blob_Node ( dynamic loc = null, int? h = null ) : base( (object)(loc) ) {
			h = h ?? 100;

			GlobalVars.blob_nodes.Add( this );
			GlobalVars.processing_objects.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: node.dm
		public override bool run_action(  ) {
			return false;
		}

		// Function from file: node.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.health <= 0 ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/blobsplatspecial.ogg", 50, 1 );
				this.Delete();
				return null;
			}
			return null;
		}

		// Function from file: node.dm
		public override bool Life(  ) {
			int? i = null;

			
			if ( this.timestopped ) {
				return false;
			}
			i = null;
			i = 1;

			while (( i ??0) < 8) {
				this.Pulse( 5, i );
				i += i ??0;
			}
			this.health = Num13.MinInt( Convert.ToInt32( Lang13.Initial( this, "health" ) ), ((int)( this.health + 1 )) );
			return false;
		}

		// Function from file: node.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.blob_nodes.Remove( this );
			GlobalVars.processing_objects.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: node.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			return false;
		}

	}

}