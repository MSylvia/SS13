// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Blob_Node : Obj_Effect_Blob {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 200;
			this.maxhealth = 200;
			this.health_regen = 3;
			this.point_return = 25;
			this.atmosblock = true;
			this.icon_state = "blank_blob";
		}

		// Function from file: node.dm
		public Obj_Effect_Blob_Node ( dynamic loc = null, int? h = null ) : base( (object)(loc) ) {
			h = h ?? 100;

			GlobalVars.blob_nodes.Add( this );
			GlobalVars.SSobj.processing.Or( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: node.dm
		public override void Life(  ) {
			this.Pulse_Area( this.overmind, 10, 3, 2 );
			this.color = null;
			return;
		}

		// Function from file: node.dm
		public override dynamic Destroy(  ) {
			GlobalVars.blob_nodes.Remove( this );
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

		// Function from file: node.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			return false;
		}

		// Function from file: node.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			Image I = null;
			Image C = null;

			this.overlays.Cut();
			this.color = null;
			I = new Image( "icons/mob/blob.dmi", "blob" );

			if ( this.overmind != null ) {
				I.color = this.overmind.blob_reagent_datum.color;
			}
			this.overlays.Add( I );
			C = new Image( "icons/mob/blob.dmi", "blob_node_overlay" );
			this.overlays.Add( C );
			return false;
		}

	}

}