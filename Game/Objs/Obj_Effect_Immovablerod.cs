// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Immovablerod : Obj_Effect {

		public int z_original = 0;
		public Tile destination = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throwforce = 100;
			this.anchored = 1;
			this.icon = "icons/obj/objects.dmi";
			this.icon_state = "immrod";
		}

		// Function from file: immovable_rod.dm
		public Obj_Effect_Immovablerod ( dynamic start = null, Tile end = null ) : base( (object)(start) ) {
			this.loc = start;
			this.z_original = this.z;
			this.destination = end;

			if ( end != null && end.z == this.z_original ) {
				Map13.WalkTowardsSimple( this, this.destination, 1 );
			}
			return;
		}

		// Function from file: immovable_rod.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			Ent_Static H = null;

			
			if ( Rand13.PercentChance( 10 ) ) {
				GlobalFuncs.playsound( this, "sound/effects/bang.ogg", 50, 1 );
				this.audible_message( "CLANG" );
			}

			if ( Obstacle != null && Rand13.PercentChance( 25 ) ) {
				this.x = Obstacle.x;
				this.y = Obstacle.y;
			}

			if ( Obstacle is Tile || Obstacle is Obj ) {
				
				if ( Obstacle.density ) {
					Obstacle.ex_act( 2 );
				}
			} else if ( Obstacle is Mob ) {
				
				if ( Obstacle is Mob_Living_Carbon_Human ) {
					H = Obstacle;
					H.visible_message( "<span class='danger'>" + H.name + " is penetrated by an immovable rod!</span>", "<span class='userdanger'>The rod penetrates you!</span>", "<span class ='danger'>You hear a CLANG!</span>" );
					((dynamic)H).adjustBruteLoss( 160 );
				}

				if ( Obstacle.density || Rand13.PercentChance( 10 ) ) {
					Obstacle.ex_act( 2 );
				}
			}
			return null;
		}

		// Function from file: immovable_rod.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			return false;
		}

		// Function from file: immovable_rod.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			
			if ( this.z != this.z_original || this.loc == this.destination ) {
				GlobalFuncs.qdel( this );
			}
			return base.Move( (object)(NewLoc), Dir, step_x, step_y );
		}

	}

}