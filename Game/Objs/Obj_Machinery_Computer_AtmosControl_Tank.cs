// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_AtmosControl_Tank : Obj_Machinery_Computer_AtmosControl {

		public string input_tag = null;
		public string output_tag = null;
		public ByTable input_info = null;
		public ByTable output_info = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_AtmosControl_Tank);
		}

		public Obj_Machinery_Computer_AtmosControl_Tank ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: atmos_control.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			string id_tag = null;

			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}
			id_tag = signal.data["tag"];

			if ( this.input_tag == id_tag ) {
				this.input_info = signal.data;
			} else if ( this.output_tag == id_tag ) {
				this.output_info = signal.data;
			} else {
				base.receive_signal( signal, receive_method, (object)(receive_param) );
			}
			return false;
		}

		// Function from file: atmos_control.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			Signal signal = null;
			dynamic target = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) || !( this.radio_connection != null ) ) {
				return _default;
			}
			signal = new Signal();
			signal.transmission_method = 1;
			signal.source = this;
			signal.data = new ByTable().Set( "sigtype", "command" );

			switch ((string)( action )) {
				case "reconnect":
					this.reconnect( Task13.User );
					_default = GlobalVars.TRUE;
					break;
				case "input":
					signal.data.Add( new ByTable().Set( "tag", this.input_tag ).Set( "power_toggle", GlobalVars.TRUE ) );
					_default = GlobalVars.TRUE;
					break;
				case "output":
					signal.data.Add( new ByTable().Set( "tag", this.output_tag ).Set( "power_toggle", GlobalVars.TRUE ) );
					_default = GlobalVars.TRUE;
					break;
				case "pressure":
					target = Interface13.Input( "New target pressure:", this.name, this.output_info["internal"], null, null, InputType.Num | InputType.Null );

					if ( !( target == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
						target = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( target ), ((int)( 5066.25 )) ) );
						signal.data.Add( new ByTable().Set( "tag", this.output_tag ).Set( "set_internal_pressure", target ) );
						_default = GlobalVars.TRUE;
					}
					break;
			}
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			return _default;
		}

		// Function from file: atmos_control.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;

			data = base.ui_data( (object)(user) );
			data["tank"] = GlobalVars.TRUE;
			data["inputting"] = ( this.input_info != null ? Convert.ToInt32( this.input_info["power"] ) : GlobalVars.FALSE );
			data["inputRate"] = ( this.input_info != null ? Lang13.Bool( this.input_info["volume_rate"] ) : false );
			data["outputting"] = ( this.output_info != null ? Convert.ToInt32( this.output_info["power"] ) : GlobalVars.FALSE );
			data["outputPressure"] = ( this.output_info != null ? Lang13.Bool( this.output_info["internal"] ) : false );
			return data;
		}

		// Function from file: atmos_control.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "atmos_control", this.name, 500, 305, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: atmos_control.dm
		public void reconnect( Mob user = null ) {
			ByTable IO = null;
			RadioFrequency freq = null;
			dynamic devices = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump U = null;
			ByTable text = null;
			Obj_Machinery_Atmospherics_Components_Unary_OutletInjector U2 = null;
			ByTable text2 = null;
			dynamic S = null;
			dynamic new_devices = null;
			Obj_Machinery_AirSensor U3 = null;
			ByTable text3 = null;
			Obj_Machinery_Atmospherics_Components_Unary_OutletInjector U4 = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump U5 = null;

			IO = new ByTable();
			freq = GlobalVars.SSradio.return_frequency( 1441 );
			devices = freq.devices["_default"];

			foreach (dynamic _a in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
				U = _a;
				
				text = GlobalFuncs.splittext( U.id_tag, "_" );
				IO.Or( text[1] );
			}

			foreach (dynamic _b in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_OutletInjector) )) {
				U2 = _b;
				
				text2 = GlobalFuncs.splittext( U2.id, "_" );
				IO.Or( text2[1] );
			}

			if ( !( IO.len != 0 ) ) {
				user.WriteMsg( "<span class='alert'>No machinery detected.</span>" );
			}
			S = Interface13.Input( "Select the device set: ", "Selection", IO[1], null, IO, InputType.Any );

			if ( this != null ) {
				this.input_tag = "" + S + "_in";
				this.output_tag = "" + S + "_out";
				this.name = "" + String13.ToUpper( S ) + " Supply Control";
				new_devices = freq.devices["4"];

				foreach (dynamic _c in Lang13.Enumerate( new_devices, typeof(Obj_Machinery_AirSensor) )) {
					U3 = _c;
					
					text3 = GlobalFuncs.splittext( U3.id_tag, "_" );

					if ( text3[1] == S ) {
						this.sensors = new ByTable().Set( "" + S + "_sensor", "Tank" );
						break;
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_OutletInjector) )) {
				U4 = _d;
				
				U4.broadcast_status();
			}

			foreach (dynamic _e in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
				U5 = _e;
				
				U5.broadcast_status();
			}
			return;
		}

	}

}