// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_DockingPort_Mobile_Emergency : Obj_DockingPort_Mobile {

		public bool sound_played = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.id = "emergency";
			this.dwidth = 9;
			this.width = 22;
			this.height = 11;
			this.travelDir = -90;
			this.roundstart_move = "emergency_away";
			this.dir = 4;
		}

		// Function from file: emergency.dm
		public Obj_DockingPort_Mobile_Emergency ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSshuttle.emergency = this;
			return;
		}

		// Function from file: emergency.dm
		public void open_dock(  ) {
			Obj_Machinery_Door_Poddoor_Shuttledock D = null;
			Tile T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.airlocks, typeof(Obj_Machinery_Door_Poddoor_Shuttledock) )) {
				D = _a;
				
				T = Map13.GetStep( D, D.checkdir );

				if ( !( T is Tile_Space ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						D.open();
						return;
					}));
				}
			}
			return;
		}

		// Function from file: emergency.dm
		public override void check(  ) {
			double time_left = 0;
			Gang G = null;
			Zone_Shuttle_Escape E = null;
			dynamic A = null;
			dynamic M = null;
			Zone_Shuttle_Escape E2 = null;
			dynamic A2 = null;
			dynamic M2 = null;
			Zone_Shuttle_Escape E3 = null;

			
			if ( !( this.timer != 0 ) ) {
				return;
			}
			time_left = this.timeLeft( 1 );

			switch ((int)( this.mode )) {
				case 1:
					
					if ( time_left <= 0 ) {
						this.mode = 0;
						this.timer = 0;
					}
					break;
				case 2:
					
					if ( time_left <= 0 ) {
						
						if ( this.dock( GlobalVars.SSshuttle.getDock( "emergency_home" ) ) != 0 ) {
							this.setTimer( 20 );
							return;
						}
						this.mode = 3;
						this.timer = Game13.time;
						GlobalFuncs.send2irc( "Server", "The Emergency Shuttle has docked with the station." );
						GlobalFuncs.priority_announce( "The Emergency Shuttle has docked with the station. You have " + this.timeLeft( 600 ) + " minutes to board the Emergency Shuttle.", null, "sound/AI/shuttledock.ogg", "Priority" );

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.gangs, typeof(Gang) )) {
							G = _a;
							

							if ( Lang13.Bool( Lang13.IsNumber( G.dom_timer ) ) ) {
								G.dom_attempts = 0;
							} else {
								G.dom_attempts = Num13.MinInt( 1, G.dom_attempts );
							}
						}
					}
					break;
				case 3:
					
					if ( time_left <= 50 && !this.sound_played ) {
						this.sound_played = true;

						foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Zone_Shuttle_Escape) )) {
							E = _b;
							
							((dynamic)E).WriteMsg( "sound/effects/hyperspace_begin.ogg" );
						}
					}

					if ( time_left <= 0 && GlobalVars.SSshuttle.emergencyNoEscape ) {
						GlobalFuncs.priority_announce( "Hostile environment detected. Departure has been postponed indefinitely pending conflict resolution.", null, "sound/misc/notice1.ogg", "Priority" );
						this.sound_played = false;
						this.mode = 4;
					}

					if ( time_left <= 0 && !GlobalVars.SSshuttle.emergencyNoEscape ) {
						
						foreach (dynamic _c in Lang13.Enumerate( GlobalVars.SSshuttle.mobile )) {
							A = _c;
							
							M = A;

							if ( M.launch_status == 0 ) {
								M.launch_status = 1;
								((Obj_DockingPort_Mobile)M).enterTransit();
							}
						}

						foreach (dynamic _d in Lang13.Enumerate( typeof(Game13), typeof(Zone_Shuttle_Escape) )) {
							E2 = _d;
							
							((dynamic)E2).WriteMsg( "sound/effects/hyperspace_progress.ogg" );
						}
						this.enterTransit();
						this.mode = 5;
						this.launch_status = 1;
						this.timer = Game13.time;
						GlobalFuncs.priority_announce( "The Emergency Shuttle has left the station. Estimate " + this.timeLeft( 600 ) + " minutes until the shuttle docks at Central Command.", null, null, "Priority" );
					}
					break;
				case 5:
					
					if ( time_left <= 0 ) {
						
						foreach (dynamic _e in Lang13.Enumerate( GlobalVars.SSshuttle.mobile )) {
							A2 = _e;
							
							M2 = A2;

							if ( M2.launch_status == 1 ) {
								
								if ( M2 is Obj_DockingPort_Mobile_Pod ) {
									((Obj_DockingPort_Mobile)M2).dock( GlobalVars.SSshuttle.getDock( "" + M2.id + "_away" ) );
								} else {
									continue;
								}
							}
						}

						foreach (dynamic _f in Lang13.Enumerate( typeof(Game13), typeof(Zone_Shuttle_Escape) )) {
							E3 = _f;
							
							((dynamic)E3).WriteMsg( "sound/effects/hyperspace_end.ogg" );
						}
						this.dock( GlobalVars.SSshuttle.getDock( "emergency_away" ) );
						this.mode = 6;
						this.timer = 0;
						this.open_dock();
					}
					break;
			}
			return;
		}

		// Function from file: emergency.dm
		public override void cancel( dynamic signalOrigin = null ) {
			
			if ( this.mode != 2 ) {
				return;
			}
			this.timer = Game13.time - this.timeLeft( 1 );
			this.mode = 1;

			if ( Rand13.PercentChance( 70 ) ) {
				GlobalVars.SSshuttle.emergencyLastCallLoc = signalOrigin;
			} else {
				GlobalVars.SSshuttle.emergencyLastCallLoc = null;
			}
			GlobalFuncs.priority_announce( "The emergency shuttle has been recalled." + ( Lang13.Bool( GlobalVars.SSshuttle.emergencyLastCallLoc ) ? " Recall signal traced. Results can be viewed on any communications console." : "" ), null, "sound/AI/shuttlerecalled.ogg", "Priority" );
			return;
		}

		// Function from file: emergency.dm
		public override int request( Obj_DockingPort_Stationary S = null, double? coefficient = null, dynamic signalOrigin = null, string reason = null, bool? redAlert = null ) {
			coefficient = coefficient ?? 1;

			GlobalVars.SSshuttle.emergencyCallTime = Lang13.Initial( GlobalVars.SSshuttle, "emergencyCallTime" ) * coefficient;

			switch ((int)( this.mode )) {
				case 1:
					this.mode = 2;
					this.timer = Game13.time - this.timeLeft( 1 );
					break;
				case 0:
					this.mode = 2;
					this.timer = Game13.time;
					break;
				case 2:
					
					if ( Game13.time < this.timer ) {
						this.timer = Game13.time;
					}
					break;
				default:
					return 0;
					break;
			}

			if ( Rand13.PercentChance( 70 ) ) {
				GlobalVars.SSshuttle.emergencyLastCallLoc = signalOrigin;
			} else {
				GlobalVars.SSshuttle.emergencyLastCallLoc = null;
			}
			GlobalFuncs.priority_announce( "The emergency shuttle has been called. " + ( redAlert == true ? "Red Alert state confirmed: Dispatching priority shuttle. " : "" ) + "It will arrive in " + this.timeLeft( 600 ) + " minutes." + reason + ( Lang13.Bool( GlobalVars.SSshuttle.emergencyLastCallLoc ) ? "\n\nCall signal traced. Results can be viewed on any communications console." : "" ), null, "sound/AI/shuttlecalled.ogg", "Priority" );
			return 0;
		}

		// Function from file: emergency.dm
		public override double timeLeft( int? divisor = null ) {
			double dtime = 0;

			
			if ( ( divisor ??0) <= 0 ) {
				divisor = 10;
			}

			if ( !( this.timer != 0 ) ) {
				return Num13.Round( Convert.ToDouble( GlobalVars.SSshuttle.emergencyCallTime / divisor ), 1 );
			}
			dtime = Game13.time - this.timer;

			switch ((int)( this.mode )) {
				case 5:
					dtime = Num13.MaxInt( ((int)( GlobalVars.SSshuttle.emergencyEscapeTime - dtime )), 0 );
					break;
				case 3:
					dtime = Num13.MaxInt( ((int)( GlobalVars.SSshuttle.emergencyDockTime - dtime )), 0 );
					break;
				default:
					dtime = Num13.MaxInt( Convert.ToInt32( GlobalVars.SSshuttle.emergencyCallTime - dtime ), 0 );
					break;
			}
			return Num13.Round( dtime / ( divisor ??0), 1 );
		}

	}

}