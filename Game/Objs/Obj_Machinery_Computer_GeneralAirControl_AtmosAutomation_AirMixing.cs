// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation_AirMixing : Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation {

		public string n2_injector_tag = "air_n2_in";
		public string o2_injector_tag = "air_o2_in";
		public string output_tag = "air_out";
		public string sensor_tag = "air_sensor";
		public int temperature = 1000;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.frequency = 1443;
		}

		// Function from file: console.dm
		public Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation_AirMixing ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.buildO2();
			this.buildN2();
			this.buildOutletVent();
			return;
		}

		// Function from file: console.dm
		public void buildOutletVent(  ) {
			Automation_SetVentPumpPower vp_on = null;
			Automation_SetVentPumpPower vp_off = null;
			Automation_IfStatement if_on = null;
			Automation_And and_on = null;
			Automation_IfStatement if_off = null;
			Automation_Or or_off = null;

			vp_on = new Automation_SetVentPumpPower( this );
			vp_on.vent_pump = this.output_tag;
			vp_on.state = 1;
			vp_off = new Automation_SetVentPumpPower( this );
			vp_off.vent_pump = this.output_tag;
			vp_off.state = 0;
			if_on = new Automation_IfStatement( this );
			if_on.label = "Air Output";
			and_on = new Automation_And( this );
			and_on.children.Add( this.MakeCompare( this.MakeGetSensorData( this.sensor_tag, "pressure" ), this.MakeNumber( 5000 ), "Greater Than or Equal to" ) );
			and_on.children.Add( this.MakeCompare( this.MakeGetSensorData( this.sensor_tag, "oxygen" ), this.MakeNumber( 20 ), "Greater Than or Equal to" ) );
			if_on.condition = and_on;
			if_on.children_then.Add( vp_on );
			if_off = new Automation_IfStatement( this );
			or_off = new Automation_Or( this );
			or_off.children.Add( this.MakeCompare( this.MakeGetSensorData( this.sensor_tag, "pressure" ), this.MakeNumber( 100 ), "Less Than" ) );
			or_off.children.Add( this.MakeCompare( this.MakeGetSensorData( this.sensor_tag, "oxygen" ), this.MakeNumber( 20 ), "Less Than" ) );
			if_off.condition = or_off;
			if_off.children_then.Add( vp_off );
			if_on.children_else.Add( if_off );
			this.automations.Add( if_on );
			return;
		}

		// Function from file: console.dm
		public void buildN2(  ) {
			Automation_SetInjectorPower inj_on = null;
			Automation_SetInjectorPower inj_off = null;
			Automation_IfStatement if_on = null;
			Automation_IfStatement if_off = null;

			inj_on = new Automation_SetInjectorPower( this );
			inj_on.injector = this.n2_injector_tag;
			inj_on.state = 1;
			inj_off = new Automation_SetInjectorPower( this );
			inj_off.injector = this.n2_injector_tag;
			inj_off.state = 0;
			if_on = new Automation_IfStatement( this );
			if_on.label = "Nitrogen Injection";
			if_on.condition = this.MakeCompare( this.MakeGetSensorData( this.sensor_tag, "pressure" ), this.MakeNumber( 100 ), "Less Than" );
			if_on.children_then.Add( inj_on );
			if_off = new Automation_IfStatement( this );
			if_off.condition = this.MakeCompare( this.MakeGetSensorData( this.sensor_tag, "pressure" ), this.MakeNumber( 5000 ), "Greater Than" );
			if_off.children_then.Add( inj_off );
			if_on.children_else.Add( if_off );
			this.automations.Add( if_on );
			return;
		}

		// Function from file: console.dm
		public void buildO2(  ) {
			Automation_SetInjectorPower inj_on = null;
			Automation_SetInjectorPower inj_off = null;
			Automation_IfStatement i = null;

			inj_on = new Automation_SetInjectorPower( this );
			inj_on.injector = this.o2_injector_tag;
			inj_on.state = 1;
			inj_off = new Automation_SetInjectorPower( this );
			inj_off.injector = this.o2_injector_tag;
			inj_off.state = 0;
			i = new Automation_IfStatement( this );
			i.label = "Oxygen Injection";
			i.condition = this.MakeCompare( this.MakeGetSensorData( this.sensor_tag, "oxygen" ), this.MakeNumber( 20 ), "Less Than or Equal to" );
			i.children_then.Add( inj_on );
			i.children_else.Add( inj_off );
			this.automations.Add( i );
			return;
		}

	}

}