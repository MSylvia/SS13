// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Disposalpipe_Sortjunction : Obj_Structure_Disposalpipe {

		public double? sortType = 0;
		public int posdir = 0;
		public int negdir = 0;
		public int sortdir = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "pipe-j1s";
		}

		// Function from file: disposal-structures.dm
		public Obj_Structure_Disposalpipe_Sortjunction ( dynamic loc = null, Game_Data make_from = null ) : base( (object)(loc), make_from ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.updatedir();
			this.updatedesc();
			this.update();
			return;
		}

		// Function from file: disposal-structures.dm
		public override Obj_Structure_Disposalpipe transfer( Obj_Structure_Disposalholder H = null ) {
			double? nextdir = null;

			nextdir = this.nextdir( H.dir, H.destinationTag );
			return this.transfer_to_dir( H, nextdir );
		}

		// Function from file: disposal-structures.dm
		public override double? nextdir( int fromdir = 0, double? sortTag = null ) {
			
			if ( fromdir != this.sortdir ) {
				
				if ( this.sortType == sortTag ) {
					return this.sortdir;
				} else {
					return this.posdir;
				}
			} else {
				return this.posdir;
			}
			return null;
		}

		// Function from file: disposal-structures.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic O = null;
			string tag = null;

			
			if ( Lang13.Bool( base.attackby( (object)(A), (object)(user), _params, silent, replace_spent ) ) ) {
				return null;
			}

			if ( A is Obj_Item_Device_DestTagger ) {
				O = A;

				if ( ( O.currTag ??0) > 0 ) {
					this.sortType = O.currTag;
					GlobalFuncs.playsound( this.loc, "sound/machines/twobeep.ogg", 100, 1 );
					tag = String13.ToUpper( GlobalVars.TAGGERLOCATIONS[O.currTag] );
					user.WriteMsg( "<span class='warning'>Changed filter to " + tag + ".</span>" );
					this.updatedesc();
				}
			}
			return null;
		}

		// Function from file: disposal-structures.dm
		public void updatedir(  ) {
			this.posdir = this.dir;
			this.negdir = Num13.Rotate( this.posdir, 180 );

			if ( Convert.ToInt32( ((dynamic)this.stored).ptype ) == 9 ) {
				this.sortdir = Num13.Rotate( this.posdir, -90 );
			} else {
				this.icon_state = "pipe-j2s";
				this.sortdir = Num13.Rotate( this.posdir, 90 );
			}
			this.dpdir = this.sortdir | this.posdir | this.negdir;
			return;
		}

		// Function from file: disposal-structures.dm
		public void updatedesc(  ) {
			string tag = null;

			this.desc = "An underfloor disposal pipe with a package sorting mechanism.";

			if ( ( this.sortType ??0) > 0 ) {
				tag = String13.ToUpper( GlobalVars.TAGGERLOCATIONS[this.sortType] );
				this.desc += "\nIt's tagged with " + tag;
			}
			return;
		}

	}

}