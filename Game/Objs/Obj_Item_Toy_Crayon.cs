// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Toy_Crayon : Obj_Item_Toy {

		public dynamic paint_color = "#FF0000";
		public dynamic drawtype = "rune";
		public string text_buffer = "";
		public ByTable graffiti = new ByTable(new object [] { "amyjon", "face", "matt", "revolution", "engie", "guy", "end", "dwarf", "uboa", "body", "cyka", "arrow", "star", "poseur tag" });
		public ByTable letters = new ByTable(new object [] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" });
		public ByTable numerals = new ByTable(new object [] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" });
		public ByTable oriented = new ByTable(new object [] { "arrow", "body" });
		public int uses = 30;
		public int instant = 0;
		public string colourName = "red";
		public string dat = null;
		public ByTable validSurfaces = new ByTable(new object [] { typeof(Tile_Simulated_Floor) });
		public bool gang = false;
		public bool edible = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.attack_verb = new ByTable(new object [] { "attacked", "coloured" });
			this.icon = "icons/obj/crayons.dmi";
			this.icon_state = "crayonred";
		}

		// Function from file: toys.dm
		public Obj_Item_Toy_Crayon ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.name = "" + this.colourName + " crayon";
			this.drawtype = Rand13.Pick(new object [] { Rand13.PickFromTable( this.graffiti ), Rand13.PickFromTable( this.letters ), "rune" + Rand13.Int( 1, 6 ) });

			if ( GlobalVars.config != null ) {
				
				if ( GlobalVars.config.mutant_races ) {
					this.graffiti.Or( "antilizard" );
					this.graffiti.Or( "prolizard" );
				}
			}
			return;
		}

		// Function from file: toys.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( this.edible && M == user ) {
				user.WriteMsg( "You take a bite of the " + this.name + ". Delicious!" );
				user.nutrition += 5;

				if ( this.uses < 0 ) {
					return false;
				}
				this.uses = Num13.MaxInt( 0, this.uses - 5 );

				if ( !( this.uses != 0 ) ) {
					user.WriteMsg( "<span class='warning'>There is no more of " + this.name + " left!</span>" );
					GlobalFuncs.qdel( this );
				}
			} else {
				base.attack( (object)(M), (object)(user), def_zone );
			}
			return false;
		}

		// Function from file: toys.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			string temp = null;
			dynamic territory = null;
			dynamic gangID = null;
			double? graf_rot = null;
			Obj_Effect_Decal_Cleanable_Crayon old_marking = null;

			
			if ( !( proximity_flag == true ) || !this.check_allowed_items( target ) ) {
				return false;
			}

			if ( !( this.uses != 0 ) ) {
				user.WriteMsg( "<span class='warning'>There is no more of " + this.name + " left!</span>" );

				if ( !( this.instant != 0 ) ) {
					GlobalFuncs.qdel( this );
				}
				return false;
			}

			if ( target is Obj_Effect_Decal_Cleanable ) {
				target = target.loc;
			}

			if ( GlobalFuncs.is_type_in_list( target, this.validSurfaces ) ) {
				temp = "rune";

				if ( this.letters.Find( this.drawtype ) != 0 ) {
					temp = "letter";
				} else if ( this.graffiti.Find( this.drawtype ) != 0 ) {
					temp = "graffiti";
				} else if ( this.numerals.Find( this.drawtype ) != 0 ) {
					temp = "number";
				}

				if ( this.gang ) {
					gangID = user.mind.gang_datum;

					if ( Lang13.Bool( gangID ) ) {
						territory = GlobalFuncs.get_area( target );

						if ( Lang13.Bool( territory ) && Lang13.Bool( territory.z ) == true && territory.valid_territory ) {
							
							if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Crayon_Gang), target ) ) ) {
								
								if ( this.territory_claimed( territory, user ) ) {
									return false;
								}
							}

							if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Power_Apc), user.loc.contents | target.contents ) ) ) {
								user.WriteMsg( "<span class='warning'>You cannot tag here.</span>" );
								return false;
							}
						} else {
							user.WriteMsg( "<span class='warning'>" + territory + " is unsuitable for tagging.</span>" );
							return false;
						}
					}
				}

				if ( this.oriented.Find( this.drawtype ) != 0 ) {
					
					dynamic _a = user.dir; // Was a switch-case, sorry for the mess.
					if ( _a==4 ) {
						graf_rot = 90;
					} else if ( _a==2 ) {
						graf_rot = 180;
					} else if ( _a==8 ) {
						graf_rot = 270;
					} else {
						graf_rot = 0;
					}
				}
				user.WriteMsg( "<span class='notice'>You start " + ( this.instant != 0 ? "spraying" : "drawing" ) + " a " + temp + " on the " + target.name + "...</span>" );

				if ( this.instant != 0 ) {
					GlobalFuncs.playsound( user.loc, "sound/effects/spray.ogg", 5, 1, 5 );
				}

				if ( this.instant > 0 || GlobalFuncs.do_after( user, 50, null, target ) ) {
					
					if ( Lang13.Length( this.text_buffer ) != 0 ) {
						this.drawtype = String13.SubStr( this.text_buffer, 1, 2 );
						this.text_buffer = String13.SubStr( this.text_buffer, 2, 0 );
					}

					if ( Lang13.Bool( gangID ) ) {
						
						if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Crayon_Gang), target ) ) ) {
							
							if ( this.territory_claimed( territory, user ) ) {
								return false;
							}
						}

						foreach (dynamic _b in Lang13.Enumerate( target, typeof(Obj_Effect_Decal_Cleanable_Crayon) )) {
							old_marking = _b;
							
							GlobalFuncs.qdel( old_marking );
						}
						new Obj_Effect_Decal_Cleanable_Crayon_Gang( target, gangID, "graffiti", graf_rot );
						user.WriteMsg( "<span class='notice'>You tagged " + territory + " for your gang!</span>" );
					} else {
						new Obj_Effect_Decal_Cleanable_Crayon( target, this.paint_color, this.drawtype, temp, graf_rot );
					}
					user.WriteMsg( new Txt( "<span class='notice'>You finish " ).item( ( this.instant != 0 ? "spraying" : "drawing" ) ).str( " " ).the( temp ).item().str( ".</span>" ).ToString() );

					if ( this.instant < 0 ) {
						GlobalFuncs.playsound( user.loc, "sound/effects/spray.ogg", 5, 1, 5 );
					}

					if ( this.uses < 0 ) {
						return false;
					}
					this.uses = Num13.MaxInt( 0, this.uses - 1 );

					if ( !( this.uses != 0 ) ) {
						user.WriteMsg( "<span class='warning'>There is no more of " + this.name + " left!</span>" );

						if ( !( this.instant != 0 ) ) {
							GlobalFuncs.qdel( this );
						}
					}
				}
			}
			return false;
		}

		// Function from file: toys.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic temp = null;

			temp = "a";

			if ( Lang13.Bool( href_list["buffer"] ) ) {
				this.text_buffer = this.crayon_text_strip( GlobalFuncs.stripped_input( Task13.User, "Choose what to write.", "Scribbles", this.text_buffer ) );
			}

			if ( Lang13.Bool( href_list["type"] ) ) {
				
				dynamic _a = href_list["type"]; // Was a switch-case, sorry for the mess.
				if ( _a=="random_letter" ) {
					temp = Rand13.PickFromTable( this.letters );
				} else if ( _a=="letter" ) {
					temp = Interface13.Input( "Choose what to write.", "Scribbles", null, null, this.letters | this.numerals, InputType.Any );
				} else if ( _a=="random_rune" ) {
					temp = "rune" + Rand13.Int( 1, 6 );
				} else if ( _a=="random_graffiti" ) {
					temp = Rand13.PickFromTable( this.graffiti );
				} else {
					temp = href_list["type"];
				}
			}

			if ( Task13.User.restrained() || Task13.User.stat != 0 || Task13.User.get_active_hand() != this ) {
				return null;
			}
			this.drawtype = temp;
			this.update_window( Task13.User );
			return null;
		}

		// Function from file: toys.dm
		public bool territory_claimed( dynamic territory = null, dynamic user = null ) {
			dynamic occupying_gang = null;
			Gang G = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.gangs, typeof(Gang) )) {
				G = _a;
				

				if ( ( G.territory | G.territory_new ).Contains( territory.type ) ) {
					occupying_gang = G.name;
					break;
				}
			}

			if ( Lang13.Bool( occupying_gang ) ) {
				user.WriteMsg( "<span class='danger'>" + territory + " has already been tagged by the " + occupying_gang + " gang! You must get rid of or spray over the old tag first!</span>" );
				return true;
			}
			return false;
		}

		// Function from file: toys.dm
		public string crayon_text_strip( string text = null ) {
			ByTable _base = null;
			ByTable _out = null;
			dynamic a = null;

			_base = GlobalFuncs.char_split( String13.ToLower( text ) );
			_out = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( _base )) {
				a = _a;
				

				if ( ( this.letters | this.numerals ).Contains( a ) ) {
					_out.Add( a );
				}
			}
			return GlobalFuncs.jointext( _out, "" );
		}

		// Function from file: toys.dm
		public virtual void update_window( dynamic user = null ) {
			int? i = null;
			int c = 0;
			dynamic T = null;
			Browser popup = null;

			this.dat += "<center><h2>Currently selected: " + this.drawtype + "</h2><br>";
			this.dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";type=random_letter'>Random letter</a><a href='?src=" ).Ref( this ).str( ";type=letter'>Pick letter/number</a>" ).ToString();
			this.dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";buffer=1'>Write</a>" ).ToString();
			this.dat += "<hr>";
			this.dat += "<h3>Runes:</h3><br>";
			this.dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";type=random_rune'>Random rune</a>" ).ToString();
			i = null;
			i = 1;

			while (( i ??0) <= 6) {
				this.dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";type=rune" ).item( i ).str( "'>Rune" ).item( i ).str( "</a>" ).ToString();

				if ( !( ( ( i ??0) + 1 ) % 3 != 0 ) ) {
					this.dat += "<br>";
				}
				i++;
			}
			this.dat += "<hr>";
			this.graffiti.Find();
			this.dat += "<h3>Graffiti:</h3><br>";
			this.dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";type=random_graffiti'>Random graffiti</a>" ).ToString();
			c = 1;

			foreach (dynamic _a in Lang13.Enumerate( this.graffiti )) {
				T = _a;
				
				this.dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";type=" ).item( T ).str( "'>" ).item( T ).str( "</a>" ).ToString();

				if ( !( ( c + 1 ) % 3 != 0 ) ) {
					this.dat += "<br>";
				}
				c++;
			}
			this.dat += "<hr>";
			popup = new Browser( user, "crayon", this.name, 300, 500 );
			popup.set_content( this.dat );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			this.dat = "";
			return;
		}

		// Function from file: toys.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.update_window( user );
			return null;
		}

		// Function from file: toys.dm
		public override void initialize(  ) {
			
			if ( GlobalVars.config.mutant_races ) {
				this.graffiti.Or( "antilizard" );
				this.graffiti.Or( "prolizard" );
			}
			return;
		}

		// Function from file: toys.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " is jamming the " ).item( this.name ).str( " up " ).his_her_its_their().str( " nose and into " ).his_her_its_their().str( " brain. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
			return 9;
		}

	}

}