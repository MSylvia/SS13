// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Toy_Crayon : Obj_Item_Toy {

		public dynamic colour = "#A10808";
		public dynamic shadeColour = "#220000";
		public int uses = 30;
		public bool instant = false;
		public string colourName = "red";
		public Type style_type = typeof(WritingStyle_Crayon);
		public dynamic style = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.attack_verb = new ByTable(new object [] { "attacked", "coloured" });
			this.icon = "icons/obj/crayons.dmi";
			this.icon_state = "crayonred";
		}

		// Function from file: toys.dm
		public Obj_Item_Toy_Crayon ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.style = Lang13.Call( this.style_type );
			return;
		}

		// Function from file: toys.dm
		public override dynamic suicide_act( Mob_Living_Carbon_Human user = null ) {
			GlobalFuncs.to_chat( Map13.FetchViewers( null, user ), new Txt( "<span class = 'danger'><b>" ).item( user ).str( " is jamming the " ).item( this.name ).str( " up " ).his_her_its_their().str( " nose and into " ).his_her_its_their().str( " brain. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</b></span>" ).ToString() );
			return 9;
		}

		// Function from file: toys.dm
		public dynamic Format( Mob user = null, dynamic text = null, Obj_Item_Weapon_Paper P = null ) {
			return this.style.Format( text, this, user, P );
		}

		// Function from file: crayons.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			
			if ( M == user ) {
				GlobalFuncs.to_chat( user, "You take a bite of the crayon. Delicious!" );
				user.nutrition += 5;

				if ( this.uses != 0 ) {
					this.uses -= 5;

					if ( this.uses <= 0 ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You ate your crayon!</span>" );
						GlobalFuncs.qdel( this );
					}
				}
			} else {
				base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: crayons.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic drawtype = null;
			dynamic preference = null;
			ByTable graffitis = null;
			dynamic M = null;
			Obj_Effect_Decal_Cleanable_Crayon C = null;
			double angle = 0;

			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( A is Tile_Simulated ) {
				drawtype = Interface13.Input( "Choose what you'd like to draw.", "Crayon scribbles", null, null, new ByTable(new object [] { "graffiti", "rune", "letter" }), InputType.Any );

				dynamic _a = drawtype; // Was a switch-case, sorry for the mess.
				if ( _a=="letter" ) {
					drawtype = Interface13.Input( "Choose the letter.", "Crayon scribbles", null, null, new ByTable(new object [] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" }), InputType.Any );
					GlobalFuncs.to_chat( user, "You start drawing a letter on the " + A.name + "." );
				} else if ( _a=="graffiti" ) {
					graffitis = new ByTable().Set( "Random", "graffiti" ) + GlobalVars.all_graffitis;

					if ( user is Mob_Living_Carbon_Human ) {
						M = user;

						if ( ((Mob_Living)M).getBrainLoss() >= 60 ) {
							graffitis = new ByTable().Set( "Cancel", "cancel" ).Set( "Dick", "dick" + Rand13.Int( 1, 3 ) ).Set( "Valids", "valid" );
						}
					}
					preference = Interface13.Input( "Choose the graffiti.", "Crayon scribbles", null, null, graffitis, InputType.Null | InputType.Any );

					if ( !Lang13.Bool( preference ) ) {
						return false;
					}
					drawtype = graffitis[preference];
					GlobalFuncs.to_chat( user, "You start drawing graffiti on the " + A.name + "." );
				} else if ( _a=="rune" ) {
					GlobalFuncs.to_chat( user, "You start drawing a rune on the " + A.name + "." );
				}

				if ( !((Ent_Static)user).Adjacent( A ) ) {
					return false;
				}

				if ( A.density && !( GlobalVars.cardinal.Find( Map13.GetDistance( user, A ) ) != 0 ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You can't reach " ).the( A ).item().str( " from here!</span>" ).ToString() );
					return false;
				}

				if ( this.instant || GlobalFuncs.do_after( user, A, 50 ) ) {
					C = new Obj_Effect_Decal_Cleanable_Crayon( A, this.colour, this.shadeColour, drawtype );

					if ( A.density && C.loc != GlobalFuncs.get_turf( user ) ) {
						C.forceMove( GlobalFuncs.get_turf( user ) );
						angle = GlobalFuncs.dir2angle_t( Map13.GetDistance( C, A ) );
						C.pixel_x = ((int)( Math.Cos( angle ) * 32 ));
						C.pixel_y = ((int)( Math.Sin( angle ) * 32 ));
						C.on_wall = A;
					}
					GlobalFuncs.to_chat( user, "You finish drawing." );
					((Ent_Static)A).add_fingerprint( user );

					if ( this.uses != 0 ) {
						this.uses--;

						if ( !( this.uses != 0 ) ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>You used up your crayon!</span>" );
							GlobalFuncs.qdel( this );
						}
					}
				}
			}
			return false;
		}

	}

}