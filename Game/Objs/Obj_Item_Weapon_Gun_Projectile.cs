// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Projectile : Obj_Item_Weapon_Gun {

		public Type mag_type = typeof(Obj_Item_AmmoBox_Magazine_M10mm);
		public dynamic magazine = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "combat=2;materials=2";
			this.materials = new ByTable().Set( "$metal", 1000 );
			this.icon_state = "pistol";
		}

		// Function from file: projectile.dm
		public Obj_Item_Weapon_Gun_Projectile ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( this.magazine ) ) {
				this.magazine = Lang13.Call( this.mag_type, this );
			}
			this.chamber_round();
			this.update_icon();
			return;
		}

		// Function from file: projectile.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			
			if ( Lang13.Bool( this.chambered ) && Lang13.Bool( this.chambered.BB ) && !this.chambered.BB.nodamage ) {
				user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " is putting the barrel of the " ).item( this.name ).str( " in " ).his_her_its_their().str( " mouth.  It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				Task13.Sleep( 25 );

				if ( user.l_hand == this || user.r_hand == this ) {
					this.process_fire( user, user, false, null, "head" );
					user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " blows " ).his_her_its_their().str( " brains out with the " ).item( this.name ).str( "!</span>" ).ToString() );
					return 1;
				} else {
					user.visible_message( "<span class='suicide'>" + user + " panics and starts choking to death!</span>" );
					return 8;
				}
			} else {
				user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " is pretending to blow " ).his_her_its_their().str( " brains out with the " ).item( this.name ).str( "! It looks like " ).he_she_it_they().str( "'s trying to commit suicide!</b></span>" ).ToString() );
				GlobalFuncs.playsound( this.loc, "sound/weapons/empty.ogg", 50, 1, -1 );
				return 8;
			}
			return 0;
		}

		// Function from file: projectile.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( new Txt( "Has " ).item( this.get_ammo() ).str( " round" ).s().str( " remaining." ).ToString() );
			return 0;
		}

		// Function from file: projectile.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic AC = null;

			AC = this.chambered;

			if ( Lang13.Bool( this.magazine ) ) {
				this.magazine.loc = GlobalFuncs.get_turf( this.loc );
				((Mob)user).put_in_hands( this.magazine );
				this.magazine.update_icon();
				this.magazine = null;
				user.WriteMsg( new Txt( "<span class='notice'>You pull the magazine out of " ).the( this ).item().str( ".</span>" ).ToString() );
			} else if ( Lang13.Bool( this.chambered ) ) {
				AC.loc = GlobalFuncs.get_turf( this );
				((Ent_Static)AC).SpinAnimation( 10, 1 );
				this.chambered = null;
				user.WriteMsg( new Txt( "<span class='notice'>You unload the round from " ).the( this ).item().str( "'s chamber.</span>" ).ToString() );
			} else {
				user.WriteMsg( new Txt( "<span class='notice'>There's no magazine in " ).the( this ).item().str( ".</span>" ).ToString() );
			}
			this.update_icon();
			return null;
		}

		// Function from file: projectile.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic S = null;

			
			if ( this.loc == a ) {
				
				if ( Lang13.Bool( this.suppressed ) && this.can_unsuppress ) {
					S = this.suppressed;

					if ( a.l_hand != this && a.r_hand != this ) {
						base.attack_hand( (object)(a), b, c );
						return null;
					}
					a.WriteMsg( "<span class='notice'>You unscrew " + this.suppressed + " from " + this + ".</span>" );
					((Mob)a).put_in_hands( this.suppressed );
					this.fire_sound = S.oldsound;
					this.w_class = S.initial_w_class;
					this.suppressed = 0;
					this.update_icon();
					return null;
				}
			}
			base.attack_hand( (object)(a), b, c );
			return null;
		}

		// Function from file: projectile.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic AM = null;
			dynamic S = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_AmmoBox_Magazine ) {
				AM = A;

				if ( !Lang13.Bool( this.magazine ) && Lang13.Bool( ((dynamic)this.mag_type).IsInstanceOfType( AM ) ) ) {
					((Mob)user).remove_from_mob( AM );
					this.magazine = AM;
					this.magazine.loc = this;
					user.WriteMsg( new Txt( "<span class='notice'>You load a new magazine into " ).the( this ).item().str( ".</span>" ).ToString() );
					this.chamber_round();
					A.update_icon();
					this.update_icon();
					return 1;
				} else if ( Lang13.Bool( this.magazine ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>There's already a magazine in " ).the( this ).item().str( ".</span>" ).ToString() );
				}
			}

			if ( A is Obj_Item_Weapon_Suppressor ) {
				S = A;

				if ( this.can_suppress ) {
					
					if ( !Lang13.Bool( this.suppressed ) ) {
						
						if ( !((Mob)user).unEquip( A ) ) {
							return null;
						}
						user.WriteMsg( "<span class='notice'>You screw " + S + " onto " + this + ".</span>" );
						this.suppressed = A;
						S.oldsound = this.fire_sound;
						S.initial_w_class = this.w_class;
						this.fire_sound = "sound/weapons/Gunshot_silenced.ogg";
						this.w_class = 3;
						A.loc = this;
						this.update_icon();
						return null;
					} else {
						user.WriteMsg( "<span class='warning'>" + this + " already has a suppressor!</span>" );
						return null;
					}
				} else {
					user.WriteMsg( "<span class='warning'>You can't seem to figure out how to fit " + S + " on " + this + "!</span>" );
					return null;
				}
			}
			return 0;
		}

		// Function from file: projectile.dm
		public override dynamic can_shoot(  ) {
			
			if ( !Lang13.Bool( this.magazine ) || !( ((Obj_Item_AmmoBox_Magazine)this.magazine).ammo_count( false ) != 0 ) ) {
				return 0;
			}
			return 1;
		}

		// Function from file: shotgun.dm
		public void sawoff( dynamic user = null ) {
			
			if ( this.sawn_state == 1 ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " is already shortened!</span>" ).ToString() );
				return;
			}

			if ( this.sawn_state == -1 ) {
				return;
			}
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " begins to shorten " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You begin to shorten " ).the( this ).item().str( "...</span>" ).ToString() );

			if ( this.blow_up( user ) ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " goes off!</span>" ).ToString(), new Txt( "<span class='danger'>" ).The( this ).item().str( " goes off in your face!</span>" ).ToString() );
				return;
			}
			this.sawn_state = -1;

			if ( GlobalFuncs.do_after( user, 30, null, this ) ) {
				((Ent_Static)user).visible_message( new Txt().item( user ).str( " shortens " ).the( this ).item().str( "!" ).ToString(), new Txt( "<span class='notice'>You shorten " ).the( this ).item().str( ".</span>" ).ToString() );
				this.name = "sawn-off " + this.name;
				this.desc = this.sawn_desc;
				this.icon_state = "" + this.icon_state + "-sawn";
				this.w_class = 3;
				this.item_state = "gun";
				this.slot_flags &= 64511;
				this.slot_flags |= 512;
				this.sawn_state = 1;
				this.update_icon();
				return;
			} else {
				this.sawn_state = 0;
			}
			return;
		}

		// Function from file: shotgun.dm
		public virtual bool blow_up( dynamic user = null ) {
			bool _default = false;

			Obj_Item_AmmoCasing AC = null;

			_default = false;

			foreach (dynamic _a in Lang13.Enumerate( this.magazine.stored_ammo, typeof(Obj_Item_AmmoCasing) )) {
				AC = _a;
				

				if ( Lang13.Bool( AC.BB ) ) {
					this.process_fire( user, user, false );
					_default = true;
				}
			}
			return _default;
		}

		// Function from file: projectile.dm
		public virtual double get_ammo( bool? countchambered = null, bool? countempties = null ) {
			countchambered = countchambered ?? true;

			double boolets = 0;

			boolets = 0;

			if ( Lang13.Bool( this.chambered ) && countchambered == true ) {
				boolets++;
			}

			if ( Lang13.Bool( this.magazine ) ) {
				boolets += ((Obj_Item_AmmoBox_Magazine)this.magazine).ammo_count();
			}
			return boolets;
		}

		// Function from file: projectile.dm
		public virtual void chamber_round( bool? spin = null ) {
			
			if ( Lang13.Bool( this.chambered ) || !Lang13.Bool( this.magazine ) ) {
				return;
			} else if ( ((Obj_Item_AmmoBox_Magazine)this.magazine).ammo_count() != 0 ) {
				this.chambered = ((Obj_Item_AmmoBox)this.magazine).get_round();
				this.chambered.loc = this;
			}
			return;
		}

		// Function from file: projectile.dm
		public override bool process_chamber( bool? eject_casing = null, bool? empty_chamber = null ) {
			eject_casing = eject_casing ?? true;
			empty_chamber = empty_chamber ?? true;

			dynamic AC = null;

			AC = this.chambered;

			if ( AC == null || !( AC is Obj_Item_AmmoCasing ) ) {
				this.chamber_round();
				return false;
			}

			if ( eject_casing == true ) {
				AC.loc = GlobalFuncs.get_turf( this );
				((Ent_Static)AC).SpinAnimation( 10, 1 );
			}

			if ( empty_chamber == true ) {
				this.chambered = null;
			}
			this.chamber_round();
			return false;
		}

		// Function from file: projectile.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + ( Lang13.Bool( this.suppressed ) ? "-suppressed" : "" );
			return false;
		}

	}

}