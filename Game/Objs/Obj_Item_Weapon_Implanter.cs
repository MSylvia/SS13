// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implanter : Obj_Item_Weapon {

		public Obj_Item_Weapon_Implant imp = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "syringe_0";
			this.throw_speed = 3;
			this.throw_range = 5;
			this.w_class = 2;
			this.origin_tech = "materials=1;biotech=3;programming=2";
			this.materials = new ByTable().Set( "$metal", 600 ).Set( "$glass", 200 );
			this.icon_state = "implanter0";

			__RegisterInitialTracked("origin_tech");
		}

		// Function from file: implanter.dm
		public Obj_Item_Weapon_Implanter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 1, (Task13.Closure)(() => {
				this.update_icon();
				return;
			}));
			return;
		}

		// Function from file: implanter.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			string t = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Weapon_Pen ) {
				t = GlobalFuncs.stripped_input( user, "What would you like the label to be?", this.name, null );

				if ( ((Mob)user).get_active_hand() != A ) {
					return null;
				}

				if ( !( Map13.GetDistance( this, user ) <= 1 ) && this.loc != user ) {
					return null;
				}

				if ( Lang13.Bool( t ) ) {
					this.name = "implanter (" + t + ")";
				} else {
					this.name = "implanter";
				}
			}
			return null;
		}

		// Function from file: implanter.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic T = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( Lang13.Bool( user ) && this.imp != null ) {
				
				if ( M != user ) {
					((Ent_Static)M).visible_message( "<span class='warning'>" + user + " is attemping to implant " + M + ".</span>" );
				}
				T = GlobalFuncs.get_turf( M );

				if ( Lang13.Bool( T ) && ( M == user || GlobalFuncs.do_after( user, 50 ) ) ) {
					
					if ( Lang13.Bool( user ) && Lang13.Bool( M ) && GlobalFuncs.get_turf( M ) == T && this != null && this.imp != null ) {
						
						if ( this.imp.implant( M, user ) != 0 ) {
							
							if ( M == user ) {
								user.WriteMsg( "<span class='notice'>You implant yourself.</span>" );
							} else {
								((Ent_Static)M).visible_message( "" + user + " has implanted " + M + ".", "<span class='notice'>" + user + " implants you.</span>" );
							}
							this.imp = null;
							this.update_icon();
						}
					}
				}
			}
			return false;
		}

		// Function from file: implanter.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.imp != null ) {
				this.icon_state = "implanter1";
				this.origin_tech = this.imp.origin_tech;
			} else {
				this.icon_state = "implanter0";
				this.origin_tech = Lang13.Initial( this, "origin_tech" );
			}
			return false;
		}

	}

}