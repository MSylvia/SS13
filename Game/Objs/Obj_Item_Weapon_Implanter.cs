// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implanter : Obj_Item_Weapon {

		public Obj_Item_Weapon_Implant imp = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "syringe_0";
			this.throw_speed = 1;
			this.throw_range = 5;
			this.w_class = 2;
			this.icon_state = "implanter0";
		}

		public Obj_Item_Weapon_Implanter ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: implanter.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic O = null;
			dynamic T1 = null;
			dynamic O2 = null;
			dynamic H = null;
			dynamic affected = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return null;
			}

			if ( Lang13.Bool( user ) && this.imp != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, M ) )) {
					O = _a;
					
					O.show_message( "<span class='warning'>" + user + " is attempting to implant " + M + ".</span>", 1 );
				}
				T1 = GlobalFuncs.get_turf( M );

				if ( Lang13.Bool( T1 ) && ( M == user || GlobalFuncs.do_after( user, M, 50 ) ) ) {
					
					if ( Lang13.Bool( user ) && Lang13.Bool( M ) && GlobalFuncs.get_turf( M ) == T1 && this != null && this.imp != null ) {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, M ) )) {
							O2 = _b;
							
							O2.show_message( "<span class='warning'>" + M + " has been implanted by " + user + ".</span>", 1 );
						}
						M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'> Implanted with " + this.name + " (" + this.imp.name + ")  by " + user.name + " (" + user.ckey + ")</font>" );
						user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Used the " + this.name + " (" + this.imp.name + ") to implant " + M.name + " (" + M.ckey + ")</font>" );
						GlobalFuncs.msg_admin_attack( "" + user.name + " (" + user.ckey + ") implanted " + M.name + " (" + M.ckey + ") with " + this.name + " (INTENT: " + String13.ToUpper( user.a_intent ) + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + user.x + ";Y=" + user.y + ";Z=" + user.z + "'>JMP</a>)" );
						user.show_message( "<span class='warning'>You implanted the implant into " + M + ".</span>" );

						if ( this.imp.f_implanted( M, user ) ) {
							this.imp.loc = M;
							this.imp.imp_in = M;
							this.imp.implanted = true;

							if ( M is Mob_Living_Carbon_Human ) {
								H = M;
								affected = ((Mob_Living_Carbon_Human)H).get_organ( ((dynamic)user.zone_sel).selecting );
								affected.implants.Add( this.imp );
								this.imp.part = affected;
							}
						}
						M.implanting = false;
						this.imp = null;
						this.update();
					}
				}
			}
			return null;
		}

		// Function from file: implanter.dm
		public virtual void update(  ) {
			
			if ( this.imp != null ) {
				this.icon_state = "implanter1";
			} else {
				this.icon_state = "implanter0";
			}
			return;
		}

		// Function from file: implanter.dm
		[VerbInfo( name: "update" )]
		public void _internal_update(  ) {
			return;
		}

	}

}