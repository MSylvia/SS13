// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_RadLaser : Obj_Item_Device {

		public int intensity = 5;
		public int wavelength = 10;
		public bool used = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "analyzer";
			this.flags = 64;
			this.slot_flags = 512;
			this.throwforce = 3;
			this.w_class = 1;
			this.throw_speed = 3;
			this.materials = new ByTable().Set( "$metal", 400 );
			this.origin_tech = "magnets=3;biotech=5;syndicate=3";
			this.icon_state = "health";
		}

		public Obj_Item_Device_RadLaser ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: traitordevices.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? amount = null;
			double? amount2 = null;

			
			if ( !Task13.User.canUseTopic( this ) ) {
				return 1;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["radint"] ) ) {
				amount = String13.ParseNumber( href_list["radint"] );
				amount += this.intensity;
				this.intensity = Num13.MaxInt( 1, Num13.MinInt( 10, ((int)( amount ??0 )) ) );
			} else if ( Lang13.Bool( href_list["radwav"] ) ) {
				amount2 = String13.ParseNumber( href_list["radwav"] );
				amount2 += this.wavelength;
				this.wavelength = Num13.MaxInt( 1, Num13.MinInt( 120, ((int)( amount2 ??0 )) ) );
			}
			this.attack_self( Task13.User );
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: traitordevices.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			int cooldown = 0;
			string dat = null;
			Browser popup = null;

			((Mob)user).set_machine( this );
			cooldown = Num13.Floor( Num13.MaxInt( 10, ((int)( this.intensity * 8 - this.wavelength / 2 + this.intensity * 2 )) ) );
			dat = new Txt( "\n	Radiation Intensity: <A href='?src=" ).Ref( this ).str( ";radint=-5'>-</A><A href='?src=" ).Ref( this ).str( ";radint=-1'>-</A> " ).item( this.intensity ).str( " <A href='?src=" ).Ref( this ).str( ";radint=1'>+</A><A href='?src=" ).Ref( this ).str( ";radint=5'>+</A><BR>\n	Radiation Wavelength: <A href='?src=" ).Ref( this ).str( ";radwav=-5'>-</A><A href='?src=" ).Ref( this ).str( ";radwav=-1'>-</A> " ).item( this.wavelength + this.intensity * 4 ).str( " <A href='?src=" ).Ref( this ).str( ";radwav=1'>+</A><A href='?src=" ).Ref( this ).str( ";radwav=5'>+</A><BR>\n	Laser Cooldown: " ).item( cooldown ).str( " Seconds<BR>\n	" ).ToString();
			popup = new Browser( user, "radlaser", "Radioactive Microlaser Interface", 400, 240 );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: traitordevices.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			base.attack_self( (object)(user), (object)(flag), emp );
			this.interact( user );
			return null;
		}

		// Function from file: traitordevices.dm
		public void handle_cooldown( int cooldown = 0 ) {
			Task13.Schedule( cooldown, (Task13.Closure)(() => {
				this.used = false;
				this.icon_state = "health";
				return;
			}));
			return;
		}

		// Function from file: traitordevices.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			int cooldown = 0;

			
			if ( !this.used ) {
				GlobalFuncs.add_logs( user, M, "irradiated", this );
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " has analyzed " + M + "'s vitals.</span>" );
				cooldown = Num13.Floor( Num13.MaxInt( 100, ((int)( ( this.intensity * 8 - this.wavelength / 2 + this.intensity * 2 ) * 10 )) ) );
				this.used = true;
				this.icon_state = "health1";
				this.handle_cooldown( cooldown );
				Task13.Schedule( ( this.wavelength + this.intensity * 4 ) * 10, (Task13.Closure)(() => {
					
					if ( Lang13.Bool( M ) ) {
						
						if ( this.intensity >= 5 ) {
							((Mob_Living)M).apply_effect( Num13.Floor( this.intensity / 1.5 ), "paralize" );
						}
						((Ent_Static)M).rad_act( this.intensity * 10 );
					}
					return;
				}));
			} else {
				user.WriteMsg( "<span class='warning'>The radioactive microlaser is still recharging.</span>" );
			}
			return false;
		}

	}

}