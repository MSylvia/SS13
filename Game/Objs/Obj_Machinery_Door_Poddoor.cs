// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Poddoor : Obj_Machinery_Door {

		public dynamic id = 1;
		public int auto_close = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.sub_door = true;
			this.explosion_block = 3;
			this.heat_proof = true;
			this.icon = "icons/obj/doors/blastdoor.dmi";
			this.icon_state = "closed";
		}

		public Obj_Machinery_Door_Poddoor ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: poddoor.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.density ) {
				this.icon_state = "closed";
			} else {
				this.icon_state = "open";
			}
			return false;
		}

		// Function from file: poddoor.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			EffectSystem_SparkSpread s = null;
			EffectSystem_SparkSpread s2 = null;
			EffectSystem_SparkSpread s3 = null;

			
			if ( target == this ) {
				GlobalFuncs.qdel( this );
				return false;
			}

			switch ((int?)( severity )) {
				case 1:
					
					if ( Rand13.PercentChance( 80 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						s = new EffectSystem_SparkSpread();
						s.set_up( 2, 1, this );
						s.start();
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 20 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						s2 = new EffectSystem_SparkSpread();
						s2.set_up( 2, 1, this );
						s2.start();
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 80 ) ) {
						s3 = new EffectSystem_SparkSpread();
						s3.set_up( 2, 1, this );
						s3.start();
					}
					break;
			}
			return false;
		}

		// Function from file: poddoor.dm
		public override bool close( int? surpress_send = null ) {
			surpress_send = surpress_send ?? 0;

			
			if ( this.operating ) {
				return false;
			}

			if ( this.density ) {
				return false;
			}

			if ( !Lang13.Bool( surpress_send ) && ( this.stat & 2 ) != 0 ) {
				return false;
			}
			this.operating = true;
			Icon13.Flick( "closing", this );
			this.icon_state = "closed";
			this.SetOpacity( 1 );
			Task13.Sleep( 5 );
			this.density = true;
			Task13.Sleep( 5 );
			this.air_update_turf( true );
			this.update_freelook_sight();
			Task13.Sleep( 5 );
			this.crush();
			Task13.Sleep( 5 );
			this.operating = false;
			return false;
		}

		// Function from file: poddoor.dm
		public override bool open( int? surpress_send = null ) {
			surpress_send = surpress_send ?? 0;

			
			if ( this.operating ) {
				return false;
			}

			if ( !this.density ) {
				return false;
			}

			if ( !Lang13.Bool( surpress_send ) && ( this.stat & 2 ) != 0 ) {
				return false;
			}
			this.operating = true;
			Icon13.Flick( "opening", this );
			this.icon_state = "open";
			this.SetOpacity( 0 );
			Task13.Sleep( 5 );
			this.density = false;
			Task13.Sleep( 5 );
			this.air_update_turf( true );
			this.update_freelook_sight();
			this.operating = false;

			if ( this.auto_close != 0 ) {
				Task13.Schedule( this.auto_close, (Task13.Closure)(() => {
					this.close();
					return;
				}));
			}
			return true;
		}

		// Function from file: poddoor.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic F = null;

			this.add_fingerprint( user );

			if ( A is Obj_Item_Weapon_Twohanded_Fireaxe ) {
				F = A;

				if ( !F.wielded ) {
					return null;
				}
			} else if ( !( A is Obj_Item_Weapon_Crowbar ) ) {
				return null;
			}

			if ( ( this.stat & 2 ) != 0 ) {
				this.open( 1 );
			}
			return null;
		}

		// Function from file: poddoor.dm
		public override bool Bumped( dynamic AM = null ) {
			
			if ( this.density ) {
				return false;
			} else {
				return base.Bumped( (object)(AM) );
			}
		}

	}

}