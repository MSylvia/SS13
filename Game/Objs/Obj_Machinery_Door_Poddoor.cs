// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Poddoor : Obj_Machinery_Door {

		public dynamic id_tag = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explosion_resistance = 25;
			this.explosion_block = 3;
			this.penetration_dampening = 20;
			this.prefix = "r_";
			this.animation_delay = 18;
			this.animation_delay_2 = 5;
			this.icon = "icons/obj/doors/rapid_pdoor.dmi";
			this.icon_state = "pdoor1";
		}

		// Function from file: poddoor.dm
		public Obj_Machinery_Door_Poddoor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.density ) {
				this.layer = 321;
			} else {
				this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );
			}
			GlobalVars.poddoors.Add( this );
			return;
		}

		// Function from file: poddoor.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			Effect_Effect_System_SparkSpread s = null;
			Effect_Effect_System_SparkSpread s2 = null;
			Effect_Effect_System_SparkSpread s3 = null;

			
			switch ((int?)( severity )) {
				case 1:
					
					if ( Rand13.PercentChance( 80 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 2, 1, this );
						s.start();
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 20 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						s2 = new Effect_Effect_System_SparkSpread();
						s2.set_up( 2, 1, this );
						s2.start();
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 80 ) ) {
						s3 = new Effect_Effect_System_SparkSpread();
						s3.set_up( 2, 1, this );
						s3.start();
					}
					break;
			}
			return false;
		}

		// Function from file: poddoor.dm
		public override bool close( bool? surpress_send = null ) {
			
			if ( this.operating != 0 ) {
				return false;
			}
			this.operating = 1;
			this.layer = 321;
			Icon13.Flick( "pdoorc1", this );
			this.icon_state = "pdoor1";
			this.density = true;
			this.set_opacity( Lang13.Initial( this, "opacity" ) );
			this.update_nearby_tiles();
			Task13.Sleep( 10 );
			this.operating = 0;
			return false;
		}

		// Function from file: poddoor.dm
		public override bool open( int? surpress_send = null ) {
			
			if ( this.operating == 1 ) {
				return false;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				return false;
			}

			if ( !( this.operating != 0 ) ) {
				this.operating = 1;
			}
			Icon13.Flick( "pdoorc0", this );
			this.icon_state = "pdoor0";
			this.set_opacity( 0 );
			Task13.Sleep( 10 );
			this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );
			this.density = false;
			this.update_nearby_tiles();

			if ( this.operating == 1 ) {
				this.operating = 0;
			}

			if ( this.autoclose ) {
				Task13.Schedule( 150, (Task13.Closure)(() => {
					this.f_autoclose();
					return;
				}));
			}
			return true;
		}

		// Function from file: poddoor.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( b );

			if ( !( a is Obj_Item_Weapon_Crowbar || a is Obj_Item_Weapon_Fireaxe && a.wielded == 1 ) ) {
				return null;
			}

			if ( this.density && ( this.stat & 2 ) != 0 && !( this.operating != 0 ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.operating = 1;
					Icon13.Flick( "pdoorc0", this );
					this.icon_state = "pdoor0";
					this.set_opacity( 0 );
					Task13.Sleep( 15 );
					this.density = false;
					this.operating = 0;
					return;
					return;
				}));
			}
			return null;
		}

		// Function from file: poddoor.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			
			if ( !this.density ) {
				return base.Bumped( AM, (object)(yes) );
			} else {
				return false;
			}
		}

		// Function from file: poddoor.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.poddoors.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}