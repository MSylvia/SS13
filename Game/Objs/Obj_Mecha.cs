// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Mecha : Obj {

		public string initial_icon = null;
		public bool can_move = true;
		public Ent_Static occupant = null;
		public dynamic step_in = 10;
		public int dir_in = 2;
		public dynamic step_energy_drain = 10;
		public double health = 300;
		public dynamic deflect_chance = 10;
		public ByTable damage_absorption = new ByTable().Set( "brute", 0.8 ).Set( "fire", 1.2 ).Set( "bullet", 081 ).Set( "laser", 1 ).Set( "energy", 1 ).Set( "bomb", 1 );
		public dynamic cell = null;
		public int state = 0;
		public ByTable log = new ByTable();
		public int last_message = 0;
		public bool add_req_access = true;
		public bool maint_access = true;
		public string dna = null;
		public ByTable proc_res = new ByTable();
		public Effect_Effect_System_SparkSpread spark_system = new Effect_Effect_System_SparkSpread();
		public bool lights = false;
		public int lights_power = 6;
		public bool use_internal_tank = false;
		public dynamic internal_tank_valve = 101.32499694824219;
		public Obj_Machinery_PortableAtmospherics_Canister_Air internal_tank = null;
		public GasMixture cabin_air = null;
		public dynamic connected_port = null;
		public Obj_Item_Device_Radio radio = null;
		public dynamic electropack = null;
		public dynamic tracking = null;
		public double? max_temperature = 25000;
		public double internal_damage_threshold = 50;
		public int internal_damage = 0;
		public ByTable operation_req_access = new ByTable();
		public ByTable internals_req_access = new ByTable(new object [] { 10, 29 });
		public GlobalIterator_MechaPreserveTemp pr_int_temp_processor = null;
		public GlobalIterator_MechaIntertialMovement pr_inertial_movement = null;
		public GlobalIterator_MechaTankGiveAir pr_give_air = null;
		public GlobalIterator_MechaInternalDamage pr_internal_damage = null;
		public Type wreckage = null;
		public ByTable equipment = new ByTable();
		public dynamic selected = null;
		public int max_equip = 3;
		public Events events = null;
		public Tile crashing = null;
		public ByTable mech_parts = new ByTable(new object [] { 
											typeof(Obj_Item_Weapon_Cell), 
											typeof(Obj_Machinery_PortableAtmospherics_Canister), 
											typeof(Obj_Item_Device_Radio), 
											typeof(Obj_Item_MechaParts), 
											typeof(Obj_Item_Device_Mmi), 
											typeof(Obj_Item_MechaParts_MechaTracking), 
											typeof(Obj_Item_Device_Radio_Electropack)
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.infra_luminosity = 15;
			this.anchored = 1;
			this.unacidable = true;
			this.icon = "icons/mecha/mecha.dmi";
			this.layer = 4;
		}

		// Function from file: mecha.dm
		public Obj_Mecha ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.events = new Events();
			this.icon_state += "-open";
			this.add_radio();
			this.add_cabin();

			if ( !( this.add_airtank() != null ) ) {
				this.removeVerb( typeof(Obj_Mecha).GetMethod( "connect_to_port" ) );
				this.removeVerb( typeof(Obj_Mecha).GetMethod( "toggle_internal_tank" ) );
			}
			this.spark_system.set_up( 2, 0, this );
			this.spark_system.attach( this );
			this.add_cell();
			this.add_iterators();
			this.removeVerb( typeof(Obj_Mecha).GetMethod( "disconnect_from_port" ) );
			this.log_message( "" + this.name + " created." );
			this.loc.Entered( this );
			GlobalVars.mechas_list.Add( this );
			return;
		}

		// Function from file: mecha.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			TopicInput filter = null;
			bool equip = false;
			dynamic new_frequency = null;
			dynamic newname = null;
			bool user = false;
			bool user2 = false;
			dynamic new_pressure = null;
			bool user3 = false;
			Ent_Static T = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["update_content"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "content", this.get_stats_part() );
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				return null;
			}

			if ( Task13.User.isUnconscious() ) {
				return null;
			}
			filter = new TopicInput( href, href_list );

			if ( Lang13.Bool( href_list["select_equip"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				equip = filter.getObj( "select_equip" );

				if ( equip ) {
					this.selected = equip;
					this.occupant_message( "You switch to " + equip );
					this.visible_message( "" + this + " raises " + equip );
					GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "eq_list", this.get_equipment_list() );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["eject"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.__CallVerb("Eject" );
				return null;
			}

			if ( Lang13.Bool( href_list["toggle_lights"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.__CallVerb("Toggle Lights" );
				return null;
			}

			if ( Lang13.Bool( href_list["toggle_airtank"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.__CallVerb("Toggle internal airtank usage." );
				return null;
			}

			if ( Lang13.Bool( href_list["rmictoggle"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.radio.broadcasting = !Lang13.Bool( this.radio.broadcasting ) ?1:0;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "rmicstate", ( Lang13.Bool( this.radio.broadcasting ) ? "Engaged" : "Disengaged" ) );
				return null;
			}

			if ( Lang13.Bool( href_list["rspktoggle"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.radio.listening = !Lang13.Bool( this.radio.listening ) ?1:0;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "rspkstate", ( Lang13.Bool( this.radio.listening ) ? "Engaged" : "Disengaged" ) );
				return null;
			}

			if ( Lang13.Bool( href_list["rfreq"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				new_frequency = this.radio.frequency + filter.getNum( "rfreq" );

				if ( !this.radio.freerange || Convert.ToDouble( this.radio.frequency ) < 1200 || Convert.ToDouble( this.radio.frequency ) > 1600 ) {
					new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
				}
				this.radio.set_frequency( new_frequency );
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "rfreq", "" + GlobalFuncs.format_frequency( this.radio.frequency ) );
				return null;
			}

			if ( Lang13.Bool( href_list["port_disconnect"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.__CallVerb("Disconnect from port" );
				return null;
			}

			if ( Lang13.Bool( href_list["port_connect"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.__CallVerb("Connect to port" );
				return null;
			}

			if ( Lang13.Bool( href_list["view_log"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				Interface13.Browse( this.occupant, this.get_log_html(), "window=exosuit_log" );
				GlobalFuncs.onclose( this.occupant, "exosuit_log" );
				return null;
			}

			if ( Lang13.Bool( href_list["change_name"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				newname = GlobalFuncs.strip_html_simple( Interface13.Input( this.occupant, "Choose new exosuit name", "Rename exosuit", Lang13.Initial( this, "name" ), null, InputType.Str ), 26 );

				if ( Lang13.Bool( newname ) && Lang13.Bool( GlobalFuncs.trim( newname ) ) ) {
					this.name = newname;
				} else {
					Interface13.Alert( this.occupant, "nope.avi" );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["toggle_id_upload"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.add_req_access = !this.add_req_access;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "t_id_upload", "" + ( this.add_req_access ? "L" : "Unl" ) + "ock ID upload panel" );
				return null;
			}

			if ( Lang13.Bool( href_list["toggle_maint_access"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}

				if ( this.state != 0 ) {
					this.occupant_message( "<font color='red'>Maintenance protocols in effect.</font>" );
					return null;
				}
				this.maint_access = !this.maint_access;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "t_maint_access", "" + ( this.maint_access ? "Forbid" : "Permit" ) + " maintenance protocols" );
				return null;
			}

			if ( Lang13.Bool( href_list["req_access"] ) && this.add_req_access ) {
				
				if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
					return null;
				}
				this.output_access_dialog( filter.getObj( "id_card" ), filter.getMob( "user" ) );
				return null;
			}

			if ( Lang13.Bool( href_list["maint_access"] ) && this.maint_access ) {
				
				if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
					return null;
				}
				user = filter.getMob( "user" );

				if ( user ) {
					
					if ( this.state == 0 ) {
						this.state = 1;
						GlobalFuncs.to_chat( user, "The securing bolts are now exposed." );
						this.log_message( "Maintenance protocols engaged." );

						if ( this.occupant != null ) {
							this.occupant_message( "<font color='red'>Maintenance protocols engaged.</font>" );
							GlobalFuncs.to_chat( this.occupant, new Sound( "sound/mecha/mechlockdown.ogg", null, false ) );
						}
					} else if ( this.state == 1 ) {
						this.state = 0;
						GlobalFuncs.to_chat( user, "The securing bolts are now hidden." );
						this.log_message( "Maintenance protocols terminated." );

						if ( this.occupant != null ) {
							this.occupant_message( "Maintenance protocols terminated." );
							GlobalFuncs.to_chat( this.occupant, new Sound( "sound/mecha/mechentry.ogg", null, false ) );
						}
					} else {
						GlobalFuncs.to_chat( user, "You can't toggle maintenance mode with the securing bolts unfastened." );
					}
					this.output_maintenance_dialog( filter.getObj( "id_card" ), user );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["set_internal_tank_valve"] ) && this.state >= 1 ) {
				
				if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
					return null;
				}
				user2 = filter.getMob( "user" );

				if ( user2 ) {
					new_pressure = Interface13.Input( user2, "Input new output pressure", "Pressure setting", this.internal_tank_valve, null, InputType.Num );

					if ( Lang13.Bool( new_pressure ) ) {
						this.internal_tank_valve = new_pressure;
						GlobalFuncs.to_chat( user2, "The internal pressure valve has been set to " + this.internal_tank_valve + "kPa." );
					}
				}
			}

			if ( Lang13.Bool( href_list["add_req_access"] ) && this.add_req_access && filter.getObj( "id_card" ) ) {
				
				if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
					return null;
				}
				this.operation_req_access.Add( filter.getNum( "add_req_access" ) );
				this.output_access_dialog( filter.getObj( "id_card" ), filter.getMob( "user" ) );
				return null;
			}

			if ( Lang13.Bool( href_list["del_req_access"] ) && this.add_req_access && filter.getObj( "id_card" ) ) {
				
				if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
					return null;
				}
				this.operation_req_access.Remove( filter.getNum( "del_req_access" ) );
				this.output_access_dialog( filter.getObj( "id_card" ), filter.getMob( "user" ) );
				return null;
			}

			if ( Lang13.Bool( href_list["finish_req_access"] ) ) {
				
				if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
					return null;
				}
				this.add_req_access = false;
				user3 = filter.getMob( "user" );
				Interface13.Browse( user3, null, "window=exosuit_add_access" );
				return null;
			}

			if ( Lang13.Bool( href_list["dna_lock"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}

				if ( this.occupant != null && ( !( this.occupant is Obj_Item_Device_Mmi_Posibrain ) || !( this.occupant is Obj_Item_Device_Mmi ) ) ) {
					this.dna = ((dynamic)this.occupant).dna.unique_enzymes;
					this.occupant_message( "You feel a prick as the needle takes your DNA sample." );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["reset_dna"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.dna = null;
			}

			if ( Lang13.Bool( href_list["repair_int_control_lost"] ) ) {
				
				if ( Task13.User != this.occupant ) {
					return null;
				}
				this.occupant_message( "Recalibrating coordination system." );
				this.log_message( "Recalibration of coordination system started." );
				T = this.loc;

				if ( this.do_after( 100 ) ) {
					
					if ( T == this.loc ) {
						this.clearInternalDamage( 16 );
						this.occupant_message( "<font color='blue'>Recalibration successful.</font>" );
						this.log_message( "Recalibration of coordination system finished with 0 errors." );
					} else {
						this.occupant_message( "<font color='red'>Recalibration failed.</font>" );
						this.log_message( "Recalibration of coordination system failed with 1 error.", true );
					}
				}
			}
			return null;
		}

		// Function from file: mecha.dm
		public override bool check_access( dynamic I = null, ByTable access_list = null ) {
			dynamic pda = null;
			dynamic req = null;
			dynamic req2 = null;

			
			if ( !( access_list is ByTable ) ) {
				return true;
			}

			if ( !( access_list.len != 0 ) ) {
				return true;
			}

			if ( I is Obj_Item_Device_Pda ) {
				pda = I;
				I = pda.id;
			}

			if ( !( I is Obj_Item_Weapon_Card_Id ) || !Lang13.Bool( I.access ) ) {
				return false;
			}

			if ( access_list == this.operation_req_access ) {
				
				foreach (dynamic _a in Lang13.Enumerate( access_list )) {
					req = _a;
					
					Interface13.Stat( null, I.access.Contains( req ) );

					if ( !false ) {
						return false;
					}
				}
			} else if ( access_list == this.internals_req_access ) {
				
				foreach (dynamic _b in Lang13.Enumerate( access_list )) {
					req2 = _b;
					
					Interface13.Stat( null, I.access.Contains( req2 ) );

					if ( false ) {
						return true;
					}
				}
			}
			return true;
		}

		// Function from file: mecha.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			Ent_Dynamic A = null;

			
			if ( Task13.User != this.occupant || Task13.User.incapacitated() ) {
				return null;
			}

			if ( !( over_location is Tile ) || over_location.density ) {
				return null;
			}

			if ( !this.Adjacent( over_location ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( over_location.contents, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( A.density ) {
					
					if ( A == this || A is Mob ) {
						continue;
					}
					return null;
				}
			}

			if ( over_location is Tile ) {
				this.go_out( over_location );
			}
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: mecha.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			
			if ( O != user ) {
				return false;
			}
			this.move_inside(  );
			return false;
		}

		// Function from file: mecha.dm
		public override GasMixture return_air(  ) {
			
			if ( this.use_internal_tank ) {
				return this.cabin_air;
			}
			return this.get_turf_air();
		}

		// Function from file: mecha.dm
		public override dynamic remove_air( dynamic amount = null ) {
			dynamic T = null;

			
			if ( this.use_internal_tank ) {
				return this.cabin_air.remove( amount );
			} else {
				T = GlobalFuncs.get_turf( this );

				if ( Lang13.Bool( T ) ) {
					return ((Ent_Static)T).remove_air( amount );
				}
			}
			return null;
		}

		// Function from file: mecha.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic E = null;
			dynamic id_card = null;
			dynamic pda = null;
			ByTable removable_components = null;
			dynamic remove = null;
			dynamic CC = null;
			dynamic WT = null;

			
			if ( a is Obj_Item_Device_Mmi || a is Obj_Item_Device_Mmi_Posibrain ) {
				
				if ( this.mmi_move_inside( a, b ) ) {
					GlobalFuncs.to_chat( b, "" + this + "-MMI interface initialized successfuly" );
				} else {
					GlobalFuncs.to_chat( b, "" + this + "-MMI interface initialization failed." );
				}
				return null;
			}

			if ( a is Obj_Item_MechaParts_MechaEquipment ) {
				E = a;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( ((Obj_Item_MechaParts_MechaEquipment)E).can_attach( this ) ) {
						
						if ( Lang13.Bool( b.drop_item( a ) ) ) {
							E.attach( this );
							((Ent_Static)b).visible_message( "" + b + " attaches " + a + " to " + this, "You attach " + a + " to " + this );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
						}
					} else {
						GlobalFuncs.to_chat( b, "You were unable to attach " + a + " to " + this );
					}
					return;
				}));
				return null;
			}

			if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.add_req_access || this.maint_access ) {
					
					if ( this.internals_access_allowed( Task13.User ) ) {
						
						if ( a is Obj_Item_Weapon_Card_Id ) {
							id_card = a;
						} else {
							pda = a;
							id_card = pda.id;
						}
						this.output_maintenance_dialog( id_card, b );
						return null;
					} else {
						GlobalFuncs.to_chat( b, "<span class='warning'>Invalid ID: Access denied.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Maintenance protocols disabled by operator.</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Wrench ) {
				
				if ( this.state == 1 ) {
					this.state = 2;
					GlobalFuncs.to_chat( b, "You undo the securing bolts." );
					GlobalFuncs.playsound( this, "sound/items/Ratchet.ogg", 50, 1 );
				} else if ( this.state == 2 ) {
					this.state = 1;
					GlobalFuncs.to_chat( b, "You tighten the securing bolts." );
					GlobalFuncs.playsound( this, "sound/items/Ratchet.ogg", 50, 1 );
				}
				return null;
			} else if ( a is Obj_Item_Weapon_Crowbar ) {
				
				if ( this.state == 2 ) {
					removable_components = new ByTable();

					if ( Lang13.Bool( this.cell ) ) {
						removable_components.Add( "power cell" );
					}

					if ( Lang13.Bool( this.tracking ) ) {
						removable_components.Add( "exosuit tracking beacon" );
					}

					if ( Lang13.Bool( this.electropack ) ) {
						removable_components.Add( "electropack" );
					}
					remove = Interface13.Input( b, "Which component do you want to pry out?", "Remove Component", null, removable_components, InputType.Null | InputType.Any );

					if ( !Lang13.Bool( remove ) ) {
						return null;
					}

					dynamic _a = remove; // Was a switch-case, sorry for the mess.
					if ( _a=="power cell" ) {
						((Ent_Dynamic)this.cell).forceMove( this.loc );
						this.cell = null;
					} else if ( _a=="exosuit tracking beacon" ) {
						((Ent_Dynamic)this.tracking).forceMove( this.loc );
						this.tracking = null;
					} else if ( _a=="electropack" ) {
						((Ent_Dynamic)this.electropack).forceMove( this.loc );
						this.electropack = null;
					}
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You pry out " ).the( remove ).item().str( " from " ).the( this ).item().str( ".</span>" ).ToString() );
					this.log_message( "Internal component removed - " + remove );
				}
				return null;
			} else if ( a is Obj_Item_Stack_CableCoil ) {
				
				if ( this.state == 2 && this.hasInternalDamage( 4 ) != 0 ) {
					CC = a;

					if ( Convert.ToDouble( CC.amount ) > 1 ) {
						CC.use( 2 );
						this.clearInternalDamage( 4 );
						GlobalFuncs.to_chat( b, "You replace the fused wires." );
					} else {
						GlobalFuncs.to_chat( b, "There's not enough wire to finish the task." );
					}
				}
				return null;
			} else if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.hasInternalDamage( 2 ) != 0 ) {
					this.clearInternalDamage( 2 );
					GlobalFuncs.to_chat( b, "You repair the damaged temperature controller." );
				}
				return null;
			} else if ( a is Obj_Item_Weapon_Cell ) {
				
				if ( this.state == 2 ) {
					
					if ( !Lang13.Bool( this.cell ) ) {
						
						if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
							GlobalFuncs.to_chat( b, "You install the powercell." );
							this.cell = a;
							this.log_message( "Powercell installed." );
						}
					} else {
						GlobalFuncs.to_chat( b, "There's already a powercell installed." );
					}
				}
				return null;
			} else if ( a is Obj_Item_MechaParts_MechaTracking ) {
				
				if ( this.state == 2 ) {
					
					if ( !Lang13.Bool( this.tracking ) ) {
						
						if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
							GlobalFuncs.to_chat( b, "You install the tracking beacon and safeties." );
							this.tracking = a;
							this.log_message( "Exosuit tracking beacon installed." );
						}
					} else {
						GlobalFuncs.to_chat( b, "There's already a tracking beacon installed." );
					}
				}
				return null;
			} else if ( a is Obj_Item_Device_Radio_Electropack ) {
				
				if ( this.state == 2 ) {
					
					if ( !Lang13.Bool( this.electropack ) ) {
						
						if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
							GlobalFuncs.to_chat( b, "You rig the electropack to the cockpit." );
							this.electropack = a;
							this.log_message( "Emergency ejection routines installed." );
						}
					} else {
						GlobalFuncs.to_chat( b, "There's already an electropack installed." );
					}
				}
				return null;
			} else if ( a is Obj_Item_Weapon_Weldingtool && b.a_intent != "hurt" ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					
					if ( this.hasInternalDamage( 8 ) != 0 ) {
						this.clearInternalDamage( 8 );
						GlobalFuncs.to_chat( b, "<span class='notice'>You repair the damaged gas tank.</span>" );
					}
				} else {
					return null;
				}

				if ( this.health < Convert.ToDouble( Lang13.Initial( this, "health" ) ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You repair some damage to " + this.name + ".</span>" );
					this.health += Num13.MinInt( 10, Convert.ToInt32( Lang13.Initial( this, "health" ) - this.health ) );
				} else {
					GlobalFuncs.to_chat( b, "The " + this.name + " is at full integrity" );
				}
				return null;
			} else {
				Lang13.Call( Lang13.GetLibFunc( Lang13.Bool( this.proc_res["dynattackby"] ) || this != null, "dynattackby" ), a, b );
			}
			return null;
		}

		// Function from file: mecha.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( ( exposed_temperature ??0) > ( this.max_temperature ??0) ) {
				this.log_message( "Exposed to dangerous temperature.", true );
				this.take_damage( 5, "fire" );
				this.check_for_internal_damage( new ByTable(new object [] { 1, 2 }) );
			}
			return false;
		}

		// Function from file: mecha.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.get_charge() ) ) {
				this.use_power( this.cell.charge / 2 / severity );
				this.take_damage( 50 / severity, "energy" );
			}
			this.log_message( "EMP detected", true );
			this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 16, 4 }), true );
			return null;
		}

		// Function from file: mecha.dm
		public override bool blob_act( dynamic severity = null ) {
			this.take_damage( 30, "brute" );
			return false;
		}

		// Function from file: mecha.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			this.log_message( "Affected by explosion of severity: " + severity + ".", true );

			if ( Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				severity++;
				this.log_append_to_last( "Armor saved, changing severity to " + severity + "." );
			}

			switch ((double?)( severity )) {
				case 1:
					this.destroy();
					break;
				case 2:
					
					if ( Rand13.PercentChance( 30 ) ) {
						this.destroy();
					} else {
						this.take_damage( Lang13.Initial( this, "health" ) / 2 );
						this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 8, 16, 4 }), true );
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 5 ) ) {
						this.destroy();
					} else {
						this.take_damage( Lang13.Initial( this, "health" ) / 5 );
						this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 8, 16, 4 }), true );
					}
					break;
			}
			return false;
		}

		// Function from file: mecha.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.log_message( "Hit by projectile. Type: " + Proj.name + "(" + Proj.flag + ").", true );
			Lang13.Call( Lang13.GetLibFunc( Lang13.Bool( this.proc_res["dynbulletdamage"] ) || this != null, "dynbulletdamage" ), Proj );
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return null;
		}

		// Function from file: mecha.dm
		public override void hitby( Ent_Static AM = null, dynamic speed = null, int? dir = null ) {
			this.log_message( "Hit by " + AM + ".", true );
			Lang13.Call( Lang13.GetLibFunc( Lang13.Bool( this.proc_res["dynhitby"] ) || this != null, "dynhitby" ), AM );
			return;
		}

		// Function from file: mecha.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			int damage = 0;

			this.log_message( "Attack by simple animal. Attacker - " + user + ".", true );

			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.emote( "" + ((dynamic)user).friendly + " " + this );
			} else if ( !Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );
				this.take_damage( damage );
				this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				this.visible_message( "<span class='warning'><B>" + user + "</B> " + ((dynamic)user).attacktext + " " + this + "!</span>" );
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>attacked " + this.name + "</font>" );
			} else {
				this.log_append_to_last( "Armor saved." );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/slash.ogg", 50, 1, -1 );
				this.occupant_message( "<span class='notice'>The " + user + "'s attack is stopped by the armor.</span>" );
				this.visible_message( "<span class='notice'>The " + user + " rebounds off " + this.name + "'s armor!</span>" );
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>attacked " + this.name + "</font>" );
			}
			return null;
		}

		// Function from file: mecha.dm
		public override dynamic attack_alien( Mob user = null ) {
			this.log_message( "Attack by alien. Attacker - " + user + ".", true );

			if ( !Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				this.take_damage( 15 );
				this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/slash.ogg", 50, 1, -1 );
				GlobalFuncs.to_chat( user, "<span class='warning'>You slash at the armored suit!</span>" );
				this.visible_message( "<span class='warning'>The " + user + " slashes at " + this.name + "'s armor!</span>" );
			} else {
				this.log_append_to_last( "Armor saved." );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/slash.ogg", 50, 1, -1 );
				GlobalFuncs.to_chat( user, "<span class='good'>Your claws had no effect!</span>" );
				this.occupant_message( "<span class='notice'>The " + user + "'s claws are stopped by the armor.</span>" );
				this.visible_message( "<span class='notice'>The " + user + " rebounds off " + this.name + "'s armor!</span>" );
			}
			return null;
		}

		// Function from file: mecha.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: mecha.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.log_message( "Attack by hand/paw. Attacker - " + a + ".", true );
			Interface13.Stat( null, a.mutations.Contains( 4 ) );

			if ( false && !Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				this.take_damage( 15 );
				this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				((Ent_Static)a).visible_message( "<font color='red'><b>" + a + " hits " + this.name + ", doing some damage.</b></font>", "<font color='red'><b>You hit " + this.name + " with all your might. The metal creaks and bends.</b></font>" );
			} else {
				((Ent_Static)a).visible_message( "<font color='red'><b>" + a + " hits " + this.name + ". Nothing happens</b></font>", "<font color='red'><b>You hit " + this.name + " with no visible effect.</b></font>" );
				this.log_append_to_last( "Armor saved." );
			}
			return null;
		}

		// Function from file: mecha.dm
		public override dynamic Bump( Obj Obstacle = null, dynamic yes = null ) {
			bool breakthrough = false;
			Obj G = null;
			Obj T = null;
			Obj C = null;
			ByTable hit_sound = null;
			Obj O = null;

			
			if ( this.throwing != 0 ) {
				breakthrough = false;

				if ( Obstacle is Obj_Structure_Window ) {
					Obstacle.Destroy( 1 );
					breakthrough = true;
				} else if ( Obstacle is Obj_Structure_Grille ) {
					G = Obstacle;
					((dynamic)G).health = Lang13.Initial( G, "health" ) * 0.25;
					((dynamic)G).broken = 1;
					G.icon_state = "" + Lang13.Initial( G, "icon_state" ) + "-b";
					G.density = false;
					GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Rods), GlobalFuncs.get_turf( G.loc ) );
					breakthrough = true;
				} else if ( Obstacle is Obj_Structure_Table ) {
					T = Obstacle;
					((dynamic)T).destroy();
					breakthrough = true;
				} else if ( Obstacle is Obj_Structure_Rack ) {
					new Obj_Item_Weapon_RackParts( Obstacle.loc );
					GlobalFuncs.qdel( Obstacle );
					breakthrough = true;
				} else if ( Obstacle is Obj_Structure_ReagentDispensers_Fueltank ) {
					Obstacle.ex_act( 1 );
				} else if ( Obstacle is Mob_Living_Carbon ) {
					C = Obstacle;
					hit_sound = new ByTable(new object [] { "sound/weapons/genhit1.ogg", "sound/weapons/genhit2.ogg", "sound/weapons/genhit3.ogg" });

					if ( Lang13.Bool( C.flags & 128 ) ) {
						return null;
					}
					((dynamic)C).take_overall_damage( 5, 0 );

					if ( Lang13.Bool( C.locked_to ) ) {
						C.locked_to = 0;
					}
					((dynamic)C).Stun( 5 );
					((dynamic)C).Weaken( 5 );
					((dynamic)C).apply_effect( "stutter", 5 );
					GlobalFuncs.playsound( this, Rand13.PickFromTable( hit_sound ), 50, 0, 0 );
					breakthrough = true;
				} else {
					this.throwing = 0;
					this.crashing = null;
				}

				if ( breakthrough ) {
					
					if ( this.crashing != null ) {
						Task13.Schedule( 1, (Task13.Closure)(() => {
							this.throw_at( this.crashing, 50, this.throw_speed );
							return;
						}));
					} else {
						Task13.Schedule( 1, (Task13.Closure)(() => {
							this.crashing = GlobalFuncs.get_distant_turf( GlobalFuncs.get_turf( this ), this.dir, 3 );
							this.throw_at( this.crashing, 50, this.throw_speed );
							return;
						}));
					}
				}
			}

			if ( Obstacle is Obj ) {
				O = Obstacle;

				if ( O is Obj_Effect_Portal ) {
					this.anchored = 0;
					O.Crossed( this );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.anchored = 1;
						return;
					}));
				} else if ( !Lang13.Bool( O.anchored ) ) {
					Map13.Step( Obstacle, this.dir );
				} else {
					Obstacle.Bumped( this );
				}
			} else if ( Obstacle is Mob ) {
				Map13.Step( Obstacle, this.dir );
			} else {
				Obstacle.Bumped( this );
			}
			return null;
		}

		// Function from file: mecha.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			
			if ( M != this.occupant ) {
				M.forceMove( GlobalFuncs.get_turf( this ) );
				GlobalFuncs.to_chat( M, "You climb out from " + this );
				return 0;
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				
				if ( Game13.time - this.last_message > 20 ) {
					this.occupant_message( "Unable to move while connected to the air system port" );
					this.last_message = Game13.time;
				}
				return 0;
			}

			if ( this.state != 0 ) {
				this.occupant_message( "<font color='red'>Maintenance protocols in effect.</font>" );
				return null;
			}
			return this.domove( direction );
		}

		// Function from file: mecha.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				this.events.fireEvent( "onMove", GlobalFuncs.get_turf( this ) );
			}
			return _default;
		}

		// Function from file: mecha.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( _args[1].speaker == this.occupant && Lang13.Bool( this.radio.broadcasting ) ) {
				this.radio.talk_into( _args[1] );
				return null;
			}
			return null;
		}

		// Function from file: mecha.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			double integrity = 0;
			Obj_Item_MechaParts_MechaEquipment ME = null;

			base.examine( (object)(user), size );
			integrity = this.health / Convert.ToDouble( Lang13.Initial( this, "health" ) ) * 100;

			dynamic _a = integrity; // Was a switch-case, sorry for the mess.
			if ( 85<=_a&&_a<=100 ) {
				GlobalFuncs.to_chat( user, "<span class='info'>It's fully intact.</span>" );
			} else if ( 65<=_a&&_a<=85 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>It's slightly damaged.</span>" );
			} else if ( 45<=_a&&_a<=65 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>It's badly damaged.</span>" );
			} else if ( 25<=_a&&_a<=45 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>It's heavily damaged.</span>" );
			} else {
				GlobalFuncs.to_chat( user, "<span class='danger'>It's falling apart.</span>" );
			}

			if ( this.equipment != null && this.equipment.len != 0 ) {
				GlobalFuncs.to_chat( user, "It's equipped with:" );

				foreach (dynamic _b in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
					ME = _b;
					
					GlobalFuncs.to_chat( user, new Txt().icon( ME ).str( " " ).item( ME ).ToString() );
				}
			}
			return null;
		}

		// Function from file: mecha.dm
		public string reset_icon(  ) {
			
			if ( Lang13.Bool( this.initial_icon ) ) {
				this.icon_state = this.initial_icon;
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			return this.icon_state;
		}

		// Function from file: mecha.dm
		public bool give_power( double amount = 0 ) {
			
			if ( !( this.get_charge() == null ) ) {
				((Obj_Item_Weapon_Cell)this.cell).give( amount );
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public bool dynusepower( double amount = 0 ) {
			
			if ( Lang13.Bool( this.get_charge() ) ) {
				((Obj_Item_Weapon_Cell)this.cell).use( amount );
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public dynamic use_power( dynamic amount = null ) {
			return Lang13.Call( Lang13.GetLibFunc( Lang13.Bool( this.proc_res["dynusepower"] ) || this != null, "dynusepower" ), amount );
		}

		// Function from file: mecha.dm
		public int dyngetcharge(  ) {
			
			if ( !Lang13.Bool( this.cell ) ) {
				return 0;
			}
			return Num13.MaxInt( 0, Convert.ToInt32( this.cell.charge ) );
		}

		// Function from file: mecha.dm
		public dynamic get_charge(  ) {
			return Lang13.Call( Lang13.GetLibFunc( Lang13.Bool( this.proc_res["dyngetcharge"] ) || this != null, "dyngetcharge" ) );
		}

		// Function from file: mecha.dm
		public bool has_charge( dynamic amount = null ) {
			return Convert.ToDouble( this.get_charge() ) >= Convert.ToDouble( amount );
		}

		// Function from file: mecha.dm
		public void log_append_to_last( string message = null, bool? red = null ) {
			dynamic last_entry = null;

			last_entry = this.log[this.log.len];
			last_entry["message"] += "<br>" + ( red == true ? "<font color='red'>" : null ) + message + ( red == true ? "</font>" : null );
			return;
		}

		// Function from file: mecha.dm
		public int log_message( string message = null, bool? red = null ) {
			this.log.len++;
			this.log[this.log.len] = new ByTable().Set( "time", Game13.timeofday ).Set( "message", "" + ( red == true ? "<font color='red'>" : null ) + message + ( red == true ? "</font>" : null ) );
			return this.log.len;
		}

		// Function from file: mecha.dm
		public void occupant_message( dynamic message = null ) {
			
			if ( Lang13.Bool( message ) ) {
				
				if ( this.occupant != null && Lang13.Bool( ((dynamic)this.occupant).client ) ) {
					GlobalFuncs.to_chat( this.occupant, new Txt().icon( this ).str( " " ).item( message ).ToString() );
				}
			}
			return;
		}

		// Function from file: mecha.dm
		public void output_maintenance_dialog( dynamic id_card = null, dynamic user = null ) {
			string output = null;

			
			if ( !Lang13.Bool( id_card ) || !Lang13.Bool( user ) ) {
				return;
			}
			output = @"<html>
						<head>
						<style>
						body {color: #00ff00; background: #000000; font-family:""Courier New"", Courier, monospace; font-size: 12px;}
						a {padding:2px 5px; background:#32CD32;color:#000;display:block;margin:2px;text-align:center;text-decoration:none;}
						</style>
						</head>
						<body>
						" + ( this.add_req_access ? new Txt( "<a href='?src=" ).Ref( this ).str( ";req_access=1;id_card=" ).Ref( id_card ).str( ";user=" ).Ref( user ).str( "'>Edit operation keycodes</a>" ).ToString() : null ) + "\n						" + ( this.maint_access ? new Txt( "<a href='?src=" ).Ref( this ).str( ";maint_access=1;id_card=" ).Ref( id_card ).str( ";user=" ).Ref( user ).str( "'>" ).item( ( this.state != 0 ? "Terminate" : "Initiate" ) ).str( " maintenance protocol</a>" ).ToString() : null ) + "\n						" + ( this.state > 0 ? new Txt( "<a href='?src=" ).Ref( this ).str( ";set_internal_tank_valve=1;user=" ).Ref( user ).str( "'>Set Cabin Air Pressure</a>" ).ToString() : null ) + "\n						</body>\n						</html>";
			Interface13.Browse( user, output, "window=exosuit_maint_console" );
			GlobalFuncs.onclose( user, "exosuit_maint_console" );
			return;
		}

		// Function from file: mecha.dm
		public void output_access_dialog( dynamic id_card = null, bool user = false ) {
			string output = null;
			dynamic a = null;
			dynamic a2 = null;
			string a_name = null;

			
			if ( !Lang13.Bool( id_card ) || !user ) {
				return;
			}
			output = @"<html>
						<head><style>
						h1 {font-size:15px;margin-bottom:4px;}
						body {color: #00ff00; background: #000000; font-family:""Courier New"", Courier, monospace; font-size: 12px;}
						a {color:#0f0;}
						</style>
						</head>
						<body>
						<h1>Following keycodes are present in this system:</h1>";

			foreach (dynamic _a in Lang13.Enumerate( this.operation_req_access )) {
				a = _a;
				
				output += new Txt().item( GlobalFuncs.get_access_desc( a ) ).str( " - <a href='?src=" ).Ref( this ).str( ";del_req_access=" ).item( a ).str( ";user=" ).Ref( user ).str( ";id_card=" ).Ref( id_card ).str( "'>Delete</a><br>" ).ToString();
			}
			output += "<hr><h1>Following keycodes were detected on portable device:</h1>";

			foreach (dynamic _b in Lang13.Enumerate( id_card.access )) {
				a2 = _b;
				
				Interface13.Stat( null, this.operation_req_access.Contains( a2 ) );

				if ( false ) {
					continue;
				}
				a_name = GlobalFuncs.get_access_desc( a2 );

				if ( !Lang13.Bool( a_name ) ) {
					continue;
				}
				output += new Txt().item( a_name ).str( " - <a href='?src=" ).Ref( this ).str( ";add_req_access=" ).item( a2 ).str( ";user=" ).Ref( user ).str( ";id_card=" ).Ref( id_card ).str( "'>Add</a><br>" ).ToString();
			}
			output += new Txt( "<hr><a href='?src=" ).Ref( this ).str( ";finish_req_access=1;user=" ).Ref( user ).str( "'>Finish</a> <font color='red'>(Warning! The ID upload panel will be locked. It can be unlocked only through Exosuit Interface.)</font>\n		</body></html>" ).ToString();
			Interface13.Browse( user, output, "window=exosuit_add_access" );
			GlobalFuncs.onclose( user, "exosuit_add_access" );
			return;
		}

		// Function from file: mecha.dm
		public string get_log_html(  ) {
			string output = null;
			ByTable entry = null;

			output = "<html><head><title>" + this.name + " Log</title></head><body style='font: 13px 'Courier', monospace;'>";

			foreach (dynamic _a in Lang13.Enumerate( this.log, typeof(ByTable) )) {
				entry = _a;
				
				output += "<div style='font-weight: bold;'>" + String13.FormatTime( Convert.ToDouble( entry["time"] ), "DDD MMM DD hh:mm:ss" ) + " " + GlobalVars.game_year + "</div>\n						<div style='margin-left:15px; margin-bottom:10px;'>" + entry["message"] + "</div>\n						";
			}
			output += "</body></html>";
			return output;
		}

		// Function from file: mecha.dm
		public virtual string get_equipment_list(  ) {
			string output = null;
			Obj_Item_MechaParts_MechaEquipment MT = null;

			
			if ( !( this.equipment.len != 0 ) ) {
				return null;
			}
			output = "<b>Equipment:</b><div style=\"margin-left: 15px;\">";

			foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
				MT = _a;
				
				output += new Txt( "<div id='" ).Ref( MT ).str( "'>" ).item( MT.get_equip_info() ).str( "</div>" ).ToString();
			}
			output += "</div>";
			return output;
		}

		// Function from file: mecha.dm
		public dynamic get_equipment_menu(  ) {
			dynamic output = null;
			Obj_Item_MechaParts_MechaEquipment W = null;

			
			if ( this.equipment.len != 0 ) {
				output += "<div class='wr'>\n						<div class='header'>Equipment</div>\n						<div class='links'>";

				foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
					W = _a;
					
					output += new Txt().item( W.name ).str( " <a href='?src=" ).Ref( W ).str( ";detach=1'>Detach</a><br>" ).ToString();
				}
				output += "<b>Available equipment slots:</b> " + ( this.max_equip - this.equipment.len ) + "\n			</div></div>";
			}
			return output;
		}

		// Function from file: mecha.dm
		public virtual string get_commands(  ) {
			string output = null;

			Interface13.Stat( this, this.verbs.Contains( typeof(Obj_Mecha).GetMethod( "disconnect_from_port" ) ) );
			Interface13.Stat( ( Lang13.Bool( this.radio.listening ) ? new Txt( "<a href='?src=" ).Ref( this ).str( ";port_disconnect=1'>Disconnect from port</a><br>" ).ToString() : null ), this.verbs.Contains( typeof(Obj_Mecha).GetMethod( "connect_to_port" ) ) );
			Interface13.Stat( this.get_equipment_menu(), this.verbs.Contains( typeof(Obj_Mecha).GetMethod( "eject" ) ) );
			output = new Txt( "<div class='wr'>\n						<div class='header'>Electronics</div>\n						<div class='links'>\n						<a href='?src=" ).Ref( null ).str( ";toggle_lights=1'>Toggle Lights</a><br>\n						<b>Radio settings:</b><br>\n						Microphone: <a href='?src=" ).Ref( null ).str( ";rmictoggle=1'><span id=\"rmicstate\">" ).item( null ).str( "</span></a><br>\n						Speaker: <a href='?src=" ).Ref( this ).str( ";rspktoggle=1'><span id=\"rspkstate\">" ).item( this ).str( "</span></a><br>\n						Frequency:\n						<a href='?src=" ).Ref( ( Lang13.Bool( this.radio.broadcasting ) ? "Engaged" : "Disengaged" ) ).str( ";rfreq=-10'>-</a>\n						<a href='?src=" ).Ref( this ).str( ";rfreq=-2'>-</a>\n						<span id=\"rfreq\">" ).item( ( Lang13.Bool( this.radio.listening ) ? "Engaged" : "Disengaged" ) ).str( "</span>\n						<a href='?src=" ).Ref( this ).str( ";rfreq=2'>+</a>\n						<a href='?src=" ).Ref( this ).str( @";rfreq=10'>+</a><br>
						</div>
						</div>
						<div class='wr'>
						<div class='header'>Airtank</div>
						<div class='links'>
						<a href='?src=" ).Ref( GlobalFuncs.format_frequency( this.radio.frequency ) ).str( ";toggle_airtank=1'>Toggle Internal Airtank Usage</a><br>\n						" ).item( this ).str( "\n						" ).item( this ).str( @"
						</div>
						</div>
						<div class='wr'>
						<div class='header'>Permissions & Logging</div>
						<div class='links'>
						<a href='?src=" ).Ref( ( Lang13.Bool( this.radio.listening ) ? new Txt( "<a href='?src=" ).Ref( this ).str( ";port_connect=1'>Connect to port</a><br>" ).ToString() : null ) ).str( ";toggle_id_upload=1'><span id='t_id_upload'>" ).item( this ).str( "ock ID upload panel</span></a><br>\n						<a href='?src=" ).Ref( ( this.add_req_access ? "L" : "Unl" ) ).str( ";toggle_maint_access=1'><span id='t_maint_access'>" ).item( this ).str( " maintenance protocols</span></a><br>\n						<a href='?src=" ).Ref( ( this.maint_access ? "Forbid" : "Permit" ) ).str( ";dna_lock=1'>DNA-lock</a><br>\n						<a href='?src=" ).Ref( this ).str( ";view_log=1'>View internal log</a><br>\n						<a href='?src=" ).Ref( this ).str( ";change_name=1'>Change exosuit name</a><br>\n						</div>\n						</div>\n						<div id='equipment_menu'>" ).item( this ).str( "</div>\n						<hr>\n						" ).item( ( this.maint_access ? new Txt( "<a href='?src=" ).Ref( this ).str( ";eject=1'>Eject</a><br>" ).ToString() : null ) ).str( "\n						" ).ToString();
			return output;
		}

		// Function from file: mecha.dm
		public virtual string get_stats_part(  ) {
			double integrity = 0;
			dynamic cell_charge = null;
			dynamic tank_pressure = null;
			dynamic tank_temperature = null;
			double cabin_pressure = 0;
			string output = null;

			integrity = this.health / Convert.ToDouble( Lang13.Initial( this, "health" ) ) * 100;
			cell_charge = this.get_charge();
			tank_pressure = ( this.internal_tank != null ? ((dynamic)( Num13.Round( Convert.ToDouble( this.internal_tank.return_pressure() ), 0.01 ) )) : ((dynamic)( "None" )) );
			tank_temperature = ( this.internal_tank != null ? ((dynamic)( this.internal_tank.return_temperature() )) : ((dynamic)( "Unknown" )) );
			cabin_pressure = Num13.Round( Convert.ToDouble( this.return_pressure() ), 0.01 );
			output = "" + this.report_internal_damage() + "\n						" + ( integrity < 30 ? "<font color='red'><b>DAMAGE LEVEL CRITICAL</b></font><br>" : null ) + "\n						<b>Integrity: </b> " + integrity + "%<br>\n						<b>Powercell charge: </b>" + ( cell_charge == null ? "No powercell installed" : "" + ((Obj_Item_Weapon_Cell)this.cell).percent() + "%" ) + "<br>\n						<b>Air source: </b>" + ( this.use_internal_tank ? "Internal Airtank" : "Environment" ) + "<br>\n						<b>Airtank pressure: </b>" + tank_pressure + "kPa<br>\n						<b>Airtank temperature: </b>" + tank_temperature + "K|" + ( tank_temperature - 273.41 ) + "&deg;C<br>\n						<b>Cabin pressure: </b>" + ( cabin_pressure > 325 ? ((dynamic)( "<font color='red'>" + cabin_pressure + "</font>" )) : ((dynamic)( cabin_pressure )) ) + "kPa<br>\n						<b>Cabin temperature: </b> " + this.return_temperature() + "K|" + ( this.return_temperature() - 273.41 ) + "&deg;C<br>\n						<b>Lights: </b>" + ( this.lights ? "on" : "off" ) + "<br>\n						" + ( Lang13.Bool( this.dna ) ? new Txt( "<b>DNA-locked:</b><br> <span style='font-size:10px;letter-spacing:-1px;'>" ).item( this.dna ).str( "</span> [<a href='?src=" ).Ref( this ).str( ";reset_dna=1'>Reset</a>]<br>" ).ToString() : null ) + "\n					";
			return output;
		}

		// Function from file: mecha.dm
		public dynamic report_internal_damage(  ) {
			dynamic output = null;
			ByTable dam_reports = null;
			dynamic tflag = null;
			double? intdamflag = null;

			output = null;
			dam_reports = new ByTable()
				.Set( "" + 1, "<font color='red'><b>INTERNAL FIRE</b></font>" )
				.Set( "" + 2, "<font color='red'><b>LIFE SUPPORT SYSTEM MALFUNCTION</b></font>" )
				.Set( "" + 8, "<font color='red'><b>GAS TANK BREACH</b></font>" )
				.Set( "" + 16, new Txt( "<font color='red'><b>COORDINATION SYSTEM CALIBRATION FAILURE</b></font> - <a href='?src=" ).Ref( this ).str( ";repair_int_control_lost=1'>Recalibrate</a>" ).ToString() )
				.Set( "" + 4, "<font color='red'><b>SHORT CIRCUIT</b></font>" )
			;

			foreach (dynamic _a in Lang13.Enumerate( dam_reports )) {
				tflag = _a;
				
				intdamflag = String13.ParseNumber( tflag );

				if ( this.hasInternalDamage( intdamflag ) != 0 ) {
					output += dam_reports[tflag];
					output += "<br />";
				}
			}

			if ( Convert.ToDouble( this.return_pressure() ) > 325 ) {
				output += "<font color='red'><b>DANGEROUSLY HIGH CABIN PRESSURE</b></font><br />";
			}
			return output;
		}

		// Function from file: mecha.dm
		public virtual string get_stats_html(  ) {
			string output = null;

			output = new Txt( "<html>\n						<head><title>" ).item( this.name ).str( @" data</title>
						<style>
						body {color: #00ff00; background: #000000; font-family:""Lucida Console"",monospace; font-size: 12px;}
						hr {border: 1px solid #0f0; color: #0f0; background-color: #0f0;}
						a {padding:2px 5px;;color:#0f0;}
						.wr {margin-bottom: 5px;}
						.header {cursor:pointer;}
						.open, .closed {background: #32CD32; color:#000; padding:1px 2px;}
						.links a {margin-bottom: 2px;padding-top:3px;}
						.visible {display: block;}
						.hidden {display: none;}
						</style>
						<script language='javascript' type='text/javascript'>
						" ).item( GlobalVars.js_byjax ).str( "\n						" ).item( GlobalVars.js_dropdowns ).str( "\n						function ticker() {\n						    setInterval(function(){\n						        window.location='byond://?src=" ).Ref( this ).str( @"&update_content=1';
						    }, 1000);
						}

						window.onload = function() {
							dropdowns();
							ticker();
						}
						</script>
						</head>
						<body>
						<div id='content'>
						" ).item( this.get_stats_part() ).str( "\n						</div>\n						<div id='eq_list'>\n						" ).item( this.get_equipment_list() ).str( @"
						</div>
						<hr>
						<div id='commands'>
						" ).item( this.get_commands() ).str( @"
						</div>
						</body>
						</html>
					 " ).ToString();
			return output;
		}

		// Function from file: mecha.dm
		public bool internals_access_allowed( Mob H = null ) {
			Ent_Static ID = null;

			
			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { H.get_active_hand(), ((dynamic)H).wear_id, ((dynamic)H).belt }), typeof(Ent_Static) )) {
				ID = _a;
				

				if ( this.check_access( ID, this.internals_req_access ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mecha.dm
		public bool operation_allowed( Mob H = null ) {
			dynamic ID = null;

			
			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { H.get_active_hand(), ((dynamic)H).wear_id, ((dynamic)H).belt }) )) {
				ID = _a;
				

				if ( this.check_access( ID, this.operation_req_access ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mecha.dm
		public void emergency_eject( Ent_Static exit = null ) {
			exit = exit ?? this.loc;

			
			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( this.occupant, new Sound( "sound/machines/warning.ogg", null, false ) );
				this.log_message( "Emergency ejection.", true );
				this.occupant_message( "<font color='red'>Emergency ejection protocol engaged.</font>" );
				Task13.Schedule( 10, (Task13.Closure)(() => {
					
					if ( this.occupant != null ) {
						this.go_out();
					}
					return;
				}));
			}
			return;
		}

		// Function from file: mecha.dm
		public void shock_n_boot( Ent_Static exit = null ) {
			exit = exit ?? this.loc;

			this.spark_system.start();

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( this.occupant, "<span class='danger'>You feel a sharp shock!</span>" );
				((dynamic)this.occupant).Weaken( 10 );
				Task13.Schedule( 10, (Task13.Closure)(() => {
					this.emergency_eject();
					return;
				}));
			}
			return;
		}

		// Function from file: mecha.dm
		public virtual void go_out( Ent_Static exit = null ) {
			exit = exit ?? this.loc;

			Ent_Static mob_container = null;
			Ent_Static brain = null;
			Ent_Static mmi = null;

			
			if ( !( this.occupant != null ) ) {
				return;
			}

			if ( this.occupant is Mob_Living_Carbon_Human ) {
				mob_container = this.occupant;
			} else if ( this.occupant is Mob_Living_Carbon_Brain ) {
				brain = this.occupant;
				mob_container = ((dynamic)brain).container;
			} else {
				return;
			}

			if ( Lang13.Bool( ((dynamic)mob_container).forceMove( exit ) ) ) {
				this.log_message( "" + mob_container + " moved out." );
				((dynamic)this.occupant).reset_view();
				this.empty_bad_contents();
				Interface13.Browse( this.occupant, null, "window=exosuit" );

				if ( mob_container is Obj_Item_Device_Mmi || mob_container is Obj_Item_Device_Mmi_Posibrain ) {
					mmi = mob_container;

					if ( Lang13.Bool( ((dynamic)mmi).brainmob ) ) {
						this.occupant.loc = mmi;
					}
					((dynamic)mmi).mecha = null;
					((dynamic)this.occupant).canmove = 0;
					this.verbs.Add( typeof(Obj_Mecha).GetMethod( "eject" ) );
				}

				if ( Lang13.Bool( ((dynamic)this.occupant).mind ) ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( ((dynamic)this.occupant).mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_rev_icons();
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( ((dynamic)this.occupant).mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_synd_icons();
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( ((dynamic)this.occupant).mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_cult_icons();
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( ((dynamic)this.occupant).mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_wizard_icons();
					}
				}
				this.occupant = null;
				this.icon_state = this.reset_icon() + "-open";
				this.dir = this.dir_in;
			}
			return;
		}

		// Function from file: mecha.dm
		public virtual void empty_bad_contents(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				

				if ( !GlobalFuncs.is_type_in_list( O, this.mech_parts ) ) {
					O.loc = this.loc;
				}
			}
			return;
		}

		// Function from file: mecha.dm
		public virtual bool mmi_moved_inside( dynamic mmi_as_oc = null, dynamic user = null ) {
			Ent_Static brainmob = null;

			Interface13.Stat( null, Map13.FetchInRange( null, 1 ).Contains( !( this.loc == null ) && Lang13.Bool( mmi_as_oc ) && Lang13.Bool( user ) ) );

			if ( false ) {
				
				if ( !Lang13.Bool( mmi_as_oc.brainmob ) || !Lang13.Bool( mmi_as_oc.brainmob.client ) ) {
					GlobalFuncs.to_chat( user, "Consciousness matrix not detected." );
					return false;
				} else if ( Lang13.Bool( mmi_as_oc.brainmob.stat ) ) {
					GlobalFuncs.to_chat( user, "Beta-rhythm below acceptable level." );
					return false;
				}
				((Mob)user).drop_from_inventory( mmi_as_oc );
				brainmob = mmi_as_oc.brainmob;
				((dynamic)brainmob).reset_view( this );
				this.occupant = brainmob;
				brainmob.loc = this;
				((dynamic)brainmob).canmove = 1;
				mmi_as_oc.loc = this;
				mmi_as_oc.mecha = this;
				this.verbs.Remove( typeof(Obj_Mecha).GetMethod( "eject" ) );
				this.Entered( mmi_as_oc );
				this.Move( this.loc );
				this.icon_state = this.reset_icon();
				this.dir = this.dir_in;
				this.log_message( "" + mmi_as_oc + " moved in as pilot." );

				if ( !( this.hasInternalDamage() != 0 ) ) {
					GlobalFuncs.to_chat( this.occupant, new Sound( "sound/mecha/nominalsyndi.ogg", null, null, null, 50 ) );
				}
				return true;
			} else {
				return false;
			}
		}

		// Function from file: mecha.dm
		public bool mmi_move_inside( dynamic mmi_as_oc = null, dynamic user = null ) {
			
			if ( !Lang13.Bool( mmi_as_oc.brainmob ) || !Lang13.Bool( mmi_as_oc.brainmob.client ) ) {
				GlobalFuncs.to_chat( user, "Consciousness matrix not detected." );
				return false;
			} else if ( Lang13.Bool( mmi_as_oc.brainmob.stat ) ) {
				GlobalFuncs.to_chat( user, "Beta-rhythm below acceptable level." );
				return false;
			} else if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, "Occupant detected." );
				return false;
			} else if ( Lang13.Bool( this.dna ) && this.dna != mmi_as_oc.brainmob.dna.unique_enzymes ) {
				GlobalFuncs.to_chat( user, "Stop it!" );
				return false;
			}
			this.visible_message( "<span class='notice'>" + Task13.User + " starts to insert an MMI into " + this.name + "</span>" );

			if ( this.enter_after( 40, user ) ) {
				
				if ( !( this.occupant != null ) ) {
					return this.mmi_moved_inside( mmi_as_oc, user );
				} else {
					GlobalFuncs.to_chat( user, "Occupant detected." );
				}
			} else {
				GlobalFuncs.to_chat( user, "You stop inserting the MMI." );
			}
			return false;
		}

		// Function from file: mecha.dm
		public virtual bool moved_inside( Mob H = null ) {
			Interface13.Stat( null, Map13.FetchInRange( null, 1 ).Contains( !( this.loc == null ) && H != null && H.client != null && H != null ) );

			if ( false ) {
				H.reset_view( this );
				H.stop_pulling();
				H.forceMove( this );
				this.occupant = H;
				this.add_fingerprint( H );
				this.forceMove( this.loc );
				this.log_append_to_last( "" + H + " moved in as pilot." );
				this.icon_state = this.reset_icon();
				this.dir = this.dir_in;
				GlobalFuncs.playsound( this, "sound/mecha/mechentry.ogg", 50, 1 );

				if ( !( this.hasInternalDamage() != 0 ) ) {
					GlobalFuncs.to_chat( this.occupant, new Sound( "sound/mecha/nominalsyndi.ogg", null, null, null, 50 ) );
				}

				if ( H.mind != null ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( H.mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_rev_icons();
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( H.mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_synd_icons();
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( H.mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_cult_icons();
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( H.mind ) );

					if ( false || false ) {
						((GameMode)GlobalVars.ticker.mode).update_all_wizard_icons();
					}
				}
				return true;
			} else {
				return false;
			}
		}

		// Function from file: mecha.dm
		public bool disconnect(  ) {
			dynamic network = null;

			
			if ( !Lang13.Bool( this.connected_port ) ) {
				return false;
			}
			network = this.connected_port.return_network( this );

			if ( Lang13.Bool( network ) ) {
				network.gases.Remove( this.internal_tank.return_air() );
			}
			this.connected_port.connected_device = null;
			this.connected_port = null;
			this.log_message( "Disconnected from gas port." );
			return true;
		}

		// Function from file: mecha.dm
		public bool connect( dynamic new_port = null ) {
			dynamic network = null;

			
			if ( Lang13.Bool( this.connected_port ) || !Lang13.Bool( new_port ) || new_port.connected_device != null ) {
				return false;
			}

			if ( new_port.loc != this.loc ) {
				return false;
			}
			this.connected_port = new_port;
			this.connected_port.connected_device = this;
			network = this.connected_port.return_network( this );

			if ( Lang13.Bool( network ) && !false ) {
				network.gases.Add( this.internal_tank.return_air() );
				network.update = 1;
			}
			this.log_message( "Connected to gas port." );
			return true;
		}

		// Function from file: mecha.dm
		public dynamic return_temperature(  ) {
			dynamic _default = null;

			GasMixture t_air = null;

			_default = 0;

			if ( this.use_internal_tank ) {
				_default = this.cabin_air.return_temperature();
			} else {
				t_air = this.get_turf_air();

				if ( t_air != null ) {
					_default = t_air.return_temperature();
				}
			}
			return _default;
		}

		// Function from file: mecha.dm
		public dynamic return_pressure(  ) {
			dynamic _default = null;

			GasMixture t_air = null;

			_default = 0;

			if ( this.use_internal_tank ) {
				_default = this.cabin_air.return_pressure();
			} else {
				t_air = this.get_turf_air();

				if ( t_air != null ) {
					_default = t_air.return_pressure();
				}
			}
			return _default;
		}

		// Function from file: mecha.dm
		public GasMixture get_turf_air(  ) {
			GasMixture _default = null;

			dynamic T = null;

			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				_default = ((Ent_Static)T).return_air();
			}
			return _default;
		}

		// Function from file: mecha.dm
		public void dynattackby( Obj W = null, Ent_Static user = null ) {
			((dynamic)user).delayNextAttack( 8 );
			this.log_message( "Attacked by " + W + ". Attacker - " + user );

			if ( Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				GlobalFuncs.to_chat( user, "<span class='attack'>The " + W + " bounces off " + this.name + " armor.</span>" );
				this.log_append_to_last( "Armor saved." );
			} else {
				this.occupant_message( "<font color='red'><b>" + user + " hits " + this + " with " + W + ".</b></font>" );
				user.visible_message( "<font color='red'><b>" + user + " hits " + this + " with " + W + ".</b></font>", "<font color='red'><b>You hit " + this + " with " + W + ".</b></font>" );
				this.take_damage( W.force, W.damtype );
				this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
			}
			return;
		}

		// Function from file: mecha.dm
		public void destroy(  ) {
			dynamic T = null;
			Obj_Mecha R = null;
			Obj O = null;
			dynamic WR = null;
			Obj_Item_MechaParts_MechaEquipment E = null;
			Obj_Item_MechaParts_MechaEquipment E2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.go_out();
				T = GlobalFuncs.get_turf( this );
				this.tag = new Txt().Ref( this ).ToString();

				if ( this.loc != null ) {
					this.loc.Exited( this );
				}
				this.loc = null;

				if ( Lang13.Bool( T ) ) {
					
					if ( this is Obj_Mecha_Working_Ripley ) {
						R = this;

						if ( Lang13.Bool( ((dynamic)R).cargo ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( ((dynamic)R).cargo, typeof(Obj) )) {
								O = _a;
								
								O.loc = T;
								((dynamic)R).cargo -= O;
								((Base_Static)T).Entered( O );
							}
						}
					}

					if ( Rand13.PercentChance( 30 ) ) {
						GlobalFuncs.explosion( T, 0, 0, 1, 3 );
					}
					Task13.Schedule( 0, (Task13.Closure)(() => {
						
						if ( this.wreckage != null ) {
							WR = Lang13.Call( this.wreckage, T );

							foreach (dynamic _b in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
								E = _b;
								

								if ( E.salvageable && Rand13.PercentChance( 30 ) ) {
									WR.crowbar_salvage.Add( E );
									E.forceMove( WR );
									E.equip_ready = true;
									E.reliability = Num13.Floor( Rand13.Int( ((int)( E.reliability / 3 )), ((int)( E.reliability )) ) );
								} else {
									E.forceMove( T );
									E.destroy();
								}
							}

							if ( Lang13.Bool( this.cell ) ) {
								WR.crowbar_salvage.Add( this.cell );
								((Ent_Dynamic)this.cell).forceMove( WR );
								this.cell.charge = Rand13.Int( 0, Convert.ToInt32( this.cell.charge ) );
							}

							if ( this.internal_tank != null ) {
								WR.crowbar_salvage.Add( this.internal_tank );
								this.internal_tank.forceMove( WR );
							}
						} else {
							
							foreach (dynamic _c in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
								E2 = _c;
								
								E2.forceMove( T );
								E2.destroy();
							}
						}
						return;
					}));
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
				return;
			}));
			return;
		}

		// Function from file: mecha.dm
		public void dynbulletdamage( Obj_Item_Projectile Proj = null ) {
			bool? ignore_threshold = null;

			
			if ( Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				this.occupant_message( "<span class='notice'>The armor deflects incoming projectile.</span>" );
				this.visible_message( "The " + this.name + " armor deflects the projectile" );
				this.log_append_to_last( "Armor saved." );
				return;
			}

			if ( Proj.flag == "taser" ) {
				this.use_power( 200 );
				return;
			}

			if ( Proj is Obj_Item_Projectile_Beam_Pulse ) {
				ignore_threshold = true;
			}
			this.take_damage( Proj.damage, Proj.flag );
			this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 8, 16, 4 }), ignore_threshold );
			Proj.on_hit( this );
			return;
		}

		// Function from file: mecha.dm
		public void dynhitby( Ent_Static A = null ) {
			Ent_Static M = null;
			Ent_Static O = null;

			
			if ( A is Obj_Item_MechaParts_MechaTracking && !Lang13.Bool( this.tracking ) && Rand13.PercentChance( 25 ) ) {
				((dynamic)A).forceMove( this );
				this.tracking = A;
				this.visible_message( "The " + A + " fastens firmly to " + this + "." );
				return;
			}

			if ( Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) || A is Mob ) {
				this.occupant_message( "<span class='notice'>The " + A + " bounces off the armor.</span>" );
				this.visible_message( "The " + A + " bounces off the " + this.name + " armor" );
				this.log_append_to_last( "Armor saved." );

				if ( A is Mob_Living ) {
					M = A;
					((dynamic)M).take_organ_damage( 10 );
				}
			} else if ( A is Obj ) {
				O = A;

				if ( Lang13.Bool( ((dynamic)O).throwforce ) ) {
					this.take_damage( ((dynamic)O).throwforce );
					this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				}
			}
			return;
		}

		// Function from file: mecha.dm
		public void update_health(  ) {
			
			if ( this.health > 0 ) {
				this.spark_system.start();
			} else {
				this.destroy();
			}
			return;
		}

		// Function from file: mecha.dm
		public dynamic dynabsorbdamage( dynamic damage = null, dynamic damage_type = null ) {
			return damage * ( Lang13.Bool( GlobalFuncs.listgetindex( this.damage_absorption, damage_type ) ) || true );
		}

		// Function from file: mecha.dm
		public dynamic absorbDamage( dynamic damage = null, dynamic damage_type = null ) {
			return Lang13.Call( Lang13.GetLibFunc( Lang13.Bool( this.proc_res["dynabsorbdamage"] ) || this != null, "dynabsorbdamage" ), damage, damage_type );
		}

		// Function from file: mecha.dm
		public void take_damage( dynamic amount = null, dynamic type = null ) {
			type = type ?? "brute";

			dynamic damage = null;

			
			if ( Lang13.Bool( amount ) ) {
				damage = this.absorbDamage( amount, type );
				this.health -= Convert.ToDouble( damage );
				this.update_health();
				this.log_append_to_last( "Took " + damage + " points of damage. Damage type: \"" + type + "\".", true );
			}
			return;
		}

		// Function from file: mecha.dm
		public void clearInternalDamage( dynamic int_dam_flag = null ) {
			this.internal_damage &= Convert.ToInt32( ~int_dam_flag );

			dynamic _a = int_dam_flag; // Was a switch-case, sorry for the mess.
			if ( _a==2 ) {
				this.occupant_message( "<font color='blue'><b>Life support system reactivated.</b></font>" );
				this.pr_int_temp_processor.start();
			} else if ( _a==1 ) {
				this.occupant_message( "<font color='blue'><b>Internal fire extinquished.</b></font>" );
			} else if ( _a==8 ) {
				this.occupant_message( "<font color='blue'><b>Damaged internal tank has been sealed.</b></font>" );
			}
			return;
		}

		// Function from file: mecha.dm
		public void setInternalDamage( dynamic int_dam_flag = null ) {
			this.internal_damage |= Convert.ToInt32( int_dam_flag );
			this.pr_internal_damage.start();
			this.log_append_to_last( "Internal damage of type " + int_dam_flag + ".", true );
			GlobalFuncs.to_chat( this.occupant, new Sound( "sound/machines/warning.ogg", null, false ) );
			return;
		}

		// Function from file: mecha.dm
		public int hasInternalDamage( dynamic int_dam_flag = null ) {
			return ( Lang13.Bool( int_dam_flag ) ? this.internal_damage & Convert.ToInt32( int_dam_flag ) : this.internal_damage );
		}

		// Function from file: mecha.dm
		public void check_for_internal_damage( ByTable possible_int_damage = null, bool? ignore_threshold = null ) {
			dynamic T = null;
			dynamic int_dam_flag = null;
			dynamic destr = null;

			
			if ( !GlobalFuncs.islist( possible_int_damage ) || GlobalFuncs.isemptylist( possible_int_damage ) ) {
				return;
			}

			if ( Rand13.PercentChance( 20 ) ) {
				
				if ( ignore_threshold == true || this.health * 100 / Convert.ToDouble( Lang13.Initial( this, "health" ) ) < this.internal_damage_threshold ) {
					
					foreach (dynamic _a in Lang13.Enumerate( possible_int_damage )) {
						T = _a;
						

						if ( ( this.internal_damage & Convert.ToInt32( T ) ) != 0 ) {
							possible_int_damage.Remove( T );
						}
					}
					int_dam_flag = GlobalFuncs.safepick( possible_int_damage );

					if ( Lang13.Bool( int_dam_flag ) ) {
						this.setInternalDamage( int_dam_flag );
					}
				}
			}

			if ( Rand13.PercentChance( 5 ) ) {
				
				if ( ignore_threshold == true || this.health * 100 / Convert.ToDouble( Lang13.Initial( this, "health" ) ) < this.internal_damage_threshold ) {
					destr = GlobalFuncs.safepick( this.equipment );

					if ( Lang13.Bool( destr ) ) {
						destr.destroy();
					}
				}
			}
			return;
		}

		// Function from file: mecha.dm
		public virtual dynamic mechsteprand(  ) {
			dynamic result = null;

			Map13.StepRandom( this );
			result = null;

			if ( Lang13.Bool( result ) ) {
				GlobalFuncs.playsound( this, GlobalFuncs.get_sfx( "mechstep" ), 40, 1 );
			}
			return result;
		}

		// Function from file: mecha.dm
		public virtual dynamic mechstep( double? direction = null ) {
			dynamic result = null;

			Map13.Step( this, ((int)( direction ??0 )) );
			result = null;

			if ( Lang13.Bool( result ) ) {
				GlobalFuncs.playsound( this, GlobalFuncs.get_sfx( "mechstep" ), 40, 1 );
			}
			return result;
		}

		// Function from file: mecha.dm
		public virtual bool mechturn( double? direction = null ) {
			this.dir = ((int)( direction ??0 ));
			GlobalFuncs.playsound( this, "sound/mecha/mechturn.ogg", 40, 1 );
			return true;
		}

		// Function from file: mecha.dm
		public virtual bool dyndomove( double? direction = null ) {
			bool move_result = false;

			
			if ( !this.can_move ) {
				return false;
			}

			if ( this.pr_inertial_movement.active() ) {
				return false;
			}

			if ( !this.has_charge( this.step_energy_drain ) ) {
				return false;
			}
			move_result = false;

			if ( this.hasInternalDamage( 16 ) != 0 ) {
				move_result = Lang13.Bool( this.mechsteprand() );
			} else if ( this.dir != direction ) {
				move_result = this.mechturn( direction );
			} else {
				move_result = Lang13.Bool( this.mechstep( direction ) );
			}

			if ( move_result ) {
				this.can_move = false;
				this.use_power( this.step_energy_drain );

				if ( this.loc is Tile_Space ) {
					
					if ( !this.check_for_support() ) {
						this.pr_inertial_movement.start( new ByTable(new object [] { this, direction }) );
						this.log_message( "Movement control lost. Inertial movement started." );
					}
				}

				if ( this.do_after( this.step_in ) ) {
					this.can_move = true;
				}
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public dynamic domove( double? direction = null ) {
			return Lang13.Call( Lang13.GetLibFunc( Lang13.Bool( this.proc_res["dyndomove"] ) || this != null, "dyndomove" ), direction );
		}

		// Function from file: mecha.dm
		public virtual void range_action( dynamic target = null ) {
			return;
		}

		// Function from file: mecha.dm
		public virtual void melee_action( dynamic target = null ) {
			return;
		}

		// Function from file: mecha.dm
		public virtual void click_action( dynamic target = null, Mob user = null ) {
			int dir_to_target = 0;

			
			if ( !( this.occupant != null ) || this.occupant != user ) {
				return;
			}

			if ( Lang13.Bool( user.stat ) ) {
				return;
			}

			if ( this.state != 0 ) {
				this.occupant_message( "<font color='red'>Maintenance protocols in effect.</font>" );
				return;
			}

			if ( !Lang13.Bool( this.get_charge() ) ) {
				return;
			}

			if ( this == target ) {
				return;
			}
			dir_to_target = Map13.GetDistance( this, target );

			if ( dir_to_target != 0 && !( ( dir_to_target & this.dir ) != 0 ) ) {
				return;
			}

			if ( this.hasInternalDamage( 16 ) != 0 ) {
				target = GlobalFuncs.safepick( Map13.FetchInView( target, 3 ) );

				if ( !Lang13.Bool( target ) ) {
					return;
				}
			}

			if ( Map13.GetDistance( this, target ) > 1 ) {
				
				if ( Lang13.Bool( this.selected ) && ((Obj_Item_MechaParts_MechaEquipment)this.selected).is_ranged() != 0 ) {
					this.selected.action( target );
				}
			} else if ( Lang13.Bool( this.selected ) && ((Obj_Item_MechaParts_MechaEquipment)this.selected).is_melee() != 0 ) {
				this.selected.action( target );
			} else {
				this.melee_action( target );
			}
			return;
		}

		// Function from file: mecha.dm
		public void drop_item(  ) {
			return;
		}

		// Function from file: mecha.dm
		public bool check_for_support(  ) {
			
			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Grille), Map13.FetchInRangeExcludeThis( this, 1 ) ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), Map13.FetchInRangeExcludeThis( this, 1 ) ) ) || Lang13.Bool( Lang13.FindIn( typeof(Tile_Simulated), Map13.FetchInRangeExcludeThis( this, 1 ) ) ) || Lang13.Bool( Lang13.FindIn( typeof(Tile_Unsimulated), Map13.FetchInRangeExcludeThis( this, 1 ) ) ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: mecha.dm
		public bool enter_after( int delay = 0, dynamic user = null, int? numticks = null ) {
			numticks = numticks ?? 5;

			double delayfraction = 0;
			Ent_Static T = null;
			int? i = null;

			delayfraction = delay / ( numticks ??0);
			T = user.loc;
			i = null;
			i = 0;

			while (( i ??0) < ( numticks ??0)) {
				Task13.Sleep( ((int)( delayfraction )) );

				if ( !( this != null ) || !Lang13.Bool( user ) || !user.canmove || !( user.loc == T ) ) {
					return false;
				}
				i++;
			}
			return true;
		}

		// Function from file: mecha.dm
		public bool do_after( dynamic delay = null ) {
			Task13.Sleep( Convert.ToInt32( delay ) );

			if ( this != null ) {
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public void add_iterators(  ) {
			this.pr_int_temp_processor = new GlobalIterator_MechaPreserveTemp( new ByTable(new object [] { this }) );
			this.pr_inertial_movement = new GlobalIterator_MechaIntertialMovement( null, false );
			this.pr_give_air = new GlobalIterator_MechaTankGiveAir( new ByTable(new object [] { this }) );
			this.pr_internal_damage = new GlobalIterator_MechaInternalDamage( new ByTable(new object [] { this }), false );
			return;
		}

		// Function from file: mecha.dm
		public void add_radio(  ) {
			this.radio = new Obj_Item_Device_Radio(  );
			this.radio.name = "" + this + " radio";
			this.radio.icon = this.icon;
			this.radio.icon_state = this.icon_state;
			this.radio.subspace_transmission = true;
			return;
		}

		// Function from file: mecha.dm
		public GasMixture add_cabin(  ) {
			this.cabin_air = new GasMixture();
			this.cabin_air.temperature = 293.41;
			this.cabin_air.volume = 200;
			this.cabin_air.oxygen = ( this.cabin_air.volume ??0) * 0.01 / ( ( this.cabin_air.temperature ??0) * 8.314 );
			this.cabin_air.nitrogen = ( this.cabin_air.volume ??0) * 0.79 / ( ( this.cabin_air.temperature ??0) * 8.314 );
			return this.cabin_air;
		}

		// Function from file: mecha.dm
		public virtual void add_cell( Ent_Dynamic C = null ) {
			
			if ( C != null ) {
				C.forceMove( this );
				this.cell = C;
				return;
			}
			this.cell = new Obj_Item_Weapon_Cell( this );
			this.cell.charge = 15000;
			this.cell.maxcharge = 15000;
			return;
		}

		// Function from file: mecha.dm
		public Obj_Machinery_PortableAtmospherics_Canister_Air add_airtank(  ) {
			this.internal_tank = new Obj_Machinery_PortableAtmospherics_Canister_Air( this );
			return this.internal_tank;
		}

		// Function from file: mecha.dm
		public void addVerb( dynamic verb_path = null ) {
			this.verbs.Add( verb_path );
			return;
		}

		// Function from file: mecha.dm
		public void removeVerb( System.Reflection.MethodInfo verb_path = null ) {
			this.verbs.Remove( verb_path );
			return;
		}

		// Function from file: mecha.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.go_out();
			GlobalVars.mechas_list.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: mecha.dm
		[Verb]
		[VerbInfo( name: "Eject", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void eject(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}
			this.go_out();
			this.add_fingerprint( Task13.User );
			return;
		}

		// Function from file: mecha.dm
		[Verb]
		[VerbInfo( name: "View Stats", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void view_stats(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}
			Interface13.Browse( this.occupant, this.get_stats_html(), "window=exosuit" );
			return;
		}

		// Function from file: mecha.dm
		[Verb]
		[VerbInfo( name: "Enter Exosuit", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_inside(  ) {
			bool passed = false;
			Mob_Living_Carbon_Slime M = null;

			
			if ( Task13.User.incapacitated() || Task13.User.lying == true ) {
				return;
			}

			if ( !( Task13.User is Mob_Living_Carbon_Human ) ) {
				return;
			}
			this.log_message( "" + Task13.User + " tries to move in." );

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='bnotice'>The " + this.name + " is already occupied!</span>" );
				this.log_append_to_last( "Permission denied." );
				return;
			}

			if ( Lang13.Bool( this.dna ) ) {
				
				if ( Task13.User.dna.unique_enzymes == this.dna ) {
					passed = true;
				}
			} else if ( this.operation_allowed( Task13.User ) ) {
				passed = true;
			}

			if ( !passed ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Access Denied.</span>" );
				this.log_append_to_last( "Permission denied." );
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( Task13.User, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == Task13.User ) {
					GlobalFuncs.to_chat( Task13.User, "You're too busy getting your life sucked out of you." );
					return;
				}
			}
			this.visible_message( "<span class='notice'>" + Task13.User + " starts to climb into " + this.name + "</span>" );

			if ( this.enter_after( 40, Task13.User ) ) {
				
				if ( !( this.occupant != null ) ) {
					this.moved_inside( Task13.User );
				} else if ( this.occupant != Task13.User ) {
					GlobalFuncs.to_chat( Task13.User, "" + this.occupant + " was faster. Try better next time, loser." );
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "You stop entering the exosuit." );
			}
			return;
		}

		// Function from file: mecha.dm
		[Verb]
		[VerbInfo( name: "Toggle internal airtank usage.", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void toggle_internal_tank(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}
			this.use_internal_tank = !this.use_internal_tank;
			this.occupant_message( "Now taking air from " + ( this.use_internal_tank ? "internal airtank" : "environment" ) + "." );
			this.log_message( "Now taking air from " + ( this.use_internal_tank ? "internal airtank" : "environment" ) + "." );
			return;
		}

		// Function from file: mecha.dm
		[Verb]
		[VerbInfo( name: "Toggle Lights", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void toggle_lights(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}
			this.lights = !this.lights;

			if ( this.lights ) {
				this.set_light( this.luminosity + this.lights_power );
			} else {
				this.set_light( this.luminosity - this.lights_power );
			}
			this.occupant_message( "Toggled lights " + ( this.lights ? "on" : "off" ) + "." );
			this.log_message( "Toggled lights " + ( this.lights ? "on" : "off" ) + "." );
			return;
		}

		// Function from file: mecha.dm
		[Verb]
		[VerbInfo( name: "Disconnect from port", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void disconnect_from_port(  ) {
			
			if ( !( this.occupant != null ) ) {
				return;
			}

			if ( Task13.User != this.occupant ) {
				return;
			}

			if ( this.disconnect() ) {
				this.occupant_message( "<span class='notice'>" + this.name + " disconnects from the port.</span>" );
				this.verbs.Remove( typeof(Obj_Mecha).GetMethod( "disconnect_from_port" ) );
				this.verbs.Add( typeof(Obj_Mecha).GetMethod( "connect_to_port" ) );
			} else {
				this.occupant_message( "<span class='warning'>" + this.name + " is not connected to the port at the moment.</span>" );
			}
			return;
		}

		// Function from file: mecha.dm
		[Verb]
		[VerbInfo( name: "Connect to port", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void connect_to_port(  ) {
			dynamic possible_port = null;

			
			if ( !( this.occupant != null ) ) {
				return;
			}

			if ( Task13.User != this.occupant ) {
				return;
			}
			possible_port = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Unary_PortablesConnector), this.loc );

			if ( Lang13.Bool( possible_port ) ) {
				
				if ( this.connect( possible_port ) ) {
					this.occupant_message( "<span class='notice'>" + this.name + " connects to the port.</span>" );
					this.verbs.Add( typeof(Obj_Mecha).GetMethod( "disconnect_from_port" ) );
					this.verbs.Remove( typeof(Obj_Mecha).GetMethod( "connect_to_port" ) );
					return;
				} else {
					this.occupant_message( "<span class='warning'>" + this.name + " failed to connect to the port.</span>" );
					return;
				}
			} else {
				this.occupant_message( "Nothing happens" );
			}
			return;
		}

	}

}