// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Mecha_Combat : Obj_Mecha {

		public int melee_cooldown = 10;
		public bool melee_can_hit = true;
		public ByTable destroyable_obj = new ByTable(new object [] { typeof(Obj_Mecha), typeof(Obj_Structure_Window), typeof(Obj_Structure_Grille), typeof(Tile_Simulated_Wall) });
		public string am = "d3c2fbcadca903a41161ccc9df9cf948";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 30;
			this.maint_access = false;
			this.damage_absorption = new ByTable().Set( "brute", 061 ).Set( "fire", 1 ).Set( "bullet", 061 ).Set( "laser", 0.85 ).Set( "energy", 1 ).Set( "bomb", 0.8 );
		}

		public Obj_Mecha_Combat ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: combat.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			TopicInput filter = null;

			base.Topic( href, href_list, (object)(hclient) );
			filter = new TopicInput( href, href_list );

			if ( Lang13.Bool( filter.get( "close" ) ) ) {
				this.am = null;
				return null;
			}
			return null;
		}

		// Function from file: combat.dm
		public override void go_out( Ent_Static exit = null ) {
			
			if ( this.occupant != null && Lang13.Bool( ((dynamic)this.occupant).client ) ) {
				((dynamic)this.occupant).client.mouse_pointer_icon = Lang13.Initial( ((dynamic)this.occupant).client, "mouse_pointer_icon" );
			}
			base.go_out( exit );
			return;
		}

		// Function from file: combat.dm
		public override bool mmi_moved_inside( dynamic mmi_as_oc = null, dynamic user = null ) {
			
			if ( base.mmi_moved_inside( (object)(mmi_as_oc), (object)(user) ) ) {
				
				if ( Lang13.Bool( ((dynamic)this.occupant).client ) ) {
					((dynamic)this.occupant).client.mouse_pointer_icon = new File( "icons/mouse/mecha_mouse.dmi" );
				}
				return true;
			} else {
				return false;
			}
		}

		// Function from file: combat.dm
		public override bool moved_inside( Mob H = null ) {
			
			if ( base.moved_inside( H ) ) {
				
				if ( H.client != null ) {
					H.client.mouse_pointer_icon = new File( "icons/mouse/mecha_mouse.dmi" );
				}
				return true;
			} else {
				return false;
			}
		}

		// Function from file: combat.dm
		public override void melee_action( dynamic target = null ) {
			dynamic M = null;
			dynamic H = null;
			dynamic temp = null;
			int update = 0;
			dynamic target_type = null;

			
			if ( ( this.internal_damage & 16 ) != 0 ) {
				target = GlobalFuncs.safepick( Map13.FetchInViewExcludeThis( this, 1 ) );
			}

			if ( !this.melee_can_hit || !( target is Ent_Static ) ) {
				return;
			}

			if ( target is Mob_Living ) {
				M = target;

				if ( ((dynamic)this.occupant).a_intent == "hurt" ) {
					GlobalFuncs.playsound( this, "sound/mecha/mechsmash.ogg", 50, 1 );

					if ( this.damtype == "brute" ) {
						Map13.StepAway( M, this, 15 );
					}

					if ( target is Mob_Living_Carbon_Human ) {
						H = target;
						temp = ((Mob_Living_Carbon_Human)H).get_organ( Rand13.Pick(new object [] { "chest", "chest", "chest", "head" }) );

						if ( Lang13.Bool( temp ) ) {
							update = 0;

							dynamic _a = this.damtype; // Was a switch-case, sorry for the mess.
							if ( _a=="brute" ) {
								((Mob)H).Paralyse( 1 );
								update |= Convert.ToInt32( temp.take_damage( Rand13.Int( Convert.ToInt32( this.force / 2 ), Convert.ToInt32( this.force ) ), 0 ) );
							} else if ( _a=="fire" ) {
								update |= Convert.ToInt32( temp.take_damage( 0, Rand13.Int( Convert.ToInt32( this.force / 2 ), Convert.ToInt32( this.force ) ) ) );
							} else if ( _a=="tox" ) {
								
								if ( Lang13.Bool( H.reagents ) ) {
									
									if ( ( ((Reagents)H.reagents).get_reagent_amount( "carpotoxin" ) ?1:0) + Convert.ToDouble( this.force ) < Convert.ToDouble( this.force * 2 ) ) {
										((Reagents)H.reagents).add_reagent( "carpotoxin", this.force );
									}

									if ( ( ((Reagents)H.reagents).get_reagent_amount( "cryptobiolin" ) ?1:0) + Convert.ToDouble( this.force ) < Convert.ToDouble( this.force * 2 ) ) {
										((Reagents)H.reagents).add_reagent( "cryptobiolin", this.force );
									}
								}
							} else {
								return;
							}

							if ( update != 0 ) {
								((Mob_Living)H).UpdateDamageIcon( true );
							}
						}
						((Mob_Living)H).updatehealth();
					} else {
						
						dynamic _b = this.damtype; // Was a switch-case, sorry for the mess.
						if ( _b=="brute" ) {
							((Mob)M).Paralyse( 1 );
							((Mob_Living)M).take_overall_damage( Rand13.Int( Convert.ToInt32( this.force / 2 ), Convert.ToInt32( this.force ) ) );
						} else if ( _b=="fire" ) {
							((Mob_Living)M).take_overall_damage( 0, Rand13.Int( Convert.ToInt32( this.force / 2 ), Convert.ToInt32( this.force ) ) );
						} else if ( _b=="tox" ) {
							
							if ( Lang13.Bool( M.reagents ) ) {
								
								if ( ( ((Reagents)M.reagents).get_reagent_amount( "carpotoxin" ) ?1:0) + Convert.ToDouble( this.force ) < Convert.ToDouble( this.force * 2 ) ) {
									((Reagents)M.reagents).add_reagent( "carpotoxin", this.force );
								}

								if ( ( ((Reagents)M.reagents).get_reagent_amount( "cryptobiolin" ) ?1:0) + Convert.ToDouble( this.force ) < Convert.ToDouble( this.force * 2 ) ) {
									((Reagents)M.reagents).add_reagent( "cryptobiolin", this.force );
								}
							}
						} else {
							return;
						}
						((Mob_Living)M).updatehealth();
					}
					this.occupant_message( "You hit " + target + "." );
					this.visible_message( "<font color='red'><b>" + this.name + " hits " + target + ".</b></font>" );
				} else {
					Map13.StepAway( M, this, null );
					this.occupant_message( "You push " + target + " out of the way." );
					this.visible_message( "" + this + " pushes " + target + " out of the way." );
				}
				this.melee_can_hit = false;

				if ( this.do_after( this.melee_cooldown ) ) {
					this.melee_can_hit = true;
				}
				return;
			} else if ( this.damtype == "brute" ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.destroyable_obj )) {
					target_type = _c;
					

					if ( Lang13.Bool( target_type.IsInstanceOfType( target ) ) && Lang13.HasCall( target, "attackby" ) ) {
						this.occupant_message( "You hit " + target + "." );
						this.visible_message( "<font color='red'><b>" + this.name + " hits " + target + "</b></font>" );

						if ( !( target is Tile_Simulated_Wall ) ) {
							((Ent_Static)target).attackby( this, this.occupant );
						} else if ( Rand13.PercentChance( 5 ) ) {
							((Tile)target).dismantle_wall( true );
							this.occupant_message( "<span class='notice'>You smash through the wall.</span>" );
							this.visible_message( "<b>" + this.name + " smashes through the wall</b>" );
							GlobalFuncs.playsound( this, "sound/weapons/smash.ogg", 50, 1 );
						}
						this.melee_can_hit = false;

						if ( this.do_after( this.melee_cooldown ) ) {
							this.melee_can_hit = true;
						}
						break;
					}
				}
			}
			return;
		}

	}

}