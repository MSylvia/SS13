// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_DoorControl_Taxi : Obj_Machinery_DoorControl {

		public string destination = null;
		public Obj_Machinery_Computer_TaxiShuttle connected_computer = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 67 });
		}

		// Function from file: taxi_buttons.dm
		public Obj_Machinery_DoorControl_Taxi ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: taxi_buttons.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Shuttle_Taxi T = null;
			int wait_time = 0;

			this.add_fingerprint( Task13.User );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !( this.connected_computer != null ) ) {
				a.show_message( "<span class='warning'>No request could be made to the Taxi Computer! Make contact with Centcomm to report them the issue!</span>", 2 );
				this.initialize();
				return null;
			}
			T = this.connected_computer.shuttle;

			if ( !( T != null ) ) {
				a.show_message( "<span class='warning'>The Taxi Computer was unable to enstablish connection with the taxi shuttle. Please contact tech support.</span>" );
				return null;
			}
			wait_time = T.move_time_access;

			if ( !this.allowed( a ) && ( this.wires & 1 ) != 0 ) {
				wait_time = T.move_time_no_access;
			}
			this.f_use_power( 5 );
			this.icon_state = "doorctrl1";
			this.add_fingerprint( a );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( !this.connected_computer.callTo( this.destination, wait_time ) ) {
					
					if ( Convert.ToDouble( T.cooldown - ( Game13.time - T.last_moved ) ) > 0 ) {
						this.visible_message( new Txt( "Taxi engines are on cooldown for the next " ).item( Num13.Floor( Convert.ToDouble( ( T.cooldown - ( Game13.time - T.last_moved ) ) / 10 ) ) ).str( " second" ).s().str( ". Please wait before trying again." ).ToString() );
					}
				}
				return;
			}));
			Task13.Schedule( 30, (Task13.Closure)(() => {
				this.icon_state = Lang13.Initial( this, "icon_state" );
				return;
			}));
			return null;
		}

		// Function from file: taxi_buttons.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			Obj_Machinery_Computer_TaxiShuttle TS = null;

			base.initialize( suppress_icon_check );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.taxi_computers, typeof(Obj_Machinery_Computer_TaxiShuttle) )) {
				TS = _a;
				

				if ( this.id_tag == TS.id_tag ) {
					this.connected_computer = TS;

					if ( !this.connected_computer.connected_buttons.Contains( this ) ) {
						this.connected_computer.connected_buttons.Add( this );
					}
					break;
				}
			}
			return false;
		}

	}

}