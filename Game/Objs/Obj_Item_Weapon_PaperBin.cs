// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_PaperBin : Obj_Item_Weapon {

		public int amount = 30;
		public ByTable papers = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "sheet-metal";
			this.throw_speed = 3;
			this.pressure_resistance = 8;
			this.burn_state = 0;
			this.icon = "icons/obj/bureaucracy.dmi";
			this.icon_state = "paper_bin1";
		}

		public Obj_Item_Weapon_PaperBin ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: paperbin.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.amount < 1 ) {
				this.icon_state = "paper_bin0";
			} else {
				this.icon_state = "paper_bin1";
			}
			return false;
		}

		// Function from file: paperbin.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.amount != 0 ) {
				user.WriteMsg( "It contains " + ( this.amount > 1 ? "" + this.amount + " papers" : " one paper" ) + "." );
			} else {
				user.WriteMsg( "It doesn't contain anything." );
			}
			return 0;
		}

		// Function from file: paperbin.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !( A is Obj_Item_Weapon_Paper ) ) {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}

			if ( !((Mob)user).unEquip( A ) ) {
				return null;
			}
			A.loc = this;
			user.WriteMsg( "<span class='notice'>You put " + A + " in " + this + ".</span>" );
			this.papers.Add( A );
			this.amount++;
			this.update_icon();
			return null;
		}

		// Function from file: paperbin.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Obj_Item_Weapon_Paper P = null;

			
			if ( Lang13.Bool( a.lying ) ) {
				return null;
			}
			((Mob)a).changeNext_move( 8 );

			if ( this.amount >= 1 ) {
				this.amount--;
				this.update_icon();

				if ( this.papers.len > 0 ) {
					P = this.papers[this.papers.len];
					this.papers.Remove( P );
				} else {
					P = new Obj_Item_Weapon_Paper();

					if ( Lang13.Bool( GlobalVars.SSevent.holidays ) && Lang13.Bool( GlobalVars.SSevent.holidays["April Fool's Day"] ) ) {
						
						if ( Rand13.PercentChance( 30 ) ) {
							P.info = "<font face=\"" + "Comic Sans MS" + "\" color=\"red\"><b>HONK HONK HONK HONK HONK HONK HONK<br>HOOOOOOOOOOOOOOOOOOOOOONK<br>APRIL FOOLS</b></font>";
							P.rigged = true;
							P.updateinfolinks();
						}
					}
				}
				P.loc = a.loc;
				((Mob)a).put_in_hands( P );
				a.WriteMsg( new Txt( "<span class='notice'>You take " ).item( P ).str( " out of " ).the( this ).item().str( ".</span>" ).ToString() );
			} else {
				a.WriteMsg( "<span class='warning'>" + this + " is empty!</span>" );
			}
			this.add_fingerprint( a );
			return null;
		}

		// Function from file: paperbin.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: paperbin.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			Mob M = null;

			M = Task13.User;

			if ( M.incapacitated() || !this.Adjacent( M ) ) {
				return null;
			}

			if ( over == M ) {
				M.put_in_hands( this );
			} else if ( over is Obj_Screen ) {
				
				dynamic _a = over.name; // Was a switch-case, sorry for the mess.
				if ( _a=="r_hand" ) {
					
					if ( !this.remove_item_from_storage( M ) ) {
						M.unEquip( this );
					}
					M.put_in_r_hand( this );
				} else if ( _a=="l_hand" ) {
					
					if ( !this.remove_item_from_storage( M ) ) {
						M.unEquip( this );
					}
					M.put_in_l_hand( this );
				}
			}
			this.add_fingerprint( M );
			return null;
		}

		// Function from file: paperbin.dm
		public override void burn(  ) {
			this.amount = 0;
			this.extinguish();
			this.update_icon();
			return;
		}

		// Function from file: paperbin.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			
			if ( !( this.amount != 0 ) ) {
				return false;
			}
			base.fire_act( air, (object)(exposed_temperature), exposed_volume );
			return false;
		}

	}

}