// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Weapon_Ballistic_Lmg : Obj_Item_MechaParts_MechaEquipment_Weapon_Ballistic {

		public int projectiles_per_shot = 3;
		public double deviation = 0.3;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.equip_cooldown = 10;
			this.projectile = typeof(Obj_Item_Projectile_Bullet_Weakbullet);
			this.fire_sound = "sound/weapons/Gunshot_smg.ogg";
			this.projectiles = 300;
			this.projectile_energy_cost = 20;
			this.icon_state = "mecha_uac2";
		}

		public Obj_Item_MechaParts_MechaEquipment_Weapon_Ballistic_Lmg ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: weapons.dm
		public override bool action( dynamic target = null ) {
			dynamic targloc = null;
			int target_x = 0;
			int target_y = 0;
			int target_z = 0;
			double i = 0;
			dynamic curloc = null;
			dynamic A = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}
			targloc = GlobalFuncs.get_turf( target );
			target_x = Convert.ToInt32( targloc.x );
			target_y = Convert.ToInt32( targloc.y );
			target_z = Convert.ToInt32( targloc.z );
			targloc = null;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, Num13.MinInt( this.projectiles, this.projectiles_per_shot ) )) {
					i = _a;
					

					if ( !( this.chassis != null ) ) {
						break;
					}
					curloc = GlobalFuncs.get_turf( this.chassis );
					targloc = Map13.GetTile( ((int)( target_x + GlobalFuncs.GaussRandRound( this.deviation, 1 ) )), ((int)( target_y + GlobalFuncs.GaussRandRound( this.deviation, 1 ) )), target_z );

					if ( !Lang13.Bool( targloc ) || !Lang13.Bool( curloc ) ) {
						continue;
					}

					if ( targloc == curloc ) {
						continue;
					}
					GlobalFuncs.playsound( this.chassis, this.fire_sound, 50, 1 );
					A = Lang13.Call( this.projectile, curloc );
					this.projectiles--;
					A.original = target;
					A.current = curloc;
					A.starting = curloc;
					A.yo = Convert.ToDouble( targloc.y - curloc.y );
					A.xo = Convert.ToDouble( targloc.x - curloc.x );
					((Obj_Item_Projectile)A).OnFired();
					((Obj)A).process();
					Task13.Sleep( 2 );
				}
				return;
			}));
			this.set_ready_state( false );
			this.log_message( "Fired from " + this.name + ", targeting " + target + "." );
			this.do_after_cooldown();
			return false;
		}

	}

}