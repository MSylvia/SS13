// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Spellbook : Obj_Item_Weapon {

		public int uses = 5;
		public dynamic temp = null;
		public int max_uses = 5;
		public bool op = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throw_speed = 1;
			this.throw_range = 5;
			this.w_class = 1;
			this.icon = "icons/obj/library.dmi";
			this.icon_state = "spellbook";
		}

		public Obj_Item_Weapon_Spellbook ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: spellbook.dm
		public void add_spell( Spell spell_to_add = null, Mob user = null ) {
			
			if ( user.mind != null ) {
				
				if ( !( user.mind.wizard_spells != null ) ) {
					user.mind.wizard_spells = new ByTable();
				}
				user.mind.wizard_spells.Add( spell_to_add );
			}
			user.add_spell( spell_to_add );
			return;
		}

		// Function from file: spellbook.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob H = null;
			dynamic A = null;
			ByTable available_spells = null;
			bool already_knows = false;
			Spell aspell = null;
			string choice = null;
			Obj_Item_Clothing_Head_Helmet_Space_Santahat santahat = null;
			Obj_Item_Clothing_Suit_Space_Santa santasuit = null;
			Obj_Item_Weapon_Storage_Backpack_Santabag santabag = null;

			base.Topic( href, href_list, (object)(hclient) );
			H = Task13.User;

			if ( Lang13.Bool( H.stat ) || H.restrained() ) {
				return null;
			}

			if ( !( H is Mob_Living_Carbon_Human ) ) {
				return 1;
			}

			if ( H.mind.special_role == "apprentice" ) {
				this.temp = "If you got caught sneaking a peak from your teacher's spellbook, you'd likely be expelled from the Wizard Academy. Better not.";
				return null;
			}

			if ( this.loc == H || GlobalFuncs.in_range( this, H ) && this.loc is Tile ) {
				H.set_machine( this );

				if ( Lang13.Bool( href_list["spell_choice"] ) ) {
					
					if ( href_list["spell_choice"] == "rememorize" ) {
						A = Lang13.FindObj( typeof(Zone_WizardStation) );
						Interface13.Stat( null, A.contents.Contains( Task13.User ) );

						if ( false ) {
							this.uses = this.max_uses;
							H.spellremove( Task13.User );
							this.temp = "All spells have been removed. You may now memorize a new set of spells.";
							GlobalFuncs.feedback_add_details( "wizard_spell_learned", "UM" );
						} else {
							this.temp = "You may only re-memorize spells whilst located inside the wizard sanctuary.";
						}
					} else if ( this.uses >= 1 && this.max_uses >= 1 ) {
						
						if ( href_list["spell_choice"] == "noclothes" ) {
							
							if ( this.uses < 2 ) {
								return null;
							}
						}
						this.uses--;
						available_spells = new ByTable()
							.Set( "magicmissile", "Magic Missile" )
							.Set( "fireball", "Fireball" )
							.Set( "lightning", "Lightning" )
							.Set( "disintegrate", "Disintegrate" )
							.Set( "disabletech", "Disable Tech" )
							.Set( "smoke", "Smoke" )
							.Set( "blind", "Blind" )
							.Set( "subjugation", "Subjugation" )
							.Set( "mindswap", "Mind Transfer" )
							.Set( "forcewall", "Forcewall" )
							.Set( "blink", "Blink" )
							.Set( "teleport", "Teleport" )
							.Set( "mutate", "Mutate" )
							.Set( "etherealjaunt", "Ethereal Jaunt" )
							.Set( "knock", "Knock" )
							.Set( "horseman", "Curse of the Horseman" )
							.Set( "frenchcurse", "The French Curse" )
							.Set( "summonguns", "Summon Guns" )
							.Set( "staffchange", "Staff of Change" )
							.Set( "mentalfocus", "Mental Focus" )
							.Set( "soulstone", "Six Soul Stone Shards and the spell Artificer" )
							.Set( "armor", "Mastercrafted Armor Set" )
							.Set( "staffanimate", "Staff of Animation" )
							.Set( "noclothes", "No Clothes" )
							.Set( "fleshtostone", "Flesh to Stone" )
							.Set( "arsenath", "Butt-Bot's Revenge" )
							.Set( "timestop", "Time Stop" )
						;
						already_knows = false;

						foreach (dynamic _b in Lang13.Enumerate( H.spell_list, typeof(Spell) )) {
							aspell = _b;
							

							if ( available_spells[href_list["spell_choice"]] == Lang13.Initial( aspell, "name" ) ) {
								already_knows = true;

								if ( !aspell.can_improve() ) {
									this.temp = "This spell cannot be improved further.";
									this.uses++;
									break;
								} else if ( aspell.can_improve( "speed" ) && aspell.can_improve( "power" ) ) {
									choice = Interface13.Alert( Task13.User, "Do you want to upgrade this spell's speed or power?", "Select Upgrade", "Speed", "Power", "Cancel" );

									switch ((string)( choice )) {
										case "Speed":
											this.temp = aspell.quicken_spell();
											break;
										case "Power":
											this.temp = aspell.empower_spell();
											break;
										default:
											this.uses++;
											break;
											break;
									}
								} else if ( aspell.can_improve( "speed" ) ) {
									this.temp = aspell.quicken_spell();
								} else if ( aspell.can_improve( "power" ) ) {
									this.temp = aspell.empower_spell();
								}
							}
						}

						if ( !already_knows ) {
							
							dynamic _c = href_list["spell_choice"]; // Was a switch-case, sorry for the mess.
							if ( _c=="becomesanta" ) {
								santahat = new Obj_Item_Clothing_Head_Helmet_Space_Santahat();
								santahat.canremove = false;
								santasuit = new Obj_Item_Clothing_Suit_Space_Santa();
								santasuit.canremove = false;
								santabag = new Obj_Item_Weapon_Storage_Backpack_Santabag();
								santabag.canremove = false;
								GlobalFuncs.to_chat( typeof(Game13), "sound/misc/santa.ogg" );
								GlobalFuncs.SetUniversalState( typeof(UniversalState_Christmas) );

								if ( Lang13.Bool( ((dynamic)H).head ) ) {
									H.drop_from_inventory( ((dynamic)H).head );
								}
								H.equip_to_slot( santahat, 11 );

								if ( Lang13.Bool( H.back ) ) {
									H.drop_from_inventory( H.back );
								}

								if ( Lang13.Bool( ((dynamic)H).wear_suit ) ) {
									H.drop_from_inventory( ((dynamic)H).wear_suit );
								}
								H.equip_to_slot( santabag, 1 );
								H.equip_to_slot( santasuit, 13 );
								H.real_name = Rand13.Pick(new object [] { "Santa Claus", "Jolly St. Nick", "Sandy Claws", "Sinterklaas", "Father Christmas", "Kris Kringle" });
								H.nutrition += 1000;
								this.temp = "Let's come to town.";
								this.uses -= 2;
								this.add_spell( new Spell_Noclothes(), H );
								this.add_spell( new Spell_AoeTurf_Conjure_Snowmobile(), H );
								this.add_spell( new Spell_Targeted_WrappingPaper(), H );
								this.add_spell( new Spell_AoeTurf_Conjure_Gingerbreadman(), H );
								this.add_spell( new Spell_Targeted_FleshToCoal(), H );
							} else if ( _c=="noclothes" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "NC" );
								this.add_spell( new Spell_Noclothes(), H );
								this.temp = "This teaches you how to use your spells without your magical garb, truely you are the wizardest.";
								this.uses--;
							} else if ( _c=="magicmissile" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "MM" );
								this.add_spell( new Spell_Targeted_Projectile_MagicMissile(), H );
								this.temp = "You have learned magic missile.";
							} else if ( _c=="fireball" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "FB" );
								this.add_spell( new Spell_Targeted_Projectile_Dumbfire_Fireball(), H );
								this.temp = "You have learned fireball.";
							} else if ( _c=="lightning" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "LS" );
								this.add_spell( new Spell_Lightning(), H );
								this.temp = "You have learned lightning.";
							} else if ( _c=="timestop" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "MS" );
								this.add_spell( new Spell_AoeTurf_Fall(), H );
								this.temp = "You have learned time stop.";
							} else if ( _c=="disabletech" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "DT" );
								this.add_spell( new Spell_AoeTurf_DisableTech(), H );
								this.temp = "You have learned disable technology.";
							} else if ( _c=="smoke" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SM" );
								this.add_spell( new Spell_AoeTurf_Smoke(), H );
								this.temp = "You have learned smoke.";
							} else if ( _c=="blind" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "BD" );
								this.add_spell( new Spell_Targeted_Genetic_Blind(), H );
								this.temp = "You have learned blind.";
							} else if ( _c=="subjugation" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SJ" );
								this.add_spell( new Spell_Targeted_Subjugation(), H );
								this.temp = "You have learned subjugate.";
							} else if ( _c=="mindswap" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "MT" );
								this.add_spell( new Spell_Targeted_MindTransfer(), H );
								this.temp = "You have learned mindswap.";
							} else if ( _c=="forcewall" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "FW" );
								this.add_spell( new Spell_AoeTurf_Conjure_Forcewall(), H );
								this.temp = "You have learned forcewall.";
							} else if ( _c=="blink" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "BL" );
								this.add_spell( new Spell_AoeTurf_Blink(), H );
								this.temp = "You have learned blink.";
							} else if ( _c=="teleport" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "TP" );
								this.add_spell( new Spell_AreaTeleport(), H );
								this.temp = "You have learned teleport.";
							} else if ( _c=="mutate" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "MU" );
								this.add_spell( new Spell_Targeted_Genetic_Mutate(), H );
								this.temp = "You have learned mutate.";
							} else if ( _c=="etherealjaunt" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "EJ" );
								this.add_spell( new Spell_Targeted_EtherealJaunt(), H );
								this.temp = "You have learned ethereal jaunt.";
							} else if ( _c=="knock" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "KN" );
								this.add_spell( new Spell_AoeTurf_Knock(), H );
								this.temp = "You have learned knock.";
							} else if ( _c=="horseman" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "HH" );
								this.add_spell( new Spell_Targeted_EquipItem_Horsemask(), H );
								this.temp = "You have learned curse of the horseman.";
							} else if ( _c=="frenchcurse" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "FC" );
								this.add_spell( new Spell_Targeted_EquipItem_Frenchcurse(), H );
								this.temp = "You have learned the french curse.";
							} else if ( _c=="clowncurse" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "CC" );
								this.add_spell( new Spell_Targeted_EquipItem_Clowncurse(), H );
								this.temp = "You have learned the clown curse.";
							} else if ( _c=="shoesnatch" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SS" );
								this.add_spell( new Spell_Targeted_Shoesnatch(), H );
								this.temp = "You have learned the shoe snatching charm.";
							} else if ( _c=="robesummon" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "RS" );
								this.add_spell( new Spell_Targeted_EquipItem_Robesummon(), H );
								this.temp = "you have learned summon robes.";
							} else if ( _c=="fleshtostone" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "FS" );
								this.add_spell( new Spell_Targeted_FleshToStone(), H );
								this.temp = "You have learned flesh to stone.";
							} else if ( _c=="arsenath" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "AN" );
								this.add_spell( new Spell_Targeted_ButtbotsRevenge(), H );
								this.temp = "You have learned butt-bot's revenge.";
							} else if ( _c=="summonguns" ) {
								
								if ( !GlobalVars.ticker.mode.rage ) {
									GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SG" );
									H.rightandwrong( false );
									this.max_uses--;
									this.temp = "You have cast summon guns.";
								} else {
									GlobalFuncs.log_admin( "" + Task13.User + "(" + Task13.User.key + ") used an href to try and summon guns during ragin mages." );
									this.uses++;
								}
							} else if ( _c=="summonmagic" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SU" );
								H.rightandwrong( true );
								this.max_uses--;
								this.temp = "You have cast summon magic.";
							} else if ( _c=="staffchange" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "ST" );
								new Obj_Item_Weapon_Gun_Energy_Staff( GlobalFuncs.get_turf( H ) );
								this.temp = "You have purchased a staff of change.";
								this.max_uses--;
							} else if ( _c=="mentalfocus" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "MF" );
								new Obj_Item_Weapon_Gun_Energy_Staff_Focus( GlobalFuncs.get_turf( H ) );
								this.temp = "An artefact that channels the will of the user into destructive bolts of force.";
								this.max_uses--;
							} else if ( _c=="soulstone" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SS" );
								new Obj_Item_Weapon_Storage_Belt_Soulstone_Full( GlobalFuncs.get_turf( H ) );
								this.add_spell( new Spell_AoeTurf_Conjure_Construct(), H );
								H.add_language( "Cult" );
								this.temp = "You have purchased a belt full of soulstones and have learned the artificer spell.";
								this.max_uses--;
							} else if ( _c=="armor" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "HS" );
								new Obj_Item_Clothing_Shoes_Sandal( GlobalFuncs.get_turf( H ) );
								new Obj_Item_Clothing_Gloves_Purple( GlobalFuncs.get_turf( H ) );
								new Obj_Item_Clothing_Suit_Space_Rig_Wizard( GlobalFuncs.get_turf( H ) );
								new Obj_Item_Clothing_Head_Helmet_Space_Rig_Wizard( GlobalFuncs.get_turf( H ) );
								this.temp = "You have purchased a suit of wizard armor.";
								this.max_uses--;
							} else if ( _c=="staffanimation" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SA" );
								new Obj_Item_Weapon_Gun_Energy_Staff_Animate( GlobalFuncs.get_turf( H ) );
								this.temp = "You have purchased a staff of animation.";
								this.max_uses--;
							} else if ( _c=="staffnecro" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SN" );
								new Obj_Item_Weapon_Staff_Necro( GlobalFuncs.get_turf( H ) );
								this.temp = "You have purchased a staff of necromancy.";
								this.max_uses--;
							} else if ( _c=="contract" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "CT" );
								new Obj_Item_Weapon_AntagSpawner_Contract( GlobalFuncs.get_turf( H ) );
								this.temp = "You have purchased a contract of apprenticeship.";
								this.max_uses--;
							} else if ( _c=="scrying" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "SO" );
								new Obj_Item_Weapon_Scrying( GlobalFuncs.get_turf( H ) );
								Interface13.Stat( null, H.mutations.Contains( 3 ) );

								if ( !false ) {
									H.mutations.Add( 3 );
									H.sight |= 28;
									H.see_in_dark = 8;
									H.see_invisible = 45;
									GlobalFuncs.to_chat( H, "<span class='notice'>The walls suddenly disappear.</span>" );
								}
								this.temp = "You have purchased a scrying orb, and gained x-ray vision.";
								this.max_uses--;
							} else if ( _c=="chariot" ) {
								GlobalFuncs.feedback_add_details( "wizard_spell_learned", "WM" );
								this.add_spell( new Spell_AoeTurf_Conjure_Pontiac(), H );
								this.temp = "This spell summons a glorious, flaming chariot that can move in space and through walls.  It also has an extremely long cooldown.";
							}
						}
					}
				} else if ( Lang13.Bool( href_list["temp"] ) ) {
					this.temp = null;
				}
				this.attack_self();
			}
			return null;
		}

		// Function from file: spellbook.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			user = user ?? Task13.User;

			string dat = null;

			
			if ( !Lang13.Bool( user ) ) {
				return null;
			}
			((Mob)user).set_machine( this );

			if ( Lang13.Bool( this.temp ) ) {
				dat = new Txt().item( this.temp ).str( "<BR><BR><A href='byond://?src=" ).Ref( this ).str( ";temp=1'>Clear</A>" ).ToString();
			} else {
				dat = new Txt( "<B>The Book of Spells:</B><BR>\n			Spells left to memorize: " ).item( this.uses ).str( @"<BR>
			<HR>
			<B>Memorize which spell:</B><BR>
			<I>The number after the spell name is the cooldown time.</I><BR>
			" ).item( ( GlobalVars.Holiday == "Christmas" && GlobalVars.universe.name == "Normal" ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=becomesanta'>Become Santa Claus</A> (One time use, uses three points, global spell)<BR><I>Guess which station's on the naughty list?</I><BR>" ).ToString() : "" ) ).str( "\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=magicmissile'>Magic Missile</A> (10)<BR>\n			<I>This spell fires several, slow moving, magic projectiles at nearby targets. If they hit a target, it is paralyzed and takes minor damage.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=fireball'>Fireball</A> (10)<BR>\n			<I>This spell fires a fireball in the direction you're facing and does not require wizard garb. Be careful not to fire it at people that are standing next to you.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=lightning'>Lightning</A> (20)<BR>\n			<I>Become Zeus and throw lightning at your foes, once you've charged the spell focus it upon any being to unleash electric fury. Upgrading this will cause your lightning to arc.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=disabletech'>Disable Technology</A> (60)<BR>\n			<I>This spell disables all weapons, cameras and most other technology in range.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=smoke'>Smoke</A> (10)<BR>\n			<I>This spell spawns a cloud of choking smoke at your location and does not require wizard garb.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=blind'>Blind</A> (30)<BR>\n			<I>This spell temporarly blinds a single person and does not require wizard garb.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=subjugation'>Subjugation</A> (30)<BR>\n			<I>This spell temporarily subjugates a target's mind and does not require wizard garb.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=mindswap'>Mind Transfer</A> (60)<BR>\n			<I>This spell allows the user to switch bodies with a target. Careful to not lose your memory in the process.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=forcewall'>Forcewall</A> (10)<BR>\n			<I>This spell creates an unbreakable wall that lasts for 30 seconds and does not need wizard garb.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=blink'>Blink</A> (2)<BR>\n			<I>This spell randomly teleports you a short distance. Useful for evasion or getting into areas if you have patience.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=teleport'>Teleport</A> (60)<BR>\n			<I>This spell teleports you to a type of area of your selection. Very useful if you are in danger, but has a decent cooldown, and is unpredictable.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=mutate'>Mutate</A> (60)<BR>\n			<I>This spell causes you to turn into a hulk and gain telekinesis for a short while.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=etherealjaunt'>Ethereal Jaunt</A> (60)<BR>\n			<I>This spell creates your ethereal form, temporarily making you invisible and able to pass through walls.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=timestop'>Time Stop</A> (90)<BR>\n			<I>Stop the flow of time for all beings but yourself in a large radius.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=knock'>Knock</A> (10)<BR>\n			<I>This spell opens nearby doors and does not require wizard garb.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=horseman'>Curse of the Horseman</A> (15)<BR>\n			<I>This spell will curse a person to wear an unremovable horse mask (it has glue on the inside) and speak like a horse. It does not require wizard garb.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=frenchcurse'>The French Curse</A> (30)<BR>\n			<I>This spell silences sombody adjacent to you, and curses them with an unremovable Mime costume. It does not require robes to cast.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=clowncurse'>The Clown Curse</A> (30)<BR>\n			<I>This spell turns an adjacent target into a miserable clown. This spell does not require robes to cast.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=shoesnatch'>Shoe Snatching Charm</A> (15)<BR>\n			<I>This spell will remove your victim's shoes and materialize them in your hands. This spell does not require robes to cast.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=robesummon'>Summon Robes</A> (50)<BR>\n			<I>This spell will allow you to summon a new set of robes. Useful for stealthy wizards. This spell (quite obviously) does not require robes to cast.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=fleshtostone'>Flesh to Stone</A> (60)<BR>\n			<I>This spell will curse a person to immediately turn into an unmoving statue. The effect will eventually wear off if the statue is not destroyed.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=arsenath'>Butt-Bot's Revenge</A> (50)<BR>\n			<I>Summon the power of the butt gods to remove the anus of your enemy.</I><BR>\n			" ).item( ( !GlobalVars.ticker.mode.rage ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=summonguns'>Summon Guns</A> (One time use, global spell)<BR><I>Nothing could possibly go wrong with arming a crew of lunatics just itching for an excuse to kill eachother. Just be careful not to get hit in the crossfire!</I><BR>" ).ToString() : "" ) ).str( "\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=chariot'>Summon Chariot</A> (1/1)<BR>\n			<I>Summon the most badass ride in all of wizardry.</I><BR>\n			<A href='byond://?src=" ).Ref( this ).str( @";spell_choice=noclothes'>Remove Clothes Requirement</A> <b>Warning: this takes away 2 spell choices.</b><BR>
			<HR>
			<B>Artefacts:</B><BR>
			Powerful items imbued with eldritch magics. Summoning one will count towards your maximum number of spells.<BR>
			It is recommended that only experienced wizards attempt to wield such artefacts.<BR>
			<HR>
			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=staffchange'>Staff of Change</A><BR>\n			<I>An artefact that spits bolts of coruscating energy which cause the target's very form to reshape itself.</I><BR>\n			<HR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=mentalfocus'>Mental Focus</A><BR>\n			<I>An artefact that channels the will of the user into destructive bolts of force.</I><BR>\n			<HR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=soulstone'>Six Soul Stone Shards and the spell Artificer</A><BR>\n			<I>Soul Stone Shards are ancient tools capable of capturing and harnessing the spirits of the dead and dying. The spell Artificer allows you to create arcane machines for the captured souls to pilot.</I><BR>\n			<HR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=armor'>Mastercrafted Armor Set</A><BR>\n			<I>An artefact suit of armor that allows you to cast spells while providing more protection against attacks and the void of space.</I><BR>\n			<HR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=staffanimation'>Staff of Animation</A><BR>\n			<I>An arcane staff capable of shooting bolts of eldritch energy which cause inanimate objects to come to life. This magic doesn't affect machines.</I><BR>\n			<HR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=staffnecro'>Staff of Necromancy</A><BR>\n			<I>An arcane staff capable of summoning undying minions from the corpses of your enemies. This magic doesn't affect machines.</I><BR>\n			<HR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=contract'>Contract of Apprenticeship</A><BR>\n			<I>A magical contract binding an apprentice wizard to your service, using it will summon them to your side.</I><BR>\n			<HR>\n			<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=scrying'>Scrying Orb</A><BR>\n			<I>An incandescent orb of crackling energy, using it will allow you to ghost while alive, allowing you to spy upon the station with ease. In addition, buying it will permanently grant you x-ray vision.</I><BR>\n			<HR>" ).ToString();

				if ( this.op ) {
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";spell_choice=rememorize'>Re-memorize Spells</A><BR>" ).ToString();
				}
			}
			Interface13.Browse( user, dat, "window=radio" );
			GlobalFuncs.onclose( user, "radio" );
			return null;
		}

		// Function from file: spellbook.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic contract = null;

			
			if ( a is Obj_Item_Weapon_AntagSpawner_Contract ) {
				contract = a;

				if ( Lang13.Bool( contract.used ) ) {
					GlobalFuncs.to_chat( b, "The contract has been used, you can't get your points back now." );
				} else {
					GlobalFuncs.to_chat( b, "You feed the contract back into the spellbook, refunding your points." );
					this.max_uses++;
					this.uses++;
					GlobalFuncs.qdel( a );
					a = null;
				}
			}
			return null;
		}

	}

}