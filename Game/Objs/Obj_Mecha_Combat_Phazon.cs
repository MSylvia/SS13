// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Mecha_Combat_Phazon : Obj_Mecha_Combat {

		public bool phasing = false;
		public int phasing_energy_drain = 200;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.infra_luminosity = 3;
			this.initial_icon = "phazon";
			this.step_in = 1;
			this.dir_in = 1;
			this.step_energy_drain = 3;
			this.health = 200;
			this.deflect_chance = 30;
			this.damage_absorption = new ByTable().Set( "brute", 061 ).Set( "fire", 061 ).Set( "bullet", 061 ).Set( "laser", 061 ).Set( "energy", 061 ).Set( "bomb", 061 );
			this.wreckage = typeof(Obj_Effect_Decal_MechaWreckage_Phazon);
			this.internal_damage_threshold = 25;
			this.force = 15;
			this.max_equip = 4;
			this.icon_state = "phazon";
		}

		// Function from file: phazon.dm
		public Obj_Mecha_Combat_Phazon ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_MechaParts_MechaEquipment ME = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			ME = new Obj_Item_MechaParts_MechaEquipment_Tool_Rcd();
			ME.attach( this );
			ME = new Obj_Item_MechaParts_MechaEquipment_Gravcatapult();
			ME.attach( this );
			return;
		}

		// Function from file: vgstation13.dme
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["phasing"] ) ) {
				this.phasing = !this.phasing;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "phasing_command", "" + ( this.phasing ? "Dis" : "En" ) + "able phasing" );
				this.occupant_message( "<font color=\"" + ( this.phasing ? "#00f\">En" : "#f00\">Dis" ) + "abled phasing.</font>" );
			}
			return null;
		}

		// Function from file: phazon.dm
		public override string get_commands(  ) {
			string output = null;

			output = new Txt( "<div class='wr'>\n						<div class='header'>Special</div>\n						<div class='links'>\n						<a href='?src=" ).Ref( this ).str( ";phasing=1'><span id=\"phasing_command\">" ).item( ( this.phasing ? "Dis" : "En" ) ).str( "able phasing</span></a>\n						</div>\n						</div>\n						" ).ToString();
			output += base.get_commands();
			return output;
		}

		// Function from file: phazon.dm
		public override void click_action( dynamic target = null, Mob user = null ) {
			
			if ( this.phasing ) {
				this.occupant_message( "Unable to interact with objects while phasing" );
				return;
			} else {
				base.click_action( (object)(target), user ); return;
			}
		}

		// Function from file: phazon.dm
		public override dynamic Bump( Obj Obstacle = null, dynamic yes = null ) {
			dynamic _default = null;

			
			if ( this.phasing && Convert.ToDouble( this.get_charge() ) >= this.phasing_energy_drain ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( this.can_move ) {
						this.can_move = false;
						Icon13.Flick( "phazon-phase", this );
						this.loc = Map13.GetStep( this, this.dir );
						this.use_power( this.phasing_energy_drain );
						Task13.Sleep( Convert.ToInt32( this.step_in * 3 ) );
						this.can_move = true;
					}
					return;
				}));
			} else {
				_default = base.Bump( Obstacle );
			}
			return _default;
		}

	}

}