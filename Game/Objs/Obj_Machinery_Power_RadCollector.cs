// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_RadCollector : Obj_Machinery_Power {

		public dynamic P = null;
		public dynamic last_power = 0;
		public bool active = false;
		public bool locked = false;
		public double drain_ratio = 3.5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 11 });
			this.ghost_read = false;
			this.machine_flags = 24;
			this.icon = "icons/obj/singularity.dmi";
			this.icon_state = "ca";
		}

		// Function from file: collector.dm
		public Obj_Machinery_Power_RadCollector ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.rad_collectors.Add( this );
			return;
		}

		// Function from file: collector.dm
		public void toggle_power(  ) {
			this.active = !this.active;

			if ( this.active ) {
				this.icon_state = "ca_on";
				Icon13.Flick( "ca_active", this );
			} else {
				this.icon_state = "ca";
				Icon13.Flick( "ca_deactive", this );
				this.last_power = 0;
			}
			this.update_icons();
			return;
		}

		// Function from file: collector.dm
		public void update_icons(  ) {
			this.overlays.len = 0;

			if ( Lang13.Bool( this.P ) ) {
				this.overlays.Add( new Image( "icons/obj/singularity.dmi", "ptank" ) );
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( this.active ) {
				this.overlays.Add( new Image( "icons/obj/singularity.dmi", "on" ) );
			}
			return;
		}

		// Function from file: collector.dm
		public void receive_pulse( double? pulse_strength = null ) {
			dynamic power_produced = null;

			
			if ( Lang13.Bool( this.P ) && this.active ) {
				power_produced = this.P.air_contents.toxins * pulse_strength * 3.5;
				this.add_avail( power_produced );
				this.last_power = power_produced;
			}
			return;
		}

		// Function from file: collector.dm
		public void eject(  ) {
			this.locked = false;
			this.last_power = 0;

			if ( this.P == null ) {
				return;
			}
			this.P.loc = GlobalFuncs.get_turf( this );
			this.P.layer = Lang13.Initial( this.P, "layer" );
			this.P = null;

			if ( this.active ) {
				this.toggle_power();
			} else {
				this.update_icons();
			}
			return;
		}

		// Function from file: collector.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 2:
				case 3:
					this.eject();
					break;
			}
			return base.ex_act( severity, (object)(child) );
		}

		// Function from file: collector.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( Lang13.Bool( this.P ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Remove the plasma tank first.</span>" );
				return 0;
			}

			if ( base.wrenchAnchor( (object)(user) ) == 1 ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					this.connect_to_network();
				} else {
					this.disconnect_from_network();
					this.last_power = 0;
				}
				return 1;
			}
			return -1;
		}

		// Function from file: collector.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			} else if ( a is Obj_Item_Device_Analyzer || a is Obj_Item_Device_Multitool ) {
				
				if ( this.active ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( a ).item().str( " registers that " ).item( GlobalFuncs.format_watts( this.last_power ) ).str( " is being produced every cycle.</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( a ).item().str( " registers that the unit is currently not producing power.</span>" ).ToString() );
				}
				return 1;
			} else if ( a is Obj_Item_Weapon_Tank_Plasma ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " needs to be secured to the floor first.</span>" ).ToString() );
					return 1;
				}

				if ( Lang13.Bool( this.P ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>A plasma tank is already loaded.</span>" );
					return 1;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.P = a;
					this.update_icons();
				}
			} else if ( a is Obj_Item_Weapon_Crowbar ) {
				
				if ( Lang13.Bool( this.P ) && !this.locked ) {
					this.eject();
					return 1;
				}
			} else if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.allowed( b ) ) {
					
					if ( this.active ) {
						this.locked = !this.locked;
						GlobalFuncs.to_chat( b, "<span class='notice'>The controls are now " + ( this.locked ? "locked." : "unlocked." ) + "</span>" );
					} else {
						this.locked = false;
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>The controls can only be locked when " ).the( this ).item().str( " is active</span>" ).ToString() );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied!</span>" );
					return 1;
				}
			} else {
				return null;
			}
			return null;
		}

		// Function from file: collector.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				
				if ( !this.locked ) {
					this.toggle_power();
					((Ent_Static)a).visible_message( "<span class='notice'>" + a + " turns the " + this + " " + ( this.active ? "on" : "off" ) + ".</span>", "<span class='notice'>You turn the " + this + " " + ( this.active ? "on" : "off" ) + ".</span>" );
					this.investigation_log( "singulo", "turned " + ( this.active ? "<font color='green'>on</font>" : "<font color='red'>off</font>" ) + " by " + a.key + ". " + ( Lang13.Bool( this.P ) ? "Fuel: " + Num13.Floor( Convert.ToDouble( this.P.air_contents.toxins / 0.81 ) ) + "%" : "<font color='red'>It is empty</font>" ) + "." );
					return null;
				} else {
					GlobalFuncs.to_chat( a, "<span class='warning'>The controls are locked!</span>" );
					return null;
				}
			}
			return null;
		}

		// Function from file: collector.dm
		public override dynamic process(  ) {
			
			if ( Lang13.Bool( this.P ) ) {
				
				if ( Convert.ToDouble( this.P.air_contents.toxins ) <= 0 ) {
					this.investigation_log( "singulo", "<font color='red'>out of fuel</font>." );
					this.P.air_contents.toxins = 0;
					this.eject();
				} else if ( !this.active ) {
					return null;
				} else {
					this.P.air_contents.toxins -= this.drain_ratio * 0.001;
					((GasMixture)this.P.air_contents).update_values();
				}
			}
			return null;
		}

		// Function from file: collector.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.rad_collectors.Remove( this );
			this.eject();
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}