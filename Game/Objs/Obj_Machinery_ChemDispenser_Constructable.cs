// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ChemDispenser_Constructable : Obj_Machinery_ChemDispenser {

		public ByTable dispensable_reagent_tiers = new ByTable(new object [] { 
											new ByTable(new object [] { "hydrogen", "oxygen", "silicon", "phosphorus", "sulfur", "carbon", "nitrogen", "water" }), 
											new ByTable(new object [] { "lithium", "sugar", "sacid", "copper", "mercury", "sodium", "iodine", "bromine" }), 
											new ByTable(new object [] { "ethanol", "chlorine", "potassium", "aluminium", "radium", "fluorine", "iron", "welding_fuel", "silver", "stable_plasma" }), 
											new ByTable(new object [] { "oil", "ash", "acetone", "saltpetre", "ammonia", "diethylamine" })
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.energy = 10;
			this.max_energy = 10;
			this.amount = 5;
			this.recharge_delay = 30;
			this.dispensable_reagents = new ByTable();
			this.icon_state = "minidispenser";
		}

		// Function from file: chem_dispenser.dm
		public Obj_Machinery_ChemDispenser_Constructable ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_ChemDispenser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Cell_High( null ) );
			this.RefreshParts();
			return;
		}

		// Function from file: chem_dispenser.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( this.default_deconstruction_screwdriver( user, "minidispenser-o", "minidispenser", A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( Lang13.Bool( this.panel_open ) ) {
				
				if ( A is Obj_Item_Weapon_Crowbar ) {
					
					if ( Lang13.Bool( this.beaker ) ) {
						this.beaker.loc = this.loc;
						this.beaker = null;
					}
					this.default_deconstruction_crowbar( A );
					return 1;
				}
			}
			return null;
		}

		// Function from file: chem_dispenser.dm
		public override void RefreshParts(  ) {
			double time = 0;
			double temp_energy = 0;
			int i = 0;
			Obj_Item_Weapon_StockParts_MatterBin M = null;
			Obj_Item_Weapon_StockParts_Capacitor C = null;
			Obj_Item_Weapon_StockParts_Cell P = null;
			Obj_Item_Weapon_StockParts_Manipulator M2 = null;

			time = 0;
			temp_energy = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _a;
				
				temp_energy += Convert.ToDouble( M.rating );
			}
			temp_energy--;
			this.max_energy = temp_energy * 5;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Capacitor) )) {
				C = _b;
				
				time += Convert.ToDouble( C.rating );
			}

			foreach (dynamic _c in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Cell) )) {
				P = _c;
				
				time += Num13.Round( P.maxcharge ??0, 10000 ) / 10000;
			}
			this.recharge_delay /= time / 2;

			foreach (dynamic _d in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M2 = _d;
				
				i = 1;

				while (i <= Convert.ToDouble( M2.rating )) {
					this.dispensable_reagents |= this.dispensable_reagent_tiers[i];
					i++;
				}
			}
			this.dispensable_reagents = GlobalFuncs.sortList( this.dispensable_reagents );
			return;
		}

	}

}