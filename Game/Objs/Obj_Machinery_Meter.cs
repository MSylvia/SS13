// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Meter : Obj_Machinery {

		public Ent_Static target = null;
		public int? target_layer = 3;
		public int frequency = 0;
		public dynamic id_tag = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.power_channel = 3;
			this.idle_power_usage = 2;
			this.active_power_usage = 4;
			this.machine_flags = 128;
			this.icon = "icons/obj/meter.dmi";
			this.icon_state = "meterX";
		}

		// Function from file: meter.dm
		public Obj_Machinery_Meter ( dynamic newloc = null, Obj_Machinery_Atmospherics_Pipe new_target = null ) : base( (object)(newloc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.target = new_target;

			if ( this.target != null ) {
				this.setAttachLayer( ((dynamic)this.target).piping_layer );
			}
			return; // Warning! Attempt to return some other value!
		}

		// Function from file: meter.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
			GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You begin to unfasten " ).the( this ).item().str( "...</span>" ).ToString() );

			if ( GlobalFuncs.do_after( b, this, 40 ) ) {
				((Ent_Static)b).visible_message( new Txt().item( b ).str( " unfastens " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You have unfastened " ).the( this ).item().str( ".</span>" ).ToString(), "You hear ratchet." );
				new Obj_Item_PipeMeter( this.loc );
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: meter.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<b>Main</b>\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( Lang13.Initial( this, "frequency" ) ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag" ) ).str( "</li>\n	</ul>" ).ToString();
		}

		// Function from file: meter.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic t = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return 1;
			}
			t = null;

			if ( Map13.GetDistance( Task13.User, this ) <= 3 || Task13.User is Mob_Living_Silicon_Ai || Task13.User is Mob_Dead ) {
				t += this.status();
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'><B>You are too far away.</B></span>" );
				return 1;
			}
			GlobalFuncs.to_chat( Task13.User, t );
			return 1;
		}

		// Function from file: meter.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			this.attack_hand( user );
			return null;
		}

		// Function from file: meter.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

		// Function from file: meter.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			this.attack_hand( user );
			return null;
		}

		// Function from file: meter.dm
		public override dynamic process(  ) {
			GasMixture environment = null;
			dynamic env_pressure = null;
			int val = 0;
			int val2 = 0;
			int val3 = 0;
			dynamic radio_connection = null;
			Game_Data signal = null;
			dynamic total_moles = null;

			
			if ( !( this.target != null ) ) {
				this.icon_state = "meterX";
				new Obj_Item_PipeMeter( this.loc );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
				return 26;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				this.icon_state = "meter0";
				return 0;
			}
			this.f_use_power( 5 );
			environment = this.target.return_air();

			if ( !( environment != null ) ) {
				this.icon_state = "meterX";
				new Obj_Item_PipeMeter( this.loc );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
				return 26;
			}
			env_pressure = environment.return_pressure();

			if ( Convert.ToDouble( env_pressure ) <= 15.198750495910645 ) {
				this.icon_state = "meter0";
			} else if ( Convert.ToDouble( env_pressure ) <= 182.38499450683594 ) {
				val = Num13.Floor( Convert.ToDouble( env_pressure / 30.39750099182129 + 0.5 ) );
				this.icon_state = "meter1_" + val;
			} else if ( Convert.ToDouble( env_pressure ) <= 3039.75 ) {
				val2 = Num13.Floor( Convert.ToDouble( env_pressure / 506.625 - 0.41 ) ) + 1;
				this.icon_state = "meter2_" + val2;
			} else if ( Convert.ToDouble( env_pressure ) <= 5978.1748046875 ) {
				val3 = Num13.Floor( Convert.ToDouble( env_pressure / 506.625 - 6 ) ) + 1;
				this.icon_state = "meter3_" + val3;
			} else {
				this.icon_state = "meter4";
			}

			if ( this.frequency != 0 ) {
				radio_connection = GlobalVars.radio_controller.return_frequency( this.frequency );

				if ( !Lang13.Bool( radio_connection ) ) {
					return null;
				}
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).source = this;
				((dynamic)signal).transmission_method = 1;
				((dynamic)signal).data = new ByTable()
					.Set( "tag", this.id_tag )
					.Set( "device", "AM" )
					.Set( "pressure", Num13.Floor( Convert.ToDouble( env_pressure ) ) )
					.Set( "temperature", Num13.Floor( environment.temperature ??0 ) )
					.Set( "sigtype", "status" )
				;
				total_moles = environment.f_total_moles();

				if ( Convert.ToDouble( total_moles ) > 0 ) {
					((dynamic)signal).data["oxygen"] = Num13.Round( Convert.ToDouble( environment.oxygen * 100 / total_moles ), 0.1 );
					((dynamic)signal).data["toxins"] = Num13.Round( Convert.ToDouble( environment.toxins * 100 / total_moles ), 0.1 );
					((dynamic)signal).data["nitrogen"] = Num13.Round( Convert.ToDouble( environment.nitrogen * 100 / total_moles ), 0.1 );
					((dynamic)signal).data["carbon_dioxide"] = Num13.Round( Convert.ToDouble( environment.carbon_dioxide * 100 / total_moles ), 0.1 );
				} else {
					((dynamic)signal).data["oxygen"] = 0;
					((dynamic)signal).data["toxins"] = 0;
					((dynamic)signal).data["nitrogen"] = 0;
					((dynamic)signal).data["carbon_dioxide"] = 0;
				}
				radio_connection.post_signal( this, signal );
			}
			return null;
		}

		// Function from file: meter.dm
		public string status(  ) {
			string t = null;
			GasMixture environment = null;

			t = "";

			if ( this.target != null ) {
				environment = this.target.return_air();

				if ( environment != null ) {
					t += "The pressure gauge reads " + Num13.Round( Convert.ToDouble( environment.return_pressure() ), 0.01 ) + " kPa; " + Num13.Round( environment.temperature ??0, 0.01 ) + "K (" + Num13.Round( ( environment.temperature ??0) - 273.41, 0.01 ) + "&deg;C)";
				} else {
					t += "The sensor error light is blinking.";
				}
			} else {
				t += "The connect error light is blinking.";
			}
			return t;
		}

		// Function from file: meter.dm
		public void setAttachLayer( dynamic new_layer = null ) {
			this.target_layer = Lang13.IntNullable( new_layer );
			this.pixel_x = Convert.ToInt32( ( new_layer - 3 ) * 5 );
			this.pixel_y = Convert.ToInt32( ( new_layer - 3 ) * -5 );
			return;
		}

		// Function from file: meter.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			Obj_Machinery_Atmospherics_Pipe pipe = null;

			
			if ( !( this.target != null ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
					pipe = _a;
					

					if ( pipe.piping_layer == this.target_layer ) {
						this.target = pipe;
						break;
					}
				}

				if ( this.target != null ) {
					this.setAttachLayer( ((dynamic)this.target).piping_layer );
				}
			}
			return false;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}