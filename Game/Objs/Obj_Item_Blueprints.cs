// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Blueprints : Obj_Item {

		public ByTable can_create_areas_in = new ByTable(new object [] { 2 });
		public ByTable can_rename_areas = new ByTable(new object [] { 1, 4 });
		public ByTable can_delete_areas = new ByTable(new object [] { 4 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.attack_verb = new ByTable(new object [] { "attacked", "bapped", "hit" });
			this.icon_state = "blueprints";
		}

		public Obj_Item_Blueprints ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: blueprints.dm
		public dynamic detect_room( dynamic first = null ) {
			ByTable found = null;
			ByTable pending = null;
			Ent_Static T = null;
			dynamic dir = null;
			bool skip = false;
			Obj_Structure_Window W = null;
			Obj_Machinery_Door_Window D = null;
			Tile NT = null;

			found = new ByTable();
			pending = new ByTable(new object [] { first });

			while (pending.len != 0) {
				
				if ( found.len + pending.len > 300 ) {
					return -2;
				}
				T = pending[1];
				pending.Remove( T );

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.cardinal )) {
					dir = _d;
					
					skip = false;

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Structure_Window) )) {
						W = _a;
						

						if ( dir == W.dir || W.is_fulltile() ) {
							skip = true;
							break;
						}
					}

					if ( skip ) {
						continue;
					}

					foreach (dynamic _b in Lang13.Enumerate( T, typeof(Obj_Machinery_Door_Window) )) {
						D = _b;
						

						if ( dir == D.dir ) {
							skip = true;
							break;
						}
					}

					if ( skip ) {
						continue;
					}
					NT = Map13.GetStep( T, Convert.ToInt32( dir ) );

					if ( !( NT is Tile ) || found.Contains( NT ) || pending.Contains( NT ) ) {
						continue;
					}

					switch ((int)( this.check_tile_is_border( NT, dir ) )) {
						case 1:
							pending.Add( NT );
							break;
						case 2:
							
							break;
						case 3:
							found.Add( NT );
							break;
						case 4:
							return -1;
							break;
					}
				}
				found.Add( T );
			}
			return found;
		}

		// Function from file: blueprints.dm
		public int check_tile_is_border( Tile T2 = null, dynamic dir = null ) {
			Obj_Structure_Window W = null;
			Obj_Machinery_Door_Window D = null;

			
			if ( T2 is Tile_Space ) {
				return 4;
			}

			if ( T2 is Tile_Simulated_Shuttle ) {
				return 4;
			}

			if ( this.get_area_type( T2.loc ) != 2 ) {
				return 2;
			}

			if ( T2 is Tile_Simulated_Wall ) {
				return 3;
			}

			if ( !( T2 is Tile_Simulated ) ) {
				return 2;
			}

			foreach (dynamic _a in Lang13.Enumerate( T2, typeof(Obj_Structure_Window) )) {
				W = _a;
				

				if ( Num13.Rotate( dir, 180 ) == W.dir ) {
					return 2;
				}

				if ( W.is_fulltile() ) {
					return 3;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( T2, typeof(Obj_Machinery_Door_Window) )) {
				D = _b;
				

				if ( Num13.Rotate( dir, 180 ) == D.dir ) {
					return 2;
				}
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Door), T2 ) ) ) {
				return 3;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Falsewall), T2 ) ) ) {
				return 3;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Falserwall), T2 ) ) ) {
				return 3;
			}
			return 1;
		}

		// Function from file: blueprints.dm
		public void delete_area( Mob user = null ) {
			dynamic areadeleted = null;
			dynamic space = null;
			dynamic C = null;
			dynamic T = null;
			Ent_Dynamic AM = null;

			areadeleted = this.get_area();
			space = this.get_area(  );

			if ( Interface13.Alert( Task13.User, "Are you sure you want to erase \"" + areadeleted + "\" from the blueprints?", "Blueprint Editing", "Yes", "No" ) != "Yes" ) {
				return;
			} else {
				
				if ( !this.Adjacent( user ) ) {
					return;
				}

				if ( !( areadeleted == this.get_area() ) ) {
					return;
				}

				if ( !( areadeleted is Zone_Station_Custom ) ) {
					return;
				}
			}
			C = areadeleted.contents.Copy();

			foreach (dynamic _b in Lang13.Enumerate( C )) {
				T = _b;
				
				space.contents.Add( T );
				((Ent_Static)T).change_area( areadeleted, space );

				foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Ent_Dynamic) )) {
					AM = _a;
					
					AM.change_area( areadeleted, space );
				}
			}
			GlobalFuncs.to_chat( Task13.User, "You've erased the \"" + areadeleted + "\" from the blueprints." );
			return;
		}

		// Function from file: blueprints.dm
		public void edit_area(  ) {
			dynamic areachanged = null;
			string prevname = null;
			string str = null;
			Ent_Static allthings = null;

			areachanged = this.get_area();
			prevname = "" + areachanged.name;
			str = GlobalFuncs.trim( GlobalFuncs.stripped_input( Task13.User, "New area name:", "Blueprint Editing", prevname, 26 ) );

			if ( !Lang13.Bool( str ) || !( Lang13.Length( str ) != 0 ) || str == prevname ) {
				return;
			}

			if ( Lang13.Length( str ) > 50 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Text too long.</span>" );
				return;
			}
			areachanged.name = str;

			foreach (dynamic _a in Lang13.Enumerate( areachanged.contents, typeof(Ent_Static) )) {
				allthings = _a;
				
				allthings.change_area( prevname, areachanged );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You set the area '" + prevname + "' title to '" + str + "'.</span>" );
			this.interact();
			return;
		}

		// Function from file: blueprints.dm
		public void create_area(  ) {
			dynamic res = null;
			dynamic turfs = null;
			string str = null;
			Zone_Station_Custom newarea = null;
			dynamic oldarea = null;
			dynamic T = null;
			Ent_Static allthings = null;

			res = this.detect_room( GlobalFuncs.get_turf( Task13.User ) );

			if ( !( res is ByTable ) ) {
				
				dynamic _a = res; // Was a switch-case, sorry for the mess.
				if ( _a==-1 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The new area must be completely airtight!</span>" );
					return;
				} else if ( _a==-2 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The new area too large!</span>" );
					return;
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Error! Please notify administration!</span>" );
					return;
				}
			}
			turfs = res;
			str = GlobalFuncs.trim( GlobalFuncs.stripped_input( Task13.User, "New area name:", "Blueprint Editing", "", 26 ) );

			if ( !Lang13.Bool( str ) || !( Lang13.Length( str ) != 0 ) ) {
				return;
			}

			if ( Lang13.Length( str ) > 50 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Name too long.</span>" );
				return;
			}
			newarea = new Zone_Station_Custom();
			oldarea = this.get_area(  );
			newarea.name = str;
			newarea.tag = "" + newarea.type + "/" + Num13.Md5( str );
			newarea.contents.Add( turfs );

			foreach (dynamic _c in Lang13.Enumerate( turfs )) {
				T = _c;
				
				((Ent_Static)T).change_area( oldarea, newarea );

				foreach (dynamic _b in Lang13.Enumerate( T.contents, typeof(Ent_Static) )) {
					allthings = _b;
					
					allthings.change_area( oldarea, newarea );
				}
			}
			newarea.addSorted();
			GlobalVars.ghostteleportlocs[newarea.name] = newarea;
			Task13.Sleep( 5 );
			this.interact();
			return;
		}

		// Function from file: blueprints.dm
		public int get_area_type( dynamic A = null ) {
			A = A ?? this.get_area();

			ByTable SPECIALS = null;
			dynamic type = null;

			
			if ( A.type == typeof(Zone) ) {
				return 2;
			} else if ( A is Zone_Station_Custom ) {
				return 4;
			}
			SPECIALS = new ByTable(new object [] { 
				typeof(Zone_Shuttle), 
				typeof(Zone_Admin), 
				typeof(Zone_Arrival), 
				typeof(Zone_Centcom), 
				typeof(Zone_Asteroid), 
				typeof(Zone_Tdome), 
				typeof(Zone_SyndicateStation), 
				typeof(Zone_WizardStation), 
				typeof(Zone_Prison)
			 });

			foreach (dynamic _a in Lang13.Enumerate( SPECIALS )) {
				type = _a;
				

				if ( Lang13.Bool( type.IsInstanceOfType( A ) ) ) {
					return 3;
				}
			}
			return 1;
		}

		// Function from file: blueprints.dm
		public dynamic get_area(  ) {
			dynamic T = null;
			dynamic A = null;

			T = GlobalFuncs.get_turf( Task13.User );
			A = GlobalFuncs.get_area_master( T );
			return A;
		}

		// Function from file: blueprints.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic A = null;
			string text = null;

			A = this.get_area();
			text = "<HTML><head><title>" + this + "</title></head><BODY>\n<h2>" + GlobalFuncs.station_name() + " blueprints</h2>\n<small>property of Nanotrasen. For heads of staff only. Store in high-secure storage.</small><hr>\n";

			switch ((int)( this.get_area_type() )) {
				case 2:
					text += new Txt( "\n<p>According to the blueprints, you are now in <b>outer space</b>.  Hold your breath.</p>\n<p><a href='?src=" ).Ref( this ).str( ";action=create_area'>Mark this place as new area.</a></p>\n" ).ToString();
					break;
				case 1:
					text += new Txt( "\n<p>According to the blueprints, you are now in <b>\"" ).item( A.name ).str( "\"</b>.</p>\n<p>You may <a href='?src=" ).Ref( this ).str( ";action=edit_area'>\nmove an amendment</a> to the drawing.</p>\n" ).ToString();
					break;
				case 3:
					text += "\n<p>This place isn't noted on the blueprint.</p>\n";
					break;
				case 4:
					text += "\n<p>According to the blueprints, you are now in <b>\"" + A.name + "\"</b> This place seems to be relatively new on the blueprints.</p>";
					text += new Txt( "<p>You may <a href='?src=" ).Ref( this ).str( ";action=edit_area'>move an amendment</a> to the drawing.</p>" ).ToString();
					break;
				default:
					return null;
					break;
			}
			text += "</BODY></HTML>";
			Interface13.Browse( Task13.User, text, "window=blueprints" );
			GlobalFuncs.onclose( Task13.User, "blueprints" );
			return null;
		}

		// Function from file: blueprints.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
			if ( _a=="create_area" ) {
				
				if ( !this.can_create_areas_in.Contains( this.get_area_type() ) ) {
					this.interact();
					return 1;
				}
				this.create_area();
			} else if ( _a=="edit_area" ) {
				
				if ( !this.can_rename_areas.Contains( this.get_area_type() ) ) {
					this.interact();
					return 1;
				}
				this.edit_area();
			} else if ( _a=="delete_area" ) {
				
				if ( !this.can_delete_areas.Contains( this.get_area_type() ) ) {
					this.interact();
					return 1;
				}
				this.delete_area( Task13.User );
			}
			return _default;
		}

		// Function from file: blueprints.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !( user is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( user, "This stack of blue paper means nothing to you." );
				return null;
			}
			this.interact();
			return null;
		}

	}

}