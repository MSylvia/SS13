// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_SecureCloset : Obj_Structure_Closet {

		public string icon_locked = "secure1";
		public string icon_broken = "securebroken";
		public string icon_off = "secureoff";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.locked = true;
			this.icon_closed = "secure";
			this.icon_opened = "secureopen";
			this.health = 200;
			this.icon_state = "secure1";
		}

		public Obj_Structure_Closet_SecureCloset ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: secure_closets.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;

			if ( !this.opened ) {
				
				if ( this.locked ) {
					this.icon_state = this.icon_locked;
				} else if ( this.broken ) {
					this.icon_state = this.icon_off;
				} else {
					this.icon_state = this.icon_closed;
				}

				if ( this.welded ) {
					this.overlays.Add( "welded" );
				}
			} else {
				this.icon_state = this.icon_opened;
			}
			return null;
		}

		// Function from file: secure_closets.dm
		public override void AltClick( Mob user = null ) {
			
			if ( Lang13.Bool( this.__CallVerb("Toggle Lock" ) ) ) {
				return;
			}
			base.AltClick( user ); return;
		}

		// Function from file: secure_closets.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: secure_closets.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !this.Adjacent( a ) ) {
				return null;
			}
			this.add_fingerprint( a );

			if ( !this.toggle() ) {
				return this.attackby( null, a );
			}
			return null;
		}

		// Function from file: secure_closets.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			Obj_Item I = null;
			dynamic M2 = null;
			dynamic M3 = null;

			
			if ( Lang13.Bool( M.stat ) || !( this.loc is Tile ) ) {
				return null;
			}

			if ( !this.locked && !this.welded ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
					I = _a;
					
					I.loc = this.loc;
				}

				foreach (dynamic _b in Lang13.Enumerate( this )) {
					M2 = _b;
					
					M2.loc = this.loc;

					if ( Lang13.Bool( M2.client ) ) {
						M2.client.eye = M2.client.mob;
						M2.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
					}
				}
				this.icon_state = this.icon_opened;
				this.opened = true;
				this.density = false;
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 15, 1, -3 );
			} else {
				
				if ( !this.can_open() ) {
					GlobalFuncs.to_chat( M, "<span class='notice'>It won't budge!</span>" );
				} else {
					GlobalFuncs.to_chat( M, "<span class='notice'>The locker is locked!</span>" );
				}

				if ( Game13.time > this.lastbang + 5 ) {
					this.lastbang = Game13.time;

					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						M3 = _c;
						
						GlobalFuncs.to_chat( M3, "<FONT size=" + Num13.MaxInt( 0, 5 - Map13.GetDistance( this, M3 ) ) + ">BANG, bang!</FONT>" );
					}
				}
			}
			return null;
		}

		// Function from file: secure_closets.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;
			dynamic O = null;
			dynamic WT = null;
			dynamic M = null;

			
			if ( this.opened ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			} else if ( this.broken ) {
				
				if ( a is Obj_Item_Weapon_Solder ) {
					S = a;

					if ( !Lang13.Bool( S.remove_fuel( 4, b ) ) ) {
						return null;
					}
					GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 100, 1 );

					if ( GlobalFuncs.do_after( b, this, 40 ) ) {
						GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 100, 1 );
						this.broken = false;
						GlobalFuncs.to_chat( b, "<span class='notice'>You repair the electronics inside the locking mechanism!</span>" );
						this.icon_state = this.icon_closed;
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>The locker appears to be broken.</span>" );
					return null;
				}
			} else if ( a is Obj_Item_Weapon_Card_Emag && !this.broken ) {
				this.broken = true;
				this.locked = false;
				this.desc = "It appears to be broken.";
				this.icon_state = this.icon_off;
				Icon13.Flick( this.icon_broken, this );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( 3, b ) )) {
					O = _a;
					
					O.show_message( "<span class='warning'>The locker has been broken by " + b + " with an electromagnetic card!</span>", 1, "You hear a faint electrical spark.", 2 );
				}
				this.update_icon();
			} else if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( !Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
					return null;
				}
				this.welded = !this.welded;
				this.update_icon();

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					M = _b;
					
					M.show_message( "<span class='warning'>" + this + " has been " + ( this.welded ? "welded shut" : "unwelded" ) + " by " + b.name + ".</span>", 1, "You hear welding.", 2 );
				}
			} else {
				this.togglelock( b );
			}
			return null;
		}

		// Function from file: secure_closets.dm
		public virtual dynamic togglelock( dynamic user = null, string given_name = null ) {
			dynamic O = null;

			
			if ( this.allowed( user ) ) {
				this.locked = !this.locked;

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( 3, user ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						GlobalFuncs.to_chat( O, "<span class='notice'>The locker has been " + ( this.locked ? null : "un" ) + "locked by " + user + ".</span>" );
					}
				}

				if ( this.locked ) {
					this.icon_state = this.icon_locked;
				} else {
					this.icon_state = this.icon_closed;
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='notice'>Access Denied.</span>" );
			}
			return null;
		}

		// Function from file: secure_closets.dm
		public override dynamic emp_act( int severity = 0 ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				
				O.emp_act( severity );
			}

			if ( !this.broken ) {
				
				if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
					this.locked = !this.locked;
					this.update_icon();
				}

				if ( Rand13.PercentChance( ((int)( 20 / severity )) ) && !this.opened ) {
					
					if ( !this.locked ) {
						this.open();
					} else {
						this.req_access = new ByTable();
						this.req_access += Rand13.PickFromTable( GlobalFuncs.get_all_accesses() );
					}
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: secure_closets.dm
		public override bool close(  ) {
			base.close();

			if ( this.broken ) {
				this.icon_state = this.icon_off;
			}
			return true;
		}

		// Function from file: secure_closets.dm
		public override bool can_open(  ) {
			
			if ( !base.can_open() ) {
				return false;
			}

			if ( this.locked ) {
				return false;
			}
			return true;
		}

		// Function from file: secure_closets.dm
		[Verb]
		[VerbInfo( name: "Toggle Lock", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool verb_togglelock(  ) {
			
			if ( Task13.User.incapacitated() ) {
				return false;
			}

			if ( !this.Adjacent( Task13.User ) || Task13.User.loc == this ) {
				return false;
			}

			if ( this.broken ) {
				return false;
			}

			if ( Task13.User is Mob_Living_Carbon_Human ) {
				
				if ( !this.opened ) {
					this.togglelock( Task13.User );
					return true;
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>This mob type can't use this verb.</span>" );
			}
			return false;
		}

	}

}