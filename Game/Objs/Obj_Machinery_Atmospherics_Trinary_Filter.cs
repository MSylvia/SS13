// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Trinary_Filter : Obj_Machinery_Atmospherics_Trinary {

		public bool on = false;
		public dynamic temp = null;
		public double target_pressure = 101.32499694824219;
		public double? filter_type = 0;
		public bool frequency = false;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.default_colour = "#b70000";
			this.mirror = typeof(Obj_Machinery_Atmospherics_Trinary_Filter_Mirrored);
			this.icon = "icons/obj/atmospherics/filter.dmi";
			this.icon_state = "hintact_off";
		}

		// Function from file: filter.dm
		public Obj_Machinery_Atmospherics_Trinary_Filter ( dynamic loc = null ) : base( (object)(loc) ) {
			
			if ( GlobalVars.radio_controller != null ) {
				this.initialize();
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: filter.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic new_pressure = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["filterset"] ) ) {
				this.filter_type = String13.ParseNumber( href_list["filterset"] );
			}

			if ( Lang13.Bool( href_list["temp"] ) ) {
				this.temp = null;
			}

			if ( Lang13.Bool( href_list["set_press"] ) ) {
				new_pressure = Interface13.Input( Task13.User, "Enter new output pressure (0-4500kPa)", "Pressure control", this.target_pressure, null, InputType.Num );
				this.target_pressure = Num13.MaxInt( 0, Num13.MinInt( 4500, Convert.ToInt32( new_pressure ) ) );
			}

			if ( Lang13.Bool( href_list["power"] ) ) {
				this.on = !this.on;
			}
			this.update_icon();
			this.updateUsrDialog();
			return null;
		}

		// Function from file: filter.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;
			string current_filter_type = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( !this.allowed( a ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>Access denied.</span>" );
				return null;
			}

			switch ((double?)( this.filter_type )) {
				case 0:
					current_filter_type = "Plasma";
					break;
				case 1:
					current_filter_type = "Oxygen";
					break;
				case 2:
					current_filter_type = "Nitrogen";
					break;
				case 3:
					current_filter_type = "Carbon Dioxide";
					break;
				case 4:
					current_filter_type = "Nitrous Oxide";
					break;
				case -1:
					current_filter_type = "Nothing";
					break;
				default:
					current_filter_type = "ERROR - Report this bug to the admin, please!";
					break;
			}
			dat += new Txt( "\n			<b>Power: </b><a href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.on ? "On" : "Off" ) ).str( "</a><br>\n			<b>Filtering: </b>" ).item( current_filter_type ).str( "<br><HR>\n			<h4>Set Filter Type:</h4>\n			<A href='?src=" ).Ref( this ).str( ";filterset=0'>Plasma</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";filterset=1'>Oxygen</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";filterset=2'>Nitrogen</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";filterset=3'>Carbon Dioxide</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";filterset=4'>Nitrous Oxide</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";filterset=-1'>Nothing</A><BR>\n			<HR><B>Desirable output pressure:</B>\n			" ).item( this.target_pressure ).str( "kPa | <a href='?src=" ).Ref( this ).str( ";set_press=1'>Change</a>\n			" ).ToString();
			Interface13.Browse( a, "<HEAD><TITLE>" + this.name + " control</TITLE></HEAD><TT>" + dat + "</TT>", "window=atmo_filter" );
			GlobalFuncs.onclose( a, "atmo_filter" );
			return null;
		}

		// Function from file: filter.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.set_frequency( this.frequency );
			base.initialize( suppress_icon_check );
			return false;
		}

		// Function from file: filter.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			dynamic output_starting_pressure = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			dynamic removed = null;
			GasMixture filtered_out = null;
			Gas trace_gas = null;
			Gas trace_gas2 = null;

			_default = base.process();

			if ( !this.on ) {
				return _default;
			}
			output_starting_pressure = this.air3.return_pressure();

			if ( Convert.ToDouble( output_starting_pressure ) >= this.target_pressure || Convert.ToDouble( this.air2.return_pressure() ) >= this.target_pressure ) {
				return _default;
			}
			pressure_delta = this.target_pressure - Convert.ToDouble( output_starting_pressure );

			if ( ( this.air1.temperature ??0) > 0 ) {
				transfer_moles = pressure_delta * ( this.air3.volume ??0) / ( ( this.air1.temperature ??0) * 8.314 );
			}

			if ( transfer_moles > 0 ) {
				removed = this.air1.remove( transfer_moles );

				if ( !Lang13.Bool( removed ) ) {
					return _default;
				}
				filtered_out = new GasMixture();
				filtered_out.temperature = Lang13.DoubleNullable( removed.temperature );

				switch ((double?)( this.filter_type )) {
					case 0:
						filtered_out.toxins = removed.toxins;
						removed.toxins = 0;

						if ( removed.trace_gases.len > 0 ) {
							
							foreach (dynamic _a in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
								trace_gas = _a;
								

								if ( trace_gas is Gas_OxygenAgentB ) {
									removed.trace_gases.Remove( trace_gas );
									filtered_out.trace_gases.Add( trace_gas );
								}
							}
						}
						break;
					case 1:
						filtered_out.oxygen = removed.oxygen;
						removed.oxygen = 0;
						break;
					case 2:
						filtered_out.nitrogen = removed.nitrogen;
						removed.nitrogen = 0;
						break;
					case 3:
						filtered_out.carbon_dioxide = removed.carbon_dioxide;
						removed.carbon_dioxide = 0;
						break;
					case 4:
						
						if ( removed.trace_gases.len > 0 ) {
							
							foreach (dynamic _b in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
								trace_gas2 = _b;
								

								if ( trace_gas2 is Gas_SleepingAgent ) {
									removed.trace_gases.Remove( trace_gas2 );
									filtered_out.trace_gases.Add( trace_gas2 );
								}
							}
						}
						break;
					default:
						filtered_out = null;
						break;
				}
				this.air2.merge( filtered_out );
				this.air3.merge( removed );
			}

			if ( this.network2 != null ) {
				((dynamic)this.network2).update = 1;
			}

			if ( this.network3 != null ) {
				((dynamic)this.network3).update = 1;
			}

			if ( this.network1 != null ) {
				((dynamic)this.network1).update = 1;
			}
			return 1;
		}

		// Function from file: filter.dm
		public override dynamic power_change(  ) {
			int old_stat = 0;

			old_stat = this.stat;
			base.power_change();

			if ( old_stat != this.stat ) {
				this.update_icon();
			}
			return null;
		}

		// Function from file: filter.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "hintact_off";
			} else if ( this.node2 != null && this.node3 != null && this.node1 != null ) {
				this.icon_state = "hintact_" + ( this.on ? "on" : "off" );
			} else {
				this.icon_state = "hintact_off";
				this.on = false;
			}
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

		// Function from file: filter.dm
		public void set_frequency( bool new_frequency = false ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

	}

}