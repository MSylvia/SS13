// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SpaceHeater_Campfire : Obj_Machinery_SpaceHeater {

		public dynamic lastcharge = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.base_state = "campfire";
			this.light_power_on = 1.5;
			this.light_color = "#FAA019";
			this.set_temperature = 35;
			this.nocell = 1;
			this.anchored = 1;
			this.machine_flags = null;
			this.icon_state = "campfire0";
		}

		public Obj_Machinery_SpaceHeater_Campfire ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: spaceheater.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic absolutemadman = null;

			
			if ( O is Mob_Living_Carbon && this.on ) {
				absolutemadman = O;
				((dynamic)absolutemadman).adjust_fire_stacks( 1 );

				if ( Lang13.Bool( ((dynamic)absolutemadman).IgniteMob() ) ) {
					absolutemadman.visible_message( new Txt( "<span class='danger'>" ).item( O ).str( " walks into " ).the( this ).item().str( ", and is set alight!</span>" ).ToString(), new Txt( "<span class='danger'>You walk into " ).the( this ).item().str( ", and are set alight!</span>" ).ToString() );
				}
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic process(  ) {
			ByTable comfyfire = null;

			base.process();
			comfyfire = new ByTable(new object [] { "sound/misc/comfyfire1.ogg", "sound/misc/comfyfire2.ogg", "sound/misc/comfyfire3.ogg" });

			if ( GlobalFuncs.Floor( this.cell.charge / 10 ) != this.lastcharge ) {
				this.update_icon();
			}

			if ( !( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) > 0 ) && this.nocell != 2 ) {
				new Obj_Effect_Decal_Cleanable_Campfire( GlobalFuncs.get_turf( this ) );
				GlobalFuncs.qdel( this );
			}
			this.lastcharge = GlobalFuncs.Floor( this.cell.charge / 10 );

			if ( this.on ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), Rand13.PickFromTable( comfyfire ), Lang13.DoubleNullable( this.cell.charge / 250 * 5 ), 1, -1, null, null, 124 );
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic M = null;

			
			if ( this.on ) {
				((Mob)user).delayNextAttack( 50 );

				if ( GlobalFuncs.do_after( user, this, 50 ) ) {
					M = user;

					if ( Lang13.Bool( M.mutations.Contains( 5 ) ) && Rand13.PercentChance( 50 ) ) {
						((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " slides " ).his_her_its_their().str( " hands straight into " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='danger'>You accidentally slide your hands into " ).the( this ).item().str( "!</span>" ).ToString() );
						((Mob_Living)M).apply_damage( 10, "fire", Rand13.Pick(new object [] { "l_hand", "r_hand" }) );
					} else {
						((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " warms " ).his_her_its_their().str( " hands around " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You warm your hands around " ).the( this ).item().str( ".</span>" ).ToString() );
					}
					M.bodytemperature += 2;
				}
			}
			return null;
		}

		// Function from file: spaceheater.dm
		[VerbInfo( name: "light" )]
		public void f_light( string flavourtext = null ) {
			flavourtext = flavourtext ?? new Txt( "<span class='notice'>" ).item( Task13.User ).str( " lights " ).the( this ).item().str( ".</span>" ).ToString();

			dynamic T = null;

			
			if ( this.on ) {
				return;
			}
			T = GlobalFuncs.get_turf( this );
			((Ent_Static)T).visible_message( flavourtext );
			this.on = true;
			this.update_icon();
			return;
		}

		// Function from file: spaceheater.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;
			dynamic Z = null;
			dynamic L = null;
			dynamic S = null;
			dynamic Ig = null;
			dynamic woodnumber = null;
			dynamic woody = null;
			dynamic fag = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( !this.on && Convert.ToDouble( this.cell.charge ) > 0 ) {
				
				if ( a is Obj_Item_Weapon_Weldingtool ) {
					WT = a;

					if ( Lang13.Bool( ((Obj)WT).is_hot() ) ) {
						this.f_light( new Txt( "<span class='notice'>" ).item( b ).str( " casually lights " ).the( this.name ).item().str( " with " ).his_her_its_their().str( " " ).item( a ).str( ", what a badass.</span>" ).ToString() );
					}
				} else if ( a is Obj_Item_Weapon_Lighter_Zippo ) {
					Z = a;

					if ( Lang13.Bool( ((Obj)Z).is_hot() ) ) {
						this.f_light( new Txt( "<span class='rose'>With a single flick of their wrist, " ).item( b ).str( " smoothly lights " ).the( this.name ).item().str( " with " ).his_her_its_their().str( " " ).item( a ).str( ". Damn, that's cool.</span>" ).ToString() );
					}
				} else if ( a is Obj_Item_Weapon_Lighter ) {
					L = a;

					if ( Lang13.Bool( ((Obj)L).is_hot() ) ) {
						this.f_light( new Txt( "<span class='notice'>After some fiddling, " ).item( b ).str( " manages to light " ).the( this.name ).item().str( " with " ).his_her_its_their().str( " " ).item( a ).str( ".</span>" ).ToString() );
					}
				} else if ( a is Obj_Item_Weapon_Melee_Energy_Sword ) {
					S = a;

					if ( Lang13.Bool( ((Obj)S).is_hot() ) ) {
						this.f_light( new Txt( "<span class='warning'>" ).item( b ).str( " raises " ).his_her_its_their().str( " " ).item( a.name ).str( ", lighting " ).the( this ).item().str( ". Holy fucking shit.</span>" ).ToString() );
					}
				} else if ( a is Obj_Item_Device_Assembly_Igniter ) {
					Ig = a;

					if ( Lang13.Bool( ((Obj)Ig).is_hot() ) ) {
						this.f_light( new Txt( "<span class='notice'>" ).item( b ).str( " fiddles with " ).his_her_its_their().str( " " ).item( a.name ).str( ", and manages to light " ).the( this.name ).item().str( ".</span>" ).ToString() );
					}
				} else if ( Lang13.Bool( ((Obj)a).is_hot() ) ) {
					this.f_light( new Txt( "<span class='notice'>" ).item( b ).str( " lights " ).the( this.name ).item().str( " with " ).his_her_its_their().str( " " ).item( a ).str( ".</span>" ).ToString() );
				}
				return null;
			}

			if ( a is Obj_Item_Stack_Sheet_Wood && ( this.on || this.nocell == 2 ) ) {
				woodnumber = Interface13.Input( b, "You may insert a maximum of four planks.", new Txt( "How much wood would you like to add to " ).the( this ).item().str( "?" ).ToString(), 0, null, InputType.Num );
				woodnumber = ( Convert.ToDouble( woodnumber ) <= 0 ? ((dynamic)( 0 )) : ( Convert.ToDouble( woodnumber ) >= 4 ? ((dynamic)( 4 )) : woodnumber ) );
				woody = a;
				woody.use( woodnumber );
				((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " adds some wood to " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You add some wood to " ).the( this ).item().str( ".</span>" ).ToString() );
				this.cell.charge = Num13.MinInt( Convert.ToInt32( this.cell.charge + woodnumber * 250 ), Convert.ToInt32( this.cell.maxcharge ) );
				this.update_icon();
			}

			if ( this.on && a is Obj_Item_Clothing_Mask_Cigarette ) {
				fag = a;
				fag.light( new Txt( "<span class='notice'>" ).item( b ).str( " lights " ).the( fag ).item().str( " using " ).the( this ).item().str( "'s flames.</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			double light_r = 0;
			double light_p = 0;
			int fireintensity = 0;

			this.overlays.len = 0;
			light_r = 0;
			light_p = 0;

			if ( this.on ) {
				fireintensity = Num13.MinInt( Convert.ToInt32( GlobalFuncs.Floor( ( this.cell.charge - 1 ) / ( this.cell.maxcharge / 4 ) ) + 1 ), 4 );
				this.icon_state = "" + this.base_state + fireintensity;
				light_r = this.light_range_on + Convert.ToDouble( GlobalFuncs.Floor( fireintensity / 2 ) );
				light_p = this.light_power_on + fireintensity * 0.2;
				this.set_temperature = fireintensity * 5 + 15;
			} else {
				this.icon_state = "" + this.base_state + this.on;
			}
			this.set_light( ( this.on ? light_r : 0 ), light_p );
			return null;
		}

	}

}