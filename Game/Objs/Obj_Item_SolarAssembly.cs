// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_SolarAssembly : Obj_Item {

		public bool tracker = false;
		public Type glass_type = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electropack";
			this.w_class = 4;
			this.icon = "icons/obj/power.dmi";
			this.icon_state = "sp_base";
		}

		public Obj_Item_SolarAssembly ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: solar.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic S = null;

			
			if ( A is Obj_Item_Weapon_Wrench && this.loc is Tile ) {
				
				if ( this.isinspace() ) {
					user.WriteMsg( "<span class='warning'>You can't secure " + this + " here.</span>" );
					return null;
				}
				this.anchored = !Lang13.Bool( this.anchored );

				if ( Lang13.Bool( this.anchored ) ) {
					((Ent_Static)user).visible_message( "" + user + " wrenches the solar assembly into place.", "<span class='notice'>You wrench the solar assembly into place.</span>" );
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
				} else {
					((Ent_Static)user).visible_message( "" + user + " unwrenches the solar assembly from its place.", "<span class='notice'>You unwrench the solar assembly from its place.</span>" );
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
				}
				return 1;
			}

			if ( A is Obj_Item_Stack_Sheet_Glass || A is Obj_Item_Stack_Sheet_Rglass ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					user.WriteMsg( "<span class='warning'>You need to secure the assembly before you can add glass.</span>" );
					return null;
				}
				S = A;

				if ( Lang13.Bool( S.use( 2 ) ) ) {
					this.glass_type = A.type;
					GlobalFuncs.playsound( this.loc, "sound/machines/click.ogg", 50, 1 );
					((Ent_Static)user).visible_message( "" + user + " places the glass on the solar assembly.", "<span class='notice'>You place the glass on the solar assembly.</span>" );

					if ( this.tracker ) {
						new Obj_Machinery_Power_Tracker( GlobalFuncs.get_turf( this ), this );
					} else {
						new Obj_Machinery_Power_Solar( GlobalFuncs.get_turf( this ), this );
					}
				} else {
					user.WriteMsg( "<span class='warning'>You need two sheets of glass to put them into a solar panel!</span>" );
					return null;
				}
				return 1;
			}

			if ( !this.tracker ) {
				
				if ( A is Obj_Item_Weapon_Electronics_Tracker ) {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					this.tracker = true;
					GlobalFuncs.qdel( A );
					((Ent_Static)user).visible_message( "" + user + " inserts the electronics into the solar assembly.", "<span class='notice'>You insert the electronics into the solar assembly.</span>" );
					return 1;
				}
			} else if ( A is Obj_Item_Weapon_Crowbar ) {
				new Obj_Item_Weapon_Electronics_Tracker( this.loc );
				this.tracker = false;
				((Ent_Static)user).visible_message( "" + user + " takes out the electronics from the solar assembly.", "<span class='notice'>You take out the electronics from the solar assembly.</span>" );
				return 1;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: solar.dm
		public void give_glass( int device_broken = 0 ) {
			dynamic S = null;

			
			if ( device_broken != 0 ) {
				new Obj_Item_Weapon_Shard( this.loc );
				new Obj_Item_Weapon_Shard( this.loc );
			} else if ( this.glass_type != null ) {
				S = Lang13.Call( this.glass_type, this.loc );
				S.amount = 2;
			}
			this.glass_type = null;
			return;
		}

		// Function from file: solar.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !Lang13.Bool( this.anchored ) && this.loc is Tile ) {
				base.attack_hand( (object)(a), b, c );
			}
			return null;
		}

	}

}