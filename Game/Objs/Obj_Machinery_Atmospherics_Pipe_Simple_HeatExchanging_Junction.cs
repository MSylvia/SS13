// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging_Junction : Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/pipes/junction.dmi";
		}

		// Function from file: he_pipes.dm
		public Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging_Junction ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			switch ((int)( this.dir )) {
				case 2:
					this.initialize_directions = GlobalVars.NORTH;
					this.initialize_directions_he = GlobalVars.SOUTH;
					break;
				case 1:
					this.initialize_directions = GlobalVars.SOUTH;
					this.initialize_directions_he = GlobalVars.NORTH;
					break;
				case 4:
					this.initialize_directions = GlobalVars.WEST;
					this.initialize_directions_he = GlobalVars.EAST;
					break;
				case 8:
					this.initialize_directions = GlobalVars.EAST;
					this.initialize_directions_he = GlobalVars.WEST;
					break;
			}
			return;
		}

		// Function from file: he_pipes.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			suppress_icon_check = suppress_icon_check ?? false;

			this.node1 = this.findConnecting( this.initialize_directions );
			this.node2 = this.findConnectingHE( this.initialize_directions_he );

			if ( !( suppress_icon_check == true ) ) {
				this.update_icon();
			}
			return this.node1 != null || this.node2 != null;
		}

		// Function from file: he_pipes.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			bool have_node1 = false;
			bool have_node2 = false;

			
			if ( this.node1 != null && this.node2 != null ) {
				this.icon_state = "intact" + ( this.invisibility != 0 ? "-f" : "" );
			} else {
				have_node1 = ( this.node1 != null ? true : false );
				have_node2 = ( this.node2 != null ? true : false );
				this.icon_state = "exposed" + have_node1 + have_node2;
			}

			if ( !( this.node1 != null ) && !( this.node2 != null ) ) {
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: he_pipes.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			this.dir = pipe.dir;
			this.initialize_directions = pipe.get_pdir();
			this.initialize_directions_he = pipe.get_hdir();

			if ( !this.initialize( true ) ) {
				GlobalFuncs.to_chat( usr, "There's nothing to connect this junction to! (with how the pipe code works, at least one end needs to be connected to something, otherwise the game deletes the segment)" );
				return false;
			}
			this.build_network();

			if ( this.node1 != null ) {
				this.node1.initialize();
				this.node1.build_network();
			}

			if ( this.node2 != null ) {
				this.node2.initialize();
				this.node2.build_network();
			}
			return true;
		}

	}

}