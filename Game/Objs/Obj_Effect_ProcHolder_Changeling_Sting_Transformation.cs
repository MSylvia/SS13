// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_ProcHolder_Changeling_Sting_Transformation : Obj_Effect_ProcHolder_Changeling_Sting {

		public Changelingprofile selected_dna = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.helptext = "The victim will transform much like a changeling would. The effects will be obvious to the victim, and the process will damage our genomes.";
			this.sting_icon = "sting_transform";
			this.chemical_cost = 40;
			this.dna_cost = 3;
			this.genetic_damage = 100;
		}

		public Obj_Effect_ProcHolder_Changeling_Sting_Transformation ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tiny_prick.dm
		public override dynamic sting_action( Mob user = null, Ent_Static target = null ) {
			dynamic NewDNA = null;
			Ent_Static C = null;

			GlobalFuncs.add_logs( user, target, "stung", "transformation sting", " new identity is " + this.selected_dna.dna.real_name );
			NewDNA = this.selected_dna.dna;

			if ( target is Mob_Living_Carbon_Monkey ) {
				user.WriteMsg( "<span class='notice'>Our genes cry out as we sting " + target.name + "!</span>" );
			}

			if ( target is Mob_Living_Carbon ) {
				C = target;

				if ( Lang13.Bool( ((dynamic)C).status_flags & 2 ) ) {
					((Mob_Living)C).do_jitter_animation( 500 );
					((dynamic)C).take_organ_damage( 20, 0 );
				}
				target.visible_message( "<span class='danger'>" + target + " begins to violenty convulse!</span>", "<span class='userdanger'>You feel a tiny prick and a begin to uncontrollably convulse!</span>" );
				Task13.Schedule( 10, (Task13.Closure)(() => {
					((dynamic)C).real_name = NewDNA.real_name;
					((Dna)NewDNA).transfer_identity( C, true );
					((Mob_Living_Carbon)C).updateappearance( null, true );
					((dynamic)C).domutcheck();
					return;
				}));
			}
			GlobalFuncs.feedback_add_details( "changeling_powers", "TS" );
			return 1;
		}

		// Function from file: tiny_prick.dm
		public override bool can_sting( Mob user = null, Ent_Static target = null ) {
			
			if ( !base.can_sting( user, target ) ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)target).disabilities & 64 ) || !Lang13.Bool( ((dynamic)target).has_dna() ) ) {
				user.WriteMsg( "<span class='warning'>Our sting appears ineffective against its DNA.</span>" );
				return false;
			}
			return true;
		}

		// Function from file: tiny_prick.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			Mob user = null;
			Changeling changeling = null;

			user = Task13.User;
			changeling = user.mind.changeling;

			if ( changeling.chosen_sting != null ) {
				this.unset_sting( user );
				return false;
			}
			this.selected_dna = changeling.select_dna( "Select the target DNA: ", "Target DNA" );

			if ( !( this.selected_dna != null ) ) {
				return false;
			}

			if ( this.selected_dna.dna.species.specflags.Contains( 16384 ) ) {
				user.WriteMsg( "<span class = 'notice'>That DNA is not compatible with changeling retrovirus!" );
				return false;
			}
			base.Click( (object)(loc), control, _params );
			return false;
		}

	}

}