// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atm : Obj_Machinery {

		public dynamic authenticated_account = null;
		public int number_incorrect_tries = 0;
		public dynamic previous_account_number = 0;
		public int max_pin_attempts = 3;
		public int ticks_left_locked_down = 0;
		public int ticks_left_timeout = 0;
		public string machine_id = "";
		public dynamic held_card = null;
		public double? view_screen = 0;
		public int lastprint = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 10;
			this.machine_flags = 256;
			this.icon = "icons/obj/terminals.dmi";
			this.icon_state = "atm";
			this.layer = 2.9;
		}

		// Function from file: ATM.dm
		public Obj_Machinery_Atm ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.machine_id = "" + GlobalFuncs.station_name() + " ATM #" + GlobalFuncs.multinum_display( GlobalVars.num_financial_terminals, 4 );
			GlobalVars.num_financial_terminals++;

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: ATM.dm
		public void scan_user( dynamic human_user = null ) {
			Obj_Item_Weapon_Card I = null;
			dynamic P = null;
			Transaction T = null;

			
			if ( !Lang13.Bool( this.authenticated_account ) && this.linked_db != null ) {
				
				if ( Lang13.Bool( human_user.wear_id ) ) {
					
					if ( human_user.wear_id is Obj_Item_Weapon_Card_Id ) {
						I = human_user.wear_id;
					} else if ( human_user.wear_id is Obj_Item_Device_Pda ) {
						P = human_user.wear_id;
						I = P.id;
					}

					if ( I != null ) {
						this.authenticated_account = this.linked_db.attempt_account_access( I.associated_account_number );

						if ( Lang13.Bool( this.authenticated_account ) ) {
							GlobalFuncs.to_chat( human_user, new Txt( "<span class='notice'>" ).icon( this ).str( " Access granted. Welcome user '" ).item( this.authenticated_account.owner_name ).str( ".'</span>" ).ToString() );
							T = new Transaction();
							T.target_name = this.authenticated_account.owner_name;
							T.purpose = "Remote terminal access";
							T.source_terminal = this.machine_id;
							T.date = GlobalVars.current_date_string;
							T.time = GlobalFuncs.worldtime2text();
							this.authenticated_account.transaction_log.Add( T );
						}
					}
				}
			}
			return;
		}

		// Function from file: ATM.dm
		public void withdraw_arbitrary_sum( Mob user = null, double? arbitrary_sum = null ) {
			Mob H = null;

			
			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( ((dynamic)H).wear_id is Obj_Item_Weapon_Storage_Wallet ) {
					GlobalFuncs.dispense_cash( arbitrary_sum, ((dynamic)H).wear_id );
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='notice'>Funds were transferred into your physical wallet!</span>" ).ToString() );
					return;
				}
			}
			GlobalFuncs.dispense_cash( arbitrary_sum, Map13.GetStep( GlobalFuncs.get_turf( this ), Num13.Rotate( this.dir, 180 ) ) );
			return;
		}

		// Function from file: ATM.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			bool failsafe = false;
			double? transfer_amount = null;
			double? target_account_number = null;
			dynamic transfer_purpose = null;
			Transaction T = null;
			int new_sec_level = 0;
			dynamic tried_account_num = null;
			double? tried_pin = null;
			MoneyAccount failed_account = null;
			Transaction T2 = null;
			Transaction T3 = null;
			double? amount = null;
			Transaction T4 = null;
			double? amount2 = null;
			Transaction T5 = null;
			double? amount3 = null;
			Transaction T6 = null;
			Obj_Item_Weapon_Paper R = null;
			Image stampoverlay = null;
			dynamic I = null;

			failsafe = false;

			if ( Lang13.Bool( href_list["choice"] ) ) {
				
				dynamic _a = href_list["choice"]; // Was a switch-case, sorry for the mess.
				if ( _a=="transfer" ) {
					
					if ( Lang13.Bool( this.authenticated_account ) && this.linked_db != null ) {
						transfer_amount = String13.ParseNumber( href_list["funds_amount"] );

						if ( ( transfer_amount ??0) <= 0 ) {
							Interface13.Alert( "That is not a valid amount." );
						} else if ( ( transfer_amount ??0) <= ( this.authenticated_account.money ??0) ) {
							target_account_number = String13.ParseNumber( href_list["target_acc_number"] );
							transfer_purpose = href_list["purpose"];

							if ( this.linked_db.charge_to_account( target_account_number, this.authenticated_account.owner_name, transfer_purpose, this.machine_id, transfer_amount ) ) {
								GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='info'>Funds transfer successful.</span>" ).ToString() );
								this.authenticated_account.money -= transfer_amount ??0;
								T = new Transaction();
								T.target_name = "Account #" + target_account_number;
								T.purpose = transfer_purpose;
								T.source_terminal = this.machine_id;
								T.date = GlobalVars.current_date_string;
								T.time = GlobalFuncs.worldtime2text();
								T.amount = "-" + transfer_amount;
								this.authenticated_account.transaction_log.Add( T );
							} else {
								GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Funds transfer failed.</span>" ).ToString() );
							}
						} else {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have enough funds to do that!</span>" ).ToString() );
						}
					}
				} else if ( _a=="view_screen" ) {
					this.view_screen = String13.ParseNumber( href_list["view_screen"] );
				} else if ( _a=="change_security_level" ) {
					
					if ( Lang13.Bool( this.authenticated_account ) ) {
						new_sec_level = Num13.MaxInt( Num13.MinInt( ((int)( String13.ParseNumber( href_list["new_security_level"] ) ??0 )), 2 ), 0 );
						this.authenticated_account.security_level = new_sec_level;
					}
				} else if ( _a=="attempt_auth" ) {
					
					if ( this.linked_db != null && !( this.ticks_left_locked_down != 0 ) ) {
						tried_account_num = String13.ParseNumber( href_list["account_num"] );

						if ( !Lang13.Bool( tried_account_num ) ) {
							tried_account_num = this.held_card.associated_account_number;
						}
						tried_pin = String13.ParseNumber( href_list["account_pin"] );
						this.authenticated_account = this.linked_db.attempt_account_access( tried_account_num, tried_pin, ( Lang13.Bool( this.held_card ) && this.held_card.associated_account_number == tried_account_num ? 2 : 1 ) );

						if ( !Lang13.Bool( this.authenticated_account ) ) {
							this.number_incorrect_tries++;

							if ( this.previous_account_number == tried_account_num ) {
								
								if ( this.number_incorrect_tries > this.max_pin_attempts ) {
									this.ticks_left_locked_down = 30;
									GlobalFuncs.playsound( this, "sound/machines/buzz-two.ogg", 50, 1 );
									failed_account = this.linked_db.get_account( tried_account_num );

									if ( failed_account != null ) {
										T2 = new Transaction();
										T2.target_name = failed_account.owner_name;
										T2.purpose = "Unauthorised login attempt";
										T2.source_terminal = this.machine_id;
										T2.date = GlobalVars.current_date_string;
										T2.time = GlobalFuncs.worldtime2text();
										failed_account.transaction_log.Add( T2 );
									}
								} else {
									GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).icon( this ).str( " Incorrect pin/account combination entered, " ).item( this.max_pin_attempts - this.number_incorrect_tries ).str( " attempts remaining.</span>" ).ToString() );
									this.previous_account_number = tried_account_num;
									GlobalFuncs.playsound( this, "sound/machines/buzz-sigh.ogg", 50, 1 );
								}
							} else {
								GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).icon( this ).str( " incorrect pin/account combination entered.</span>" ).ToString() );
								this.number_incorrect_tries = 0;
							}
						} else {
							GlobalFuncs.playsound( this, "sound/machines/twobeep.ogg", 50, 1 );
							this.ticks_left_timeout = 120;
							this.view_screen = 0;
							T3 = new Transaction();
							T3.target_name = this.authenticated_account.owner_name;
							T3.purpose = "Remote terminal access";
							T3.source_terminal = this.machine_id;
							T3.date = GlobalVars.current_date_string;
							T3.time = GlobalFuncs.worldtime2text();
							this.authenticated_account.transaction_log.Add( T3 );
							GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).icon( this ).str( " Access granted. Welcome user '" ).item( this.authenticated_account.owner_name ).str( ".'</span>" ).ToString() );
						}
						this.previous_account_number = tried_account_num;
					}
				} else if ( _a=="withdrawal" ) {
					amount = Num13.MaxInt( ((int)( String13.ParseNumber( href_list["funds_amount"] ) ??0 )), 0 );

					if ( ( amount ??0) <= 0 ) {
						Interface13.Alert( "That is not a valid amount." );
					} else if ( Lang13.Bool( this.authenticated_account ) && ( amount ??0) > 0 ) {
						
						if ( ( amount ??0) <= ( this.authenticated_account.money ??0) ) {
							GlobalFuncs.playsound( this, "sound/machines/chime.ogg", 50, 1 );

							if ( ( amount ??0) > 10000 ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The ATM's screen flashes, 'Maximum single withdrawl limit reached, defaulting to 10,000.'</span>" );
								amount = 10000;
							}
							this.authenticated_account.money -= amount ??0;
							this.withdraw_arbitrary_sum( Task13.User, amount );
							T4 = new Transaction();
							T4.target_name = this.authenticated_account.owner_name;
							T4.purpose = "Credit withdrawal";
							T4.amount = "-" + amount;
							T4.source_terminal = this.machine_id;
							T4.date = GlobalVars.current_date_string;
							T4.time = GlobalFuncs.worldtime2text();
							this.authenticated_account.transaction_log.Add( T4 );
						} else {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have enough funds to do that!</span>" ).ToString() );
						}
					}
				} else if ( _a=="withdraw_to_wallet" ) {
					amount2 = Num13.MaxInt( ((int)( String13.ParseNumber( href_list["funds_amount"] ) ??0 )), 0 );

					if ( !Lang13.Bool( this.held_card ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You must insert your ID card before you can transfer funds to it.</span>" );
						return null;
					}

					if ( ( amount2 ??0) <= 0 ) {
						Interface13.Alert( "That is not a valid amount." );
					} else if ( Lang13.Bool( this.authenticated_account ) && ( amount2 ??0) > 0 ) {
						
						if ( ( amount2 ??0) <= ( this.authenticated_account.money ??0) ) {
							this.authenticated_account.money -= amount2 ??0;
							this.held_card.virtual_wallet.money += amount2 ??0;
							T5 = new Transaction();
							T5.target_name = this.held_card.virtual_wallet.owner_name;
							T5.purpose = "Credit transfer to wallet";
							T5.amount = "-" + amount2;
							T5.source_terminal = this.machine_id;
							T5.date = GlobalVars.current_date_string;
							T5.time = GlobalFuncs.worldtime2text();
							this.authenticated_account.transaction_log.Add( T5 );
							T5 = new Transaction();
							T5.target_name = this.authenticated_account.owner_name;
							T5.purpose = "Credit transfer to wallet";
							T5.amount = "" + amount2;
							T5.source_terminal = this.machine_id;
							T5.date = GlobalVars.current_date_string;
							T5.time = GlobalFuncs.worldtime2text();
							this.held_card.virtual_wallet.transaction_log.Add( T5 );
						} else {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have enough funds to do that!</span>" ).ToString() );
						}
					}
				} else if ( _a=="deposit_from_wallet" ) {
					amount3 = Num13.MaxInt( ((int)( String13.ParseNumber( href_list["funds_amount"] ) ??0 )), 0 );

					if ( !Lang13.Bool( this.held_card ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You must insert your ID card before you can transfer funds from its virtual wallet.</span>" );
						return null;
					}

					if ( ( amount3 ??0) <= 0 ) {
						Interface13.Alert( "That is not a valid amount." );
					} else if ( Lang13.Bool( this.authenticated_account ) && ( amount3 ??0) > 0 ) {
						
						if ( ( amount3 ??0) <= ( this.held_card.virtual_wallet.money ??0) ) {
							this.authenticated_account.money += amount3 ??0;
							this.held_card.virtual_wallet.money -= amount3 ??0;
							T6 = new Transaction();
							T6.target_name = this.held_card.virtual_wallet.owner_name;
							T6.purpose = "Credit transfer from wallet";
							T6.amount = "" + amount3;
							T6.source_terminal = this.machine_id;
							T6.date = GlobalVars.current_date_string;
							T6.time = GlobalFuncs.worldtime2text();
							this.authenticated_account.transaction_log.Add( T6 );
							T6 = new Transaction();
							T6.target_name = this.authenticated_account.owner_name;
							T6.purpose = "Credit transfer from wallet";
							T6.amount = "-" + amount3;
							T6.source_terminal = this.machine_id;
							T6.date = GlobalVars.current_date_string;
							T6.time = GlobalFuncs.worldtime2text();
							this.held_card.virtual_wallet.transaction_log.Add( T6 );
						} else {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have enough funds to do that!</span>" ).ToString() );
						}
					}
				} else if ( _a=="balance_statement" ) {
					
					if ( Lang13.Bool( this.authenticated_account ) ) {
						
						if ( Game13.timeofday < this.lastprint + 100 ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The " + this.name + " flashes an error on its display.</span>" );
							return null;
						}
						this.lastprint = Game13.timeofday;
						R = new Obj_Item_Weapon_Paper( this.loc );
						R.name = "Account balance: " + this.authenticated_account.owner_name;
						R.info = "<b>NT Automated Teller Account Statement</b><br><br>\n						<i>Account holder:</i> " + this.authenticated_account.owner_name + "<br>\n						<i>Account number:</i> " + this.authenticated_account.account_number + "<br>\n						<i>Balance:</i> $" + this.authenticated_account.money + "<br>\n						<i>Date and time:</i> " + GlobalFuncs.worldtime2text() + ", " + GlobalVars.current_date_string + "<br><br>\n						<i>Service terminal ID:</i> " + this.machine_id + "<br>";
						stampoverlay = new Image( "icons/obj/bureaucracy.dmi" );
						stampoverlay.icon_state = "paper_stamp-cent";

						if ( !( R.stamped != null ) ) {
							R.stamped = new ByTable();
						}
						R.stamped.Add( typeof(Obj_Item_Weapon_Stamp) );
						R.overlays.Add( stampoverlay );
						R.stamps += "<HR><i>This paper has been stamped by the Automatic Teller Machine.</i>";
					}

					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.playsound( this.loc, "sound/items/polaroid1.ogg", 50, 1 );
					} else {
						GlobalFuncs.playsound( this.loc, "sound/items/polaroid2.ogg", 50, 1 );
					}
				} else if ( _a=="insert_card" ) {
					
					if ( Lang13.Bool( this.held_card ) ) {
						this.held_card.loc = this.loc;
						this.authenticated_account = null;

						if ( Task13.User is Mob_Living_Carbon_Human && !Lang13.Bool( Task13.User.get_active_hand() ) ) {
							Task13.User.put_in_hands( this.held_card );
						}
						this.held_card = null;
					} else {
						I = Task13.User.get_active_hand();

						if ( I is Obj_Item_Weapon_Card_Id ) {
							
							if ( Task13.User.drop_item( I, this ) ) {
								this.held_card = I;
							}
						}
					}
				} else if ( _a=="logout" ) {
					this.authenticated_account = null;
					failsafe = true;
				}
			}
			this.attack_hand( Task13.User, failsafe );
			return null;
		}

		// Function from file: ATM.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			b = b ?? 0;

			string dat = null;
			string text = null;
			Transaction T = null;

			
			if ( a is Mob_Dead_Observer ) {
				GlobalFuncs.to_chat( a, new Txt( "<span class='warning'>Your ghostly limb passes right through " ).the( this ).item().str( ".</span>" ).ToString() );
				return null;
			}

			if ( a is Mob_Living_Silicon ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>Artificial unit recognized. Artificial units do not currently receive monetary compensation, as per Nanotrasen regulation #1005.</span>" );
				return null;
			}

			if ( Map13.GetDistance( this, a ) <= 1 ) {
				
				if ( !Lang13.Bool( b ) ) {
					this.scan_user( a );
				}
				dat = new Txt( "<h1>Nanotrasen Automatic Teller Machine</h1>\n			For all your monetary needs!<br>\n			<i>This terminal is</i> " ).item( this.machine_id ).str( ". <i>Report this code when contacting Nanotrasen IT Support</i><br/>\n			Card: <a href='?src=" ).Ref( this ).str( ";choice=insert_card'>" ).item( ( Lang13.Bool( this.held_card ) ? this.held_card.name : "------" ) ).str( "</a><br><br><hr>" ).ToString();

				if ( this.ticks_left_locked_down > 0 ) {
					dat += "<span class='alert'>Maximum number of pin attempts exceeded! Access to this ATM has been temporarily disabled.</span>";
				} else if ( Lang13.Bool( this.authenticated_account ) ) {
					
					switch ((int?)( this.view_screen )) {
						case 1:
							dat += "Select a new security level for this account:<br><hr>";
							text = "Zero - Either the account number or card is required to access this account. Vendor transactions will pay from your bank account if your virtual wallet has insufficient funds.";

							if ( this.authenticated_account.security_level != 0 ) {
								text = new Txt( "<A href='?src=" ).Ref( this ).str( ";choice=change_security_level;new_security_level=0'>" ).item( text ).str( "</a>" ).ToString();
							}
							dat += "" + text + "<hr>";
							text = "One - An account number and pin must be manually entered to access this account and process transactions.";

							if ( this.authenticated_account.security_level != 1 ) {
								text = new Txt( "<A href='?src=" ).Ref( this ).str( ";choice=change_security_level;new_security_level=1'>" ).item( text ).str( "</a>" ).ToString();
							}
							dat += "" + text + "<hr>";
							text = "Two - In addition to account number and pin, a card is required to access this account and process transactions.";

							if ( this.authenticated_account.security_level != 2 ) {
								text = new Txt( "<A href='?src=" ).Ref( this ).str( ";choice=change_security_level;new_security_level=2'>" ).item( text ).str( "</a>" ).ToString();
							}
							dat += new Txt().item( text ).str( "<hr><br>\n						<A href='?src=" ).Ref( this ).str( ";choice=view_screen;view_screen=0'>Back</a>" ).ToString();
							break;
						case 3:
							dat += new Txt( "<b>Transaction logs</b><br>\n						<A href='?src=" ).Ref( this ).str( @";choice=view_screen;view_screen=0'>Back</a>
						<table border=1 style='width:100%'>
						<tr>
						<td><b>Date</b></td>
						<td><b>Time</b></td>
						<td><b>Target</b></td>
						<td><b>Purpose</b></td>
						<td><b>Value</b></td>
						<td><b>Source terminal ID</b></td>
						</tr>" ).ToString();

							foreach (dynamic _a in Lang13.Enumerate( this.authenticated_account.transaction_log, typeof(Transaction) )) {
								T = _a;
								
								dat += "<tr>\n							<td>" + T.date + "</td>\n							<td>" + T.time + "</td>\n							<td>" + T.target_name + "</td>\n							<td>" + T.purpose + "</td>\n							<td>$" + T.amount + "</td>\n							<td>" + T.source_terminal + "</td>\n							</tr>";
							}
							dat += "</table>";
							break;
						case 2:
							dat += new Txt( "<b>Bank Account balance:</b> $" ).item( this.authenticated_account.money ).str( "<br>\n						<A href='?src=" ).Ref( this ).str( ";choice=view_screen;view_screen=0'>Back</a><br><br>\n						<form name='transfer' action='?src=" ).Ref( this ).str( "' method='get'>\n						<input type='hidden' name='src' value='" ).Ref( this ).str( @"'>
						<input type='hidden' name='choice' value='transfer'>
						Target account number: <input type='text' name='target_acc_number' value='' style='width:200px; background-color:white;'><br>
						Funds to transfer: <input type='text' name='funds_amount' value='' style='width:200px; background-color:white;'><br>
						Transaction purpose: <input type='text' name='purpose' value='Funds transfer' style='width:200px; background-color:white;'><br>
						<input type='submit' value='Transfer funds'><br>
						</form>" ).ToString();
							break;
						default:
							dat += new Txt( "Welcome, <b>" ).item( this.authenticated_account.owner_name ).str( ".</b><br/>\n						<b>Account balance:</b> $" ).item( this.authenticated_account.money ).str( "\n						<form name='withdrawal' action='?src=" ).Ref( this ).str( "' method='get'>\n						<input type='hidden' name='src' value='" ).Ref( this ).str( @"'>
						<input type='hidden' name='choice' value='withdrawal'>
						<input type='text' name='funds_amount' value='' style='width:200px; background-color:white;'><input type='submit' value='Withdraw funds'><br>
						</form><hr>
						" ).ToString();

							if ( Lang13.Bool( this.held_card ) ) {
								dat += new Txt( "\n							<b>Virtual Wallet balance:</b> $" ).item( this.held_card.virtual_wallet.money ).str( "<br>\n							<form name='withdraw_to_wallet' action='?src=" ).Ref( this ).str( "' method='get'>\n							<input type='hidden' name='src' value='" ).Ref( this ).str( @"'>
							<input type='hidden' name='choice' value='withdraw_to_wallet'>
							<input type='text' name='funds_amount' value='' style='width:200px; background-color:white;'><input type='submit' value='Withdraw to virtual wallet'><br>
							</form>
							<form name='deposit_from_wallet' action='?src=" ).Ref( this ).str( "' method='get'>\n							<input type='hidden' name='src' value='" ).Ref( this ).str( @"'>
							<input type='hidden' name='choice' value='deposit_from_wallet'>
							<input type='text' name='funds_amount' value='' style='width:200px; background-color:white;'><input type='submit' value='Deposit from virtual wallet'><br>
							</form><hr>
							" ).ToString();
							} else {
								dat += "\n							<i>Insert an ID card to perform fund transfers to/from it.</i><br>\n							";
							}
							dat += new Txt( "\n						<A href='?src=" ).Ref( this ).str( ";choice=view_screen;view_screen=1'>Change account security level</a><br>\n						<A href='?src=" ).Ref( this ).str( ";choice=view_screen;view_screen=2'>Make transfer to another bank account</a><br>\n						<A href='?src=" ).Ref( this ).str( ";choice=view_screen;view_screen=3'>View transaction log</a><br>\n						<A href='?src=" ).Ref( this ).str( ";choice=balance_statement'>Print balance statement</a><br>\n						<A href='?src=" ).Ref( this ).str( ";choice=logout'>Logout</a><br>\n						" ).ToString();
							break;
					}
				} else if ( this.linked_db != null ) {
					dat += new Txt( "<form name='atm_auth' action='?src=" ).Ref( this ).str( "' method='get'>\n				<input type='hidden' name='src' value='" ).Ref( this ).str( @"'>
				<input type='hidden' name='choice' value='attempt_auth'>
				<b>Account:</b> <input type='text' id='account_num' name='account_num' style='width:250px; background-color:white;'><br>
				<b>PIN:</b> <input type='text' id='account_pin' name='account_pin' style='width:250px; background-color:white;'><br>
				<input type='submit' value='Submit'><br>
				</form>" ).ToString();
				} else {
					dat += "<span class='warning'>Unable to connect to accounts database, please retry and if the issue persists contact Nanotrasen IT support.</span>";
					this.reconnect_database();
				}
				Interface13.Browse( a, dat, "window=atm;size=550x650" );
			} else {
				Interface13.Browse( a, null, "window=atm" );
			}
			return null;
		}

		// Function from file: ATM.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic idcard = null;
			dynamic dosh = null;
			Transaction T = null;

			
			if ( a is Obj_Item_Weapon_Wrench ) {
				((Ent_Static)b).visible_message( "<span class='notice'>" + b + " begins to take apart the " + this + "!</span>", "<span class='notice'>You start to take apart the " + this + "</span>" );

				if ( GlobalFuncs.do_after( b, this, 40 ) ) {
					((Ent_Static)b).visible_message( "<span class='notice'>" + b + " disassembles the " + this + "!</span>", "<span class='notice'>You disassemble the " + this + "</span>" );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 100, 1 );
					new Obj_Item_Stack_Sheet_Metal( this.loc, 2 );
					GlobalFuncs.qdel( this );
					return null;
				}
			}

			if ( a is Obj_Item_Weapon_Card_Id ) {
				idcard = a;

				if ( !Lang13.Bool( this.held_card ) ) {
					
					if ( Task13.User.drop_item( idcard, this ) ) {
						this.held_card = idcard;

						if ( Lang13.Bool( this.authenticated_account ) && this.held_card.associated_account_number != this.authenticated_account.account_number ) {
							this.authenticated_account = null;
						}
						this.attack_hand( b );
					}
				}
			} else if ( Lang13.Bool( this.authenticated_account ) ) {
				
				if ( a is Obj_Item_Weapon_Spacecash ) {
					dosh = a;
					this.authenticated_account.money += Convert.ToDouble( dosh.worth * dosh.amount );

					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.playsound( this.loc, "sound/items/polaroid1.ogg", 50, 1 );
					} else {
						GlobalFuncs.playsound( this.loc, "sound/items/polaroid2.ogg", 50, 1 );
					}
					T = new Transaction();
					T.target_name = this.authenticated_account.owner_name;
					T.purpose = "Credit deposit";
					T.amount = dosh.worth * dosh.amount;
					T.source_terminal = this.machine_id;
					T.date = GlobalVars.current_date_string;
					T.time = GlobalFuncs.worldtime2text();
					this.authenticated_account.transaction_log.Add( T );
					GlobalFuncs.to_chat( b, "<span class='info'>You insert " + a + " into " + this + ".</span>" );
					this.attack_hand( b );
					GlobalFuncs.qdel( a );
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: ATM.dm
		public override dynamic process(  ) {
			dynamic T = null;
			ByTable cash_found = null;
			Obj_Item_Weapon_Spacecash S = null;
			int amount = 0;
			Obj_Item_Weapon_Spacecash S2 = null;

			
			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( this.linked_db != null && ( ( this.linked_db.stat & 2 ) != 0 || !this.linked_db.activated ) ) {
				this.linked_db = null;
				this.authenticated_account = null;
				this.visible_message( new Txt( "<span class='warning'>" ).icon( this ).str( " " ).item( this ).str( " buzzes rudely, \"Connection to remote database lost.\"</span>" ).ToString() );
				this.updateDialog();
			}

			if ( this.ticks_left_timeout > 0 ) {
				this.ticks_left_timeout--;

				if ( this.ticks_left_timeout <= 0 ) {
					this.authenticated_account = null;
				}
			}

			if ( this.ticks_left_locked_down > 0 ) {
				this.ticks_left_locked_down--;

				if ( this.ticks_left_locked_down <= 0 ) {
					this.number_incorrect_tries = 0;
				}
			}

			if ( Lang13.Bool( this.authenticated_account ) ) {
				T = GlobalFuncs.get_turf( this );

				if ( T is Tile && Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Spacecash), T ) ) ) {
					cash_found = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Item_Weapon_Spacecash) )) {
						S = _a;
						
						cash_found.Add( S );
					}

					if ( cash_found.len > 0 ) {
						
						if ( Rand13.PercentChance( 50 ) ) {
							GlobalFuncs.playsound( this.loc, "sound/items/polaroid1.ogg", 50, 1 );
						} else {
							GlobalFuncs.playsound( this.loc, "sound/items/polaroid2.ogg", 50, 1 );
						}
						amount = GlobalFuncs.count_cash( cash_found );

						foreach (dynamic _b in Lang13.Enumerate( cash_found, typeof(Obj_Item_Weapon_Spacecash) )) {
							S2 = _b;
							
							GlobalFuncs.qdel( S2 );
						}
						this.authenticated_account.charge( -amount, null, "Credit deposit", null, this.machine_id, "Terminal" );
					}
				}
			}
			return null;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}