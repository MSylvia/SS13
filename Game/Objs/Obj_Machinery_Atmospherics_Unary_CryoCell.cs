// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_CryoCell : Obj_Machinery_Atmospherics_Unary {

		public bool on = false;
		public double? temperature_archived = null;
		public Ent_Static occupant = null;
		public dynamic beaker = null;
		public int current_heat_capacity = 50;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 6;
			this.light_color = "#64C864";
			this.light_range_on = 1;
			this.light_power_on = 2;
			this.use_auto_lights = true;
			this.icon = "icons/obj/cryogenics.dmi";
			this.icon_state = "cell-off";
			this.layer = 2.8;
		}

		// Function from file: cryo.dm
		public Obj_Machinery_Atmospherics_Unary_CryoCell ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Cryo(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			this.initialize_directions = this.dir;
			this.initialize();
			this.build_network();

			if ( this.node != null ) {
				this.node.initialize();
				this.node.build_network();
			}
			return;
		}

		// Function from file: cryo.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;

			if ( this.on ) {
				
				if ( this.occupant != null ) {
					
					if ( Convert.ToInt32( ((dynamic)this.occupant).stat ) == 2 || !Lang13.Bool( ((dynamic)this.occupant).has_brain() ) ) {
						this.overlays.Add( GlobalVars.cryo_health_indicator["dead"] );
					} else if ( Convert.ToDouble( ((dynamic)this.occupant).health ) >= Convert.ToDouble( ((dynamic)this.occupant).maxHealth ) ) {
						this.overlays.Add( GlobalVars.cryo_health_indicator["full"] );
					} else if ( Convert.ToDouble( ((dynamic)this.occupant).health ) < Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) {
						this.overlays.Add( GlobalVars.cryo_health_indicator["crit"] );
					} else {
						
						dynamic _a = ((dynamic)this.occupant).health / ((dynamic)this.occupant).maxHealth * 100; // Was a switch-case, sorry for the mess.
						if ( 100<=_a&&_a<=Double.PositiveInfinity ) {
							this.overlays.Add( GlobalVars.cryo_health_indicator["full"] );
						} else if ( 75<=_a&&_a<=100 ) {
							this.overlays.Add( GlobalVars.cryo_health_indicator["good"] );
						} else if ( 50<=_a&&_a<=75 ) {
							this.overlays.Add( GlobalVars.cryo_health_indicator["average"] );
						} else if ( 25<=_a&&_a<=50 ) {
							this.overlays.Add( GlobalVars.cryo_health_indicator["bad"] );
						} else if ( 1<=_a&&_a<=25 ) {
							this.overlays.Add( GlobalVars.cryo_health_indicator["worse"] );
						} else {
							this.overlays.Add( GlobalVars.cryo_health_indicator["dead"] );
						}
					}
					this.icon_state = "cell-occupied";
					return null;
				}
				this.icon_state = "cell-on";
				return null;
			}
			this.icon_state = "cell-off";
			return null;
		}

		// Function from file: cryo.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Mob_Living_Carbon_Slime M = null;
			Mob M2 = null;

			
			if ( a is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>A beaker is already loaded into the machine.</span>" );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.beaker = a;
					((Ent_Static)b).visible_message( new Txt().item( b ).str( " adds " ).a( a ).item().str( " to " ).the( this ).item().str( "!" ).ToString(), new Txt( "You add " ).a( a ).item().str( " to " ).the( this ).item().str( "!" ).ToString() );
				}
			}

			if ( a is Obj_Item_Weapon_Wrench ) {
				return null;
			}

			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( this.panel_open ) {
				((Mob)b).set_machine( this );
				this.interact( b );
				return 1;
			}

			if ( a is Obj_Item_Weapon_Grab ) {
				
				if ( !( a.affecting is Mob ) ) {
					return null;
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( a.affecting, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
					M = _a;
					

					if ( M.Victim == a.affecting ) {
						GlobalFuncs.to_chat( Task13.User, "" + a.affecting.name + " will not fit into the cryo because they have a slime latched onto their head." );
						return null;
					}
				}
				M2 = a.affecting;

				if ( this.put_mob( M2 ) ) {
					GlobalFuncs.qdel( a );
					a = null;
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: cryo.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( this.on ) {
				GlobalFuncs.to_chat( user, "" + this + " is on." );
				return 0;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>" + this.occupant.name + " is inside the " + this + "!</span>" );
				return 0;
			}

			if ( Lang13.Bool( this.beaker ) ) {
				this.detach();
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: cryo.dm
		public bool put_mob( Ent_Static M = null ) {
			
			if ( !( M is Mob_Living_Carbon ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>The cryo cell cannot handle such a lifeform!</span>" );
				return false;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>The cryo cell is already occupied!</span>" );
				return false;
			}

			if ( Lang13.Bool( ((dynamic)M).locked_to ) ) {
				((Ent_Dynamic)((dynamic)M).locked_to).unlock_atom( M );
			}

			if ( !( this.node != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The cell is not correctly connected to its pipe network!</span>" );
				return false;
			}

			if ( Task13.User.pulling == M ) {
				Task13.User.stop_pulling();
			}
			((Mob)M).stop_pulling();
			M.loc = this;
			((dynamic)M).reset_view();

			if ( Convert.ToDouble( ((dynamic)M).health ) > -100 && ( Convert.ToDouble( ((dynamic)M).health ) < 0 || Lang13.Bool( ((dynamic)M).sleeping ) ) ) {
				GlobalFuncs.to_chat( M, "<span class='bnotice'>You feel a cold liquid surround you. Your skin starts to freeze up.</span>" );
			}
			this.occupant = M;
			this.add_fingerprint( Task13.User );
			this.update_icon();
			((dynamic)M).ExtinguishMob();
			return true;
		}

		// Function from file: cryo.dm
		public bool go_out( Ent_Static exit = null ) {
			exit = exit ?? this.loc;

			Ent_Dynamic x = null;

			
			if ( !( this.occupant != null ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
				x = _a;
				

				if ( Lang13.Bool( this.component_parts.Contains( x ) ) || x == this.beaker ) {
					continue;
				}
				x.forceMove( this.loc );
			}

			if ( exit == this.loc ) {
				((dynamic)this.occupant).forceMove( Map13.GetStep( this.loc, ((int)( GlobalVars.SOUTH )) ) );
			} else {
				((dynamic)this.occupant).forceMove( exit );
			}
			((dynamic)this.occupant).reset_view();

			if ( Convert.ToDouble( ((dynamic)this.occupant).bodytemperature ) < 296.41 ) {
				((dynamic)this.occupant).bodytemperature = 296.41;
			}
			this.occupant = null;
			this.update_icon();
			return true;
		}

		// Function from file: cryo.dm
		public void expel_gas(  ) {
			
			if ( Convert.ToDouble( this.air_contents.f_total_moles() ) < 1 ) {
				return;
			}
			return;
		}

		// Function from file: cryo.dm
		public void heat_gas_contents(  ) {
			int air_heat_capacity = 0;
			int combined_heat_capacity = 0;
			double combined_energy = 0;

			
			if ( Convert.ToDouble( this.air_contents.f_total_moles() ) < 1 ) {
				return;
			}
			air_heat_capacity = this.air_contents.heat_capacity();
			combined_heat_capacity = this.current_heat_capacity + air_heat_capacity;

			if ( combined_heat_capacity > 0 ) {
				combined_energy = this.current_heat_capacity * 293.41 + air_heat_capacity * ( this.air_contents.temperature ??0);
				this.air_contents.temperature = combined_energy / combined_heat_capacity;
			}
			return;
		}

		// Function from file: cryo.dm
		public void process_occupant(  ) {
			double heal_brute = 0;
			double heal_fire = 0;
			bool has_cryo = false;
			bool has_clonexa = false;
			bool has_cryo_medicine = false;

			
			if ( Convert.ToDouble( this.air_contents.f_total_moles() ) < 10 ) {
				return;
			}

			if ( this.occupant != null ) {
				
				if ( Convert.ToInt32( ((dynamic)this.occupant).stat ) == 2 ) {
					return;
				}
				((dynamic)this.occupant).bodytemperature += ( ( this.air_contents.temperature ??0) - Convert.ToDouble( ((dynamic)this.occupant).bodytemperature ) ) * this.current_heat_capacity * 20 / ( this.current_heat_capacity + this.air_contents.heat_capacity() );
				((dynamic)this.occupant).bodytemperature = Num13.MaxInt( Convert.ToInt32( ((dynamic)this.occupant).bodytemperature ), ((int)( this.air_contents.temperature ??0 )) );
				((dynamic)this.occupant).stat = 1;

				if ( Convert.ToDouble( ((dynamic)this.occupant).bodytemperature ) < 273.41 ) {
					((dynamic)this.occupant).sleeping = Num13.MaxInt( 5, ((int)( 1 / Convert.ToDouble( ((dynamic)this.occupant).bodytemperature ) * 2000 )) );
					((Mob)this.occupant).Paralyse( Num13.MaxInt( 5, ((int)( 1 / Convert.ToDouble( ((dynamic)this.occupant).bodytemperature ) * 3000 )) ) );

					if ( Convert.ToDouble( this.air_contents.oxygen ) > 2 ) {
						
						if ( Lang13.Bool( ((Mob_Living)this.occupant).getOxyLoss() ) ) {
							((Mob_Living)this.occupant).adjustOxyLoss( -1 );
						}
					} else {
						((Mob_Living)this.occupant).adjustOxyLoss( -1 );
					}

					if ( Convert.ToDouble( ((dynamic)this.occupant).bodytemperature ) < 225 ) {
						
						if ( Lang13.Bool( ((Mob_Living)this.occupant).getToxLoss() ) ) {
							((Mob_Living)this.occupant).adjustToxLoss( Num13.MaxInt( -1, ((int)( -20 / Convert.ToDouble( ((Mob_Living)this.occupant).getToxLoss() ) )) ) );
						}
						heal_brute = ( ((Mob_Living)this.occupant).getBruteLoss() != 0 ? Num13.MinInt( 1, ((int)( 20 / ((Mob_Living)this.occupant).getBruteLoss() )) ) : 0 );
						heal_fire = ( ((Mob_Living)this.occupant).getFireLoss() != 0 ? Num13.MinInt( 1, ((int)( 20 / ((Mob_Living)this.occupant).getFireLoss() )) ) : 0 );
						((Mob_Living)this.occupant).heal_organ_damage( heal_brute, heal_fire );
					}
				}
				has_cryo = ( ((Reagents)this.occupant.reagents).get_reagent_amount( "cryoxadone" ) ?1:0) >= 1;
				has_clonexa = ( ((Reagents)this.occupant.reagents).get_reagent_amount( "clonexadone" ) ?1:0) >= 1;
				has_cryo_medicine = has_cryo || has_clonexa;

				if ( Lang13.Bool( this.beaker ) && !has_cryo_medicine ) {
					((Reagents)this.beaker.reagents).trans_to( this.occupant, 1, 1 );
					((Reagents)this.beaker.reagents).reaction( this.occupant );
				}
			}
			return;
		}

		// Function from file: cryo.dm
		public void detach(  ) {
			Ent_Static R = null;

			
			if ( Lang13.Bool( this.beaker ) ) {
				this.beaker.loc = Map13.GetStep( this.loc, ((int)( GlobalVars.SOUTH )) );

				if ( this.beaker is Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Large_Cyborg ) {
					R = this.beaker.holder.loc;

					if ( ((dynamic)R).module_state_1 == this.beaker || ((dynamic)R).module_state_2 == this.beaker || ((dynamic)R).module_state_3 == this.beaker ) {
						this.beaker.loc = R;
					} else {
						this.beaker.loc = this.beaker.holder;
					}
				}
				this.beaker = null;
			}
			return;
		}

		// Function from file: cryo.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Task13.User == this.occupant ) {
				return 0;
			}

			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 0;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["switchOn"] ) ) {
				this.on = true;
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["switchOff"] ) ) {
				this.on = false;
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["ejectBeaker"] ) ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					this.detach();
				}
			}

			if ( Lang13.Bool( href_list["ejectOccupant"] ) ) {
				
				if ( !( this.occupant != null ) || Task13.User is Mob_Living_Carbon_Slime || Task13.User is Mob_Living_Silicon_Pai ) {
					return 0;
				}
				this.go_out();
			}
			this.add_fingerprint( Task13.User );
			return 1;
		}

		// Function from file: cryo.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable occupantData = null;
			Reagent R = null;

			
			if ( user == this.occupant || Lang13.Bool( user.stat ) && !( user is Mob_Dead_Observer ) ) {
				return;
			}
			data = new ByTable( 0 );
			data["isOperating"] = this.on;
			data["hasOccupant"] = ( this.occupant != null ? true : false );
			occupantData = new ByTable( 0 );

			if ( this.occupant != null ) {
				occupantData["name"] = this.occupant.name;
				occupantData["stat"] = ((dynamic)this.occupant).stat;
				occupantData["health"] = ((dynamic)this.occupant).health;
				occupantData["maxHealth"] = ((dynamic)this.occupant).maxHealth;
				occupantData["minHealth"] = GlobalVars.config.health_threshold_dead;
				occupantData["bruteLoss"] = ((dynamic)this.occupant).getBruteLoss();
				occupantData["oxyLoss"] = ((dynamic)this.occupant).getOxyLoss();
				occupantData["toxLoss"] = ((dynamic)this.occupant).getToxLoss();
				occupantData["fireLoss"] = ((dynamic)this.occupant).getFireLoss();
				occupantData["bodyTemperature"] = ((dynamic)this.occupant).bodytemperature;
			}
			data["occupant"] = occupantData;
			data["cellTemperature"] = Num13.Floor( this.air_contents.temperature ??0 );
			data["cellTemperatureStatus"] = "good";

			if ( ( this.air_contents.temperature ??0) > 273.41 ) {
				data["cellTemperatureStatus"] = "bad";
			} else if ( ( this.air_contents.temperature ??0) > 225 ) {
				data["cellTemperatureStatus"] = "average";
			}
			data["isBeakerLoaded"] = ( Lang13.Bool( this.beaker ) ? true : false );
			data["beakerLabel"] = null;
			data["beakerVolume"] = 0;

			if ( Lang13.Bool( this.beaker ) ) {
				data["beakerLabel"] = ( Lang13.Bool( this.beaker.label_text ) ? this.beaker.label_text : null );

				if ( Lang13.Bool( this.beaker.reagents ) && this.beaker.reagents.reagent_list.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.beaker.reagents.reagent_list, typeof(Reagent) )) {
						R = _a;
						
						data["beakerVolume"] += R.volume;
					}
				}
			}
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "cryo.tmpl", "Cryo Cell Control System", 520, 410 );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			}
			return;
		}

		// Function from file: cryo.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.ui_interact( a );
			return null;
		}

		// Function from file: cryo.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			Ent_Dynamic floater = null;
			Reagent R = null;

			base.examine( (object)(user), size );

			if ( this.Adjacent( user ) ) {
				
				if ( this.contents != null ) {
					GlobalFuncs.to_chat( user, "You can just about make out some properties of the cryo's murky depths:" );

					foreach (dynamic _a in Lang13.Enumerate( this.contents - this.beaker, typeof(Ent_Dynamic) )) {
						floater = _a;
						
						GlobalFuncs.to_chat( user, "A figure floats in the depths, they appear to be " + floater.name );
					}

					if ( Lang13.Bool( this.beaker ) ) {
						GlobalFuncs.to_chat( user, "A beaker, releasing the following chemicals into the fluids:" );

						foreach (dynamic _b in Lang13.Enumerate( this.beaker.reagents.reagent_list, typeof(Reagent) )) {
							R = _b;
							
							GlobalFuncs.to_chat( user, "<span class='info'>" + R.volume + " units of " + R.name + "</span>" );
						}
					}
				} else {
					GlobalFuncs.to_chat( user, "<span class='info'>The chamber appears devoid of anything but its biotic fluids.</span>" );
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='notice'>Too far away to view contents.</span>" );
			}
			return null;
		}

		// Function from file: cryo.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			
			if ( Lang13.Bool( M.stat ) ) {
				return null;
			}
			this.go_out();
			return null;
		}

		// Function from file: cryo.dm
		public override bool allow_drop(  ) {
			return false;
		}

		// Function from file: cryo.dm
		public override dynamic process(  ) {
			base.process();

			if ( ( this.stat & 2 ) != 0 ) {
				this.on = false;
			}
			this.update_icon();

			if ( !( this.node != null ) ) {
				return null;
			}

			if ( !this.on ) {
				this.updateUsrDialog();
				return null;
			}

			if ( this.occupant != null ) {
				
				if ( Convert.ToInt32( ((dynamic)this.occupant).stat ) != 2 ) {
					this.process_occupant();
				}
			}

			if ( this.air_contents != null ) {
				this.temperature_archived = this.air_contents.temperature;
				this.heat_gas_contents();
				this.expel_gas();
			}

			if ( Math.Abs( ( this.temperature_archived ??0) - ( this.air_contents.temperature ??0) ) > 1 ) {
				((dynamic)this.network).update = 1;
			}
			this.updateUsrDialog();
			return 1;
		}

		// Function from file: cryo.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			Mob robit = null;
			Ent_Dynamic A = null;

			
			if ( !( Task13.User is Mob_Living_Carbon_Human ) && !( Task13.User is Mob_Living_Silicon_Robot ) || this.occupant == Task13.User || Task13.User.incapacitated() || Task13.User.lying == true ) {
				return null;
			}

			if ( !( this.occupant != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The sleeper is unoccupied!</span>" );
				return null;
			}

			if ( Task13.User is Mob_Living_Silicon_Robot ) {
				robit = Task13.User;

				if ( robit is Mob_Living_Silicon_Robot && !( ((dynamic)robit).module is Obj_Item_Weapon_RobotModule_Medical ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You do not have the means to do this!</span>" );
					return null;
				}
			}

			if ( !( over_location is Tile ) || over_location.density ) {
				return null;
			}

			if ( !this.Adjacent( over_location ) || !this.Adjacent( Task13.User ) || !Task13.User.Adjacent( over_location ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( over_location.contents, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( A.density ) {
					
					if ( A == this || A is Mob ) {
						continue;
					}
					return null;
				}
			}
			this.visible_message( new Txt().item( Task13.User ).str( " removes " ).item( this.occupant.name ).str( " from " ).the( this ).item().str( "." ).ToString() );
			this.go_out( over_location );
			return null;
		}

		// Function from file: cryo.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			Mob robit = null;
			Ent_Static L = null;
			Mob_Living_Carbon_Slime M = null;

			
			if ( !( O is Mob ) ) {
				return false;
			}

			if ( O.loc == user ) {
				return false;
			}

			if ( ((Mob)user).incapacitated() || user.lying == true ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)O).anchored ) || Map13.GetDistance( user, this ) > 1 || Map13.GetDistance( user, O ) > 1 || Lang13.Bool( user.contents.Find( this ) ) ) {
				return false;
			}

			if ( O is Mob_Living_SimpleAnimal || O is Mob_Living_Silicon ) {
				return false;
			}

			if ( !( user is Mob_Living_Carbon_Human ) && !( user is Mob_Living_Silicon_Robot ) ) {
				return false;
			}

			if ( user.loc == null ) {
				return false;
			}

			if ( !( user.loc is Tile ) || !( O.loc is Tile ) ) {
				return false;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, "<span class='bnotice'>The cryo cell is already occupied!</span>" );
				return false;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				robit = Task13.User;

				if ( robit is Mob_Living_Silicon_Robot && !( ((dynamic)robit).module is Obj_Item_Weapon_RobotModule_Medical ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You do not have the means to do this!</span>" );
					return false;
				}
			}
			L = O;

			if ( !( L is Mob_Living ) || Lang13.Bool( ((dynamic)L).locked_to ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( L, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == L ) {
					GlobalFuncs.to_chat( Task13.User, "" + L.name + " will not fit into the cryo cell because they have a slime latched onto their head." );
					return false;
				}
			}

			if ( this.put_mob( L ) ) {
				
				if ( L == user ) {
					this.visible_message( new Txt().item( user ).str( " climbs into " ).the( this ).item().str( "." ).ToString() );
				} else {
					this.visible_message( new Txt().item( user ).str( " puts " ).item( L.name ).str( " into " ).the( this ).item().str( "." ).ToString() );

					if ( user.pulling == L ) {
						user.pulling = null;
					}
				}
			}
			return false;
		}

		// Function from file: cryo.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.go_out();

			if ( Lang13.Bool( this.beaker ) ) {
				this.detach();
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: cryo.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			dynamic cdir = null;

			
			if ( this.node != null ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				cdir = _a;
				
				this.node = this.findConnecting( cdir );

				if ( this.node != null ) {
					break;
				}
			}
			this.update_icon();
			return false;
		}

		// Function from file: cryo.dm
		[Verb]
		[VerbInfo( name: "Move Inside", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_inside(  ) {
			Mob_Living_Carbon_Slime M = null;

			
			if ( Task13.User.incapacitated() || Task13.User.lying == true || Lang13.Bool( Task13.User.locked_to ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( Task13.User, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == Task13.User ) {
					GlobalFuncs.to_chat( Task13.User, "You're too busy getting your life sucked out of you." );
					return;
				}
			}

			if ( Task13.User.isUnconscious() || ( this.stat & 3 ) != 0 ) {
				return;
			}
			this.put_mob( Task13.User );
			return;
		}

		// Function from file: cryo.dm
		[Verb]
		[VerbInfo( name: "Eject occupant", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_eject(  ) {
			
			if ( Task13.User == this.occupant ) {
				
				if ( Task13.User.isDead() ) {
					return;
				}
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Release sequence activated. This will take thirty seconds.</span>" );
				Task13.Sleep( 300 );

				if ( !( this != null ) || !( Task13.User != null ) || !( this.occupant != null ) || this.occupant != Task13.User ) {
					return;
				}
				this.go_out();
				((dynamic)this.occupant).bodytemperature = 298.41;
			} else {
				
				if ( Task13.User.isUnconscious() || Task13.User is Mob_Living_SimpleAnimal ) {
					return;
				}
				this.go_out();
			}
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}