// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation : Obj_Machinery_Computer_GeneralAirControl {

		public bool on = false;
		public ByTable automations = new ByTable();
		public double? register_amount = 10;
		public ByTable registers = new ByTable();
		public ByTable linked_assemblies = new ByTable();
		public int max_linked_assembly_amount = 5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/atmos_automation";
			this.show_sensors = false;
			this.icon_state = "aac";
		}

		// Function from file: console.dm
		public Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation ( dynamic loc = null ) : base( (object)(loc) ) {
			double? i = null;
			double i2 = 0;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			i = null;
			i = 1;

			while (( i ??0) <= ( this.register_amount ??0)) {
				this.registers.Add( new ByTable(new object [] { 0 }) );
				i++;
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, GlobalVars.max_linked_assembly_amount )) {
				i2 = _a;
				
				this.linked_assemblies.Add( null );
			}
			return;
		}

		// Function from file: console.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			bool new_child = false;
			dynamic A = null;
			dynamic nl = null;
			Automation A2 = null;
			dynamic A3 = null;
			string confirm = null;
			Automation A4 = null;
			dynamic A5 = null;
			dynamic code = null;
			dynamic registerid = null;
			dynamic oldreg = null;
			double? id = null;
			Ent_Dynamic A6 = null;
			dynamic to_connect = null;
			string dat = null;
			double i = 0;
			Browser popup = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["on"] ) ) {
				this.on = !this.on;
				this.updateUsrDialog();
				this.update_icon();
				this.investigation_log( "atmos", "was turned " + ( this.on ? "on" : "off" ) + " by " + GlobalFuncs.key_name( Task13.User ) );
				return 1;
			}

			if ( Lang13.Bool( href_list["add"] ) ) {
				new_child = this.selectValidChildFor( null, Task13.User, new ByTable(new object [] { 0 }) );

				if ( !new_child ) {
					return 1;
				}
				this.automations.Add( new_child );
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["label"] ) ) {
				A = Lang13.FindObj( href_list["label"] );

				if ( !Lang13.Bool( A ) ) {
					return 1;
				}
				nl = Interface13.Input( Task13.User, "Please enter a label for this automation task.", null, null, null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( nl ) ) {
					return 1;
				}
				nl = String13.SubStr( GlobalFuncs.sanitize( nl ), 1, 50 );
				A.label = nl;
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["reset"] ) ) {
				
				if ( href_list["reset"] == "*" ) {
					this.investigation_log( "atmos", "had all automations reset by " + GlobalFuncs.key_name( Task13.User ) );

					foreach (dynamic _a in Lang13.Enumerate( this.automations, typeof(Automation) )) {
						A2 = _a;
						

						if ( !( A2 != null ) ) {
							continue;
						}
						A2.OnReset();
					}
				} else {
					A3 = Lang13.FindObj( href_list["reset"] );

					if ( !Lang13.Bool( A3 ) ) {
						return 1;
					}
					((Automation)A3).OnReset();
					this.investigation_log( "atmos", "had the " + A3.name + "/" + A3.desc + " automation reset by " + GlobalFuncs.key_name( Task13.User ) );
				}
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["remove"] ) ) {
				
				if ( href_list["remove"] == "*" ) {
					this.investigation_log( "atmos", "had all automations removed by " + GlobalFuncs.key_name( Task13.User ) );
					confirm = Interface13.Alert( "Are you sure you want to remove ALL automations?", "Automations", "Yes", "No" );

					if ( confirm == "No" ) {
						return 0;
					}

					foreach (dynamic _b in Lang13.Enumerate( this.automations, typeof(Automation) )) {
						A4 = _b;
						

						if ( !( A4 != null ) ) {
							continue;
						}
						A4.OnRemove();
						this.automations.Remove( A4 );
					}
				} else {
					A5 = Lang13.FindObj( href_list["remove"] );

					if ( !Lang13.Bool( A5 ) ) {
						return 1;
					}
					((Automation)A5).OnRemove();
					this.automations.Remove( A5 );
					this.investigation_log( "atmos", "had the " + A5.name + "/" + A5.desc + " automation removed by " + GlobalFuncs.key_name( Task13.User ) );
				}
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["read"] ) ) {
				code = Interface13.Input( "Input exported AAC code.", "Automations", "", null, null, InputType.Null | InputType.StrMultiline );

				if ( !Lang13.Bool( code ) || !( Task13.User is Mob_Living_Silicon ) && !this.Adjacent( Task13.User ) ) {
					return 0;
				}

				try {
					this.ReadCode( code );
				} catch (Exception __) {
					GlobalFuncs.to_chat( Task13.User, "<span class=warning>Invalid JSON.</span>" );
					return 1;
				}
				this.updateUsrDialog();
				this.investigation_log( "atmos", "had an automations list imported by " + GlobalFuncs.key_name( Task13.User ) + ": " + code );
				return 1;
			}

			if ( Lang13.Bool( href_list["dump"] ) ) {
				Interface13.Input( "Exported AAC code:", "Automations", this.DumpCode(), null, null, InputType.Null | InputType.StrMultiline );
				return 0;
			}

			if ( Lang13.Bool( href_list["editregister"] ) ) {
				registerid = String13.ParseNumber( href_list["editregister"] );
				registerid = GlobalFuncs.sanitize_integer( registerid, 1, this.register_amount );

				if ( !Lang13.Bool( registerid ) ) {
					return 1;
				}
				oldreg = this.registers[registerid];
				this.registers[registerid] = Interface13.Input( "Input register value:", "Register " + registerid, this.registers[registerid], null, null, InputType.Num );
				this.investigation_log( "atmos", new Txt( "had the " ).st_nd_rd( registerid ).str( " registerID changed from " ).item( oldreg ).str( " to " ).item( this.registers[registerid] ).str( " by " ).item( GlobalFuncs.key_name( Task13.User ) ).ToString() );
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["connect_assembly"] ) ) {
				id = String13.ParseNumber( href_list["connect_assembly"] );
				A6 = this.linked_assemblies[id];

				if ( A6 == null ) {
					to_connect = Task13.User.get_active_hand();

					if ( to_connect is Obj_Item_Device_Assembly ) {
						
						if ( Task13.User.drop_item( to_connect, this ) ) {
							this.linked_assemblies[id] = to_connect;
						}
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='info'>Hold the assembly in your hand and press this button to connect it.</span>" );
					}
				} else {
					this.linked_assemblies[id] = null;
					A6.forceMove( GlobalFuncs.get_turf( this ) );
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>You eject " ).the( A6 ).item().str( " from socket #" ).item( id ).str( ".</span>" ).ToString() );
				}
				href_list["view_assemblies"] = 1;
			}

			if ( Lang13.Bool( href_list["view_assemblies"] ) ) {
				dat = "<h2>Connected assemblies</h2>";

				foreach (dynamic _c in Lang13.IterateRange( 1, GlobalVars.max_linked_assembly_amount )) {
					i = _c;
					
					dat += new Txt( "<p>" ).item( i ).str( ") <a href=\"?src=" ).Ref( this ).str( ";connect_assembly=" ).item( i ).str( "\">" ).item( ( this.linked_assemblies[i] == null ? "-click to insert-" : this.linked_assemblies[i] ) ).str( "</a></p>" ).ToString();
				}
				popup = new Browser( Task13.User, "AAC_assemblies", "" + this, 500, 300, this );
				popup.set_content( dat );
				popup.open();
				GlobalFuncs.onclose( Task13.User, "AAC_assemblies" );
			}
			return null;
		}

		// Function from file: console.dm
		public override string return_text(  ) {
			string _out = null;
			Automation A = null;
			double? i = null;

			_out = base.return_text();

			if ( this.on ) {
				_out += new Txt( "<a href=\"?src=" ).Ref( this ).str( ";on=1\" style=\"font-size:large;font-weight:bold;color:red;\">RUNNING</a>" ).ToString();
			} else {
				_out += new Txt( "<a href=\"?src=" ).Ref( this ).str( ";on=1\" style=\"font-size:large;font-weight:bold;color:green;\">STOPPED</a>" ).ToString();
			}
			_out += new Txt( "<p><a href=\"?src=" ).Ref( this ).str( ";view_assemblies=1\">View connected assemblies</a></p>" ).ToString();
			_out += new Txt( "\n		<h2>Automations</h2>\n		<p>[\n		<a href=\"?src=" ).Ref( this ).str( @";add=1"">
			Add
		</a>
		|
		<a href=""?src=" ).Ref( this ).str( @";reset=*"">
			Reset All
		</a>
		|
		<a href=""?src=" ).Ref( this ).str( @";remove=*"">
			Clear
		</a>
		]</p>
		<p>[
		<a href=""?src=" ).Ref( this ).str( @";dump=1"">
			Export
		</a>
		|
		<a href=""?src=" ).Ref( this ).str( ";read=1\">\n			Import\n		</a>\n		]</p>" ).ToString();

			if ( this.automations.len == 0 ) {
				_out += "<i>No automations present.</i>";
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( this.automations, typeof(Automation) )) {
					A = _a;
					
					_out += new Txt( "\n				<fieldset>\n					<legend>\n						<a href=\"?src=" ).Ref( this ).str( ";label=" ).Ref( A ).str( "\">" ).item( A.label ).str( "</a>\n						(<a href=\"?src=" ).Ref( this ).str( ";reset=" ).Ref( A ).str( "\">Reset</a> |\n						<a href=\"?src=" ).Ref( this ).str( ";remove=" ).Ref( A ).str( "\">&times;</a>)\n					</legend>\n					" ).item( A.GetText() ).str( "\n				</fieldset>\n			" ).ToString();
				}
			}
			_out += "<h2>Registers</h2>";
			i = null;
			i = 1;

			while (( i ??0) <= ( this.register_amount ??0)) {
				_out += new Txt( "\n			<fieldset>\n				<legend>\n					Register " ).item( i ).str( "\n				</legend>\n				<a href=\"?src=" ).Ref( this ).str( ";editregister=" ).item( i ).str( "\">" ).item( ( this.registers[i] == null ? false : Lang13.Bool( this.registers[i] ) ) ).str( "</a>\n			</fieldset>\n		" ).ToString();
				i++;
			}
			return _out;
		}

		// Function from file: console.dm
		public void ReadCode( dynamic jsonStr = null ) {
			ByTable json = null;
			ByTable cData = null;
			Type Atype = null;
			dynamic A = null;

			this.automations.len = 0;
			json = GlobalFuncs.json2list( jsonStr );

			if ( json != null && json.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( json, typeof(ByTable) )) {
					cData = _a;
					

					if ( cData == null || !cData.Contains( "type" ) ) {
						Game13.log.WriteMsg( "## TESTING: " + "AAC: Null cData in root JS array." );
						continue;
					}
					Atype = Lang13.FindClass( cData["type"] );

					if ( !Lang13.Bool( GlobalVars.automation_types.Contains( Atype ) ) ) {
						Game13.log.WriteMsg( "## TESTING: " + ( "AAC: Unrecognized Atype " + Atype + "." ) );
						continue;
					}
					A = Lang13.Call( Atype, this );
					((Automation)A).Import( cData );
					this.automations.Add( A );
				}
			}
			return;
		}

		// Function from file: console.dm
		public dynamic DumpCode(  ) {
			ByTable json = null;
			Automation A = null;

			json = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( this.automations, typeof(Automation) )) {
				A = _a;
				
				json.Add( new ByTable(new object [] { A.Export() }) );
			}
			return GlobalFuncs.list2json( json );
		}

		// Function from file: console.dm
		public Automation_GetSensorData MakeGetSensorData( string sns_tag = null, string field = null ) {
			Automation_GetSensorData sensor = null;

			sensor = new Automation_GetSensorData( this );
			sensor.sensor = sns_tag;
			sensor.field = field;
			return sensor;
		}

		// Function from file: console.dm
		public Automation_StaticValue MakeNumber( int value = 0 ) {
			Automation_StaticValue val = null;

			val = new Automation_StaticValue( this );
			val.value = value;
			return val;
		}

		// Function from file: console.dm
		public Automation_Compare MakeCompare( Automation_GetSensorData a = null, Automation_StaticValue b = null, string comparetype = null ) {
			Automation_Compare compare = null;

			compare = new Automation_Compare( this );
			compare.comparator = comparetype;
			compare.children[1] = a;
			compare.children[2] = b;
			return compare;
		}

		// Function from file: console.dm
		public bool selectValidChildFor( Automation parent = null, Mob user = null, ByTable valid_returntypes = null ) {
			ByTable choices = null;
			dynamic childtype = null;
			dynamic A = null;
			dynamic label = null;

			choices = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.automation_types )) {
				childtype = _a;
				
				A = Lang13.Call( childtype, this );

				if ( A.returntype == null ) {
					continue;
				}

				if ( !valid_returntypes.Contains( A.returntype ) ) {
					continue;
				}
				choices[A.name] = A;
			}

			if ( choices.len == 0 ) {
				Game13.log.WriteMsg( "## TESTING: " + ( "Unable to find automations with returntype in " + GlobalFuncs.english_list( valid_returntypes ) + "!" ) );
				return false;
			}
			label = Interface13.Input( user, "Select new automation:", "Automations", "Cancel", choices, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( label ) ) {
				return false;
			}
			return Lang13.Bool( choices[label] );
		}

		// Function from file: console.dm
		public void send_signal( ByTable data = null, string filter = null ) {
			filter = filter ?? GlobalVars.RADIO_ATMOSIA;

			Game_Data signal = null;

			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data = data;
			((dynamic)signal).data["sigtype"] = "command";
			this.radio_connection.post_signal( this, signal, filter );
			return;
		}

		// Function from file: console.dm
		public void request_device_refresh( dynamic device = null ) {
			this.send_signal( new ByTable().Set( "tag", device ).Set( 2, "status" ) );
			return;
		}

		// Function from file: console.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = Lang13.Initial( this, "icon_state" );

			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state += "b";
			} else if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = Lang13.Initial( this, "icon_state" );
				this.icon_state += "0";
			} else if ( this.on ) {
				this.icon_state += "_active";
			}
			return null;
		}

		// Function from file: console.dm
		public override dynamic process(  ) {
			Automation A = null;

			
			if ( this.on ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.automations, typeof(Automation) )) {
					A = _a;
					
					A.process();
				}
			}
			return null;
		}

		// Function from file: console.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic id_tag = null;

			
			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}
			id_tag = ((dynamic)signal).data["tag"];

			if ( !Lang13.Bool( id_tag ) ) {
				return false;
			}
			this.sensor_information[id_tag] = ((dynamic)signal).data;
			return false;
		}

		// Function from file: console.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.linked_assemblies = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}