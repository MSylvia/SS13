// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Solar_Control : Obj_Machinery_Power_Solar {

		public bool id_tag = false;
		public double? cdir = 0;
		public double gen = 0;
		public double lastgen = 0;
		public double? track = 0;
		public double trackrate = 60;
		public double? trackdir = 1;
		public double nexttime = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 50;
			this.active_power_usage = 300;
			this.light_color = "#E1E17D";
			this.use_auto_lights = true;
			this.light_range_on = 3;
			this.light_power_on = 2;
			this.icon = "icons/obj/computer.dmi";
			this.icon_state = "solar";
		}

		public Obj_Machinery_Power_Solar_Control ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: control.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.broken();
				this.density = false;
			}
			return false;
		}

		// Function from file: control.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.broken();
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.broken();
					}
					break;
			}
			return false;
		}

		// Function from file: control.dm
		public override dynamic power_change(  ) {
			dynamic _default = null;

			_default = base.power_change();
			this.update_icon();
			return _default;
		}

		// Function from file: control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Obj_Machinery_Power_Solar_Panel_Tracker T = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				Interface13.Browse( Task13.User, null, "window=solcon" );
				Task13.User.unset_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=solcon" );
				Task13.User.unset_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["dir"] ) ) {
				this.cdir = String13.ParseNumber( href_list["dir"] );
				this.set_panels( this.cdir );
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["rate control"] ) ) {
				
				if ( Lang13.Bool( href_list["cdir"] ) ) {
					this.cdir = ( ( ( this.cdir ??0) + ( String13.ParseNumber( href_list["cdir"] ) ??0) + 360 ) % 360 <= 0 ? 0 : ( ( ( this.cdir ??0) + ( String13.ParseNumber( href_list["cdir"] ) ??0) + 360 ) % 360 >= 359 ? 359 : ( ( this.cdir ??0) + ( String13.ParseNumber( href_list["cdir"] ) ??0) + 360 ) % 360 ) );
					Task13.Schedule( 1, (Task13.Closure)(() => {
						this.set_panels( this.cdir );
						this.update_icon();
						return;
					}));
				}

				if ( Lang13.Bool( href_list["tdir"] ) ) {
					this.trackrate = ( this.trackrate + ( String13.ParseNumber( href_list["tdir"] ) ??0) <= 0 ? 0 : ( this.trackrate + ( String13.ParseNumber( href_list["tdir"] ) ??0) >= 360 ? 360 : this.trackrate + ( String13.ParseNumber( href_list["tdir"] ) ??0) ) );

					if ( this.trackrate != 0 ) {
						this.nexttime = Game13.time + 6000 / this.trackrate;
					}
				}
			}

			if ( Lang13.Bool( href_list["track"] ) ) {
				
				if ( this.trackrate != 0 ) {
					this.nexttime = Game13.time + 6000 / this.trackrate;
				}
				this.track = String13.ParseNumber( href_list["track"] );

				if ( this.track == 2 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.getPowernetNodes(), typeof(Obj_Machinery_Power_Solar_Panel_Tracker) )) {
						T = _a;
						
						this.cdir = T.sun_angle;
						break;
					}
				}
			}

			if ( Lang13.Bool( href_list["trackdir"] ) ) {
				this.trackdir = String13.ParseNumber( href_list["trackdir"] );
			}
			this.set_panels( this.cdir );
			this.update_icon();
			this.updateUsrDialog();
			return null;
		}

		// Function from file: control.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !this.Adjacent( user ) ) {
				
				if ( !( user is Mob_Living_Silicon ) && !( user is Mob_Dead_Observer ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=solcon" );
					return null;
				}
			}
			((Mob)user).set_machine( this );
			t = "<TT><B>Solar Generator Control</B><HR><PRE>\n<B>Generated power</B> : " + Num13.Floor( this.lastgen ) + " W<BR>\nStation Orbital Period : " + 60 / Math.Abs( GlobalVars.sun.rotationRate ) + " minutes<BR>\nStation Orbital Direction : " + ( GlobalVars.sun.rotationRate < 0 ? "CCW" : "CW" ) + "<BR>\nStar Orientation : " + GlobalVars.sun.angle + "&deg (" + GlobalFuncs.angle2text( GlobalVars.sun.angle ) + ")<BR>\nArray Orientation : " + GlobalFuncs.rate_control( this, "cdir", "" + this.cdir + "&deg", true, 10, 60 ) + " (" + GlobalFuncs.angle2text( this.cdir ) + ")<BR>\n<BR><HR><BR>\nTracking :";

			switch ((int?)( this.track )) {
				case 0:
					t += new Txt( "<B>Off</B> <A href='?src=" ).Ref( this ).str( ";track=1'>Manual</A> <A href='?src=" ).Ref( this ).str( ";track=2'>Automatic</A><BR>" ).ToString();
					break;
				case 1:
					t += new Txt( "<A href='?src=" ).Ref( this ).str( ";track=0'>Off</A> <B>Manual</B> <A href='?src=" ).Ref( this ).str( ";track=2'>Automatic</A><BR>" ).ToString();
					break;
				case 2:
					t += new Txt( "<A href='?src=" ).Ref( this ).str( ";track=0'>Off</A> <A href='?src=" ).Ref( this ).str( ";track=1'>Manual</A> <B>Automatic</B><BR>" ).ToString();
					break;
			}
			t += "Manual Tracking Rate: " + GlobalFuncs.rate_control( this, "tdir", "" + this.trackrate / 10 + "&deg/min (" + ( ( this.trackdir ??0) < 0 ? "CCW" : "CW" ) + ")", true, 10 ) + "<BR>\nManual Tracking Direction:";

			switch ((int?)( this.trackdir )) {
				case -1:
					t += new Txt( "<A href='?src=" ).Ref( this ).str( ";trackdir=1'>CW</A> <B>CCW</B><BR>" ).ToString();
					break;
				case 1:
					t += new Txt( "<B>CW</B> <A href='?src=" ).Ref( this ).str( ";trackdir=-1'>CCW</A><BR>" ).ToString();
					break;
			}
			t += new Txt( "<A href='?src=" ).Ref( this ).str( ";close=1'>Close</A></TT>" ).ToString();
			Interface13.Browse( user, t, "window=solcon" );
			GlobalFuncs.onclose( user, "solcon" );
			return null;
		}

		// Function from file: control.dm
		public void broken(  ) {
			this.stat |= 1;
			this.update_icon();
			return;
		}

		// Function from file: control.dm
		public void set_panels( double? cdir = null ) {
			Obj_Machinery_Power_Solar_Panel P = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.getPowernetNodes(), typeof(Obj_Machinery_Power_Solar_Panel) )) {
				P = _a;
				

				if ( Map13.GetDistance( P, this ) < 40 ) {
					
					if ( !( P.control != null ) ) {
						P.control = this;
					}
					P.ndir = cdir;
				}
			}
			return;
		}

		// Function from file: control.dm
		public void tracker_update( double? angle = null ) {
			
			if ( this.track != 2 || ( this.stat & 3 ) != 0 ) {
				return;
			}
			this.cdir = angle;
			this.set_panels( this.cdir );
			this.update_icon();
			this.updateDialog();
			return;
		}

		// Function from file: control.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Structure_Computerframe A = null;
			Obj_Item_Weapon_Circuitboard_SolarControl M = null;
			Obj C = null;
			Obj_Structure_Computerframe A2 = null;
			Obj_Item_Weapon_Circuitboard_SolarControl M2 = null;
			Obj C2 = null;

			
			if ( a is Obj_Item_Weapon_Screwdriver ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 20 ) ) {
					
					if ( ( this.stat & 1 ) != 0 ) {
						this.visible_message( "<span class='notice'>" + b + " clears the broken monitor off of " + this + ".</span>", "You clear the broken monitor off of " + this );
						A = new Obj_Structure_Computerframe( this.loc );
						GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
						M = new Obj_Item_Weapon_Circuitboard_SolarControl( A );

						foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
							C = _a;
							
							C.loc = this.loc;
						}
						A.circuit = M;
						A.state = 3;
						A.icon_state = "3";
						A.anchored = 1;
						GlobalFuncs.qdel( this );
					} else {
						this.visible_message( new Txt().item( b ).str( " begins to unscrew " ).the( this ).item().str( "'s monitor." ).ToString(), "You begin to unscrew the monitor..." );
						A2 = new Obj_Structure_Computerframe( this.loc );
						M2 = new Obj_Item_Weapon_Circuitboard_SolarControl( A2 );

						foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
							C2 = _b;
							
							C2.loc = this.loc;
						}
						A2.circuit = M2;
						A2.state = 4;
						A2.icon_state = "4";
						A2.anchored = 1;
						GlobalFuncs.qdel( this );
					}
				}
			} else {
				this.attack_hand( b );
			}
			return null;
		}

		// Function from file: control.dm
		public override dynamic process(  ) {
			this.lastgen = this.gen;
			this.gen = 0;

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.track == 1 && this.nexttime < Game13.time && ( this.trackdir ??0) * this.trackrate != 0 ) {
				this.nexttime = this.nexttime + 6000 / this.trackrate;
				this.cdir = ( ( this.cdir ??0) + ( this.trackdir ??0) + 360 ) % 360;
				this.set_panels( this.cdir );
				this.update_icon();
			}
			this.updateDialog();
			return null;
		}

		// Function from file: control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: control.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.interact( user );
			return null;
		}

		// Function from file: control.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;

			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "solarb";
				return null;
			}

			if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "solar0";
				return null;
			}
			this.icon_state = "solar";

			if ( ( this.cdir ??0) > 0 ) {
				this.overlays.Add( new Image( "icons/obj/computer.dmi", "solcon-o", GlobalVars.FLY_LAYER, GlobalFuncs.angle2dir( this.cdir ) ) );
			}
			return null;
		}

		// Function from file: control.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Machinery_Power_Solar_Panel P = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.getPowernetNodes(), typeof(Obj_Machinery_Power_Solar_Panel) )) {
				P = _a;
				

				if ( P.control == this ) {
					P.control = null;
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: control.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );

			if ( Lang13.Bool( this.get_powernet() ) ) {
				this.set_panels( this.cdir );
			}
			return false;
		}

	}

}