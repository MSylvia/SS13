// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_Thermomachine : Obj_Machinery_Atmospherics_Components_Unary {

		public string icon_state_on = "cold_on";
		public string icon_state_open = "cold_off";
		public bool on = false;
		public double min_temperature = 0;
		public dynamic max_temperature = 0;
		public double target_temperature = 293.41;
		public double heat_capacity = 0;
		public bool interactive = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "cold_map";
		}

		// Function from file: thermomachine.dm
		public Obj_Machinery_Atmospherics_Components_Unary_Thermomachine ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.initialize_directions = this.dir;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			this.RefreshParts();
			return;
		}

		// Function from file: thermomachine.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic target = null;
			double? adjust = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "power":
					this.on = !this.on;
					this.use_power = ( this.on ?1:0) + 1;
					this.investigate_log( "was turned " + ( this.on ? "on" : "off" ) + " by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
					_default = GlobalVars.TRUE;
					break;
				case "target":
					target = _params["target"];
					adjust = String13.ParseNumber( _params["adjust"] );

					if ( target == "input" ) {
						target = Interface13.Input( "Set new target (" + this.min_temperature + "-" + this.max_temperature + " K):", this.name, this.target_temperature, null, null, InputType.Num | InputType.Null );

						if ( !( target == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
							_default = GlobalVars.TRUE;
						}
					} else if ( Lang13.Bool( adjust ) ) {
						target = this.target_temperature + ( adjust ??0);
						_default = GlobalVars.TRUE;
					} else if ( String13.ParseNumber( target ) != null ) {
						target = String13.ParseNumber( target );
						_default = GlobalVars.TRUE;
					}

					if ( Lang13.Bool( _default ) ) {
						this.target_temperature = Num13.MaxInt( ((int)( this.min_temperature )), Num13.MinInt( Convert.ToInt32( target ), Convert.ToInt32( this.max_temperature ) ) );
						this.investigate_log( "was set to " + this.target_temperature + " K by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
					}
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: thermomachine.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			dynamic air1 = null;

			data = new ByTable();
			data["on"] = this.on;
			data["min"] = this.min_temperature;
			data["max"] = this.max_temperature;
			data["target"] = this.target_temperature;
			data["initial"] = Lang13.Initial( this, "target_temperature" );
			air1 = this.airs[1];
			data["temperature"] = air1.temperature;
			data["pressure"] = air1.return_pressure();
			return data;
		}

		// Function from file: thermomachine.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "thermomachine", this.name, 400, 240, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: thermomachine.dm
		public override int ui_status( dynamic user = null, UiState state = null ) {
			
			if ( this.interactive ) {
				return base.ui_status( (object)(user), state );
			}
			return -1;
		}

		// Function from file: thermomachine.dm
		public override bool default_change_direction_wrench( dynamic user = null, dynamic W = null ) {
			Obj_Machinery_Atmospherics node = null;

			
			if ( !base.default_change_direction_wrench( (object)(user), (object)(W) ) ) {
				return false;
			}
			this.SetInitDirections();
			node = this.nodes[1];

			if ( node != null ) {
				node.disconnect( this );
				this.nodes[1] = null;
			}
			this.nullifyPipenet( this.parents[1] );
			this.atmosinit();
			node = this.nodes[1];

			if ( node != null ) {
				node.atmosinit();
				node.addMember( this );
			}
			this.build_network();
			return true;
		}

		// Function from file: thermomachine.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !( this.on || Lang13.Bool( this.state_open ) ) ) {
				
				if ( this.default_deconstruction_screwdriver( user, this.icon_state_open, Lang13.Initial( this, "icon_state" ), A ) ) {
					return null;
				}

				if ( this.exchange_parts( user, A ) ) {
					return null;
				}
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				return null;
			}

			if ( this.default_deconstruction_crowbar( A ) ) {
				return null;
			}
			return null;
		}

		// Function from file: thermomachine.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: thermomachine.dm
		public override int? process_atmos(  ) {
			GasMixture air_contents = null;
			double air_heat_capacity = 0;
			double combined_heat_capacity = 0;
			dynamic old_temperature = null;
			double combined_energy = 0;
			double temperature_delta = 0;

			base.process_atmos();

			if ( !this.on || !Lang13.Bool( this.nodes[1] ) ) {
				return null;
			}
			air_contents = this.airs[1];
			air_heat_capacity = air_contents.heat_capacity();
			combined_heat_capacity = this.heat_capacity + air_heat_capacity;
			old_temperature = air_contents.temperature;

			if ( combined_heat_capacity > 0 ) {
				combined_energy = this.heat_capacity * this.target_temperature + air_heat_capacity * Convert.ToDouble( air_contents.temperature );
				air_contents.temperature = combined_energy / combined_heat_capacity;
			}
			temperature_delta = Math.Abs( Convert.ToDouble( old_temperature - air_contents.temperature ) );

			if ( temperature_delta > 1 ) {
				this.active_power_usage = this.heat_capacity * temperature_delta / 10 + this.idle_power_usage;
				this.update_parents();
			} else {
				this.active_power_usage = this.idle_power_usage;
			}
			return 1;
		}

		// Function from file: thermomachine.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			this.overlays.Cut();

			if ( this.showpipe ) {
				this.overlays.Add( this.getpipeimage( this.icon, "scrub_cap", this.initialize_directions ) );
			}
			return;
		}

		// Function from file: thermomachine.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( Lang13.Bool( this.panel_open ) ) {
				this.icon_state = this.icon_state_open;
			} else if ( this.on && this.is_operational() ) {
				this.icon_state = this.icon_state_on;
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			return false;
		}

		// Function from file: thermomachine.dm
		public override void RefreshParts(  ) {
			dynamic B = null;
			Obj_Item_Weapon_StockParts_MatterBin M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _a;
				
				B += M.rating;
			}
			this.heat_capacity = Math.Pow( Convert.ToDouble( B - 1 ), 2 ) * 5000;
			return;
		}

		// Function from file: thermomachine.dm
		public override void construction( dynamic pipe_type = null, dynamic obj_color = null ) {
			base.construction( this.dir, this.dir );
			return;
		}

	}

}