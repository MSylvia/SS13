// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_AssemblyHolder_TimerIgniter : Obj_Item_Device_AssemblyHolder {

		// Function from file: holder.dm
		public Obj_Item_Device_AssemblyHolder_TimerIgniter ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_Device_Assembly_Igniter ign = null;
			Obj_Item_Device_Assembly_Timer tmr = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			ign = new Obj_Item_Device_Assembly_Igniter( this );
			ign.secured = true;
			ign.holder = this;
			tmr = new Obj_Item_Device_Assembly_Timer( this );
			tmr.time = 5;
			tmr.secured = true;
			tmr.holder = this;
			GlobalVars.processing_objects.Add( tmr );
			this.a_left = tmr;
			this.a_right = ign;
			this.secured = true;
			this.update_icon();
			this.name = Lang13.Initial( this, "name" ) + ( " (" + tmr.time + " secs)" );
			this.loc.verbs.Add( typeof(Obj_Item_Device_AssemblyHolder_TimerIgniter).GetMethod( "configure" ) );
			return;
		}

		// Function from file: holder.dm
		public override void detached(  ) {
			this.loc.verbs.Remove( typeof(Obj_Item_Device_AssemblyHolder_TimerIgniter).GetMethod( "configure" ) );
			base.detached();
			return;
		}

		// Function from file: holder.dm
		[Verb]
		[VerbInfo( name: "Set Timer", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void configure(  ) {
			Obj_Item_Device_AssemblyHolder holder = null;
			Obj_Item_Device_AssemblyHolder_TimerIgniter gren = null;
			Ent_Dynamic tmr = null;
			dynamic ntime = null;

			
			if ( !( Task13.User.isUnconscious() || Task13.User.restrained() ) ) {
				
				if ( this is Obj_Item_Weapon_Grenade_ChemGrenade ) {
					gren = this;
					holder = ((dynamic)gren).detonator;
				}
				tmr = holder.a_left;

				if ( !( tmr is Obj_Item_Device_Assembly_Timer ) ) {
					tmr = holder.a_right;
				}

				if ( !( tmr is Obj_Item_Device_Assembly_Timer ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>This detonator has no timer.</span>" );
					return;
				}

				if ( Lang13.Bool( ((dynamic)tmr).timing ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Clock is ticking already.</span>" );
				} else {
					ntime = Interface13.Input( "Enter desired time in seconds", "Time", "5", null, null, InputType.Num );

					if ( Convert.ToDouble( ntime ) > 0 && Convert.ToDouble( ntime ) < 1000 ) {
						((dynamic)tmr).time = ntime;
						this.name = Lang13.Initial( this, "name" ) + ( "(" + ((dynamic)tmr).time + " secs)" );
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Timer set to " + ((dynamic)tmr).time + " seconds.</span>" );
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Timer can't be " + ( Convert.ToDouble( ntime ) <= 0 ? "negative" : "more than 1000 seconds" ) + ".</span>" );
					}
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You cannot do this while " + ( Lang13.Bool( Task13.User.stat ) ? "unconscious/dead" : "restrained" ) + ".</span>" );
			}
			return;
		}

	}

}