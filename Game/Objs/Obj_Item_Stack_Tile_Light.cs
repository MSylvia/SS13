// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Stack_Tile_Light : Obj_Item_Stack_Tile {

		public bool on = true;
		public double color_r = 255;
		public double color_g = 255;
		public double color_b = 255;
		public Image color_overlay = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.singular_name = "light floor tile";
			this.force = 3;
			this.throwforce = 5;
			this.throw_speed = 5;
			this.throw_range = 20;
			this.max_amount = 60;
			this.attack_verb = new ByTable(new object [] { "bashed", "battered", "bludgeoned", "thrashed", "smashed" });
			this.material = "glass";
			this.icon_state = "light_tile_broken";
		}

		// Function from file: light.dm
		public Obj_Item_Stack_Tile_Light ( dynamic loc = null, int? amount = null ) : base( (object)(loc), amount ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			this.overlays.Add( this.color_overlay );
			return;
		}

		// Function from file: light.dm
		public Image get_turf_image(  ) {
			Image I = null;

			I = new Image( "icons/turf/floors.dmi", null, "light_overlay" );
			I.color = String13.ColorCode( ((int)( this.color_r )), ((int)( this.color_g )), ((int)( this.color_b )) );
			return I;
		}

		// Function from file: light.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Game_Data M = null;
			ByTable choice_list = null;
			dynamic choice = null;
			dynamic new_color = null;

			
			if ( a is Obj_Item_Weapon_Crowbar ) {
				M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
				((dynamic)M).amount = 1;
				this.amount--;
				new Obj_Item_Stack_LightW( b.loc );

				if ( ( this.amount ??0) <= 0 ) {
					((Mob)b).drop_from_inventory( this );
					GlobalFuncs.qdel( this );
				}
				return 1;
			} else if ( a is Obj_Item_Device_Multitool ) {
				choice_list = new ByTable(new object [] { "Custom" }) + GlobalVars.lightfloor_colors;
				choice = Interface13.Input( b, "Select a colour to set " + this + " to.", "" + this, null, choice_list, InputType.Any );

				if ( !this.Adjacent( b ) ) {
					return null;
				}

				if ( choice == "Custom" ) {
					new_color = Interface13.Input( "Please select a color for the tile.", "" + this, String13.ColorCode( ((int)( this.color_r )), ((int)( this.color_g )), ((int)( this.color_b )) ), null, null, InputType.Color );

					if ( Lang13.Bool( new_color ) ) {
						this.color_r = GlobalFuncs.hex2num( String13.SubStr( new_color, 2, 4 ) );
						this.color_g = GlobalFuncs.hex2num( String13.SubStr( new_color, 4, 6 ) );
						this.color_b = GlobalFuncs.hex2num( String13.SubStr( new_color, 6, 8 ) );
					}
				} else {
					new_color = choice_list[choice];
					this.color_r = GlobalFuncs.hex2num( String13.SubStr( new_color, 2, 4 ) );
					this.color_g = GlobalFuncs.hex2num( String13.SubStr( new_color, 4, 6 ) );
					this.color_b = GlobalFuncs.hex2num( String13.SubStr( new_color, 6, 8 ) );
				}
				this.update_icon();
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: light.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			bool? _default = null;

			_default = base.update_icon( (object)(location), (object)(target) );
			this.overlays = new ByTable();
			this.color_overlay = new Image( "icons/obj/items.dmi", null, "light_tile_overlay" );
			this.color_overlay.color = String13.ColorCode( ((int)( this.color_r )), ((int)( this.color_g )), ((int)( this.color_b )) );
			this.overlays.Add( this.color_overlay );
			return _default;
		}

	}

}