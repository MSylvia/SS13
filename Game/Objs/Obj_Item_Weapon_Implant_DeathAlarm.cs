// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implant_DeathAlarm : Obj_Item_Weapon_Implant {

		public string mobname = "Will Robinson";

		public Obj_Item_Weapon_Implant_DeathAlarm ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: implant.dm
		[VerbInfo( name: "implanted" )]
		[VerbArg( 1, InputType.Mob )]
		public override bool f_implanted( dynamic M = null, dynamic user = null ) {
			this.mobname = M.real_name;
			GlobalVars.processing_objects.Add( this );
			return true;
		}

		// Function from file: implant.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( this.malfunction != 0 ) {
				return null;
			}
			this.malfunction = 1;
			this.activate( "emp" );

			if ( severity == 1 ) {
				
				if ( Rand13.PercentChance( 40 ) ) {
					this.meltdown();
				} else if ( Rand13.PercentChance( 60 ) ) {
					this.malfunction = 2;
				}
				GlobalVars.processing_objects.Remove( this );
			}
			Task13.Schedule( 20, (Task13.Closure)(() => {
				this.malfunction--;
				return;
			}));
			return null;
		}

		// Function from file: implant.dm
		public override bool activate( dynamic cause = null ) {
			dynamic M = null;
			dynamic t = null;
			Game_Data speech = null;
			dynamic name = null;

			M = this.imp_in;
			t = GlobalFuncs.get_area( M );
			this.name = new Txt().improper().item( this.mobname ).str( "'s Death Alarm" ).ToString();
			speech = this.create_speech( "" + this.mobname + " has died in", 1459, this );
			((dynamic)speech).name = "" + this.mobname + "'s Death Alarm";
			((dynamic)speech).job = "Death Alarm";
			((dynamic)speech).set_language( "Galactic Common" );

			dynamic _a = cause; // Was a switch-case, sorry for the mess.
			if ( _a=="death" ) {
				
				if ( !( GlobalVars.announcement_intercom != null ) || !( GlobalVars.announcement_intercom is Obj_Item_Device_Radio_Intercom_Universe ) ) {
					GlobalVars.announcement_intercom = new Obj_Item_Device_Radio_Intercom_Universe( null );
				}

				if ( t is Zone_SyndicateStation || t is Zone_SyndicateMothership || t is Zone_Shuttle_SyndicateElite ) {
					((dynamic)speech).message = "" + this.mobname + " has died in Space!";
				} else {
					((dynamic)speech).message = "" + this.mobname + " has died in " + t.name + "!";
				}
				GlobalVars.processing_objects.Remove( this );
			} else if ( _a=="emp" ) {
				name = ( Rand13.PercentChance( 50 ) ? t.name : Rand13.PickFromTable( GlobalVars.teleportlocs ) );
				((dynamic)speech).message = "" + this.mobname + " has died in " + name + "!";
			} else {
				((dynamic)speech).message = "" + this.mobname + " has died-zzzzt in-in-in...";
				GlobalVars.processing_objects.Remove( this );
			}
			GlobalFuncs.Broadcast_Message( speech, false, 0, 0, new ByTable(new object [] { 0, 1 }) );
			GlobalFuncs.returnToPool( speech );
			return false;
		}

		// Function from file: implant.dm
		public override dynamic process(  ) {
			dynamic M = null;

			
			if ( !this.implanted || this.timestopped ) {
				return null;
			}
			M = this.imp_in;

			if ( M == null ) {
				
				if ( this.loc != null ) {
					
					if ( this.loc.timestopped ) {
						return null;
					}
				}
				this.activate();
			} else if ( Convert.ToInt32( M.stat ) == 2 ) {
				
				if ( M.timestopped ) {
					return null;
				}
				this.activate( "death" );
			}
			return null;
		}

		// Function from file: implant.dm
		public override string get_data(  ) {
			string dat = null;

			dat = @"
<b>Implant Specifications:</b><BR>
<b>Name:</b> Nanotrasen ""Profit Margin"" Class Employee Lifesign Sensor<BR>
<b>Life:</b> Activates upon death.<BR>
<b>Important Notes:</b> Alerts crew to crewmember death.<BR>
<HR>
<b>Implant Details:</b><BR>
<b>Function:</b> Contains a compact radio signaler that triggers when the host's lifesigns cease.<BR>
<b>Special Features:</b> Alerts crew to crewmember death.<BR>
<b>Integrity:</b> Implant will occasionally be degraded by the body's immune system and thus will occasionally malfunction.";
			return dat;
		}

	}

}