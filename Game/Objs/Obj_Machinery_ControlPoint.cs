// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ControlPoint : Obj_Machinery {

		public Obj_Machinery_CaptureTheFlag controlling = null;
		public string team = "none";
		public bool point_rate = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/machines/dominator.dmi";
			this.icon_state = "dominator";
		}

		public Obj_Machinery_ControlPoint ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: capture_the_flag.dm
		public void capture( dynamic user = null ) {
			Obj_Machinery_CaptureTheFlag CTF = null;
			dynamic M = null;
			dynamic mob_area = null;

			
			if ( GlobalFuncs.do_after( user, 30, null, this ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_CaptureTheFlag) )) {
					CTF = _b;
					

					if ( Lang13.Bool( CTF.ctf_enabled ) && CTF.team_members.Contains( user.ckey ) ) {
						this.controlling = CTF;
						this.icon_state = "dominator-" + CTF.team;

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
							M = _a;
							
							mob_area = GlobalFuncs.get_area( M );

							if ( mob_area is Zone_Ctf ) {
								M.WriteMsg( new Txt( "<span class='userdanger'>" ).item( user.real_name ).str( " has captured " ).the( this ).item().str( ", claiming it for " ).item( CTF.team ).str( "! Go take it back!</span>" ).ToString() );
							}
						}
						break;
					}
				}
			}
			return;
		}

		// Function from file: capture_the_flag.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.capture( a );
			return null;
		}

		// Function from file: capture_the_flag.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			this.capture( A );
			return null;
		}

		// Function from file: capture_the_flag.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( this.controlling != null ) {
				this.controlling.control_points += this.point_rate ?1:0;

				if ( this.controlling.control_points >= this.controlling.control_points_to_win ) {
					this.controlling.victory();
				}
			}
			return null;
		}

	}

}