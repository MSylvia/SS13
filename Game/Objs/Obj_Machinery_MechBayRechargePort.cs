// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_MechBayRechargePort : Obj_Machinery {

		public dynamic recharge_floor = null;
		public dynamic recharge_console = null;
		public GlobalIterator_MechBayRecharger pr_recharger = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 6;
			this.icon = "icons/mecha/mech_bay.dmi";
			this.icon_state = "recharge_port";
		}

		// Function from file: mech_bay.dm
		public Obj_Machinery_MechBayRechargePort ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_MechBayPowerPort(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.pr_recharger = new GlobalIterator_MechBayRecharger( null, false );
			this.RefreshParts();
			return;
		}

		// Function from file: mech_bay.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.stat |= 2;
					this.pr_recharger.stop();
					return;
				}));
			}
			return null;
		}

		// Function from file: mech_bay.dm
		public bool set_voltage( double? new_voltage = null ) {
			
			if ( Lang13.Bool( new_voltage ) && Lang13.Bool( Lang13.IsNumber( new_voltage ) ) ) {
				this.pr_recharger.max_charge = new_voltage;
				return true;
			} else {
				return false;
			}
		}

		// Function from file: mech_bay.dm
		public bool active(  ) {
			
			if ( this.pr_recharger.active() ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: mech_bay.dm
		public void stop_charge(  ) {
			
			if ( Lang13.Bool( this.recharge_console ) && !Lang13.Bool( this.recharge_console.stat ) ) {
				this.recharge_console.icon_state = Lang13.Initial( this.recharge_console, "icon_state" );
			}
			this.pr_recharger.stop();
			return;
		}

		// Function from file: mech_bay.dm
		public bool start_charge( Ent_Dynamic recharging_mecha = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				((Obj_Mecha)recharging_mecha).occupant_message( "<span class='rose'>Power port not responding. Terminating.</span>" );
				return false;
			} else if ( Lang13.Bool( ((dynamic)recharging_mecha).cell ) ) {
				((Obj_Mecha)recharging_mecha).occupant_message( "Now charging..." );
				this.pr_recharger.start( new ByTable(new object [] { this, recharging_mecha }) );
				return true;
			} else {
				return false;
			}
			return false;
		}

		// Function from file: mech_bay.dm
		public override dynamic RefreshParts(  ) {
			int lasercount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			lasercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_MicroLaser ) {
					lasercount += SP.rating - 1;
				}
			}
			this.set_voltage( lasercount * 10 + 45 );
			return null;
		}

	}

}