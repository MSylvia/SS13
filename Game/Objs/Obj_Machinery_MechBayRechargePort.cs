// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_MechBayRechargePort : Obj_Machinery {

		public dynamic recharging_mech = null;
		public Obj_Machinery_Computer_MechBayPowerConsole recharge_console = null;
		public int max_charge = 50;
		public bool on = false;
		public bool repairability = false;
		public Tile recharging_turf = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/mecha/mech_bay.dmi";
			this.icon_state = "recharge_port";
			this.dir = 4;
		}

		// Function from file: mech_bay.dm
		public Obj_Machinery_MechBayRechargePort ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_MechRecharger( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			this.RefreshParts();
			this.recharging_turf = Map13.GetStep( this.loc, this.dir );
			return;
		}

		// Function from file: mech_bay.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( this.default_deconstruction_screwdriver( user, "recharge_port-o", "recharge_port", A ) ) {
				return null;
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				this.recharging_turf = Map13.GetStep( this.loc, this.dir );
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );
			return null;
		}

		// Function from file: mech_bay.dm
		public override int? process( dynamic seconds = null ) {
			int delta = 0;

			
			if ( ( this.stat & 2 ) != 0 || !( this.recharge_console != null ) ) {
				return null;
			}

			if ( !Lang13.Bool( this.recharging_mech ) ) {
				this.recharging_mech = Lang13.FindIn( typeof(Obj_Mecha), this.recharging_turf );

				if ( Lang13.Bool( this.recharging_mech ) ) {
					this.recharge_console.update_icon();
				}
			}

			if ( Lang13.Bool( this.recharging_mech ) && Lang13.Bool( this.recharging_mech.cell ) ) {
				
				if ( Convert.ToDouble( this.recharging_mech.cell.charge ) < ( this.recharging_mech.cell.maxcharge ??0) ) {
					delta = Num13.MinInt( this.max_charge, ((int)( ( this.recharging_mech.cell.maxcharge ??0) - Convert.ToDouble( this.recharging_mech.cell.charge ) )) );
					((Obj_Mecha)this.recharging_mech).give_power( delta );
					this.f_use_power( delta * 150 );
				} else {
					this.recharge_console.update_icon();
				}

				if ( this.recharging_mech.loc != this.recharging_turf ) {
					this.recharging_mech = null;
					this.recharge_console.update_icon();
				}
			}
			return null;
		}

		// Function from file: mech_bay.dm
		public override void RefreshParts(  ) {
			dynamic MC = null;
			Obj_Item_Weapon_StockParts_Capacitor C = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Capacitor) )) {
				C = _a;
				
				MC += C.rating;
			}
			this.max_charge = Convert.ToInt32( MC * 25 );
			return;
		}

	}

}