// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_HangingLantern : Obj_Structure {

		public bool flickering = false;
		public dynamic lantern = null;
		public bool start_with_lantern = true;
		public bool busy = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/lighting.dmi";
			this.icon_state = "hanginglantern1";
			this.layer = 5;
		}

		// Function from file: mine_structures.dm
		public Obj_Structure_HangingLantern ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.start_with_lantern ) {
				this.lantern = new Obj_Item_Device_Flashlight_Lantern_On( this );
			}
			this.update_brightness();
			return;
		}

		// Function from file: mine_structures.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( Lang13.Bool( this.lantern ) ) {
				((Ent_Dynamic)this.lantern).forceMove( GlobalFuncs.get_turf( this ) );
				this.lantern = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: mine_structures.dm
		public override bool spook(  ) {
			
			if ( base.spook() ) {
				this.flicker();
			}
			return false;
		}

		// Function from file: mine_structures.dm
		public void update_brightness(  ) {
			
			if ( Lang13.Bool( this.lantern ) ) {
				this.light_range = this.lantern.light_range;
				this.light_power = this.lantern.light_power;
				this.light_color = this.lantern.light_color;
			} else {
				this.light_range = 0;
				this.light_power = 0;
				this.light_color = 0;
			}
			this.set_light( this.light_range, this.light_power, this.light_color );
			return;
		}

		// Function from file: mine_structures.dm
		public void flicker( int? amount = null ) {
			amount = amount ?? Rand13.Int( 10, 20 );

			int? i = null;

			
			if ( this.flickering ) {
				return;
			}
			this.flickering = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				i = null;
				i = 0;

				while (( i ??0) < ( amount ??0)) {
					
					if ( !Lang13.Bool( this.lantern ) ) {
						this.update_brightness();
						break;
					}
					this.set_light( 0 );
					Task13.Sleep( Rand13.Int( 5, 15 ) );
					this.update_brightness();
					i++;
				}
				this.flickering = false;
				return;
			}));
			return;
		}

		// Function from file: mine_structures.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( Lang13.Bool( this.lantern ) ) {
				this.icon_state = "hanginglantern" + this.lantern.on;
			} else {
				this.icon_state = "hanginglantern-construct";
			}
			return null;
		}

		// Function from file: mine_structures.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( b );

			if ( a is Obj_Item_Weapon_Wrench && !this.busy ) {
				
				if ( Lang13.Bool( this.lantern ) ) {
					b.WriteMsg( new Txt( "<span class='warning'>Remove " ).the( this.lantern ).item().str( " from " ).the( this ).item().str( " first.</span>" ).ToString() );
					return null;
				}
				this.busy = true;
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 75, 1 );
				((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " begins deconstructing " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You begin deconstructing " ).the( this ).item().str( ".</span>" ).ToString() );

				if ( GlobalFuncs.do_after( b, this, 30 ) ) {
					new Obj_Item_Mounted_Frame_HangingLanternHook( GlobalFuncs.get_turf( b ) );
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " deconstructs " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You deconstruct " ).the( this ).item().str( ".</span>" ).ToString() );
					this.busy = false;
					GlobalFuncs.qdel( this );
				} else {
					this.busy = false;
				}
			} else if ( a is Obj_Item_Device_Flashlight_Lantern ) {
				
				if ( Lang13.Bool( this.lantern ) ) {
					b.WriteMsg( new Txt( "<span class='warning'>There already is " ).a( this.lantern.name ).item().str( " on " ).the( this ).item().str( ".</span>" ).ToString() );
					return 1;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " puts " ).a( a.name ).item().str( " on the " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You put " ).a( a.name ).item().str( " on the " ).the( this ).item().str( ".</span>" ).ToString() );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 20, 1 );
					this.lantern = a;
					this.update_brightness();
					this.update_icon();
					return 1;
				}
			}
			return null;
		}

		// Function from file: mine_structures.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( Lang13.Bool( this.lantern ) ) {
				GlobalFuncs.to_chat( user, "There is a " + this.lantern.name + " hanging on the hook. " + ( Lang13.Bool( this.lantern.on ) ? "It is lit" : "It is unlit" ) + "." );
			} else {
				GlobalFuncs.to_chat( user, "This one isn't producing any light, most likely missing something important." );
			}
			return null;
		}

		// Function from file: mine_structures.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( this.lantern ) ) {
				((Ent_Static)a).visible_message( new Txt( "<span class='notice'>" ).item( a ).str( " takes " ).the( this.lantern ).item().str( " off of the " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You take " ).the( this.lantern ).item().str( " off of the " ).the( this ).item().str( ".</span>" ).ToString() );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 20, 1 );
				((Ent_Dynamic)this.lantern).forceMove( a.loc );
				((Ent_Static)this.lantern).add_fingerprint( a );
				((Mob)a).put_in_hands( this.lantern );
				this.lantern = null;
				this.update_brightness();
				this.update_icon();
			}
			return null;
		}

		// Function from file: mine_structures.dm
		[Verb]
		[VerbInfo( name: "Toggle Mounted Lantern", desc: "Toggle the lantern mounted on a nearby lantern hook.", group: "Object", access: VerbAccess.InView, range: 1 )]
		public bool toggle_lantern(  ) {
			
			if ( !Lang13.Bool( this.lantern ) ) {
				return false;
			}

			if ( !( Task13.User is Mob_Living ) ) {
				return false;
			}

			if ( !Lang13.Bool( Task13.User.dexterity_check() ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning>You don't have the dexterity to do this!</span>" );
				return false;
			}
			this.lantern.on = !Lang13.Bool( this.lantern.on );
			this.lantern.update_brightness();
			Task13.User.visible_message( new Txt( "<span class='notice'>" ).item( Task13.User ).str( " toggles " ).the( this.lantern ).item().str( " hanging on " ).the( this ).item().str( " " ).item( ( Lang13.Bool( this.lantern.on ) ? "on" : "off" ) ).str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You toggle " ).the( this.lantern ).item().str( " hanging on " ).the( this ).item().str( " " ).item( ( Lang13.Bool( this.lantern.on ) ? "on" : "off" ) ).str( ".</span>" ).ToString() );
			return false;
		}

	}

}