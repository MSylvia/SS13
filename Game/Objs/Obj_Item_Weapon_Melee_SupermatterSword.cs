// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Melee_SupermatterSword : Obj_Item_Weapon_Melee {

		public Obj_Machinery_Power_SupermatterShard shard = null;
		public bool balanced = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "supermatter_sword";
			this.w_class = 4;
			this.force = 0.001;
			this.armour_penetration = 1000;
			this.origin_tech = "combat=5;materials=6";
			this.icon_state = "supermatter_sword";
		}

		// Function from file: misc.dm
		public Obj_Item_Weapon_Melee_SupermatterSword ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.shard = new Obj_Machinery_Power_SupermatterShard( this );
			GlobalVars.SSobj.processing.Add( this );
			this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " appears, balanced ever so perfectly on its hilt. This isn't ominous at all.</span>" ).ToString() );
			return;
		}

		// Function from file: misc.dm
		public override bool add_blood( dynamic M = null ) {
			return false;
		}

		// Function from file: misc.dm
		public void consume_turf( dynamic T = null ) {
			
			if ( Lang13.Bool( ((dynamic)T.baseturf).IsInstanceOfType( T ) ) ) {
				return;
			}
			GlobalFuncs.playsound( T, "sound/effects/supermatter.ogg", 50, 1 );
			((Ent_Static)T).visible_message( new Txt( "<span class='danger'>" ).The( T ).item().str( " smacks into " ).the( this ).item().str( " and rapidly flashes to ash.</span>" ).ToString(), "<span class='italics'>You hear a loud crack as you are washed with a wave of heat.</span>" );
			this.shard.Consume();
			((Tile)T).ChangeTurf( T.baseturf );
			((Tile)T).CalculateAdjacentTurfs();
			return;
		}

		// Function from file: misc.dm
		public void consume_everything( dynamic target = null ) {
			
			if ( target == null ) {
				this.shard.Consume();
			} else if ( !( target is Tile ) ) {
				this.shard.Bumped( target );
			} else {
				this.consume_turf( target );
			}
			return;
		}

		// Function from file: misc.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( "<span class='suicide'>" + user + " touches the " + this + "'s blade. It looks like they're tired of waiting for the radiation to kill them!</span>" );
			user.drop_item();
			this.shard.Bumped( user );
			return 0;
		}

		// Function from file: misc.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			this.visible_message( new Txt( "<span class='danger'>" ).item( P ).str( " smacks into " ).the( this ).item().str( " and rapidly flashes to ash.</span>" ).ToString(), "<span class='italics'>You hear a loud crack as you are washed with a wave of heat.</span>" );
			this.consume_everything();
			return null;
		}

		// Function from file: misc.dm
		public override dynamic acid_act( int acidpwr = 0, double? toxpwr = null, double? acid_volume = null ) {
			this.visible_message( new Txt( "<span class='danger'>" ).The( this ).str( "acid smacks into " ).the( null ).item().str( " and rapidly flashes to ash.</span>" ).ToString(), "<span class='italics'>You hear a loud crack as you are washed with a wave of heat.</span>" );
			this.consume_everything();
			return null;
		}

		// Function from file: misc.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			this.visible_message( new Txt( "<span class='danger'>" ).The( this ).str( "blast wave smacks into " ).the( null ).item().str( " and rapidly flashes to ash.</span>" ).ToString(), "<span class='italics'>You hear a loud crack as you are washed with a wave of heat.</span>" );
			this.consume_everything();
			return false;
		}

		// Function from file: misc.dm
		public override bool pickup( dynamic user = null ) {
			base.pickup( (object)(user) );
			this.balanced = false;
			return false;
		}

		// Function from file: misc.dm
		public override bool throw_impact( dynamic target = null, Mob_Living_Carbon thrower = null ) {
			Ent_Static M = null;

			base.throw_impact( (object)(target), thrower );

			if ( target is Mob ) {
				
				if ( this.loc == M ) {
					((dynamic)M).drop_item();
				}
			}
			this.consume_everything( target );
			return false;
		}

		// Function from file: misc.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			
			if ( Lang13.Bool( user ) && target == user ) {
				user.drop_item();
			}

			if ( proximity_flag == true ) {
				this.consume_everything( target );
			}
			base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
			return false;
		}

		// Function from file: misc.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static target = null;
			dynamic T = null;

			
			if ( this.balanced || this.throwing || this.loc is Mob || this.loc == null ) {
				return null;
			}

			if ( !( this.loc is Tile ) ) {
				target = this.loc;
				this.loc = target.loc;
				this.consume_everything( target );
			} else {
				T = GlobalFuncs.get_turf( this );

				if ( !( T is Tile_Space ) ) {
					this.consume_turf( T );
				}
			}
			return null;
		}

	}

}