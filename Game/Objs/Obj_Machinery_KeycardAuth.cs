// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_KeycardAuth : Obj_Machinery {

		public bool active = false;
		public string v_event = "";
		public int screen = 1;
		public bool confirmed = false;
		public int confirm_delay = 20;
		public bool busy = false;
		public Obj_Machinery_KeycardAuth event_source = null;
		public Mob event_triggered_by = null;
		public Mob event_confirmed_by = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 2;
			this.active_power_usage = 6;
			this.power_channel = 3;
			this.icon = "icons/obj/monitors.dmi";
			this.icon_state = "auth_off";
		}

		// Function from file: keycard authentication.dm
		public Obj_Machinery_KeycardAuth ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.authenticators.Add( this );
			return;
		}

		// Function from file: keycard authentication.dm
		public void trigger_event(  ) {
			
			switch ((string)( this.v_event )) {
				case "Red alert":
					GlobalFuncs.set_security_level( 2 );
					GlobalFuncs.feedback_inc( "alert_keycard_auth_red", 1 );
					break;
				case "Grant Emergency Maintenance Access":
					GlobalFuncs.make_maint_all_access();
					GlobalFuncs.feedback_inc( "alert_keycard_auth_maintGrant", 1 );
					break;
				case "Revoke Emergency Maintenance Access":
					GlobalFuncs.revoke_maint_all_access();
					GlobalFuncs.feedback_inc( "alert_keycard_auth_maintRevoke", 1 );
					break;
				case "Emergency Response Team":
					GlobalFuncs.trigger_armed_response_team( true );
					GlobalFuncs.feedback_inc( "alert_keycard_auth_ert", 1 );
					break;
			}
			return;
		}

		// Function from file: keycard authentication.dm
		public void receive_request( Obj_Machinery_KeycardAuth source = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}
			this.event_source = source;
			this.busy = true;
			this.active = true;
			this.icon_state = "auth_on";
			Task13.Sleep( this.confirm_delay );
			this.event_source = null;
			this.icon_state = "auth_off";
			this.active = false;
			this.busy = false;
			return;
		}

		// Function from file: keycard authentication.dm
		public void broadcast_request(  ) {
			Obj_Machinery_KeycardAuth KA = null;

			this.icon_state = "auth_on";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.authenticators, typeof(Obj_Machinery_KeycardAuth) )) {
				KA = _a;
				

				if ( KA == this ) {
					continue;
				}
				KA.reset();
				Task13.Schedule( 0, (Task13.Closure)(() => {
					KA.receive_request( this );
					return;
				}));
			}
			Task13.Sleep( this.confirm_delay );

			if ( this.confirmed ) {
				this.confirmed = false;
				this.trigger_event(  );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( this.event_triggered_by ) + " triggered and " + GlobalFuncs.key_name( this.event_confirmed_by ) + " confirmed event " + this.v_event ) ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this.event_triggered_by ) + " triggered and " + GlobalFuncs.key_name( this.event_confirmed_by ) + " confirmed event " + this.v_event );
			}
			this.reset();
			return;
		}

		// Function from file: keycard authentication.dm
		public void reset(  ) {
			this.active = false;
			this.v_event = "";
			this.screen = 1;
			this.confirmed = false;
			this.event_source = null;
			this.icon_state = "auth_off";
			this.event_triggered_by = null;
			this.event_confirmed_by = null;
			return;
		}

		// Function from file: keycard authentication.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( this.busy ) {
				GlobalFuncs.to_chat( Task13.User, "This device is busy." );
				return null;
			}

			if ( Lang13.Bool( Task13.User.stat ) || ( this.stat & 3 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "This device is without power." );
				return null;
			}

			if ( Lang13.Bool( href_list["triggerevent"] ) ) {
				this.v_event = href_list["triggerevent"];
				this.screen = 2;
			}

			if ( Lang13.Bool( href_list["reset"] ) ) {
				this.reset();
			}
			this.updateUsrDialog();
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: keycard authentication.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( a.stat ) || ( this.stat & 3 ) != 0 ) {
				GlobalFuncs.to_chat( a, "This device is not powered." );
				return null;
			}

			if ( this.busy ) {
				GlobalFuncs.to_chat( a, "This device is busy." );
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "<h1>Keycard Authentication Device</h1>";
			dat += "This device is used to trigger some high security events. It requires the simultaneous swipe of two high-level ID cards.\n		<br><hr><br>";

			if ( this.screen == 1 ) {
				dat += new Txt( "Select an event to trigger:<ul>\n			<li><A href='?src=" ).Ref( this ).str( ";triggerevent=Red alert'>Red alert</A></li>" ).ToString();
				dat += new Txt( "<li><A href='?src=" ).Ref( this ).str( ";triggerevent=Grant Emergency Maintenance Access'>Grant Emergency Maintenance Access</A></li>\n			<li><A href='?src=" ).Ref( this ).str( ";triggerevent=Revoke Emergency Maintenance Access'>Revoke Emergency Maintenance Access</A></li>\n			</ul>" ).ToString();
				Interface13.Browse( a, dat, "window=keycard_auth;size=500x250" );
			}

			if ( this.screen == 2 ) {
				dat += new Txt( "Please swipe your card to authorize the following event: <b>" ).item( this.v_event ).str( "</b>\n			<p><A href='?src=" ).Ref( this ).str( ";reset=1'>Back</A>" ).ToString();
				Interface13.Browse( a, dat, "window=keycard_auth;size=500x250" );
			}
			return null;
		}

		// Function from file: keycard authentication.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			GlobalVars.authenticators.Remove( this );
			return null;
		}

		// Function from file: keycard authentication.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered( 3 ) ) ) {
				this.stat &= 65533;
				this.icon_state = "auth_off";
			} else {
				this.stat |= 2;
			}
			return null;
		}

		// Function from file: keycard authentication.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic ID = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				GlobalFuncs.to_chat( b, "This device is not powered." );
				return null;
			}

			if ( a is Obj_Item_Weapon_Card_Id ) {
				ID = a;

				if ( Lang13.Bool( ID.access.Contains( GlobalVars.access_keycard_auth ) ) ) {
					
					if ( this.active ) {
						
						if ( this.event_source != null ) {
							this.event_source.confirmed = true;
							this.event_source.event_confirmed_by = Task13.User;
						}
					} else if ( this.screen == 2 ) {
						this.event_triggered_by = Task13.User;
						this.broadcast_request();
					}
				}
			}
			return null;
		}

		// Function from file: keycard authentication.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			GlobalFuncs.to_chat( a, "You are too primitive to use this device." );
			return null;
		}

		// Function from file: keycard authentication.dm
		public override dynamic attack_ai( dynamic user = null ) {
			GlobalFuncs.to_chat( user, "The station AI is not to interact with these devices." );
			return null;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}