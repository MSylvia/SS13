// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Turbine : Obj_Machinery_Power {

		public dynamic compressor = null;
		public Tile outturf = null;
		public double lastgen = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/pipes.dmi";
			this.icon_state = "turbine";
		}

		// Function from file: turbine.dm
		public Obj_Machinery_Power_Turbine ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.outturf = Map13.GetStep( this, this.dir );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.compressor = Lang13.FindIn( typeof(Obj_Machinery_Compressor), Map13.GetStep( this, Map13.GetDistance( this.outturf, this ) ) );

				if ( !Lang13.Bool( this.compressor ) ) {
					this.stat |= 1;
				}
				return;
			}));
			return;
		}

		// Function from file: turbine.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic M = null;

			
			if ( !( Task13.User is Mob_Living_Silicon_Ai ) && Task13.User.z != this.z ) {
				return 1;
			}
			base.Topic( href, href_list, (object)(hclient) );

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() ) {
				return null;
			}

			if ( !Lang13.Bool( Task13.User.dexterity_check() ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return null;
			}

			if ( Task13.User.machine == this && Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile || Task13.User is Mob_Living_Silicon_Ai ) {
				
				if ( Lang13.Bool( href_list["close"] ) ) {
					Interface13.Browse( Task13.User, null, "window=turbine" );
					Task13.User.machine = null;
					return null;
				} else if ( Lang13.Bool( href_list["str"] ) ) {
					this.compressor.starter = !this.compressor.starter;
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( this, 1 ) )) {
						M = _a;
						

						if ( Lang13.Bool( M.client ) && M.machine == this ) {
							this.interact( M );
						}
					}
					return;
				}));
			} else {
				Interface13.Browse( Task13.User, null, "window=turbine" );
				Task13.User.machine = null;
			}
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t = null;

			
			if ( Map13.GetDistance( this, user ) > 1 || ( this.stat & 3 ) != 0 && !( user is Mob_Living_Silicon_Ai ) ) {
				user.machine = null;
				Interface13.Browse( user, null, "window=turbine" );
				return null;
			}
			user.machine = this;
			t = "<TT><B>Gas Turbine Generator</B><HR><PRE>";
			t += new Txt( "Generated power : " ).item( Num13.Floor( this.lastgen ) ).str( " W<BR><BR>\n		Turbine: " ).item( Num13.Floor( this.compressor.rpm ) ).str( " RPM<BR>\n		Starter: " ).item( ( this.compressor.starter ? new Txt( "<A href='?src=" ).Ref( this ).str( ";str=1'>Off</A> <B>On</B>" ).ToString() : new Txt( "<B>Off</B> <A href='?src=" ).Ref( this ).str( ";str=1'>On</A>" ).ToString() ) ).str( "\n		</PRE><HR><A href='?src=" ).Ref( this ).str( ";close=1'>Close</A>\n		</TT>" ).ToString();
			Interface13.Browse( user, t, "window=turbine" );
			GlobalFuncs.onclose( user, "turbine" );
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic process(  ) {
			double newrpm = 0;
			int oamount = 0;
			GasMixture removed = null;
			dynamic M = null;

			
			if ( !this.compressor.starter ) {
				return null;
			}
			this.overlays.len = 0;

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( !Lang13.Bool( this.compressor ) ) {
				this.stat |= 1;
				return null;
			}
			this.lastgen = Math.Pow( this.compressor.rpm / 20000, 0.8 ) * 20000;
			this.add_avail( this.lastgen );
			newrpm = ( this.compressor.gas_contained.temperature ??0) * Convert.ToDouble( this.compressor.gas_contained.f_total_moles() ) / 4;
			newrpm = Num13.MaxInt( 0, ((int)( newrpm )) );

			if ( !this.compressor.starter || newrpm > 1000 ) {
				this.compressor.rpmtarget = newrpm;
			}

			if ( Convert.ToDouble( this.compressor.gas_contained.f_total_moles() ) > 0 ) {
				oamount = Num13.MinInt( Convert.ToInt32( this.compressor.gas_contained.f_total_moles() ), ((int)( ( this.compressor.rpm + 100 ) / 35000 * Convert.ToDouble( this.compressor.capacity ) )) );
				removed = this.compressor.gas_contained.remove( oamount );
				this.outturf.assume_air( removed );
			}

			if ( this.lastgen > 100 ) {
				this.overlays.Add( new Image( "icons/obj/pipes.dmi", "turb-o", GlobalVars.FLY_LAYER ) );
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( this, 1 ) )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) && M.machine == this ) {
					this.interact( M );
				}
			}
			GlobalFuncs.AutoUpdateAI( this );
			return null;
		}

	}

}