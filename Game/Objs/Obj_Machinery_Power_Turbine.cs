// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Turbine : Obj_Machinery_Power {

		public bool opened = false;
		public dynamic compressor = null;
		public Tile outturf = null;
		public double lastgen = 0;
		public double productivity = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/atmospherics/pipes/simple.dmi";
			this.icon_state = "turbine";
		}

		// Function from file: turbine.dm
		public Obj_Machinery_Power_Turbine ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_PowerTurbine( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( this ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( this, 5 ) );
			this.RefreshParts();
			this.outturf = Map13.GetStep( this, this.dir );
			return;
		}

		// Function from file: turbine.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=turbine" );
				Task13.User.unset_machine(  );
				return null;
			} else if ( Lang13.Bool( href_list["str"] ) ) {
				
				if ( Lang13.Bool( this.compressor ) ) {
					this.compressor.starter = !this.compressor.starter;
				}
			}
			this.updateDialog();
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t = null;
			Browser popup = null;

			
			if ( !this.Adjacent( user ) || ( this.stat & 3 ) != 0 && !( user is Mob_Living_Silicon ) ) {
				((Mob)user).unset_machine(  );
				Interface13.Browse( user, null, "window=turbine" );
				return null;
			}
			t = "<TT><B>Gas Turbine Generator</B><HR><PRE>";
			t += "Generated power : " + Num13.Floor( this.lastgen ) + " W<BR><BR>";
			t += "Turbine: " + Num13.Floor( this.compressor.rpm ) + " RPM<BR>";
			t += "Starter: " + ( this.compressor.starter ? new Txt( "<A href='?src=" ).Ref( this ).str( ";str=1'>Off</A> <B>On</B>" ).ToString() : new Txt( "<B>Off</B> <A href='?src=" ).Ref( this ).str( ";str=1'>On</A>" ).ToString() );
			t += new Txt( "</PRE><HR><A href='?src=" ).Ref( this ).str( ";close=1'>Close</A>" ).ToString();
			t += "</TT>";
			popup = new Browser( user, "turbine", this.name );
			popup.set_content( t );
			popup.open();
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( this.default_deconstruction_screwdriver( user, Lang13.Initial( this, "icon_state" ), Lang13.Initial( this, "icon_state" ), A ) ) {
				return null;
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				this.compressor = null;
				this.outturf = Map13.GetStep( this, this.dir );
				this.locate_machinery();

				if ( Lang13.Bool( this.compressor ) ) {
					user.WriteMsg( "<span class='notice'>Compressor connected.</span>" );
					this.stat &= 65534;
				} else {
					user.WriteMsg( "<span class='alert'>Compressor not connected.</span>" );
					this.stat |= 1;
				}
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: turbine.dm
		public override int? process( dynamic seconds = null ) {
			dynamic newrpm = null;
			double oamount = 0;
			GasMixture removed = null;

			
			if ( !Lang13.Bool( this.compressor ) ) {
				this.stat = 1;
			}

			if ( ( this.stat & 1 ) != 0 || Lang13.Bool( this.panel_open ) ) {
				return null;
			}

			if ( !this.compressor.starter ) {
				return null;
			}
			this.overlays.Cut();
			this.lastgen = Math.Pow( this.compressor.rpm / 100000, 0.5 ) * this.productivity * 100000;
			this.add_avail( this.lastgen );
			newrpm = this.compressor.gas_contained.temperature * this.compressor.gas_contained.total_moles() / 4;
			newrpm = Num13.MaxInt( 0, Convert.ToInt32( newrpm ) );

			if ( !this.compressor.starter || Convert.ToDouble( newrpm ) > 1000 ) {
				this.compressor.rpmtarget = newrpm;
			}

			if ( this.compressor.gas_contained.total_moles() > 0 ) {
				oamount = Num13.MinInt( ((int)( this.compressor.gas_contained.total_moles() )), ((int)( ( this.compressor.rpm + 100 ) / 35000 * Convert.ToDouble( this.compressor.capacity ) )) );
				removed = this.compressor.gas_contained.remove( oamount );
				this.outturf.assume_air( removed );
			}

			if ( this.lastgen > 100 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/simple.dmi", "turb-o", GlobalVars.FLY_LAYER ) );
			}
			this.updateDialog();
			return null;
		}

		// Function from file: turbine.dm
		public override bool CanAtmosPass( dynamic T = null ) {
			return !this.density;
		}

		// Function from file: turbine.dm
		public override void locate_machinery(  ) {
			
			if ( Lang13.Bool( this.compressor ) ) {
				return;
			}
			this.compressor = Lang13.FindIn( typeof(Obj_Machinery_Power_Compressor), Map13.GetStep( this, Map13.GetDistance( this.outturf, this ) ) );

			if ( Lang13.Bool( this.compressor ) ) {
				((Obj_Machinery)this.compressor).locate_machinery();
			}
			return;
		}

		// Function from file: turbine.dm
		public override void RefreshParts(  ) {
			double P = 0;
			Obj_Item_Weapon_StockParts_Capacitor C = null;

			P = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Capacitor) )) {
				C = _a;
				
				P += Convert.ToDouble( C.rating );
			}
			this.productivity = P / 6;
			return;
		}

		// Function from file: turbine.dm
		public override void initialize(  ) {
			base.initialize();
			this.locate_machinery();

			if ( !Lang13.Bool( this.compressor ) ) {
				this.stat |= 1;
			}
			return;
		}

	}

}