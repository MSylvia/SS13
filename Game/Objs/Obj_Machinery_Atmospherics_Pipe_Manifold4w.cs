// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe_Manifold4w : Obj_Machinery_Atmospherics_Pipe {

		public Obj_Machinery_Atmospherics node1 = null;
		public Obj_Machinery_Atmospherics node2 = null;
		public Obj_Machinery_Atmospherics node3 = null;
		public Obj_Machinery_Atmospherics node4 = null;
		public dynamic manifold4w_centre = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.color = "#B4B4B4";
			this.volume = 140;
			this.initialize_directions = 15;
			this.level = 1;
			this.baseicon = "manifold4w";
			this.icon = "icons/obj/atmospherics/pipe_manifold.dmi";
			this.icon_state = "map_4way";
		}

		// Function from file: pipes.dm
		public Obj_Machinery_Atmospherics_Pipe_Manifold4w ( dynamic loc = null ) : base( (object)(loc) ) {
			this.icon_state = "manifold4w";
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.centre_overlay = GlobalVars.manifold4w_centre;
			this.centre_overlay.color = this.color;
			this.overlays.Add( this.centre_overlay );
			return;
		}

		// Function from file: pipes.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			suppress_icon_check = suppress_icon_check ?? false;

			Ent_Static T = null;

			this.findAllConnections( this.initialize_directions );
			T = this.loc;
			this.hide( Lang13.BoolNullable( ((dynamic)T).intact ) );

			if ( !( suppress_icon_check == true ) ) {
				this.update_icon();
			}
			return false;
		}

		// Function from file: pipes.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			ByTable node_list = null;

			node_list = new ByTable(new object [] { this.node1, this.node2, this.node3, this.node4 });
			base.update_icon( (object)(location), node_list );

			if ( !( this.node1 != null ) && !( this.node2 != null ) && !( this.node3 != null ) && !( this.node4 != null ) ) {
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic disconnect( Obj_Machinery_Atmospherics reference = null ) {
			
			if ( reference == this.node1 ) {
				
				if ( this.node1 is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
					GlobalFuncs.returnToPool( this.parent );
				}
				this.node1 = null;
			}

			if ( reference == this.node2 ) {
				
				if ( this.node2 is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
					GlobalFuncs.returnToPool( this.parent );
				}
				this.node2 = null;
			}

			if ( reference == this.node3 ) {
				
				if ( this.node3 is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
					GlobalFuncs.returnToPool( this.parent );
				}
				this.node3 = null;
			}

			if ( reference == this.node4 ) {
				
				if ( this.node4 is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
					GlobalFuncs.returnToPool( this.parent );
				}
				this.node4 = null;
			}
			this.update_icon();
			base.disconnect( reference );
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.node1 != null ) {
				this.node1.disconnect( this );
			}

			if ( this.node2 != null ) {
				this.node2.disconnect( this );
			}

			if ( this.node3 != null ) {
				this.node3.disconnect( this );
			}

			if ( this.node4 != null ) {
				this.node4.disconnect( this );
			}
			this.node1 = null;
			this.node2 = null;
			this.node3 = null;
			this.node4 = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			
			if ( !( this.parent != null ) ) {
				_default = base.process();
			}
			GlobalVars.atmos_machines.Remove( this );
			return _default;
		}

		// Function from file: pipes.dm
		public override ByTable pipeline_expansion(  ) {
			return new ByTable(new object [] { this.node1, this.node2, this.node3, this.node4 });
		}

		// Function from file: pipes.dm
		public override void hide( bool? h = null ) {
			
			if ( this.level == 1 && this.loc is Tile_Simulated ) {
				this.invisibility = ( h == true ? 101 : 0 );
			}
			this.update_icon();
			return;
		}

		// Function from file: pipes.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			Ent_Static T = null;

			this.dir = pipe.dir;
			this.initialize_directions = pipe.get_pipe_dir();
			T = this.loc;
			this.level = ( Lang13.Bool( ((dynamic)T).intact ) ? 2 : 1 );
			this.initialize( true );

			if ( !( this.node1 != null ) && !( this.node2 != null ) && !( this.node3 != null ) && !( this.node4 != null ) ) {
				GlobalFuncs.to_chat( usr, "<span class='warning'>There's nothing to connect this manifold to! A pipe segment must be connected to at least one other object!</span>" );
				return false;
			}
			this.update_icon();
			this.build_network();

			if ( this.node1 != null ) {
				this.node1.initialize();
				this.node1.build_network();
			}

			if ( this.node2 != null ) {
				this.node2.initialize();
				this.node2.build_network();
			}

			if ( this.node3 != null ) {
				this.node3.initialize();
				this.node3.build_network();
			}

			if ( this.node4 != null ) {
				this.node4.initialize();
				this.node4.build_network();
			}
			return true;
		}

	}

}