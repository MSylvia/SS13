// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_PortGen : Obj_Machinery_Power {

		public bool active = false;
		public int power_gen = 5000;
		public bool recent_fault = false;
		public int power_output = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 30;
			this.icon_state = "portgen0";
		}

		public Obj_Machinery_Power_PortGen ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: port_gen.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.active ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='info'>The generator is on.</span>" );
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='info'>The generator is off.</span>" );
			}
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( !Lang13.Bool( this.anchored ) ) {
				return null;
			}
			return null;
		}

		// Function from file: port_gen.dm
		public override dynamic process(  ) {
			
			if ( this.active && this.HasFuel() && !this.crit_fail && Lang13.Bool( this.anchored ) && Lang13.Bool( this.powernet ) ) {
				this.add_avail( this.power_gen * this.power_output );
				this.UseFuel();
				this.updateDialog();
			} else {
				this.active = false;
				this.icon_state = Lang13.Initial( this, "icon_state" );
				this.handleInactive();
			}
			return null;
		}

		// Function from file: port_gen.dm
		public virtual void handleInactive(  ) {
			return;
		}

		// Function from file: port_gen.dm
		public virtual void DropFuel(  ) {
			return;
		}

		// Function from file: port_gen.dm
		public virtual void UseFuel(  ) {
			return;
		}

		// Function from file: port_gen.dm
		public virtual bool HasFuel(  ) {
			return true;
		}

	}

}