// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_AmmoStorage : Obj_Item {

		public ByTable stored_ammo = new ByTable();
		public string ammo_type = "/obj/item/ammo_casing/a357";
		public bool exact = true;
		public int max_ammo = 7;
		public int starting_ammo = -1;
		public bool multiple_sprites = false;
		public int sprite_modulo = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.slot_flags = 512;
			this.item_state = "syringe_kit";
			this.starting_materials = new ByTable().Set( "$iron", 50000 );
			this.w_type = 4;
			this.throwforce = 2;
			this.w_class = 1;
			this.throw_speed = 4;
			this.throw_range = 5;
			this.icon = "icons/obj/ammo.dmi";
			this.icon_state = "357";
		}

		// Function from file: ammunition.dm
		public Obj_Item_AmmoStorage ( dynamic loc = null ) : base( (object)(loc) ) {
			int? ammo_to_load = null;
			int? i = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			ammo_to_load = 0;

			if ( this.starting_ammo > -1 && this.starting_ammo < this.max_ammo ) {
				ammo_to_load = this.starting_ammo;
				this.update_icon();
			} else {
				ammo_to_load = this.max_ammo;
			}
			i = null;
			i = 1;

			while (( i ??0) <= ( ammo_to_load ??0)) {
				this.stored_ammo.Add( Lang13.Call( this.ammo_type, this ) );
				i++;
			}
			return;
		}

		// Function from file: ammunition.dm
		public int ammo_count(  ) {
			return this.stored_ammo.len;
		}

		// Function from file: ammunition.dm
		public dynamic get_round( bool? keep = null ) {
			keep = keep ?? false;

			dynamic b = null;

			
			if ( !( this.ammo_count() != 0 ) ) {
				return null;
			} else {
				b = this.stored_ammo[this.stored_ammo.len];
				this.stored_ammo.Remove( b );

				if ( keep == true ) {
					this.stored_ammo.Insert( 1, b );
				} else {
					this.update_icon();
				}
				return b;
			}
		}

		// Function from file: ammunition.dm
		public int LoadInto( dynamic bullets_from = null, Obj_Item target = null ) {
			int bullets_loaded = 0;
			Obj_Item AS = null;
			Obj_Item_AmmoCasing loading = null;
			Obj_Item PW = null;
			Obj_Item_AmmoCasing loading2 = null;

			
			if ( !Lang13.Bool( bullets_from ) || !( bullets_from is Obj_Item_AmmoStorage ) ) {
				return 0;
			}

			if ( !( target != null ) || !( target is Obj_Item ) ) {
				return 0;
			}
			bullets_loaded = 0;

			if ( target is Obj_Item_AmmoStorage ) {
				
				if ( bullets_from is Obj_Item_AmmoStorage_Box || target is Obj_Item_AmmoStorage_Box ) {
					
					if ( !this.slowLoad( bullets_from, target ) ) {
						return 0;
					}
				}
				AS = target;

				foreach (dynamic _a in Lang13.Enumerate( bullets_from.stored_ammo, typeof(Obj_Item_AmmoCasing) )) {
					loading = _a;
					

					if ( ((dynamic)AS).stored_ammo.len >= Convert.ToDouble( ((dynamic)AS).max_ammo ) ) {
						break;
					}

					if ( Lang13.Bool( ((dynamic)AS).exact ) && loading.type == Lang13.FindClass( ((dynamic)AS).ammo_type ) || !Lang13.Bool( ((dynamic)AS).exact ) && Lang13.Bool( ((dynamic)Lang13.FindClass( ((dynamic)AS).ammo_type )).IsInstanceOfType( loading ) ) ) {
						bullets_from.stored_ammo.Remove( loading );
						((dynamic)AS).stored_ammo += loading;
						loading.loc = AS;
						bullets_loaded++;
					}
				}
			}

			if ( target is Obj_Item_Weapon_Gun_Projectile ) {
				
				if ( bullets_from is Obj_Item_AmmoStorage_Box ) {
					
					if ( !this.slowLoad( bullets_from, target ) ) {
						return 0;
					}
				}
				PW = target;

				foreach (dynamic _b in Lang13.Enumerate( bullets_from.stored_ammo, typeof(Obj_Item_AmmoCasing) )) {
					loading2 = _b;
					

					if ( ((dynamic)PW).loaded.len >= Convert.ToDouble( ((dynamic)PW).max_shells ) ) {
						break;
					}

					if ( Lang13.Bool( ((dynamic)PW).caliber ) && Lang13.Bool( ((dynamic)PW).caliber[loading2.caliber] ) ) {
						bullets_from.stored_ammo.Remove( loading2 );
						((dynamic)PW).loaded += loading2;
						loading2.loc = PW;
						bullets_loaded++;
					}
				}
			}
			bullets_from.update_icon();
			target.update_icon();
			return bullets_loaded;
		}

		// Function from file: ammunition.dm
		public bool slowLoad( dynamic bullets_from = null, Obj_Item target = null ) {
			int trying_to_load = 0;
			Obj_Item PW = null;
			Obj_Item AS = null;
			int dropped_bullets = 0;
			int to_drop = 0;
			int? i = null;
			Ent_Static AC = null;

			
			if ( !Lang13.Bool( bullets_from ) || !( bullets_from is Obj_Item_AmmoStorage ) ) {
				return false;
			}

			if ( !( target != null ) || !( target is Obj_Item ) ) {
				return false;
			}
			trying_to_load = 0;

			if ( target is Obj_Item_Weapon_Gun_Projectile ) {
				PW = target;
				trying_to_load = Num13.MinInt( Convert.ToInt32( ((dynamic)PW).max_shells - ((dynamic)PW).loaded.len ), bullets_from.stored_ammo.len );
			} else {
				AS = target;
				trying_to_load = Num13.MinInt( Convert.ToInt32( ((dynamic)AS).max_ammo - ((dynamic)AS).stored_ammo.len ), bullets_from.stored_ammo.len );
			}

			if ( Task13.User != null && trying_to_load != 0 ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "You begin loading " ).the( target ).item().str( "..." ).ToString() );
			}

			if ( trying_to_load != 0 && GlobalFuncs.do_after( Task13.User, target, trying_to_load * 5 ) ) {
				return true;
			} else if ( trying_to_load != 0 ) {
				dropped_bullets = 0;
				to_drop = Rand13.Int( 1, trying_to_load );
				i = null;
				i = 1;

				while (( i ??0) <= Num13.MinInt( to_drop, bullets_from.stored_ammo.len )) {
					AC = bullets_from.stored_ammo[1];
					bullets_from.stored_ammo.Remove( AC );
					AC.loc = GlobalFuncs.get_turf( target );
					dropped_bullets++;
					bullets_from.update_icon();
					i++;
				}

				if ( Task13.User != null ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='rose'>You fumble around and drop " ).item( dropped_bullets ).str( " shell" ).s().str( "!</span>" ).ToString() );
				}
				return false;
			}
			return false;
		}

		// Function from file: ammunition.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			Ent_Static dropped = null;

			
			if ( this.stored_ammo.len != 0 ) {
				dropped = this.stored_ammo[1];
				dropped.loc = GlobalFuncs.get_turf( user );
				this.stored_ammo.Remove( dropped );
				this.update_icon();
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You remove " ).a( dropped ).item().str( " from " ).the( this ).item().str( ".</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: ammunition.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.max_ammo > 0 ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>There are " ).item( this.stored_ammo.len ).str( " shell" ).s().str( " left!</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: ammunition.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int visible_ammo = 0;

			
			if ( this.multiple_sprites ) {
				
				if ( !( this.sprite_modulo != 0 ) ) {
					this.sprite_modulo = this.max_ammo;
				}
				visible_ammo = this.stored_ammo.len - this.stored_ammo.len % this.sprite_modulo;

				if ( visible_ammo == 0 && this.stored_ammo.len != 0 ) {
					visible_ammo += this.sprite_modulo;
				}
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-" + visible_ammo;
			}
			return null;
		}

		// Function from file: ammunition.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic AC = null;
			bool accepted = false;
			dynamic AS = null;
			int loaded_bullets = 0;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_AmmoCasing ) {
				AC = a;
				accepted = false;

				if ( this.exact && AC.type == Lang13.FindClass( this.ammo_type ) || !this.exact && Lang13.Bool( ((dynamic)Lang13.FindClass( this.ammo_type )).IsInstanceOfType( AC ) ) ) {
					accepted = true;
				}

				if ( Lang13.Bool( AC.BB ) && accepted && this.stored_ammo.len < this.max_ammo ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You successfully load the " ).item( this ).str( " with " ).the( AC ).item().str( ". </span>" ).ToString() );
					} else {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>You can't let go of " ).the( a ).item().str( "!</span>" ).ToString() );
						return null;
					}
					this.stored_ammo.Add( AC );
					this.update_icon();
				} else if ( !Lang13.Bool( AC.BB ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You can't load a spent bullet.</span>" );
				} else if ( this.stored_ammo.len == this.max_ammo ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " can't hold any more shells.</span>" ).ToString() );
				}
				return null;
			}

			if ( a is Obj_Item_AmmoStorage ) {
				AS = a;

				if ( this.stored_ammo.len < this.max_ammo && AS.stored_ammo != null ) {
					loaded_bullets = this.LoadInto( AS, this );

					if ( loaded_bullets != 0 ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You successfully fill the " ).item( this ).str( " with " ).item( loaded_bullets ).str( " shell" ).s().str( " from the " ).item( AS ).str( ".</span>" ).ToString() );
						this.update_icon();
					}
				} else if ( this.stored_ammo.len >= this.max_ammo ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " can't hold any more shells.</span>" ).ToString() );
				}
			}
			return null;
		}

	}

}