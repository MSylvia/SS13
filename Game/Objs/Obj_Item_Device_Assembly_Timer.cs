// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Timer : Obj_Item_Device_Assembly {

		public double? timing = 0;
		public double time = 10;
		public double default_time = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.starting_materials = new ByTable().Set( "$iron", 500 ).Set( "$glass", 50 );
			this.secured = false;
			this.accessible_values = new ByTable().Set( "Remaining time", "time;number" ).Set( "Default time", "default_time;number" ).Set( "Timing", "timing;number" );
			this.icon_state = "timer";
		}

		public Obj_Item_Device_Assembly_Timer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: timer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? tp = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this.loc, Task13.User ) || !Task13.User.canmove && !Lang13.Bool( Task13.User.locked_to ) ) {
				Interface13.Browse( Task13.User, null, "window=timer" );
				GlobalFuncs.onclose( Task13.User, "timer" );
				return null;
			}

			if ( Lang13.Bool( href_list["time"] ) ) {
				this.timing = String13.ParseNumber( href_list["time"] );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " " + ( Lang13.Bool( this.timing ) ? "started" : "stopped" ) + " a timer at " + GlobalFuncs.formatJumpTo( this ) );
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["tp"] ) ) {
				tp = String13.ParseNumber( href_list["tp"] );
				this.time += tp ??0;
				this.time = Num13.MinInt( Num13.MaxInt( Num13.Floor( this.time ), 0 ), 600 );
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=timer" );
				return null;
			}

			if ( Lang13.Bool( href_list["set_default_time"] ) ) {
				this.default_time = this.time;
			}

			if ( Task13.User != null ) {
				this.attack_self( Task13.User );
			}
			return null;
		}

		// Function from file: timer.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			double second = 0;
			double minute = 0;
			string dat = null;

			
			if ( !this.secured ) {
				user.show_message( "<span class='warning'>The " + this.name + " is unsecured!</span>" );
				return 0;
			}
			second = this.time % 60;
			minute = ( this.time - second ) / 60;
			dat = new Txt( "<TT><B>Timing Unit</B>\n" ).item( ( Lang13.Bool( this.timing ) ? new Txt( "<A href='?src=" ).Ref( this ).str( ";time=0'>Timing</A>" ).ToString() : new Txt( "<A href='?src=" ).Ref( this ).str( ";time=1'>Not Timing</A>" ).ToString() ) ).str( " " ).item( minute ).str( ":" ).item( second ).str( "\n<A href='?src=" ).Ref( this ).str( ";tp=-30'>-</A> <A href='?src=" ).Ref( this ).str( ";tp=-1'>-</A> <A href='?src=" ).Ref( this ).str( ";tp=1'>+</A> <A href='?src=" ).Ref( this ).str( ";tp=30'>+</A>\n</TT>" ).ToString();
			dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";set_default_time=1'>After countdown, reset time to " ).item( ( this.default_time - this.default_time % 60 ) / 60 ).str( ":" ).item( this.default_time % 60 ).str( "</A>" ).ToString();
			dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>\n		<BR><BR><A href='?src=" ).Ref( this ).str( ";close=1'>Close</A>" ).ToString();
			Interface13.Browse( user, dat, "window=timer" );
			GlobalFuncs.onclose( user, "timer" );
			return null;
		}

		// Function from file: timer.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;
			this.attached_overlays = new ByTable();

			if ( Lang13.Bool( this.timing ) ) {
				this.overlays.Add( "timer_timing" );
				this.attached_overlays.Add( "timer_timing" );
			}

			if ( this.holder != null ) {
				this.holder.update_icon();
			}
			return null;
		}

		// Function from file: timer.dm
		public override dynamic process(  ) {
			
			if ( Lang13.Bool( this.timing ) && this.time > 0 ) {
				this.time--;
			}

			if ( Lang13.Bool( this.timing ) && this.time <= 0 ) {
				this.timing = 0;
				this.timer_end();
				this.time = this.default_time;
			}
			return null;
		}

		// Function from file: timer.dm
		public bool timer_end(  ) {
			
			if ( !this.secured ) {
				return false;
			}
			this.pulse( false );

			if ( !( this.holder != null ) ) {
				this.visible_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString(), "*beep* *beep*" );
			}
			this.cooldown = 2;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.process_cooldown();
				return;
			}));
			return false;
		}

		// Function from file: timer.dm
		public override bool toggle_secure(  ) {
			this.secured = !this.secured;

			if ( this.secured ) {
				GlobalVars.processing_objects.Add( this );
			} else {
				this.timing = 0;
				GlobalVars.processing_objects.Remove( this );
			}
			this.update_icon();
			return this.secured;
		}

		// Function from file: timer.dm
		public override bool activate(  ) {
			
			if ( !base.activate() ) {
				return false;
			}
			this.timing = !Lang13.Bool( this.timing ) ?1:0;
			this.update_icon();
			return false;
		}

	}

}