// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Rust_Gyrotron : Obj_Machinery_Rust {

		public bool frequency = true;
		public bool emitting = false;
		public int rate = 10;
		public double mega_energy = 0.001;
		public double id_tag = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 216;
			this.req_access = new ByTable(new object [] { 10 });
			this.idle_power_usage = 10;
			this.active_power_usage = 100000;
			this.icon = "code/WorkInProgress/Cael_Aislinn/Rust/rust.dmi";
			this.icon_state = "emitter-off";
			this.layer = 4;
		}

		// Function from file: gyrotron.dm
		public Obj_Machinery_Rust_Gyrotron ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: gyrotron.dm
		public override int weldToFloor( dynamic WT = null, dynamic user = null ) {
			int _default = 0;

			
			if ( this.emitting ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>Turn " ).the( this ).item().str( " off first!</span>" ).ToString() );
				return -1;
			}
			_default = base.weldToFloor( (object)(WT), (object)(user) );
			return _default;
		}

		// Function from file: gyrotron.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( !( ( this.stat & 3 ) != 0 ) && this.emitting ) {
				this.icon_state = "emitter-on";
			} else {
				this.icon_state = "emitter-off";
			}
			return null;
		}

		// Function from file: gyrotron.dm
		public override dynamic power_change(  ) {
			dynamic _default = null;

			_default = base.power_change();

			if ( ( this.stat & 3 ) != 0 ) {
				this.stop_emitting();
			}
			this.update_icon();
			return _default;
		}

		// Function from file: gyrotron.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return "\n		<ul>\n			<li>" + this.format_tag( "ID Tag", "id_tag" ) + "</li>\n		</ul>\n	";
		}

		// Function from file: gyrotron.dm
		public void emit(  ) {
			Game_Data A = null;

			A = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam_Emitter), this.loc );
			((dynamic)A).frequency = this.frequency;
			((dynamic)A).damage = this.mega_energy * 1500;
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/emitter.ogg", 25, 1 );
			this.f_use_power( this.mega_energy * 100 + 500 );
			((dynamic)A).dir = this.dir;
			((dynamic)A).dumbfire();
			Icon13.Flick( "emitter-active", this );
			return;
		}

		// Function from file: gyrotron.dm
		public void start_emitting(  ) {
			
			if ( ( this.stat & 3 ) != 0 || this.emitting && this.state == 2 ) {
				return;
			}
			this.emitting = true;
			this.use_power = 2;
			this.update_icon();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this.emitting) {
					this.emit();
					Task13.Sleep( this.rate );
				}
				return;
			}));
			return;
		}

		// Function from file: gyrotron.dm
		public void stop_emitting(  ) {
			this.emitting = false;
			this.use_power = 1;
			this.update_icon();
			return;
		}

		// Function from file: gyrotron.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			bool _default = false;

			
			if ( !( this.id_tag != 0 ) ) {
				this.assign_uid();
				this.id_tag = this.uid;
			}
			_default = base.initialize( suppress_icon_check );
			return _default;
		}

		// Function from file: gyrotron.dm
		[Verb]
		[VerbInfo( name: "Rotate (Counter-Clockwise)", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void rotate_ccw(  ) {
			
			if ( Task13.User.restrained() || Lang13.Bool( Task13.User.stat ) || Task13.User.weakened != 0 || Task13.User.stunned != 0 || Task13.User.paralysis != 0 || Task13.User.resting != 0 || !this.Adjacent( Task13.User ) ) {
				return;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notify'>" ).the( this ).item().str( " is anchored to the floor!</span>" ).ToString() );
				return;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return;
		}

		// Function from file: gyrotron.dm
		[Verb]
		[VerbInfo( name: "Rotate (Clockwise)", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void rotate_cw(  ) {
			
			if ( Task13.User.restrained() || Lang13.Bool( Task13.User.stat ) || Task13.User.weakened != 0 || Task13.User.stunned != 0 || Task13.User.paralysis != 0 || Task13.User.resting != 0 || !this.Adjacent( Task13.User ) ) {
				return;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notify'>" ).the( this ).item().str( " is anchored to the floor!</span>" ).ToString() );
				return;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			return;
		}

	}

}