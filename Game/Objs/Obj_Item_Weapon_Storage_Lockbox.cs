// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Storage_Lockbox : Obj_Item_Weapon_Storage {

		public bool locked = true;
		public bool broken = false;
		public string icon_locked = "lockbox+l";
		public string icon_closed = "lockbox";
		public string icon_broken = "lockbox+b";
		public string tracked_access = "It doesn't look like it's ever been used.";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "syringe_kit";
			this.w_class = 4;
			this.max_w_class = 3;
			this.storage_slots = 4;
			this.req_access = new ByTable(new object [] { 3 });
			this.health = 50;
			this.icon_state = "lockbox+l";
		}

		public Obj_Item_Weapon_Storage_Lockbox ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: lockbox.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "<span class='info'>" + this.tracked_access + "</span>" );
			return null;
		}

		// Function from file: lockbox.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );

			if ( this.broken ) {
				this.icon_state = this.icon_broken;
			} else if ( this.locked ) {
				this.icon_state = this.icon_locked;
			} else {
				this.icon_state = this.icon_closed;
			}
			return null;
		}

		// Function from file: lockbox.dm
		public override dynamic emp_act( int severity = 0 ) {
			base.emp_act( severity );

			if ( !this.broken ) {
				
				switch ((int)( severity )) {
					case 1:
						
						if ( Rand13.PercentChance( 80 ) ) {
							this.locked = !this.locked;
							this.update_icon();
						}
						break;
					case 2:
						
						if ( Rand13.PercentChance( 50 ) ) {
							this.locked = !this.locked;
							this.update_icon();
						}
						break;
					case 3:
						
						if ( Rand13.PercentChance( 25 ) ) {
							this.locked = !this.locked;
							this.update_icon();
						}
						break;
				}
			}
			return null;
		}

		// Function from file: lockbox.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			double? newsev = null;
			dynamic A = null;

			newsev = Num13.MaxInt( 3, ((int)( ( severity ??0) + 1 )) );

			foreach (dynamic _a in Lang13.Enumerate( this )) {
				A = _a;
				
				A.loc = this.loc;
				((Ent_Static)A).ex_act( newsev );
			}
			newsev = 4 - ( severity ??0);

			if ( ( Rand13.PercentChance( ((int)( ( newsev ??0) * 25 )) ) ?1:0) + 25 != 0 ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: lockbox.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			dynamic A = null;

			
			if ( Proj is Obj_Item_Projectile_Beam || Proj is Obj_Item_Projectile_Bullet ) {
				
				if ( !( Proj is Obj_Item_Projectile_Beam_Lastertag ) && !( Proj is Obj_Item_Projectile_Beam_Practice ) && !Proj.nodamage ) {
					this.health -= Convert.ToDouble( Proj.damage );
				}
			}
			base.bullet_act( (object)(Proj), (object)(def_zone) );

			if ( this.health <= 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this )) {
					A = _a;
					
					A.loc = this.loc;
				}
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: lockbox.dm
		public override dynamic show_to( dynamic user = null ) {
			
			if ( this.locked ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>It's locked!</span>" );
			} else {
				base.show_to( (object)(user) );
			}
			return null;
		}

		// Function from file: lockbox.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic ID = null;
			dynamic O = null;

			
			if ( a is Obj_Item_Weapon_Card_Id ) {
				ID = a;

				if ( this.broken ) {
					GlobalFuncs.to_chat( b, "<span class='rose'>It appears to be broken.</span>" );
					return _default;
				}

				if ( this.allowed( b ) ) {
					this.locked = !this.locked;

					if ( this.locked ) {
						this.icon_state = this.icon_locked;
						GlobalFuncs.to_chat( b, "<span class='rose'>You lock the " + this.name + "!</span>" );
						this.tracked_access = "The tracker reads: 'Last locked by " + ID.registered_name + ".'";
						return _default;
					} else {
						this.icon_state = this.icon_closed;
						GlobalFuncs.to_chat( b, "<span class='rose'>You unlock the " + this.name + "!</span>" );
						this.tracked_access = "The tracker reads: 'Last unlocked by " + ID.registered_name + ".'";
						return _default;
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access Denied.</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Card_Emag && !this.broken ) {
				this.broken = true;
				this.locked = false;
				this.desc = "It appears to be broken.";
				this.icon_state = this.icon_broken;

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( 3, b ) )) {
					O = _a;
					
					O.show_message( "<span class='notice'>The locker has been broken by " + b + " with an electromagnetic card!</span>", 1, "You hear a faint electrical spark.", 2 );
				}
			}

			if ( !this.locked ) {
				_default = base.attackby( (object)(a), (object)(b), (object)(c) );
			} else {
				GlobalFuncs.to_chat( b, "<span class='warning'>It's locked!</span>" );
			}
			return _default;
		}

	}

}