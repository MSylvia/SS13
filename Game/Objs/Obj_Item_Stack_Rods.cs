// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Stack_Rods : Obj_Item_Stack {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.singular_name = "metal rod";
			this.force = 9;
			this.throwforce = 15;
			this.throw_speed = 5;
			this.throw_range = 20;
			this.starting_materials = new ByTable().Set( "$iron", 1875 );
			this.max_amount = 60;
			this.attack_verb = new ByTable(new object [] { "hit", "bludgeoned", "whacked" });
			this.w_type = 4;
			this.melt_temperature = 1783.1500244140625;
			this.icon_state = "rods";
		}

		public Obj_Item_Stack_Rods ( dynamic loc = null, int? amount = null ) : base( (object)(loc), amount ) {
			
		}

		// Function from file: rods.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			Obj_Structure_Grille G = null;
			Game_Data Grille = null;

			this.add_fingerprint( user );

			if ( !( user.loc is Tile ) ) {
				return 0;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Grille), user.loc ) ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( user.loc, typeof(Obj_Structure_Grille) )) {
					G = _a;
					

					if ( G.broken ) {
						G.health = Lang13.Initial( G, "health" );
						G.density = true;
						G.broken = false;
						G.icon_state = "" + Lang13.Initial( G, "icon_state" );
						this.use( 1 );
					} else {
						return 1;
					}
				}
			} else {
				
				if ( ( this.amount ??0) < 2 ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>You need at least two rods to do this.</span>" );
					return null;
				}
				GlobalFuncs.to_chat( user, "<span class='notice'>Assembling grille...</span>" );

				if ( !GlobalFuncs.do_after( user, GlobalFuncs.get_turf( this ), 10 ) ) {
					return null;
				}
				Grille = GlobalFuncs.getFromPool( typeof(Obj_Structure_Grille), user.loc );

				if ( !( Grille != null ) ) {
					Grille = new Obj_Structure_Grille( user.loc );
				}
				GlobalFuncs.to_chat( user, "<span class='notice'>You assembled a grille!</span>" );
				((dynamic)Grille).add_fingerprint( user );
				this.use( 2 );
			}
			return null;
		}

		// Function from file: rods.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;
			Game_Data M = null;
			Obj_Item_Stack_Rods R = null;
			bool replace = false;

			
			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( ( this.amount ??0) < 2 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You need at least two rods to do this.</span>" );
					return null;
				}

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
					((dynamic)M).amount = 1;
					((Obj_Item_Stack)M).add_to_stacks( Task13.User );
					((Ent_Static)b).visible_message( "<span class='warning'>" + this + " is shaped into metal by " + b.name + " with the weldingtool.</span>", "<span class='warning'>You shape the " + this + " into metal with the weldingtool.</span>", "<span class='warning'>You hear welding.</span>" );
					R = this;
					Task13.Source = null;
					replace = ((Mob)b).get_inactive_hand() == R;
					R.use( 2 );

					if ( !( R != null ) && replace ) {
						((Mob)b).put_in_hands( M );
					}
				}
				return 1;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: rods.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			bool busy = false;
			dynamic T = null;
			Obj_Item_Stack_Rods R = null;
			dynamic L = null;

			busy = false;

			if ( flag == true ) {
				
				if ( A is Tile || A is Obj_Structure_Lattice ) {
					T = GlobalFuncs.get_turf( A );
					R = this;
					L = ((Tile)T).canBuildCatwalk(  );

					if ( L is Obj_Structure_Lattice ) {
						
						if ( ( R.amount ??0) < 2 ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>You need atleast 2 rods to build a catwalk!</span>" );
							return false;
						}

						if ( busy ) {
							return false;
						}
						GlobalFuncs.to_chat( user, "<span class='notice'>You begin to build a catwalk.</span>" );
						busy = true;

						if ( GlobalFuncs.do_after( user, A, 30 ) ) {
							busy = false;

							if ( ( R.amount ??0) < 2 ) {
								GlobalFuncs.to_chat( user, "<span class='warning'>You ran out of rods!</span>" );
								return false;
							}

							if ( !( L is Obj_Structure_Lattice ) || L.loc != T ) {
								GlobalFuncs.to_chat( user, "<span class='warning'>You need a lattice first!</span>" );
								return false;
							}
							GlobalFuncs.playsound( this, "sound/weapons/Genhit.ogg", 50, 1 );
							GlobalFuncs.to_chat( user, "<span class='notice'>You build a catwalk!</span>" );
							R.use( 2 );
							new Obj_Structure_Catwalk( T );
							GlobalFuncs.qdel( L );
							return false;
						}
					}

					if ( ((Tile)T).canBuildLattice( R ) ) {
						GlobalFuncs.to_chat( user, "<span class='notice'>Constructing support lattice ...</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/Genhit.ogg", 50, 1 );
						new Obj_Structure_Lattice( T );
						R.use( 1 );
						return false;
					}
				}
			}
			return false;
		}

	}

}