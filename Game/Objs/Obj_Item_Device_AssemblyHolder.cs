// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_AssemblyHolder : Obj_Item_Device {

		public bool secured = false;
		public Ent_Dynamic a_left = null;
		public Obj_Item_Device_Assembly a_right = null;
		public Base_Dynamic special_assembly = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "assembly";
			this.flags = 257;
			this.throwforce = 5;
			this.w_class = 2;
			this.throw_speed = 3;
			this.throw_range = 10;
			this.icon = "icons/obj/assemblies/new_assemblies.dmi";
			this.icon_state = "holder";
		}

		public Obj_Item_Device_AssemblyHolder ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: holder.dm
		public bool process_activation( Obj_Item_Device_Assembly_Igniter D = null, bool? normal = null, bool? special = null ) {
			normal = normal ?? true;
			special = special ?? true;

			
			if ( !( D != null ) ) {
				return false;
			}

			if ( !this.secured ) {
				this.visible_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString(), "*beep* *beep*" );
			}

			if ( normal == true && this.a_right != null && this.a_left != null ) {
				
				if ( this.loc is Obj_Machinery_Igniter ) {
					((dynamic)this.loc).toggle_state();
				} else {
					
					if ( this.a_right != D ) {
						this.a_right.pulsed( false );
					}

					if ( this.a_left != D ) {
						((dynamic)this.a_left).pulsed( 0 );
					}
				}
			}

			if ( Lang13.Bool( this.master ) ) {
				this.master.receive_signal();
			}
			return true;
		}

		// Function from file: holder.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic T = null;

			this.add_fingerprint( user );

			if ( this.secured ) {
				
				if ( !( this.a_left != null ) || !( this.a_right != null ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Assembly part missing!</span>" );
					return null;
				}

				if ( Lang13.Bool( ((dynamic)this.a_right.type).IsInstanceOfType( this.a_left ) ) ) {
					
					switch ((string)( Interface13.Alert( "Which side would you like to use?", null, "Left", "Right" ) )) {
						case "Left":
							((dynamic)this.a_left).attack_self( user );
							break;
						case "Right":
							this.a_right.attack_self( user );
							break;
					}
					return null;
				} else {
					
					if ( !( this.a_left is Obj_Item_Device_Assembly_Igniter ) ) {
						((dynamic)this.a_left).attack_self( user );
					}

					if ( !( this.a_right is Obj_Item_Device_Assembly_Igniter ) ) {
						this.a_right.attack_self( user );
					}
				}
			} else {
				T = GlobalFuncs.get_turf( this );

				if ( !Lang13.Bool( T ) ) {
					return 0;
				}

				if ( this.a_left != null ) {
					((dynamic)this.a_left).holder = null;
					this.a_left.loc = T;
					((dynamic)this.a_left).disconnected( this.a_right );
				}

				if ( this.a_right != null ) {
					this.a_right.holder = null;
					this.a_right.loc = T;
					this.a_right.disconnected( this.a_left );
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					Lang13.Delete( this );
					Task13.Source = null;
					return;
					return;
				}));
			}
			return null;
		}

		// Function from file: holder.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;
			Obj_Machinery_Igniter igniter = null;

			
			if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( !( this.a_left != null ) || !( this.a_right != null ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>BUG:Assembly part missing, please report this!</span>" );
					return null;
				}
				((dynamic)this.a_left).toggle_secure();
				this.a_right.toggle_secure();
				this.secured = !this.secured;

				if ( this.secured ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " is ready!</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " can now be taken apart!</span>" ).ToString() );
				}
				this.update_icon();
				return null;
			} else if ( ((Obj)a).IsSpecialAssembly() ) {
				this.attach_special( a, b );
			} else if ( a is Obj_Item_Weapon_Weldingtool ) {
				
				if ( !( this.a_left != null ) || !( this.a_right != null ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>BUG:Assembly part missing, please report this!</span>" );
					return null;
				}

				if ( !GlobalFuncs.isigniter( this.a_left ) && !GlobalFuncs.isigniter( this.a_right ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You can't make an igniter without an igniting component!</span>" );
					return null;
				}
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You begin to weld " ).the( this ).item().str( " to the floor...</span>" ).ToString() );

					if ( GlobalFuncs.do_after( b, this, 40 ) ) {
						igniter = new Obj_Machinery_Igniter( this.loc );
						igniter.assembly = this;
						this.loc = igniter;
						GlobalFuncs.to_chat( b, "<span class='notice'>You attach the assembly to the floor with a few spot welds.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You need more welder fuel to do that.</span>" );
					return null;
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: holder.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.a_left != null && this.a_right != null ) {
				((dynamic)this.a_left).holder_movement();
				this.a_right.holder_movement();
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: holder.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( this.a_left != null && this.a_right != null ) {
				((dynamic)this.a_left).holder_movement();
				this.a_right.holder_movement();
			}
			return false;
		}

		// Function from file: holder.dm
		public override bool on_found( dynamic finder = null ) {
			Base_Dynamic S = null;

			
			if ( this.a_left != null ) {
				((dynamic)this.a_left).on_found( finder );
			}

			if ( this.a_right != null ) {
				this.a_right.on_found( finder );
			}

			if ( this.special_assembly != null ) {
				
				if ( this.special_assembly is Obj_Item ) {
					S = this.special_assembly;
					((dynamic)S).on_found( finder );
				}
			}
			return false;
		}

		// Function from file: holder.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			
			if ( this.a_left != null ) {
				this.a_left.Crossed( O );
			}

			if ( this.a_right != null ) {
				this.a_right.Crossed( O );
			}

			if ( this.special_assembly != null ) {
				this.special_assembly.Crossed( O );
			}
			return null;
		}

		// Function from file: holder.dm
		public override bool HasProximity( dynamic AM = null ) {
			
			if ( this.a_left != null ) {
				this.a_left.HasProximity( AM );
			}

			if ( this.a_right != null ) {
				this.a_right.HasProximity( AM );
			}

			if ( this.special_assembly != null ) {
				this.special_assembly.HasProximity( AM );
			}
			return false;
		}

		// Function from file: holder.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.secured ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>" ).The( this ).item().str( " is ready!</span>" ).ToString() );
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>" ).The( this ).item().str( " can be attached!</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: holder.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			dynamic O = null;
			dynamic O2 = null;

			this.overlays.len = 0;

			if ( this.a_left != null ) {
				this.overlays.Add( "" + this.a_left.icon_state + "_left" );

				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.a_left).attached_overlays )) {
					O = _a;
					
					this.overlays.Add( "" + O + "_l" );
				}
			}

			if ( this.a_right != null ) {
				this.overlays.Add( "" + this.a_right.icon_state + "_right" );

				foreach (dynamic _b in Lang13.Enumerate( this.a_right.attached_overlays )) {
					O2 = _b;
					
					this.overlays.Add( "" + O2 + "_r" );
				}
			}

			if ( Lang13.Bool( this.master ) ) {
				this.master.update_icon();
			}
			return null;
		}

		// Function from file: holder.dm
		public bool attach_special( dynamic O = null, dynamic user = null ) {
			
			if ( !Lang13.Bool( O ) ) {
				return false;
			}

			if ( !((Obj)O).IsSpecialAssembly() ) {
				return false;
			}
			return false;
		}

		// Function from file: holder.dm
		public bool attach( Ent_Dynamic D = null, Obj_Item_Device_Assembly D2 = null, Ent_Static user = null ) {
			
			if ( !( D != null ) || !( D2 != null ) ) {
				return false;
			}

			if ( !GlobalFuncs.isassembly( D ) || !GlobalFuncs.isassembly( D2 ) ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)D).secured ) || D2.secured ) {
				return false;
			}

			if ( user != null ) {
				((dynamic)user).remove_from_mob( D );
				((dynamic)user).remove_from_mob( D2 );
			}
			((dynamic)D).holder = this;
			D2.holder = this;
			D.loc = this;
			D2.loc = this;
			((dynamic)D).connected( D2 );
			D2.connected( D );
			this.a_left = D;
			this.a_right = D2;
			this.name = "" + D.name + "-" + D2.name + " assembly";
			this.update_icon();
			Task13.User.put_in_hands( this );
			return true;
		}

		// Function from file: holder.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.a_left != null ) {
				((dynamic)this.a_left).holder = null;
				((dynamic)this.a_left).disconnected( this.a_right );
			}

			if ( this.a_right != null ) {
				this.a_right.holder = null;
				this.a_right.disconnected( this.a_left );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: holder.dm
		public override bool IsAssemblyHolder(  ) {
			return true;
		}

		// Function from file: holder.dm
		public virtual void detached(  ) {
			return;
		}

		// Function from file: holder.dm
		[VerbInfo( name: "process activation" )]
		[VerbArg( 1, InputType.Obj )]
		public void _internal_process_activation( dynamic D = null ) {
			return;
		}

		// Function from file: holder.dm
		[VerbInfo( name: "attach special" )]
		[VerbArg( 1, InputType.Obj )]
		[VerbArg( 2, InputType.Mob )]
		public void _internal_attach_special( dynamic O = null, dynamic user = null ) {
			return;
		}

		// Function from file: holder.dm
		[VerbInfo( name: "attach" )]
		[VerbArg( 1, InputType.Obj )]
		[VerbArg( 2, InputType.Obj )]
		[VerbArg( 3, InputType.Mob )]
		public void _internal_attach( dynamic D = null, dynamic D2 = null, dynamic user = null ) {
			return;
		}

	}

}