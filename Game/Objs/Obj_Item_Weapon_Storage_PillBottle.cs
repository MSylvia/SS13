// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Storage_PillBottle : Obj_Item_Weapon_Storage {

		public Image colour_overlay = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "contsolid";
			this.w_class = 2;
			this.can_hold = new ByTable(new object [] { "/obj/item/weapon/reagent_containers/pill", "/obj/item/weapon/dice", "/obj/item/weapon/paper" });
			this.allow_quick_gather = true;
			this.use_to_pickup = true;
			this.storage_slots = 14;
			this.starting_materials = new ByTable().Set( "$iron", 10 ).Set( "$glass", 60 );
			this.icon = "icons/obj/chemical.dmi";
			this.icon_state = "pill_canister";
		}

		// Function from file: firstaid.dm
		public Obj_Item_Weapon_Storage_PillBottle ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.colour_overlay = new Image( "icons/obj/chemical.dmi", "bottle_colour" );
			this.overlays.Add( this.colour_overlay );
			return;
		}

		// Function from file: firstaid.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic C = null;
			Obj_Item O = null;

			
			if ( !Lang13.Bool( a ) ) {
				return _default;
			}

			if ( a is Obj_Item_Weapon_Storage_Bag_Chem ) {
				C = a;
				GlobalFuncs.to_chat( b, "<span class='notice'>You transfer the contents of " + C + ".<span>" );

				foreach (dynamic _a in Lang13.Enumerate( C.contents, typeof(Obj_Item) )) {
					O = _a;
					

					if ( this.can_be_inserted( O ) ) {
						this.handle_item_insertion( O, true );
					}
				}
				return 1;
			}
			_default = base.attackby( (object)(a), (object)(b), (object)(c) );
			return _default;
		}

		// Function from file: firstaid.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			Mob M = null;

			
			if ( Task13.User is Mob_Living_Carbon_Human || Task13.User is Mob_Living_Carbon_Monkey ) {
				M = Task13.User;

				if ( !( over_object is Obj_Screen ) ) {
					return base.MouseDrop( over_object, (object)(src_location), over_location, (object)(src_control), (object)(over_control), _params );
				}

				if ( !M.incapacitated() ) {
					
					switch ((string)( over_object.name )) {
						case "r_hand":
							M.u_equip( this, false );
							M.put_in_r_hand( this );
							break;
						case "l_hand":
							M.u_equip( this, false );
							M.put_in_l_hand( this );
							break;
					}
					this.add_fingerprint( Task13.User );
					return null;
				}

				if ( over_object == Task13.User && GlobalFuncs.in_range( this, Task13.User ) || Task13.User.contents.Find( this ) != 0 ) {
					
					if ( Task13.User.s_active != null ) {
						((Obj_Item_Weapon_Storage)Task13.User.s_active).close( Task13.User );
					}
					this.show_to( Task13.User );
					return null;
				}
			}
			return null;
		}

		// Function from file: firstaid.dm
		[Verb]
		[VerbInfo( name: "Add Coloured Label", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void change(  ) {
			dynamic bottle_colour = null;

			
			if ( !( this.colour_overlay != null ) ) {
				return;
			}
			bottle_colour = Interface13.Input( "Select Colour to change it to", "Pill Bottle Colour", bottle_colour, null, GlobalVars.bottle_colour_choices, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( bottle_colour ) || Lang13.Bool( Task13.User.stat ) ) {
				return;
			}

			if ( bottle_colour == "Custom" ) {
				bottle_colour = Interface13.Input( "Select Colour to change it to", "Pill Bottle Colour", bottle_colour, null, null, InputType.Color );
			} else {
				bottle_colour = GlobalVars.bottle_colour_choices[bottle_colour];
			}
			this.overlays.Remove( this.colour_overlay );
			this.colour_overlay.color = "" + bottle_colour;
			this.overlays.Add( this.colour_overlay );
			return;
		}

	}

}