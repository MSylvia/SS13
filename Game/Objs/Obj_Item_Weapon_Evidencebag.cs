// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Evidencebag : Obj_Item_Weapon {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "";
			this.w_class = 1;
			this.icon = "icons/obj/storage.dmi";
			this.icon_state = "evidenceobj";
		}

		public Obj_Item_Weapon_Evidencebag ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: evidence.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string new_label = null;

			
			if ( a is Obj_Item_Weapon_Pen ) {
				new_label = GlobalFuncs.sanitize( GlobalFuncs.trim( Interface13.Input( "What should the new label be", "", null, null, null, InputType.Str | InputType.Null ) ) );

				if ( Lang13.Bool( new_label ) ) {
					this.name = "bag (" + new_label + ")";
					GlobalFuncs.to_chat( b, "<span class='notice'>You write on the label of the bag.</span>" );
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: evidence.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic I = null;

			
			if ( this.contents.len != 0 ) {
				I = this.contents[1];
				((Ent_Static)user).visible_message( "" + user + " takes " + I + " out of " + this, "You take " + I + " out of " + this + ".", "You hear someone rustle around in a plastic bag, and remove something." );
				this.overlays.len = 0;
				((Mob)user).put_in_hands( I );
				this.w_class = 1;
				this.icon_state = "evidenceobj";
				this.desc = "An empty evidence bag.";
			} else {
				GlobalFuncs.to_chat( user, "" + this + " is empty." );
				this.icon_state = "evidenceobj";
			}
			return null;
		}

		// Function from file: evidence.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			Ent_Static U = null;
			int xx = 0;
			int yy = 0;
			Image img = null;

			
			if ( flag == false ) {
				return false;
			}

			if ( !( A is Obj_Item ) || A.anchored == 1 ) {
				return base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );
			}

			if ( A is Obj_Item_Weapon_Storage ) {
				return base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );
			}

			if ( A is Obj_Item_Weapon_Evidencebag ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You find putting an evidence bag in another evidence bag to be slightly absurd.</span>" );
				return false;
			}

			if ( Convert.ToDouble( A.w_class ) > 3 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>" + A + " won't fit in " + this + ".</span>" );
				return false;
			}

			if ( this.contents.len != 0 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>" + this + " already has something inside it.</span>" );
				return base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );
			}

			if ( !( A.loc is Tile ) ) {
				
				if ( A.loc is Obj_Item_Weapon_Storage ) {
					U = A.loc;
					user.client.screen -= A;
					U.contents.Remove( A );
				}
				new ByTable().Set( 1, A ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( user, "drop_item" ) );
			}
			((Ent_Static)user).visible_message( "" + user + " puts " + A + " into " + this, "You put " + A + " inside " + this + ".", "You hear a rustle as someone puts something into a plastic bag." );
			this.icon_state = "evidence";
			xx = Convert.ToInt32( A.pixel_x );
			yy = Convert.ToInt32( A.pixel_y );
			A.pixel_x = 0;
			A.pixel_y = 0;
			img = new Image( A, null, null, GlobalVars.FLOAT_LAYER );
			A.pixel_x = xx;
			A.pixel_y = yy;
			this.overlays.Add( img );
			this.overlays.Add( "evidence" );
			this.desc = "An evidence bag containing " + A + ". " + A.desc;
			A.loc = this;
			this.w_class = A.w_class;
			return false;
		}

	}

}