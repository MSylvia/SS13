// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Poddoor_Shutters : Obj_Machinery_Door_Poddoor {

		public string sound_open = "sound/machines/shutter_open.ogg";
		public string sound_close = "sound/machines/shutter_close.ogg";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.power_channel = 3;
			this.icon_state = "shutter1";
		}

		// Function from file: shutters.dm
		public Obj_Machinery_Door_Poddoor_Shutters ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.layer = 301;
			return;
		}

		// Function from file: vgstation13.dme
		public override bool close( bool? surpress_send = null ) {
			
			if ( this.operating != 0 ) {
				return false;
			}
			this.operating = 1;
			Icon13.Flick( "shutterc1", this );
			this.icon_state = "shutter1";
			GlobalFuncs.playsound( this.loc, this.sound_close, 100, 1 );
			this.density = true;

			if ( this.visible ) {
				this.set_opacity( 1 );
			}
			this.update_nearby_tiles();
			Task13.Sleep( 10 );
			this.operating = 0;
			return false;
		}

		// Function from file: shutters.dm
		public override bool open( int? surpress_send = null ) {
			
			if ( this.operating == 1 ) {
				return false;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				return false;
			}

			if ( !( this.operating != 0 ) ) {
				this.operating = 1;
			}
			Icon13.Flick( "shutterc0", this );
			this.icon_state = "shutter0";
			GlobalFuncs.playsound( this.loc, this.sound_open, 100, 1 );
			Task13.Sleep( 10 );
			this.density = false;
			this.set_opacity( 0 );
			this.update_nearby_tiles();

			if ( this.operating == 1 ) {
				this.operating = 0;
			}

			if ( this.autoclose ) {
				Task13.Schedule( 150, (Task13.Closure)(() => {
					this.f_autoclose();
					return;
				}));
			}
			return true;
		}

		// Function from file: shutters.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( b );

			if ( !( a is Obj_Item_Weapon_Crowbar || a is Obj_Item_Weapon_Fireaxe && a.wielded == 1 ) ) {
				return null;
			}

			if ( this.density && ( this.stat & 2 ) != 0 && !( this.operating != 0 ) ) {
				this.operating = 1;
				Task13.Schedule( -1, (Task13.Closure)(() => {
					Icon13.Flick( "shutterc0", this );
					this.icon_state = "shutter0";
					Task13.Sleep( 15 );
					this.density = false;
					this.set_opacity( 0 );
					this.operating = 0;
					return;
					return;
				}));
			}
			return null;
		}

	}

}