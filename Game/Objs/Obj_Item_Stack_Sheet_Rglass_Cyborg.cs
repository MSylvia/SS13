// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Stack_Sheet_Rglass_Cyborg : Obj_Item_Stack_Sheet_Rglass {

		public dynamic metsource = null;
		public dynamic glasource = null;
		public int metcost = 250;
		public int glacost = 500;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.materials = new ByTable();
		}

		public Obj_Item_Stack_Sheet_Rglass_Cyborg ( dynamic loc = null, int? amount = null ) : base( (object)(loc), amount ) {
			
		}

		// Function from file: glass.dm
		public override void add( bool amount = false ) {
			((RobotEnergyStorage)this.metsource).add_charge( ( amount ?1:0) * this.metcost );
			((RobotEnergyStorage)this.glasource).add_charge( ( amount ?1:0) * this.glacost );
			return;
		}

		// Function from file: glass.dm
		public override int use( double? used = null ) {
			((RobotEnergyStorage)this.metsource).use_charge( ( used ??0) * this.metcost );
			((RobotEnergyStorage)this.glasource).use_charge( ( used ??0) * this.glacost );
			return 0;
		}

		// Function from file: glass.dm
		public override double? get_amount(  ) {
			return Num13.MinInt( Num13.Floor( Convert.ToDouble( this.metsource.energy / this.metcost ) ), Num13.Floor( Convert.ToDouble( this.glasource.energy / this.glacost ) ) );
		}

	}

}