// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_EmbeddedController_Radio_AirlockController : Obj_Machinery_EmbeddedController_Radio {

		public dynamic id_tag = null;
		public dynamic exterior_door_tag = null;
		public dynamic interior_door_tag = null;
		public dynamic airpump_tag = null;
		public dynamic sensor_tag = null;
		public dynamic sanitize_external = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.frequency = 1449;
			this.power_channel = 3;
			this.icon = "icons/obj/airlock_machines.dmi";
			this.icon_state = "airlock_control_standby";
		}

		public Obj_Machinery_EmbeddedController_Radio_AirlockController ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: airlock_controller.dm
		public override string return_text(  ) {
			string state_options = null;
			int state = 0;
			string sensor_pressure = null;
			string exterior_status = null;
			string interior_status = null;
			string pump_status = null;
			string current_status = null;
			string output = null;

			state_options = null;
			state = 0;
			sensor_pressure = "----";
			exterior_status = "----";
			interior_status = "----";
			pump_status = "----";
			current_status = "Inactive<BR>&nbsp;";

			if ( this.program != null ) {
				state = this.program.state;
				sensor_pressure = ( Lang13.Bool( this.program.memory["sensor_pressure"] ) ? this.program.memory["sensor_pressure"] : "----" );
				exterior_status = ( Lang13.Bool( this.program.memory["exterior_status"] ) ? this.program.memory["exterior_status"] : "----" );
				interior_status = ( Lang13.Bool( this.program.memory["interior_status"] ) ? this.program.memory["interior_status"] : "----" );
				pump_status = ( Lang13.Bool( this.program.memory["pump_status"] ) ? this.program.memory["pump_status"] : "----" );
			}

			switch ((int)( state )) {
				case -2:
					state_options = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=cycle_closed'>Close Interior Airlock</A><BR>\n<A href='?src=" ).Ref( this ).str( ";command=cycle_exterior'>Cycle to Exterior Airlock</A><BR>" ).ToString();
					current_status = "Interior Airlock Open<BR><span class='good'>Chamber Pressurized</span>";
					break;
				case -1:
					state_options = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=abort'>Abort Cycling</A><BR>" ).ToString();
					current_status = "Cycling to Interior Airlock<BR><span class='average'>Chamber Pressurizing</span>";
					break;
				case 0:
					state_options = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=cycle_interior'>Open Interior Airlock</A><BR>\n<A href='?src=" ).Ref( this ).str( ";command=cycle_exterior'>Open Exterior Airlock</A><BR>" ).ToString();
					break;
				case 1:
					state_options = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=abort'>Abort Cycling</A><BR>" ).ToString();
					current_status = "Cycling to Exterior Airlock<BR><span class='average'>Chamber Depressurizing</span>";
					break;
				case 2:
					state_options = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=cycle_interior'>Cycle to Interior Airlock</A><BR>\n<A href='?src=" ).Ref( this ).str( ";command=cycle_closed'>Close Exterior Airlock</A><BR>" ).ToString();
					current_status = "Exterior Airlock Open<BR><span class='bad'>Chamber Depressurized</span>";
					break;
			}
			output = "<h3>Airlock Status</h3>\n<div class='statusDisplay'>\n<div class='line'><div class='statusLabel'>Current Status:</div><div class='statusValue'>" + current_status + "</div></div>\n<div class='line'>&nbsp;</div>\n<div class='line'><div class='statusLabel'>&gt; Chamber Pressure:</div><div class='statusValue'>" + sensor_pressure + " kPa</div></div>\n<div class='line'><div class='statusLabel'>&gt; Control Pump:</div><div class='statusValue'>" + pump_status + "</div></div>\n<div class='line'><div class='statusLabel'>&gt; Interior Door:</div><div class='statusValue'>" + interior_status + "</div></div>\n<div class='line'><div class='statusLabel'>&gt; Exterior Door:</div><div class='statusValue'>" + exterior_status + "</div></div>\n</div>\n" + state_options;
			return output;
		}

		// Function from file: airlock_controller.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.on && this.program != null ) {
				
				if ( Lang13.Bool( this.program.memory["processing"] ) ) {
					this.icon_state = "airlock_control_process";
				} else {
					this.icon_state = "airlock_control_standby";
				}
			} else {
				this.icon_state = "airlock_control_off";
			}
			return false;
		}

		// Function from file: airlock_controller.dm
		public override void initialize(  ) {
			Computer_File_EmbeddedProgram_AirlockController new_prog = null;

			base.initialize();
			new_prog = new Computer_File_EmbeddedProgram_AirlockController();
			new_prog.id_tag = this.id_tag;
			new_prog.exterior_door_tag = this.exterior_door_tag;
			new_prog.interior_door_tag = this.interior_door_tag;
			new_prog.airpump_tag = this.airpump_tag;
			new_prog.sensor_tag = this.sensor_tag;
			new_prog.sanitize_external = this.sanitize_external;
			new_prog.master = this;
			this.program = new_prog;
			return;
		}

	}

}