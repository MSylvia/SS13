// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND_Experimentor : Obj_Machinery_RND {

		public bool recentlyExperimented = false;
		public dynamic trackedIan = null;
		public dynamic trackedRuntime = null;
		public dynamic loaded_item = null;
		public double badThingCoeff = 0;
		public double resetTime = 15;
		public int? cloneMode = 0;
		public double cloneCount = 0;
		public ByTable item_reactions = new ByTable();
		public ByTable valid_items = new ByTable();
		public ByTable critical_items = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/machines/heavy_lathe.dmi";
			this.icon_state = "h_lathe";
		}

		// Function from file: experimentor.dm
		public Obj_Machinery_RND_Experimentor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Experimentor( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ScanningModule( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( this ) );
			this.trackedIan = Lang13.FindIn( typeof(Mob_Living_SimpleAnimal_Pet_Dog_Corgi_Ian), GlobalVars.mob_list );
			this.trackedRuntime = Lang13.FindIn( typeof(Mob_Living_SimpleAnimal_Pet_Cat_Runtime), GlobalVars.mob_list );
			this.SetTypeReactions();
			this.RefreshParts();
			return;
		}

		// Function from file: experimentor.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string scantype = null;
			dynamic process = null;
			dynamic D = null;
			double? dotype = null;
			ByTable temp_tech = null;
			dynamic T = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			scantype = href_list["function"];
			process = Lang13.FindIn( href_list["item"], this );

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=experimentor" );
				return null;
			} else if ( scantype == "search" ) {
				D = Lang13.FindIn( typeof(Obj_Machinery_Computer_Rdconsole), Map13.FetchInViewExcludeThis( this, 3 ) );

				if ( Lang13.Bool( D ) ) {
					this.linked_console = D;
				}
			} else if ( scantype == "eject" ) {
				this.ejectItem();
			} else if ( scantype == "refresh" ) {
				this.updateUsrDialog();
			} else {
				
				if ( this.recentlyExperimented ) {
					Task13.User.WriteMsg( "<span class='warning'>" + this + " has been used too recently!</span>" );
					return null;
				} else if ( !Lang13.Bool( this.loaded_item ) ) {
					this.updateUsrDialog();
					Task13.User.WriteMsg( "<span class='warning'>" + this + " is not currently loaded!</span>" );
					return null;
				} else if ( !Lang13.Bool( process ) || process != this.loaded_item ) {
					this.updateUsrDialog();
					Task13.User.WriteMsg( "<span class='danger'>Interface failure detected in " + this + ". Please try again.</span>" );
					return null;
				}

				if ( String13.ParseNumber( scantype ) == 7 ) {
					dotype = 7;
				} else {
					dotype = this.matchReaction( process, scantype );
				}
				this.experiment( dotype, process );
				this.f_use_power( 750 );

				if ( dotype != 8 ) {
					
					if ( Lang13.Bool( process ) && Lang13.Bool( process.origin_tech ) ) {
						temp_tech = this.ConvertReqString2List( process.origin_tech );

						foreach (dynamic _a in Lang13.Enumerate( temp_tech )) {
							T = _a;
							
							((Research)this.linked_console.files).UpdateTech( T, temp_tech[T] );
						}
						((Research)this.linked_console.files).UpdateDesigns( process, process.type );
					}
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: experimentor.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;
			ByTable D = null;
			dynamic T = null;
			Browser popup = null;

			((Mob)a).set_machine( this );
			dat = "<center>";

			if ( !Lang13.Bool( this.linked_console ) ) {
				dat += new Txt( "<b><a href='byond://?src=" ).Ref( this ).str( ";function=search'>Scan for R&D Console</A></b><br>" ).ToString();
			}

			if ( Lang13.Bool( this.loaded_item ) ) {
				dat += "<b>Loaded Item:</b> " + this.loaded_item + "<br>";
				dat += "<b>Technology</b>:<br>";
				D = this.ConvertReqString2List( this.loaded_item.origin_tech );

				foreach (dynamic _a in Lang13.Enumerate( D )) {
					T = _a;
					
					dat += "" + T + "<br>";
				}
				dat += "<br><br>Available tests:";
				dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";item=" ).Ref( this.loaded_item ).str( ";function=" ).item( 1 ).str( "'>Poke</A></b>" ).ToString();
				dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";item=" ).Ref( this.loaded_item ).str( ";function=" ).item( 2 ).str( ";'>Irradiate</A></b>" ).ToString();
				dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";item=" ).Ref( this.loaded_item ).str( ";function=" ).item( 3 ).str( "'>Gas</A></b>" ).ToString();
				dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";item=" ).Ref( this.loaded_item ).str( ";function=" ).item( 4 ).str( "'>Burn</A></b>" ).ToString();
				dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";item=" ).Ref( this.loaded_item ).str( ";function=" ).item( 5 ).str( "'>Freeze</A></b>" ).ToString();
				dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";item=" ).Ref( this.loaded_item ).str( ";function=" ).item( 6 ).str( "'>Destroy</A></b><br>" ).ToString();

				if ( this.loaded_item is Obj_Item_Weapon_Relic ) {
					dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";item=" ).Ref( this.loaded_item ).str( ";function=" ).item( 7 ).str( "'>Discover</A></b><br>" ).ToString();
				}
				dat += new Txt( "<br><b><a href='byond://?src=" ).Ref( this ).str( ";function=eject'>Eject</A>" ).ToString();
			} else {
				dat += "<b>Nothing loaded.</b>";
			}
			dat += new Txt( "<br><a href='byond://?src=" ).Ref( this ).str( ";function=refresh'>Refresh</A><br>" ).ToString();
			dat += new Txt( "<br><a href='byond://?src=" ).Ref( this ).str( ";close=1'>Close</A><br></center>" ).ToString();
			popup = new Browser( a, "experimentor", "Experimentor", 700, 400, this );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( a, "experimentor" );
			return null;
		}

		// Function from file: experimentor.dm
		public override bool default_deconstruction_crowbar( dynamic C = null, bool? ignore_panel = null ) {
			this.ejectItem();
			base.default_deconstruction_crowbar( (object)(C), ignore_panel );
			return false;
		}

		// Function from file: experimentor.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			ByTable temp_tech = null;

			
			if ( this.shocked ) {
				this.shock( user, 50 );
			}

			if ( this.default_deconstruction_screwdriver( user, "h_lathe_maint", "h_lathe", A ) ) {
				
				if ( Lang13.Bool( this.linked_console ) ) {
					this.linked_console.linked_destroy = null;
					this.linked_console = null;
				}
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( Lang13.Bool( this.panel_open ) && A is Obj_Item_Weapon_Crowbar ) {
				this.default_deconstruction_crowbar( A );
				return null;
			}

			if ( !Lang13.Bool( this.checkCircumstances( A ) ) ) {
				user.WriteMsg( "<span class='warning'>The " + A + " is not yet valid for the " + this + " and must be completed!</span>" );
				return null;
			}

			if ( this.disabled ) {
				return null;
			}

			if ( !Lang13.Bool( this.linked_console ) ) {
				user.WriteMsg( "<span class='warning'>The " + this + " must be linked to an R&D console first!</span>" );
				return null;
			}

			if ( Lang13.Bool( this.loaded_item ) ) {
				user.WriteMsg( "<span class='warning'>The " + this + " is already loaded.</span>" );
				return null;
			}

			if ( A is Obj_Item ) {
				
				if ( !Lang13.Bool( A.origin_tech ) ) {
					user.WriteMsg( "<span class='warning'>This doesn't seem to have a tech origin!</span>" );
					return null;
				}
				temp_tech = this.ConvertReqString2List( A.origin_tech );

				if ( temp_tech.len == 0 ) {
					user.WriteMsg( "<span class='warning'>You cannot experiment on this item!</span>" );
					return null;
				}

				if ( Convert.ToDouble( A.reliability ) < 90 && !A.crit_fail ) {
					Task13.User.WriteMsg( "<span class='warning'>Item is neither reliable enough or broken enough to learn from.</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				this.loaded_item = A;
				A.loc = this;
				user.WriteMsg( "<span class='notice'>You add the " + A.name + " to the machine.</span>" );
				Icon13.Flick( "h_lathe_load", this );
			}
			return null;
		}

		// Function from file: experimentor.dm
		public override void RefreshParts(  ) {
			Obj_Item_Weapon_StockParts_Manipulator M = null;
			Obj_Item_Weapon_StockParts_ScanningModule M2 = null;
			Obj_Item_Weapon_StockParts_MicroLaser M3 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M = _a;
				

				if ( this.resetTime > 0 && this.resetTime - Convert.ToDouble( M.rating ) >= 1 ) {
					this.resetTime -= Convert.ToDouble( M.rating );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_ScanningModule) )) {
				M2 = _b;
				
				this.badThingCoeff += Convert.ToDouble( M2.rating * 2 );
			}

			foreach (dynamic _c in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				M3 = _c;
				
				this.badThingCoeff += Convert.ToDouble( M3.rating );
			}
			return;
		}

		// Function from file: experimentor.dm
		public void warn_admins( Mob user = null, string ReactionName = null ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this );
			GlobalFuncs.message_admins( new Txt( "Experimentor reaction: " ).item( ReactionName ).str( " generated by " ).item( GlobalFuncs.key_name_admin( user ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( user ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( user ).str( "'>FLW</A>) at (" ).item( T.x ).str( "," ).item( T.y ).str( "," ).item( T.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( T.x ).str( ";Y=" ).item( T.y ).str( ";Z=" ).item( T.z ).str( "'>JMP</a>)" ).ToString() );
			GlobalFuncs.log_game( "Experimentor reaction: " + ReactionName + " generated by " + GlobalFuncs.key_name( user ) + " in (" + T.x + "," + T.y + "," + T.z + ")" );
			return;
		}

		// Function from file: experimentor.dm
		public void experiment( double? exp = null, dynamic exp_on = null ) {
			dynamic chosenchem = null;
			dynamic criticalReaction = null;
			Mob_Living m = null;
			dynamic target = null;
			dynamic throwing = null;
			dynamic T = null;
			Obj_Effect_Decal_Cleanable_Greenglow reagentdecal = null;
			string savedName = null;
			dynamic newPath = null;
			dynamic CG = null;
			Reagents R = null;
			EffectSystem_SmokeSpread_Chem smoke = null;
			Reagents R2 = null;
			EffectSystem_SmokeSpread_Chem smoke2 = null;
			Obj_Item_Weapon_ReagentContainers_Food_Drinks_Coffee C = null;
			dynamic start = null;
			dynamic M = null;
			dynamic MT = null;
			Obj_Item_Projectile_Magic_Fireball FB = null;
			GasMixture env = null;
			double transfer_moles = 0;
			GasMixture removed = null;
			double? heat_capacity = null;
			Mob_Living m2 = null;
			Obj_Machinery_Vending_Coffee C2 = null;
			Reagents R3 = null;
			EffectSystem_SmokeSpread_Chem smoke3 = null;
			GasMixture env2 = null;
			double transfer_moles2 = 0;
			GasMixture removed2 = null;
			double? heat_capacity2 = null;
			EffectSystem_SmokeSpread smoke4 = null;
			dynamic material = null;
			Ent_Dynamic AM = null;
			ByTable throwAt = null;
			Ent_Dynamic AM2 = null;
			int? counter = null;
			Ent_Dynamic cast = null;
			dynamic a = null;
			dynamic b = null;
			dynamic R4 = null;
			int globalMalf = 0;
			Mob_Living m3 = null;
			ByTable reqs = null;
			dynamic T2 = null;

			this.recentlyExperimented = true;
			this.icon_state = "h_lathe_wloop";
			criticalReaction = Lang13.FindIn( exp_on, ( this.critical_items != null ? GlobalVars.TRUE : GlobalVars.FALSE ) );

			if ( exp == 1 ) {
				this.visible_message( "" + this + " prods at " + exp_on + " with mechanical arms." );

				if ( Rand13.PercentChance( 35 ) && Lang13.Bool( criticalReaction ) ) {
					this.visible_message( "" + exp_on + " is gripped in just the right way, enhancing its focus." );
					this.badThingCoeff++;
				}

				if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + " malfunctions and destroys " + exp_on + ", lashing its arms out at nearby people!</span>" );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 1 ), typeof(Mob_Living) )) {
						m = _a;
						
						m.apply_damage( 15, "brute", Rand13.Pick(new object [] { "head", "chest", "groin" }) );
						this.investigate_log( "Experimentor dealt minor brute to " + m + ".", "experimentor" );
					}
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( Rand13.PercentChance( ((int)( 35 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='warning'>" + this + " malfunctions!</span>" );
					exp = 6;
				}

				if ( Rand13.PercentChance( ((int)( 50 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + " malfunctions, throwing the " + exp_on + "!</span>" );
					target = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInViewExcludeThis( this, 7 ) );

					if ( Lang13.Bool( target ) ) {
						throwing = this.loaded_item;
						this.investigate_log( "Experimentor has thrown " + this.loaded_item + " at " + target, "experimentor" );
						this.ejectItem();

						if ( Lang13.Bool( throwing ) ) {
							((Ent_Dynamic)throwing).throw_at( target, 10, 1 );
						}
					}
				}
			}

			if ( exp == 2 ) {
				this.visible_message( "<span class='danger'>" + this + " reflects radioactive rays at " + exp_on + "!</span>" );

				if ( Rand13.PercentChance( 35 ) && Lang13.Bool( criticalReaction ) ) {
					this.visible_message( "" + exp_on + " has activated an unknown subroutine!" );
					this.cloneMode = GlobalVars.TRUE;
					this.cloneCount = this.badThingCoeff;
					this.investigate_log( "Experimentor has made a clone of " + exp_on, "experimentor" );
					this.ejectItem();
				}

				if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + " malfunctions, melting " + exp_on + " and leaking radiation!</span>" );
					GlobalFuncs.radiation_pulse( GlobalFuncs.get_turf( this ), 1, 1, 25, true );
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( Rand13.PercentChance( ((int)( 35 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='warning'>" + this + " malfunctions, spewing toxic waste!</span>" );

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 1 ) )) {
						T = _b;
						

						if ( !T.density ) {
							
							if ( Rand13.PercentChance( 95 ) ) {
								reagentdecal = new Obj_Effect_Decal_Cleanable_Greenglow( T );
								reagentdecal.reagents.add_reagent( "radium", 7 );
							}
						}
					}
				}

				if ( Rand13.PercentChance( ((int)( 50 - this.badThingCoeff )) ) ) {
					savedName = "" + exp_on;
					this.ejectItem( GlobalVars.TRUE );
					newPath = this.pickWeighted( this.valid_items );
					this.loaded_item = Lang13.Call( newPath, this );
					this.visible_message( "<span class='warning'>" + this + " malfunctions, transforming " + savedName + " into " + this.loaded_item + "!</span>" );
					this.investigate_log( "Experimentor has transformed " + savedName + " into " + this.loaded_item, "experimentor" );

					if ( this.loaded_item is Obj_Item_Weapon_Grenade_ChemGrenade ) {
						CG = this.loaded_item;
						((Obj_Item_Weapon_Grenade)CG).prime();
					}
					this.ejectItem();
				}
			}

			if ( exp == 3 ) {
				this.visible_message( "<span class='warning'>" + this + " fills its chamber with gas, " + exp_on + " included.</span>" );

				if ( Rand13.PercentChance( 35 ) && Lang13.Bool( criticalReaction ) ) {
					this.visible_message( "" + exp_on + " achieves the perfect mix!" );
					new Obj_Item_Stack_Sheet_Mineral_Plasma( GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInViewExcludeThis( this, 1 ) ) ) );
				}

				if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + " destroys " + exp_on + ", leaking dangerous gas!</span>" );
					chosenchem = Rand13.Pick(new object [] { "carbon", "radium", "toxin", "condensedcapsaicin", "mushroomhallucinogen", "space_drugs", "ethanol", "beepskysmash" });
					R = new Reagents( 50 );
					R.my_atom = this;
					R.add_reagent( chosenchem, 50 );
					this.investigate_log( "Experimentor has released " + chosenchem + " smoke.", "experimentor" );
					smoke = new EffectSystem_SmokeSpread_Chem();
					smoke.set_up( R, 0, this );
					GlobalFuncs.playsound( this.loc, "sound/effects/smoke.ogg", 50, 1, -3 );
					smoke.start();
					GlobalFuncs.qdel( R );
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + "'s chemical chamber has sprung a leak!</span>" );
					chosenchem = Rand13.Pick(new object [] { "mutationtoxin", "nanomachines", "sacid" });
					R2 = new Reagents( 50 );
					R2.my_atom = this;
					R2.add_reagent( chosenchem, 50 );
					smoke2 = new EffectSystem_SmokeSpread_Chem();
					smoke2.set_up( R2, 0, this );
					GlobalFuncs.playsound( this.loc, "sound/effects/smoke.ogg", 50, 1, -3 );
					smoke2.start();
					GlobalFuncs.qdel( R2 );
					this.ejectItem( GlobalVars.TRUE );
					this.warn_admins( Task13.User, "" + chosenchem + " smoke" );
					this.investigate_log( "Experimentor has released <font color='red'>" + chosenchem + "</font> smoke!", "experimentor" );
				}

				if ( Rand13.PercentChance( ((int)( 35 - this.badThingCoeff )) ) ) {
					this.visible_message( "" + this + " malfunctions, spewing harmless gas." );
					this.throwSmoke( this.loc );
				}

				if ( Rand13.PercentChance( ((int)( 50 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='warning'>" + this + " melts " + exp_on + ", ionizing the air around it!</span>" );
					GlobalFuncs.empulse( this.loc, 4, 6 );
					this.investigate_log( "Experimentor has generated an Electromagnetic Pulse.", "experimentor" );
					this.ejectItem( GlobalVars.TRUE );
				}
			}

			if ( exp == 4 ) {
				this.visible_message( "" + this + " raises " + exp_on + "'s temperature." );

				if ( Rand13.PercentChance( 35 ) && Lang13.Bool( criticalReaction ) ) {
					this.visible_message( "<span class='warning'>" + this + "'s emergency coolant system gives off a small ding!</span>" );
					GlobalFuncs.playsound( this.loc, "sound/machines/ding.ogg", 50, 1 );
					C = new Obj_Item_Weapon_ReagentContainers_Food_Drinks_Coffee( GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInViewExcludeThis( this, 1 ) ) ) );
					chosenchem = Rand13.Pick(new object [] { "plasma", "capsaicin", "ethanol" });
					C.reagents.remove_any( 25 );
					C.reagents.add_reagent( chosenchem, 50 );
					C.name = "Cup of Suspicious Liquid";
					C.desc = "It has a large hazard symbol printed on the side in fading ink.";
					this.investigate_log( "Experimentor has made a cup of " + chosenchem + " coffee.", "experimentor" );
				}

				if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
					start = GlobalFuncs.get_turf( this );
					M = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInView( 3, this ) );
					MT = GlobalFuncs.get_turf( M );

					if ( Lang13.Bool( MT ) ) {
						this.visible_message( "<span class='danger'>" + this + " dangerously overheats, launching a flaming fuel orb!</span>" );
						this.investigate_log( "Experimentor has launched a <font color='red'>fireball</font> at " + M + "!", "experimentor" );
						FB = new Obj_Item_Projectile_Magic_Fireball( start );
						FB.original = MT;
						FB.current = start;
						FB.yo = Convert.ToDouble( MT.y - start.y );
						FB.xo = Convert.ToDouble( MT.x - start.x );
						FB.fire();
					}
				}

				if ( Rand13.PercentChance( ((int)( 35 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + " malfunctions, melting " + exp_on + " and releasing a burst of flame!</span>" );
					GlobalFuncs.explosion( this.loc, -1, 0, 0, 0, 0, null, 2 );
					this.investigate_log( "Experimentor started a fire.", "experimentor" );
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( Rand13.PercentChance( ((int)( 50 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='warning'>" + this + " malfunctions, melting " + exp_on + " and leaking hot air!</span>" );
					env = this.loc.return_air();
					transfer_moles = env.total_moles() * 0.25;
					removed = env.remove( transfer_moles );

					if ( removed != null ) {
						heat_capacity = removed.heat_capacity();

						if ( heat_capacity == 0 || heat_capacity == null ) {
							heat_capacity = 1;
						}
						removed.temperature = Num13.MinInt( Convert.ToInt32( ( removed.temperature * heat_capacity + 100000 ) / heat_capacity ), 1000 );
					}
					env.merge( removed );
					this.air_update_turf();
					this.investigate_log( "Experimentor has released hot air.", "experimentor" );
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( Rand13.PercentChance( ((int)( 50 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='warning'>" + this + " malfunctions, activating its emergency coolant systems!</span>" );
					this.throwSmoke( this.loc );

					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 1 ), typeof(Mob_Living) )) {
						m2 = _c;
						
						m2.apply_damage( 5, "burn", Rand13.Pick(new object [] { "head", "chest", "groin" }) );
						this.investigate_log( "Experimentor has dealt minor burn damage to " + m2, "experimentor" );
					}
					this.ejectItem();
				}
			}

			if ( exp == 5 ) {
				this.visible_message( "" + this + " lowers " + exp_on + "'s temperature." );

				if ( Rand13.PercentChance( 35 ) && Lang13.Bool( criticalReaction ) ) {
					this.visible_message( "<span class='warning'>" + this + "'s emergency coolant system gives off a small ding!</span>" );
					C2 = new Obj_Machinery_Vending_Coffee( GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInViewExcludeThis( this, 1 ) ) ) );
					GlobalFuncs.playsound( this.loc, "sound/machines/ding.ogg", 50, 1 );
					chosenchem = Rand13.Pick(new object [] { "uranium", "frostoil", "ephedrine" });
					C2.reagents.remove_any( 25 );
					C2.reagents.add_reagent( chosenchem, 50 );
					C2.name = "Cup of Suspicious Liquid";
					C2.desc = "It has a large hazard symbol printed on the side in fading ink.";
					this.investigate_log( "Experimentor has made a cup of " + chosenchem + " coffee.", "experimentor" );
				}

				if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + " malfunctions, shattering " + exp_on + " and releasing a dangerous cloud of coolant!</span>" );
					R3 = new Reagents( 50 );
					R3.my_atom = this;
					R3.add_reagent( "frostoil", 50 );
					this.investigate_log( "Experimentor has released frostoil gas.", "experimentor" );
					smoke3 = new EffectSystem_SmokeSpread_Chem();
					smoke3.set_up( R3, 0, this );
					GlobalFuncs.playsound( this.loc, "sound/effects/smoke.ogg", 50, 1, -3 );
					smoke3.start();
					GlobalFuncs.qdel( R3 );
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( Rand13.PercentChance( ((int)( 35 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='warning'>" + this + " malfunctions, shattering " + exp_on + " and leaking cold air!</span>" );
					env2 = this.loc.return_air();
					transfer_moles2 = env2.total_moles() * 0.25;
					removed2 = env2.remove( transfer_moles2 );

					if ( removed2 != null ) {
						heat_capacity2 = removed2.heat_capacity();

						if ( heat_capacity2 == 0 || heat_capacity2 == null ) {
							heat_capacity2 = 1;
						}
						removed2.temperature = ( removed2.temperature * heat_capacity2 - 75000 ) / heat_capacity2;
					}
					env2.merge( removed2 );
					this.air_update_turf();
					this.investigate_log( "Experimentor has released cold air.", "experimentor" );
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( Rand13.PercentChance( ((int)( 50 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='warning'>" + this + " malfunctions, releasing a flurry of chilly air as " + exp_on + " pops out!</span>" );
					smoke4 = new EffectSystem_SmokeSpread();
					smoke4.set_up( 0, this.loc );
					smoke4.start();
					this.ejectItem();
				}
			}

			if ( exp == 6 ) {
				this.visible_message( "<span class='warning'>" + exp_on + " activates the crushing mechanism, " + exp_on + " is destroyed!</span>" );

				if ( Rand13.PercentChance( 35 ) && Lang13.Bool( criticalReaction ) ) {
					this.visible_message( "<span class='warning'>" + this + "'s crushing mechanism slowly and smoothly descends, flattening the " + exp_on + "!</span>" );
					new Obj_Item_Stack_Sheet_Plasteel( GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInViewExcludeThis( this, 1 ) ) ) );
				}

				if ( this.linked_console.linked_lathe != null ) {
					
					foreach (dynamic _d in Lang13.Enumerate( exp_on.materials )) {
						material = _d;
						
						((MaterialContainer)((dynamic)this.linked_console.linked_lathe).materials).insert_amount( Num13.MinInt( Convert.ToInt32( ((dynamic)this.linked_console.linked_lathe).materials.max_amount - ((dynamic)this.linked_console.linked_lathe).materials.total_amount ), Convert.ToInt32( exp_on.materials[material] ) ), material );
					}
				}

				if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + "'s crusher goes way too many levels too high, crushing right through space-time!</span>" );
					GlobalFuncs.playsound( this.loc, "sound/effects/supermatter.ogg", 50, 1, -3 );
					this.investigate_log( "Experimentor has triggered the 'throw things' reaction.", "experimentor" );

					foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 7 ), typeof(Ent_Dynamic) )) {
						AM = _e;
						

						if ( !Lang13.Bool( AM.anchored ) ) {
							AM.throw_at_fast( this, 10, 1 );
						}
					}
				}

				if ( Rand13.PercentChance( ((int)( 35 - this.badThingCoeff )) ) ) {
					this.visible_message( "<span class='danger'>" + this + "'s crusher goes one level too high, crushing right into space-time!</span>" );
					GlobalFuncs.playsound( this.loc, "sound/effects/supermatter.ogg", 50, 1, -3 );
					this.investigate_log( "Experimentor has triggered the 'minor throw things' reaction.", "experimentor" );
					throwAt = new ByTable();

					foreach (dynamic _f in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 7 ), typeof(Ent_Dynamic) )) {
						AM2 = _f;
						

						if ( !Lang13.Bool( AM2.anchored ) ) {
							throwAt.Add( AM2 );
						}
					}
					counter = null;
					counter = 1;

					while (( counter ??0) < throwAt.len) {
						cast = throwAt[counter];
						cast.throw_at_fast( Rand13.PickFromTable( throwAt ), 10, 1 );
						counter++;
					}
				}
				this.ejectItem( GlobalVars.TRUE );
			}

			if ( exp == 8 ) {
				a = Rand13.Pick(new object [] { "rumbles", "shakes", "vibrates", "shudders" });
				b = Rand13.Pick(new object [] { "crushes", "spins", "viscerates", "smashes", "insults" });
				this.visible_message( "<span class='warning'>" + exp_on + " " + a + ", and " + b + ", the experiment was a failure.</span>" );
			}

			if ( exp == 7 ) {
				this.visible_message( "" + this + " scans the " + exp_on + ", revealing its true nature!" );
				GlobalFuncs.playsound( this.loc, "sound/effects/supermatter.ogg", 50, 3, -1 );
				R4 = this.loaded_item;
				R4.reveal();
				this.investigate_log( "Experimentor has revealed a relic with <span class='danger'>" + R4.realProc + "</span> effect.", "experimentor" );
				this.ejectItem();
			}

			if ( Rand13.PercentChance( ((int)( 20 - this.badThingCoeff )) ) ) {
				globalMalf = Rand13.Int( 1, 100 );

				if ( globalMalf < 15 ) {
					this.visible_message( "<span class='warning'>" + this + "'s onboard detection system has malfunctioned!</span>" );
					this.item_reactions["" + exp_on.type] = Rand13.Pick(new object [] { 1, 2, 3, 4, 5, 6 });
					this.ejectItem();
				}

				if ( globalMalf > 16 && globalMalf < 35 ) {
					this.visible_message( "<span class='warning'>" + this + " melts " + exp_on + ", ian-izing the air around it!</span>" );
					this.throwSmoke( this.loc );

					if ( Lang13.Bool( this.trackedIan ) ) {
						this.throwSmoke( this.trackedIan.loc );
						this.trackedIan.loc = this.loc;
						this.investigate_log( "Experimentor has stolen Ian!", "experimentor" );
					} else {
						new Mob_Living_SimpleAnimal_Pet_Dog_Corgi( this.loc );
						this.investigate_log( "Experimentor has spawned a new corgi.", "experimentor" );
					}
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( globalMalf > 36 && globalMalf < 50 ) {
					this.visible_message( "<span class='warning'>" + this + " improves " + exp_on + ", drawing the life essence of those nearby!</span>" );

					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchInView( this, 4 ), typeof(Mob_Living) )) {
						m3 = _g;
						
						m3.WriteMsg( "<span class='danger'>You feel your flesh being torn from you, mists of blood drifting to " + this + "!</span>" );
						m3.apply_damage( 50, "brute", "chest" );
						this.investigate_log( "Experimentor has taken 50 brute a blood sacrifice from " + m3, "experimentor" );
					}
					reqs = this.ConvertReqString2List( exp_on.origin_tech );

					foreach (dynamic _h in Lang13.Enumerate( reqs )) {
						T2 = _h;
						
						reqs[T2] = reqs[T2] + 1;
					}
					exp_on.origin_tech = String13.MakeUrlParams( reqs );
					this.investigate_log( "Experimentor has set the origin tech of " + exp_on + " to " + exp_on.origin_tech, "experimentor" );
				}

				if ( globalMalf > 51 && globalMalf < 75 ) {
					this.visible_message( "<span class='warning'>" + this + " encounters a run-time error!</span>" );
					this.throwSmoke( this.loc );

					if ( Lang13.Bool( this.trackedRuntime ) ) {
						this.throwSmoke( this.trackedRuntime.loc );
						this.trackedRuntime.loc = this.loc;
						this.investigate_log( "Experimentor has stolen Runtime!", "experimentor" );
					} else {
						new Mob_Living_SimpleAnimal_Pet_Cat( this.loc );
						this.investigate_log( "Experimentor failed to steal runtime, and instead spawned a new cat.", "experimentor" );
					}
					this.ejectItem( GlobalVars.TRUE );
				}

				if ( globalMalf > 76 ) {
					this.visible_message( "<span class='warning'>" + this + " begins to smoke and hiss, shaking violently!</span>" );
					this.f_use_power( 500000 );
					this.investigate_log( "Experimentor has drained power from its APC", "experimentor" );
				}
			}
			Task13.Schedule( ((int)( this.resetTime )), (Task13.Closure)(() => {
				this.icon_state = "h_lathe";
				this.recentlyExperimented = false;
				return;
			}));
			return;
		}

		// Function from file: experimentor.dm
		public dynamic pickWeighted( ByTable from = null ) {
			int? result = null;
			int counter = 0;
			int probtocheck = 0;

			result = GlobalVars.FALSE;
			counter = 1;

			while (!Lang13.Bool( result )) {
				probtocheck = Convert.ToInt32( from[counter] );

				if ( Rand13.PercentChance( probtocheck ) ) {
					result = GlobalVars.TRUE;
					return from[counter + 1];
				}

				if ( counter + 2 < from.len ) {
					counter = counter + 2;
				} else {
					counter = 1;
				}
			}
			return null;
		}

		// Function from file: experimentor.dm
		public void throwSmoke( Ent_Static where = null ) {
			EffectSystem_SmokeSpread smoke = null;

			smoke = new EffectSystem_SmokeSpread();
			smoke.set_up( 0, where );
			smoke.start();
			return;
		}

		// Function from file: experimentor.dm
		public void ejectItem( int? delete = null ) {
			delete = delete ?? GlobalVars.FALSE;

			dynamic dropturf = null;

			
			if ( Lang13.Bool( this.loaded_item ) ) {
				
				if ( Lang13.Bool( this.cloneMode ) && this.cloneCount > 0 ) {
					this.visible_message( "<span class='notice'>A duplicate " + this.loaded_item + " pops out!</span>" );
					Lang13.Call( this.loaded_item, GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInViewExcludeThis( this, 1 ) ) ) );
					this.cloneCount--;

					if ( this.cloneCount == 0 ) {
						this.cloneMode = GlobalVars.FALSE;
					}
				}
				dropturf = GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 1 ) ) );

				if ( !Lang13.Bool( dropturf ) ) {
					dropturf = GlobalFuncs.get_turf( this );
				}
				this.loaded_item.loc = dropturf;

				if ( Lang13.Bool( delete ) ) {
					GlobalFuncs.qdel( this.loaded_item );
				}
				this.loaded_item = null;
			}
			return;
		}

		// Function from file: experimentor.dm
		public double? matchReaction( dynamic matching = null, string reaction = null ) {
			dynamic D = null;
			double? tor = null;

			D = matching;

			if ( Lang13.Bool( D ) ) {
				
				if ( this.item_reactions.Find( "" + D.type ) != 0 ) {
					tor = Lang13.DoubleNullable( this.item_reactions["" + D.type] );

					if ( tor == String13.ParseNumber( reaction ) ) {
						return tor;
					} else {
						return 8;
					}
				} else {
					return 8;
				}
			} else {
				return 8;
			}
			return null;
		}

		// Function from file: experimentor.dm
		public int? checkCircumstances( dynamic O = null ) {
			dynamic T = null;

			
			if ( O is Obj_Item_Device_TransferValve ) {
				T = O;

				if ( !Lang13.Bool( T.tank_one ) || !Lang13.Bool( T.tank_two ) || !Lang13.Bool( T.attached_device ) ) {
					return GlobalVars.FALSE;
				}
			}
			return GlobalVars.TRUE;
		}

		// Function from file: experimentor.dm
		public void SetTypeReactions(  ) {
			int probWeight = 0;
			dynamic I = null;
			dynamic tempCheck = null;
			dynamic tempCheck2 = null;
			dynamic tempCheck3 = null;

			probWeight = 0;

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item) ) )) {
				I = _a;
				

				if ( I is Obj_Item_Weapon_Relic ) {
					this.item_reactions["" + I] = 7;
				} else {
					this.item_reactions["" + I] = Rand13.Pick(new object [] { 1, 2, 3, 4, 5, 6 });
				}

				if ( Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Weapon_StockParts) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Weapon_Grenade_ChemGrenade) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Weapon_Kitchen) ) ) ) {
					tempCheck = I;

					if ( Lang13.Initial( tempCheck, "icon_state" ) != null ) {
						this.valid_items.Add( 15 );
						this.valid_items.Add( I );
						probWeight++;
					}
				}

				if ( Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Weapon_ReagentContainers_Food) ) ) ) {
					tempCheck2 = I;

					if ( Lang13.Initial( tempCheck2, "icon_state" ) != null ) {
						this.valid_items.Add( Rand13.Int( 1, Num13.MaxInt( 2, 35 - probWeight ) ) );
						this.valid_items.Add( I );
					}
				}

				if ( Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Weapon_Rcd) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Weapon_Grenade) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Device_Aicard) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Weapon_Storage_Backpack_Holding) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_SlimeExtract) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Device_Onetankbomb) ) ) || Lang13.Bool( I.IsSubclassOf( typeof(Obj_Item_Device_TransferValve) ) ) ) {
					tempCheck3 = I;

					if ( Lang13.Initial( tempCheck3, "icon_state" ) != null ) {
						this.critical_items.Add( I );
					}
				}
			}
			return;
		}

		// Function from file: experimentor.dm
		public ByTable ConvertReqString2List( dynamic source_list = null ) {
			ByTable temp_list = null;
			dynamic O = null;

			temp_list = String13.ParseUrlParams( source_list );

			foreach (dynamic _a in Lang13.Enumerate( temp_list )) {
				O = _a;
				
				temp_list[O] = String13.ParseNumber( temp_list[O] );
			}
			return temp_list;
		}

	}

}