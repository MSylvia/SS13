// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Projectile_Automatic : Obj_Item_Weapon_Gun_Projectile {

		public bool burstfire = false;
		public int burst_count = 3;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.inhand_states = new ByTable().Set( "left_hand", "icons/mob/in-hand/left/guninhands_left.dmi" ).Set( "right_hand", "icons/mob/in-hand/right/guninhands_right.dmi" );
			this.max_shells = 18;
			this.caliber = new ByTable().Set( "9mm", 1 );
			this.origin_tech = "combat=4;materials=2";
			this.ammo_type = "/obj/item/ammo_casing/c9mm";
			this.automatic = true;
			this.fire_delay = 0;
			this.load_method = 2;
			this.mag_type = "/obj/item/ammo_storage/magazine/smg9mm";
			this.icon_state = "saber";
		}

		public Obj_Item_Weapon_Gun_Projectile_Automatic ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: automatic.dm
		public override void Fire( dynamic target = null, dynamic user = null, dynamic _params = null, bool? reflex = null, bool? struggle = null ) {
			reflex = reflex ?? false;
			struggle = struggle ?? false;

			int shots_fired = 0;
			int? to_shoot = null;
			int? i = null;

			
			if ( this.burstfire ) {
				
				if ( this.ready_to_fire() ) {
					this.fire_delay = 0;
				} else {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " is still cooling down!</span>" ).ToString() );
					return;
				}
				shots_fired = 0;
				to_shoot = Num13.MinInt( this.burst_count, ((int)( this.getAmmo() )) );
				i = null;
				i = 1;

				while (( i ??0) <= ( to_shoot ??0)) {
					base.Fire( (object)(target), (object)(user), (object)(_params), reflex, struggle );
					shots_fired++;
					i++;
				}
				GlobalFuncs.message_admins( "" + Task13.User + " just shot " + shots_fired + " burst fire bullets out of " + ( this.getAmmo() + shots_fired ) + " from their " + this + "." );
				this.fire_delay = shots_fired * 10;
			} else {
				base.Fire( (object)(target), (object)(user), (object)(_params), reflex, struggle );
			}
			return;
		}

		// Function from file: automatic.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + ( Lang13.Bool( this.stored_magazine ) ? "-" + this.stored_magazine.max_ammo : "" ) + ( Lang13.Bool( this.chambered ) ? "" : "-e" );
			return null;
		}

		// Function from file: automatic.dm
		public override bool isHandgun(  ) {
			return false;
		}

		// Function from file: automatic.dm
		[Verb]
		[VerbInfo( name: "Toggle Burstfire", group: "Object" )]
		public void ToggleFire(  ) {
			this.burstfire = !this.burstfire;

			if ( !this.burstfire ) {
				this.fire_delay = Lang13.Initial( this, "fire_delay" );
			}
			GlobalFuncs.to_chat( Task13.User, new Txt( "You toggle " ).the( this ).item().str( "'s firing setting to " ).item( ( this.burstfire ? "burst fire" : "single fire" ) ).str( "." ).ToString() );
			return;
		}

	}

}