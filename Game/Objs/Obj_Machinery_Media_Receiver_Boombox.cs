// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Media_Receiver_Boombox : Obj_Machinery_Media_Receiver {

		public bool on = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/radio.dmi";
			this.icon_state = "radio";
		}

		public Obj_Machinery_Media_Receiver_Boombox ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: radio.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic newfreq = null;
			dynamic vol = null;

			
			if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.isAdminGhost( Task13.User ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't push buttons when your fingers go right through them, dummy.</span>" );
				return null;
			}
			base.Topic( href, href_list, (object)(hclient) );
			Interface13.Stat( null, href_list.Contains( "power" ) );

			if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.isAdminGhost( Task13.User ) ) {
				this.on = !this.on;
				this.update_on();
			}
			Interface13.Stat( null, href_list.Contains( "set_freq" ) );

			if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.isAdminGhost( Task13.User ) ) {
				newfreq = this.media_frequency;

				if ( href_list["set_freq"] != "-1" ) {
					newfreq = String13.ParseNumber( href_list["set_freq"] );
				} else {
					newfreq = Interface13.Input( Task13.User, "Set a new frequency (MHz, 90.0, 200.0).", this, this.media_frequency, null, InputType.Num | InputType.Null );
				}

				if ( Lang13.Bool( newfreq ) ) {
					
					if ( String13.FindIgnoreCase( String13.NumberToString( Convert.ToDouble( newfreq ) ), ".", 1, 0 ) != 0 ) {
						newfreq *= 10;
					}

					if ( Convert.ToDouble( newfreq ) > 900 && Convert.ToDouble( newfreq ) < 2000 ) {
						this.disconnect_frequency();
						this.media_frequency = newfreq;
						this.connect_frequency();
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Invalid FM frequency. (90.0, 200.0)</span>" );
					}
				}
			}
			Interface13.Stat( null, href_list.Contains( "set_volume" ) );

			if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.isAdminGhost( Task13.User ) ) {
				vol = this.volume;

				if ( href_list["set_volume"] != "-1" ) {
					vol = ( String13.ParseNumber( href_list["set_volume"] ) ??0) / 100;
				} else {
					vol = Interface13.Input( Task13.User, "Set a new volume (1-100%).", this, this.volume * 100, null, InputType.Num | InputType.Null );

					if ( vol == null ) {
						this.updateUsrDialog();
						return null;
					}
					vol /= 100;
				}

				if ( Lang13.Bool( vol ) ) {
					this.volume = vol;
					this.update_music();
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Invalid volume.</span>" );
				}
			}
			this.updateDialog();
			return null;
		}

		// Function from file: radio.dm
		public virtual void update_on(  ) {
			
			if ( this.on ) {
				this.visible_message( new Txt().The( this ).item().str( " hisses to life!" ).ToString() );
				this.playing = 1;
				this.connect_frequency();
			} else {
				this.visible_message( new Txt().The( this ).item().str( " falls quiet." ).ToString() );
				this.playing = 0;
				this.disconnect_frequency();
			}
			return;
		}

		// Function from file: radio.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			dat = "<html><head><title>" + this + "</title></head><body><TT>";
			dat += new Txt( "\n				Power: <a href=\"?src=" ).Ref( this ).str( ";power=1\">" ).item( ( this.on ? "On" : "Off" ) ).str( "</a><BR>\n				Frequency: <A href='byond://?src=" ).Ref( this ).str( ";set_freq=-1'>" ).item( GlobalFuncs.format_frequency( this.media_frequency ) ).str( "</a><BR>\n				Volume: <A href='byond://?src=" ).Ref( this ).str( ";set_volume=-1'>" ).item( this.volume * 100 ).str( "%</a><BR>\n				" ).ToString();
			dat += "</TT></body></html>";
			Interface13.Browse( user, dat, "window=radio-recv" );
			GlobalFuncs.onclose( user, "radio-recv" );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't see anything to mess with.</span>" );
				return null;
			}
			((Mob)a).set_machine( this );
			this.interact( a );
			return null;
		}

		// Function from file: radio.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			
			if ( this.on ) {
				this.update_on();
			}
			this.update_icon();
			return false;
		}

	}

}