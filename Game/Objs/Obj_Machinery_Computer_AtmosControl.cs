// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_AtmosControl : Obj_Machinery_Computer {

		public double frequency = 1441;
		public ByTable sensors = new ByTable()
											.Set( "n2_sensor", "Nitrogen Tank" )
											.Set( "o2_sensor", "Oxygen Tank" )
											.Set( "co2_sensor", "Carbon Dioxide Tank" )
											.Set( "tox_sensor", "Plasma Tank" )
											.Set( "n2o_sensor", "Nitrous Oxide Tank" )
											.Set( "air_sensor", "Mixed Air Tank" )
											.Set( "mix_sensor", "Mix Tank" )
											.Set( "distro_meter", "Distribution Loop" )
											.Set( "waste_meter", "Waste Loop" )
										;
		public ByTable sensor_information = new ByTable();
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "tank";
			this.icon_keyboard = "atmos_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_AtmosControl);
		}

		// Function from file: atmos_control.dm
		public Obj_Machinery_Computer_AtmosControl ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.SSradio != null ) {
				this.set_frequency( this.frequency );
			}
			return;
		}

		// Function from file: atmos_control.dm
		public override void initialize(  ) {
			this.set_frequency( this.frequency );
			return;
		}

		// Function from file: atmos_control.dm
		public void set_frequency( double new_frequency = 0 ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmos_control.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic id_tag = null;

			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}
			id_tag = signal.data["id_tag"];

			if ( !Lang13.Bool( id_tag ) || !( this.sensors.Find( id_tag ) != 0 ) ) {
				return false;
			}
			this.sensor_information[id_tag] = signal.data;
			return false;
		}

		// Function from file: atmos_control.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			dynamic id_tag = null;
			dynamic long_name = null;
			dynamic info = null;

			data = new ByTable();
			data["sensors"] = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.sensors )) {
				id_tag = _a;
				
				long_name = this.sensors[id_tag];
				info = this.sensor_information[id_tag];

				if ( !Lang13.Bool( info ) ) {
					continue;
				}
				data["sensors"] += new ByTable(new object [] { 
					new ByTable().Set( "id_tag", id_tag ).Set( "long_name", GlobalFuncs.sanitize( long_name ) ).Set( "pressure", info["pressure"] ).Set( "temperature", info["temperature"] ).Set( "gases", info["gases"] )
				 });
			}
			return data;
		}

		// Function from file: atmos_control.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "atmos_control", this.name, 400, 925, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: atmos_control.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

	}

}