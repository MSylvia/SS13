// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Drinks_Bottle_Customizable : Obj_Item_Weapon_ReagentContainers_Food_Drinks_Bottle {

		public ByTable ingredients = new ByTable();
		public string initReagent = null;
		public int ingMax = 3;
		public Image filling = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.gulp_size = 2;
			this.isGlass = true;
		}

		// Function from file: customizables.dm
		public Obj_Item_Weapon_ReagentContainers_Food_Drinks_Bottle_Customizable ( dynamic loc = null ) : base( (object)(loc) ) {
			Icon opaquefilling = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			((Reagents)this.reagents).add_reagent( this.initReagent, 50 );
			opaquefilling = new Icon( this.icon, "" + Lang13.Initial( this, "icon_state" ) + "_filling" );
			opaquefilling.ChangeOpacity( 0.8 );
			this.filling = new Image( opaquefilling );
			return;
		}

		// Function from file: customizables.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.ingredients )) {
				_default = _a;
				
				GlobalFuncs.qdel( _default );
			}
			return base.Destroy( (object)(brokenup) );
		}

		// Function from file: customizables.dm
		public Image generateFilling( Obj_Item_Weapon_ReagentContainers_Food_Snacks S = null ) {
			Image I = null;

			this.overlays.len = 0;
			I = this.filling;

			if ( S.filling_color != "#FFFFFF" ) {
				I.color = S.filling_color;
			} else {
				I.color = GlobalFuncs.AverageColor( GlobalFuncs.getFlatIcon( S, S.dir, 0 ), true, true );
			}
			return I;
		}

		// Function from file: customizables.dm
		public string updateName(  ) {
			int i = 0;
			string new_name = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks S = null;

			i = 1;

			foreach (dynamic _a in Lang13.Enumerate( this.ingredients, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) )) {
				S = _a;
				

				if ( i == 1 ) {
					new_name += "" + S.name;
				} else if ( i == this.ingredients.len ) {
					new_name += " and " + S.name;
				} else {
					new_name += ", " + S.name;
				}
				i++;
			}
			new_name = "" + new_name + " " + Lang13.Initial( this, "name" );

			if ( Lang13.Length( new_name ) >= 150 ) {
				this.name = "something yummy";
			} else {
				this.name = new_name;
			}
			return new_name;
		}

		// Function from file: customizables.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			string n_name = null;
			dynamic S = null;
			string newcolor = null;

			
			if ( a is Obj_Item_Weapon_Pen ) {
				n_name = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( b, "What would you like to name this drink?", "Booze Renaming", null, null, InputType.Str | InputType.Null ) ), 1, 78 );

				if ( Lang13.Bool( n_name ) && this.Adjacent( b ) && !Lang13.Bool( b.stat ) ) {
					this.name = "" + n_name;
				}
				return _default;
			} else if ( a is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
				
				if ( this.ingredients.len < this.ingMax ) {
					S = a;

					if ( !GlobalVars.recursiveFood && a is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Customizable ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>" + Rand13.Pick(new object [] { "Sorry, no recursive food.", "That would be a straining topological exercise.", "This world just isn't ready for your cooking genius.", "It's possible that you may have a problem.", "It won't fit.", "You don't think that would taste very good.", "Quit goofin' around." }) + "</span>" );
						return _default;
					}

					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You add the " + S.name + " to the " + this.name + ".</span>" );
						((Reagents)S.reagents).trans_to( this, S.reagents.total_volume );
						this.ingredients.Add( S );
						this.updateName();
						this.overlays.Remove( this.filling );
						newcolor = ( S.filling_color != "#FFFFFF" ? S.filling_color : GlobalFuncs.AverageColor( GlobalFuncs.getFlatIcon( S, Lang13.DoubleNullable( S.dir ), 0 ), true, true ) );
						this.filling.color = GlobalFuncs.BlendRGB( this.filling.color, newcolor, 1 / this.ingredients.len );
						this.overlays.Add( this.filling );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>That won't fit.</span>" );
				}
			} else {
				_default = base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return _default;
		}

	}

}