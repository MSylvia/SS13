// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Ectoplasm_Revenant : Obj_Item_Weapon_Ectoplasm {

		public bool reforming = true;
		public bool inert = false;
		public Client client_to_revive = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 2;
			this.icon = "icons/effects/effects.dmi";
			this.icon_state = "revenantEctoplasm";
		}

		// Function from file: revenant.dm
		public Obj_Item_Weapon_Ectoplasm_Revenant ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 600, (Task13.Closure)(() => {
				
				if ( this != null && this.reforming ) {
					this.reforming = false;
					this.reform(); return;
				} else {
					this.inert = true;
					this.visible_message( "<span class='warning'>" + this + " settles down and seems lifeless.</span>" );
					return;
				}
				return;
			}));
			return;
		}

		// Function from file: revenant.dm
		public bool reform(  ) {
			string key_of_revenant = null;
			Mob_Living_SimpleAnimal_Revenant R = null;
			dynamic M = null;
			ByTable candidates = null;
			dynamic C = null;
			Mind player_mind = null;

			
			if ( Lang13.Bool( this.gc_destroyed ) || !( this != null ) || this.inert ) {
				return false;
			}
			GlobalFuncs.message_admins( "Revenant ectoplasm was left undestroyed for 1 minute and is reforming into a new revenant." );
			this.loc = GlobalFuncs.get_turf( this );
			R = new Mob_Living_SimpleAnimal_Revenant( GlobalFuncs.get_turf( this ) );

			if ( this.client_to_revive != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M = _a;
					

					if ( M.client == this.client_to_revive ) {
						R.client = this.client_to_revive;
						key_of_revenant = this.client_to_revive.key;
					}
				}
			}

			if ( !Lang13.Bool( key_of_revenant ) ) {
				GlobalFuncs.message_admins( "The new revenant's old client either could not be found or is in a new, living mob - grabbing a random candidate instead..." );
				candidates = GlobalFuncs.get_candidates( "revenant" );

				if ( !( candidates.len != 0 ) ) {
					GlobalFuncs.qdel( R );
					GlobalFuncs.message_admins( "No candidates were found for the new revenant. Oh well!" );
					this.inert = true;
					this.visible_message( "<span class='revenwarning'>" + this + " settles down and seems lifeless.</span>" );
					return false;
				}
				C = Rand13.PickFromTable( candidates );
				key_of_revenant = C.key;

				if ( !Lang13.Bool( key_of_revenant ) ) {
					GlobalFuncs.qdel( R );
					GlobalFuncs.message_admins( "No ckey was found for the new revenant. Oh well!" );
					this.inert = true;
					this.visible_message( "<span class='revenwarning'>" + this + " settles down and seems lifeless.</span>" );
					return false;
				}
			}
			player_mind = new Mind( key_of_revenant );
			player_mind.active = true;
			player_mind.transfer_to( R );
			player_mind.assigned_role = "revenant";
			player_mind.special_role = "Revenant";
			GlobalVars.ticker.mode.traitors.Or( player_mind );
			GlobalFuncs.message_admins( "" + key_of_revenant + " has been " + ( this.client_to_revive != null ? "re" : "" ) + "made into a revenant by reforming ectoplasm." );
			GlobalFuncs.log_game( "" + key_of_revenant + " was " + ( this.client_to_revive != null ? "re" : "" ) + "made as a revenant by reforming ectoplasm." );
			this.visible_message( "<span class='revenboldnotice'>" + this + " suddenly rises into the air before fading away.</span>" );
			GlobalFuncs.qdel( this );

			if ( this != null ) {
				this.inert = true;
			}
			return true;
		}

		// Function from file: revenant.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.inert ) {
				user.WriteMsg( "<span class='revennotice'>It seems inert.</span>" );
			} else if ( this.reforming ) {
				user.WriteMsg( "<span class='revenwarning'>It is shifting and distorted. It would be wise to destroy this.</span>" );
			}
			return 0;
		}

		// Function from file: revenant.dm
		public override bool throw_impact( dynamic target = null, Mob_Living_Carbon thrower = null ) {
			base.throw_impact( (object)(target), thrower );

			if ( this.inert ) {
				return false;
			}
			this.visible_message( "<span class='notice'>" + this + " breaks into particles upon impact, which fade away to nothingness.</span>" );
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: revenant.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.reforming || this.inert ) {
				return base.attack_self( (object)(user), (object)(flag), emp );
			}
			((Ent_Static)user).visible_message( "<span class='notice'>" + user + " scatters " + this + " in all directions.</span>", "<span class='notice'>You scatter " + this + " across the area. The particles slowly fade away.</span>" );
			user.drop_item();
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}