// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe : Obj_Machinery_Atmospherics {

		public GasMixture air_temporary = null;
		public int volume = 0;
		public Pipeline parent = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.use_power = 0;
			this.can_unwrench = true;
			this.can_buckle = 1;
			this.buckle_requires_restraints = true;
			this.layer = 2.4;
		}

		// Function from file: pipes.dm
		public Obj_Machinery_Atmospherics_Pipe ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			this.color = this.pipe_color;
			this.volume = this.device_type * 35;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: pipes.dm
		public override ByTable returnPipenets(  ) {
			ByTable _default = null;

			_default = new ByTable(new object [] { this.parent });
			return _default;
		}

		// Function from file: pipes.dm
		public override dynamic Destroy(  ) {
			dynamic _default = null;

			Ent_Static T = null;
			Obj_Machinery_Meter meter = null;
			Obj_Item_PipeMeter PM = null;

			this.releaseAirToTurf();
			GlobalFuncs.qdel( this.air_temporary );
			this.air_temporary = null;
			T = this.loc;

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Machinery_Meter) )) {
				meter = _a;
				

				if ( meter.target == this ) {
					PM = new Obj_Item_PipeMeter( T );
					meter.transfer_fingerprints_to( PM );
					GlobalFuncs.qdel( meter );
				}
			}
			_default = base.Destroy();

			if ( this.parent != null && !Lang13.Bool( this.parent.gc_destroyed ) ) {
				GlobalFuncs.qdel( this.parent );
			}
			this.parent = null;
			return _default;
		}

		// Function from file: pipes.dm
		public override void setPipenet( Pipeline reference = null, Obj_Machinery_Atmospherics A = null ) {
			this.parent = reference;
			return;
		}

		// Function from file: pipes.dm
		public override Pipeline returnPipenet( Obj_Machinery_Atmospherics A = null ) {
			return this.parent;
		}

		// Function from file: pipes.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Device_Analyzer ) {
				this.atmosanalyzer_scan( this.parent.air, user );
				return null;
			}

			if ( A is Obj_Item_Device_PipePainter || A is Obj_Item_Weapon_PipeDispenser ) {
				return null;
			}
			return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
		}

		// Function from file: pipes.dm
		public override void build_network(  ) {
			
			if ( !( this.parent != null ) ) {
				this.parent = new Pipeline();
				this.parent.build_pipeline( this );
			}
			return;
		}

		// Function from file: pipes.dm
		public override GasMixture return_air(  ) {
			return this.parent.air;
		}

		// Function from file: pipes.dm
		public void update_node_icon(  ) {
			double I = 0;
			dynamic N = null;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, this.device_type )) {
				I = _a;
				

				if ( Lang13.Bool( this.nodes[I] ) ) {
					N = this.nodes[I];
					N.update_icon();
				}
			}
			return;
		}

		// Function from file: pipes.dm
		public void releaseAirToTurf(  ) {
			Ent_Static T = null;

			
			if ( this.air_temporary != null ) {
				T = this.loc;
				T.assume_air( this.air_temporary );
				this.air_update_turf();
			}
			return;
		}

		// Function from file: pipes.dm
		public bool check_pressure( dynamic pressure = null ) {
			return true;
		}

		// Function from file: pipes.dm
		public override void hide( bool h = false ) {
			
			if ( this.level == 1 && this.loc is Tile_Simulated ) {
				this.invisibility = ( h ? 101 : 0 );
			}
			this.update_icon();
			return;
		}

		// Function from file: pipes.dm
		public override void atmosinit( ByTable node_connects = null ) {
			Ent_Static T = null;

			T = this.loc;
			this.hide( Lang13.Bool( ((dynamic)T).intact ) );
			base.atmosinit( node_connects );
			return;
		}

		// Function from file: pipes.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			bool have_node1 = false;
			bool have_node2 = false;

			
			if ( Lang13.Bool( this.nodes[1] ) && Lang13.Bool( this.nodes[2] ) ) {
				this.icon_state = "intact" + ( this.invisibility != 0 ? "-f" : "" );
			} else {
				have_node1 = ( Lang13.Bool( this.nodes[1] ) ? true : false );
				have_node2 = ( Lang13.Bool( this.nodes[2] ) ? true : false );
				this.icon_state = "exposed" + have_node1 + have_node2 + ( this.invisibility != 0 ? "-f" : "" );
			}
			return false;
		}

		// Function from file: pipes.dm
		public override void nullifyNode( double I = 0 ) {
			Obj_Machinery_Atmospherics oldN = null;

			oldN = this.nodes[I];
			base.nullifyNode( I );

			if ( oldN != null ) {
				oldN.build_network();
			}
			return;
		}

		// Function from file: datum_pipeline.dm
		public override void addMember( Obj_Machinery_Atmospherics A = null ) {
			this.parent.addMember( A, this );
			return;
		}

	}

}