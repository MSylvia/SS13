// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe : Obj_Machinery_Atmospherics {

		public GasMixture air_temporary = null;
		public Game_Data parent = null;
		public int volume = 0;
		public double alert_pressure = 8106;
		public string baseicon = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 20;
			this.use_power = 0;
			this.layer = 2.4;
		}

		public Obj_Machinery_Atmospherics_Pipe ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pipes.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic meter = null;
			dynamic A = null;
			GasMixture environment = null;

			
			if ( a is Obj_Item_Device_Rcd_Rpd || a is Obj_Item_Device_PipePainter ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Red ) {
				this.color = "#B70000";
				GlobalFuncs.to_chat( b, "<span class='notice'>You paint the pipe red.</span>" );
				this.update_icon();
				return 1;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Blue ) {
				this.color = "#0000B7";
				GlobalFuncs.to_chat( b, "<span class='notice'>You paint the pipe blue.</span>" );
				this.update_icon();
				return 1;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Green ) {
				this.color = "#00B900";
				GlobalFuncs.to_chat( b, "<span class='notice'>You paint the pipe green.</span>" );
				this.update_icon();
				return 1;
			}

			if ( a is Obj_Item_Weapon_ReagentContainers_Glass_Paint_Yellow ) {
				this.color = "#B77900";
				GlobalFuncs.to_chat( b, "<span class='notice'>You paint the pipe yellow.</span>" );
				this.update_icon();
				return 1;
			}

			if ( a is Obj_Item_PipeMeter ) {
				meter = a;

				if ( Lang13.Bool( b.drop_item( meter, this.loc ) ) ) {
					meter.setAttachLayer( this.piping_layer );
				}
			}

			if ( a is Obj_Item_Device_Analyzer ) {
				A = a;
				environment = this.return_air();
				b.show_message( ((Obj_Item_Device_Analyzer)A).output_gas_scan( environment, this, true ) );
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: pipes.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Machinery_Meter M = null;

			
			if ( this.parent != null ) {
				GlobalFuncs.returnToPool( this.parent );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Machinery_Meter) )) {
				M = _a;
				

				if ( M.target == this ) {
					new Obj_Item_PipeMeter( this.loc );
					GlobalFuncs.qdel( M );
				}
			}

			if ( this.air_temporary != null && this.loc != null ) {
				this.loc.assume_air( this.air_temporary );
				this.air_temporary = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic return_network( Obj reference = null ) {
			
			if ( !( this.parent != null ) ) {
				this.parent = GlobalFuncs.getFromPool( typeof(Pipeline) );
				((dynamic)this.parent).build_pipeline( this );
			}
			return ((dynamic)this.parent).return_network( reference );
		}

		// Function from file: pipes.dm
		public override dynamic network_expand( PipeNetwork new_network = null, Obj_Machinery_Atmospherics reference = null ) {
			
			if ( !( this.parent != null ) ) {
				this.parent = GlobalFuncs.getFromPool( typeof(Pipeline) );
				((dynamic)this.parent).build_pipeline( this );
			}
			return ((dynamic)this.parent).network_expand( new_network, reference );
		}

		// Function from file: pipes.dm
		public override dynamic build_network(  ) {
			
			if ( !( this.parent != null ) ) {
				this.parent = GlobalFuncs.getFromPool( typeof(Pipeline) );
				((dynamic)this.parent).build_pipeline( this );
			}
			return ((dynamic)this.parent).return_network();
		}

		// Function from file: pipes.dm
		public override GasMixture return_air(  ) {
			
			if ( !( this.parent != null ) ) {
				this.parent = GlobalFuncs.getFromPool( typeof(Pipeline) );
				((dynamic)this.parent).build_pipeline( this );
			}
			return ((dynamic)this.parent).air;
		}

		// Function from file: pipes.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( Lang13.Bool( this.color ) && this.centre_overlay != null ) {
				this.centre_overlay.color = this.color;
				this.overlays.Cut();
				this.overlays.Add( this.centre_overlay );
			}
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

		// Function from file: pipes.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			return false;
		}

		// Function from file: pipes.dm
		public virtual bool check_pressure( dynamic pressure = null ) {
			return true;
		}

		// Function from file: pipes.dm
		public virtual ByTable pipeline_expansion(  ) {
			return null;
		}

		// Function from file: pipes.dm
		public void mass_colouration( dynamic mass_colour = null ) {
			Game_Data pipeline = null;
			ByTable update_later = null;
			Obj_Machinery_Atmospherics pipe = null;
			Obj_Machinery_Atmospherics pipe2 = null;
			Obj_Machinery_Atmospherics pipe3 = null;

			
			if ( String13.FindIgnoreCase( mass_colour, "#", 1, 0 ) != 0 ) {
				pipeline = this.parent;
				update_later = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)pipeline).members, typeof(Obj_Machinery_Atmospherics) )) {
					pipe = _a;
					
					pipe.color = mass_colour;

					if ( !pipe.can_be_coloured ) {
						pipe.default_colour = mass_colour;
						update_later.Add( pipe );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( ((dynamic)pipeline).edges, typeof(Obj_Machinery_Atmospherics) )) {
					pipe2 = _b;
					
					pipe2.update_icon();
				}
				update_later.Remove( ((dynamic)pipeline).edges );

				foreach (dynamic _c in Lang13.Enumerate( update_later, typeof(Obj_Machinery_Atmospherics) )) {
					pipe3 = _c;
					
					pipe3.update_icon( 1 );
				}
			}
			return;
		}

	}

}