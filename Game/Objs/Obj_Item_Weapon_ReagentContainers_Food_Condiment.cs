// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Condiment : Obj_Item_Weapon_ReagentContainers_Food {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 4352;
			this.possible_transfer_amounts = new ByTable(new object [] { 1, 5, 10 });
			this.icon = "icons/obj/food.dmi";
			this.icon_state = "emptycondiment";
		}

		public Obj_Item_Weapon_ReagentContainers_Food_Condiment ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: condiment.dm
		public override void on_reagent_change(  ) {
			
			if ( this.reagents.reagent_list.len > 0 ) {
				
				switch ((string)( ((Reagents)this.reagents).get_master_reagent_id() )) {
					case "ketchup":
						this.name = "ketchup";
						this.desc = "You feel more American already.";
						this.icon_state = "ketchup";
						this.item_state = null;
						break;
					case "capsaicin":
						this.name = "hotsauce";
						this.desc = "You can almost TASTE the stomach ulcers now!";
						this.icon_state = "hotsauce";
						this.item_state = null;
						break;
					case "enzyme":
						this.name = "universal enzyme";
						this.desc = "Used in cooking various dishes.";
						this.icon_state = "enzyme";
						this.item_state = null;
						break;
					case "flour":
						this.name = "flour sack";
						this.desc = "A big bag of flour. Good for baking!";
						this.icon_state = "flour";
						this.item_state = null;
						break;
					case "milk":
						this.name = "space milk";
						this.desc = "It's milk. White and nutritious goodness!";
						this.icon_state = "milk";
						this.item_state = "carton";
						break;
					case "soymilk":
						this.name = "soy milk";
						this.desc = "It's soy milk. White and nutritious goodness!";
						this.icon_state = "soymilk";
						this.item_state = "carton";
						break;
					case "rice":
						this.name = "rice sack";
						this.desc = "A taste of Asia in the kitchen.";
						this.icon_state = "rice";
						this.item_state = null;
						break;
					case "soysauce":
						this.name = "soy sauce";
						this.desc = "A salty soy-based flavoring.";
						this.icon_state = "soysauce";
						this.item_state = null;
						break;
					case "frostoil":
						this.name = "coldsauce";
						this.desc = "Leaves the tongue numb in its passage.";
						this.icon_state = "coldsauce";
						this.item_state = null;
						break;
					case "sodiumchloride":
						this.name = "salt shaker";
						this.desc = "Salt. From space oceans, presumably.";
						this.icon_state = "saltshakersmall";
						this.item_state = null;
						break;
					case "blackpepper":
						this.name = "pepper mill";
						this.desc = "Often used to flavor food or make people sneeze.";
						this.icon_state = "peppermillsmall";
						this.item_state = null;
						break;
					case "cornoil":
						this.name = "corn oil";
						this.desc = "A delicious oil used in cooking. Made from corn.";
						this.icon_state = "cornoil";
						this.item_state = null;
						break;
					case "sugar":
						this.name = "sugar";
						this.desc = "Tastey space sugar!";
						this.icon_state = "sugar";
						this.item_state = null;
						break;
					case "chefspecial":
						this.name = "Ã¿Chef Excellence's Special Sauce";
						this.desc = "A potent sauce distilled from the toxin glands of 1000 Space Carp.";
						this.icon_state = "emptycondiment";
						this.item_state = null;
						break;
					case "vinegar":
						this.name = "malt vinegar bottle";
						this.desc = "Perfect for fish and chips!";
						this.icon_state = "vinegar_container";
						this.item_state = null;
						break;
					case "honey":
						this.name = "honey pot";
						this.desc = "Sweet and healthy!";
						this.icon_state = "honey";
						this.item_state = null;
						break;
					case "cinnamon":
						this.name = "cinnamon shaker";
						this.desc = "A spice, obtained from the bark of cinnamomum trees.";
						this.icon_state = "cinnamon";
						this.item_state = null;
						break;
					default:
						this.name = "misc condiment bottle";
						this.desc = "Just your average condiment container.";
						this.icon_state = "emptycondiment";
						this.item_state = null;

						if ( this.reagents.reagent_list.len == 1 ) {
							this.desc = "Looks like it is " + ((Reagents)this.reagents).get_master_reagent_name() + ", but you are not sure.";
						} else {
							this.desc = "A mixture of various condiments. " + ((Reagents)this.reagents).get_master_reagent_name() + " is one of them.";
						}
						this.icon_state = "mixedcondiments";
						break;
				}
			} else {
				this.icon_state = "emptycondiment";
				this.name = "condiment bottle";
				this.desc = "An empty condiment bottle.";
				return;
			}
			return;
		}

		// Function from file: condiment.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic trans = null;
			dynamic trans2 = null;

			
			if ( !( flag == true ) || A is Mob ) {
				return false;
			}

			if ( A is Obj_Structure_ReagentDispensers ) {
				
				if ( !Lang13.Bool( A.reagents.total_volume ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( A ).item().str( " is empty.</span>" ).ToString() );
					return false;
				}

				if ( ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.reagents.maximum_volume ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is full.</span>" ).ToString() );
					return false;
				}
				trans = ((Reagents)A.reagents).trans_to( this, A.amount_per_transfer_from_this );
				GlobalFuncs.to_chat( user, "<span class='notice'>You fill " + this + " with " + trans + " units of the contents of " + A + ".</span>" );
			} else if ( Lang13.Bool( ((Ent_Static)A).is_open_container() ) || A is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
				
				if ( !Lang13.Bool( this.reagents.total_volume ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is empty.</span>" ).ToString() );
					return false;
				}

				if ( ( A.reagents.total_volume ??0) >= Convert.ToDouble( A.reagents.maximum_volume ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You can't add anymore to " ).the( A ).item().str( ".</span>" ).ToString() );
					return false;
				}
				trans2 = ((Reagents)this.reagents).trans_to( A, this.amount_per_transfer_from_this );
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You transfer " ).item( trans2 ).str( " units of the condiment to " ).the( A ).item().str( ".</span>" ).ToString() );
			}
			return false;
		}

		// Function from file: condiment.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return null;
		}

		// Function from file: condiment.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic R = null;

			R = this.reagents;

			if ( !Lang13.Bool( R ) || !Lang13.Bool( R.total_volume ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is empty.</span>" ).ToString() );
				return false;
			}

			if ( M == user ) {
				GlobalFuncs.to_chat( M, new Txt( "<span class='notice'>You swallow some of the contents of " ).the( this ).item().str( ".</span>" ).ToString() );

				if ( Lang13.Bool( this.reagents.total_volume ) ) {
					((Reagents)this.reagents).reaction( M, GlobalVars.INGEST );
					Task13.Schedule( 5, (Task13.Closure)(() => {
						((Reagents)this.reagents).trans_to( M, this.amount_per_transfer_from_this );
						return;
					}));
				}
				GlobalFuncs.playsound( M.loc, "sound/items/drink.ogg", Rand13.Int( 10, 50 ), 1 );
				return true;
			} else if ( M is Mob_Living_Carbon ) {
				((Ent_Static)M).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " attempts to feed " ).item( M ).str( " " ).the( this ).item().str( "</span>" ).ToString(), new Txt( "<span class='danger'>" ).item( user ).str( " attempts to feed you " ).the( this ).item().str( "</span>" ).ToString() );

				if ( !GlobalFuncs.do_mob( user, M ) ) {
					return null;
				}
				((Ent_Static)M).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " feeds " ).item( M ).str( " " ).the( this ).item().str( "</span>" ).ToString(), new Txt( "<span class='danger'>" ).item( user ).str( " feeds you " ).the( this ).item().str( "</span>" ).ToString() );
				M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been fed " + this.name + " by " + user.name + " (" + user.ckey + ") Reagents: " + this.reagentlist( this ) + "</font>" );
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Fed " + this.name + " by " + M.name + " (" + M.ckey + ") Reagents: " + this.reagentlist( this ) + "</font>" );
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + user.name + " (" + user.ckey + ") fed " + M.name + " (" + M.ckey + ") with " + this.name + " (INTENT: " + String13.ToUpper( user.a_intent ) + ")</font>" ) ) );

				if ( !( user is Mob_Living_Carbon ) ) {
					M.LAssailant = null;
				} else {
					M.LAssailant = user;
				}

				if ( Lang13.Bool( this.reagents.total_volume ) ) {
					((Reagents)this.reagents).reaction( M, GlobalVars.INGEST );
					Task13.Schedule( 5, (Task13.Closure)(() => {
						((Reagents)this.reagents).trans_to( M, this.amount_per_transfer_from_this );
						return;
					}));
				}
				GlobalFuncs.playsound( M.loc, "sound/items/drink.ogg", Rand13.Int( 10, 50 ), 1 );
				return true;
			}
			return false;
		}

		// Function from file: condiment.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.attack( user, user );
			return null;
		}

	}

}