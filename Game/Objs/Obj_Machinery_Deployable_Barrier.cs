// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Deployable_Barrier : Obj_Machinery_Deployable {

		public double health = 140;
		public int maxhealth = 140;
		public bool locked = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 1;
			this.icon_state = "barrier0";
		}

		// Function from file: deployable.dm
		public Obj_Machinery_Deployable_Barrier ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon_state = "barrier" + this.locked;
			return;
		}

		// Function from file: deployable.dm
		public void explode(  ) {
			Effect_Effect_System_SparkSpread s = null;

			this.visible_message( "<span class='danger'>" + this + " blows apart!</span>" );
			s = new Effect_Effect_System_SparkSpread();
			s.set_up( 3, 1, this );
			s.start();
			GlobalFuncs.explosion( this.loc, -1, -1, 0 );

			if ( this != null ) {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: deployable.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 1 ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: deployable.dm
		public override bool blob_act( dynamic severity = null ) {
			this.health -= 25;

			if ( this.health <= 0 ) {
				this.explode();
			}
			return false;
		}

		// Function from file: deployable.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
				this.locked = !this.locked;
				this.anchored = !Lang13.Bool( this.anchored );
				this.icon_state = "barrier" + this.locked;
			}
			return null;
		}

		// Function from file: deployable.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					this.explode();
					return false;
					break;
				case 2:
					this.health -= 25;

					if ( this.health <= 0 ) {
						this.explode();
					}
					return false;
					break;
			}
			return false;
		}

		// Function from file: deployable.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Card_Id ) {
				
				if ( this.allowed( b ) ) {
					this.locked = !this.locked;
					this.anchored = !Lang13.Bool( this.anchored );
					this.icon_state = "barrier" + this.locked;

					if ( this.locked ) {
						GlobalFuncs.to_chat( b, "Barrier lock toggled on." );
						return null;
					} else if ( !this.locked ) {
						GlobalFuncs.to_chat( b, "Barrier lock toggled off." );
						return null;
					}
				}
				return null;
			} else {
				this.visible_message( "<span class='danger'>" + this + " has been hit by " + b + " with " + a + "</span>" );
				((Mob)b).delayNextAttack( 10 );

				dynamic _a = a.damtype; // Was a switch-case, sorry for the mess.
				if ( _a=="fire" ) {
					this.health -= Convert.ToDouble( a.force );
				} else if ( _a=="brute" ) {
					this.health -= Convert.ToDouble( a.force * 0.75 );
				}

				if ( this.health <= 0 ) {
					this.explode();
				}
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: deployable.dm
		public override int emag( dynamic user = null ) {
			Effect_Effect_System_SparkSpread s = null;

			
			if ( this.emagged == 0 ) {
				this.emagged = 1;
				this.req_access = 0;
				GlobalFuncs.to_chat( user, "You break the ID authentication lock on the " + this + "." );
				s = new Effect_Effect_System_SparkSpread();
				s.set_up( 2, 1, this );
				s.start();
				this.desc = "A deployable barrier. Swipe your ID card to lock/unlock it. Seems like it's malfunctioning";
				return 0;
			}
			return 0;
		}

	}

}