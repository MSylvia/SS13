// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortaTurretCover : Obj_Machinery {

		public Obj_Machinery_PortaTurret Parent_Turret = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/turrets.dmi";
			this.icon_state = "turretCover";
			this.layer = 3.5;
		}

		public Obj_Machinery_PortaTurretCover ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: portable_turret.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic O = null;

			
			if ( a is Obj_Item_Weapon_Card_Emag && !( this.Parent_Turret.emagged != 0 ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You short out " + this.Parent_Turret + "'s threat assessment circuits.</span>" );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( null, this.Parent_Turret ) )) {
						O = _a;
						
						O.show_message( "<span class='warning'>" + this.Parent_Turret + " hums oddly...</span>", 1 );
					}
					return;
				}));
				this.Parent_Turret.emagged = 1;
				this.Parent_Turret.on = false;
				Task13.Sleep( 40 );
				this.Parent_Turret.on = true;
			} else if ( a is Obj_Item_Weapon_Wrench && !this.Parent_Turret.on ) {
				
				if ( this.Parent_Turret.raised ) {
					return null;
				}

				if ( !Lang13.Bool( this.Parent_Turret.anchored ) ) {
					this.Parent_Turret.anchored = 1;
					this.Parent_Turret.invisibility = 45;
					this.Parent_Turret.icon_state = "grey_target_prism";
					GlobalFuncs.to_chat( b, "You secure the exterior bolts on the turret." );
				} else {
					this.Parent_Turret.anchored = 0;
					GlobalFuncs.to_chat( b, "You unsecure the exterior bolts on the turret." );
					this.Parent_Turret.icon_state = "turretCover";
					this.Parent_Turret.invisibility = 0;
					GlobalFuncs.qdel( this );
				}
			} else if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.Parent_Turret.allowed( b ) ) {
					this.Parent_Turret.locked = !this.Parent_Turret.locked;
					GlobalFuncs.to_chat( b, "Controls are now " + ( this.Parent_Turret.locked ? "locked." : "unlocked." ) );
					this.updateUsrDialog();
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
			} else {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/smash.ogg", 60, 1 );
				this.Parent_Turret.health -= Convert.ToDouble( a.force * 0.5 );

				if ( this.Parent_Turret.health <= 0 ) {
					this.Parent_Turret.die();
				}

				if ( Convert.ToDouble( a.force * 0.5 ) > 2 ) {
					
					if ( !this.Parent_Turret.attacked && !( this.Parent_Turret.emagged != 0 ) ) {
						this.Parent_Turret.attacked = true;
						Task13.Schedule( 0, (Task13.Closure)(() => {
							Task13.Sleep( 30 );
							this.Parent_Turret.attacked = false;
							return;
						}));
					}
				}
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: portable_turret.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			this.Parent_Turret.add_fingerprint( Task13.User );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["power"] ) && this.Parent_Turret.allowed( Task13.User ) ) {
				
				if ( Lang13.Bool( this.Parent_Turret.anchored ) ) {
					
					if ( this.Parent_Turret.on ) {
						this.Parent_Turret.on = false;
					} else {
						this.Parent_Turret.on = true;
					}
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>It has to be secured first!</span>" );
				}
				this.updateUsrDialog();
				return null;
			}

			dynamic _a = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _a=="authweapon" ) {
				this.Parent_Turret.auth_weapons = !this.Parent_Turret.auth_weapons;
			} else if ( _a=="checkrecords" ) {
				this.Parent_Turret.check_records = !this.Parent_Turret.check_records;
			} else if ( _a=="shootcrooks" ) {
				this.Parent_Turret.criminals = !this.Parent_Turret.criminals;
			} else if ( _a=="shootall" ) {
				this.Parent_Turret.stun_all = !this.Parent_Turret.stun_all;
			} else if ( _a=="checkxenos" ) {
				this.Parent_Turret.check_anomalies = !this.Parent_Turret.check_anomalies;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: portable_turret.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic dat = null;
			dynamic H = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( !Lang13.Bool( this.Parent_Turret.lasercolor ) ) {
				dat += "\n<TT><B>Automatic Portable Turret Installation</B></TT><BR><BR>\nStatus: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.Parent_Turret.on ? "On" : "Off" ) ).str( "</A>" ).ToString() + "<BR>\nBehaviour controls are " + ( this.Parent_Turret.locked ? "locked" : "unlocked" );

				if ( !this.Parent_Turret.locked ) {
					dat += "<BR>\nCheck for Weapon Authorization: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=authweapon'>" ).item( ( this.Parent_Turret.auth_weapons ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nCheck Security Records: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=checkrecords'>" ).item( ( this.Parent_Turret.check_records ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize Identified Criminals: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=shootcrooks'>" ).item( ( this.Parent_Turret.criminals ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize All Non-Security and Non-Command Personnel: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=shootall'>" ).item( ( this.Parent_Turret.stun_all ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize All Unidentified Life Signs: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=checkxenos'>" ).item( ( this.Parent_Turret.check_anomalies ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>";
				}
			} else {
				
				if ( a is Mob_Living_Carbon_Human ) {
					H = a;

					if ( this.Parent_Turret.lasercolor == "b" && H.wear_suit is Obj_Item_Clothing_Suit_Redtag ) {
						return _default;
					}

					if ( this.Parent_Turret.lasercolor == "r" && H.wear_suit is Obj_Item_Clothing_Suit_Bluetag ) {
						return _default;
					}
				}
				dat += "\n<TT><B>Automatic Portable Turret Installation</B></TT><BR><BR>\nStatus: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.Parent_Turret.on ? "On" : "Off" ) ).str( "</A>" ).ToString() + "<BR>";
			}
			Interface13.Browse( a, "<HEAD><TITLE>Automatic Portable Turret Installation</TITLE></HEAD>" + dat, "window=autosec" );
			GlobalFuncs.onclose( a, "autosec" );
			return _default;
		}

		// Function from file: portable_turret.dm
		public override dynamic attack_ai( dynamic user = null ) {
			dynamic _default = null;

			dynamic dat = null;

			_default = base.attack_ai( (object)(user) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			this.add_hiddenprint( user );

			if ( !Lang13.Bool( this.Parent_Turret.lasercolor ) ) {
				dat += "\n<TT><B>Automatic Portable Turret Installation</B></TT><BR><BR>\nStatus: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.Parent_Turret.on ? "On" : "Off" ) ).str( "</A>" ).ToString() + "<BR>\nBehaviour controls are " + ( this.Parent_Turret.locked ? "locked" : "unlocked" );
				dat += "<BR>\nCheck for Weapon Authorization: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=authweapon'>" ).item( ( this.Parent_Turret.auth_weapons ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nCheck Security Records: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=checkrecords'>" ).item( ( this.Parent_Turret.check_records ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize Identified Criminals: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=shootcrooks'>" ).item( ( this.Parent_Turret.criminals ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize All Non-Security and Non-Command Personnel: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=shootall'>" ).item( ( this.Parent_Turret.stun_all ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nNeutralize All Unidentified Life Signs: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=checkxenos'>" ).item( ( this.Parent_Turret.check_anomalies ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>";
			} else {
				dat += "\n<TT><B>Automatic Portable Turret Installation</B></TT><BR><BR>\nStatus: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.Parent_Turret.on ? "On" : "Off" ) ).str( "</A>" ).ToString() + "<BR>";
			}
			Interface13.Browse( user, "<HEAD><TITLE>Automatic Portable Turret Installation</TITLE></HEAD>" + dat, "window=autosec" );
			GlobalFuncs.onclose( user, "autosec" );
			return _default;
		}

	}

}