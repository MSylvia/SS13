// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Arcade : Obj_Machinery_Computer {

		public string enemy_name = "Space Villain";
		public string temp = "Winners Don't Use Spacedrugs";
		public int player_hp = 30;
		public int player_mp = 10;
		public int enemy_hp = 45;
		public int enemy_mp = 20;
		public bool gameover = false;
		public bool blocked = false;
		public ByTable prizes = new ByTable()
											.Set( typeof(Obj_Item_Weapon_Storage_Box_Snappops), 2 )
											.Set( typeof(Obj_Item_Toy_Cards), 2 )
											.Set( typeof(Obj_Item_Toy_Blink), 2 )
											.Set( typeof(Obj_Item_Clothing_Under_Syndicate_Tacticool), 2 )
											.Set( typeof(Obj_Item_Toy_Sword), 2 )
											.Set( typeof(Obj_Item_Toy_Bomb), 1 )
											.Set( typeof(Obj_Item_Toy_Gun), 2 )
											.Set( typeof(Obj_Item_Toy_Crossbow), 2 )
											.Set( typeof(Obj_Item_Clothing_Suit_Syndicatefake), 2 )
											.Set( typeof(Obj_Item_Weapon_Storage_Fancy_Crayons), 2 )
											.Set( typeof(Obj_Item_Toy_Spinningtoy), 2 )
											.Set( typeof(Obj_Item_Toy_Minimeteor), 2 )
											.Set( typeof(Obj_Item_Device_Whisperphone), 2 )
											.Set( typeof(Obj_Item_Toy_Prize_Ripley), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Fireripley), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Deathripley), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Gygax), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Durand), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Honk), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Marauder), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Seraph), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Mauler), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Odysseus), 1 )
											.Set( typeof(Obj_Item_Toy_Prize_Phazon), 1 )
										;
		public int turtle = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/arcade";
			this.machine_flags = 31;
			this.emag_cost = 0;
			this.light_color = "#64C864";
			this.icon_state = "arcade";
		}

		// Function from file: arcade.dm
		public Obj_Machinery_Computer_Arcade ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic name_action = null;
			dynamic name_part1 = null;
			dynamic name_part2 = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			name_action = Rand13.Pick(new object [] { "Defeat ", "Annihilate ", "Save ", "Strike ", "Stop ", "Destroy ", "Robust ", "Romance ", "Pwn ", "Own " });
			name_part1 = Rand13.Pick(new object [] { "the Automatic ", "Farmer ", "Lord ", "Professor ", "the Cuban ", "the Evil ", "the Dread King ", "the Space ", "Lord ", "the Great ", "Duke ", "General " });
			name_part2 = Rand13.Pick(new object [] { "Melonoid", "Murdertron", "Sorcerer", "Ruin", "Jeff", "Ectoplasm", "Crushulon", "Uhangoid", "Vhakoid", "Peteoid", "slime", "Griefer", "ERPer", "Lizard Man", "Unicorn" });
			this.enemy_name = GlobalFuncs.replacetext( name_part1 + name_part2, "the ", "" );
			this.name = name_action + name_part1 + name_part2;
			return;
		}

		// Function from file: arcade.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			Obj_Item_Weapon_Circuitboard_Arcade A = null;

			
			if ( Lang13.Bool( this.circuit ) ) {
				A = new Obj_Item_Weapon_Circuitboard_Arcade();
				this.export_game_data( A );
			}
			base.togglePanelOpen( (object)(toggleitem), (object)(user), A );
			return 0;
		}

		// Function from file: arcade.dm
		public override dynamic emp_act( int severity = 0 ) {
			dynamic empprize = null;
			int num_of_prizes = 0;

			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return null;
			}
			empprize = null;
			num_of_prizes = 0;

			switch ((int)( severity )) {
				case 1:
					num_of_prizes = Rand13.Int( 1, 4 );
					break;
				case 2:
					num_of_prizes = Rand13.Int( 0, 2 );
					break;
			}

			while (num_of_prizes > 0) {
				empprize = GlobalFuncs.pickweight( this.prizes );
				Lang13.Call( empprize, this.loc );
				num_of_prizes--;
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: arcade.dm
		public override int emag( dynamic user = null ) {
			this.temp = "If you die in the game, you die for real!";
			this.player_hp = 30;
			this.player_mp = 10;
			this.enemy_hp = 45;
			this.enemy_mp = 20;
			this.gameover = false;
			this.blocked = false;
			this.emagged = 1;
			this.enemy_name = "Cuban Pete";
			this.name = "Outbomb Cuban Pete";
			this.updateUsrDialog();
			return 0;
		}

		// Function from file: arcade.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			int attackamt = 0;
			int pointamt = 0;
			int healamt = 0;
			int chargeamt = 0;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( !this.blocked && !this.gameover ) {
				
				if ( Lang13.Bool( href_list["attack"] ) ) {
					this.blocked = true;
					attackamt = Rand13.Int( 2, 6 );
					this.temp = "You attack for " + attackamt + " damage!";
					this.updateUsrDialog();

					if ( this.turtle > 0 ) {
						this.turtle--;
					}
					Task13.Sleep( 10 );
					this.enemy_hp -= attackamt;
					this.arcade_action();
				} else if ( Lang13.Bool( href_list["heal"] ) ) {
					this.blocked = true;
					pointamt = Rand13.Int( 1, 3 );
					healamt = Rand13.Int( 6, 8 );
					this.temp = "You use " + pointamt + " magic to heal for " + healamt + " damage!";
					this.updateUsrDialog();
					this.turtle++;
					Task13.Sleep( 10 );
					this.player_mp -= pointamt;
					this.player_hp += healamt;
					this.blocked = true;
					this.updateUsrDialog();
					this.arcade_action();
				} else if ( Lang13.Bool( href_list["charge"] ) ) {
					this.blocked = true;
					chargeamt = Rand13.Int( 4, 7 );
					this.temp = "You regain " + chargeamt + " points";
					this.player_mp += chargeamt;

					if ( this.turtle > 0 ) {
						this.turtle--;
					}
					this.updateUsrDialog();
					Task13.Sleep( 10 );
					this.arcade_action();
				}
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=arcade" );
			} else if ( Lang13.Bool( href_list["newgame"] ) ) {
				this.temp = "New Round";
				this.player_hp = 30;
				this.player_mp = 10;
				this.enemy_hp = 45;
				this.enemy_mp = 20;
				this.gameover = false;
				this.turtle = 0;

				if ( this.emagged != 0 ) {
					((dynamic)this).New();
					this.emagged = 0;
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: arcade.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";close=1'>Close</a>" ).ToString();
			dat += "<center><h4>" + this.enemy_name + "</h4></center>\n		<br><center><h3>" + this.temp + "</h3></center>\n		<br><center>Health: " + this.player_hp + " | Magic: " + this.player_mp + " | Enemy Health: " + this.enemy_hp + "</center>";

			if ( this.gameover ) {
				dat += new Txt( "<center><b><a href='byond://?src=" ).Ref( this ).str( ";newgame=1'>New Game</a>" ).ToString();
			} else {
				dat += new Txt( "<center><b><a href='byond://?src=" ).Ref( this ).str( ";attack=1'>Attack</a> |\n			<a href='byond://?src=" ).Ref( this ).str( ";heal=1'>Heal</a> |\n			<a href='byond://?src=" ).Ref( this ).str( ";charge=1'>Recharge Power</a>" ).ToString();
			}
			dat += "</b></center>";
			Interface13.Browse( a, dat, "window=arcade" );
			GlobalFuncs.onclose( a, "arcade" );
			return null;
		}

		// Function from file: arcade.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: arcade.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: arcade.dm
		public void arcade_action(  ) {
			dynamic prizeselect = null;
			dynamic prize = null;
			int boomamt = 0;
			int stealamt = 0;
			int attackamt = 0;

			
			if ( this.enemy_mp <= 0 || this.enemy_hp <= 0 ) {
				
				if ( !this.gameover ) {
					this.gameover = true;
					this.temp = "" + this.enemy_name + " has fallen! Rejoice!";

					if ( this.emagged != 0 ) {
						GlobalFuncs.feedback_inc( "arcade_win_emagged" );
						new Obj_Effect_Spawner_Newbomb_Timer_Syndicate( this.loc );
						new Obj_Item_Clothing_Head_Collectable_Petehat( this.loc );
						new Obj_Item_Device_Maracas( this.loc );
						new Obj_Item_Device_Maracas( this.loc );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has outbombed Cuban Pete and been awarded a bomb." );
						GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has outbombed Cuban Pete and been awarded a bomb." ) ) );
						((dynamic)this).New();
						this.emagged = 0;
					} else if ( !( this.contents.len != 0 ) ) {
						GlobalFuncs.feedback_inc( "arcade_win_normal" );
						prizeselect = GlobalFuncs.pickweight( this.prizes );
						Lang13.Call( prizeselect, this.loc );

						if ( prizeselect is Obj_Item_Toy_Gun ) {
							new Obj_Item_Toy_Ammo_Gun( this.loc );
						} else if ( prizeselect is Obj_Item_Clothing_Suit_Syndicatefake ) {
							new Obj_Item_Clothing_Head_Syndicatefake( this.loc );
						}
					} else {
						GlobalFuncs.feedback_inc( "arcade_win_normal" );
						prize = Rand13.PickFromTable( this.contents );
						prize.loc = this.loc;
					}
				}
			} else if ( this.emagged != 0 && this.turtle >= 4 ) {
				boomamt = Rand13.Int( 5, 10 );
				this.temp = "" + this.enemy_name + " throws a bomb, exploding you for " + boomamt + " damage!";
				this.player_hp -= boomamt;
			} else if ( this.enemy_mp <= 5 && Rand13.PercentChance( 70 ) ) {
				stealamt = Rand13.Int( 2, 3 );
				this.temp = "" + this.enemy_name + " steals " + stealamt + " of your power!";
				this.player_mp -= stealamt;
				this.updateUsrDialog();

				if ( this.player_mp <= 0 ) {
					this.gameover = true;
					Task13.Sleep( 10 );
					this.temp = "You have been drained! GAME OVER";

					if ( this.emagged != 0 ) {
						GlobalFuncs.feedback_inc( "arcade_loss_mana_emagged" );
						Task13.User.gib();
					} else {
						GlobalFuncs.feedback_inc( "arcade_loss_mana_normal" );
					}
				}
			} else if ( this.enemy_hp <= 10 && this.enemy_mp > 4 ) {
				this.temp = "" + this.enemy_name + " heals for 4 health!";
				this.enemy_hp += 4;
				this.enemy_mp -= 4;
			} else {
				attackamt = Rand13.Int( 3, 6 );
				this.temp = "" + this.enemy_name + " attacks for " + attackamt + " damage!";
				this.player_hp -= attackamt;
			}

			if ( this.player_mp <= 0 || this.player_hp <= 0 ) {
				this.gameover = true;
				this.temp = "You have been crushed! GAME OVER";

				if ( this.emagged != 0 ) {
					GlobalFuncs.feedback_inc( "arcade_loss_hp_emagged" );
					Task13.User.gib();
				} else {
					GlobalFuncs.feedback_inc( "arcade_loss_hp_normal" );
				}
			}
			this.blocked = false;
			return;
		}

		// Function from file: arcade.dm
		public void export_game_data( Obj_Item_Weapon_Circuitboard_Arcade A = null ) {
			
			if ( !( A != null ) ) {
				return;
			}

			if ( !( A.game_data != null ) ) {
				A.game_data = new ByTable();
			}
			A.game_data.len = 0;
			A.game_data["name"] = this.name;
			A.game_data["emagged"] = this.emagged;
			A.game_data["enemy_name"] = this.enemy_name;
			A.game_data["temp"] = this.temp;
			A.game_data["player_hp"] = this.player_hp;
			A.game_data["player_mp"] = this.player_mp;
			A.game_data["enemy_hp"] = this.enemy_hp;
			A.game_data["enemy_mp"] = this.enemy_mp;
			A.game_data["gameover"] = this.gameover;
			A.game_data["blocked"] = this.blocked;
			return;
		}

		// Function from file: arcade.dm
		public void import_game_data( dynamic A = null ) {
			
			if ( !Lang13.Bool( A ) || !( A.game_data != null ) || !( A.game_data.len != 0 ) ) {
				return;
			}
			this.name = A.game_data["name"];
			this.emagged = Convert.ToDouble( A.game_data["emagged"] );
			this.enemy_name = A.game_data["enemy_name"];
			this.temp = A.game_data["temp"];
			this.player_hp = Convert.ToInt32( A.game_data["player_hp"] );
			this.player_mp = Convert.ToInt32( A.game_data["player_mp"] );
			this.enemy_hp = Convert.ToInt32( A.game_data["enemy_hp"] );
			this.enemy_mp = Convert.ToInt32( A.game_data["enemy_mp"] );
			this.gameover = Lang13.Bool( A.game_data["gameover"] );
			this.blocked = Lang13.Bool( A.game_data["blocked"] );
			return;
		}

	}

}