// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Decal_Cleanable : Obj_Effect_Decal {

		public ByTable random_icon_states = new ByTable();
		public dynamic targeted_by = null;
		public double? amount = 0;
		public bool counts_as_blood = false;
		public bool transfers_dna = false;
		public ByTable viruses = new ByTable();
		public string basecolor = "#A10808";
		public ByTable virus2 = new ByTable();
		public ByTable absorbs_types = new ByTable();
		public dynamic on_wall = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.blood_DNA = new ByTable();
		}

		// Function from file: cleanable.dm
		public Obj_Effect_Decal_Cleanable ( dynamic loc = null ) : base( (object)(loc) ) {
			
			if ( this.random_icon_states != null && Lang13.Length( this.random_icon_states ) > 0 ) {
				this.icon_state = Rand13.PickFromTable( this.random_icon_states );
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: cleanable.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			this.Destroy();
			base.resetVariables( "viruses", "virus2", "blood_DNA", "random_icon_states", (object)(_args) );
			this.viruses = new ByTable();
			this.virus2 = new ByTable();
			this.blood_DNA = new ByTable();
			return null;
		}

		// Function from file: cleanable.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			int taken = 0;

			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( this.amount ) && a is Mob_Living_Carbon_Human ) {
				this.add_fingerprint( a );

				if ( Lang13.Bool( a.gloves ) ) {
					return null;
				}
				taken = Rand13.Int( 1, ((int)( this.amount ??0 )) );
				this.amount -= taken;
				GlobalFuncs.to_chat( a, new Txt( "<span class='notice'>You get some of " ).the( this ).item().str( " on your hands.</span>" ).ToString() );

				if ( this.transfers_dna ) {
					
					if ( !( a.blood_DNA != null ) ) {
						a.blood_DNA = new ByTable();
					}
					a.blood_DNA.Or( this.blood_DNA.Copy() );
				}
				a.bloody_hands += taken;
				a.hand_blood_color = this.basecolor;
				((Mob)a).update_inv_gloves( true );
				a.verbs += typeof(Mob_Living_Carbon_Human).GetMethod( "bloody_doodle" );
			}
			return null;
		}

		// Function from file: cleanable.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			
			if ( ( this.amount ??0) > 0 ) {
				this.add_blood_to( O, this.amount );
			}
			return null;
		}

		// Function from file: cleanable.dm
		public void add_blood_to( Ent_Dynamic perp = null, double? amount = null ) {
			Obj_Item S = null;

			
			if ( !( perp is Mob_Living_Carbon_Human ) ) {
				return;
			}

			if ( ( amount ??0) < 1 ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)perp).shoes ) ) {
				S = ((dynamic)perp).shoes;
				((dynamic)S).track_blood = Num13.MaxInt( 0, ((int)( amount ??0 )), Convert.ToInt32( ((dynamic)S).track_blood ) );

				if ( !Lang13.Bool( GlobalVars.blood_overlays[S.type] ) ) {
					S.generate_blood_overlay();
				}

				if ( S.blood_overlay != null ) {
					S.overlays.Remove( S.blood_overlay );
				} else {
					S.blood_overlay = GlobalVars.blood_overlays[S.type];
				}
				S.blood_overlay.color = this.basecolor;
				S.overlays.Add( S.blood_overlay );
				S.blood_color = this.basecolor;

				if ( !( S.blood_DNA != null ) ) {
					S.blood_DNA = new ByTable();
				}

				if ( this.blood_DNA != null ) {
					S.blood_DNA.Or( this.blood_DNA.Copy() );
				}
				((dynamic)perp).update_inv_shoes( 1 );
			} else {
				((dynamic)perp).track_blood = ( ( amount ??0) <= 0 ? 0 : ( ( amount ??0) >= Convert.ToDouble( ((dynamic)perp).track_blood ) ? Lang13.DoubleNullable( ((dynamic)perp).track_blood ) : amount ) );

				if ( !Lang13.Bool( ((dynamic)perp).feet_blood_DNA ) ) {
					((dynamic)perp).feet_blood_DNA = new ByTable();
				}

				if ( !( this.blood_DNA is ByTable ) ) {
					this.blood_DNA = new ByTable();
				} else {
					((dynamic)perp).feet_blood_DNA |= this.blood_DNA.Copy();
				}
				((dynamic)perp).feet_blood_color = this.basecolor;
			}
			amount--;
			return;
		}

		// Function from file: cleanable.dm
		public bool messcheck( dynamic M = null ) {
			return true;
		}

		// Function from file: cleanable.dm
		public virtual void dry(  ) {
			this.name = "dried " + this.name;
			this.desc = "It's dry and crusty. Someone is not doing their job.";
			this.color = GlobalFuncs.adjust_brightness( this.color, -50 );
			this.amount = 0;
			return;
		}

		// Function from file: cleanable.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Disease D = null;
			dynamic cult_round = null;
			dynamic T = null;

			GlobalVars.blood_list.Remove( this );

			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _a;
				
				D.f_cure( false );
				D.holder = null;
			}

			if ( this.counts_as_blood ) {
				cult_round = GlobalFuncs.find_active_mode( "cult" );

				if ( Lang13.Bool( cult_round ) ) {
					T = GlobalFuncs.get_turf( this );

					if ( Lang13.Bool( T ) && Convert.ToInt32( T.z ) == GlobalVars.map.zMainStation ) {
						cult_round.bloody_floors.Remove( T );
						((GameMode_Cult)cult_round).blood_check();
					}
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: cleanable.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Mop ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return 0;
		}

	}

}