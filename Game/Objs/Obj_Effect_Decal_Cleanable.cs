// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Decal_Cleanable : Obj_Effect_Decal {

		public ByTable random_icon_states = new ByTable();
		public string blood_state = "";
		public int bloodiness = 0;

		// Function from file: cleanable.dm
		public Obj_Effect_Decal_Cleanable ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Effect_Decal_Cleanable C = null;

			
			if ( this.random_icon_states != null && Lang13.Length( this.random_icon_states ) > 0 ) {
				this.icon_state = Rand13.PickFromTable( this.random_icon_states );
			}
			this.create_reagents( 300 );

			if ( this.loc != null && this.loc is Tile ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Effect_Decal_Cleanable) )) {
					C = _a;
					

					if ( C != this && C.type == this.type ) {
						this.replace_decal( C );
					}
				}
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: cleanable.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic H = null;
			Obj_Item_Clothing_Shoes S = null;
			int add_blood = 0;

			
			if ( O is Mob_Living_Carbon_Human ) {
				H = O;

				if ( Lang13.Bool( ((dynamic)H).shoes ) && Lang13.Bool( this.blood_state ) && this.bloodiness != 0 ) {
					S = ((dynamic)H).shoes;
					add_blood = 0;

					if ( this.bloodiness >= 100 ) {
						add_blood = 100;
					} else {
						add_blood = this.bloodiness;
					}
					this.bloodiness -= add_blood;
					S.bloody_shoes[this.blood_state] = Num13.MinInt( 100, Convert.ToInt32( S.bloody_shoes[this.blood_state] + add_blood ) );
					S.blood_state = this.blood_state;
					this.update_icon();
					((dynamic)H).update_inv_shoes();
				}
			}
			return null;
		}

		// Function from file: cleanable.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			
			if ( this.reagents != null ) {
				this.reagents.chem_temp += 30;
				this.reagents.handle_reactions();
			}
			base.fire_act( air, (object)(exposed_temperature), exposed_volume );
			return false;
		}

		// Function from file: cleanable.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			Reagent R = null;

			
			if ( this.reagents != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					R.on_ex_act();
				}
			}
			base.ex_act( severity, (object)(target) );
			return false;
		}

		// Function from file: cleanable.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			int hotness = 0;
			double added_heat = 0;

			
			if ( A is Obj_Item_Weapon_ReagentContainers_Glass || A is Obj_Item_Weapon_ReagentContainers_Food_Drinks ) {
				
				if ( this.reagents != null && Lang13.Bool( A.reagents ) ) {
					
					if ( !Lang13.Bool( this.reagents.total_volume ) ) {
						user.WriteMsg( "<span class='notice'>" + this + " isn't thick enough to scoop up!</span>" );
						return null;
					}

					if ( ( A.reagents.total_volume ??0) >= Convert.ToDouble( A.reagents.maximum_volume ) ) {
						user.WriteMsg( "<span class='notice'>" + A + " is full!</span>" );
						return null;
					}
					user.WriteMsg( "<span class='notice'>You scoop up " + this + " into " + A + "!</span>" );
					this.reagents.trans_to( A, this.reagents.total_volume );

					if ( !Lang13.Bool( this.reagents.total_volume ) ) {
						GlobalFuncs.qdel( this );
						return null;
					}
				}
			}

			if ( ((Obj_Item)A).is_hot() != 0 ) {
				
				if ( A is Obj_Item_Clothing_Mask_Cigarette ) {
					return null;
				} else {
					hotness = ((Obj_Item)A).is_hot();
					added_heat = hotness / 100;
					this.reagents.chem_temp = Num13.MinInt( Convert.ToInt32( this.reagents.chem_temp + added_heat ), hotness );
					this.reagents.handle_reactions();
					user.WriteMsg( "<span class='notice'>You heat " + this + " with " + A + "!</span>" );
				}
			}
			return null;
		}

		// Function from file: cleanable.dm
		public virtual int can_bloodcrawl_in(  ) {
			
			if ( this.blood_state != "oil" && this.blood_state != "no blood whatsoever" ) {
				return this.bloodiness;
			} else {
				return 0;
			}
		}

		// Function from file: cleanable.dm
		public virtual void replace_decal( Obj_Effect_Decal_Cleanable C = null ) {
			GlobalFuncs.qdel( C );
			return;
		}

	}

}