// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Photo : Obj_Item_Weapon {

		public Icon img = null;
		public string scribble = null;
		public bool blueprints = false;
		public string info = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "paper";
			this.w_class = 1;
			this.autoignition_temperature = 530;
			this.fire_fuel = 1;
			this.icon_state = "photo";
		}

		public Obj_Item_Weapon_Photo ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: photography.dm
		public void show( dynamic user = null ) {
			Interface13.CacheBrowseResource( user, this.img, "tmp_photo.png" );
			Interface13.Browse( user, "<html><head><title>" + this.name + "</title></head>" + "<body style='overflow:hidden;margin:0;text-align:center'>" + "<img src='tmp_photo.png' width='192' style='-ms-interpolation-mode:nearest-neighbor' />" + ( "" + ( Lang13.Bool( this.scribble ) ? "<br>Written on the back:<br><i>" + this.scribble + "</i>" : "" ) ) + "</body></html>", "window=book;size=192x" + ( Lang13.Bool( this.scribble ) ? 400 : 192 ) );

			if ( Lang13.Bool( this.info ) ) {
				GlobalFuncs.to_chat( user, this.info );
			}
			GlobalFuncs.onclose( user, "" + this.name );
			return;
		}

		// Function from file: photography.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			
			if ( this.Adjacent( user ) ) {
				this.show( user );
			} else {
				base.examine( (object)(user), size );
				GlobalFuncs.to_chat( user, "<span class='notice'>You can't make out the picture from here.</span>" );
			}
			return null;
		}

		// Function from file: photography.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string txt = null;

			
			if ( a is Obj_Item_Weapon_Pen || a is Obj_Item_Toy_Crayon ) {
				txt = GlobalFuncs.sanitize( Interface13.Input( b, "What would you like to write on the back?", "Photo Writing", null, null, InputType.Str ) );
				txt = String13.SubStr( txt, 1, 128 );

				if ( this.Adjacent( b ) && !Lang13.Bool( b.stat ) ) {
					this.scribble = txt;
				}
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: photography.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.show( user );
			return null;
		}

		// Function from file: photography.dm
		[Verb]
		[VerbInfo( name: "Rename photo", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void rename(  ) {
			string n_name = null;

			n_name = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "What would you like to label the photo?", "Photo Labelling", null, null, InputType.Str ) ), 1, 26 );

			if ( !Task13.User.isUnconscious() && this.Adjacent( Task13.User ) ) {
				this.name = "photo" + ( Lang13.Bool( n_name ) ? "- '" + n_name + "'" : null );
			}
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}