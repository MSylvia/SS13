// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Mask_Chemmask : Obj_Item_Clothing_Mask {

		public bool power = false;
		public dynamic tank_injection_rate = 10;
		public bool tank_has_injected = false;
		public ByTable beaker_injection_methods = new ByTable(new object [] { "Time-based", "Threshold-based" });
		public dynamic beaker_injection_method = "Threshold-based";
		public bool injection_method_chosen = false;
		public dynamic beaker_time_interval = 970;
		public dynamic beaker_injection_rate = 10;
		public dynamic beaker_threshold = 10;
		public dynamic beaker_threshold_reagent = "creatine";
		public bool beaker_has_injected_time = false;
		public bool firstalert_tank = false;
		public bool firstalert_beaker = false;
		public bool beakeractive = false;
		public bool tankactive = true;
		public int time_at_last_tank_inject = 0;
		public int time_at_last_beaker_inject = 0;
		public ByTable beaker_verbs_time = new ByTable(new object [] { typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_time_interval" ) });
		public ByTable beaker_verbs_threshold = new ByTable(new object [] { typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_threshold" ), typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_threshold_reagent" ) });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 264;
			this.w_class = 2;
			this.gas_transfer_coefficient = 0.01;
			this.permeability_coefficient = 0.01;
			this.species_fit = new ByTable(new object [] { "Vox" });
			this.inhand_states = new ByTable().Set( "left_hand", "icons/mob/in-hand/left/chempack.dmi" ).Set( "right_hand", "icons/mob/in-hand/right/chempack.dmi" );
			this.origin_tech = "biotech=5;materials=5;engineering=5;syndicate=5;combat=5";
			this.icon_state = "chemmask0";
		}

		// Function from file: chemmask.dm
		public Obj_Item_Clothing_Mask_Chemmask ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.processing_objects.Add( this );
			this.update_verbs();
			return;
		}

		// Function from file: chemmask.dm
		public override dynamic process(  ) {
			Ent_Static H = null;

			H = this.loc;

			if ( this.power ) {
				
				if ( !this.pack_check( H ) ) {
					return null;
				}

				if ( !this.mask_check( H ) ) {
					return null;
				}
				this.tank_volume_check( H );
				this.update_verbs();

				if ( Game13.time - this.time_at_last_tank_inject >= 970 ) {
					this.tank_has_injected = false;
				}

				if ( this.tankactive ) {
					
					if ( !this.tank_has_injected ) {
						this.inject( H );
						this.tank_has_injected = true;
						this.time_at_last_tank_inject = Game13.time;
					}
				}

				if ( Game13.time - this.time_at_last_beaker_inject >= Convert.ToDouble( this.beaker_time_interval ) ) {
					this.beaker_has_injected_time = false;
				}

				if ( this.has_beaker( H ) ) {
					
					if ( this.beakeractive ) {
						
						if ( this.beaker_injection_method == "Time-based" && !this.beaker_has_injected_time ) {
							this.beakerinject( H );
							this.beaker_has_injected_time = true;
							this.time_at_last_beaker_inject = Game13.time;
						} else if ( this.beaker_injection_method == "Threshold-based" ) {
							this.beakerinject( H );
						}
						this.beaker_volume_check( H );
					}
				}
			}
			return null;
		}

		// Function from file: chemmask.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			dynamic M = null;

			base.examine( (object)(user), size );

			if ( this.power ) {
				GlobalFuncs.to_chat( user, "The mask is active!" );

				if ( this.tankactive ) {
					GlobalFuncs.to_chat( user, "The mask is drawing from the main tank." );
				} else {
					GlobalFuncs.to_chat( user, "The mask is not drawing from the main tank." );
				}

				if ( this.beakeractive && this.has_beaker( user ) ) {
					GlobalFuncs.to_chat( user, "The mask is drawing from the auxiliary beaker." );
				} else if ( !this.beakeractive && this.has_beaker( user ) ) {
					GlobalFuncs.to_chat( user, "The mask is not drawing from the auxiliary beaker." );
				}
			} else {
				M = user;

				if ( M.wear_mask == this ) {
					GlobalFuncs.to_chat( user, "The mask is inactive." );

					if ( this.tankactive ) {
						GlobalFuncs.to_chat( user, "The mask is set to draw from the main tank." );
					} else {
						GlobalFuncs.to_chat( user, "The mask is not set to draw from the main tank." );
					}

					if ( this.beakeractive && this.has_beaker( user ) ) {
						GlobalFuncs.to_chat( user, "The mask is set to draw from the auxiliary beaker." );
					} else if ( !this.beakeractive && this.has_beaker( user ) ) {
						GlobalFuncs.to_chat( user, "The mask is not set to draw from the auxiliary beaker." );
					}
				}
			}
			return null;
		}

		// Function from file: chemmask.dm
		public void beakerinject( Ent_Static user = null ) {
			dynamic P = null;
			dynamic B = null;
			bool shouldinject = false;
			Reagent R1 = null;
			bool beakerhasreagent = false;
			bool userhasreagent = false;
			bool shouldnotinject = false;
			Reagent R = null;
			Reagent RU = null;
			double? T = null;

			P = ((dynamic)user).back;
			B = P.beaker;

			if ( this.beaker_injection_method == "Time-based" ) {
				((Reagents)B.reagents).trans_to( user, this.beaker_injection_rate );
			} else if ( this.beaker_injection_method == "Threshold-based" ) {
				shouldinject = false;
				R1 = null;
				beakerhasreagent = false;
				userhasreagent = false;
				shouldnotinject = false;

				foreach (dynamic _a in Lang13.Enumerate( B.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					

					if ( R.id == this.beaker_threshold_reagent ) {
						R1 = R;
						beakerhasreagent = true;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( user.reagents.reagent_list, typeof(Reagent) )) {
					RU = _b;
					

					if ( RU.id == this.beaker_threshold_reagent ) {
						userhasreagent = true;

						if ( ( RU.volume ??0) > Convert.ToDouble( this.beaker_threshold ) ) {
							shouldnotinject = true;
						}
					}

					if ( RU.id == this.beaker_threshold_reagent && ( RU.volume ??0) < Convert.ToDouble( this.beaker_threshold ) ) {
						shouldinject = true;
						userhasreagent = true;
					}
				}

				if ( shouldinject && R1 != null ) {
					
					if ( ( R1.volume ??0) < Convert.ToDouble( this.beaker_injection_rate ) ) {
						T = R1.volume;
						((Reagents)B.reagents).trans_id_to( user, R1.id, this.beaker_injection_rate );
						((Reagents)B.reagents).trans_to( user, this.beaker_injection_rate - T );
					} else {
						((Reagents)B.reagents).trans_id_to( user, R1.id, this.beaker_injection_rate );
					}
				} else if ( !userhasreagent && beakerhasreagent ) {
					((Reagents)B.reagents).trans_id_to( user, R1.id, this.beaker_injection_rate );
				} else if ( !beakerhasreagent && !shouldnotinject ) {
					((Reagents)B.reagents).trans_to( user, this.beaker_injection_rate );
				}
			}
			return;
		}

		// Function from file: chemmask.dm
		public void inject( Ent_Static user = null ) {
			dynamic P = null;
			Reagent R = null;
			dynamic custom_injection_rate = null;

			P = ((dynamic)user).back;

			foreach (dynamic _a in Lang13.Enumerate( P.reagents.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				custom_injection_rate = this.tank_injection_rate / ( 0.2 / ( R.custom_metabolism ??0) );

				if ( R.custom_metabolism == 0.21 ) {
					custom_injection_rate += 0.1;
				}

				if ( R.custom_metabolism == 0.05 ) {
					custom_injection_rate += R.custom_metabolism;
				}
				((Reagents)P.reagents).trans_id_to( user, R.id, custom_injection_rate );
			}
			return;
		}

		// Function from file: chemmask.dm
		public void mask_shutdown( Ent_Static user = null ) {
			this.power = false;
			this.icon_state = "chemmask0";
			((dynamic)user).update_inv_wear_mask();
			this.update_verbs();
			return;
		}

		// Function from file: chemmask.dm
		public void beaker_volume_check( Ent_Static user = null ) {
			dynamic P = null;
			dynamic B = null;

			P = ((dynamic)user).back;
			B = P.beaker;

			if ( Lang13.Bool( B.is_empty() ) && !this.firstalert_beaker ) {
				this.firstalert_beaker = true;
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/mecha/internaldmgalarm.ogg", 100, 1 );
				GlobalFuncs.to_chat( user, "<span class='warning'>The auxiliary beaker is empty!</span>" );
			} else if ( !Lang13.Bool( B.is_empty() ) ) {
				this.firstalert_beaker = false;
			}
			return;
		}

		// Function from file: chemmask.dm
		public bool has_beaker( dynamic user = null ) {
			Obj_Item_Weapon_Tank_Jetpack_Void P = null;

			
			if ( Lang13.Bool( user.back ) && user.back is Obj_Item_Weapon_ReagentContainers_Chempack ) {
				P = user.back;
				return !( ((dynamic)P).beaker == null );
			}
			return false;
		}

		// Function from file: chemmask.dm
		public void tank_volume_check( Ent_Static user = null ) {
			dynamic P = null;

			P = ((dynamic)user).back;

			if ( Lang13.Bool( P.is_empty() ) && !this.firstalert_tank && this.tankactive ) {
				this.firstalert_tank = true;
				GlobalFuncs.to_chat( user, "<span class='warning'>The chemical pack is empty!</span>" );
			} else if ( !Lang13.Bool( P.is_empty() ) ) {
				this.firstalert_tank = false;
			}
			return;
		}

		// Function from file: chemmask.dm
		public bool mask_check( Ent_Static user = null ) {
			Ent_Static M = null;

			M = user;

			if ( !( M != null && Lang13.Bool( ((dynamic)M).wear_mask ) && ((dynamic)M).wear_mask is Obj_Item_Clothing_Mask_Chemmask ) ) {
				this.mask_shutdown( user );
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " shuts off!</span>" ).ToString() );
				return false;
			} else if ( !( ((dynamic)M).wear_mask == this ) ) {
				this.mask_shutdown( user );
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " shuts off!</span>" ).ToString() );
				return false;
			} else {
				return true;
			}
			return false;
		}

		// Function from file: chemmask.dm
		public bool pack_check( Ent_Static user = null ) {
			Ent_Static M = null;

			M = user;

			if ( !( M != null && Lang13.Bool( ((dynamic)M).back ) && ((dynamic)M).back is Obj_Item_Weapon_ReagentContainers_Chempack ) ) {
				this.mask_shutdown( user );
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " shuts off!</span>" ).ToString() );
				return false;
			} else {
				return true;
			}
		}

		// Function from file: chemmask.dm
		public bool can_use_verbs( Mob user = null ) {
			Mob M = null;

			M = user;

			if ( M.stat == 2 ) {
				GlobalFuncs.to_chat( user, "You can't do that while you're dead!" );
				return false;
			} else if ( M.stat == 1 ) {
				GlobalFuncs.to_chat( user, "You must be conscious to do this!" );
				return false;
			} else if ( Lang13.Bool( ((dynamic)M).handcuffed ) ) {
				GlobalFuncs.to_chat( user, "You can't reach the controls while you're restrained!" );
				return false;
			} else {
				return true;
			}
			return false;
		}

		// Function from file: chemmask.dm
		public void update_verbs(  ) {
			Ent_Static H = null;

			
			if ( this.power ) {
				this.verbs.Add( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_pack_injection" ) );
			} else {
				this.verbs.Remove( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_pack_injection" ) );
			}

			if ( this.loc is Mob_Living_Carbon_Human ) {
				H = this.loc;
			} else {
				return;
			}

			if ( ((dynamic)H).back is Obj_Item_Weapon_ReagentContainers_Chempack ) {
				this.verbs.Add( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_tank_usage" ) );
			} else {
				this.verbs.Remove( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_tank_usage" ) );
			}

			if ( this.has_beaker( H ) ) {
				this.verbs.Add( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_usage" ) );
				this.verbs.Add( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_injection_method" ) );

				if ( this.injection_method_chosen ) {
					
					if ( this.beaker_injection_method == "Threshold-based" ) {
						this.verbs.Add( this.beaker_verbs_threshold );
						this.verbs.Add( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_injection_rate" ) );
						this.verbs.Remove( this.beaker_verbs_time );
					} else if ( this.beaker_injection_method == "Time-based" ) {
						this.verbs.Add( this.beaker_verbs_time );
						this.verbs.Add( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_injection_rate" ) );
						this.verbs.Remove( this.beaker_verbs_threshold );
					}
				} else {
					this.verbs.Remove( this.beaker_verbs_time );
					this.verbs.Remove( this.beaker_verbs_threshold );
					this.verbs.Remove( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_injection_rate" ) );
				}
			} else {
				this.verbs.Remove( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_usage" ) );
				this.verbs.Remove( typeof(Obj_Item_Clothing_Mask_Chemmask).GetMethod( "set_beaker_injection_method" ) );
				this.verbs.Remove( this.beaker_verbs_time );
				this.verbs.Remove( this.beaker_verbs_threshold );
			}
			return;
		}

		// Function from file: chemmask.dm
		public override dynamic equipped( dynamic user = null, dynamic slot = null ) {
			dynamic H = null;

			H = user;

			if ( H.wear_mask == this ) {
				this.update_verbs();
			}
			return null;
		}

		// Function from file: chemmask.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.processing_objects.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Set auxiliary beaker injection threshold", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_beaker_threshold(  ) {
			dynamic N = null;

			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}
			N = Interface13.Input( new Txt( "Set the minimum threshold of " ).item( this.beaker_threshold_reagent ).str( " in your body that must be reached to cause " ).the( this ).item().str( " to administer more chemicals:" ).ToString(), "" + this, null, null, null, InputType.Num | InputType.Null );

			if ( Lang13.Bool( N ) ) {
				this.beaker_threshold = N;
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Set auxiliary beaker injection threshold reagent", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_beaker_threshold_reagent(  ) {
			dynamic P = null;
			Obj_Item_Weapon_ReagentContainers B = null;
			ByTable beaker_threshold_reagents = null;
			dynamic N = null;

			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}
			P = Task13.User.back;
			B = P.beaker;
			beaker_threshold_reagents = B.get_reagent_ids();
			N = Interface13.Input( new Txt( "Set the reagent for which the minimum threshold must be reached to cause " ).the( this ).item().str( " to administer more chemicals from the auxiliary beaker:" ).ToString(), "" + this, null, null, beaker_threshold_reagents, InputType.Null | InputType.Any );

			if ( Lang13.Bool( N ) ) {
				this.beaker_threshold_reagent = N;
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Set auxiliary beaker injection time interval", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_beaker_time_interval(  ) {
			dynamic N = null;

			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}
			N = Interface13.Input( new Txt( "Set the time interval in seconds at which " ).the( this ).item().str( " will administer more chemicals from the auxiliary beaker:" ).ToString(), "" + this, null, null, null, InputType.Num | InputType.Null );

			if ( Lang13.Bool( N ) ) {
				this.beaker_time_interval = N * 10;
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Set auxiliary beaker injection rate", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_beaker_injection_rate(  ) {
			dynamic N = null;

			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}
			N = Interface13.Input( new Txt( "Set the amount of chemicals administered from the auxiliary beaker when " ).the( this ).item().str( " administers more chemicals:" ).ToString(), "" + this, null, null, null, InputType.Num | InputType.Null );

			if ( Lang13.Bool( N ) ) {
				this.beaker_injection_rate = N;
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Set auxiliary beaker injection method", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_beaker_injection_method(  ) {
			dynamic N = null;

			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}
			N = Interface13.Input( new Txt( "Set the method by which " ).the( this ).item().str( " determines when to administer more chemicals from the auxiliary beaker:" ).ToString(), "" + this, null, null, this.beaker_injection_methods, InputType.Null | InputType.Any );

			if ( Lang13.Bool( N ) ) {
				this.beaker_injection_method = N;
				this.injection_method_chosen = true;
				this.update_verbs();
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Toggle primary tank usage", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_tank_usage(  ) {
			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}

			if ( !this.tankactive ) {
				this.tankactive = true;
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You enable connection to the chemical pack's primary tank system.</span>" );
			} else {
				this.tankactive = false;
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You disable connection to the chemical pack's primary tank system.</span>" );
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Toggle auxiliary beaker usage", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_beaker_usage(  ) {
			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}

			if ( !this.beakeractive ) {
				this.beakeractive = true;
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You enable connection to the chemical pack's auxiliary beaker chamber.</span>" );
			} else {
				this.beakeractive = false;
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You disable connection to the chemical pack's auxiliary beaker chamber.</span>" );
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Set main tank injection rate", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void set_pack_injection(  ) {
			dynamic N = null;

			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}
			N = Interface13.Input( "Set the number of units of each reagent in the chemical pack to be injected every 100 seconds. The injection rates of some chemicals will be altered to account for different rates of metabolism. Going over 10u may cause overdosing with some chemicals:", "" + this, null, null, null, InputType.Num | InputType.Null );

			if ( Lang13.Bool( N ) ) {
				this.tank_injection_rate = N;
			}
			return;
		}

		// Function from file: chemmask.dm
		[Verb]
		[VerbInfo( name: "Toggle mask power", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void toggle_power(  ) {
			Mob M = null;
			dynamic P = null;

			
			if ( !this.can_use_verbs( Task13.User ) ) {
				return;
			}

			if ( !this.power ) {
				M = Task13.User;

				if ( M.back is Obj_Item_Weapon_ReagentContainers_Chempack ) {
					P = M.back;

					if ( Lang13.Bool( P.safety ) ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You activate " ).the( this ).item().str( ".</span>" ).ToString() );
						this.power = true;
						this.icon_state = "chemmask1";
						Task13.User.update_inv_wear_mask();
						this.update_verbs();
					} else {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>You must disable " ).the( P ).item().str( "'s safeties before you can activate " ).the( this ).item().str( "!</span>" ).ToString() );
					}
				} else {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>You need to be wearing a chemical pack before you can activate " ).the( this ).item().str( "!</span>" ).ToString() );
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You deactivate " ).the( this ).item().str( ".</span>" ).ToString() );
				this.mask_shutdown( Task13.User );
			}
			return;
		}

	}

}