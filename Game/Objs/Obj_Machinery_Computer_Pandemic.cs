// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Pandemic : Obj_Machinery_Computer {

		public string temphtml = "";
		public bool? wait = null;
		public dynamic beaker = null;
		public string targetMoveKey = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 20;
			this.light_color = "#6496FA";
			this.icon = "icons/obj/chemical.dmi";
			this.icon_state = "mixer0";
		}

		// Function from file: Chemistry-Machinery.dm
		public Obj_Machinery_Computer_Pandemic ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { new Obj_Item_Weapon_Circuitboard_Pandemic() });
			this.RefreshParts();
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic R = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			} else if ( a is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( ( this.stat & 3 ) != 0 ) {
					return null;
				}

				if ( Lang13.Bool( this.beaker ) ) {
					GlobalFuncs.to_chat( b, "A beaker is already loaded into the machine." );
					return null;
				}

				if ( !Lang13.Bool( b.drop_item( a, this ) ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>You can't let go of " ).the( a ).item().str( "!</span>" ).ToString() );
					return null;
				}
				this.beaker = a;

				if ( b.type == typeof(Mob_Living_Silicon_Robot) ) {
					R = b;
					((Mob_Living_Silicon_Robot)R).uneq_active();
					this.targetMoveKey = R.on_moved.Add( this, "user_moved" );
				}
				GlobalFuncs.to_chat( b, "You add the beaker to the machine!" );
				this.updateUsrDialog();
				this.icon_state = "mixer1";
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			Reagents R = null;
			Reagent_Blood Blood = null;
			Reagent_Blood B = null;
			ByTable vir = null;
			Disease D = null;
			dynamic disease_creation = null;
			Disease A = null;
			Disease A2 = null;
			ByTable english_symptoms = null;
			Symptom S = null;
			ByTable res = null;
			dynamic type = null;
			string disease_name = null;
			dynamic A3 = null;
			dynamic D2 = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "";

			if ( Lang13.Bool( this.temphtml ) ) {
				dat = new Txt().item( this.temphtml ).str( "<BR><BR><A href='?src=" ).Ref( this ).str( ";clear=1'>Main Menu</A>" ).ToString();
			} else if ( !Lang13.Bool( this.beaker ) ) {
				dat += new Txt( "Please insert beaker.<BR>\n			<A href='?src=" ).Ref( a ).str( ";mach_close=pandemic'>Close</A>" ).ToString();
			} else {
				R = this.beaker.reagents;
				Blood = null;

				foreach (dynamic _a in Lang13.Enumerate( R.reagent_list, typeof(Reagent_Blood) )) {
					B = _a;
					

					if ( B != null ) {
						Blood = B;
						break;
					}
				}

				if ( !Lang13.Bool( R.total_volume ) || !( R.reagent_list.len != 0 ) ) {
					dat += "The beaker is empty<BR>";
				} else if ( !( Blood != null ) ) {
					dat += "No blood sample found in beaker";
				} else if ( !Lang13.Bool( Blood.data ) ) {
					dat += "No blood data found in beaker.";
				} else {
					dat += "<h3>Blood sample data:</h3>\n				<b>Blood DNA:</b> " + ( Lang13.Bool( Blood.data["blood_DNA"] ) || Lang13.Bool( "none" ) ) + "<BR>\n				<b>Blood Type:</b> " + ( Lang13.Bool( Blood.data["blood_type"] ) || Lang13.Bool( "none" ) ) + "<BR>";

					if ( Lang13.Bool( Blood.data["viruses"] ) ) {
						vir = Blood.data["viruses"];

						if ( vir.len != 0 ) {
							
							foreach (dynamic _c in Lang13.Enumerate( Blood.data["viruses"], typeof(Disease) )) {
								D = _c;
								

								if ( !Lang13.Bool( D.hidden[2] ) ) {
									disease_creation = D.type;

									if ( D is Disease_Advance ) {
										A = D;
										D = GlobalVars.archive_diseases[((dynamic)A).GetDiseaseID()];
										disease_creation = ((dynamic)A).GetDiseaseID();

										if ( D.name == "Unknown" ) {
											dat += new Txt( "<b><a href='?src=" ).Ref( this ).str( ";name_disease=" ).item( ((dynamic)A).GetDiseaseID() ).str( "'>Name Disease</a></b><BR>" ).ToString();
										}
									}

									if ( !( D != null ) ) {
										Task13.Crash( "We weren't able to get the advance disease from the archive." );
									}
									dat += "<b>Disease Agent:</b> " + ( D != null ? new Txt().item( D.agent ).str( " - <A href='?src=" ).Ref( this ).str( ";create_virus_culture=" ).item( disease_creation ).str( "'>Create virus culture bottle</A>" ).ToString() : "none" ) + "<BR>\n								<b>Common name:</b> " + ( Lang13.Bool( D.name ) || Lang13.Bool( "none" ) ) + "<BR>\n								<b>Description: </b> " + ( Lang13.Bool( D.desc ) || Lang13.Bool( "none" ) ) + "<BR>\n								<b>Spread:</b> " + ( Lang13.Bool( D.spread ) || Lang13.Bool( "none" ) ) + "<BR>\n								<b>Possible cure:</b> " + ( Lang13.Bool( D.cure ) || Lang13.Bool( "none" ) ) + "<BR><BR>";

									if ( D is Disease_Advance ) {
										A2 = D;
										dat += "<b>Symptoms:</b> ";
										english_symptoms = new ByTable();

										foreach (dynamic _b in Lang13.Enumerate( ((dynamic)A2).symptoms, typeof(Symptom) )) {
											S = _b;
											
											english_symptoms.Add( S.name );
										}
										dat += GlobalFuncs.english_list( english_symptoms );
									}
								}
							}
						}
					}
					dat += "<BR><b>Contains antibodies to:</b> ";

					if ( Lang13.Bool( Blood.data["resistances"] ) ) {
						res = Blood.data["resistances"];

						if ( res.len != 0 ) {
							dat += "<ul>";

							foreach (dynamic _d in Lang13.Enumerate( Blood.data["resistances"] )) {
								type = _d;
								
								disease_name = "Unknown";

								if ( !( type is Type ) ) {
									A3 = GlobalVars.archive_diseases[type];

									if ( Lang13.Bool( A3 ) ) {
										disease_name = A3.name;
									}
								} else {
									D2 = Lang13.Call( type, 0, null );
									disease_name = D2.name;
								}
								dat += new Txt( "<li>" ).item( disease_name ).str( " - <A href='?src=" ).Ref( this ).str( ";create_vaccine=" ).item( type ).str( "'>Create vaccine bottle</A></li>" ).ToString();
							}
							dat += "</ul><BR>";
						} else {
							dat += "nothing<BR>";
						}
					} else {
						dat += "nothing<BR>";
					}
				}
				dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";eject=1'>Eject beaker</A>" ).item( ( Lang13.Bool( R.total_volume ) && R.reagent_list.len != 0 ? new Txt( "-- <A href='?src=" ).Ref( this ).str( ";empty_beaker=1'>Empty beaker</A>" ).ToString() : "" ) ).str( "<BR>\n			<A href='?src=" ).Ref( a ).str( ";mach_close=pandemic'>Close</A>" ).ToString();
			}
			Interface13.Browse( a, "<TITLE>" + this.name + "</TITLE><BR>" + dat, "window=pandemic;size=575x400" );
			GlobalFuncs.onclose( a, "pandemic" );
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Obj_Item_Weapon_ReagentContainers_Glass_Bottle B = null;
			string path = null;
			dynamic vaccine_type = null;
			dynamic D = null;
			dynamic R = null;
			Reagent_Blood Blood = null;
			Reagent_Blood L = null;
			dynamic res = null;
			Obj_Item_Weapon_ReagentContainers_Glass_Bottle B2 = null;
			Type type = null;
			dynamic D2 = null;
			Base_Data A = null;
			ByTable data = null;
			string name = null;
			bool norange = false;
			dynamic new_name = null;
			dynamic id = null;
			Disease_Advance A2 = null;
			Disease_Advance AD = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() ) {
				return null;
			}

			if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( !Lang13.Bool( this.beaker ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["create_vaccine"] ) ) {
				
				if ( !( this.wait == true ) ) {
					B = new Obj_Item_Weapon_ReagentContainers_Glass_Bottle( this.loc );

					if ( B != null ) {
						path = href_list["create_vaccine"];
						vaccine_type = Lang13.FindClass( path );
						D = null;

						if ( !Lang13.Bool( vaccine_type ) ) {
							D = GlobalVars.archive_diseases[path];
							vaccine_type = path;
						} else if ( Lang13.Bool( GlobalVars.diseases.Contains( vaccine_type ) ) ) {
							D = Lang13.Call( vaccine_type, 0, null );
						}

						if ( Lang13.Bool( D ) ) {
							B.name = "" + D.name + " vaccine bottle";
							((Reagents)B.reagents).add_reagent( "vaccine", 15, vaccine_type );
							this.wait = true;
							R = this.beaker.reagents;
							Blood = null;

							foreach (dynamic _a in Lang13.Enumerate( R.reagent_list, typeof(Reagent_Blood) )) {
								L = _a;
								

								if ( L != null ) {
									Blood = L;
									break;
								}
							}
							res = Blood.data["resistances"];
							Task13.Schedule( res.len * 200, (Task13.Closure)(() => {
								this.wait = null;
								return;
							}));
						}
					}
				} else {
					this.temphtml = "The replicator is not ready yet.";
				}
				this.updateUsrDialog();
				return null;
			} else if ( Lang13.Bool( href_list["create_virus_culture"] ) ) {
				
				if ( !( this.wait == true ) ) {
					B2 = new Obj_Item_Weapon_ReagentContainers_Glass_Bottle( this.loc );
					B2.icon_state = "bottle3";
					type = Lang13.FindClass( href_list["create_virus_culture"] );
					D2 = null;

					if ( !( type != null ) ) {
						A = GlobalVars.archive_diseases[href_list["create_virus_culture"]];

						if ( A != null ) {
							D2 = Lang13.Call( A.type, 0, A );
						}
					} else if ( Lang13.Bool( GlobalVars.diseases.Contains( type ) ) ) {
						D2 = Lang13.Call( type, 0, null );
					}
					data = new ByTable().Set( "viruses", new ByTable(new object [] { D2 }) );
					name = GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Name:", "Name the culture", D2.name, null, InputType.Any ) );

					if ( !Lang13.Bool( name ) || name == " " ) {
						name = D2.name;
					}
					B2.name = "" + name + " culture bottle";
					B2.desc = "A small bottle. Contains " + D2.agent + " culture in synthblood medium.";
					((Reagents)B2.reagents).add_reagent( "blood", 20, data );
					this.updateUsrDialog();
					this.wait = true;
					Task13.Schedule( 1000, (Task13.Closure)(() => {
						this.wait = null;
						return;
					}));
				} else {
					this.temphtml = "The replicator is not ready yet.";
				}
				this.updateUsrDialog();
				return null;
			} else if ( Lang13.Bool( href_list["empty_beaker"] ) ) {
				((Reagents)this.beaker.reagents).clear_reagents();
				this.updateUsrDialog();
				return null;
			} else if ( Lang13.Bool( href_list["eject"] ) ) {
				this.detach();
				return null;
			} else if ( Lang13.Bool( href_list["clear"] ) ) {
				this.temphtml = "";
				this.updateUsrDialog();
				return null;
			} else if ( Lang13.Bool( href_list["name_disease"] ) ) {
				norange = Task13.User.mutations != null && Task13.User.mutations.len != 0 && Task13.User.mutations.Contains( 1 );
				new_name = GlobalFuncs.stripped_input( Task13.User, "Name the Disease", "New Name", "", 26 );

				if ( ( this.stat & 3 ) != 0 ) {
					return null;
				}

				if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() ) {
					return null;
				}

				if ( !GlobalFuncs.in_range( this, Task13.User ) && !norange ) {
					return null;
				}
				id = href_list["name_disease"];

				if ( Lang13.Bool( GlobalVars.archive_diseases[id] ) ) {
					A2 = GlobalVars.archive_diseases[id];
					A2.AssignName( new_name );

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.active_diseases, typeof(Disease_Advance) )) {
						AD = _b;
						
						AD.Refresh();
					}
				}
				this.updateUsrDialog();
			} else {
				Interface13.Browse( Task13.User, null, "window=pandemic" );
				this.updateUsrDialog();
				return null;
			}
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic power_change(  ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = ( Lang13.Bool( this.beaker ) ? "mixer1_b" : "mixer0_b" );
			} else if ( Lang13.Bool( this.powered() ) ) {
				this.icon_state = ( Lang13.Bool( this.beaker ) ? "mixer1" : "mixer0" );
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.icon_state = ( Lang13.Bool( this.beaker ) ? "mixer1_nopower" : "mixer0_nopower" );
					this.stat |= 2;
					return;
				}));
			}
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override void set_broken(  ) {
			this.icon_state = ( Lang13.Bool( this.beaker ) ? "mixer1_b" : "mixer0_b" );
			this.stat |= 1;
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public void detach(  ) {
			Ent_Static R = null;

			this.beaker.loc = this.loc;

			if ( this.beaker is Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Large_Cyborg ) {
				R = this.beaker.holder.loc;

				if ( ((dynamic)R).module_state_1 == this.beaker || ((dynamic)R).module_state_2 == this.beaker || ((dynamic)R).module_state_3 == this.beaker ) {
					this.beaker.loc = R;
				} else {
					this.beaker.loc = this.beaker.holder;
				}
			}
			this.beaker = null;
			this.icon_state = "mixer0";
			this.updateUsrDialog();
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public void user_moved( dynamic args = null ) {
			dynamic E = null;
			dynamic T = null;

			E = args["event"];

			if ( !Lang13.Bool( this.targetMoveKey ) ) {
				E.handlers.Remove( new Txt().Ref( this ).str( ":user_moved" ).ToString() );
				return;
			}
			T = args["loc"];

			if ( !this.Adjacent( T ) ) {
				
				if ( Lang13.Bool( E.holder ) ) {
					E.holder.on_moved.Remove( this.targetMoveKey );
				}
				this.detach();
			}
			return;
		}

	}

}