// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_BatteryPort : Obj_Machinery_Power {

		public Obj_Machinery_Power_Battery_Portable connected = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 6;
			this.starting_terminal = true;
			this.icon_state = "battery_port";
		}

		// Function from file: battery_port.dm
		public Obj_Machinery_Power_BatteryPort ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_BatteryPort(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			this.connect_to_network();
			return;
		}

		// Function from file: battery_port.dm
		public void disconnect_battery(  ) {
			
			if ( this.connected != null ) {
				this.connected.connected_to = null;
				this.connected.update_icon();
				this.connected = null;
				this.update_icon();
			}
			return;
		}

		// Function from file: battery_port.dm
		public void connect_battery( Obj_Machinery_Power_Battery_Portable portable = null ) {
			
			if ( portable != null ) {
				this.connected = portable;
				portable.connected_to = this;
				this.connected.update_icon();
			}
			return;
		}

		// Function from file: battery_port.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( this.connected != null ) {
				GlobalFuncs.to_chat( user, new Txt( "You can't disconnect " ).the( this ).item().str( " while it has " ).the( this.connected ).item().str( " attached." ).ToString() );
				return -1;
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: battery_port.dm
		public override dynamic surplus(  ) {
			
			if ( this.terminal != null ) {
				return this.terminal.surplus();
			}
			return 0;
		}

		// Function from file: battery_port.dm
		public override bool add_load( dynamic amount = null ) {
			
			if ( this.terminal != null && Lang13.Bool( this.terminal.get_powernet() ) ) {
				this.terminal.powernet.load += amount;
				return true;
			}
			return false;
		}

		// Function from file: battery_port.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( this.connected != null && this.connected.charging == true ) {
				this.overlays.Add( new Image( "icons/obj/power.dmi", "bp-c" ) );
			} else if ( this.connected != null ) {
				
				if ( Convert.ToDouble( this.connected.charge ) > 0 ) {
					this.overlays.Add( new Image( "icons/obj/power.dmi", "bp-o" ) );
				} else {
					this.overlays.Add( new Image( "icons/obj/power.dmi", "bp-d" ) );
				}
			}
			return null;
		}

		// Function from file: battery_port.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic CC = null;

			
			if ( a is Obj_Item_Stack_CableCoil && !( this.terminal != null ) ) {
				CC = a;

				if ( Convert.ToDouble( CC.amount ) < 10 ) {
					GlobalFuncs.to_chat( b, "<span class=\"warning\">You need 10 length cable coil to make a terminal.</span>" );
					return null;
				}

				if ( this.make_terminal( b ) ) {
					CC.use( 10 );
					this.terminal.connect_to_network();
					((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " has added cables to the SMES!</span>", "You added cables the SMES." );
					this.stat = 0;
					return 1;
				}
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: battery_port.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.disconnect_battery();
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}