// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Debug_Screamer : Obj_Item_Debug {

		public bool on = true;
		public string lang_id = "Galactic Common";
		public ByTable things_to_say = new ByTable(new object [] { "FUCK", "SHIT", "PISS", "BALLS", "DICK", "CUNT", "ASS", "PISS" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "candle1";
			this.w_class = 1;
			this.icon = "icons/obj/candle.dmi";
			this.icon_state = "candle1";
		}

		// Function from file: debug.dm
		public Obj_Item_Debug_Screamer ( dynamic _loc = null ) : base( (object)(_loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: debug.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.on ) {
				this.visible_message( "<span class='notice'>" + a + " extinguishes " + this + ".</span>" );
				this.on = false;
				this.update_icon();
				this.say( "" + a + " TURNS ME OFF" );
			}
			return null;
		}

		// Function from file: debug.dm
		public override dynamic process(  ) {
			
			if ( !this.on ) {
				return null;
			}
			this.say( Rand13.PickFromTable( this.things_to_say ) );
			return null;
		}

		// Function from file: debug.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			base.say( (object)(message), (string)(GlobalVars.all_languages[this.lang_id]) );
			return false;
		}

		// Function from file: debug.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( !this.on && Lang13.Bool( ((Obj)a).is_hot() ) ) {
				this.visible_message( "<span class='notice'>" + b + " lights " + this + " with " + a + ".</span>" );
				this.say( "" + b + " TURNS ME ON WITH THEIR " + a );
				this.on = true;
				this.update_icon();
			}
			return null;
		}

		// Function from file: debug.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.on ) {
				GlobalVars.processing_objects.Add( this );
			} else {
				GlobalVars.processing_objects.Remove( this );
			}
			this.icon_state = "candle1" + ( this.on ? "_lit" : "" );
			return null;
		}

	}

}