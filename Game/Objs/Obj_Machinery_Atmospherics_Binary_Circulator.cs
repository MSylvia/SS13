// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Binary_Circulator : Obj_Machinery_Atmospherics_Binary {

		public Obj_Machinery_Power_Generator linked_generator = null;
		public double kinetic_efficiency = 0.31;
		public double volume_ratio = 0.2;
		public double recent_moles_transferred = 0;
		public int last_heat_capacity = 0;
		public bool last_temperature = false;
		public double last_pressure_delta = 0;
		public int last_worldtime_transfer = 0;
		public double last_stored_energy_transferred = 0;
		public int volume_capacity_used = 0;
		public double stored_energy = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.use_power = 0;
			this.machine_flags = 24;
			this.icon = "icons/obj/pipes.dmi";
			this.icon_state = "circ-off";
		}

		// Function from file: circulator.dm
		public Obj_Machinery_Atmospherics_Binary_Circulator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.air1.volume = 1000;
			return;
		}

		// Function from file: circulator.dm
		public override int wrenchAnchor( dynamic user = null ) {
			int _default = 0;

			int gendir = 0;
			Obj_Machinery_Power_Generator pot_gen = null;

			_default = base.wrenchAnchor( (object)(user) );

			if ( Lang13.Bool( this.anchored ) ) {
				
				if ( ( this.dir & 3 ) != 0 ) {
					this.initialize_directions = 3;
				} else if ( ( this.dir & 12 ) != 0 ) {
					this.initialize_directions = 12;
				}
				this.initialize();
				this.build_network();

				if ( this.node1 != null ) {
					this.node1.initialize();
					this.node1.build_network();
				}

				if ( this.node2 != null ) {
					this.node2.initialize();
					this.node2.build_network();
				}
				gendir = Num13.Rotate( this.dir, -90 );

				foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this, gendir ), typeof(Obj_Machinery_Power_Generator) )) {
					pot_gen = _a;
					
					pot_gen.reconnect();
				}
			} else {
				
				if ( this.node1 != null ) {
					this.node1.disconnect( this );

					if ( this.network1 != null ) {
						GlobalFuncs.returnToPool( this.network1 );
					}
				}

				if ( this.node2 != null ) {
					this.node2.disconnect( this );

					if ( this.network2 != null ) {
						GlobalFuncs.returnToPool( this.network2 );
					}
				}
				this.node1 = null;
				this.node2 = null;
				this.linked_generator.reconnect();
			}
			return _default;
		}

		// Function from file: circulator.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( !( this.linked_generator != null ) || ( this.linked_generator.stat & 3 ) != 0 ) {
				this.icon_state = "circ-p";
			} else if ( this.last_pressure_delta > 0 && this.recent_moles_transferred > 0 ) {
				
				if ( this.last_pressure_delta > 506.625 ) {
					this.icon_state = "circ-run";
				} else {
					this.icon_state = "circ-slow";
				}
			} else {
				this.icon_state = "circ-off";
			}
			return true;
		}

		// Function from file: circulator.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			_default = base.process();

			if ( this.last_worldtime_transfer < Game13.time - 50 ) {
				this.recent_moles_transferred = 0;
				this.update_icon();
			}
			return _default;
		}

		// Function from file: circulator.dm
		public double return_stored_energy(  ) {
			this.last_stored_energy_transferred = this.stored_energy;
			this.stored_energy = 0;
			return this.last_stored_energy_transferred;
		}

		// Function from file: circulator.dm
		public dynamic return_transfer_air(  ) {
			dynamic removed = null;
			dynamic input_starting_pressure = null;
			dynamic output_starting_pressure = null;

			
			if ( !Lang13.Bool( this.anchored ) || ( this.stat & 1 ) != 0 || !( this.network1 != null ) ) {
				return null;
			}
			input_starting_pressure = this.air1.return_pressure();
			output_starting_pressure = this.air2.return_pressure();
			this.last_pressure_delta = Num13.MaxInt( Convert.ToInt32( input_starting_pressure - output_starting_pressure - 5 ), 0 );

			if ( ( this.air1.temperature ??0) > 0 && this.last_pressure_delta > 5 ) {
				this.recent_moles_transferred = this.last_pressure_delta * ( this.air1.volume ??0) / ( ( this.air1.temperature ??0) * 8.314 ) / 3;
				this.volume_capacity_used = Num13.MinInt( ((int)( this.last_pressure_delta * ( this.air1.volume ??0) / 3 / Convert.ToDouble( input_starting_pressure * this.air1.volume ) )), 1 );
				this.stored_energy += Num13.MinInt( ((int)( this.last_pressure_delta * ( this.air1.volume ??0) )), Convert.ToInt32( input_starting_pressure * this.air1.volume ) ) * ( 1 - Math.Pow( this.volume_ratio, 0.661 ) ) * this.kinetic_efficiency * 1.4992504119873047;
				removed = this.air1.remove( this.recent_moles_transferred );

				if ( Lang13.Bool( removed ) ) {
					this.last_heat_capacity = ((GasMixture)removed).heat_capacity();
					this.last_temperature = Lang13.Bool( removed.temperature );
					((dynamic)this.network1).update = 1;
					this.last_worldtime_transfer = Game13.time;
				}
			} else {
				this.recent_moles_transferred = 0;
			}
			this.update_icon();
			return removed;
		}

		// Function from file: circulator.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			dynamic _default = null;

			_default = base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "Its outlet port is to the " + GlobalFuncs.dir2text( this.dir ) + "." );
			return _default;
		}

		// Function from file: circulator.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			_default = base.Destroy( (object)(brokenup) );

			if ( this.linked_generator != null ) {
				this.linked_generator.reconnect();
			}
			return _default;
		}

		// Function from file: circulator.dm
		[Verb]
		[VerbInfo( name: "Rotate Circulator (Counterclockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_anticlockwise(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			return;
		}

		// Function from file: circulator.dm
		[Verb]
		[VerbInfo( name: "Rotate Circulator (Clockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_clockwise(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return;
		}

	}

}