// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Centrifuge : Obj_Structure {

		public ByTable cans = new ByTable();
		public dynamic beaker = null;
		public string targetMoveKey = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/watercloset.dmi";
			this.icon_state = "toilet11";
		}

		public Obj_Structure_Centrifuge ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: Chemistry-Machinery.dm
		public override void AltClick( Mob user = null ) {
			
			if ( this.Adjacent( Task13.User ) ) {
				this.__CallVerb("Flush" );
				return;
			}
			base.AltClick( user ); return;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Item O = null;

			this.add_fingerprint( a );

			if ( this.cans.len != 0 || Lang13.Bool( this.beaker ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.cans, typeof(Obj_Item) )) {
					O = _a;
					
					O.loc = this.loc;
					this.cans.Remove( O );
				}

				if ( Lang13.Bool( this.beaker ) ) {
					this.detach();
				}
				GlobalFuncs.to_chat( a, "<span class='notice'>You remove everything from the centrifuge.</span>" );
			} else {
				GlobalFuncs.to_chat( a, "<span class='warning'>There is nothing to eject!</span>" );
			}
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public void detach(  ) {
			Ent_Static R = null;

			
			if ( Lang13.Bool( this.beaker ) ) {
				((Ent_Dynamic)this.beaker).forceMove( this.loc );

				if ( this.beaker is Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Large_Cyborg ) {
					R = this.beaker.holder.loc;

					if ( ((dynamic)R).module_state_1 == this.beaker || ((dynamic)R).module_state_2 == this.beaker || ((dynamic)R).module_state_3 == this.beaker ) {
						this.beaker.loc = R;
					} else {
						this.beaker.loc = this.beaker.holder;
					}
				}
				this.beaker = null;
				return;
			}
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public void user_moved( dynamic args = null ) {
			dynamic E = null;
			dynamic T = null;

			E = args["event"];

			if ( !Lang13.Bool( this.targetMoveKey ) ) {
				E.handlers.Remove( new Txt().Ref( this ).str( ":user_moved" ).ToString() );
				return;
			}
			T = args["loc"];

			if ( !this.Adjacent( T ) ) {
				
				if ( Lang13.Bool( E.holder ) ) {
					E.holder.on_moved.Remove( this.targetMoveKey );
				}
				this.detach();
			}
			return;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Structure_Toilet T = null;
			dynamic R = null;

			
			if ( a is Obj_Item_Weapon_Crowbar ) {
				T = new Obj_Structure_Toilet( this.loc );
				T.open = 1;
				T.cistern = true;
				T.dir = this.dir;
				T.update_icon();
				new Obj_Item_Stack_Rods( GlobalFuncs.get_turf( this ), 2 );
				GlobalFuncs.to_chat( b, "<span class='notice'>You pry out the rods, destroying the filter.</span>" );
				GlobalFuncs.qdel( this );
			}

			if ( Lang13.Bool( ((Ent_Static)a).is_open_container() ) ) {
				
				if ( !Lang13.Bool( a.reagents.total_volume ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.cans.Add( a );
						GlobalFuncs.to_chat( b, "<span class='notice'>You add a passive container. It now contains " + this.cans.len + ".</span>" );
					}
				} else if ( !Lang13.Bool( this.beaker ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert an active container.</span>" );
						this.beaker = a;

						if ( b.type == typeof(Mob_Living_Silicon_Robot) ) {
							R = b;
							((Mob_Living_Silicon_Robot)R).uneq_active();
							this.targetMoveKey = R.on_moved.Add( this, "user_moved" );
						}
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>There is already an active container.</span>" );
				}
				return null;
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "<span class='info'>It contains " + this.cans.len + " empty containers" + ( Lang13.Bool( this.beaker ) ? " and an active container!" : "." ) + "</span>" );
			return null;
		}

		// Function from file: Chemistry-Machinery.dm
		[Verb]
		[VerbInfo( name: "Flush", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void flush(  ) {
			Ent_Static C = null;
			dynamic R = null;

			
			if ( !Task13.User.incapacitated() && this.Adjacent( Task13.User ) && Lang13.Bool( Task13.User.dexterity_check() ) ) {
				return;
			}

			if ( !( this.cans != null ) || !Lang13.Bool( this.beaker ) ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " needs an active container and multiple passive containers to work.</span>" ).ToString() );
				return;
			}
			this.add_fingerprint( Task13.User );
			GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " groans as it spits out containers.</span>" ).ToString() );

			while (this.cans.len > 0 && this.beaker.reagents.reagent_list.len > 0) {
				C = this.cans[1];
				R = this.beaker.reagents.reagent_list[1];
				((Reagents)this.beaker.reagents).trans_id_to( C, R.id, 50 );
				C.loc = this.loc;
				this.cans.Remove( C );
			}

			if ( !( this.cans.len != 0 ) && this.beaker.reagents.reagent_list.len != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>With no remaining containers, the rest of the concoction swirls down the drain...</span>" );
				((Reagents)this.beaker.reagents).clear_reagents();
			}

			if ( !( this.beaker.reagents.reagent_list.len != 0 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The now-empty active container plops out.</span>" );
				this.detach();
				return;
			}
			return;
		}

	}

}