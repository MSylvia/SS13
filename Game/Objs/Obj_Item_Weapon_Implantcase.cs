// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implantcase : Obj_Item_Weapon {

		public Obj_Item_Weapon_Implant imp = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "implantcase";
			this.throw_speed = 1;
			this.throw_range = 5;
			this.w_class = 1;
			this.icon_state = "implantcase-0";
		}

		public Obj_Item_Weapon_Implantcase ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: implantcase.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic t = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_Pen ) {
				t = Interface13.Input( b, "What would you like the label to be?", "" + this.name, null, null, InputType.Str );

				if ( ((Mob)b).get_active_hand() != a ) {
					return null;
				}

				if ( !this.Adjacent( b ) || Lang13.Bool( b.stat ) ) {
					return null;
				}
				t = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );

				if ( Lang13.Bool( t ) ) {
					this.name = "Glass Case- '" + t + "'";
				} else {
					this.name = "Glass Case";
				}
			} else if ( a is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				
				if ( !( this.imp != null ) ) {
					return null;
				}

				if ( !this.imp.allow_reagents ) {
					return null;
				}

				if ( ( this.imp.reagents.total_volume ??0) >= Convert.ToDouble( this.imp.reagents.maximum_volume ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>" + this + " is full.</span>" );
				} else {
					Task13.Schedule( 5, (Task13.Closure)(() => {
						((Reagents)a.reagents).trans_to( this.imp, 5 );
						GlobalFuncs.to_chat( b, "<span class='notice'>You inject 5 units of the solution. The syringe now contains " + a.reagents.total_volume + " units.</span>" );
						return;
					}));
				}
			} else if ( a is Obj_Item_Weapon_Implanter ) {
				
				if ( Lang13.Bool( a.imp ) ) {
					
					if ( this.imp != null || Lang13.Bool( a.imp.implanted ) ) {
						return null;
					}
					a.imp.loc = this;
					this.imp = a.imp;
					a.imp = null;
					this.update();
					a.update();
				} else {
					
					if ( this.imp != null ) {
						
						if ( Lang13.Bool( a.imp ) ) {
							return null;
						}
						this.imp.loc = a;
						a.imp = this.imp;
						this.imp = null;
						this.update();
					}
					a.update();
				}
			}
			return null;
		}

		// Function from file: implantcase.dm
		public void update(  ) {
			
			if ( this.imp != null ) {
				this.icon_state = "implantcase-" + this.imp._color;
			} else {
				this.icon_state = "implantcase-0";
			}
			return;
		}

		// Function from file: implantcase.dm
		[VerbInfo( name: "update" )]
		public void _internal_update(  ) {
			return;
		}

	}

}