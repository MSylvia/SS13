// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_AntiprojArmorBooster : Obj_Item_MechaParts_MechaEquipment {

		public double deflect_coeff = 1.41;
		public double damage_coeff = 0.8;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "materials=4";
			this.equip_cooldown = 10;
			this.energy_drain = 50;
			this.range = 0;
			this.icon_state = "mecha_abooster_proj";
		}

		public Obj_Item_MechaParts_MechaEquipment_AntiprojArmorBooster ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tools.dm
		public void dynhitby( Ent_Static A = null ) {
			Ent_Static M = null;
			Ent_Static O = null;

			
			if ( !this.action_checks( A ) ) {
				this.chassis.dynhitby( A ); return;
			}

			if ( Rand13.PercentChance( Convert.ToInt32( this.chassis.deflect_chance * this.deflect_coeff ) ) || A is Mob_Living || A is Obj_Item_MechaParts_MechaTracking ) {
				this.chassis.occupant_message( "<span class='notice'>The " + A + " bounces off the armor.</span>" );
				this.chassis.visible_message( "The " + A + " bounces off the " + this.chassis + " armor" );
				this.chassis.log_append_to_last( "Armor saved." );

				if ( A is Mob_Living ) {
					M = A;
					((dynamic)M).take_organ_damage( 10 );
				}
			} else if ( A is Obj ) {
				O = A;

				if ( Lang13.Bool( ((dynamic)O).throwforce ) ) {
					this.chassis.take_damage( Num13.Floor( Convert.ToDouble( ((dynamic)O).throwforce * this.damage_coeff ) ) );
					this.chassis.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				}
			}
			this.set_ready_state( false );
			this.chassis.use_power( this.energy_drain );
			this.do_after_cooldown();
			return;
		}

		// Function from file: tools.dm
		public void dynbulletdamage( Obj_Item_Projectile Proj = null ) {
			
			if ( !this.action_checks( this ) ) {
				this.chassis.dynbulletdamage( Proj ); return;
			}

			if ( Rand13.PercentChance( Convert.ToInt32( this.chassis.deflect_chance * this.deflect_coeff ) ) ) {
				this.chassis.occupant_message( "<span class='notice'>The armor deflects incoming projectile.</span>" );
				this.chassis.visible_message( "The " + this.chassis.name + " armor deflects the projectile" );
				this.chassis.log_append_to_last( "Armor saved." );
			} else {
				this.chassis.take_damage( Num13.Floor( Proj.damage * this.damage_coeff ), Proj.flag );
				this.chassis.check_for_internal_damage( new ByTable(new object [] { 1, 2, 8, 16 }) );
				Proj.on_hit( this.chassis );
			}
			this.set_ready_state( false );
			this.chassis.use_power( this.energy_drain );
			this.do_after_cooldown();
			return;
		}

		// Function from file: tools.dm
		public override string get_equip_info(  ) {
			
			if ( !( this.chassis != null ) ) {
				return null;
			}
			return "<span style=\"color:" + ( this.equip_ready ? "#0f0" : "#f00" ) + ";\">*</span>&nbsp;" + this.name;
		}

		// Function from file: tools.dm
		public override void detach( dynamic moveto = null ) {
			this.chassis.proc_res["dynbulletdamage"] = null;
			this.chassis.proc_res["dynhitby"] = null;
			base.detach( (object)(moveto) );
			return;
		}

		// Function from file: tools.dm
		public override void attach( Obj_Mecha M = null ) {
			base.attach( M );
			this.chassis.proc_res["dynbulletdamage"] = this;
			this.chassis.proc_res["dynhitby"] = this;
			return;
		}

		// Function from file: tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( !( M is Obj_Mecha_Combat_Honker ) ) {
					
					if ( !Lang13.Bool( M.proc_res["dynbulletdamage"] ) && !Lang13.Bool( M.proc_res["dynhitby"] ) ) {
						return true;
					}
				}
			}
			return false;
		}

	}

}