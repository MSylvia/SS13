// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_DriverButton : Obj_Machinery {

		public string id_tag = "default";
		public bool active = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 2;
			this.active_power_usage = 4;
			this.ghost_read = false;
			this.icon = "icons/obj/objects.dmi";
			this.icon_state = "launcherbtt";
		}

		// Function from file: buttons.dm
		public Obj_Machinery_DriverButton ( dynamic loc = null, int? w_dir = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.machine_flags |= 128;

			switch ((int?)( w_dir )) {
				case 1:
					this.pixel_y = 25;
					break;
				case 2:
					this.pixel_y = -25;
					break;
				case 4:
					this.pixel_x = 25;
					break;
				case 8:
					this.pixel_x = -25;
					break;
			}
			return;
		}

		// Function from file: door_control.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			base.change_area( (object)(oldarea), (object)(newarea) );
			this.name = GlobalFuncs.replacetext( this.name, oldarea, newarea );
			return;
		}

		// Function from file: door_control.dm
		public void launch_sequence(  ) {
			Obj_Machinery_Door_Poddoor M = null;
			Obj_Machinery_MassDriver M2 = null;
			Obj_Machinery_Door_Poddoor M3 = null;

			this.active = true;
			this.icon_state = "launcheract";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.poddoors, typeof(Obj_Machinery_Door_Poddoor) )) {
				M = _a;
				

				if ( M.id_tag == this.id_tag ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						M.open();
						return;
					}));
				}
			}
			Task13.Sleep( 20 );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mass_drivers, typeof(Obj_Machinery_MassDriver) )) {
				M2 = _b;
				

				if ( M2.id_tag == this.id_tag ) {
					M2.drive();
				}
			}
			Task13.Sleep( 50 );

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.poddoors, typeof(Obj_Machinery_Door_Poddoor) )) {
				M3 = _c;
				

				if ( M3.id_tag == this.id_tag ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						M3.close();
						return;
						return;
					}));
				}
			}
			this.icon_state = "launcherbtt";
			this.active = false;
			return;
		}

		// Function from file: door_control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( Task13.User );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.active ) {
				return null;
			}
			this.add_fingerprint( a );
			this.f_use_power( 5 );
			this.launch_sequence();
			return null;
		}

		// Function from file: door_control.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return "\n	<ul>\n	<li>" + this.format_tag( "ID Tag", "id_tag" ) + "</li>\n	</ul>";
		}

		// Function from file: door_control.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( a is Obj_Item_Device_DetectiveScanner ) {
				return _default;
			}

			if ( a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 30 ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You detach " ).the( this ).item().str( " from the wall.</span>" ).ToString() );
					new Obj_Item_Mounted_Frame_DriverButton( GlobalFuncs.get_turf( this ) );
					GlobalFuncs.qdel( this );
				}
				return 1;
			}
			return this.attack_hand( b );
		}

		// Function from file: door_control.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: door_control.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

	}

}