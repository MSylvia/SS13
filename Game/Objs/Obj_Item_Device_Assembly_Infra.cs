// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Infra : Obj_Item_Device_Assembly {

		public bool on = false;
		public bool visible = false;
		public Obj_Effect_Beam_Infrared beam = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.short_name = "IR emitter";
			this.starting_materials = new ByTable().Set( "$iron", 1000 ).Set( "$glass", 500 );
			this.origin_tech = "magnets=2";
			this.wires = 2;
			this.secured = false;
			this.accessible_values = new ByTable().Set( "Visible", "visible;number" ).Set( "On", "on;number" );
			this.icon_state = "infrared";
		}

		// Function from file: infrared.dm
		public Obj_Item_Device_Assembly_Infra ( dynamic loc = null ) : base( (object)(loc) ) {
			Lang13.Delete( this );
			Task13.Source = null;
			return;
		}

		// Function from file: infrared.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			base.Topic( href, href_list, (object)(hclient) );

			if ( !Task13.User.canmove || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this.loc, Task13.User ) ) {
				Interface13.Browse( Task13.User, null, "window=infra" );
				GlobalFuncs.onclose( Task13.User, "infra" );
				return null;
			}

			if ( Lang13.Bool( href_list["state"] ) ) {
				this.on = !this.on;
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["visible"] ) ) {
				this.visible = !this.visible;

				if ( this.beam != null ) {
					this.beam.set_visible( this.visible );
				}
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=infra" );
				return null;
			}

			if ( Task13.User != null ) {
				this.attack_self( Task13.User );
			}
			return null;
		}

		// Function from file: infrared.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			
			if ( !this.secured ) {
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "<TT><B>Infrared Laser</B>\n<B>Status</B>: " + ( this.on ? new Txt( "<A href='?src=" ).Ref( this ).str( ";state=0'>On</A>" ).ToString() : new Txt( "<A href='?src=" ).Ref( this ).str( ";state=1'>Off</A>" ).ToString() ) + "<BR>\n<B>Visibility</B>: " + ( this.visible ? new Txt( "<A href='?src=" ).Ref( this ).str( ";visible=0'>Visible</A>" ).ToString() : new Txt( "<A href='?src=" ).Ref( this ).str( ";visible=1'>Invisible</A>" ).ToString() ) + "<BR>\n</TT>";
			dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>\n		<BR><BR><A href='?src=" ).Ref( this ).str( ";close=1'>Close</A>" ).ToString();
			Interface13.Browse( user, dat, "window=infra" );
			GlobalFuncs.onclose( user, "infra" );
			return null;
		}

		// Function from file: infrared.dm
		public bool trigger_beam(  ) {
			
			if ( !this.secured || !this.on || this.cooldown > 0 ) {
				return false;
			}
			this.pulse( false );

			if ( !( this.holder != null ) ) {
				this.visible_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString() );
			}
			this.cooldown = 2;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.process_cooldown();
				return;
			}));
			return false;
		}

		// Function from file: infrared.dm
		public override bool holder_movement(  ) {
			
			if ( !( this.holder != null ) ) {
				return false;
			}
			GlobalFuncs.qdel( this.beam );
			return true;
		}

		// Function from file: infrared.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			int t = 0;

			t = this.dir;
			base.Move( (object)(NewLoc), Dir, step_x, step_y );
			this.dir = t;
			GlobalFuncs.qdel( this.beam );
			return false;
		}

		// Function from file: infrared.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			GlobalFuncs.qdel( this.beam );
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: infrared.dm
		public override dynamic process(  ) {
			dynamic T = null;

			return 26;

			if ( !this.on && this.beam != null ) {
				GlobalFuncs.qdel( this.beam );
				return null;
			}

			if ( this.beam != null || !this.secured ) {
				return null;
			}
			T = null;

			if ( this.loc is Tile ) {
				T = GlobalFuncs.get_turf( this );
			} else if ( this.holder != null ) {
				
				if ( this.holder.loc is Tile ) {
					T = this.holder.loc;
				} else if ( this.holder.loc.loc is Tile ) {
					T = this.holder.loc.loc;
				}
			} else if ( this.loc is Obj_Item_Weapon_Grenade && this.loc.loc is Tile ) {
				T = this.loc.loc;
			}

			if ( Lang13.Bool( T ) ) {
				
				if ( !( this.beam != null ) ) {
					this.beam = new Obj_Effect_Beam_Infrared( T );
				}
				this.beam.visible = this.visible;
				this.beam.emit( this );
			}
			return null;
		}

		// Function from file: infrared.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;
			this.attached_overlays = new ByTable();

			if ( this.on ) {
				this.overlays.Add( "infrared_on" );
				this.attached_overlays.Add( "infrared_on" );
			}

			if ( this.holder != null ) {
				this.holder.update_icon();
			}
			return null;
		}

		// Function from file: infrared.dm
		public override bool toggle_secure(  ) {
			this.secured = !this.secured;

			if ( this.secured ) {
				GlobalVars.processing_objects.Add( this );
			} else {
				this.on = false;

				if ( this.beam != null ) {
					GlobalFuncs.qdel( this.beam );
				}
				GlobalVars.processing_objects.Remove( this );
			}
			this.update_icon();
			return this.secured;
		}

		// Function from file: infrared.dm
		public override bool activate(  ) {
			
			if ( !base.activate() ) {
				return false;
			}
			this.on = !this.on;
			this.update_icon();
			return true;
		}

		// Function from file: infrared.dm
		[Verb]
		[VerbInfo( name: "Rotate Infrared Laser", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void rotate(  ) {
			this.dir = Num13.Rotate( this.dir, 90 );
			return;
		}

	}

}