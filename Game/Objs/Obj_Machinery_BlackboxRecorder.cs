// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_BlackboxRecorder : Obj_Machinery {

		public ByTable messages = new ByTable();
		public ByTable messages_admin = new ByTable();
		public ByTable msg_common = new ByTable();
		public ByTable msg_science = new ByTable();
		public ByTable msg_command = new ByTable();
		public ByTable msg_medical = new ByTable();
		public ByTable msg_engineering = new ByTable();
		public ByTable msg_security = new ByTable();
		public ByTable msg_deathsquad = new ByTable();
		public ByTable msg_ert = new ByTable();
		public ByTable msg_syndicate = new ByTable();
		public ByTable msg_service = new ByTable();
		public ByTable msg_cargo = new ByTable();
		public ByTable feedback = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 10;
			this.active_power_usage = 100;
			this.icon_state = "blackbox";
		}

		// Function from file: message_server.dm
		public Obj_Machinery_BlackboxRecorder ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.blackbox != null ) {
				
				if ( GlobalVars.blackbox is Obj_Machinery_BlackboxRecorder ) {
					GlobalFuncs.qdel( this );
				}
			}
			GlobalVars.blackbox = this;
			return;
		}

		// Function from file: message_server.dm
		public void save_all_data_to_sql(  ) {
			int watch = 0;
			dynamic round_id = null;
			int nqueries = 0;
			DBQuery query = null;
			string sql = null;
			int ninserts = 0;
			FeedbackVariable FV = null;
			DBQuery query_insert = null;

			
			if ( !( this.feedback != null ) ) {
				return;
			}
			watch = GlobalFuncs.start_watch();
			GlobalFuncs.log_startup_progress( "Storing Black Box data..." );
			this.round_end_data_gathering();
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			nqueries = 0;
			query = GlobalVars.dbcon.NewQuery( "SELECT MAX(round_id) AS round_id FROM erro_feedback" );
			query.Execute();
			nqueries++;

			while (query.NextRow()) {
				round_id = query.item[1];
			}

			if ( !Lang13.Bool( Lang13.IsNumber( round_id ) ) ) {
				round_id = String13.ParseNumber( round_id );
			}
			round_id++;
			sql = "INSERT INTO erro_feedback VALUES ";
			ninserts = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.feedback, typeof(FeedbackVariable) )) {
				FV = _a;
				

				if ( ninserts > 0 ) {
					sql += ",";
				}
				ninserts++;
				sql += "(null, Now(), " + round_id + ", \"" + FV.get_variable() + "\", " + FV.get_value() + ", \"" + FV.get_details() + "\")";
			}
			query_insert = GlobalVars.dbcon.NewQuery( sql );
			query_insert.Execute();
			nqueries++;
			GlobalFuncs.log_startup_progress( "  Wrote Black Box data with " + nqueries + " queries in " + GlobalFuncs.stop_watch( watch ) + "s." );
			return;
		}

		// Function from file: message_server.dm
		public void round_end_data_gathering(  ) {
			int pda_msg_amt = 0;
			int rc_msg_amt = 0;
			Obj_Machinery_MessageServer MS = null;

			pda_msg_amt = 0;
			rc_msg_amt = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_MessageServer) )) {
				MS = _a;
				

				if ( MS.pda_msgs.len > pda_msg_amt ) {
					pda_msg_amt = MS.pda_msgs.len;
				}

				if ( MS.rc_msgs.len > rc_msg_amt ) {
					rc_msg_amt = MS.rc_msgs.len;
				}
			}
			GlobalFuncs.feedback_set_details( "radio_usage", "" );
			GlobalFuncs.feedback_add_details( "radio_usage", "COM-" + this.msg_common.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "SCI-" + this.msg_science.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "HEA-" + this.msg_command.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "MED-" + this.msg_medical.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "ENG-" + this.msg_engineering.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "SEC-" + this.msg_security.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "DTH-" + this.msg_deathsquad.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "ERT-" + this.msg_ert.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "SYN-" + this.msg_syndicate.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "SER-" + this.msg_service.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "CAR-" + this.msg_cargo.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "OTH-" + this.messages.len );
			GlobalFuncs.feedback_add_details( "radio_usage", "PDA-" + pda_msg_amt );
			GlobalFuncs.feedback_add_details( "radio_usage", "RC-" + rc_msg_amt );
			GlobalFuncs.feedback_set_details( "round_end", "" + String13.FormatTime( Game13.realtime, null ) );
			return;
		}

		// Function from file: message_server.dm
		public ByTable get_round_feedback(  ) {
			return this.feedback;
		}

		// Function from file: message_server.dm
		public FeedbackVariable find_feedback_datum( dynamic variable = null ) {
			FeedbackVariable FV = null;
			FeedbackVariable FV2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.feedback, typeof(FeedbackVariable) )) {
				FV = _a;
				

				if ( FV.get_variable() == variable ) {
					return FV;
				}
			}
			FV2 = new FeedbackVariable( variable );
			this.feedback.Add( FV2 );
			return FV2;
		}

		// Function from file: message_server.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Tile T = null;
			Obj_Machinery_BlackboxRecorder BR = null;

			T = Map13.GetTile( 1, 1, 2 );

			if ( T != null ) {
				GlobalVars.blackbox = null;
				BR = new Obj_Machinery_BlackboxRecorder( T );
				BR.msg_common = this.msg_common;
				BR.msg_science = this.msg_science;
				BR.msg_command = this.msg_command;
				BR.msg_medical = this.msg_medical;
				BR.msg_engineering = this.msg_engineering;
				BR.msg_security = this.msg_security;
				BR.msg_deathsquad = this.msg_deathsquad;
				BR.msg_ert = this.msg_ert;
				BR.msg_syndicate = this.msg_syndicate;
				BR.msg_service = this.msg_service;
				BR.msg_cargo = this.msg_cargo;
				BR.feedback = this.feedback;
				BR.messages = this.messages;
				BR.messages_admin = this.messages_admin;

				if ( GlobalVars.blackbox != BR ) {
					GlobalVars.blackbox = BR;
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}