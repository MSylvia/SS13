// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Twohanded_Shockpaddles : Obj_Item_Weapon_Twohanded {

		public double? revivecost = 1000;
		public bool cooldown = false;
		public bool busy = false;
		public dynamic defib = null;
		public bool req_defib = true;
		public bool combat = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "defibpaddles";
			this.throwforce = 6;
			this.w_class = 4;
			this.flags = 2;
			this.icon_state = "defibpaddles";
		}

		// Function from file: defib.dm
		public Obj_Item_Weapon_Twohanded_Shockpaddles ( dynamic mainunit = null ) : base( (object)(mainunit) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.check_defib_exists( mainunit, this ) && this.req_defib ) {
				this.defib = mainunit;
				this.loc = this.defib;
				this.busy = false;
				this.update_icon();
			}
			return;
		}

		// Function from file: defib.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			double halfwaycritdeath = 0;
			dynamic H = null;
			dynamic T = null;
			dynamic HU = null;
			int tplus = 0;
			int tlimit = 0;
			int tloss = 0;
			dynamic total_burn = null;
			dynamic total_brute = null;
			Obj_Item carried_item = null;
			string failed = null;
			dynamic BR = null;
			dynamic overall_damage = null;
			dynamic mobhealth = null;

			halfwaycritdeath = ( ( GlobalVars.config.health_threshold_crit ??0) + ( GlobalVars.config.health_threshold_dead ??0) ) / 2;

			if ( this.busy ) {
				return false;
			}

			if ( this.req_defib && !Lang13.Bool( this.defib.powered ) ) {
				((Ent_Static)user).visible_message( "<span class='notice'>" + this.defib + " beeps: Unit is unpowered.</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_failed.ogg", 50, 0 );
				return false;
			}

			if ( !this.wielded ) {
				
				if ( user is Mob_Living_Silicon_Robot ) {
					user.WriteMsg( "<span class='warning'>You must activate the paddles in your active module before you can use them on someone!</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>You need to wield the paddles in both hands before you can use them on someone!</span>" );
				}
				return false;
			}

			if ( this.cooldown ) {
				
				if ( this.req_defib ) {
					user.WriteMsg( "<span class='warning'>" + this.defib + " is recharging!</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>" + this + " are recharging!</span>" );
				}
				return false;
			}

			if ( !( M is Mob_Living_Carbon_Human ) ) {
				
				if ( this.req_defib ) {
					user.WriteMsg( "<span class='warning'>The instructions on " + this.defib + " don't mention how to revive that...</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>You aren't sure how to revive that...</span>" );
				}
				return false;
			} else {
				H = M;

				if ( user.a_intent == "disarm" ) {
					
					if ( this.req_defib && Lang13.Bool( this.defib.safety ) ) {
						return false;
					}

					if ( !this.req_defib && !this.combat ) {
						return false;
					}
					this.busy = true;
					((Ent_Static)H).visible_message( "<span class='danger'>" + user + " has touched " + H.name + " with " + this + "!</span>", "<span class='userdanger'>" + user + " has touched " + H.name + " with " + this + "!</span>" );
					((Mob_Living)H).adjustStaminaLoss( 50 );
					((Mob)H).Weaken( 5 );
					((Mob_Living)H).updatehealth();
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_zap.ogg", 50, 1, -1 );
					((Mob)H).emote( "gasp" );
					GlobalFuncs.add_logs( user, M, "stunned", this );

					if ( this.req_defib ) {
						((Obj_Item_Weapon_Defibrillator)this.defib).deductcharge( this.revivecost );
						this.cooldown = true;
					}
					this.busy = false;
					this.update_icon();

					if ( this.req_defib ) {
						((Obj_Item_Weapon_Defibrillator)this.defib).cooldowncheck( user );
					} else {
						this.recharge( 60 );
					}
					return false;
				}

				if ( user.zone_selected == "chest" ) {
					
					if ( user.a_intent == "harm" ) {
						
						if ( this.req_defib && Lang13.Bool( this.defib.safety ) ) {
							return false;
						}

						if ( !this.req_defib && !this.combat ) {
							return false;
						}
						((Ent_Static)user).visible_message( "<span class='warning'>" + user + " begins to place " + this + " on " + M.name + "'s chest.</span>", "<span class='warning'>You overcharge the paddles and begin to place them onto " + M + "'s chest...</span>" );
						this.busy = true;
						this.update_icon();

						if ( GlobalFuncs.do_after( user, 30, null, M ) ) {
							((Ent_Static)user).visible_message( "<span class='notice'>" + user + " places " + this + " on " + M.name + "'s chest.</span>", "<span class='warning'>You place " + this + " on " + M.name + "'s chest and begin to charge them.</span>" );
							T = GlobalFuncs.get_turf( this.defib );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_charge.ogg", 50, 0 );

							if ( this.req_defib ) {
								((Ent_Static)T).audible_message( new Txt( "<span class='warning'>" ).The( this.defib ).item().str( " lets out an urgent beep and lets out a steadily rising hum...</span>" ).ToString() );
							} else {
								((Ent_Static)user).audible_message( "<span class='warning'>" + this + " let out an urgent beep.</span>" );
							}

							if ( GlobalFuncs.do_after( user, 30, null, M ) ) {
								
								if ( !Lang13.Bool( M ) ) {
									this.busy = false;
									this.update_icon();
									return false;
								}

								if ( Lang13.Bool( M ) && Convert.ToInt32( M.stat ) == 2 ) {
									user.WriteMsg( "<span class='warning'>" + M + " is dead.</span>" );
									GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_failed.ogg", 50, 0 );
									this.busy = false;
									this.update_icon();
									return false;
								}
								((Ent_Static)user).visible_message( new Txt( "<span class='boldannounce'><i>" ).item( user ).str( " shocks " ).item( M ).str( " with " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>You shock " ).item( M ).str( " with " ).the( this ).item().str( "!</span>" ).ToString() );
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_zap.ogg", 100, 1, -1 );
								GlobalFuncs.playsound( this.loc, "sound/weapons/Egloves.ogg", 100, 1, -1 );
								HU = M;
								((Mob)M).emote( "scream" );

								if ( !HU.heart_attack ) {
									HU.heart_attack = true;

									if ( !Lang13.Bool( HU.stat ) ) {
										((Ent_Static)HU).visible_message( "<span class='warning'>" + M + " thrashes wildly, clutching at their chest!</span>", "<span class='userdanger'>You feel a horrible agony in your chest!</span>" );
									}
								}
								HU.apply_damage( 50, "fire", "chest" );
								GlobalFuncs.add_logs( user, M, "overloaded the heart of", this.defib );
								((Mob)M).Weaken( 5 );
								((Mob)M).Jitter( 100 );

								if ( this.req_defib ) {
									((Obj_Item_Weapon_Defibrillator)this.defib).deductcharge( this.revivecost );
									this.cooldown = true;
								}
								this.busy = false;
								this.update_icon();

								if ( !this.req_defib ) {
									this.recharge( 60 );
								}

								if ( this.req_defib && ((Obj_Item_Weapon_Defibrillator)this.defib).cooldowncheck( user ) != null ) {
									return false;
								}
							}
						}
						this.busy = false;
						this.update_icon();
						return false;
					}

					if ( !Lang13.Bool( H.suiciding ) && !Lang13.Bool( H.disabilities & 128 ) ) {
						((Mob)H).notify_ghost_cloning( "Your heart is being defibrillated. Re-enter your corpse if you want to be revived!", null, this );
					}
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " begins to place " + this + " on " + M.name + "'s chest.</span>", "<span class='warning'>You begin to place " + this + " on " + M.name + "'s chest...</span>" );
					this.busy = true;
					this.update_icon();

					if ( GlobalFuncs.do_after( user, 30, null, M ) ) {
						((Ent_Static)user).visible_message( "<span class='notice'>" + user + " places " + this + " on " + M.name + "'s chest.</span>", "<span class='warning'>You place " + this + " on " + M.name + "'s chest.</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_charge.ogg", 50, 0 );
						tplus = Game13.time - H.timeofdeath;
						tlimit = 6000;
						tloss = 3000;
						total_burn = 0;
						total_brute = 0;

						if ( GlobalFuncs.do_after( user, 20, null, M ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( H.contents, typeof(Obj_Item) )) {
								carried_item = _a;
								

								if ( carried_item is Obj_Item_Clothing_Suit_Space ) {
									
									if ( !this.combat && !this.req_defib || this.req_defib && !Lang13.Bool( this.defib.combat ) ) {
										((Ent_Static)user).audible_message( "<span class='warning'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " buzzes: Patient's chest is obscured. Operation aborted.</span>" );
										GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_failed.ogg", 50, 0 );
										this.busy = false;
										this.update_icon();
										return false;
									}
								}
							}

							if ( Convert.ToInt32( H.stat ) == 2 ) {
								((Ent_Static)M).visible_message( "<span class='warning'>" + M + "'s body convulses a bit." );
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "bodyfall", 50, 1 );
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_zap.ogg", 50, 1, -1 );
								total_brute = ((Mob_Living)H).getBruteLoss();
								total_burn = ((Mob_Living)H).getFireLoss();
								failed = null;

								if ( Lang13.Bool( H.suiciding ) || Lang13.Bool( H.disabilities & 128 ) ) {
									failed = "<span class='warning'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " buzzes: Resuscitation failed - Recovery of patient impossible. Further attempts futile.</span>";
								} else if ( tplus > tlimit || !Lang13.Bool( ((Mob)H).getorgan( typeof(Obj_Item_Organ_Internal_Heart) ) ) ) {
									failed = "<span class='warning'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " buzzes: Resuscitation failed - Heart tissue damage beyond point of no return. Further attempts futile.</span>";
								} else if ( Convert.ToDouble( total_burn ) >= 180 || Convert.ToDouble( total_brute ) >= 180 ) {
									failed = "<span class='warning'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " buzzes: Resuscitation failed - Severe tissue damage makes recovery of patient impossible via defibrillator. Further attempts futile.</span>";
								} else if ( ((Mob)H).get_ghost() != null ) {
									failed = "<span class='warning'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " buzzes: Resuscitation failed - No activity in patient's brain. Further attempts may be successful.</span>";
								} else {
									BR = ((Mob)H).getorgan( typeof(Obj_Item_Organ_Internal_Brain) );

									if ( !Lang13.Bool( BR ) || BR.damaged_brain ) {
										failed = "<span class='warning'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " buzzes: Resuscitation failed - Patient's brain is missing or damaged beyond point of no return. Further attempts futile.</span>";
									}
								}

								if ( Lang13.Bool( failed ) ) {
									((Ent_Static)user).visible_message( failed );
									GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_failed.ogg", 50, 0 );
								} else {
									
									if ( Convert.ToDouble( H.health ) > halfwaycritdeath ) {
										((Mob_Living)H).adjustOxyLoss( H.health - halfwaycritdeath, false );
									} else {
										overall_damage = total_brute + total_burn + ((Mob_Living)H).getToxLoss() + ((Mob_Living)H).getOxyLoss();
										mobhealth = H.health;
										((Mob_Living)H).adjustOxyLoss( ( mobhealth - halfwaycritdeath ) * ( ((Mob_Living)H).getOxyLoss() / overall_damage ), false );
										((Mob_Living)H).adjustToxLoss( ( mobhealth - halfwaycritdeath ) * ( ((Mob_Living)H).getToxLoss() / overall_damage ), false );
										((Mob_Living)H).adjustFireLoss( ( mobhealth - halfwaycritdeath ) * ( total_burn / overall_damage ), false );
										((Mob_Living)H).adjustBruteLoss( ( mobhealth - halfwaycritdeath ) * ( total_brute / overall_damage ), false );
									}
									((Ent_Static)user).visible_message( "<span class='notice'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " pings: Resuscitation successful.</span>" );
									GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_success.ogg", 50, 0 );
									H.stat = 1;
									((Mob_Living)H).updatehealth();
									H.update_sight();
									((Mob)H).reload_fullscreen();
									GlobalVars.dead_mob_list.Remove( H );
									GlobalVars.living_mob_list.Or( new ByTable(new object [] { H }) );
									((Mob)H).emote( "gasp" );

									if ( tplus > tloss ) {
										((Mob_Living)H).setBrainLoss( Num13.MaxInt( 0, Num13.MinInt( 99, ((int)( ( tlimit - tplus ) / tlimit * 100 )) ) ) );
									}
									GlobalFuncs.add_logs( user, M, "revived", this.defib );
								}

								if ( this.req_defib ) {
									((Obj_Item_Weapon_Defibrillator)this.defib).deductcharge( this.revivecost );
									this.cooldown = true;
								}
								this.update_icon();

								if ( this.req_defib ) {
									((Obj_Item_Weapon_Defibrillator)this.defib).cooldowncheck( user );
								} else {
									this.recharge( 60 );
								}
							} else if ( H.heart_attack ) {
								H.heart_attack = false;
								((Ent_Static)user).visible_message( "<span class='notice'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " pings: Patient's heart is now beating again.</span>" );
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_zap.ogg", 50, 1, -1 );
							} else {
								((Ent_Static)user).visible_message( "<span class='warning'>" + ( this.req_defib ? "" + this.defib : "" + this ) + " buzzes: Patient is not in a valid state. Operation aborted.</span>" );
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_failed.ogg", 50, 0 );
							}
						}
					}
					this.busy = false;
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='warning'>You need to target your patient's chest with " + this + "!</span>" );
					return false;
				}
			}
			return false;
		}

		// Function from file: defib.dm
		public override bool dropped( dynamic user = null ) {
			dynamic O = null;

			
			if ( !this.req_defib ) {
				return base.dropped( (object)(user) );
			}

			if ( Lang13.Bool( user ) ) {
				O = ((Mob)user).get_inactive_hand();

				if ( O is Obj_Item_Weapon_Twohanded ) {
					((Obj_Item_Weapon_Twohanded)O).unwield();
				}
				user.WriteMsg( "<span class='notice'>The paddles snap back into the main unit.</span>" );
				this.defib.on = 0;
				this.loc = this.defib;
				this.defib.update_icon();
			}
			this.unwield( user ); return false;
		}

		// Function from file: defib.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " is putting the live paddles on " ).his_her_its_their().str( " chest! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );

			if ( this.req_defib ) {
				((Obj_Item_Weapon_Defibrillator)this.defib).deductcharge( this.revivecost );
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_zap.ogg", 50, 1, -1 );
			return 8;
		}

		// Function from file: defib.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "defibpaddles" + this.wielded;
			this.item_state = "defibpaddles" + this.wielded;

			if ( this.cooldown ) {
				this.icon_state = "defibpaddles" + this.wielded + "_cooldown";
			}
			return false;
		}

		// Function from file: defib.dm
		public bool check_defib_exists( dynamic mainunit = null, Obj M = null, Obj_Item O = null ) {
			
			if ( !this.req_defib ) {
				return true;
			}

			if ( !Lang13.Bool( mainunit ) || !( mainunit is Obj_Item_Weapon_Defibrillator ) ) {
				((Mob)M).unEquip( O );
				GlobalFuncs.qdel( O );
				return false;
			} else {
				return true;
			}
		}

		// Function from file: defib.dm
		public void recharge( int time = 0 ) {
			dynamic T = null;

			
			if ( this.req_defib || !( time != 0 ) ) {
				return;
			}
			this.cooldown = true;
			this.update_icon();
			Task13.Sleep( time );
			T = GlobalFuncs.get_turf( this );
			((Ent_Static)T).audible_message( "<span class='notice'>" + this + " beeps: Unit is recharged.</span>" );
			GlobalFuncs.playsound( T, "sound/machines/defib_ready.ogg", 50, 0 );
			this.cooldown = false;
			this.update_icon();
			return;
		}

	}

}