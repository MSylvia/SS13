// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Prisoner : Obj_Machinery_Computer {

		public bool id = false;
		public dynamic temp = null;
		public bool status = false;
		public int timeleft = 60;
		public bool stop = false;
		public bool screen = false;
		public dynamic inserted_id = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "explosive";
			this.icon_keyboard = "security_key";
			this.req_access = new ByTable(new object [] { 2 });
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Prisoner);
		}

		public Obj_Machinery_Computer_Prisoner ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: prisoner.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic I = null;
			int num = 0;
			dynamic I2 = null;
			dynamic I3 = null;
			dynamic I4 = null;
			string warning = null;
			dynamic I5 = null;
			dynamic R = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile || Task13.User is Mob_Living_Silicon ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["id"] ) ) {
					
					if ( href_list["id"] == "insert" && !( this.inserted_id is Obj_Item_Weapon_Card_Id_Prisoner ) ) {
						I = Task13.User.get_active_hand();

						if ( I is Obj_Item_Weapon_Card_Id_Prisoner ) {
							
							if ( !Task13.User.drop_item() ) {
								return null;
							}
							I.loc = this;
							this.inserted_id = I;
						} else {
							Task13.User.WriteMsg( "<span class='danger'>No valid ID.</span>" );
						}
					} else if ( this.inserted_id is Obj_Item_Weapon_Card_Id_Prisoner ) {
						
						dynamic _a = href_list["id"]; // Was a switch-case, sorry for the mess.
						if ( _a=="eject" ) {
							this.inserted_id.loc = GlobalFuncs.get_turf( this );
							this.inserted_id.__CallVerb("Pick up" );
							this.inserted_id = null;
						} else if ( _a=="reset" ) {
							this.inserted_id.points = 0;
						} else if ( _a=="setgoal" ) {
							num = Num13.Floor( Convert.ToDouble( Interface13.Input( Task13.User, "Choose prisoner's goal:", "Input an Integer", null, null, InputType.Num | InputType.Null ) ) );

							if ( num >= 0 ) {
								num = Num13.MinInt( num, 1000 );
								this.inserted_id.goal = num;
							}
						}
					}
				} else if ( Lang13.Bool( href_list["inject1"] ) ) {
					I2 = Lang13.FindObj( href_list["inject1"] );

					if ( Lang13.Bool( I2 ) ) {
						I2.activate( 1 );
					}
				} else if ( Lang13.Bool( href_list["inject5"] ) ) {
					I3 = Lang13.FindObj( href_list["inject5"] );

					if ( Lang13.Bool( I3 ) ) {
						I3.activate( 5 );
					}
				} else if ( Lang13.Bool( href_list["inject10"] ) ) {
					I4 = Lang13.FindObj( href_list["inject10"] );

					if ( Lang13.Bool( I4 ) ) {
						I4.activate( 10 );
					}
				} else if ( Lang13.Bool( href_list["lock"] ) ) {
					
					if ( this.allowed( Task13.User ) ) {
						this.screen = !this.screen;
					} else {
						Task13.User.WriteMsg( "Unauthorized Access." );
					}
				} else if ( Lang13.Bool( href_list["warn"] ) ) {
					warning = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Message:", "Enter your message here!", "", null, InputType.Any ) ), 1, 1024 );

					if ( !Lang13.Bool( warning ) ) {
						return null;
					}
					I5 = Lang13.FindObj( href_list["warn"] );

					if ( Lang13.Bool( I5 ) && Lang13.Bool( I5.imp_in ) ) {
						R = I5.imp_in;
						R.WriteMsg( "<span class='italics'>You hear a voice in your head saying: '" + warning + "'</span>" );
						GlobalFuncs.log_say( "" + Task13.User + "/" + Task13.User.ckey + " sent an implant message to " + R + "/" + R.ckey + ": '" + warning + "'" );
					}
				}
				this.add_fingerprint( Task13.User );
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: prisoner.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( !Lang13.Bool( base.process( (object)(seconds) ) ) ) {
				this.updateDialog();
			}
			return null;
		}

		// Function from file: prisoner.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Card_Id ) {
				return this.attack_hand( user );
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: prisoner.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;
			dynamic Tr = null;
			Obj_Item_Weapon_Implant_Chem C = null;
			Obj_Item_Weapon_Implant_Tracking T = null;
			dynamic loc_display = null;
			dynamic M = null;
			dynamic mob_loc = null;
			Browser popup = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "";

			if ( !this.screen ) {
				dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";lock=1'>Unlock Console</A>" ).ToString();
			} else if ( this.screen ) {
				dat += "<H3>Prisoner ID Management</H3>";

				if ( this.inserted_id is Obj_Item_Weapon_Card_Id_Prisoner ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";id=eject'>" ).item( this.inserted_id ).str( "</A><br>" ).ToString();
					dat += new Txt( "Collected Points: " ).item( this.inserted_id.points ).str( ". <A href='?src=" ).Ref( this ).str( ";id=reset'>Reset.</A><br>" ).ToString();
					dat += new Txt( "Card goal: " ).item( this.inserted_id.goal ).str( ".  <A href='?src=" ).Ref( this ).str( ";id=setgoal'>Set </A><br>" ).ToString();
					dat += "Space Law recommends quotas of 100 points per minute they would normally serve in the brig.<BR>";
				} else {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";id=insert'>Insert Prisoner ID.</A><br>" ).ToString();
				}
				dat += "<H3>Prisoner Implant Management</H3>";
				dat += "<HR>Chemical Implants<BR>";
				Tr = null;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.tracked_implants, typeof(Obj_Item_Weapon_Implant_Chem) )) {
					C = _a;
					
					Tr = GlobalFuncs.get_turf( C );

					if ( Lang13.Bool( Tr ) && Convert.ToInt32( Tr.z ) != this.z ) {
						continue;
					}

					if ( !Lang13.Bool( C.implanted ) ) {
						continue;
					}
					dat += "ID: " + C.imp_in.name + " | Remaining Units: " + C.reagents.total_volume + " <BR>";
					dat += "| Inject: ";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";inject1=" ).Ref( C ).str( "'>(<font class='bad'>(1)</font>)</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";inject5=" ).Ref( C ).str( "'>(<font class='bad'>(5)</font>)</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";inject10=" ).Ref( C ).str( "'>(<font class='bad'>(10)</font>)</A><BR>" ).ToString();
					dat += "********************************<BR>";
				}
				dat += "<HR>Tracking Implants<BR>";

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.tracked_implants, typeof(Obj_Item_Weapon_Implant_Tracking) )) {
					T = _b;
					

					if ( !( T.imp_in is Mob_Living_Carbon ) ) {
						continue;
					}

					if ( !Lang13.Bool( T.implanted ) ) {
						continue;
					}
					Tr = GlobalFuncs.get_turf( T );

					if ( Lang13.Bool( Tr ) && Convert.ToInt32( Tr.z ) != this.z ) {
						continue;
					}
					loc_display = "Unknown";
					M = T.imp_in;

					if ( Lang13.Bool( Tr.z ) == true && !( M.loc is Tile_Space ) ) {
						mob_loc = GlobalFuncs.get_turf( M );
						loc_display = mob_loc.loc;
					}
					dat += "ID: " + T.imp_in.name + " | Location: " + loc_display + "<BR>";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";warn=" ).Ref( T ).str( "'>(<font class='bad'><i>Message Holder</i></font>)</A> |<BR>" ).ToString();
					dat += "********************************<BR>";
				}
				dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";lock=1'>Lock Console</A>" ).ToString();
			}
			popup = new Browser( a, "computer", "Prisoner Management Console", 400, 500 );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

	}

}