// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Bed_Chair_Vehicle_Wheelchair_Motorized : Obj_Structure_Bed_Chair_Vehicle_Wheelchair {

		public bool maintenance = false;
		public Type default_cell_path = typeof(Obj_Item_Weapon_Cell_High);
		public dynamic internal_battery = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.nick = "cripplin' revenge";
		}

		// Function from file: wheelchair.dm
		public Obj_Structure_Bed_Chair_Vehicle_Wheelchair_Motorized ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.internal_battery = Lang13.Call( GlobalVars.default_cell_path, this );
			return;
		}

		// Function from file: wheelchair.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Screwdriver ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " screws " ).item( ( this.maintenance ? "closed" : "open" ) ).str( " " ).the( this ).item().str( "'s battery compartment.</span>" ).ToString(), "<span class='notice'>You screw " + ( this.maintenance ? "closed" : "open" ) + " the battery compartment.</span>", "You hear screws being loosened." );
				this.maintenance = !this.maintenance;
			} else if ( a is Obj_Item_Weapon_Crowbar && this.maintenance ) {
				
				if ( Lang13.Bool( this.internal_battery ) ) {
					((Mob)b).put_in_hands( this.internal_battery );
					this.internal_battery = null;
				}
				((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " pries out " ).the( this ).item().str( "'s battery.</span>" ).ToString(), new Txt( "<span class='notice'>You pry out " ).the( this ).item().str( "'s battery.</span>" ).ToString(), "You hear a clunk." );
			} else if ( a is Obj_Item_Weapon_Cell && this.maintenance && !Lang13.Bool( this.internal_battery ) ) {
				
				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.internal_battery = a;
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " inserts " ).the( a ).item().str( " into the " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You insert " ).the( a ).item().str( " into " ).the( this ).item().str( ".</span>" ).ToString(), "You hear something being slid into place." );
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: wheelchair.dm
		public override bool check_key( Mob user = null ) {
			
			if ( Lang13.Bool( this.internal_battery ) && Lang13.Bool( this.internal_battery.charge ) ) {
				return true;
			} else {
				return base.check_key( user );
			}
		}

		// Function from file: wheelchair.dm
		public override double getMovementDelay(  ) {
			
			if ( Lang13.Bool( this.internal_battery ) && Lang13.Bool( this.internal_battery.charge ) ) {
				return 0;
			} else {
				return base.getMovementDelay() * 2;
			}
		}

		// Function from file: wheelchair.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( Lang13.Bool( this.internal_battery ) ) {
				((Obj_Item_Weapon_Cell)this.internal_battery).use( 2 );
			}
			return false;
		}

		// Function from file: wheelchair.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( Lang13.Bool( this.internal_battery ) ) {
				GlobalFuncs.to_chat( user, "<span class='info'>The battery meter reads: " + Num13.Round( ((Obj_Item_Weapon_Cell)this.internal_battery).percent(), 1 ) + "%</span>" );
			} else {
				GlobalFuncs.to_chat( user, "<span class='warning'>The 'check battery' light is blinking.</span>" );
			}
			return null;
		}

	}

}