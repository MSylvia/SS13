// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Binary_Circulator : Obj_Machinery_Atmospherics_Components_Binary {

		public bool side = true;
		public bool status = false;
		public dynamic last_pressure_delta = 0;
		public bool CIRC_LEFT = true;
		public int CIRC_RIGHT = 2;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "circ1-off";
		}

		public Obj_Machinery_Atmospherics_Components_Binary_Circulator ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			
		}

		// Function from file: circulator.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				this.icon_state = "circ" + this.side + "-p";
			} else if ( Convert.ToDouble( this.last_pressure_delta ) > 0 ) {
				
				if ( Convert.ToDouble( this.last_pressure_delta ) > 101.32499694824219 ) {
					this.icon_state = "circ" + this.side + "-run";
				} else {
					this.icon_state = "circ" + this.side + "-slow";
				}
			} else {
				this.icon_state = "circ" + this.side + "-off";
			}
			return true;
		}

		// Function from file: circulator.dm
		public override int? process_atmos(  ) {
			base.process_atmos();
			this.update_icon();
			return null;
		}

		// Function from file: circulator.dm
		public dynamic return_transfer_air(  ) {
			dynamic air1 = null;
			dynamic air2 = null;
			dynamic output_starting_pressure = null;
			dynamic input_starting_pressure = null;
			dynamic pressure_delta = null;
			dynamic transfer_moles = null;
			dynamic removed = null;

			air1 = this.airs[1];
			air2 = this.airs[2];
			output_starting_pressure = air1.return_pressure();
			input_starting_pressure = air2.return_pressure();

			if ( Convert.ToDouble( output_starting_pressure ) >= Convert.ToDouble( input_starting_pressure - 10 ) ) {
				this.last_pressure_delta = 0;
				return null;
			}

			if ( Convert.ToDouble( air2.temperature ) > 0 ) {
				pressure_delta = ( input_starting_pressure - output_starting_pressure ) / 2;
				transfer_moles = pressure_delta * air1.volume / ( air2.temperature * 8.31 );
				this.last_pressure_delta = pressure_delta;
				removed = air2.remove( transfer_moles );
				this.update_parents();
				return removed;
			} else {
				this.last_pressure_delta = 0;
			}
			return null;
		}

	}

}