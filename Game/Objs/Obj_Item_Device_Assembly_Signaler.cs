// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Signaler : Obj_Item_Device_Assembly {

		public double code = 30;
		public dynamic frequency = 1457;
		public bool delay = false;
		public dynamic v_connected = null;
		public RadioFrequency radio_connection = null;
		public bool deadman = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.short_name = "signaler";
			this.item_state = "signaler";
			this.starting_materials = new ByTable().Set( "$iron", 1000 ).Set( "$glass", 200 );
			this.wires = 27;
			this.accessible_values = new ByTable().Set( "Code (1 to 100)", "code;number;1;100" ).Set( "Frequency", "frequency;number" );
			this.icon_state = "signaller";
		}

		// Function from file: signaler.dm
		public Obj_Item_Device_Assembly_Signaler ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 40, (Task13.Closure)(() => {
				this.set_frequency( this.frequency );
				return;
			}));
			return;
		}

		// Function from file: signaler.dm
		public override void set_value( string var_name = null, dynamic new_value = null ) {
			
			if ( var_name == "frequency" ) {
				new_value = GlobalFuncs.sanitize_frequency( new_value );
			}
			base.set_value( var_name, (object)(new_value) ); return;
		}

		// Function from file: signaler.dm
		public override dynamic process(  ) {
			Ent_Static A = null;
			Ent_Static M = null;

			
			if ( this.loc != null ) {
				A = this.loc;

				if ( A.timestopped ) {
					return null;
				}
			}

			if ( !this.deadman ) {
				GlobalVars.processing_objects.Remove( this );
			}
			M = this.loc;

			if ( !( M != null ) || !( M is Mob ) ) {
				
				if ( Rand13.PercentChance( 5 ) ) {
					this.signal();
				}
				this.deadman = false;
				GlobalVars.processing_objects.Remove( this );
			} else if ( Rand13.PercentChance( 5 ) ) {
				M.visible_message( "" + M + "'s finger twitches a bit over " + this + "'s signal button!" );
			}
			return null;
		}

		// Function from file: signaler.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic O = null;

			
			if ( !( signal != null ) ) {
				return false;
			}

			if ( Convert.ToDouble( ((dynamic)signal).encryption ) != this.code ) {
				return false;
			}

			if ( !( ( this.wires & 8 ) != 0 ) ) {
				return false;
			}
			this.pulse( true );

			if ( !( this.holder != null ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( this.loc, 1 ) )) {
					O = _a;
					
					O.show_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString(), 1, "*beep* *beep*", 2 );
				}
			}
			return false;
		}

		// Function from file: signaler.dm
		public override bool pulse( bool? radio = null ) {
			radio = radio ?? false;

			
			if ( Lang13.Bool( this.v_connected ) && this.wires != 0 ) {
				this.v_connected.Pulse( this );
			} else {
				return base.pulse( radio );
			}
			return false;
		}

		// Function from file: signaler.dm
		public void set_frequency( dynamic new_frequency = null ) {
			
			if ( !( GlobalVars.radio_controller != null ) ) {
				Task13.Schedule( 20, (Task13.Closure)(() => {
					
					if ( !( GlobalVars.radio_controller != null ) ) {
						this.visible_message( "Cannot initialize the radio_controller, this is a bug, tell a coder" );
						return;
					} else {
						GlobalVars.radio_controller.remove_object( this, this.frequency );
						this.frequency = new_frequency;
						this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_CHAT );
					}
					return;
				}));
			} else {
				GlobalVars.radio_controller.remove_object( this, this.frequency );
				this.frequency = new_frequency;
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_CHAT );
			}
			return;
		}

		// Function from file: signaler.dm
		public void signal(  ) {
			Game_Data signal = null;
			string time = null;
			dynamic T = null;
			Mob user = null;

			
			if ( !( this.radio_connection != null ) ) {
				return;
			}

			if ( !Lang13.IsInRange( Convert.ToDouble( this.frequency ), 1200, 1600 ) ) {
				return;
			}

			if ( Lang13.IsInRange( !( this.code != 0 ) ?1:0, 1, 100 ) ) {
				return;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).source = this;
			((dynamic)signal).encryption = this.code;
			((dynamic)signal).data["message"] = "ACTIVATE";
			this.radio_connection.post_signal( this, signal );
			time = String13.FormatTime( Game13.realtime, "hh:mm:ss" );
			T = GlobalFuncs.get_turf( this );

			if ( Task13.User != null ) {
				user = Task13.User;

				if ( user != null ) {
					GlobalVars.lastsignalers.Add( "" + time + " <B>:</B> " + user.key + " used " + this + " @ location (" + T.x + "," + T.y + "," + T.z + ") <B>:</B> " + GlobalFuncs.format_frequency( this.frequency ) + "/" + this.code );
				} else {
					GlobalVars.lastsignalers.Add( "" + time + " <B>:</B> (<span class='danger'>NO USER FOUND</span>) used " + this + " @ location (" + T.x + "," + T.y + "," + T.z + ") <B>:</B> " + GlobalFuncs.format_frequency( this.frequency ) + "/" + this.code );
				}
			}
			return;
		}

		// Function from file: signaler.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic new_frequency = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this.loc, Task13.User ) || !Task13.User.canmove && !Lang13.Bool( Task13.User.locked_to ) ) {
				Interface13.Browse( Task13.User, null, "window=radio" );
				GlobalFuncs.onclose( Task13.User, "radio" );
				return null;
			}

			if ( Lang13.Bool( href_list["freq"] ) ) {
				new_frequency = this.frequency + String13.ParseNumber( href_list["freq"] );

				if ( Convert.ToDouble( new_frequency ) < 1200 || Convert.ToDouble( new_frequency ) > 1600 ) {
					new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
				}
				this.set_frequency( new_frequency );
			}

			if ( Lang13.Bool( href_list["code"] ) ) {
				this.code += String13.ParseNumber( href_list["code"] ) ??0;
				this.code = Num13.Floor( this.code );
				this.code = Num13.MinInt( 100, ((int)( this.code )) );
				this.code = Num13.MaxInt( 1, ((int)( this.code )) );
			}

			if ( Lang13.Bool( href_list["send"] ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.signal();
					return;
				}));
			}

			if ( Task13.User != null ) {
				this.attack_self( Task13.User );
			}
			return null;
		}

		// Function from file: signaler.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t1 = null;
			string dat = null;

			t1 = "-------";
			dat = new Txt( "\n		<TT>\n\n		<A href='byond://?src=" ).Ref( this ).str( ";send=1'>Send Signal</A><BR>\n		<B>Frequency/Code</B> for signaler:<BR>\n		Frequency:\n		<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n		<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A>\n		" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n		<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n		<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n\n		Code:\n		<A href='byond://?src=" ).Ref( this ).str( ";code=-5'>-</A>\n		<A href='byond://?src=" ).Ref( this ).str( ";code=-1'>-</A>\n		" ).item( this.code ).str( "\n		<A href='byond://?src=" ).Ref( this ).str( ";code=1'>+</A>\n		<A href='byond://?src=" ).Ref( this ).str( ";code=5'>+</A><BR>\n		" ).item( t1 ).str( "\n		</TT>" ).ToString();
			Interface13.Browse( user, dat, "window=radio" );
			GlobalFuncs.onclose( user, "radio" );
			return null;
		}

		// Function from file: signaler.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.holder != null ) {
				this.holder.update_icon();
			}
			return null;
		}

		// Function from file: signaler.dm
		public override bool activate(  ) {
			
			if ( this.cooldown > 0 ) {
				return false;
			}
			this.cooldown = 2;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.process_cooldown();
				return;
			}));
			this.signal();
			return true;
		}

		// Function from file: signaler.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic R = null;
			dynamic R2 = null;
			Obj_Item_Mounted_Frame_DriverButton_SignalerButton I = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Stack_Rods ) {
				R = a;

				if ( Convert.ToDouble( R.amount ) >= 1 ) {
					R.use( 1 );
					new Obj_Machinery_ConveyorSwitch( GlobalFuncs.get_turf( this.loc ) );
					((Mob)b).u_equip( this, false );
					GlobalFuncs.qdel( this );
				}
			}

			if ( a is Obj_Item_Stack_Sheet_Metal ) {
				R2 = a;

				if ( Convert.ToDouble( R2.amount ) >= 1 ) {
					R2.use( 1 );
					I = new Obj_Item_Mounted_Frame_DriverButton_SignalerButton( GlobalFuncs.get_turf( this.loc ) );
					I.code = this.code;
					I.frequency = this.frequency;
					((Mob)b).u_equip( this, false );
					GlobalFuncs.qdel( this );
				}
			}
			return null;
		}

		// Function from file: signaler.dm
		[Verb]
		[VerbInfo( name: "Threaten to push the button!", desc: "BOOOOM!", access: VerbAccess.InUserContents, range: 127 )]
		public void deadman_it(  ) {
			Mob user = null;

			
			if ( Task13.User != null ) {
				user = Task13.User;
				this.deadman = true;
				GlobalVars.processing_objects.Add( this );
				user.visible_message( "<span class='warning'>" + user + " moves their finger over " + this + "'s signal button...</span>" );
			}
			return;
		}

	}

}