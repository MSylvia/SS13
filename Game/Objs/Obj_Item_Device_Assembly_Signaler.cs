// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Signaler : Obj_Item_Device_Assembly {

		public double code = 30;
		public double frequency = 1457;
		public bool delay = false;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "signaler";
			this.materials = new ByTable().Set( "$metal", 400 ).Set( "$glass", 120 );
			this.wires = 27;
			this.attachable = true;
			this.icon_state = "signaller";
		}

		// Function from file: signaler.dm
		public Obj_Item_Device_Assembly_Signaler ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 40, (Task13.Closure)(() => {
				this.set_frequency( this.frequency );
				return;
			}));
			return;
		}

		// Function from file: signaler.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( !( signal != null ) ) {
				return false;
			}

			if ( signal.encryption != this.code ) {
				return false;
			}

			if ( !Lang13.Bool( this.wires & 8 ) ) {
				return false;
			}
			this.pulse( true );
			this.audible_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString(), null, 1 );
			return false;
		}

		// Function from file: signaler.dm
		public void set_frequency( double new_frequency = 0 ) {
			
			if ( !( GlobalVars.SSradio != null ) ) {
				Task13.Sleep( 20 );
			}

			if ( !( GlobalVars.SSradio != null ) ) {
				return;
			}
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_CHAT );
			return;
		}

		// Function from file: signaler.dm
		public void signal(  ) {
			Signal signal = null;
			string time = null;
			dynamic T = null;

			
			if ( !( this.radio_connection != null ) ) {
				return;
			}
			signal = new Signal();
			signal.source = this;
			signal.encryption = this.code;
			signal.data["message"] = "ACTIVATE";
			this.radio_connection.post_signal( this, signal );
			time = String13.FormatTime( Game13.realtime, "hh:mm:ss" );
			T = GlobalFuncs.get_turf( this );

			if ( Task13.User != null ) {
				GlobalVars.lastsignalers.Add( "" + time + " <B>:</B> " + Task13.User.key + " used " + this + " @ location (" + T.x + "," + T.y + "," + T.z + ") <B>:</B> " + GlobalFuncs.format_frequency( this.frequency ) + "/" + this.code );
			}
			return;
		}

		// Function from file: signaler.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double new_frequency = 0;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( !Task13.User.canmove || Task13.User.stat != 0 || Task13.User.restrained() || !( Map13.GetDistance( this.loc, Task13.User ) <= 1 ) ) {
				Interface13.Browse( Task13.User, null, "window=radio" );
				GlobalFuncs.onclose( Task13.User, "radio" );
				return null;
			}

			if ( Lang13.Bool( href_list["freq"] ) ) {
				new_frequency = this.frequency + ( String13.ParseNumber( href_list["freq"] ) ??0);

				if ( new_frequency < 1200 || new_frequency > 1600 ) {
					new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
				}
				this.set_frequency( new_frequency );
			}

			if ( Lang13.Bool( href_list["code"] ) ) {
				this.code += String13.ParseNumber( href_list["code"] ) ??0;
				this.code = Num13.Floor( this.code );
				this.code = Num13.MinInt( 100, ((int)( this.code )) );
				this.code = Num13.MaxInt( 1, ((int)( this.code )) );
			}

			if ( Lang13.Bool( href_list["send"] ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.signal();
					return;
				}));
			}

			if ( Task13.User != null ) {
				this.attack_self( Task13.User );
			}
			return null;
		}

		// Function from file: signaler.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t1 = null;
			string dat = null;

			
			if ( this.is_secured( user ) ) {
				t1 = "-------";
				dat = new Txt( "\n<TT>\n\n<A href='byond://?src=" ).Ref( this ).str( ";send=1'>Send Signal</A><BR>\n<B>Frequency/Code</B> for signaler:<BR>\nFrequency:\n<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A>\n" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n\nCode:\n<A href='byond://?src=" ).Ref( this ).str( ";code=-5'>-</A>\n<A href='byond://?src=" ).Ref( this ).str( ";code=-1'>-</A>\n" ).item( this.code ).str( "\n<A href='byond://?src=" ).Ref( this ).str( ";code=1'>+</A>\n<A href='byond://?src=" ).Ref( this ).str( ";code=5'>+</A><BR>\n" ).item( t1 ).str( "\n</TT>" ).ToString();
				Interface13.Browse( user, dat, "window=radio" );
				GlobalFuncs.onclose( user, "radio" );
				return null;
			}
			return null;
		}

		// Function from file: signaler.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.holder != null ) {
				this.holder.update_icon();
			}
			return false;
		}

		// Function from file: signaler.dm
		public override bool activate(  ) {
			
			if ( this.cooldown > 0 ) {
				return false;
			}
			this.cooldown = 2;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.process_cooldown();
				return;
			}));
			this.signal();
			return true;
		}

		// Function from file: signaler.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

	}

}