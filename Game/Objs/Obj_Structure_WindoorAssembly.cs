// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_WindoorAssembly : Obj_Structure {

		public int ini_dir = 0;
		public dynamic electronics = null;
		public string facing = "l";
		public string secure = "";
		public string state = "01";
		public bool plasma = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/doors/windoor.dmi";
			this.icon_state = "l_windoor_assembly01";
			this.dir = 1;
		}

		// Function from file: windoor_assembly.dm
		public Obj_Structure_WindoorAssembly ( dynamic dir = null ) : base( (object)(dir) ) {
			dir = dir ?? GlobalVars.NORTH;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.ini_dir = this.dir;
			this.update_nearby_tiles();
			return;
		}

		// Function from file: windoor_assembly.dm
		public bool update_nearby_tiles(  ) {
			Ent_Static T = null;

			
			if ( GlobalVars.air_master == null ) {
				return false;
			}
			T = this.loc;

			if ( T is Tile ) {
				GlobalVars.air_master.mark_for_update( T );
			}
			return true;
		}

		// Function from file: windoor_assembly.dm
		public Obj_Machinery_Door_Window Create(  ) {
			
			if ( Lang13.Bool( this.secure ) && this.plasma ) {
				return new Obj_Machinery_Door_Window_Plasma_Secure( this.loc );
			} else if ( Lang13.Bool( this.secure ) && !this.plasma ) {
				return new Obj_Machinery_Door_Window_Brigdoor( this.loc );
			} else if ( this.plasma ) {
				return new Obj_Machinery_Door_Window_Plasma( this.loc );
			} else {
				return new Obj_Machinery_Door_Window( this.loc );
			}
			return null;
		}

		// Function from file: windoor_assembly.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;
			dynamic P = null;
			dynamic CC = null;
			dynamic ae = null;
			Obj_Machinery_Door_Window windoor = null;

			
			switch ((string)( this.state )) {
				case "01":
					
					if ( a is Obj_Item_Weapon_Weldingtool && !Lang13.Bool( this.anchored ) ) {
						WT = a;

						if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
							((Ent_Static)b).visible_message( "" + b + " dissassembles the windoor assembly.", "You start to dissassemble the windoor assembly." );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 50, 1 );

							if ( GlobalFuncs.do_after( b, this, 40 ) ) {
								
								if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
									return null;
								}
								GlobalFuncs.to_chat( b, "<span class='notice'>You dissasembled the windoor assembly!</span>" );

								if ( this.plasma ) {
									GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Glass_Plasmarglass), GlobalFuncs.get_turf( this ), 5 );
								} else {
									GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Glass_Rglass), GlobalFuncs.get_turf( this ), 5 );
								}

								if ( Lang13.Bool( this.secure ) ) {
									GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Plasteel), GlobalFuncs.get_turf( this ), 2 );
								}
								GlobalFuncs.qdel( this );
							}
						} else {
							GlobalFuncs.to_chat( b, "<span class='rose'>You need more welding fuel to dissassemble the windoor assembly.</span>" );
							return null;
						}
					}

					if ( a is Obj_Item_Weapon_Wrench && !Lang13.Bool( this.anchored ) ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 100, 1 );
						((Ent_Static)b).visible_message( "" + b + " secures the windoor assembly to the floor.", "You start to secure the windoor assembly to the floor." );

						if ( GlobalFuncs.do_after( b, this, 40 ) ) {
							
							if ( !( this != null ) ) {
								return null;
							}
							GlobalFuncs.to_chat( b, "<span class='notice'>You've secured the windoor assembly!</span>" );
							this.anchored = 1;

							if ( Lang13.Bool( this.secure ) ) {
								this.name = "Secure Anchored Windoor Assembly";
							} else {
								this.name = "Anchored Windoor Assembly";
							}
						}
					} else if ( a is Obj_Item_Weapon_Wrench && Lang13.Bool( this.anchored ) ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 100, 1 );
						((Ent_Static)b).visible_message( "" + b + " unsecures the windoor assembly to the floor.", "You start to unsecure the windoor assembly to the floor." );

						if ( GlobalFuncs.do_after( b, this, 40 ) ) {
							
							if ( !( this != null ) ) {
								return null;
							}
							GlobalFuncs.to_chat( b, "<span class='notice'>You've unsecured the windoor assembly!</span>" );
							this.anchored = 0;

							if ( Lang13.Bool( this.secure ) ) {
								this.name = "Secure Windoor Assembly";
							} else {
								this.name = "Windoor Assembly";
							}
						}
					} else if ( a is Obj_Item_Stack_Sheet_Plasteel && !Lang13.Bool( this.secure ) ) {
						P = a;

						if ( Convert.ToDouble( P.amount ) < 2 ) {
							GlobalFuncs.to_chat( b, "<span class='rose'>You need more plasteel to do this.</span>" );
							return null;
						}
						GlobalFuncs.to_chat( b, "<span class='notice'>You start to reinforce the windoor with plasteel.</span>" );

						if ( GlobalFuncs.do_after( b, this, 40 ) ) {
							
							if ( !( this != null ) ) {
								return null;
							}
							P.use( 2 );
							GlobalFuncs.to_chat( b, "<span class='notice'>You reinforce the windoor.</span>" );
							this.secure = "secure_";

							if ( Lang13.Bool( this.anchored ) ) {
								this.name = "Secure Anchored Windoor Assembly";
							} else {
								this.name = "Secure Windoor Assembly";
							}
						}
					} else if ( a is Obj_Item_Stack_CableCoil && Lang13.Bool( this.anchored ) ) {
						((Ent_Static)b).visible_message( "" + b + " wires the windoor assembly.", "You start to wire the windoor assembly." );

						if ( GlobalFuncs.do_after( b, this, 40 ) ) {
							
							if ( !( this != null ) ) {
								return null;
							}
							CC = a;
							CC.use( 1 );
							GlobalFuncs.to_chat( b, "<span class='notice'>You wire the windoor!</span>" );
							this.state = "02";

							if ( Lang13.Bool( this.secure ) ) {
								this.name = "Secure Wired Windoor Assembly";
							} else {
								this.name = "Wired Windoor Assembly";
							}
						}
					} else {
						base.attackby( (object)(a), (object)(b), (object)(c) );
					}
					break;
				case "02":
					
					if ( a is Obj_Item_Weapon_Wirecutters ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Wirecutter.ogg", 100, 1 );
						((Ent_Static)b).visible_message( "" + b + " cuts the wires from the airlock assembly.", "You start to cut the wires from airlock assembly." );

						if ( GlobalFuncs.do_after( b, this, 40 ) ) {
							
							if ( !( this != null ) || this.state != "02" ) {
								return null;
							}
							GlobalFuncs.to_chat( b, "<span class='notice'>You cut the windoor wires!</span>" );
							new Obj_Item_Stack_CableCoil( GlobalFuncs.get_turf( b ), 1 );
							this.state = "01";

							if ( Lang13.Bool( this.secure ) ) {
								this.name = "Secure Wired Windoor Assembly";
							} else {
								this.name = "Wired Windoor Assembly";
							}
						}
					} else if ( a is Obj_Item_Weapon_Circuitboard_Airlock && a.icon_state != "door_electronics_smoked" ) {
						
						if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 100, 1 );
							((Ent_Static)b).visible_message( "" + b + " installs the electronics into the airlock assembly.", "You start to install electronics into the airlock assembly." );

							if ( GlobalFuncs.do_after( b, this, 40 ) ) {
								
								if ( !( this != null ) ) {
									return null;
								}
								GlobalFuncs.to_chat( b, "<span class='notice'>You've installed the airlock electronics!</span>" );
								this.name = "Near finished Windoor Assembly";
								this.electronics = a;
								this.electronics.installed = 1;
							} else {
								((Ent_Dynamic)a).forceMove( this.loc );
							}
						}
					} else if ( a is Obj_Item_Weapon_Screwdriver && Lang13.Bool( this.electronics ) ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 100, 1 );
						((Ent_Static)b).visible_message( "" + b + " removes the electronics from the airlock assembly.", "You start to uninstall electronics from the airlock assembly." );

						if ( GlobalFuncs.do_after( b, this, 40 ) ) {
							
							if ( !( this != null ) ) {
								return null;
							}
							GlobalFuncs.to_chat( b, "<span class='notice'>You've removed the airlock electronics!</span>" );
							this.name = "Wired Windoor Assembly";
							ae = null;
							ae = this.electronics;
							ae.installed = 0;
							this.electronics = null;
							ae.loc = this.loc;
						}
					} else if ( a is Obj_Item_Weapon_Crowbar ) {
						
						if ( !Lang13.Bool( this.electronics ) ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='rose'>The assembly is missing electronics.</span>" );
							return null;
						}
						Interface13.Browse( Task13.User, null, "window=windoor_access" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Crowbar.ogg", 100, 1 );
						((Ent_Static)b).visible_message( "" + b + " pries the windoor into the frame.", "You start prying the windoor into the frame." );

						if ( GlobalFuncs.do_after( b, this, 40 ) ) {
							
							if ( !( this != null ) ) {
								return null;
							}
							windoor = this.Create();
							this.density = true;
							GlobalFuncs.to_chat( b, "<span class='notice'>You finish the windoor!</span>" );

							if ( this.secure == "secure_" ) {
								this.secure = "secure";
							}

							if ( this.facing == "l" ) {
								windoor.icon_state = "left" + this.secure + "open";
								windoor.base_state = "left" + this.secure;
							} else {
								windoor.icon_state = "right" + this.secure + "open";
								windoor.base_state = "right" + this.secure;
							}
							windoor.dir = this.dir;
							windoor.density = false;
							windoor.req_access = this.electronics.conf_access;
							windoor.electronics = this.electronics;
							this.electronics.loc = windoor;
							GlobalFuncs.qdel( this );
						}
					} else {
						base.attackby( (object)(a), (object)(b), (object)(c) );
					}
					break;
			}
			this.update_icon();
			return null;
		}

		// Function from file: windoor_assembly.dm
		public override bool CheckExit( Ent_Dynamic mover = null, Ent_Static target = null ) {
			
			if ( mover is Ent_Dynamic && mover.checkpass( 2 ) != 0 ) {
				return true;
			}

			if ( Map13.GetDistance( this.loc, target ) == this.dir ) {
				return !this.density;
			} else {
				return true;
			}
		}

		// Function from file: windoor_assembly.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 2 ) != 0 ) {
				return true;
			}

			if ( Map13.GetDistance( this.loc, target ) == this.dir ) {
				
				if ( air_group == true ) {
					return false;
				}
				return !this.density;
			} else {
				return true;
			}
		}

		// Function from file: windoor_assembly.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "" + this.facing + "_" + this.secure + "windoor_assembly" + this.state;
			return null;
		}

		// Function from file: windoor_assembly.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.density = false;
			this.update_nearby_tiles();
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: windoor_assembly.dm
		[Verb]
		[VerbInfo( name: "Flip Windoor Assembly", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void flip(  ) {
			
			if ( this.facing == "l" ) {
				GlobalFuncs.to_chat( Task13.User, "The windoor will now slide to the right." );
				this.facing = "r";
			} else {
				this.facing = "l";
				GlobalFuncs.to_chat( Task13.User, "The windoor will now slide to the left." );
			}
			this.update_icon();
			return;
		}

		// Function from file: windoor_assembly.dm
		[Verb]
		[VerbInfo( name: "Rotate Windoor Assembly", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool revrotate(  ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( Task13.User, "It is fastened to the floor; therefore, you can't rotate it!" );
				return false;
			}

			if ( this.state != "01" ) {
				this.update_nearby_tiles();
			}
			this.dir = Num13.Rotate( this.dir, 270 );

			if ( this.state != "01" ) {
				this.update_nearby_tiles();
			}
			this.ini_dir = this.dir;
			this.update_icon();
			return false;
		}

	}

}