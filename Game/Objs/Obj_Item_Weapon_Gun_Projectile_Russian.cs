// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Projectile_Russian : Obj_Item_Weapon_Gun_Projectile {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.max_shells = 6;
		}

		// Function from file: revolver.dm
		public Obj_Item_Weapon_Gun_Projectile_Russian ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.Spin();
			this.update_icon();
			return;
		}

		// Function from file: revolver.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			string affecting = null;
			dynamic AC = null;
			dynamic P = null;

			
			if ( !( this.getAmmo() != 0 ) ) {
				((Ent_Static)user).visible_message( "<span class='warning'>*click*</span>", "<span class='warning'>*click*</span>" );
				GlobalFuncs.playsound( user, "sound/weapons/empty.ogg", 100, 1 );
				return null;
			}

			if ( M is Mob_Living && user is Mob_Living ) {
				
				if ( M == user ) {
					affecting = ((dynamic)user.zone_sel).selecting;

					if ( affecting == "head" ) {
						AC = this.loaded[1];

						if ( !this.process_chambered() ) {
							((Ent_Static)user).visible_message( "<span class='warning'>*click*</span>", "<span class='warning'>*click*</span>" );
							GlobalFuncs.playsound( user, "sound/weapons/empty.ogg", 100, 1 );
							return null;
						}

						if ( !Lang13.Bool( this.in_chamber ) ) {
							return null;
						}
						P = Lang13.Call( AC.projectile_type );
						GlobalFuncs.playsound( user, this.fire_sound, 50, 1 );
						((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user.name ).str( " fires " ).item( this ).str( " at " ).his_her_its_their().str( " head!</span>" ).ToString(), "<span class='danger'>You fire " + this + " at your head!</span>", "You hear a " + ( this.in_chamber is Obj_Item_Projectile_Beam ? "laser blast" : "gunshot" ) + "!" );

						if ( !P.nodamage ) {
							((Mob_Living)user).apply_damage( 300, "brute", affecting );
						}
						return null;
					}
				}
			}
			base.attack( (object)(M), (object)(user), def_zone, eat_override );
			return null;
		}

		// Function from file: revolver.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			((Ent_Static)user).visible_message( "<span class='warning'>" + user + " spins the chamber of the revolver.</span>", "<span class='warning'>You spin the revolver's chamber.</span>" );

			if ( this.getAmmo() > 0 ) {
				this.Spin();
			}
			return null;
		}

		// Function from file: revolver.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			int num_loaded = 0;
			dynamic AM = null;
			Obj_Item_AmmoCasing AC = null;

			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}
			num_loaded = 0;

			if ( a is Obj_Item_AmmoStorage_Magazine ) {
				
				if ( this.load_method == 2 && this.getAmmo() != 0 ) {
					return null;
				}
				AM = a;

				foreach (dynamic _a in Lang13.Enumerate( AM.stored_ammo, typeof(Obj_Item_AmmoCasing) )) {
					AC = _a;
					

					if ( this.getAmmo() > 0 || this.getAmmo() >= ( this.max_shells ??0) ) {
						break;
					}

					if ( Lang13.Bool( this.caliber[AC.caliber] ) && this.getAmmo() < ( this.max_shells ??0) ) {
						AC.loc = this;
						AM.stored_ammo.Remove( AC );
						this.loaded.Add( AC );
						num_loaded++;
					}
					break;
				}
				a.update_icon();
			}

			if ( num_loaded != 0 ) {
				((Ent_Static)b).visible_message( "<span class='warning'>" + b + " loads a single bullet into the revolver and spins the chamber.</span>", "<span class='warning'>You load a single bullet into the chamber and spin it.</span>" );
			} else {
				((Ent_Static)b).visible_message( "<span class='warning'>" + b + " spins the chamber of the revolver.</span>", "<span class='warning'>You spin the revolver's chamber.</span>" );
			}

			if ( this.getAmmo() > 0 ) {
				this.Spin();
			}
			this.update_icon();
			return null;
		}

		// Function from file: revolver.dm
		public void Spin(  ) {
			Obj_Item_AmmoCasing AC = null;
			double? random = null;
			double? i = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.loaded, typeof(Obj_Item_AmmoCasing) )) {
				AC = _a;
				
				GlobalFuncs.qdel( AC );
				AC = null;
			}
			this.loaded = new ByTable();
			random = Rand13.Int( 1, ((int)( this.max_shells ??0 )) );
			i = null;
			i = 1;

			while (( i ??0) <= ( this.max_shells ??0)) {
				
				if ( i != random ) {
					this.loaded.Add( i );
				} else {
					this.loaded.Add( Lang13.Call( this.ammo_type, this ) );
				}
				i++;
			}
			return;
		}

	}

}