// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_RustCoreControl : Obj_Machinery_Computer {

		public ByTable connected_devices = new ByTable();
		public int scan_range = 25;
		public Obj_Machinery cur_viewed_device = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.light_color = "#FA9632";
			this.icon = "code/WorkInProgress/Cael_Aislinn/Rust/rust.dmi";
			this.icon_state = "core_control";
		}

		public Obj_Machinery_Computer_RustCoreControl ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: core_control.dm
		public override bool unlinkFrom( Mob user = null, Base_Data buffer = null ) {
			bool _default = false;

			this.connected_devices.Remove( buffer );
			_default = true;
			return _default;
		}

		// Function from file: core_control.dm
		public override Base_Data getLink( double? idx = null ) {
			Base_Data _default = null;

			
			if ( ( idx ??0) <= this.connected_devices.len ) {
				_default = this.connected_devices[idx];
			}
			return _default;
		}

		// Function from file: core_control.dm
		public override bool linkWith( Mob user = null, Base_Data buffer = null, ByTable context = null ) {
			bool _default = false;

			this.connected_devices.Add( buffer );
			_default = true;
			return _default;
		}

		// Function from file: core_control.dm
		public override bool? isLinkedWith( Base_Data O = null ) {
			bool? _default = null;

			Interface13.Stat( null, this.connected_devices.Contains( O ) );
			_default = null;
			return _default;
		}

		// Function from file: core_control.dm
		public override bool canLink( Base_Data O = null, ByTable context = null ) {
			bool _default = false;

			_default = O is Obj_Machinery_Power_RustCore && Map13.GetDistance( this, O ) < this.scan_range;
			return _default;
		}

		// Function from file: core_control.dm
		public override string linkMenu( Base_Data O = null ) {
			string _default = null;

			
			if ( O is Obj_Machinery_Power_RustCore ) {
				_default = new Txt( "<a href='?src=" ).Ref( this ).str( ";link=1'>[LINK]</a> " ).ToString();
			}
			return _default;
		}

		// Function from file: core_control.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			string _default = null;

			Obj_Machinery_Power_RustCore C = null;

			_default = "Linked R-UST Tokamak cores:<br><lu>";

			foreach (dynamic _a in Lang13.Enumerate( this.connected_devices, typeof(Obj_Machinery_Power_RustCore) )) {
				C = _a;
				
				_default += new Txt( "<li><b>" ).item( C.id_tag ).str( "</b> <a href='?src=" ).Ref( this ).str( ";unlink=" ).item( this.connected_devices.Find( C ) ).str( "'>[X]</a></li>" ).ToString();
			}
			_default += "</ul>";
			return _default;
		}

		// Function from file: core_control.dm
		public bool check_core_status( Obj_Machinery C = null ) {
			bool _default = false;

			
			if ( C == null ) {
				return _default;
			}

			if ( ( C.stat & 1 ) != 0 ) {
				return _default;
			}

			if ( C.state != 2 ) {
				return _default;
			}

			if ( Convert.ToDouble( C.idle_power_usage ) > Convert.ToDouble( ((dynamic)C).avail() ) ) {
				return _default;
			}
			_default = true;
			return _default;
		}

		// Function from file: core_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			double? idx = null;
			double? val = null;
			double? val2 = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["access_device"] ) ) {
				idx = ( ( String13.ParseNumber( href_list["toggle_active"] ) ??0) <= 1 ? 1 : ( ( String13.ParseNumber( href_list["toggle_active"] ) ??0) >= this.connected_devices.len ? this.connected_devices.len : String13.ParseNumber( href_list["toggle_active"] ) ) );
				this.cur_viewed_device = this.connected_devices[idx];
				this.updateUsrDialog();
				return 1;
			}

			if ( !( this.cur_viewed_device != null ) || !this.check_core_status( this.cur_viewed_device ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["goto_scanlist"] ) ) {
				this.cur_viewed_device = null;
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["toggle_active"] ) ) {
				
				if ( !Lang13.Bool( ((dynamic)this.cur_viewed_device).Startup() ) ) {
					((dynamic)this.cur_viewed_device).Shutdown();
				}
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["str"] ) ) {
				val = String13.ParseNumber( href_list["str"] );

				if ( !Lang13.Bool( val ) ) {
					((dynamic)this.cur_viewed_device).set_strength( Interface13.Input( "Enter the new field power density (W.m^-3)", "R-UST Mk. 7 Tokamak Controls", ((dynamic)this.cur_viewed_device).field_strength, null, null, InputType.Num ) );
				} else {
					((dynamic)this.cur_viewed_device).set_strength( ((dynamic)this.cur_viewed_device).field_strength + val );
				}
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["freq"] ) ) {
				val2 = String13.ParseNumber( href_list["freq"] );

				if ( !Lang13.Bool( val2 ) ) {
					((dynamic)this.cur_viewed_device).set_frequency( Interface13.Input( "Enter the new field frequency (MHz)", "R-UST Mk. 7 Tokamak Controls", ((dynamic)this.cur_viewed_device).field_frequency, null, null, InputType.Num ) );
				} else {
					((dynamic)this.cur_viewed_device).set_frequency( ((dynamic)this.cur_viewed_device).field_frequency + val2 );
				}
				this.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: core_control.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			Obj_Machinery_Power_RustCore C = null;
			string status = null;
			bool can_access = false;
			Browser popup = null;

			dat = "";

			if ( !( this.cur_viewed_device != null ) || !this.check_core_status( this.cur_viewed_device ) ) {
				this.cur_viewed_device = null;
			}

			if ( this.cur_viewed_device != null ) {
				dat += new Txt( "\n			<a href='?src=" ).Ref( this ).str( ";goto_scanlist=1'>Back to overview</a><hr>\n			<b>Device tag:</b> " ).item( ((dynamic)this.cur_viewed_device).id_tag ).str( "<br>\n			<span style='color: " ).item( ( Lang13.Bool( ((dynamic)this.cur_viewed_device).owned_field ) ? "green" : "red" ) ).str( "'>Device " ).item( ( Lang13.Bool( ((dynamic)this.cur_viewed_device).owned_field ) ? "activated" : "deactivated" ) ).str( ".</span><br>\n			<a href='?src=" ).Ref( this ).str( ";toggle_active=1'>Bring field " ).item( ( Lang13.Bool( ((dynamic)this.cur_viewed_device).owned_field ) ? "offline" : "online" ) ).str( "</a><br>\n			<hr>\n\n			<b>Field encumbrance:</b> " ).item( ( Lang13.Bool( ((dynamic)this.cur_viewed_device).owned_field ) ? ((dynamic)( 0 )) : ((dynamic)( "N/A" )) ) ).str( "<br>\n			<b>Field power density (W.m<sup>-3</sup>):</b><br>\n			<a href='?src=" ).Ref( this ).str( ";str=-1000'>----</a>\n			<a href='?src=" ).Ref( this ).str( ";str=-100'>--- </a>\n			<a href='?src=" ).Ref( this ).str( ";str=-10'>--  </a>\n			<a href='?src=" ).Ref( this ).str( ";str=-1'>-   </a>\n			<a href='?src=" ).Ref( this ).str( ";str=0'>" ).item( ((dynamic)this.cur_viewed_device).field_strength ).str( "</a>\n			<a href='?src=" ).Ref( this ).str( ";str=1'>+   </a>\n			<a href='?src=" ).Ref( this ).str( ";str=10'>++  </a>\n			<a href='?src=" ).Ref( this ).str( ";str=100'>+++ </a>\n			<a href='?src=" ).Ref( this ).str( ";str=1000'>++++</a><hr>\n		" ).ToString();
				dat += new Txt( "\n			<b>Field frequency (MHz):</b><br>\n			<a href='?src=" ).Ref( this ).str( ";freq=-1000'>----</a>\n			<a href='?src=" ).Ref( this ).str( ";freq=-100'>--- </a>\n			<a href='?src=" ).Ref( this ).str( ";freq=-10'>--  </a>\n			<a href='?src=" ).Ref( this ).str( ";freq=-1'>-   </a>\n			<a href='?src=" ).Ref( this ).str( ";freq=0'>" ).item( ((dynamic)this.cur_viewed_device).field_frequency ).str( "</a>\n			<a href='?src=" ).Ref( this ).str( ";freq=1'>+   </a>\n			<a href='?src=" ).Ref( this ).str( ";freq=10'>++  </a>\n			<a href='?src=" ).Ref( this ).str( ";freq=100'>+++ </a>\n			<a href='?src=" ).Ref( this ).str( ";freq=1000'>++++</a><br>\n			<hr>\n		" ).ToString();
			} else if ( this.connected_devices.len != 0 ) {
				dat += @"
				<b>Connected R-UST Mk. 7 Tokamak pattern Electromagnetic Field Generators:</b><hr>
				<table>
					<tr>
						<th><b>Device tag</b></th>
						<th><b>Status</b></th>
						<th><b>Controls</b></th>
					</tr>
			";

				foreach (dynamic _a in Lang13.Enumerate( this.connected_devices, typeof(Obj_Machinery_Power_RustCore) )) {
					C = _a;
					
					status = null;
					can_access = true;

					if ( !this.check_core_status( C ) ) {
						status = "<span style='color: red'>Unresponsive</span>";
						can_access = false;
					} else if ( Convert.ToDouble( C.avail() ) < Convert.ToDouble( C.active_power_usage ) ) {
						status = "<span style='color: orange'>Underpowered</span>";
					} else {
						status = "<span style='color: green'>Good</span>";
					}
					dat += "\n					<tr>\n						<td>" + C.id_tag + "</td>\n						<td>" + status + "</td>\n				";

					if ( !can_access ) {
						dat += "\n						<td><span style='color: red'>ERROR</span></td>\n					";
					} else {
						dat += new Txt( "\n						<td><a href=?src=" ).Ref( this ).str( ";access_device=" ).item( this.connected_devices.Find( C ) ).str( "'>ACCESS</a></td>\n					" ).ToString();
					}
					dat += "\n					</tr>\n				";
				}
			} else {
				dat += "<span style='color: red'>No R-UST Mk. 7 Tokamak pattern Electromagnetic Field Generators connected.</span>";
			}
			popup = new Browser( user, "rust_control", this.name, 500, 400, this );
			popup.set_content( dat );
			popup.open();
			((Mob)user).set_machine( this );
			return null;
		}

		// Function from file: core_control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				
				if ( a.machine == this ) {
					((Mob)a).unset_machine(  );
				}
				return _default;
			}
			this.interact( a );
			return _default;
		}

		// Function from file: core_control.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

	}

}