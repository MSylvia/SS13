// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Bot_Cleanbot : Obj_Machinery_Bot {

		public bool cleaning = false;
		public bool screwloose = false;
		public bool oddbutton = false;
		public bool blood = true;
		public bool crayon = false;
		public ByTable blacklisted_targets = new ByTable();
		public dynamic target = null;
		public dynamic oldtarget = null;
		public Ent_Static oldloc = null;
		public dynamic path = new ByTable();
		public dynamic patrol_path = null;
		public double beacon_freq = 1445;
		public int closest_dist = 0;
		public Ent_Static closest_loc = null;
		public int failed_steps = 0;
		public bool should_patrol = false;
		public dynamic next_dest = null;
		public Ent_Static next_dest_loc = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 25;
			this.maxhealth = 25;
			this.req_access = new ByTable(new object [] { 26 });
			this.icon_state = "cleanbot0";
			this.layer = 5;
		}

		// Function from file: cleanbot.dm
		public Obj_Machinery_Bot_Cleanbot ( dynamic loc = null ) : base( (object)(loc) ) {
			Job_Janitor J = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.get_targets();
			this.icon_state = "cleanbot" + this.on;
			this.should_patrol = true;
			this.botcard = new Obj_Item_Weapon_Card_Id( this );
			J = new Job_Janitor();
			this.botcard.access = J.get_access();
			this.locked = false;

			if ( GlobalVars.radio_controller != null ) {
				GlobalVars.radio_controller.add_object( this, this.beacon_freq, GlobalVars.RADIO_NAVBEACONS );
			}
			return;
		}

		// Function from file: cleanbot.dm
		public override void explode(  ) {
			dynamic Tsec = null;
			Effect_Effect_System_SparkSpread s = null;

			this.on = false;
			this.visible_message( "<span class='danger'>" + this + " blows apart!</span>", 1 );
			Tsec = GlobalFuncs.get_turf( this );
			new Obj_Item_Weapon_ReagentContainers_Glass_Bucket( Tsec );
			new Obj_Item_Device_Assembly_ProxSensor( Tsec );

			if ( Rand13.PercentChance( 50 ) ) {
				new Obj_Item_RobotParts_LArm( Tsec );
			}
			s = new Effect_Effect_System_SparkSpread();
			s.set_up( 3, 1, this );
			s.start();
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: cleanbot.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic recv = null;
			dynamic valid = null;
			int dist = 0;

			recv = ((dynamic)signal).data["beacon"];
			valid = ((dynamic)signal).data["patrol"];

			if ( !Lang13.Bool( recv ) || !Lang13.Bool( valid ) ) {
				return false;
			}
			dist = Map13.GetDistance( this, ((dynamic)signal).source.loc );

			if ( dist < this.closest_dist && ((dynamic)signal).source.loc != this.loc ) {
				this.closest_dist = dist;
				this.closest_loc = ((dynamic)signal).source.loc;
				this.next_dest = ((dynamic)signal).data["next_patrol"];
			}

			if ( recv == this.next_dest ) {
				this.next_dest_loc = ((dynamic)signal).source.loc;
				this.next_dest = ((dynamic)signal).data["next_patrol"];
			}
			return false;
		}

		// Function from file: cleanbot.dm
		public void clean( dynamic target = null ) {
			Obj_Effect_Decal_Cleanable C = null;

			this.anchored = 1;
			this.icon_state = "cleanbot-c";
			this.visible_message( "<span class='warning'>" + this + " begins to clean up the " + target + ".</span>" );
			this.cleaning = true;
			Task13.Schedule( 20, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( target, typeof(Obj_Effect_Decal_Cleanable) )) {
					C = _a;
					

					if ( !GlobalFuncs.is_type_in_list( C, this.blacklisted_targets ) ) {
						Task13.Schedule( 5, (Task13.Closure)(() => {
							GlobalFuncs.qdel( C );
							return;
						}));
					}
				}
				this.cleaning = false;
				this.icon_state = "cleanbot" + this.on;
				this.anchored = 0;
				target = null;
				return;
			}));
			return;
		}

		// Function from file: cleanbot.dm
		public void get_targets(  ) {
			this.blacklisted_targets = new ByTable();

			if ( !this.blood ) {
				this.blacklisted_targets.Add( typeof(Obj_Effect_Decal_Cleanable_Blood) );
			}

			if ( !this.crayon ) {
				this.blacklisted_targets.Add( typeof(Obj_Effect_Decal_Cleanable_Crayon) );
			}
			return;
		}

		// Function from file: cleanbot.dm
		public void patrol_move(  ) {
			Ent_Static next = null;
			bool moved = false;

			
			if ( this.patrol_path.len <= 0 ) {
				return;
			}
			next = this.patrol_path[1];
			this.patrol_path -= next;

			if ( next == this.loc ) {
				return;
			}
			Map13.StepTowardsSimple( this, next );
			moved = next == this.loc;

			if ( !moved ) {
				this.failed_steps++;
			}

			if ( this.failed_steps > 4 ) {
				this.patrol_path = null;
				this.next_dest = null;
				this.failed_steps = 0;
			} else {
				this.failed_steps = 0;
			}
			return;
		}

		// Function from file: cleanbot.dm
		public override dynamic process(  ) {
			Ent_Static T = null;
			Game_Data gib = null;
			dynamic T2 = null;
			Obj_Effect_Decal_Cleanable sickfilth = null;
			dynamic frequency = null;
			Game_Data signal = null;

			
			if ( !this.on ) {
				return null;
			}

			if ( this.cleaning ) {
				return null;
			}

			if ( !this.screwloose && !this.oddbutton && Rand13.PercentChance( 5 ) ) {
				this.visible_message( "" + this + " makes an excited beeping booping sound!" );
			}

			if ( this.screwloose && Rand13.PercentChance( 5 ) ) {
				
				if ( this.loc is Tile_Simulated ) {
					T = this.loc;
					((dynamic)T).wet( 800 );
				}
			}

			if ( this.oddbutton && Rand13.PercentChance( 5 ) ) {
				this.visible_message( "Something flies out of " + this + ". He seems to be acting oddly." );
				gib = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Gibs), this.loc );
				((dynamic)gib).New( ((dynamic)gib).loc );
				this.oldtarget = GlobalFuncs.get_turf( gib );
			}

			if ( !Lang13.Bool( this.target ) || this.target == null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 7 ) )) {
					T2 = _b;
					

					if ( Lang13.Bool( this.target ) ) {
						break;
					}

					if ( T2 is Tile_Space ) {
						continue;
					}

					foreach (dynamic _a in Lang13.Enumerate( T2.contents, typeof(Obj_Effect_Decal_Cleanable) )) {
						sickfilth = _a;
						

						if ( sickfilth != null && !GlobalFuncs.is_type_in_list( sickfilth, this.blacklisted_targets ) ) {
							
							if ( !( T2.targetted_by != null ) && T2 != this.oldtarget ) {
								this.oldtarget = T2;
								this.target = T2;
								T2.targetted_by = this;
								break;
							}
						}
					}
				}
			}

			if ( !Lang13.Bool( this.target ) || this.target == null ) {
				
				if ( this.loc != this.oldloc ) {
					this.oldtarget = null;
				}

				if ( !this.should_patrol ) {
					return null;
				}

				if ( !Lang13.Bool( this.patrol_path ) || this.patrol_path.len < 1 ) {
					frequency = GlobalVars.radio_controller.return_frequency( this.beacon_freq );

					if ( !Lang13.Bool( frequency ) ) {
						return null;
					}
					this.closest_dist = 9999;
					this.closest_loc = null;
					this.next_dest_loc = null;
					signal = GlobalFuncs.getFromPool( typeof(Signal) );
					((dynamic)signal).source = this;
					((dynamic)signal).transmission_method = 1;
					((dynamic)signal).data = new ByTable().Set( "findbeacon", "patrol" );
					new ByTable().Set( 1, this ).Set( 2, signal ).Set( "filter", GlobalVars.RADIO_NAVBEACONS ).Apply( Lang13.BindFunc( frequency, "post_signal" ) );
					Task13.Schedule( 5, (Task13.Closure)(() => {
						
						if ( !( this.next_dest_loc != null ) ) {
							this.next_dest_loc = this.closest_loc;
						}

						if ( this.next_dest_loc != null ) {
							this.patrol_path = GlobalFuncs.AStar( this.loc, this.next_dest_loc, typeof(Tile).GetMethod( "CardinalTurfsWithAccess" ), typeof(Tile).GetMethod( "Distance" ), 0, 120, null, null, this.botcard, null );
						}
						return;
					}));
				} else {
					this.patrol_move();
				}
				return null;
			}

			if ( !Lang13.Bool( this.path ) ) {
				this.path = new ByTable();
			}

			if ( Lang13.Bool( this.target ) && this.path.len == 0 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( !( this != null ) || !Lang13.Bool( this.target ) ) {
						return;
					}
					this.path = GlobalFuncs.AStar( this.loc, this.target, typeof(Tile).GetMethod( "CardinalTurfsWithAccess" ), typeof(Tile).GetMethod( "Distance_cardinal" ), 0, 30 );

					if ( !Lang13.Bool( this.path ) ) {
						this.path = new ByTable();
					}

					if ( this.path.len == 0 ) {
						this.oldtarget = this.target;
						this.target.targetted_by = null;
						this.target = null;
					}
					return;
				}));
				return null;
			}

			if ( this.path.len > 0 && Lang13.Bool( this.target ) && this.target != null ) {
				Map13.StepTowards( this, this.path[1], 0 );
				this.path -= this.path[1];
			} else if ( this.path.len == 1 ) {
				Map13.StepTowards( this, this.target, 0 );
			}

			if ( Lang13.Bool( this.target ) && this.target != null ) {
				this.patrol_path = null;

				if ( this.loc == this.target ) {
					this.clean( this.target );
					this.path = new ByTable();
					this.target = null;
					return null;
				}
			}
			this.oldloc = this.loc;
			return null;
		}

		// Function from file: cleanbot.dm
		public override void Emag( dynamic user = null ) {
			base.Emag( (object)(user) );

			if ( this.open && !this.locked ) {
				
				if ( Lang13.Bool( user ) ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>The " + this + " buzzes and beeps.</span>" );
				}
				this.oddbutton = true;
				this.screwloose = true;
			}
			return;
		}

		// Function from file: cleanbot.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.allowed( Task13.User ) && !this.open && !( this.emagged != 0 ) ) {
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the " + this + " behaviour controls.</span>" );
				} else {
					
					if ( this.emagged != 0 ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>ERROR</span>" );
					}

					if ( this.open ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>Please close the access panel before locking it.</span>" );
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>This " + this + " doesn't seem to respect your authority.</span>" );
					}
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: cleanbot.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double freq = 0;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			dynamic _a = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _a=="start" ) {
				
				if ( this.on ) {
					this.turn_off();
				} else {
					this.turn_on();
				}
			} else if ( _a=="blood" ) {
				this.blood = !this.blood;
				this.get_targets();
				this.updateUsrDialog();
			} else if ( _a=="crayon" ) {
				this.crayon = !this.crayon;
				this.get_targets();
				this.updateUsrDialog();
			} else if ( _a=="patrol" ) {
				this.should_patrol = !this.should_patrol;
				this.patrol_path = null;
				this.updateUsrDialog();
			} else if ( _a=="freq" ) {
				freq = ( String13.ParseNumber( Interface13.Input( "Select frequency for  navigation beacons", "Frequnecy", String13.NumberToString( this.beacon_freq / 10 ), null, null, InputType.Any ) ) ??0) * 10;

				if ( freq > 0 ) {
					this.beacon_freq = freq;
				}
				this.updateUsrDialog();
			} else if ( _a=="screw" ) {
				this.screwloose = !this.screwloose;
				GlobalFuncs.to_chat( Task13.User, "<span class='notice>You twiddle the screw.</span>" );
				this.updateUsrDialog();
			} else if ( _a=="oddbutton" ) {
				this.oddbutton = !this.oddbutton;
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You press the weird button.</span>" );
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: cleanbot.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic dat = null;

			dat += "\n<TT><B>Automatic Station Cleaner v1.0</B></TT><BR><BR>\nStatus: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=start'>" ).item( ( this.on ? "On" : "Off" ) ).str( "</A>" ).ToString() + "<BR>\nBehaviour controls are " + ( this.locked ? "locked" : "unlocked" ) + "<BR>\nMaintenance panel is " + ( this.open ? "opened" : "closed" );

			if ( !this.locked || user is Mob_Living_Silicon ) {
				dat += "<BR>Cleans Blood: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=blood'>" ).item( ( this.blood ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>";
				dat += "<BR>Cleans Crayon: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=crayon'>" ).item( ( this.crayon ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>";
				dat += "<BR>Patrol station: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=patrol'>" ).item( ( this.should_patrol ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>";
			}

			if ( this.open && !this.locked ) {
				dat += "\nOdd looking screw twiddled: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=screw'>" ).item( ( this.screwloose ? "Yes" : "No" ) ).str( "</A>" ).ToString() + "<BR>\nWeird button pressed: " + new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=oddbutton'>" ).item( ( this.oddbutton ? "Yes" : "No" ) ).str( "</A>" ).ToString();
			}
			Interface13.Browse( user, "<HEAD><TITLE>Cleaner v1.0 controls</TITLE></HEAD>" + dat, "window=autocleaner" );
			GlobalFuncs.onclose( user, "autocleaner" );
			return null;
		}

		// Function from file: cleanbot.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			Task13.User.set_machine( this );
			this.interact( a );
			return _default;
		}

		// Function from file: cleanbot.dm
		public override void turn_off(  ) {
			base.turn_off();

			if ( !( this.target == null ) ) {
				this.target.targetted_by = null;
			}
			this.target = null;
			this.oldtarget = null;
			this.oldloc = null;
			this.icon_state = "cleanbot" + this.on;
			this.path = new ByTable();
			this.updateUsrDialog();
			return;
		}

		// Function from file: cleanbot.dm
		public override bool turn_on(  ) {
			bool _default = false;

			_default = base.turn_on();
			this.icon_state = "cleanbot" + this.on;
			this.updateUsrDialog();
			return _default;
		}

	}

}