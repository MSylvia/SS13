// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Apiary : Obj_Machinery {

		public double nutrilevel = 0;
		public int yieldmod = 1;
		public int mut = 1;
		public int toxic = 0;
		public bool dead = false;
		public int health = -1;
		public int maxhealth = 100;
		public int lastcycle = 0;
		public int cycledelay = 100;
		public int beezeez = 0;
		public int swarming = 0;
		public int honey_level = 0;
		public double bees_in_hive = 0;
		public ByTable owned_bee_swarms = new ByTable();
		public Type hydrotray_type = typeof(Obj_Machinery_PortableAtmospherics_Hydroponics);

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 24;
			this.icon = "icons/obj/hydroponics.dmi";
			this.icon_state = "hydrotray3";
		}

		// Function from file: bees_apiary.dm
		public Obj_Machinery_Apiary ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.overlays.Add( new Image( "icons/obj/apiary_bees_etc.dmi", null, "apiary0" ) );
			return;
		}

		// Function from file: bees_apiary.dm
		public void angry_swarm( dynamic M = null ) {
			Mob_Living_SimpleAnimal_Bee B = null;
			int spawn_strength = 0;
			dynamic T = null;
			Game_Data B2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.owned_bee_swarms, typeof(Mob_Living_SimpleAnimal_Bee) )) {
				B = _a;
				
				B.feral = 25;
				B.target = M;
			}
			this.swarming = 25;

			while (this.bees_in_hive >= 1) {
				spawn_strength = Num13.Floor( this.bees_in_hive );

				if ( this.bees_in_hive >= 5 ) {
					spawn_strength = 6;
				}
				T = GlobalFuncs.get_turf( this );
				B2 = GlobalFuncs.getFromPool( typeof(Mob_Living_SimpleAnimal_Bee), T, this );
				((dynamic)B2).target = M;
				((dynamic)B2).strength = spawn_strength;
				((dynamic)B2).feral = 25;
				((dynamic)B2).mut = this.mut;
				((dynamic)B2).toxic = this.toxic;
				this.bees_in_hive -= spawn_strength;
			}
			return;
		}

		// Function from file: bees_apiary.dm
		public void die(  ) {
			dynamic B = null;

			
			if ( this.owned_bee_swarms.len != 0 ) {
				B = Rand13.PickFromTable( this.owned_bee_swarms );
				B.target_turf = GlobalFuncs.get_turf( this );
				B.strength -= 1;

				if ( Convert.ToDouble( B.strength ) <= 0 ) {
					GlobalFuncs.returnToPool( B );
				} else if ( Convert.ToDouble( B.strength ) <= 5 ) {
					B.icon_state = "bees" + B.strength;
				}
			}
			this.bees_in_hive = 0;
			this.health = 0;
			return;
		}

		// Function from file: bees_apiary.dm
		public override dynamic process(  ) {
			Mob_Living_SimpleAnimal_Bee B = null;
			Mob_Living_SimpleAnimal_Bee B2 = null;
			dynamic B3 = null;
			int newlevel = 0;
			dynamic T = null;
			Game_Data B4 = null;
			Obj_Machinery_PortableAtmospherics_Hydroponics H = null;

			
			if ( this.swarming > 0 ) {
				this.swarming -= 1;

				if ( this.swarming <= 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Mob_Living_SimpleAnimal_Bee) )) {
						B = _a;
						
						this.bees_in_hive += B.strength;
						GlobalFuncs.returnToPool( B );
					}
				}
			} else if ( this.bees_in_hive < 10 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Mob_Living_SimpleAnimal_Bee) )) {
					B2 = _b;
					
					this.bees_in_hive += B2.strength;
					GlobalFuncs.returnToPool( B2 );
				}
			}

			if ( Game13.time > this.lastcycle + this.cycledelay ) {
				this.lastcycle = Game13.time;

				if ( this.health < 0 ) {
					return null;
				}

				if ( this.beezeez > 0 ) {
					this.beezeez -= 1;
					this.nutrilevel += 2;
					this.health = Num13.MinInt( this.health + 1, this.maxhealth );

					if ( Rand13.PercentChance( 10 ) ) {
						this.toxic = Num13.MaxInt( 0, this.toxic - 1 );
					}
				}
				this.nutrilevel -= this.bees_in_hive / 10 + this.owned_bee_swarms.len / 5;

				if ( this.nutrilevel > 0 ) {
					this.bees_in_hive += this.yieldmod;
					this.health = Num13.MinInt( this.health + 1, this.maxhealth );
				} else {
					this.health += Num13.MaxInt( ((int)( this.nutrilevel - 1 )), Num13.Floor( -this.health / 2 ) );
					this.bees_in_hive += Num13.MaxInt( ((int)( this.nutrilevel - 1 )), Num13.Floor( -this.bees_in_hive / 2 ) );

					if ( this.owned_bee_swarms.len != 0 ) {
						B3 = Rand13.PickFromTable( this.owned_bee_swarms );
						B3.target_turf = GlobalFuncs.get_turf( this );
					}
				}

				if ( this.toxic > 0 ) {
					this.toxic -= 1;
					this.health -= 1;
				}
				newlevel = 0;

				if ( this.health >= 90 ) {
					newlevel = 3;
				} else if ( this.health >= 45 ) {
					newlevel = 2;
				} else if ( this.health >= 15 ) {
					newlevel = 1;
				} else {
					newlevel = 0;
				}

				if ( newlevel != this.honey_level ) {
					this.overlays.Remove( new Image( "icons/obj/apiary_bees_etc.dmi", null, "apiary" + this.honey_level ) );
					this.overlays.Add( new Image( "icons/obj/apiary_bees_etc.dmi", null, "apiary" + newlevel ) );
					this.honey_level = newlevel;
				}

				if ( this.health <= 0 ) {
					return null;
				}

				if ( Rand13.PercentChance( 2 ) ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/bees.ogg", Num13.MinInt( this.honey_level * 20 + 20, 100 ), 1 );
				}

				if ( this.bees_in_hive >= 10 && Rand13.PercentChance( ((int)( this.bees_in_hive * 10 )) ) ) {
					T = GlobalFuncs.get_turf( this );
					B4 = GlobalFuncs.getFromPool( typeof(Mob_Living_SimpleAnimal_Bee), T, this );
					this.owned_bee_swarms.Add( B4 );
					((dynamic)B4).mut = this.mut;
					((dynamic)B4).toxic = this.toxic;
					this.bees_in_hive -= 1;
				}

				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Obj_Machinery_PortableAtmospherics_Hydroponics) )) {
					H = _c;
					

					if ( H.seed != null && !H.dead && Rand13.PercentChance( this.owned_bee_swarms.len * 10 ) ) {
						this.nutrilevel++;

						if ( H.nutrilevel < 10 ) {
							H.nutrilevel++;
						}
					}
				}
			}
			return null;
		}

		// Function from file: bees_apiary.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 1 ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: bees_apiary.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic created_tray = null;
			Obj I = null;
			Obj I2 = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Honeycomb H = null;
			dynamic N = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( a is Obj_Item_QueenBee ) {
				
				if ( this.health > 0 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>There is already a queen in there.</span>" );
				} else if ( Lang13.Bool( b.drop_item( a ) ) ) {
					this.health = 10;
					this.nutrilevel = Num13.MinInt( 10, ((int)( this.nutrilevel + 10 )) );
					GlobalFuncs.qdel( a );
					GlobalFuncs.to_chat( b, "<span class='notice'>You carefully insert the queen into " + this + ", she gets busy making a hive.</span>" );
					this.bees_in_hive = 0;
				}
			} else if ( a is Obj_Item_Beezeez ) {
				this.beezeez += 100;
				this.nutrilevel += 10;
				b.drop_item( a );

				if ( this.health > 0 ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ". A relaxed humming appears to pick up.</span>" );
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ". Now it just needs some bees.</span>" );
				}
				GlobalFuncs.qdel( a );
			} else if ( a is Obj_Item_Weapon_Hatchet ) {
				
				if ( this.health > 0 ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='danger'>" ).the( b ).item().str( " begins harvesting the honeycombs, the bees don't like that.</span>" ).ToString(), "<span class='danger'>You begin harvesting the honeycombs, the bees don't like that.</span>" );
					this.angry_swarm( b );
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You begin to dislodge the dead apiary from the tray.</span>" );
				}

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					created_tray = Lang13.Call( this.hydrotray_type, this.loc );
					created_tray.component_parts = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj) )) {
						I = _a;
						
						created_tray.component_parts += I;
						I.loc = created_tray;
						this.component_parts -= I;
					}

					foreach (dynamic _b in Lang13.Enumerate( this.contents, typeof(Obj) )) {
						I2 = _b;
						
						I2.loc = created_tray;
						this.contents.Remove( I2 );
					}
					new Obj_Item_Apiary( this.loc );

					if ( this.health > 0 ) {
						
						while (this.health > 15) {
							this.health -= 15;
							H = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Honeycomb( this.loc );

							if ( this.toxic > 0 ) {
								((Reagents)H.reagents).add_reagent( "toxin", this.toxic );
							}
						}

						if ( this.honey_level >= 3 ) {
							new Obj_Item_QueenBee( this.loc );
						}
						GlobalFuncs.to_chat( b, "<span class='notice'>You successfully harvest the honeycombs. The empty apiary can be relocated.</span>" );
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>You dislodge the apiary from the tray.</span>" );
					}
					GlobalFuncs.qdel( this );
				}
			} else if ( a is Obj_Item_Weapon_BeeNet ) {
				N = a;

				if ( N.caught_bees > 0 ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You empty the bees into the apiary.</span>" );
					this.bees_in_hive += N.caught_bees;
					N.caught_bees = 0;
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>There are no more bees in the net.</span>" );
				}
			} else {
				((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).the( b ).item().str( " hits " ).the( this ).item().str( " with " ).the( a ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>You hit " ).the( this ).item().str( " with " ).the( a ).item().str( "!</span>" ).ToString() );
				this.angry_swarm( b );
			}
			return null;
		}

		// Function from file: bees_apiary.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Proj is Obj_Item_Projectile_Energy_Floramut ) {
				this.mut++;
			} else if ( Proj is Obj_Item_Projectile_Energy_Florayield ) {
				
				if ( !( this.yieldmod != 0 ) ) {
					this.yieldmod += 1;
				} else if ( Rand13.PercentChance( ((int)( 1 / ( this.yieldmod * this.yieldmod ) * 100 )) ) ) {
					this.yieldmod += 1;
				}
			} else {
				base.bullet_act( (object)(Proj), (object)(def_zone) );

				if ( this != null ) {
					this.angry_swarm();
				}
				return null;
			}
			return null;
		}

		// Function from file: bees_apiary.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.health > 0 ) {
				GlobalFuncs.to_chat( user, "You can hear a loud buzzing coming from the inside." );
			} else {
				GlobalFuncs.to_chat( user, "There doesn't seem to be any bees in it." );
			}

			switch ((int)( this.honey_level )) {
				case 1:
					GlobalFuncs.to_chat( user, "<span class='info'>Looks like there's a bit of honey in it.</span>" );
					break;
				case 2:
					GlobalFuncs.to_chat( user, "<span class='info'>There's a decent amount of honey dripping from it!</span>" );
					break;
				case 3:
					GlobalFuncs.to_chat( user, "<span class='info'>It's full of honey!</span>" );
					break;
			}
			return null;
		}

	}

}