// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Weapon_Ballistic_Scattershot : Obj_Item_MechaParts_MechaEquipment_Weapon_Ballistic {

		public int projectiles_per_shot = 4;
		public double deviation = 061;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.equip_cooldown = 20;
			this.projectile = typeof(Obj_Item_Projectile_Bullet_Midbullet);
			this.fire_sound = "sound/weapons/shotgun.ogg";
			this.projectiles = 40;
			this.projectile_energy_cost = 25;
			this.icon_state = "mecha_scatter";
		}

		public Obj_Item_MechaParts_MechaEquipment_Weapon_Ballistic_Scattershot ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: weapons.dm
		public override bool action( dynamic target = null ) {
			dynamic curloc = null;
			dynamic targloc = null;
			int target_x = 0;
			int target_y = 0;
			int target_z = 0;
			double i = 0;
			Game_Data A = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}
			curloc = GlobalFuncs.get_turf( this.chassis );
			targloc = GlobalFuncs.get_turf( target );

			if ( !Lang13.Bool( curloc ) || !Lang13.Bool( targloc ) ) {
				return false;
			}
			target_x = Convert.ToInt32( targloc.x );
			target_y = Convert.ToInt32( targloc.y );
			target_z = Convert.ToInt32( targloc.z );
			targloc = null;

			foreach (dynamic _a in Lang13.IterateRange( 1, Num13.MinInt( this.projectiles, this.projectiles_per_shot ) )) {
				i = _a;
				
				targloc = Map13.GetTile( ((int)( target_x + GlobalFuncs.GaussRandRound( this.deviation, 1 ) )), ((int)( target_y + GlobalFuncs.GaussRandRound( this.deviation, 1 ) )), target_z );

				if ( !Lang13.Bool( targloc ) || targloc == curloc ) {
					break;
				}
				GlobalFuncs.playsound( this.chassis, this.fire_sound, 80, 1 );
				A = GlobalFuncs.getFromPool( this.projectile, curloc );
				this.projectiles--;
				((dynamic)A).original = target;
				((dynamic)A).current = curloc;
				((dynamic)A).starting = curloc;
				((dynamic)A).yo = targloc.y - curloc.y;
				((dynamic)A).xo = targloc.x - curloc.x;
				this.set_ready_state( false );
				((dynamic)A).OnFired();
				((Obj)A).process();
			}
			this.log_message( "Fired from " + this.name + ", targeting " + target + "." );
			this.do_after_cooldown();
			return false;
		}

	}

}