// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Book : Obj_Item_Weapon {

		public string dat = null;
		public bool due_date = false;
		public dynamic author = null;
		public bool unique = false;
		public dynamic title = null;
		public bool carved = false;
		public string wiki_page = null;
		public int forbidden = 0;
		public dynamic store = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throw_speed = 1;
			this.throw_range = 5;
			this.attack_verb = new ByTable(new object [] { "bashed", "whacked", "educated" });
			this.autoignition_temperature = 519.1500244140625;
			this.fire_fuel = 3;
			this.icon = "icons/obj/library.dmi";
			this.icon_state = "book";
		}

		// Function from file: lib_items.dm
		public Obj_Item_Weapon_Book ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( this.wiki_page ) ) {
				this.dat = "\n		<html>\n			<body>\n				<iframe width='100%' height='100%' src=\"http://ss13.moe/wiki/index.php?title=" + this.wiki_page + "&printable=yes\"></iframe>\n			</body>\n		</html>\n		";
			}
			return;
		}

		// Function from file: lib_items.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic choice = null;
			dynamic newtitle = null;
			string content = null;
			dynamic newauthor = null;
			dynamic scanner = null;
			Borrowbook b2 = null;
			Obj_Item_Weapon book = null;

			
			if ( this.carved ) {
				
				if ( !Lang13.Bool( this.store ) ) {
					
					if ( Convert.ToDouble( a.w_class ) < 3 ) {
						
						if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
							this.store = a;
							GlobalFuncs.to_chat( b, "<span class='notice'>You put " + a + " in " + this.title + ".</span>" );
							return null;
						}
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>" + a + " won't fit in " + this.title + ".</span>" );
						return null;
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>There's already something in " + this.title + "!</span>" );
					return null;
				}
			}

			if ( a is Obj_Item_Weapon_Pen ) {
				
				if ( this.unique ) {
					GlobalFuncs.to_chat( b, "These pages don't seem to take the ink well. Looks like you can't modify it." );
					return null;
				}
				choice = Interface13.Input( "What would you like to change?", null, null, null, new ByTable(new object [] { "Title", "Contents", "Author", "Cancel" }), InputType.Any );

				dynamic _a = choice; // Was a switch-case, sorry for the mess.
				if ( _a=="Title" ) {
					newtitle = GlobalFuncs.reject_bad_text( GlobalFuncs.stripped_input( Task13.User, "Write a new title:" ) );

					if ( !Lang13.Bool( newtitle ) ) {
						GlobalFuncs.to_chat( Task13.User, "The title is invalid." );
						return null;
					} else {
						this.name = newtitle;
						this.title = newtitle;
					}
				} else if ( _a=="Contents" ) {
					content = GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Write your book's contents (HTML NOT allowed):", null, null, null, InputType.Null | InputType.StrMultiline ) );

					if ( !Lang13.Bool( content ) ) {
						GlobalFuncs.to_chat( Task13.User, "The content is invalid." );
						return null;
					} else {
						this.dat += content;
					}
				} else if ( _a=="Author" ) {
					newauthor = GlobalFuncs.stripped_input( Task13.User, "Write the author's name:" );

					if ( !Lang13.Bool( newauthor ) ) {
						GlobalFuncs.to_chat( Task13.User, "The name is invalid." );
						return null;
					} else {
						this.author = newauthor;
					}
				} else {
					return null;
				}
			} else if ( a is Obj_Item_Weapon_Barcodescanner ) {
				scanner = a;

				if ( !Lang13.Bool( scanner.computer ) ) {
					GlobalFuncs.to_chat( b, "" + a + "'s screen flashes: 'No associated computer found!'" );
				} else {
					
					dynamic _d = scanner.mode; // Was a switch-case, sorry for the mess.
					if ( _d==0 ) {
						scanner.book = this;
						GlobalFuncs.to_chat( b, "" + a + "'s screen flashes: 'Book stored in buffer.'" );
					} else if ( _d==1 ) {
						scanner.book = this;
						scanner.computer.buffer_book = this.name;
						GlobalFuncs.to_chat( b, "" + a + "'s screen flashes: 'Book stored in buffer. Book title stored in associated computer buffer.'" );
					} else if ( _d==2 ) {
						scanner.book = this;

						foreach (dynamic _b in Lang13.Enumerate( scanner.computer.checkouts, typeof(Borrowbook) )) {
							b2 = _b;
							

							if ( b2.bookname == this.name ) {
								scanner.computer.checkouts.Remove( b2 );
								GlobalFuncs.to_chat( b, "" + a + "'s screen flashes: 'Book stored in buffer. Book has been checked in.'" );
								return null;
							}
						}
						GlobalFuncs.to_chat( b, "" + a + "'s screen flashes: 'Book stored in buffer. No active check-out record found for current title.'" );
					} else if ( _d==3 ) {
						scanner.book = this;

						foreach (dynamic _c in Lang13.Enumerate( scanner.computer.inventory, typeof(Obj_Item_Weapon) )) {
							book = _c;
							

							if ( book == this ) {
								GlobalFuncs.to_chat( b, "" + a + "'s screen flashes: 'Book stored in buffer. Title already present in inventory, aborting to avoid duplicate entry.'" );
								return null;
							}
						}
						scanner.computer.inventory.Add( this );
						GlobalFuncs.to_chat( b, "" + a + "'s screen flashes: 'Book stored in buffer. Title added to general inventory.'" );
					}
				}
			} else if ( a is Obj_Item_Weapon_Kitchen_Utensil_Knife_Large || a is Obj_Item_Weapon_Wirecutters ) {
				
				if ( this.carved ) {
					return null;
				}
				GlobalFuncs.to_chat( b, "<span class='notice'>You begin to carve out " + this.title + ".</span>" );

				if ( GlobalFuncs.do_after( b, this, 30 ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You carve out the pages from " + this.title + "! You didn't want to read it anyway.</span>" );
					this.carved = true;
					return null;
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: lib_items.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			
			if ( user is Mob_Dead_Observer && GlobalFuncs.in_range( this, user ) ) {
				this.read_a_motherfucking_book( user );
			} else {
				base.examine( (object)(user), size );
			}
			return null;
		}

		// Function from file: lib_items.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( Lang13.Bool( this.store ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>" + this.store + " falls out of " + this.title + "!</span>" );
				((Ent_Dynamic)this.store).forceMove( GlobalFuncs.get_turf( this ) );
				this.store = null;
				return null;
			}
			this.read_a_motherfucking_book( user );
			return null;
		}

		// Function from file: lib_items.dm
		public void read_a_motherfucking_book( dynamic user = null ) {
			
			if ( this.carved ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>The pages of " + this.title + " have been cut out!</span>" );
				return;
			}

			if ( Lang13.Bool( this.dat ) ) {
				Interface13.Browse( user, "<TT><I>Penned by " + this.author + ".</I></TT> <BR>" + ( "" + this.dat ), "window=book" );

				if ( !( user is Mob_Dead_Observer ) ) {
					((Ent_Static)user).visible_message( "" + user + " opens a book titled \"" + this.title + "\" and begins reading intently." );
				}
				GlobalFuncs.onclose( user, "book" );
			} else {
				GlobalFuncs.to_chat( user, "This book is completely blank!" );
			}
			return;
		}

		// Function from file: lib_items.dm
		public override dynamic cultify(  ) {
			new Obj_Item_Weapon_Tome( this.loc );
			base.cultify();
			return null;
		}

	}

}