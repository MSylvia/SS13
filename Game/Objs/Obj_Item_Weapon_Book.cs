// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Book : Obj_Item_Weapon {

		public dynamic dat = null;
		public bool due_date = false;
		public string author = null;
		public bool unique = false;
		public dynamic title = null;
		public string window_size = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throw_speed = 1;
			this.throw_range = 5;
			this.attack_verb = new ByTable(new object [] { "bashed", "whacked", "educated" });
			this.burn_state = 0;
			this.icon = "icons/obj/library.dmi";
			this.icon_state = "book";
		}

		public Obj_Item_Weapon_Book ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: lib_items.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic choice = null;
			dynamic newtitle = null;
			string content = null;
			string newauthor = null;
			dynamic scanner = null;
			Borrowbook b = null;
			Obj_Item_Weapon book = null;
			Obj_Item_Weapon_Storage_Book B = null;

			
			if ( A is Obj_Item_Weapon_Pen ) {
				
				if ( GlobalFuncs.is_blind( user ) != 0 ) {
					return null;
				}

				if ( this.unique ) {
					user.WriteMsg( "<span class='warning'>These pages don't seem to take the ink well! Looks like you can't modify it.</span>" );
					return null;
				}
				choice = Interface13.Input( "What would you like to change?", null, null, null, new ByTable(new object [] { "Title", "Contents", "Author", "Cancel" }), InputType.Any );

				dynamic _a = choice; // Was a switch-case, sorry for the mess.
				if ( _a=="Title" ) {
					newtitle = GlobalFuncs.reject_bad_text( GlobalFuncs.stripped_input( Task13.User, "Write a new title:" ) );

					if ( !Lang13.Bool( newtitle ) ) {
						Task13.User.WriteMsg( "The title is invalid." );
						return null;
					} else {
						this.name = newtitle;
						this.title = newtitle;
					}
				} else if ( _a=="Contents" ) {
					content = GlobalFuncs.stripped_input( Task13.User, "Write your book's contents (HTML NOT allowed):", "", "", 8192 );

					if ( !Lang13.Bool( content ) ) {
						Task13.User.WriteMsg( "The content is invalid." );
						return null;
					} else {
						this.dat += content;
					}
				} else if ( _a=="Author" ) {
					newauthor = GlobalFuncs.stripped_input( Task13.User, "Write the author's name:" );

					if ( !Lang13.Bool( newauthor ) ) {
						Task13.User.WriteMsg( "The name is invalid." );
						return null;
					} else {
						this.author = newauthor;
					}
				} else {
					return null;
				}
			} else if ( A is Obj_Item_Weapon_Barcodescanner ) {
				scanner = A;

				if ( !Lang13.Bool( scanner.computer ) ) {
					user.WriteMsg( "" + A + "'s screen flashes: 'No associated computer found!'" );
				} else {
					
					dynamic _d = scanner.mode; // Was a switch-case, sorry for the mess.
					if ( _d==0 ) {
						scanner.book = this;
						user.WriteMsg( "" + A + "'s screen flashes: 'Book stored in buffer.'" );
					} else if ( _d==1 ) {
						scanner.book = this;
						scanner.computer.buffer_book = this.name;
						user.WriteMsg( "" + A + "'s screen flashes: 'Book stored in buffer. Book title stored in associated computer buffer.'" );
					} else if ( _d==2 ) {
						scanner.book = this;

						foreach (dynamic _b in Lang13.Enumerate( scanner.computer.checkouts, typeof(Borrowbook) )) {
							b = _b;
							

							if ( b.bookname == this.name ) {
								scanner.computer.checkouts.Remove( b );
								user.WriteMsg( "" + A + "'s screen flashes: 'Book stored in buffer. Book has been checked in.'" );
								return null;
							}
						}
						user.WriteMsg( "" + A + "'s screen flashes: 'Book stored in buffer. No active check-out record found for current title.'" );
					} else if ( _d==3 ) {
						scanner.book = this;

						foreach (dynamic _c in Lang13.Enumerate( scanner.computer.inventory, typeof(Obj_Item_Weapon) )) {
							book = _c;
							

							if ( book == this ) {
								user.WriteMsg( "" + A + "'s screen flashes: 'Book stored in buffer. Title already present in inventory, aborting to avoid duplicate entry.'" );
								return null;
							}
						}
						scanner.computer.inventory.Add( this );
						user.WriteMsg( "" + A + "'s screen flashes: 'Book stored in buffer. Title added to general inventory.'" );
					}
				}
			} else if ( A is Obj_Item_Weapon_Kitchen_Knife || A is Obj_Item_Weapon_Wirecutters ) {
				user.WriteMsg( "<span class='notice'>You begin to carve out " + this.title + "...</span>" );

				if ( GlobalFuncs.do_after( user, 30, null, this ) ) {
					user.WriteMsg( "<span class='notice'>You carve out the pages from " + this.title + "! You didn't want to read it anyway.</span>" );
					B = new Obj_Item_Weapon_Storage_Book();
					B.name = this.name;
					B.title = this.title;
					B.icon_state = this.icon_state;

					if ( user.l_hand == this || user.r_hand == this ) {
						GlobalFuncs.qdel( this );
						((Mob)user).put_in_hands( B );
						return null;
					} else {
						B.loc = this.loc;
						GlobalFuncs.qdel( this );
						return null;
					}
				}
				return null;
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: lib_items.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( GlobalFuncs.is_blind( user ) != 0 ) {
				return null;
			}

			if ( user is Mob_Living_Carbon_Monkey ) {
				user.WriteMsg( "<span class='notice'>You skim through the book but can't comprehend any of it.</span>" );
				return null;
			}

			if ( Lang13.Bool( this.dat ) ) {
				Interface13.Browse( user, "<TT><I>Penned by " + this.author + ".</I></TT> <BR>" + ( "" + this.dat ), "window=book" + ( this.window_size != null ? ";size=" + this.window_size : "" ) );
				((Ent_Static)user).visible_message( "" + user + " opens a book titled \"" + this.title + "\" and begins reading intently." );
				GlobalFuncs.onclose( user, "book" );
			} else {
				user.WriteMsg( "<span class='notice'>This book is completely blank!</span>" );
			}
			return null;
		}

	}

}