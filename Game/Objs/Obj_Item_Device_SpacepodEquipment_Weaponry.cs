// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_SpacepodEquipment_Weaponry : Obj_Item_Device_SpacepodEquipment {

		public Type projectile_type = null;
		public int shot_cost = 0;
		public int? shots_per = 1;
		public string fire_sound = null;
		public int fire_delay = 10;
		public string verb_name = "What the fuck?";
		public string verb_desc = "How did you get this?";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/pods/ship.dmi";
			this.icon_state = "blank";
		}

		public Obj_Item_Device_SpacepodEquipment_Weaponry ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: equipment.dm
		[VerbInfo( group: "Spacepod", access: VerbAccess.InUserLocation )]
		public void fire_weapon_system(  ) {
			Obj_Item_Device_SpacepodEquipment_Weaponry S = null;
			dynamic SPE = null;

			S = this;
			SPE = ((dynamic)S).equipment_system.weapon_system;
			((Obj_Item_Device_SpacepodEquipment_Weaponry)SPE).fire_weapons();
			return;
		}

		// Function from file: equipment.dm
		public void fire_weapons(  ) {
			dynamic firstloc = null;
			Tile secondloc = null;
			int olddir = 0;
			int? i = null;
			dynamic projone = null;
			dynamic projtwo = null;

			
			if ( this.my_atom.next_firetime > Game13.time ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Your weapons are recharging.</span>" );
				return;
			}

			if ( !( this.my_atom.equipment_system != null ) || !Lang13.Bool( this.my_atom.equipment_system.weapon_system ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Missing equipment or weapons.</span>" );
				this.my_atom.verbs.Remove( typeof(Obj_Item_Device_SpacepodEquipment_Weaponry).GetMethod( "fire_weapon_system" ) );
				return;
			}

			if ( !Lang13.Bool( this.my_atom.battery.use( this.shot_cost ) ) ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this.my_atom ).item().str( "'s cell is too low on charge!</span>" ).ToString() );
				return;
			}
			this.dir = this.my_atom.dir;
			i = null;
			i = 0;

			while (( i ??0) < ( this.shots_per ??0)) {
				
				if ( olddir != this.dir ) {
					
					switch ((int)( this.dir )) {
						case 1:
							firstloc = GlobalFuncs.get_turf( this.my_atom );
							firstloc = Map13.GetStep( firstloc, ((int)( GlobalVars.NORTH )) );
							secondloc = Map13.GetStep( firstloc, ((int)( GlobalVars.EAST )) );
							break;
						case 2:
							firstloc = GlobalFuncs.get_turf( this.my_atom );
							secondloc = Map13.GetStep( firstloc, ((int)( GlobalVars.EAST )) );
							break;
						case 4:
							firstloc = GlobalFuncs.get_turf( this.my_atom );
							firstloc = Map13.GetStep( firstloc, ((int)( GlobalVars.EAST )) );
							secondloc = Map13.GetStep( firstloc, ((int)( GlobalVars.NORTH )) );
							break;
						case 8:
							firstloc = GlobalFuncs.get_turf( this.my_atom );
							secondloc = Map13.GetStep( firstloc, ((int)( GlobalVars.NORTH )) );
							break;
					}
				}
				olddir = this.dir;
				projone = Lang13.Call( this.projectile_type, firstloc );
				projtwo = Lang13.Call( this.projectile_type, secondloc );
				projone.starting = GlobalFuncs.get_turf( firstloc );
				projone.shot_from = this.my_atom;
				projone.firer = Task13.User;
				projone.def_zone = "chest";
				projtwo.starting = GlobalFuncs.get_turf( secondloc );
				projtwo.shot_from = this.my_atom;
				projtwo.firer = Task13.User;
				projtwo.def_zone = "chest";
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.playsound( this.my_atom, this.fire_sound, 50, 1 );
					((Obj_Item_Projectile)projone).dumbfire( this.dir );
					((Obj_Item_Projectile)projtwo).dumbfire( this.dir );
					return;
				}));
				Task13.Sleep( 1 );
				i++;
			}
			this.my_atom.next_firetime = Game13.time + this.fire_delay;
			return;
		}

	}

}