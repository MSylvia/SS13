// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Photocopier : Obj_Machinery {

		public bool opened = false;
		public dynamic copy = null;
		public dynamic photocopy = null;
		public int? copies = 1;
		public int toner = 30;
		public int? maxcopies = 10;
		public string greytoggle = "Greyscale";
		public Ent_Static ass = null;
		public bool copying = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 30;
			this.active_power_usage = 200;
			this.icon = "icons/obj/library.dmi";
			this.icon_state = "bigscanner";
		}

		// Function from file: photocopier.dm
		public Obj_Machinery_Photocopier ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Photocopier(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: photocopier.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}
			return !mover.density || !this.density || mover.pass_flags != 0;
		}

		// Function from file: photocopier.dm
		public bool copier_blocked( dynamic user = null ) {
			Ent_Dynamic AM = null;

			
			if ( Lang13.Bool( this.gcDestroyed ) ) {
				return false;
			}

			if ( this.loc.density ) {
				return true;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
				AM = _a;
				

				if ( AM == this ) {
					continue;
				}

				if ( AM.density ) {
					
					if ( Lang13.Bool( AM.flags & 512 ) ) {
						
						if ( !AM.CanPass( user, this.loc ) ) {
							return true;
						}
					} else {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: photocopier.dm
		public bool copier_empty(  ) {
			
			if ( Lang13.Bool( this.copy ) || Lang13.Bool( this.photocopy ) || this.check_ass() ) {
				return false;
			} else {
				return true;
			}
		}

		// Function from file: photocopier.dm
		public bool check_ass(  ) {
			
			if ( !( this.ass != null ) ) {
				return false;
			}

			if ( this.ass.loc != this.loc ) {
				this.ass = null;
				this.updateUsrDialog();
				return false;
			} else if ( this.ass is Mob_Living_Carbon_Human ) {
				
				if ( !Lang13.Bool( ((Mob)this.ass).get_item_by_slot( 14 ) ) && !Lang13.Bool( ((Mob)this.ass).get_item_by_slot( 13 ) ) ) {
					return true;
				} else {
					return false;
				}
			} else {
				return true;
			}
			return false;
		}

		// Function from file: photocopier.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			this.check_ass();

			if ( !( O is Mob ) || Lang13.Bool( ((dynamic)O).locked_to ) || !this.Adjacent( user ) || !((Ent_Static)user).Adjacent( O ) || Lang13.Bool( user.stat ) || user is Mob_Living_Silicon_Ai || O == this.ass || this.copier_blocked( user ) ) {
				return false;
			}
			this.add_fingerprint( user );

			if ( O == user && !Lang13.Bool( user.stat ) && !( user.weakened != 0 ) && !Lang13.Bool( user.stunned ) && !( user.paralysis != 0 ) ) {
				this.visible_message( "<span class='warning'>" + Task13.User + " jumps onto the photocopier!</span>" );
			} else if ( O != user && !((Mob)user).restrained() && !Lang13.Bool( user.stat ) && !( user.weakened != 0 ) && !Lang13.Bool( user.stunned ) && !( user.paralysis != 0 ) ) {
				
				if ( Lang13.Bool( ((dynamic)O).anchored ) ) {
					return false;
				}

				if ( !( user is Mob_Living_Carbon_Human ) && !( user is Mob_Living_Carbon_Monkey ) ) {
					return false;
				}
				this.visible_message( "<span class='warning'>" + Task13.User + " drags " + O.name + " onto the photocopier!</span>" );
			}
			((dynamic)O).forceMove( GlobalFuncs.get_turf( this ) );
			this.ass = O;

			if ( Lang13.Bool( this.photocopy ) ) {
				this.photocopy.loc = this.loc;
				this.visible_message( "<span class='notice'>" + this.photocopy + " is shoved out of the way by " + this.ass + "!</span>" );
				this.photocopy = null;
			} else if ( Lang13.Bool( this.copy ) ) {
				this.copy.loc = this.loc;
				this.visible_message( "<span class='notice'>" + this.copy + " is shoved out of the way by " + this.ass + "!</span>" );
				this.copy = null;
			}
			this.updateUsrDialog();
			return false;
		}

		// Function from file: photocopier.dm
		public override bool blob_act( dynamic severity = null ) {
			Game_Data O = null;

			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			} else if ( this.toner > 0 ) {
				O = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Oil), GlobalFuncs.get_turf( this ) );
				((dynamic)O).New( ((dynamic)O).loc );
				this.toner = 0;
			}
			return false;
		}

		// Function from file: photocopier.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			Game_Data O = null;
			Game_Data O2 = null;

			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
					} else if ( this.toner > 0 ) {
						O = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Oil), GlobalFuncs.get_turf( this ) );
						((dynamic)O).New( ((dynamic)O).loc );
						this.toner = 0;
					}
					break;
				default:
					
					if ( Rand13.PercentChance( 50 ) ) {
						
						if ( this.toner > 0 ) {
							O2 = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Oil), GlobalFuncs.get_turf( this ) );
							((dynamic)O2).New( ((dynamic)O2).loc );
							this.toner = 0;
						}
					}
					break;
			}
			return false;
		}

		// Function from file: photocopier.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			Ent_Dynamic GM = null;
			Obj_Machinery_ConstructableFrame_MachineFrame M = null;
			Obj I = null;

			
			if ( this.copying ) {
				
				if ( Interface13.Alert( "Cancel current print job?", "", "Yes", "No" ) != "Yes" ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Must wait for current print job to finish.</span>" );
					return null;
				}
				this.copying = false;
			}

			if ( a is Obj_Item_Weapon_Paper ) {
				
				if ( this.copier_empty() ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.copy = a;
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ".</span>" );
						Icon13.Flick( "bigscanner1", this );
						this.updateUsrDialog();
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>There is already something in " + this + ".</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Photo ) {
				
				if ( this.copier_empty() ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.photocopy = a;
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ".</span>" );
						Icon13.Flick( "bigscanner1", this );
						this.updateUsrDialog();
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>There is already something in " + this + ".</span>" );
				}
			} else if ( a is Obj_Item_Device_Toner ) {
				
				if ( this.toner <= 0 ) {
					
					if ( Lang13.Bool( b.drop_item( a ) ) ) {
						GlobalFuncs.qdel( a );
						this.toner = 40;
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ".</span>" );
						this.updateUsrDialog();
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>This cartridge is not yet ready for replacement! Use up the rest of the toner.</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.playsound( this.loc, "sound/items/Ratchet.ogg", 50, 1 );
				this.anchored = !Lang13.Bool( this.anchored );
				GlobalFuncs.to_chat( b, "<span class='notice'>You " + ( Lang13.Bool( this.anchored ) ? "wrench" : "unwrench" ) + " " + this + ".</span>" );
			} else if ( a is Obj_Item_Weapon_Grab ) {
				G = a;

				if ( G.affecting is Mob && G.affecting != this.ass ) {
					GM = G.affecting;

					if ( Lang13.Bool( GM.locked_to ) ) {
						return null;
					}
					this.visible_message( "<span class='warning'>" + Task13.User + " drags " + GM.name + " onto the photocopier!</span>" );
					GM.forceMove( GlobalFuncs.get_turf( this ) );
					this.ass = GM;

					if ( Lang13.Bool( this.photocopy ) ) {
						this.photocopy.loc = this.loc;
						this.photocopy = null;
					} else if ( Lang13.Bool( this.copy ) ) {
						this.copy.loc = this.loc;
						this.copy = null;
					}
					this.updateUsrDialog();
				}
			} else if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.to_chat( b, "" + this + " needs to be unanchored." );
					return null;
				}

				if ( !this.opened ) {
					this.opened = true;
					GlobalFuncs.to_chat( b, "You open the maintenance hatch of " + this + "." );
				} else {
					this.opened = false;
					GlobalFuncs.to_chat( b, "You close the maintenance hatch of " + this + "." );
				}
				return 1;
			}

			if ( this.opened ) {
				
				if ( a is Obj_Item_Weapon_Crowbar ) {
					GlobalFuncs.to_chat( b, "You begin to remove the circuits from the " + this + "." );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Crowbar.ogg", 50, 1 );

					if ( GlobalFuncs.do_after( b, this, 50 ) ) {
						M = new Obj_Machinery_ConstructableFrame_MachineFrame( this.loc );
						M.state = 1;
						M.set_build_state( 2 );

						foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj) )) {
							I = _a;
							

							if ( I.reliability != 100 && this.crit_fail ) {
								I.crit_fail = true;
							}
							I.loc = this.loc;
						}
						GlobalFuncs.qdel( this );
						return 1;
					}
				}
			}
			return null;
		}

		// Function from file: photocopier.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			int? i = null;
			Type paper_type = null;
			dynamic c = null;
			string copied = null;
			int? i2 = null;
			Obj_Item_Weapon_Photo p = null;
			Icon I = null;
			Icon img = null;
			int? i3 = null;
			Icon temp_img = null;
			Obj_Item_Weapon_Photo p2 = null;
			Icon small_img = null;
			Icon ic = null;
			ByTable nametemp = null;
			dynamic find = null;
			Picture selection = null;
			Mob tempAI = null;
			Picture t = null;
			Obj_Item_Weapon_Photo p3 = null;
			Picture q = null;
			dynamic I2 = null;
			dynamic img2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["copy"] ) ) {
				
				if ( this.copying ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " is busy with another print job.</span>" ).ToString() );
					return null;
				}

				if ( Lang13.Bool( this.copy ) ) {
					this.copies = ( ( this.copies ??0) <= 0 ? 0 : ( ( this.copies ??0) >= 10 ? 10 : this.copies ) );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.copying = true;
						i = null;
						i = 0;

						while (( i ??0) < ( this.copies ??0)) {
							
							if ( !this.copying ) {
								break;
							}

							if ( this.toner > 0 ) {
								paper_type = this.copy.type;
								c = Lang13.Call( paper_type, this.loc );

								if ( this.toner > 10 ) {
									c.info = "<font color = #101010>";
								} else {
									c.info = "<font color = #808080>";
								}
								copied = String13.HtmlDecode( this.copy.info );
								copied = GlobalFuncs.replacetext( copied, "color:", "nocolor:" );
								c.info += copied;
								c.info += "</font>";
								c.name = this.copy.name;
								c.fields = this.copy.fields;
								((Obj_Item_Weapon_Paper)c).updateinfolinks();
								this.toner--;
								Task13.Sleep( 15 );
							} else {
								break;
							}
							i++;
						}
						this.copying = false;
						return;
					}));
					this.updateUsrDialog();
				} else if ( Lang13.Bool( this.photocopy ) ) {
					this.copies = ( ( this.copies ??0) <= 0 ? 0 : ( ( this.copies ??0) >= 10 ? 10 : this.copies ) );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.copying = true;
						i2 = null;
						i2 = 0;

						while (( i2 ??0) < ( this.copies ??0)) {
							
							if ( !this.copying ) {
								break;
							}

							if ( this.toner >= 5 ) {
								p = new Obj_Item_Weapon_Photo( this.loc );
								I = new Icon( this.photocopy.icon, this.photocopy.icon_state );
								img = new Icon( this.photocopy.img );

								if ( this.greytoggle == "Greyscale" ) {
									
									if ( this.toner > 10 ) {
										I.MapColors( "#4d4d4d", "#969696", "#1c1c1c", "#000000" );
										img.MapColors( "#4d4d4d", "#969696", "#1c1c1c", "#000000" );
									} else {
										I.MapColors( "#4d4d4d", "#969696", "#1c1c1c", "#646464" );
										img.MapColors( "#4d4d4d", "#969696", "#1c1c1c", "#646464" );
									}
									this.toner -= 5;
								} else if ( this.greytoggle == "Color" ) {
									
									if ( this.toner >= 10 ) {
										this.toner -= 10;
									} else {
										i2++;
										continue;
									}
								}
								p.icon = I;
								p.img = img;
								p.name = this.photocopy.name;
								p.desc = this.photocopy.desc;
								p.scribble = this.photocopy.scribble;
								p.pixel_x = Rand13.Int( -10, 10 );
								p.pixel_y = Rand13.Int( -10, 10 );
								p.blueprints = Lang13.Bool( this.photocopy.blueprints );
								p.info = this.photocopy.info;
								Task13.Sleep( 15 );
							} else {
								break;
							}
							i2++;
						}
						this.copying = false;
						return;
					}));
				} else if ( this.ass != null ) {
					this.copies = ( ( this.copies ??0) <= 0 ? 0 : ( ( this.copies ??0) >= 10 ? 10 : this.copies ) );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.copying = true;
						i3 = null;
						i3 = 0;

						while (( i3 ??0) < ( this.copies ??0)) {
							
							if ( !this.copying ) {
								break;
							}
							temp_img = null;

							if ( this.ass is Mob_Living_Carbon_Human && ( Lang13.Bool( ((Mob)this.ass).get_item_by_slot( 14 ) ) || Lang13.Bool( ((Mob)this.ass).get_item_by_slot( 13 ) ) ) ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You feel kind of silly copying " + ( this.ass == Task13.User ? ((dynamic)( "your" )) : ((dynamic)( this.ass )) ) + ( this.ass == Task13.User ? "" : "'s" ) + " ass with " + ( this.ass == Task13.User ? "your" : "their" ) + " clothes on.</span>" );
							} else if ( this.toner >= 5 && this.check_ass() ) {
								
								if ( this.ass is Mob_Living_Carbon_Alien || this.ass is Mob_Living_SimpleAnimal_Hostile_Alien ) {
									temp_img = new Icon( "icons/ass/assalien.png" );
								} else if ( this.ass is Mob_Living_Carbon_Human ) {
									
									if ( this.ass.gender == GlobalVars.MALE ) {
										temp_img = new Icon( "icons/ass/assmale.png" );
									} else if ( this.ass.gender == GlobalVars.FEMALE ) {
										temp_img = new Icon( "icons/ass/assfemale.png" );
									} else {
										temp_img = new Icon( "icons/ass/assmale.png" );
									}
								} else {
									break;
								}
								p2 = new Obj_Item_Weapon_Photo( this.loc );
								p2.desc = "You see " + this.ass + "'s ass on the photo.";
								p2.pixel_x = Rand13.Int( -10, 10 );
								p2.pixel_y = Rand13.Int( -10, 10 );
								p2.img = temp_img;
								small_img = new Icon( temp_img );
								ic = new Icon( "icons/obj/items.dmi", "photo" );
								small_img.Scale( 8, 8 );
								ic.Blend( small_img, 3, 10, 13 );
								p2.icon = ic;
								this.toner -= 5;
								Task13.Sleep( 15 );
							} else {
								break;
							}
							i3++;
						}
						this.copying = false;
						return;
					}));
				}
				this.updateUsrDialog();
			} else if ( Lang13.Bool( href_list["remove"] ) ) {
				this.copying = false;

				if ( Lang13.Bool( this.copy ) ) {
					
					if ( !( Task13.User is Mob_Living_Silicon_Ai ) ) {
						this.copy.loc = Task13.User.loc;
						Task13.User.put_in_hands( this.copy );
					} else {
						this.copy.loc = this.loc;
					}
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You take " + this.copy + " out of " + this + ".</span>" );
					this.copy = null;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( this.photocopy ) ) {
					
					if ( !( Task13.User is Mob_Living_Silicon_Ai ) ) {
						this.photocopy.loc = Task13.User.loc;
						Task13.User.put_in_hands( this.photocopy );
					} else {
						this.photocopy.loc = this.loc;
					}
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You take " + this.photocopy + " out of " + this + ".</span>" );
					this.photocopy = null;
					this.updateUsrDialog();
				} else if ( this.check_ass() ) {
					GlobalFuncs.to_chat( this.ass, "<span class='notice'>You feel a slight pressure on your ass.</span>" );
				}
			} else if ( Lang13.Bool( href_list["min"] ) ) {
				
				if ( this.copying ) {
					
					if ( Interface13.Alert( "Cancel current print job?", "", "Yes", "No" ) != "Yes" ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Must wait for current print job to finish.</span>" );
						return null;
					}
					this.copying = false;
				}

				if ( ( this.copies ??0) > 1 ) {
					this.copies--;
					this.updateUsrDialog();
				}
			} else if ( Lang13.Bool( href_list["add"] ) ) {
				
				if ( this.copying ) {
					
					if ( Interface13.Alert( "Cancel current print job?", "", "Yes", "No" ) != "Yes" ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Must wait for current print job to finish.</span>" );
						return null;
					}
					this.copying = false;
				}

				if ( ( this.copies ??0) < ( this.maxcopies ??0) ) {
					this.copies++;
					this.updateUsrDialog();
				}
			} else if ( Lang13.Bool( href_list["aipic"] ) ) {
				
				if ( this.copying ) {
					
					if ( Interface13.Alert( "Cancel current print job?", "", "Yes", "No" ) != "Yes" ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Must wait for current print job to finish.</span>" );
						return null;
					}
					this.copying = false;
				}

				if ( !( Task13.User is Mob_Living_Silicon_Ai ) ) {
					return null;
				}

				if ( this.toner >= 5 ) {
					nametemp = new ByTable();
					find = null;
					selection = null;
					tempAI = Task13.User;

					if ( ((dynamic)tempAI).aicamera.aipictures.len == 0 ) {
						GlobalFuncs.to_chat( Task13.User, "<font color=red><B>No images saved<B></font>" );
						return null;
					}

					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)tempAI).aicamera.aipictures, typeof(Picture) )) {
						t = _a;
						
						nametemp.Add( t.fields["name"] );
					}
					find = Interface13.Input( "Select image", null, null, null, nametemp, InputType.Any );
					p3 = new Obj_Item_Weapon_Photo( this.loc );

					foreach (dynamic _b in Lang13.Enumerate( ((dynamic)tempAI).aicamera.aipictures, typeof(Picture) )) {
						q = _b;
						

						if ( q.fields["name"] == find ) {
							selection = q;
							break;
						}
					}
					I2 = selection.fields["icon"];
					img2 = selection.fields["img"];
					p3.icon = I2;
					p3.img = img2;
					p3.desc = selection.fields["desc"];
					p3.blueprints = Lang13.Bool( selection.fields["blueprints"] );
					p3.pixel_x = Rand13.Int( -10, 10 );
					p3.pixel_y = Rand13.Int( -10, 10 );
					this.toner -= 5;
					Task13.Sleep( 15 );
				}
				this.updateUsrDialog();
			} else if ( Lang13.Bool( href_list["colortoggle"] ) ) {
				
				if ( this.copying ) {
					
					if ( Interface13.Alert( "Cancel current print job?", "", "Yes", "No" ) != "Yes" ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Must wait for current print job to finish.</span>" );
						return null;
					}
					this.copying = false;
				}

				if ( this.greytoggle == "Greyscale" ) {
					this.greytoggle = "Color";
				} else {
					this.greytoggle = "Greyscale";
				}
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: photocopier.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;

			((Mob)a).set_machine( this );
			dat = "Photocopier<BR><BR>";

			if ( Lang13.Bool( this.copy ) || Lang13.Bool( this.photocopy ) || this.ass != null && this.ass.loc == this.loc ) {
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";remove=1'>Remove Paper</a><BR>" ).ToString();

				if ( this.toner != 0 ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";copy=1'>Copy</a><BR>" ).ToString();
					dat += "Printing: " + this.copies + " copies.";
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";min=1'>-</a> " ).ToString();
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";add=1'>+</a><BR><BR>" ).ToString();

					if ( Lang13.Bool( this.photocopy ) ) {
						dat += new Txt( "Printing in <a href='byond://?src=" ).Ref( this ).str( ";colortoggle=1'>" ).item( this.greytoggle ).str( "</a><BR><BR>" ).ToString();
					}
				}
			} else if ( this.toner != 0 ) {
				dat += "Please insert paper to copy.<BR><BR>";
			}

			if ( a is Mob_Living_Silicon_Ai ) {
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";aipic=1'>Print photo from database</a><BR><BR>" ).ToString();
			}
			dat += "Current toner level: " + this.toner;

			if ( !( this.toner != 0 ) ) {
				dat += "<BR>Please insert a new toner cartridge!";
			}
			Interface13.Browse( a, dat, "window=copier" );
			GlobalFuncs.onclose( a, "copier" );
			return null;
		}

		// Function from file: photocopier.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: photocopier.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

	}

}