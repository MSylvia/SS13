// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_ScanConsolenew : Obj_Machinery_Computer {

		public double? radduration = 2;
		public double? radstrength = 1;
		public ByTable buffer = new ByTable( 3 );
		public bool injectorready = false;
		public string current_screen = "mainmenu";
		public dynamic connected = null;
		public dynamic diskette = null;
		public ByTable delayed_action = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "dna";
			this.icon_keyboard = "med_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_ScanConsolenew);
			this.idle_power_usage = 10;
			this.active_power_usage = 400;
		}

		// Function from file: dna_console.dm
		public Obj_Machinery_Computer_ScanConsolenew ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
					this.dir = Convert.ToInt32( _a );
					
					this.connected = Lang13.FindIn( typeof(Obj_Machinery_DnaScannernew), Map13.GetStep( this, this.dir ) );

					if ( !( this.connected == null ) ) {
						break;
					}
				}
				Task13.Schedule( 250, (Task13.Closure)(() => {
					this.injectorready = true;
					return;
				}));
				return;
				return;
			}));
			return;
		}

		// Function from file: dna_console.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob viable_occupant = null;
			double? num = null;
			string last_change = null;
			bool epinephrine_amount = false;
			int can_add = 0;
			string text = null;
			dynamic buffer_slot = null;
			ByTable buffer_slot2 = null;
			dynamic buffer_slot3 = null;
			Obj_Item_Weapon_Dnainjector_Timed I = null;
			Mutation_Human HM = null;
			int? time_coeff = null;
			Mutation_Human HM2 = null;
			dynamic buffer_slot4 = null;
			dynamic locked_state = null;
			int len = 0;
			int block = 0;
			double subblock = 0;
			string hex = null;
			int len2 = 0;
			int block2 = 0;
			double subblock2 = 0;
			string hex2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( !( Task13.User.loc is Tile ) ) {
				return null;
			}

			if ( !( this.loc is Tile && Map13.GetDistance( this, Task13.User ) <= 1 || Task13.User is Mob_Living_Silicon ) ) {
				return null;
			}

			if ( this.current_screen == "working" ) {
				return null;
			}
			this.add_fingerprint( Task13.User );
			Task13.User.set_machine( this );
			viable_occupant = this.get_viable_occupant();
			num = Num13.Floor( String13.ParseNumber( href_list["num"] ) ??0 );

			dynamic _f = href_list["task"]; // Was a switch-case, sorry for the mess.
			if ( _f=="togglelock" ) {
				
				if ( Lang13.Bool( this.connected ) ) {
					this.connected.locked = !Lang13.Bool( this.connected.locked );
				}
			} else if ( _f=="toggleopen" ) {
				
				if ( Lang13.Bool( this.connected ) ) {
					((Obj_Machinery_DnaScannernew)this.connected).toggle_open( Task13.User );
				}
			} else if ( _f=="setduration" ) {
				
				if ( !Lang13.Bool( num ) ) {
					num = Num13.Floor( Convert.ToDouble( Interface13.Input( Task13.User, "Choose pulse duration:", "Input an Integer", null, null, InputType.Num | InputType.Null ) ) );
				}

				if ( Lang13.Bool( num ) ) {
					this.radduration = GlobalFuncs.Wrap( num, true, 31 );
				}
			} else if ( _f=="setstrength" ) {
				
				if ( !Lang13.Bool( num ) ) {
					num = Num13.Floor( Convert.ToDouble( Interface13.Input( Task13.User, "Choose pulse strength:", "Input an Integer", null, null, InputType.Num | InputType.Null ) ) );
				}

				if ( Lang13.Bool( num ) ) {
					this.radstrength = GlobalFuncs.Wrap( num, true, 16 );
				}
			} else if ( _f=="screen" ) {
				this.current_screen = href_list["text"];
			} else if ( _f=="rejuv" ) {
				
				if ( viable_occupant != null && viable_occupant.reagents != null ) {
					epinephrine_amount = viable_occupant.reagents.get_reagent_amount( "epinephrine" );
					can_add = Num13.MaxInt( Num13.MinInt( 90 - ( epinephrine_amount ?1:0), 15 ), 0 );
					viable_occupant.reagents.add_reagent( "epinephrine", can_add );
				}
			} else if ( _f=="setbufferlabel" ) {
				text = GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Input a new label:", "Input an Text", null, null, InputType.Str | InputType.Null ) );

				if ( Lang13.Bool( num ) && Lang13.Bool( text ) ) {
					num = Num13.MaxInt( 1, Num13.MinInt( ((int)( num ??0 )), 3 ) );
					buffer_slot = this.buffer[num];

					if ( buffer_slot is ByTable ) {
						buffer_slot["label"] = text;
					}
				}
			} else if ( _f=="setbuffer" ) {
				
				if ( Lang13.Bool( num ) && viable_occupant != null ) {
					num = Num13.MaxInt( 1, Num13.MinInt( ((int)( num ??0 )), 3 ) );
					this.buffer[num] = new ByTable()
						.Set( "label", "Buffer" + num + ":" + viable_occupant.real_name )
						.Set( "UI", ((dynamic)viable_occupant).dna.uni_identity )
						.Set( "SE", ((dynamic)viable_occupant).dna.struc_enzymes )
						.Set( "UE", ((dynamic)viable_occupant).dna.unique_enzymes )
						.Set( "name", viable_occupant.real_name )
						.Set( "blood_type", ((dynamic)viable_occupant).dna.blood_type )
					;
				}
			} else if ( _f=="clearbuffer" ) {
				
				if ( Lang13.Bool( num ) ) {
					num = Num13.MaxInt( 1, Num13.MinInt( ((int)( num ??0 )), 3 ) );
					buffer_slot2 = this.buffer[num];

					if ( buffer_slot2 is ByTable ) {
						buffer_slot2.Cut();
					}
				}
			} else if ( _f=="transferbuffer" ) {
				
				if ( Lang13.Bool( num ) && viable_occupant != null ) {
					
					dynamic _a = href_list["text"]; // Was a switch-case, sorry for the mess.
					if ( _a=="se" ) {
						this.apply_buffer( 1, num );
					} else if ( _a=="ui" ) {
						this.apply_buffer( 2, num );
					} else if ( _a=="ue" ) {
						this.apply_buffer( 3, num );
					} else if ( _a=="mixed" ) {
						this.apply_buffer( 4, num );
					}
				}
			} else if ( _f=="injector" ) {
				
				if ( Lang13.Bool( num ) && this.injectorready ) {
					num = Num13.MaxInt( 1, Num13.MinInt( ((int)( num ??0 )), 3 ) );
					buffer_slot3 = this.buffer[num];

					if ( buffer_slot3 is ByTable ) {
						I = null;

						dynamic _d = href_list["text"]; // Was a switch-case, sorry for the mess.
						if ( _d=="se" ) {
							
							if ( Lang13.Bool( buffer_slot3["SE"] ) ) {
								I = new Obj_Item_Weapon_Dnainjector_Timed( this.loc );

								foreach (dynamic _b in Lang13.Enumerate( GlobalVars.good_mutations + GlobalVars.bad_mutations + GlobalVars.not_good_mutations, typeof(Mutation_Human) )) {
									HM = _b;
									

									if ( HM.check_block_string( buffer_slot3["SE"] ) ) {
										I.add_mutations.Add( HM );
									} else {
										I.remove_mutations.Add( HM );
									}
								}
								time_coeff = null;

								foreach (dynamic _c in Lang13.Enumerate( I.add_mutations, typeof(Mutation_Human) )) {
									HM2 = _c;
									

									if ( !Lang13.Bool( time_coeff ) ) {
										time_coeff = HM2.time_coeff;
										continue;
									}
									time_coeff = Num13.MinInt( time_coeff ??0, HM2.time_coeff );
								}

								if ( Lang13.Bool( this.connected ) ) {
									I.duration = I.duration * ( time_coeff ??0) * Convert.ToDouble( this.connected.damage_coeff );
									I.damage_coeff = Convert.ToDouble( this.connected.damage_coeff );
								}
							}
						} else if ( _d=="ui" ) {
							
							if ( Lang13.Bool( buffer_slot3["UI"] ) ) {
								I = new Obj_Item_Weapon_Dnainjector_Timed( this.loc );
								I.fields = new ByTable().Set( "UI", buffer_slot3["UI"] );

								if ( Lang13.Bool( this.connected ) ) {
									I.damage_coeff = Convert.ToDouble( this.connected.damage_coeff );
								}
							}
						} else if ( _d=="ue" ) {
							
							if ( Lang13.Bool( buffer_slot3["name"] ) && Lang13.Bool( buffer_slot3["UE"] ) && Lang13.Bool( buffer_slot3["blood_type"] ) ) {
								I = new Obj_Item_Weapon_Dnainjector_Timed( this.loc );
								I.fields = new ByTable().Set( "name", buffer_slot3["name"] ).Set( "UE", buffer_slot3["UE"] ).Set( "blood_type", buffer_slot3["blood_type"] );

								if ( Lang13.Bool( this.connected ) ) {
									I.damage_coeff = Convert.ToDouble( this.connected.damage_coeff );
								}
							}
						} else if ( _d=="mixed" ) {
							
							if ( Lang13.Bool( buffer_slot3["UI"] ) && Lang13.Bool( buffer_slot3["name"] ) && Lang13.Bool( buffer_slot3["UE"] ) && Lang13.Bool( buffer_slot3["blood_type"] ) ) {
								I = new Obj_Item_Weapon_Dnainjector_Timed( this.loc );
								I.fields = new ByTable().Set( "UI", buffer_slot3["UI"] ).Set( "name", buffer_slot3["name"] ).Set( "UE", buffer_slot3["UE"] ).Set( "blood_type", buffer_slot3["blood_type"] );

								if ( Lang13.Bool( this.connected ) ) {
									I.damage_coeff = Convert.ToDouble( this.connected.damage_coeff );
								}
							}
						}

						if ( I != null ) {
							this.injectorready = false;
							Task13.Schedule( 100, (Task13.Closure)(() => {
								this.injectorready = true;
								return;
							}));
						}
					}
				}
			} else if ( _f=="loaddisk" ) {
				
				if ( Lang13.Bool( num ) && Lang13.Bool( this.diskette ) && Lang13.Bool( this.diskette.fields ) ) {
					num = Num13.MaxInt( 1, Num13.MinInt( ((int)( num ??0 )), 3 ) );
					this.buffer[num] = this.diskette.fields.Copy();
				}
			} else if ( _f=="savedisk" ) {
				
				if ( Lang13.Bool( num ) && Lang13.Bool( this.diskette ) && !this.diskette.read_only ) {
					num = Num13.MaxInt( 1, Num13.MinInt( ((int)( num ??0 )), 3 ) );
					buffer_slot4 = this.buffer[num];

					if ( buffer_slot4 is ByTable ) {
						this.diskette.name = "data disk [" + buffer_slot4["label"] + "]";
						this.diskette.fields = buffer_slot4.Copy();
					}
				}
			} else if ( _f=="ejectdisk" ) {
				
				if ( Lang13.Bool( this.diskette ) ) {
					this.diskette.loc = GlobalFuncs.get_turf( this );
					this.diskette = null;
				}
			} else if ( _f=="setdelayed" ) {
				
				if ( Lang13.Bool( num ) ) {
					this.delayed_action = new ByTable().Set( "action", String13.ParseNumber( href_list["delayaction"] ) ).Set( "buffer", num );
				}
			} else if ( _f=="pulseui" || _f=="pulsese" ) {
				
				if ( Lang13.Bool( num ) && viable_occupant != null && Lang13.Bool( this.connected ) ) {
					this.radduration = GlobalFuncs.Wrap( this.radduration, true, 31 );
					this.radstrength = GlobalFuncs.Wrap( this.radstrength, true, 16 );
					locked_state = this.connected.locked;
					this.connected.locked = 1;
					this.current_screen = "working";
					this.ShowInterface( Task13.User );
					Task13.Sleep( ((int)( ( this.radduration ??0) * 10 )) );
					this.current_screen = "mainmenu";

					if ( viable_occupant != null && Lang13.Bool( this.connected ) && this.connected.occupant == viable_occupant ) {
						viable_occupant.radiation += ( this.radduration ??0) * ( this.radstrength ??0) * 0.2 / Math.Pow( Convert.ToDouble( this.connected.damage_coeff ), 2 );

						dynamic _e = href_list["task"]; // Was a switch-case, sorry for the mess.
						if ( _e=="pulseui" ) {
							len = Lang13.Length( ((dynamic)viable_occupant).dna.uni_identity );
							num = GlobalFuncs.Wrap( num, true, len + 1 );
							num = this.randomize_radiation_accuracy( num, ( this.radduration ??0) + Math.Pow( Convert.ToDouble( this.connected.precision_coeff ), 2 ), len );
							block = Num13.Floor( ( ( num ??0) - 1 ) / 3 ) + 1;
							subblock = ( num ??0) - block * 3;
							last_change = "UI #" + block + "-" + subblock + "; ";
							hex = String13.SubStr( ((dynamic)viable_occupant).dna.uni_identity, ((int)( num ??0 )), ((int)( ( num ??0) + 1 )) );
							last_change += "" + hex;
							hex = this.scramble( hex, this.radstrength, this.radduration );
							last_change += "->" + hex;
							((dynamic)viable_occupant).dna.uni_identity = String13.SubStr( ((dynamic)viable_occupant).dna.uni_identity, 1, ((int)( num ??0 )) ) + hex + String13.SubStr( ((dynamic)viable_occupant).dna.uni_identity, ((int)( ( num ??0) + 1 )), 0 );
							new ByTable().Set( "mutations_overlay_update", 1 ).Apply( Lang13.BindFunc( viable_occupant, "updateappearance" ) );
						} else if ( _e=="pulsese" ) {
							len2 = Lang13.Length( ((dynamic)viable_occupant).dna.struc_enzymes );
							num = GlobalFuncs.Wrap( num, true, len2 + 1 );
							num = this.randomize_radiation_accuracy( num, ( this.radduration ??0) + Math.Pow( Convert.ToDouble( this.connected.precision_coeff ), 2 ), len2 );
							block2 = Num13.Floor( ( ( num ??0) - 1 ) / 3 ) + 1;
							subblock2 = ( num ??0) - block2 * 3;
							last_change = "SE #" + block2 + "-" + subblock2 + "; ";
							hex2 = String13.SubStr( ((dynamic)viable_occupant).dna.struc_enzymes, ((int)( num ??0 )), ((int)( ( num ??0) + 1 )) );
							last_change += "" + hex2;
							hex2 = this.scramble( hex2, this.radstrength, this.radduration );
							last_change += "->" + hex2;
							((dynamic)viable_occupant).dna.struc_enzymes = String13.SubStr( ((dynamic)viable_occupant).dna.struc_enzymes, 1, ((int)( num ??0 )) ) + hex2 + String13.SubStr( ((dynamic)viable_occupant).dna.struc_enzymes, ((int)( ( num ??0) + 1 )), 0 );
							viable_occupant.domutcheck();
						}
					} else {
						this.current_screen = "mainmenu";
					}

					if ( Lang13.Bool( this.connected ) ) {
						this.connected.locked = locked_state;
					}
				}
			}
			this.ShowInterface( Task13.User, last_change );
			return null;
		}

		// Function from file: dna_console.dm
		public void on_scanner_close(  ) {
			this.connected.occupant.WriteMsg( "<span class='notice'>" + this + " activates!</span>" );

			if ( this.delayed_action != null ) {
				this.apply_buffer( Convert.ToInt32( this.delayed_action["action"] ), Lang13.DoubleNullable( this.delayed_action["buffer"] ) );
				this.delayed_action = null;
			}
			return;
		}

		// Function from file: dna_console.dm
		public void apply_buffer( int action = 0, double? buffer_num = null ) {
			dynamic buffer_slot = null;
			Mob viable_occupant = null;

			buffer_num = Num13.MaxInt( 1, Num13.MinInt( ((int)( buffer_num ??0 )), 3 ) );
			buffer_slot = this.buffer[buffer_num];
			viable_occupant = this.get_viable_occupant();

			if ( buffer_slot is ByTable ) {
				viable_occupant.radiation += Rand13.Int( ((int)( 10 / Math.Pow( Convert.ToDouble( this.connected.damage_coeff ), 2 ) )), ((int)( 25 / Math.Pow( Convert.ToDouble( this.connected.damage_coeff ), 2 ) )) );

				switch ((int)( action )) {
					case 1:
						
						if ( Lang13.Bool( buffer_slot["SE"] ) ) {
							((dynamic)viable_occupant).dna.struc_enzymes = buffer_slot["SE"];
							viable_occupant.domutcheck();
						}
						break;
					case 2:
						
						if ( Lang13.Bool( buffer_slot["UI"] ) ) {
							((dynamic)viable_occupant).dna.uni_identity = buffer_slot["UI"];
							new ByTable().Set( "mutations_overlay_update", 1 ).Apply( Lang13.BindFunc( viable_occupant, "updateappearance" ) );
						}
						break;
					case 3:
						
						if ( Lang13.Bool( buffer_slot["name"] ) && Lang13.Bool( buffer_slot["UE"] ) && Lang13.Bool( buffer_slot["blood_type"] ) ) {
							viable_occupant.real_name = buffer_slot["name"];
							viable_occupant.name = buffer_slot["name"];
							((dynamic)viable_occupant).dna.unique_enzymes = buffer_slot["UE"];
							((dynamic)viable_occupant).dna.blood_type = buffer_slot["blood_type"];
						}
						break;
					case 4:
						
						if ( Lang13.Bool( buffer_slot["UI"] ) ) {
							((dynamic)viable_occupant).dna.uni_identity = buffer_slot["UI"];
							new ByTable().Set( "mutations_overlay_update", 1 ).Apply( Lang13.BindFunc( viable_occupant, "updateappearance" ) );
						}

						if ( Lang13.Bool( buffer_slot["name"] ) && Lang13.Bool( buffer_slot["UE"] ) && Lang13.Bool( buffer_slot["blood_type"] ) ) {
							viable_occupant.real_name = buffer_slot["name"];
							viable_occupant.name = buffer_slot["name"];
							((dynamic)viable_occupant).dna.unique_enzymes = buffer_slot["UE"];
							((dynamic)viable_occupant).dna.blood_type = buffer_slot["blood_type"];
						}
						break;
				}
			}
			return;
		}

		// Function from file: dna_console.dm
		public dynamic get_viable_occupant(  ) {
			dynamic viable_occupant = null;

			viable_occupant = null;

			if ( Lang13.Bool( this.connected ) ) {
				viable_occupant = this.connected.occupant;

				if ( !( viable_occupant is Mob_Living_Carbon ) || !Lang13.Bool( viable_occupant.dna ) || Lang13.Bool( viable_occupant.disabilities & 128 ) ) {
					viable_occupant = null;
				}
			}
			return viable_occupant;
		}

		// Function from file: dna_console.dm
		public double randomize_radiation_accuracy( double? position_we_were_supposed_to_hit = null, double radduration = 0, int number_of_blocks = 0 ) {
			return GlobalFuncs.Wrap( Num13.Round( ( position_we_were_supposed_to_hit ??0) + GlobalFuncs.gaussian( false, 3 / radduration ), 1 ), true, number_of_blocks + 1 );
		}

		// Function from file: dna_console.dm
		public string scramble( string input = null, double? rs = null, double? rd = null ) {
			double? length = null;
			double ran = 0;

			length = Lang13.Length( input );
			ran = GlobalFuncs.gaussian( false, rs );

			if ( ran == 0 ) {
				ran = Convert.ToDouble( Rand13.Pick(new object [] { -1, 1 }) );
			} else if ( ran < 0 ) {
				ran = Num13.Floor( ran );
			} else {
				ran = -Num13.Floor( -ran );
			}
			return GlobalFuncs.num2hex( GlobalFuncs.Wrap( GlobalFuncs.hex2num( input ) + ran, false, Math.Pow( 16, length ??0 ) ), length );
		}

		// Function from file: dna_console.dm
		public void ShowInterface( dynamic user = null, string last_change = null ) {
			Browser popup = null;
			Mob viable_occupant = null;
			string occupant_status = null;
			string scanner_status = null;
			dynamic temp_html = null;
			bool rejuvenators = false;
			string status = null;
			double? stddev = null;
			string chance_to_hit = null;
			string buttons = null;
			int? i = null;
			ByTable buffer_slot = null;
			dynamic ui = null;
			dynamic se = null;
			dynamic ue = null;
			dynamic name = null;
			dynamic label = null;
			dynamic blood_type = null;
			int max_line_len = 0;
			int? len = null;
			int? i2 = null;
			int? len2 = null;
			int? i3 = null;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}
			popup = new Browser( user, "scannernew", "DNA Modifier Console", 800, 630 );

			if ( !( Map13.GetDistance( this, user ) <= 1 || user is Mob_Living_Silicon ) ) {
				popup.close();
				return;
			}
			popup.add_stylesheet( "scannernew", "html/browser/scannernew.css" );
			occupant_status = "<div class='line'><div class='statusLabel'>Subject Status:</div><div class='statusValue'>";

			if ( Lang13.Bool( this.connected ) && ((Obj_Machinery)this.connected).is_operational() ) {
				
				if ( Lang13.Bool( this.connected.occupant ) ) {
					viable_occupant = this.connected.occupant;

					if ( viable_occupant.has_dna() != null && ( !Lang13.Bool( viable_occupant.disabilities & 128 ) || this.connected.scan_level == 3 ) ) {
						occupant_status += "" + viable_occupant.name + " => ";

						switch ((int)( viable_occupant.stat )) {
							case 0:
								occupant_status += "<span class='good'>Conscious</span>";
								break;
							case 1:
								occupant_status += "<span class='average'>Unconscious</span>";
								break;
							default:
								occupant_status += "<span class='bad'>DEAD</span>";
								break;
						}
						occupant_status += "</div></div>";
						occupant_status += "<div class='line'><div class='statusLabel'>Health:</div><div class='progressBar'><div style='width: " + ((dynamic)viable_occupant).health + "%;' class='progressFill good'></div></div><div class='statusValue'>" + ((dynamic)viable_occupant).health + " %</div></div>";
						occupant_status += "<div class='line'><div class='statusLabel'>Radiation Level:</div><div class='progressBar'><div style='width: " + viable_occupant.radiation + "%;' class='progressFill bad'></div></div><div class='statusValue'>" + viable_occupant.radiation + " %</div></div>";
						rejuvenators = viable_occupant.reagents.get_reagent_amount( "epinephrine" );
						occupant_status += "<div class='line'><div class='statusLabel'>Rejuvenators:</div><div class='progressBar'><div style='width: " + Num13.Floor( ( rejuvenators ?1:0) / 90 * 100 ) + "%;' class='progressFill highlight'></div></div><div class='statusValue'>" + rejuvenators + " units</div></div>";
						occupant_status += "<div class='line'><div class='statusLabel'>Unique Enzymes :</div><div class='statusValue'><span class='highlight'>" + ((dynamic)viable_occupant).dna.unique_enzymes + "</span></div></div>";
						occupant_status += "<div class='line'><div class='statusLabel'>Last Operation:</div><div class='statusValue'>" + ( Lang13.Bool( last_change ) ? last_change : "----" ) + "</div></div>";
					} else {
						viable_occupant = null;
						occupant_status += "<span class='bad'>Invalid DNA structure</span></div></div>";
					}
				} else {
					occupant_status += "<span class='bad'>No subject detected</span></div></div>";
				}

				if ( Lang13.Bool( this.connected.state_open ) ) {
					scanner_status = "Open";
				} else {
					scanner_status = "Closed";

					if ( Lang13.Bool( this.connected.locked ) ) {
						scanner_status += " <span class='bad'>(Locked)</span>";
					} else {
						scanner_status += " <span class='good'>(Unlocked)</span>";
					}
				}
			} else {
				occupant_status += "<span class='bad'>----</span></div></div>";
				scanner_status += "<span class='bad'>Error: No scanner detected</span>";
			}
			status = "<div class='statusDisplay'>";
			status += "<div class='line'><div class='statusLabel'>Scanner:</div><div class='statusValue'>" + scanner_status + "</div></div>";
			status += "" + occupant_status;
			status += "<div class='line'><h3>Radiation Emitter Status</h3></div>";
			stddev = this.radstrength;
			status += "<div class='line'><div class='statusLabel'>Output Level:</div><div class='statusValue'>" + this.radstrength + "</div></div>";
			status += "<div class='line'><div class='statusLabel'>&nbsp;&nbsp;&gt; Mutation:</div><div class='statusValue'>(-" + stddev + " to +" + stddev + " = 68 %) (-" + ( stddev ??0) * 2 + " to +" + ( stddev ??0) * 2 + " = 95 %)</div></div>";

			if ( Lang13.Bool( this.connected ) ) {
				stddev = 3 / ( ( this.radduration ??0) + Math.Pow( Convert.ToDouble( this.connected.precision_coeff ), 2 ) );
			} else {
				stddev = 3 / ( this.radduration ??0);
			}
			chance_to_hit = null;

			dynamic _b = stddev; // Was a switch-case, sorry for the mess.
			if ( 0<=_b&&_b<=0.25 ) {
				chance_to_hit = ">95 %";
			} else if ( 0.25<=_b&&_b<=0.5 ) {
				chance_to_hit = "68-95 %";
			} else if ( 0.5<=_b&&_b<=0.75 ) {
				chance_to_hit = "55-68 %";
			} else {
				chance_to_hit = "<38 %";
			}
			status += "<div class='line'><div class='statusLabel'>Pulse Duration:</div><div class='statusValue'>" + this.radduration + "</div></div>";
			status += "<div class='line'><div class='statusLabel'>&nbsp;&nbsp;&gt; Accuracy:</div><div class='statusValue'>" + chance_to_hit + "</div></div>";
			status += "<br></div>";
			buttons = new Txt( "<a href='?src=" ).Ref( this ).str( ";'>Scan</a> " ).ToString();

			if ( Lang13.Bool( this.connected ) ) {
				buttons += new Txt( " <a href='?src=" ).Ref( this ).str( ";task=toggleopen;'>" ).item( ( Lang13.Bool( this.connected.state_open ) ? "Close" : "Open" ) ).str( " Scanner</a> " ).ToString();

				if ( Lang13.Bool( this.connected.state_open ) ) {
					buttons += "<span class='linkOff'>" + ( Lang13.Bool( this.connected.locked ) ? "Unlock" : "Lock" ) + " Scanner</span> ";
				} else {
					buttons += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=togglelock;'>" ).item( ( Lang13.Bool( this.connected.locked ) ? "Unlock" : "Lock" ) ).str( " Scanner</a> " ).ToString();
				}
			} else {
				buttons += "<span class='linkOff'>Open Scanner</span> <span class='linkOff'>Lock Scanner</span> ";
			}

			if ( viable_occupant != null ) {
				buttons += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=rejuv'>Inject Rejuvenators</a> " ).ToString();
			} else {
				buttons += "<span class='linkOff'>Inject Rejuvenators</span> ";
			}

			if ( Lang13.Bool( this.diskette ) ) {
				buttons += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=ejectdisk'>Eject Disk</a> " ).ToString();
			} else {
				buttons += "<span class='linkOff'>Eject Disk</span> ";
			}

			if ( this.current_screen == "buffer" ) {
				buttons += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=screen;text=mainmenu;'>Radiation Emitter Menu</a> " ).ToString();
			} else {
				buttons += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=screen;text=buffer;'>Buffer Menu</a> " ).ToString();
			}

			switch ((string)( this.current_screen )) {
				case "working":
					temp_html += status;
					temp_html += "<h1>System Busy</h1>";
					temp_html += "Working ... Please wait (" + this.radduration + " Seconds)";
					break;
				case "buffer":
					temp_html += status;
					temp_html += buttons;
					temp_html += "<h1>Buffer Menu</h1>";

					if ( this.buffer is ByTable ) {
						i = null;
						i = 1;

						while (( i ??0) <= this.buffer.len) {
							temp_html += "<br>Slot " + i + ": ";
							buffer_slot = this.buffer[i];

							if ( !( buffer_slot != null ) || !( buffer_slot.len != 0 ) || !Lang13.Bool( buffer_slot["name"] ) || !( Lang13.Bool( buffer_slot["UI"] ) && Lang13.Bool( buffer_slot["UE"] ) || Lang13.Bool( buffer_slot["SE"] ) ) ) {
								temp_html += "<br>	No Data";

								if ( viable_occupant != null ) {
									temp_html += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";task=setbuffer;num=" ).item( i ).str( ";'>Save to Buffer</a> " ).ToString();
								} else {
									temp_html += "<br><span class='linkOff'>Save to Buffer</span> ";
								}
								temp_html += "<span class='linkOff'>Clear Buffer</span> ";

								if ( Lang13.Bool( this.diskette ) ) {
									temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=loaddisk;num=" ).item( i ).str( ";'>Load from Disk</a> " ).ToString();
								} else {
									temp_html += "<span class='linkOff'>Load from Disk</span> ";
								}
								temp_html += "<span class='linkOff'>Save to Disk</span> ";
							} else {
								ui = buffer_slot["UI"];
								se = buffer_slot["SE"];
								ue = buffer_slot["UE"];
								name = buffer_slot["name"];
								label = buffer_slot["label"];
								blood_type = buffer_slot["blood_type"];
								temp_html += new Txt( "<br>	<a href='?src=" ).Ref( this ).str( ";task=setbufferlabel;num=" ).item( i ).str( ";'>Label</a>: " ).item( ( Lang13.Bool( label ) ? label : name ) ).ToString();
								temp_html += "<br>	Subject: " + name;

								if ( Lang13.Bool( ue ) && Lang13.Bool( name ) && Lang13.Bool( blood_type ) ) {
									temp_html += "<br>	Blood Type: " + blood_type;
									temp_html += "<br>	UE: " + ue + " ";

									if ( viable_occupant != null ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=transferbuffer;num=" ).item( i ).str( ";text=ue'>Occupant</a> " ).ToString();
									} else {
										temp_html += "<span class='linkOff'>Occupant</span>";
									}
									temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=setdelayed;num=" ).item( i ).str( ";delayaction=" ).item( 3 ).str( "'>Occupant:Delayed</a> " ).ToString();

									if ( this.injectorready ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=injector;num=" ).item( i ).str( ";text=ue'>Injector</a>" ).ToString();
									} else {
										temp_html += "<span class='linkOff'>Injector</span>";
									}
								} else {
									temp_html += "<br>	Blood Type: No Data";
									temp_html += "<br>	UE: No Data";
								}

								if ( Lang13.Bool( ui ) ) {
									temp_html += "<br>	UI: " + ui + " ";

									if ( viable_occupant != null ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=transferbuffer;num=" ).item( i ).str( ";text=ui'>Occupant</a> " ).ToString();
									} else {
										temp_html += "<span class='linkOff'>Occupant</span>";
									}
									temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=setdelayed;num=" ).item( i ).str( ";delayaction=" ).item( 2 ).str( "'>Occupant:Delayed</a> " ).ToString();

									if ( this.injectorready ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=injector;num=" ).item( i ).str( ";text=ui'>Injector</a>" ).ToString();
									} else {
										temp_html += "<span class='linkOff'>Injector</span>";
									}
								} else {
									temp_html += "<br>	UI: No Data";
								}

								if ( Lang13.Bool( ue ) && Lang13.Bool( name ) && Lang13.Bool( blood_type ) && Lang13.Bool( ui ) ) {
									temp_html += "<br>	UI+UE: " + ui + "/" + ue + " ";

									if ( viable_occupant != null ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=transferbuffer;num=" ).item( i ).str( ";text=mixed'>Occupant</a> " ).ToString();
									} else {
										temp_html += "<span class='linkOff'>Occupant</span>";
									}
									temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=setdelayed;num=" ).item( i ).str( ";delayaction=" ).item( 4 ).str( "'>Occupant:Delayed</a> " ).ToString();

									if ( this.injectorready ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=injector;num=" ).item( i ).str( ";text=mixed'>UI+UE Injector</a>" ).ToString();
									} else {
										temp_html += "<span class='linkOff'>UI+UE Injector</span>";
									}
								}

								if ( Lang13.Bool( se ) ) {
									temp_html += "<br>	SE: " + se + " ";

									if ( viable_occupant != null ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=transferbuffer;num=" ).item( i ).str( ";text=se'>Occupant</a> " ).ToString();
									} else {
										temp_html += "<span class='linkOff'>Occupant</span> ";
									}
									temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=setdelayed;num=" ).item( i ).str( ";delayaction=" ).item( 1 ).str( "'>Occupant:Delayed</a> " ).ToString();

									if ( this.injectorready ) {
										temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=injector;num=" ).item( i ).str( ";text=se'>Injector</a>" ).ToString();
									} else {
										temp_html += "<span class='linkOff'>Injector</span>";
									}
								} else {
									temp_html += "<br>	SE: No Data";
								}

								if ( viable_occupant != null ) {
									temp_html += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";task=setbuffer;num=" ).item( i ).str( ";'>Save to Buffer</a> " ).ToString();
								} else {
									temp_html += "<br><span class='linkOff'>Save to Buffer</span> ";
								}
								temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=clearbuffer;num=" ).item( i ).str( ";'>Clear Buffer</a> " ).ToString();

								if ( Lang13.Bool( this.diskette ) ) {
									temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=loaddisk;num=" ).item( i ).str( ";'>Load from Disk</a> " ).ToString();
								} else {
									temp_html += "<span class='linkOff'>Load from Disk</span> ";
								}

								if ( Lang13.Bool( this.diskette ) && !this.diskette.read_only ) {
									temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=savedisk;num=" ).item( i ).str( ";'>Save to Disk</a> " ).ToString();
								} else {
									temp_html += "<span class='linkOff'>Save to Disk</span> ";
								}
							}
							i++;
						}
					}
					break;
				default:
					temp_html += status;
					temp_html += buttons;
					temp_html += "<h1>Radiation Emitter Menu</h1>";
					temp_html += new Txt( "<a href='?src=" ).Ref( this ).str( ";task=setstrength;num=" ).item( ( this.radstrength ??0) - 1 ).str( ";'>--</a> <a href='?src=" ).Ref( this ).str( ";task=setstrength;'>Output Level</a> <a href='?src=" ).Ref( this ).str( ";task=setstrength;num=" ).item( ( this.radstrength ??0) + 1 ).str( ";'>++</a>" ).ToString();
					temp_html += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";task=setduration;num=" ).item( ( this.radduration ??0) - 1 ).str( ";'>--</a> <a href='?src=" ).Ref( this ).str( ";task=setduration;'>Pulse Duration</a> <a href='?src=" ).Ref( this ).str( ";task=setduration;num=" ).item( ( this.radduration ??0) + 1 ).str( ";'>++</a>" ).ToString();
					temp_html += "<h3>Irradiate Subject</h3>";
					temp_html += "<div class='line'><div class='statusLabel'>Unique Identifier:</div><div class='statusValue'><div class='clearBoth'>";
					max_line_len = 21;

					if ( viable_occupant != null ) {
						temp_html += "<div class='dnaBlockNumber'>1</div>";
						len = Lang13.Length( ((dynamic)viable_occupant).dna.uni_identity );
						i2 = null;
						i2 = 1;

						while (( i2 ??0) <= ( len ??0)) {
							temp_html += new Txt( "<a class='dnaBlock' href='?src=" ).Ref( this ).str( ";task=pulseui;num=" ).item( i2 ).str( ";'>" ).item( String13.SubStr( ((dynamic)viable_occupant).dna.uni_identity, i2 ??0, ( i2 ??0) + 1 ) ).str( "</a>" ).ToString();

							if ( ( i2 ??0) % max_line_len == 0 ) {
								temp_html += "</div><div class='clearBoth'>";
							}

							if ( ( i2 ??0) % 3 == 0 && ( i2 ??0) < ( len ??0) ) {
								temp_html += "<div class='dnaBlockNumber'>" + ( ( i2 ??0) / 3 + 1 ) + "</div>";
							}
							i2++;
						}
					} else {
						temp_html += "----";
					}
					temp_html += "</div></div></div><br>";
					temp_html += "<br><div class='line'><div class='statusLabel'>Structural Enzymes:</div><div class='statusValue'><div class='clearBoth'>";

					if ( viable_occupant != null ) {
						temp_html += "<div class='dnaBlockNumber'>1</div>";
						len2 = Lang13.Length( ((dynamic)viable_occupant).dna.struc_enzymes );
						i3 = null;
						i3 = 1;

						while (( i3 ??0) <= ( len2 ??0)) {
							temp_html += new Txt( "<a class='dnaBlock' href='?src=" ).Ref( this ).str( ";task=pulsese;num=" ).item( i3 ).str( ";'>" ).item( String13.SubStr( ((dynamic)viable_occupant).dna.struc_enzymes, i3 ??0, ( i3 ??0) + 1 ) ).str( "</a>" ).ToString();

							if ( ( i3 ??0) % max_line_len == 0 ) {
								temp_html += "</div><div class='clearBoth'>";
							}

							if ( ( i3 ??0) % 3 == 0 && ( i3 ??0) < ( len2 ??0) ) {
								temp_html += "<div class='dnaBlockNumber'>" + ( ( i3 ??0) / 3 + 1 ) + "</div>";
							}
							i3++;
						}
					} else {
						temp_html += "----";
					}
					temp_html += "</div></div></div>";
					break;
			}
			popup.set_content( temp_html );
			popup.open();
			return;
		}

		// Function from file: dna_console.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.ShowInterface( a );
			return null;
		}

		// Function from file: dna_console.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Disk_Data ) {
				
				if ( !Lang13.Bool( this.diskette ) ) {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					A.loc = this;
					this.diskette = A;
					user.WriteMsg( "<span class='notice'>You insert " + A + ".</span>" );
					this.updateUsrDialog();
					return null;
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

	}

}