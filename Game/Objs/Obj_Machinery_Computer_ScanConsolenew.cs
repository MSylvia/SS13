// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_ScanConsolenew : Obj_Machinery_Computer {

		public double? selected_ui_block = 1;
		public double? selected_ui_subblock = 1;
		public double? selected_se_block = 1;
		public double? selected_se_subblock = 1;
		public double selected_ui_target = 1;
		public dynamic selected_ui_target_hex = 1;
		public int radiation_duration = 2;
		public int radiation_intensity = 1;
		public ByTable buffers = new ByTable( 3 );
		public int irradiating = 0;
		public bool injector_ready = false;
		public dynamic connected = null;
		public dynamic disk = null;
		public dynamic selected_menu_key = null;
		public bool waiting_for_user_input = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 200;
			this.active_power_usage = 400;
			this.circuit = "/obj/item/weapon/circuitboard/scan_consolenew";
			this.light_color = "#6496FA";
			this.icon_state = "dna";
		}

		// Function from file: dna_modifier.dm
		public Obj_Machinery_Computer_ScanConsolenew ( dynamic loc = null ) : base( (object)(loc) ) {
			int? i = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			i = null;
			i = 0;

			while (( i ??0) < 3) {
				this.buffers[( i ??0) + 1] = new Dna2_Record();
				i++;
			}
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.connected = this.findScanner();
				Task13.Schedule( 250, (Task13.Closure)(() => {
					this.injector_ready = true;
					return;
				}));
				return;
				return;
			}));
			return;
		}

		// Function from file: dna_modifier.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic lock_state = null;
			double? select_block = null;
			double? select_subblock = null;
			string block = null;
			dynamic lock_state2 = null;
			double? inject_amount = null;
			double? select_block2 = null;
			double? select_subblock2 = null;
			string block2 = null;
			dynamic lock_state3 = null;
			double? real_SE_block = null;
			Ent_Static B = null;
			string bufferOption = null;
			double? bufferId = null;
			Dna2_Record databuf = null;
			Dna2_Record databuf2 = null;
			Dna2_Record databuf3 = null;
			dynamic buf = null;
			string text = null;
			bool lock_state4 = false;
			dynamic buf2 = null;
			bool? success = null;
			Obj_Item_Weapon_Dnainjector I = null;
			dynamic buf3 = null;
			ByTable selectedbuf = null;
			dynamic blk = null;
			dynamic buf4 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 0;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
			}

			if ( !( Task13.User.loc is Tile ) ) {
				return 0;
			}

			if ( !( this != null ) || !Lang13.Bool( this.connected ) ) {
				return 0;
			}

			if ( this.irradiating != 0 ) {
				return 0;
			}
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["selectMenuKey"] ) ) {
				this.selected_menu_key = href_list["selectMenuKey"];
				return 1;
			}

			if ( Lang13.Bool( href_list["toggleLock"] ) ) {
				
				if ( Lang13.Bool( this.connected ) && Lang13.Bool( this.connected.occupant ) ) {
					this.connected.locked = !Lang13.Bool( this.connected.locked );
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["pulseRadiation"] ) ) {
				this.irradiating = this.radiation_duration;
				lock_state = this.connected.locked;
				this.connected.locked = 1;
				Task13.Sleep( this.radiation_duration * 10 );
				this.irradiating = 0;

				if ( !Lang13.Bool( this.connected.occupant ) ) {
					return 1;
				}

				if ( Rand13.PercentChance( 95 ) ) {
					
					if ( Rand13.PercentChance( 75 ) ) {
						GlobalFuncs.randmutb( this.connected.occupant );
					} else {
						GlobalFuncs.randmuti( this.connected.occupant );
					}
				} else if ( Rand13.PercentChance( 95 ) ) {
					GlobalFuncs.randmutg( this.connected.occupant );
				} else {
					GlobalFuncs.randmuti( this.connected.occupant );
				}
				this.connected.occupant.radiation += this.radiation_intensity * 3 + this.radiation_duration * 3;
				this.connected.locked = lock_state;
				return 1;
			}

			if ( Lang13.Bool( href_list["radiationDuration"] ) ) {
				
				if ( ( String13.ParseNumber( href_list["radiationDuration"] ) ??0) > 0 ) {
					
					if ( this.radiation_duration < 20 ) {
						this.radiation_duration += 2;
					}
				} else if ( this.radiation_duration > 2 ) {
					this.radiation_duration -= 2;
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["radiationIntensity"] ) ) {
				
				if ( ( String13.ParseNumber( href_list["radiationIntensity"] ) ??0) > 0 ) {
					
					if ( this.radiation_intensity < 10 ) {
						this.radiation_intensity++;
					}
				} else if ( this.radiation_intensity > 1 ) {
					this.radiation_intensity--;
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["changeUITarget"] ) && ( String13.ParseNumber( href_list["changeUITarget"] ) ??0) > 0 ) {
				
				if ( this.selected_ui_target < 15 ) {
					this.selected_ui_target++;
					this.selected_ui_target_hex = this.selected_ui_target;

					switch ((double)( this.selected_ui_target )) {
						case 10:
							this.selected_ui_target_hex = "A";
							break;
						case 11:
							this.selected_ui_target_hex = "B";
							break;
						case 12:
							this.selected_ui_target_hex = "C";
							break;
						case 13:
							this.selected_ui_target_hex = "D";
							break;
						case 14:
							this.selected_ui_target_hex = "E";
							break;
						case 15:
							this.selected_ui_target_hex = "F";
							break;
					}
				} else {
					this.selected_ui_target = 0;
					this.selected_ui_target_hex = 0;
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["changeUITarget"] ) && ( String13.ParseNumber( href_list["changeUITarget"] ) ??0) < 1 ) {
				
				if ( this.selected_ui_target > 0 ) {
					this.selected_ui_target--;
					this.selected_ui_target_hex = this.selected_ui_target;

					switch ((double)( this.selected_ui_target )) {
						case 10:
							this.selected_ui_target_hex = "A";
							break;
						case 11:
							this.selected_ui_target_hex = "B";
							break;
						case 12:
							this.selected_ui_target_hex = "C";
							break;
						case 13:
							this.selected_ui_target_hex = "D";
							break;
						case 14:
							this.selected_ui_target_hex = "E";
							break;
					}
				} else {
					this.selected_ui_target = 15;
					this.selected_ui_target_hex = "F";
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["selectUIBlock"] ) && Lang13.Bool( href_list["selectUISubblock"] ) ) {
				select_block = String13.ParseNumber( href_list["selectUIBlock"] );
				select_subblock = String13.ParseNumber( href_list["selectUISubblock"] );

				if ( ( select_block ??0) <= 13 && ( select_block ??0) >= 1 ) {
					this.selected_ui_block = select_block;
				}

				if ( ( select_subblock ??0) <= 3 && ( select_subblock ??0) >= 1 ) {
					this.selected_ui_subblock = select_subblock;
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["pulseUIRadiation"] ) ) {
				block = ((Dna)this.connected.occupant.dna).GetUISubBlock( this.selected_ui_block, this.selected_ui_subblock );
				this.irradiating = this.radiation_duration;
				lock_state2 = this.connected.locked;
				this.connected.locked = 1;
				Task13.Sleep( this.radiation_duration * 10 );
				this.irradiating = 0;

				if ( !Lang13.Bool( this.connected.occupant ) ) {
					return 1;
				}

				if ( Rand13.PercentChance( ((int)( this.radiation_duration / 2 + 80 )) ) ) {
					block = GlobalFuncs.miniscrambletarget( String13.NumberToString( this.selected_ui_target ), this.radiation_intensity, this.radiation_duration );
					((Dna)this.connected.occupant.dna).SetUISubBlock( this.selected_ui_block, this.selected_ui_subblock, block );
					((Mob)this.connected.occupant).UpdateAppearance();
					this.connected.occupant.radiation += this.radiation_intensity + this.radiation_duration;
				} else {
					
					if ( Rand13.PercentChance( this.radiation_intensity + 20 ) ) {
						GlobalFuncs.randmutb( this.connected.occupant );
						GlobalFuncs.domutcheck( this.connected.occupant, this.connected );
					} else {
						GlobalFuncs.randmuti( this.connected.occupant );
						((Mob)this.connected.occupant).UpdateAppearance();
					}
					this.connected.occupant.radiation += this.radiation_intensity * 2 + this.radiation_duration;
				}
				this.connected.locked = lock_state2;
				return 1;
			}

			if ( Lang13.Bool( href_list["injectRejuvenators"] ) ) {
				
				if ( !Lang13.Bool( this.connected.occupant ) ) {
					return 0;
				}
				inject_amount = Num13.Round( String13.ParseNumber( href_list["injectRejuvenators"] ) ??0, 5 );

				if ( ( inject_amount ??0) < 0 ) {
					inject_amount = 0;
				}

				if ( ( inject_amount ??0) > 50 ) {
					inject_amount = 50;
				}
				((Reagents)this.connected.beaker.reagents).trans_to( this.connected.occupant, inject_amount );
				((Reagents)this.connected.beaker.reagents).reaction( this.connected.occupant );
				return 1;
			}

			if ( Lang13.Bool( href_list["selectSEBlock"] ) && Lang13.Bool( href_list["selectSESubblock"] ) ) {
				select_block2 = String13.ParseNumber( href_list["selectSEBlock"] );
				select_subblock2 = String13.ParseNumber( href_list["selectSESubblock"] );

				if ( ( select_block2 ??0) <= 54 && ( select_block2 ??0) >= 1 ) {
					this.selected_se_block = select_block2;
				}

				if ( ( select_subblock2 ??0) <= 3 && ( select_subblock2 ??0) >= 1 ) {
					this.selected_se_subblock = select_subblock2;
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["pulseSERadiation"] ) ) {
				block2 = ((Dna)this.connected.occupant.dna).GetSESubBlock( this.selected_se_block, this.selected_se_subblock );
				this.irradiating = this.radiation_duration;
				lock_state3 = this.connected.locked;
				this.connected.locked = 1;
				Task13.Sleep( this.radiation_duration * 10 );
				this.irradiating = 0;

				if ( Lang13.Bool( this.connected.occupant ) ) {
					
					if ( Rand13.PercentChance( ((int)( this.radiation_duration / 2 + 80 )) ) ) {
						real_SE_block = this.selected_se_block;
						block2 = GlobalFuncs.miniscramble( block2, this.radiation_intensity, this.radiation_duration );

						if ( Rand13.PercentChance( 20 ) ) {
							
							if ( ( this.selected_se_block ??0) > 1 && ( this.selected_se_block ??0) < 27 ) {
								real_SE_block++;
							} else if ( ( this.selected_se_block ??0) > 27 && ( this.selected_se_block ??0) < 54 ) {
								real_SE_block--;
							}
						}
						((Dna)this.connected.occupant.dna).SetSESubBlock( real_SE_block, this.selected_se_subblock, block2 );
						this.connected.occupant.radiation += this.radiation_intensity + this.radiation_duration;
						GlobalFuncs.domutcheck( this.connected.occupant, this.connected );
					} else {
						this.connected.occupant.radiation += this.radiation_intensity * 2 + this.radiation_duration;

						if ( Rand13.PercentChance( 80 - this.radiation_duration ) ) {
							GlobalFuncs.randmutb( this.connected.occupant );
							GlobalFuncs.domutcheck( this.connected.occupant, this.connected );
						} else {
							GlobalFuncs.randmuti( this.connected.occupant );
							((Mob)this.connected.occupant).UpdateAppearance();
						}
					}
				}
				this.connected.locked = lock_state3;
				return 1;
			}

			if ( Lang13.Bool( href_list["ejectBeaker"] ) ) {
				
				if ( Lang13.Bool( this.connected.beaker ) ) {
					B = this.connected.beaker;
					B.loc = this.connected.loc;
					this.connected.beaker = null;
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["ejectOccupant"] ) ) {
				((Obj_Machinery_DnaScannernew)this.connected).eject_occupant();
				return 1;
			}

			if ( Lang13.Bool( href_list["bufferOption"] ) ) {
				bufferOption = href_list["bufferOption"];

				if ( bufferOption == "wipeDisk" ) {
					
					if ( this.disk == null || this.disk.read_only ) {
						return 0;
					}
					this.disk.buf = null;
					return 1;
				}

				if ( bufferOption == "ejectDisk" ) {
					
					if ( !Lang13.Bool( this.disk ) ) {
						return null;
					}
					this.disk.loc = GlobalFuncs.get_turf( this );
					this.disk = null;
					return 1;
				}

				if ( !Lang13.Bool( href_list["bufferId"] ) ) {
					return 0;
				}
				bufferId = String13.ParseNumber( href_list["bufferId"] );

				if ( ( bufferId ??0) < 1 || ( bufferId ??0) > 3 ) {
					return 0;
				}

				if ( bufferOption == "saveUI" ) {
					
					if ( Lang13.Bool( this.connected.occupant ) && Lang13.Bool( this.connected.occupant.dna ) ) {
						databuf = new Dna2_Record();
						databuf.types = 1;
						databuf.dna = ((Dna)this.connected.occupant.dna).Clone();

						if ( this.connected.occupant is Mob_Living_Carbon_Human ) {
							databuf.dna.real_name = this.connected.occupant.name;
						}
						databuf.name = "Unique Identifier";
						this.buffers[bufferId] = databuf;
					}
					return 1;
				}

				if ( bufferOption == "saveUIAndUE" ) {
					
					if ( Lang13.Bool( this.connected.occupant ) && Lang13.Bool( this.connected.occupant.dna ) ) {
						databuf2 = new Dna2_Record();
						databuf2.types = 3;
						databuf2.dna = ((Dna)this.connected.occupant.dna).Clone();

						if ( this.connected.occupant is Mob_Living_Carbon_Human ) {
							databuf2.dna.real_name = this.connected.occupant.name;
						}
						databuf2.name = "Unique Identifier + Unique Enzymes";
						this.buffers[bufferId] = databuf2;
					}
					return 1;
				}

				if ( bufferOption == "saveSE" ) {
					
					if ( Lang13.Bool( this.connected.occupant ) && Lang13.Bool( this.connected.occupant.dna ) ) {
						databuf3 = new Dna2_Record();
						databuf3.types = 4;
						databuf3.dna = ((Dna)this.connected.occupant.dna).Clone();

						if ( this.connected.occupant is Mob_Living_Carbon_Human ) {
							databuf3.dna.real_name = this.connected.occupant.name;
						}
						databuf3.name = "Structural Enzymes";
						this.buffers[bufferId] = databuf3;
					}
					return 1;
				}

				if ( bufferOption == "clear" ) {
					this.buffers[bufferId] = new Dna2_Record();
					return 1;
				}

				if ( bufferOption == "changeLabel" ) {
					buf = this.buffers[bufferId];
					text = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "New Label:", "Edit Label", buf.name, null, InputType.Str | InputType.Null ) ), 1, 26 );
					buf.name = text;
					this.buffers[bufferId] = buf;
					return 1;
				}

				if ( bufferOption == "transfer" ) {
					
					if ( !Lang13.Bool( this.connected.occupant ) || false || !Lang13.Bool( this.connected.occupant.dna ) ) {
						return null;
					}
					this.irradiating = 2;
					lock_state4 = Lang13.Bool( this.connected.locked );
					this.connected.locked = 1;
					Task13.Sleep( 20 );
					this.irradiating = 0;
					this.connected.locked = lock_state4;
					buf2 = this.buffers[bufferId];

					if ( Lang13.Bool( buf2.types & 1 ) ) {
						
						if ( Lang13.Bool( buf2.types & 2 ) ) {
							this.connected.occupant.real_name = buf2.dna.real_name;
							this.connected.occupant.name = buf2.dna.real_name;
						}
						((Mob)this.connected.occupant).UpdateAppearance( buf2.dna.UI.Copy() );
					} else if ( Lang13.Bool( buf2.types & 4 ) ) {
						this.connected.occupant.dna.SE = buf2.dna.SE;
						((Dna)this.connected.occupant.dna).UpdateSE();
						GlobalFuncs.domutcheck( this.connected.occupant, this.connected );
					}
					this.connected.occupant.radiation += Rand13.Int( 20, 50 );
					return 1;
				}

				if ( bufferOption == "createInjector" ) {
					
					if ( this.injector_ready || this.waiting_for_user_input ) {
						success = true;
						I = new Obj_Item_Weapon_Dnainjector();
						buf3 = this.buffers[bufferId];

						if ( Lang13.Bool( href_list["createBlockInjector"] ) ) {
							this.waiting_for_user_input = true;
							selectedbuf = null;

							if ( Lang13.Bool( buf3.types & 4 ) ) {
								selectedbuf = buf3.dna.SE;
							} else {
								selectedbuf = buf3.dna.UI;
							}
							blk = Interface13.Input( Task13.User, "Select Block", "Block", null, this.all_dna_blocks( selectedbuf ), InputType.Any );

							if ( this.injector_ready ) {
								success = this.setInjectorBlock( I, blk, buf3 );
							} else {
								GlobalFuncs.qdel( I );
								success = GlobalVars.FALSE;
							}
						} else {
							I.buf = buf3;
						}
						this.waiting_for_user_input = false;

						if ( success == true ) {
							I.loc = this.loc;
							I.name += " (" + buf3.name + ")";
							this.injector_ready = false;
							Task13.Schedule( Convert.ToInt32( this.connected.injector_cooldown ), (Task13.Closure)(() => {
								this.injector_ready = true;
								return;
							}));
						}
					}
					return 1;
				}

				if ( bufferOption == "loadDisk" ) {
					
					if ( this.disk == null || !Lang13.Bool( this.disk.buf ) ) {
						return 0;
					}
					this.buffers[bufferId] = this.disk.buf;
					return 1;
				}

				if ( bufferOption == "saveDisk" ) {
					
					if ( this.disk == null || this.disk.read_only ) {
						return 0;
					}
					buf4 = this.buffers[bufferId];
					this.disk.buf = buf4;
					this.disk.name = "data disk - '" + buf4.dna.real_name + "'";
					return 1;
				}
			}
			return null;
		}

		// Function from file: dna_modifier.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable diskData = null;
			ByTable new_buffers = null;
			Dna2_Record buf = null;
			ByTable occupantData = null;
			Reagent R = null;

			
			if ( Lang13.Bool( this.connected ) ) {
				
				if ( user == this.connected.occupant || ((Mob)user).isUnconscious() ) {
					return;
				}
			} else {
				this.visible_message( new Txt().icon( this ).str( "<span class='notice'>No scanner connected!<span>" ).ToString() );
				return;
			}
			data = new ByTable( 0 );
			data["selectedMenuKey"] = this.selected_menu_key;
			data["locked"] = this.connected.locked;
			data["hasOccupant"] = ( Lang13.Bool( this.connected.occupant ) ? true : false );
			data["isInjectorReady"] = this.injector_ready;
			data["hasDisk"] = ( Lang13.Bool( this.disk ) ? true : false );
			diskData = new ByTable( 0 );

			if ( !Lang13.Bool( this.disk ) || !Lang13.Bool( this.disk.buf ) ) {
				diskData["data"] = null;
				diskData["owner"] = null;
				diskData["label"] = null;
				diskData["type"] = null;
				diskData["ue"] = null;
			} else {
				diskData = ((Dna2_Record)this.disk.buf).GetData();
			}
			data["disk"] = diskData;
			new_buffers = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.buffers, typeof(Dna2_Record) )) {
				buf = _a;
				
				new_buffers.Add( new ByTable(new object [] { buf.GetData() }) );
			}
			data["buffers"] = new_buffers;
			data["radiationIntensity"] = this.radiation_intensity;
			data["radiationDuration"] = this.radiation_duration;
			data["irradiating"] = this.irradiating;
			data["dnaBlockSize"] = 3;
			data["selectedUIBlock"] = this.selected_ui_block;
			data["selectedUISubBlock"] = this.selected_ui_subblock;
			data["selectedSEBlock"] = this.selected_se_block;
			data["selectedSESubBlock"] = this.selected_se_subblock;
			data["selectedUITarget"] = this.selected_ui_target;
			data["selectedUITargetHex"] = this.selected_ui_target_hex;
			occupantData = null;
			occupantData = new ByTable( 0 );

			if ( !Lang13.Bool( this.connected.occupant ) || !Lang13.Bool( this.connected.occupant.dna ) ) {
				occupantData["name"] = null;
				occupantData["stat"] = null;
				occupantData["isViableSubject"] = null;
				occupantData["health"] = null;
				occupantData["maxHealth"] = null;
				occupantData["minHealth"] = null;
				occupantData["uniqueEnzymes"] = null;
				occupantData["uniqueIdentity"] = null;
				occupantData["structuralEnzymes"] = null;
				occupantData["radiationLevel"] = null;
			} else {
				occupantData["name"] = this.connected.occupant.name;
				occupantData["stat"] = this.connected.occupant.stat;
				occupantData["isViableSubject"] = 1;
				Interface13.Stat( null, ((dynamic)( Lang13.Bool( this.connected.occupant.mutations ) || !Lang13.Bool( this.connected.occupant.dna ) )).Contains( 8 ) );

				if ( !Lang13.Bool( this.connected.occupant ) || !Lang13.Bool( this.connected.occupant.dna ) ) {
					occupantData["isViableSubject"] = 0;
				}
				occupantData["health"] = this.connected.occupant.health;
				occupantData["maxHealth"] = this.connected.occupant.maxHealth;
				occupantData["minHealth"] = GlobalVars.config.health_threshold_dead;
				occupantData["uniqueEnzymes"] = this.connected.occupant.dna.unique_enzymes;
				occupantData["uniqueIdentity"] = this.connected.occupant.dna.uni_identity;
				occupantData["structuralEnzymes"] = this.connected.occupant.dna.struc_enzymes;
				occupantData["radiationLevel"] = this.connected.occupant.radiation;
			}
			data["occupant"] = occupantData;
			data["isBeakerLoaded"] = ( Lang13.Bool( this.connected.beaker ) ? true : false );
			data["beakerLabel"] = null;
			data["beakerVolume"] = 0;

			if ( Lang13.Bool( this.connected.beaker ) ) {
				data["beakerLabel"] = ( Lang13.Bool( this.connected.beaker.label_text ) ? this.connected.beaker.label_text : null );

				if ( Lang13.Bool( this.connected.beaker.reagents ) && this.connected.beaker.reagents.reagent_list.len != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( this.connected.beaker.reagents.reagent_list, typeof(Reagent) )) {
						R = _b;
						
						data["beakerVolume"] += R.volume;
					}
				}
			}
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "dna_modifier.tmpl", "DNA Modifier Console", 660, 700 );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			}
			return;
		}

		// Function from file: dna_modifier.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				
				if ( !Lang13.Bool( this.connected ) ) {
					this.connected = this.findScanner();
				}
				this.ui_interact( a );
			}
			return null;
		}

		// Function from file: dna_modifier.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.ui_interact( user );
			return null;
		}

		// Function from file: dna_modifier.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			this.ui_interact( a );
			return null;
		}

		// Function from file: dna_modifier.dm
		public override dynamic process(  ) {
			
			if ( ( this.stat & 27 ) != 0 ) {
				this.use_power = 0;
				return null;
			}

			if ( Lang13.Bool( this.connected ) && Lang13.Bool( this.connected.occupant ) ) {
				this.use_power = 2;
			} else {
				this.use_power = 1;
			}
			return null;
		}

		// Function from file: dna_modifier.dm
		public bool setInjectorBlock( Obj_Item_Weapon_Dnainjector I = null, dynamic blk = null, dynamic buffer = null ) {
			int pos = 0;
			double? id = null;

			pos = String13.FindIgnoreCase( blk, ":", 1, 0 );

			if ( !( pos != 0 ) ) {
				return false;
			}
			id = String13.ParseNumber( String13.SubStr( blk, 1, pos ) );

			if ( !Lang13.Bool( id ) ) {
				return false;
			}
			I.block = id;
			I.buf = buffer;
			return true;
		}

		// Function from file: dna_modifier.dm
		public ByTable all_dna_blocks( ByTable buffer = null ) {
			ByTable arr = null;
			int? i = null;

			arr = new ByTable();
			i = null;
			i = 1;

			while (( i ??0) <= buffer.len) {
				arr.Add( "" + i + ":" + GlobalFuncs.EncodeDNABlock( buffer[i] ) );
				i++;
			}
			return arr;
		}

		// Function from file: dna_modifier.dm
		public dynamic findScanner(  ) {
			dynamic foundmachine = null;

			
			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				this.dir = Convert.ToInt32( _a );
				
				foundmachine = Lang13.FindIn( typeof(Obj_Machinery_DnaScannernew), Map13.GetStep( this, this.dir ) );

				if ( Lang13.Bool( foundmachine ) ) {
					return foundmachine;
				}
			}
			return null;
		}

		// Function from file: dna_modifier.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: dna_modifier.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: dna_modifier.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_Disk_Data ) {
				
				if ( !Lang13.Bool( this.disk ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.disk = a;
						GlobalFuncs.to_chat( b, "You insert " + a + "." );
					}
				}
			}
			return null;
		}

	}

}