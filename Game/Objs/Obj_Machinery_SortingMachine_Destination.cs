// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SortingMachine_Destination : Obj_Machinery_SortingMachine {

		public ByTable destinations = null;
		public ByTable sorting = new ByTable( 0 );
		public bool unwrapped = false;

		// Function from file: sortingmachinery.dm
		public Obj_Machinery_SortingMachine_Destination ( dynamic loc = null ) : base( (object)(loc) ) {
			int? i = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.destinations = GlobalVars.DEFAULT_TAGGER_LOCATIONS.Copy();
			i = null;
			i = 1;

			while (( i ??0) <= this.destinations.len) {
				this.destinations[i] = String13.ToUpper( this.destinations[i] );
				i++;
			}
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_SortingMachine_Destination(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_Capacitor()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			double? idx = null;
			double? idx2 = null;
			string newtag = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["toggle_dest"] ) ) {
				idx = ( ( String13.ParseNumber( href_list["toggle_dest"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( href_list["toggle_dest"] ) ??0) >= this.destinations.len ? this.destinations.len : String13.ParseNumber( href_list["toggle_dest"] ) ) );

				if ( this.sorting.Contains( this.destinations[idx] ) ) {
					this.sorting.Remove( this.destinations[idx] );
				} else {
					this.sorting.Add( this.destinations[idx] );
				}
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["remove_dest"] ) ) {
				idx2 = ( ( String13.ParseNumber( href_list["remove_dest"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( href_list["remove_dest"] ) ??0) >= this.destinations.len ? this.destinations.len : String13.ParseNumber( href_list["remove_dest"] ) ) );
				this.sorting.Remove( this.destinations[idx2] );
				this.destinations.Remove( this.destinations[idx2] );
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["add_dest"] ) ) {
				newtag = String13.ToUpper( String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Destination ID?", "Add Destination", null, null, InputType.Str ) ), 1, 26 ) );
				this.destinations.Or( newtag );
				this.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["toggle_wrapped"] ) ) {
				this.unwrapped = !this.unwrapped;
				this.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: sortingmachinery.dm
		public override bool sort( Ent_Dynamic A = null ) {
			Ent_Dynamic B = null;
			Ent_Dynamic B2 = null;

			
			if ( A is Obj_Item_Delivery_Large ) {
				B = A;
				return this.sorting.Contains( ((dynamic)B).sortTag );
			}

			if ( A is Obj_Item_Delivery ) {
				B2 = A;
				return this.sorting.Contains( ((dynamic)B2).sortTag );
			}
			return this.unwrapped;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			int? i = null;
			bool selected = false;
			string cssclass = null;
			Browser popup = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				
				if ( user.machine == this ) {
					Task13.User.unset_machine();
				}
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "Select the desired items to sort from the line.<br>";
			i = null;
			i = 1;

			while (( i ??0) <= this.destinations.len) {
				selected = this.sorting.Contains( this.destinations[i] );
				cssclass = ( selected ? "linkOn" : "linkDanger" );
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";toggle_dest=" ).item( i ).str( "' class='" ).item( cssclass ).str( "'>" ).item( this.destinations[i] ).str( "</a> <a href='?src=" ).Ref( this ).str( ";remove_dest=" ).item( i ).str( "' class='linkDanger'>[X]</a><br>" ).ToString();
				i++;
			}
			dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";add_dest=1'>Add a new destination</a> <hr><br>" ).ToString();
			dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";toggle_wrapped=1' class='" ).item( ( this.unwrapped ? "linkOn" : "LinkDanger" ) ).str( "'>Filter unwrapped packages</a>" ).ToString();
			popup = new Browser( user, "destsortingmachine", this.name, 320, 200, this );
			popup.add_stylesheet( "shared", "nano/css/shared.css" );
			popup.set_content( dat );
			popup.open();
			return null;
		}

	}

}