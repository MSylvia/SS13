// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Bookcase_Random : Obj_Structure_Bookcase {

		public string category = null;
		public double book_count = 2;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.state = 2;
		}

		// Function from file: random_books.dm
		public Obj_Structure_Bookcase_Random ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state >= 3 ) {
				this.initialize();
			}
			return;
		}

		// Function from file: random_books.dm
		public override void initialize(  ) {
			Obj_Item_Weapon_Paper P = null;
			string c = null;
			DBQuery query = null;
			Obj_Item_Weapon_Book B = null;

			
			if ( !( this.book_count != 0 ) || !Lang13.Bool( Lang13.IsNumber( this.book_count ) ) ) {
				this.update_icon();
				return;
			}

			if ( !GlobalFuncs.establish_db_connection() ) {
				
				if ( Rand13.PercentChance( 5 ) ) {
					P = new Obj_Item_Weapon_Paper( GlobalFuncs.get_turf( this.loc ) );
					P.info = "There once was a book from Nantucket<br>But the database failed us, so f*$! it.<br>I tried to be good to you<br>Now this is an I.O.U<br>If you're feeling entitled, well, stuff it!<br><br><font color='gray'>~</font>";
				}
				this.update_icon();
				return;
			}

			if ( Lang13.Bool( this.category ) && Rand13.PercentChance( 25 ) ) {
				this.category = null;
			}
			this.book_count += Convert.ToDouble( Rand13.Pick(new object [] { -1, -1, 0, 1, 1 }) );

			if ( this.book_count <= 0 ) {
				this.update_icon();
				return;
			}
			c = ( Lang13.Bool( this.category ) ? " AND category='" + GlobalFuncs.sanitizeSQL( this.category ) + "'" : "" );
			query = GlobalVars.dbcon.NewQuery( "SELECT * FROM " + GlobalFuncs.format_table_name( "library" ) + " WHERE isnull(deleted)" + c + " GROUP BY title ORDER BY rand() LIMIT " + this.book_count + ";" );

			if ( query.Execute() ) {
				
				while (query.NextRow()) {
					B = new Obj_Item_Weapon_Book( this );
					B.author = query.item[2];
					B.title = query.item[3];
					B.dat = query.item[4];
					B.name = "Book: " + B.title;
					B.icon_state = "book" + Rand13.Int( 1, 8 );
				}
			} else {
				GlobalFuncs.log_game( "SQL ERROR populating library bookshelf.  Category: [" + this.category + "], Count: " + this.book_count + ", Error: [" + query.ErrorMsg() + "]\n" );
			}
			this.update_icon();
			return;
		}

	}

}