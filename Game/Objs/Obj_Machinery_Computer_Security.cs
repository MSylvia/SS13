// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Security : Obj_Machinery_Computer {

		public dynamic current = null;
		public bool last_pic = true;
		public ByTable network = new ByTable(new object [] { "SS13" });
		public bool mapping = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/security";
			this.light_color = "#FA8282";
			this.icon_state = "cameras";
		}

		// Function from file: camera.dm
		public Obj_Machinery_Computer_Security ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.tv_monitors.Add( this );
			return;
		}

		// Function from file: camera.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			ByTable L = null;
			Obj_Machinery_Camera C = null;
			ByTable D = null;
			Obj_Machinery_Camera C2 = null;
			dynamic T = null;
			dynamic tempnetwork = null;
			dynamic t = null;
			Obj_Machinery_Camera C3 = null;
			dynamic A = null;

			
			if ( this.z > 6 ) {
				GlobalFuncs.to_chat( a, "<span class='danger'>Unable to establish a connection: </span>You're too far away from the station!" );
				return null;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !( a is Mob_Living_Silicon_Ai ) ) {
				((Mob)a).set_machine( this );
			}
			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _a;
				
				L.Add( C );
			}
			GlobalFuncs.camera_sort( L );
			D = new ByTable();
			D["Cancel"] = "Cancel";

			foreach (dynamic _b in Lang13.Enumerate( L, typeof(Obj_Machinery_Camera) )) {
				C2 = _b;
				

				if ( !( C2.network is ByTable ) ) {
					T = GlobalFuncs.get_turf( C2 );
					Game13.log.WriteMsg( "##WARNING: " + ( "" + C2 + " - Camera at (" + T.x + "," + T.y + "," + T.z + ") has a non list for network, " + C2.network ) + " in " + "code/game/machinery/computer/camera.dm" + " at line " + 61 + " src: " + this + " usr: " + Task13.User + "." );
					C2.network = new ByTable(new object [] { C2.network });
				}
				tempnetwork = C2.network & this.network;

				if ( tempnetwork.len != 0 ) {
					D["" + C2.c_tag + ( C2.status ? null : " (Deactivated)" )] = C2;
				}
			}
			t = Interface13.Input( a, "Which camera should you change to?", null, null, D, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( t ) || t == "Cancel" ) {
				a.__CallVerb("Cancel Camera View" );
				return 0;
			}
			((Mob)a).set_machine( this );
			C3 = D[t];

			if ( C3 != null ) {
				
				if ( ( !this.Adjacent( a ) || a.machine != this || Lang13.Bool( a.blinded ) || ((Mob)a).isStunned() || !C3.can_use() ) && !( a is Mob_Living_Silicon_Ai ) ) {
					
					if ( !C3.can_use() && !( a is Mob_Living_Silicon_Ai ) ) {
						this.current = null;
					}
					a.__CallVerb("Cancel Camera View" );
					return 0;
				} else {
					
					if ( a is Mob_Living_Silicon_Ai ) {
						A = a;
						A.eyeobj.forceMove( GlobalFuncs.get_turf( C3 ) );
						A.client.eye = A.eyeobj;
					} else {
						this.current = C3;
						this.f_use_power( 50 );
					}
					Task13.Schedule( 5, (Task13.Closure)(() => {
						this.attack_hand( a );
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: camera.dm
		public override bool? check_eye( Mob user = null ) {
			
			if ( ( !this.Adjacent( user ) || user.isStunned() || Lang13.Bool( user.blinded ) || !Lang13.Bool( this.current ) || !Lang13.Bool( this.current.status ) ) && !( user is Mob_Living_Silicon ) ) {
				return null;
			}
			user.reset_view( this.current );
			return true;
		}

		// Function from file: camera.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: camera.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: camera.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.tv_monitors.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: overview.dm
		public void close( Mob user = null ) {
			bool? _using = null;
			Obj_Machinery_Computer_Security seccomp = null;

			Task13.Schedule( 20, (Task13.Closure)(() => {
				_using = null;

				if ( user.mapobjs != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( user, 1 ), typeof(Obj_Machinery_Computer_Security) )) {
						seccomp = _a;
						

						if ( seccomp == this ) {
							_using = true;
							break;
						}
					}

					if ( _using == true ) {
						this.close( user );
					} else {
						user.clearmap();
					}
				}
				return;
				return;
			}));
			return;
		}

		// Function from file: overview.dm
		public void drawmap( Mob user = null ) {
			int icx = 0;
			int icy = 0;
			int xoff = 0;
			int yoff = 0;
			int? icount = null;
			ByTable imap = null;
			int? i = null;
			int? wx = null;
			int? wy = null;
			Tile T = null;
			string colour = null;
			bool sense = false;
			GasMixture environment = null;
			dynamic turf_total = null;
			dynamic t1 = null;
			Ent_Static AM = null;
			Ent_Static A = null;
			double red = 0;
			double green = 0;
			double blue = 0;
			int ix = 0;
			int iy = 0;
			double? rx = null;
			double? ry = null;
			Icon I = null;
			int? i2 = null;
			Game_Data H = null;
			dynamic I2 = null;

			icx = Num13.Floor( Game13.map_size_x / 16 ) + 1;
			icy = Num13.Floor( Game13.map_size_y / 16 ) + 1;
			xoff = Num13.Floor( icx * 16 - Game13.map_size_x - 2 );
			yoff = Num13.Floor( icy * 16 - Game13.map_size_y - 2 );
			icount = icx * icy;
			imap = new ByTable();
			i = null;
			i = 0;

			while (( i ??0) < ( icount ??0)) {
				imap.Add( new Icon( "icons/misc/imap.dmi", "blank" ) );
				i++;
			}
			wx = null;
			wx = 1;

			while (( wx ??0) <= Game13.map_size_x) {
				wy = null;
				wy = 1;

				while (( wy ??0) <= Game13.map_size_y) {
					T = Map13.GetTile( wx ??0, wy ??0, this.z );
					colour = null;

					if ( !( T != null ) ) {
						colour = "#000000";
					} else {
						sense = true;

						switch ((string)( "" + T.type )) {
							case "/turf/space":
								colour = "#0a0a0a";
								sense = false;
								break;
							case "/turf/simulated/floor":
							case "/turf/simulated/floor/engine":
								environment = T.return_air();
								turf_total = environment.f_total_moles();
								t1 = turf_total / 103.93377685546875 * 175;

								if ( Convert.ToDouble( t1 ) <= 100 ) {
									colour = String13.ColorCode( 0, 0, Convert.ToInt32( t1 * 2.41 ) );
								} else {
									t1 = Num13.MinInt( 100, Convert.ToInt32( t1 - 100 ) );
									colour = String13.ColorCode( Convert.ToInt32( t1 * 2.41 ), Convert.ToInt32( t1 * 2.41 ), 255 );
								}
								break;
							case "/turf/simulated/wall":
								colour = "#606060";
								break;
							case "/turf/simulated/wall/r_wall":
								colour = "#806060";
								break;
							case "/turf/unsimulated/floor":
								colour = "#f0f0f0";
								break;
							case "/turf/unsimulated/wall":
							case "/turf/unsimulated/wall/other":
								colour = "#8c8c8c";
								break;
							default:
								colour = "#002800";
								break;
						}

						if ( sense ) {
							
							foreach (dynamic _b in Lang13.Enumerate( T.contents, typeof(Ent_Static) )) {
								AM = _b;
								

								if ( AM is Obj_Machinery_Door && !( AM is Obj_Machinery_Door_Window ) ) {
									
									if ( AM.density ) {
										colour = "#0060c0";
									} else {
										colour = "#60c080";
									}
								}

								if ( AM is Obj_Machinery_Alarm ) {
									colour = "#00ff00";

									if ( AM.icon_state == "alarm:1" ) {
										colour = "#ffff00";
									}
								}

								if ( AM is Mob ) {
									
									if ( Lang13.Bool( ((dynamic)AM).client ) ) {
										colour = "#ff0000";
									} else {
										colour = "#ff8080";
									}
								}
							}
						}
						A = T.loc;

						if ( Lang13.Bool( ((dynamic)A).fire ) ) {
							red = GlobalFuncs.getr( colour );
							green = GlobalFuncs.getg( colour );
							blue = GlobalFuncs.getb( colour );
							green = Num13.MinInt( 255, ((int)( green + 40 )) );
							blue = Num13.MinInt( 255, ((int)( blue + 40 )) );
							colour = String13.ColorCode( ((int)( red )), ((int)( green )), ((int)( blue )) );
						}
					}
					ix = Num13.Floor( ( ( wx ??0) * 2 + xoff ) / 32 );
					iy = Num13.Floor( ( ( wy ??0) * 2 + yoff ) / 32 );
					rx = ( ( wx ??0) * 2 + xoff ) % 32 + 1;
					ry = ( ( wy ??0) * 2 + yoff ) % 32 + 1;
					I = imap[ix + icx * iy + 1];
					I.DrawBox( colour, rx, ry, rx, ry );
					wy++;
				}
				wx++;
			}
			user.clearmap();
			user.mapobjs = new ByTable();
			i2 = null;
			i2 = 0;

			while (( i2 ??0) < ( icount ??0)) {
				H = GlobalFuncs.getFromPool( typeof(Obj_Screen) );
				((dynamic)H).screen_loc = "" + ( ( i2 ??0) % icx + 5 ) + "," + ( Num13.Floor( ( i2 ??0) / icx ) + 6 );
				((dynamic)H).name = ( i2 == 0 ? "maprefresh" : "map" );
				I2 = imap[( i2 ??0) + 1];
				((dynamic)H).icon = I2;
				GlobalFuncs.qdel( I2 );
				I2 = null;
				((dynamic)H).layer = 25;
				Task13.User.mapobjs.Add( H );
				i2++;
			}
			user.client.screen.Add( user.mapobjs );
			this.close( user );
			return;
		}

		// Function from file: overview.dm
		[Verb]
		[VerbInfo( name: ".map", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void station_map(  ) {
			Task13.User.set_machine( this );

			if ( !this.mapping ) {
				return;
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + Task13.User + "(" + Task13.User.key + ") used station map L" + this.z + " in " + this.loc.loc ) ) );
			this.drawmap( Task13.User );
			return;
		}

	}

}