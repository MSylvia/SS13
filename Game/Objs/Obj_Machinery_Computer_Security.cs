// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Security : Obj_Machinery_Computer {

		public bool last_pic = true;
		public ByTable network = new ByTable(new object [] { "SS13" });
		public bool mapping = false;
		public ByTable watchers = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "cameras";
			this.icon_keyboard = "security_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Security);
		}

		public Obj_Machinery_Computer_Security ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: camera.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			ByTable camera_list = null;
			dynamic Num = null;
			Obj_Machinery_Camera CAM = null;

			
			if ( this.stat != 0 ) {
				return null;
			}

			if ( !( this.network != null ) ) {
				throw new Exception( "No camera network" );
				((Mob)a).unset_machine();
				return null;
			}

			if ( !( this.network is ByTable ) ) {
				throw new Exception( "Camera network is not a list" );
				((Mob)a).unset_machine();
				return null;
			}

			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				((Mob)a).unset_machine();
				return null;
			}
			camera_list = this.get_available_cameras();

			if ( !this.watchers.Contains( a ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( camera_list )) {
					Num = _a;
					
					CAM = camera_list[Num];

					if ( CAM is Obj_Machinery_Camera ) {
						
						if ( CAM.can_use() ) {
							this.watchers[a] = CAM;
							break;
						}
					}
				}

				if ( !this.watchers.Contains( a ) ) {
					((Mob)a).unset_machine();
					return null;
				}
			}
			this.use_camera_console( a );
			return null;
		}

		// Function from file: camera.dm
		public override dynamic Destroy(  ) {
			dynamic M = null;

			
			if ( this.watchers.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.watchers )) {
					M = _a;
					
					((Mob)M).unset_machine();
				}
			}
			return base.Destroy();
		}

		// Function from file: camera.dm
		public override void on_unset_machine( Mob user = null ) {
			this.watchers.Remove( user );
			user.reset_perspective( null );
			return;
		}

		// Function from file: camera.dm
		public override dynamic check_eye( Mob user = null ) {
			Obj_Machinery_Camera C = null;
			ByTable viewing = null;

			
			if ( ( this.stat & 3 ) != 0 || user.incapacitated() || user.eye_blind != 0 ) {
				user.unset_machine();
				return null;
			}

			if ( !this.watchers.Contains( user ) ) {
				user.unset_machine();
				return null;
			}

			if ( !Lang13.Bool( this.watchers[user] ) ) {
				user.unset_machine();
				return null;
			}
			C = this.watchers[user];

			if ( !C.can_use() ) {
				user.unset_machine();
				return null;
			}

			if ( !( user is Mob_Living_Silicon ) ) {
				
				if ( !this.Adjacent( user ) ) {
					user.unset_machine();
					return null;
				}
			} else if ( user is Mob_Living_Silicon_Robot ) {
				viewing = Map13.FetchViewers( null, this );

				if ( !( viewing.Find( user ) != 0 ) ) {
					user.unset_machine();
				}
			}
			return null;
		}

		// Function from file: camera.dm
		public ByTable get_available_cameras(  ) {
			ByTable L = null;
			Obj_Machinery_Camera C = null;
			ByTable D = null;
			Obj_Machinery_Camera C2 = null;
			ByTable tempnetwork = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _a;
				

				if ( ( this.z > 7 || C.z > 7 ) && C.z != this.z ) {
					continue;
				}
				L.Add( C );
			}
			GlobalFuncs.camera_sort( L );
			D = new ByTable();
			D["Cancel"] = "Cancel";

			foreach (dynamic _b in Lang13.Enumerate( L, typeof(Obj_Machinery_Camera) )) {
				C2 = _b;
				

				if ( !( C2.network != null ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						throw new Exception( "Camera in a cameranet has no camera network" );
						return;
					}));
					continue;
				}

				if ( !( C2.network is ByTable ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						throw new Exception( "Camera in a cameranet has a non-list camera network" );
						return;
					}));
					continue;
				}
				tempnetwork = C2.network & this.network;

				if ( tempnetwork.len != 0 ) {
					D["" + C2.c_tag + ( C2.status ? null : " (Deactivated)" )] = C2;
				}
			}
			return D;
		}

		// Function from file: camera.dm
		public bool use_camera_console( dynamic user = null ) {
			ByTable camera_list = null;
			dynamic t = null;
			Obj_Machinery_Camera C = null;
			bool camera_fail = false;
			ByTable viewing = null;
			dynamic A = null;

			camera_list = this.get_available_cameras();
			t = Interface13.Input( user, "Which camera should you change to?", null, null, camera_list, InputType.Null | InputType.Any );

			if ( user.machine != this ) {
				return false;
			}

			if ( !Lang13.Bool( t ) ) {
				((Mob)user).unset_machine();
				return false;
			}
			C = camera_list[t];

			if ( t == "Cancel" ) {
				((Mob)user).unset_machine();
				return false;
			}

			if ( C != null ) {
				camera_fail = false;

				if ( !C.can_use() || user.machine != this || user.eye_blind != 0 || ((Mob)user).incapacitated() ) {
					camera_fail = true;
				} else if ( user is Mob_Living_Silicon_Robot ) {
					viewing = Map13.FetchViewers( null, this );

					if ( !( viewing.Find( user ) != 0 ) ) {
						camera_fail = true;
					}
				} else if ( !( user is Mob_Living_Silicon ) ) {
					
					if ( !this.Adjacent( user ) ) {
						camera_fail = true;
					}
				}

				if ( camera_fail ) {
					((Mob)user).unset_machine();
					return false;
				}

				if ( user is Mob_Living_Silicon_Ai ) {
					A = user;
					((Mob_Camera_AiEye)A.eyeobj).setLoc( GlobalFuncs.get_turf( C ) );
					A.client.eye = A.eyeobj;
				} else {
					((Mob)user).reset_perspective( C );
				}
				this.watchers[user] = C;
				this.f_use_power( 50 );
				Task13.Schedule( 5, (Task13.Closure)(() => {
					this.use_camera_console( user );
					return;
				}));
			} else {
				((Mob)user).unset_machine();
			}
			return false;
		}

		// Function from file: overview.dm
		public void close( Mob user = null ) {
			bool? _using = null;
			Obj_Machinery_Computer_Security seccomp = null;

			Task13.Schedule( 20, (Task13.Closure)(() => {
				_using = null;

				if ( user.mapobjs != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( user, 1 ), typeof(Obj_Machinery_Computer_Security) )) {
						seccomp = _a;
						

						if ( seccomp == this ) {
							_using = true;
							break;
						}
					}

					if ( _using == true ) {
						this.close( user );
					} else {
						user.clearmap();
					}
				}
				return;
				return;
			}));
			return;
		}

		// Function from file: overview.dm
		public void drawmap( Mob user = null ) {
			int icx = 0;
			int icy = 0;
			int xoff = 0;
			int yoff = 0;
			int? icount = null;
			ByTable imap = null;
			int? i = null;
			int? wx = null;
			int? wy = null;
			Tile T = null;
			string colour = null;
			bool sense = false;
			GasMixture environment = null;
			double turf_total = 0;
			double t1 = 0;
			Ent_Static AM = null;
			Ent_Static A = null;
			int red = 0;
			int green = 0;
			int blue = 0;
			int ix = 0;
			int iy = 0;
			double? rx = null;
			double? ry = null;
			Icon I = null;
			int? i2 = null;
			Obj_Screen H = null;
			dynamic I2 = null;

			icx = Num13.Floor( Game13.map_size_x / 16 ) + 1;
			icy = Num13.Floor( Game13.map_size_y / 16 ) + 1;
			xoff = Num13.Floor( icx * 16 - Game13.map_size_x - 2 );
			yoff = Num13.Floor( icy * 16 - Game13.map_size_y - 2 );
			icount = icx * icy;
			imap = new ByTable();
			i = null;
			i = 0;

			while (( i ??0) < ( icount ??0)) {
				imap.Add( new Icon( "icons/misc/imap.dmi", "blank" ) );
				i++;
			}
			wx = null;
			wx = 1;

			while (( wx ??0) <= Game13.map_size_x) {
				wy = null;
				wy = 1;

				while (( wy ??0) <= Game13.map_size_y) {
					T = Map13.GetTile( wx ??0, wy ??0, this.z );
					colour = null;

					if ( !( T != null ) ) {
						colour = "#000000";
					} else {
						sense = true;

						switch ((string)( "" + T.type )) {
							case "/turf/space":
								colour = "#0a0a0a";
								sense = false;
								break;
							case "/turf/simulated/floor":
							case "/turf/simulated/floor/engine":
								environment = T.return_air();
								turf_total = environment.total_moles();
								t1 = turf_total / 103.98379516601562 * 175;

								if ( t1 <= 100 ) {
									colour = String13.ColorCode( 0, 0, ((int)( t1 * 2.41 )) );
								} else {
									t1 = Num13.MinInt( 100, ((int)( t1 - 100 )) );
									colour = String13.ColorCode( ((int)( t1 * 2.41 )), ((int)( t1 * 2.41 )), 255 );
								}
								break;
							case "/turf/simulated/wall":
								colour = "#606060";
								break;
							case "/turf/simulated/wall/r_wall":
								colour = "#806060";
								break;
							default:
								colour = "#002800";
								break;
						}

						if ( sense ) {
							
							foreach (dynamic _b in Lang13.Enumerate( T.contents, typeof(Ent_Static) )) {
								AM = _b;
								

								if ( AM is Obj_Machinery_Door && !( AM is Obj_Machinery_Door_Window ) ) {
									
									if ( AM.density ) {
										colour = "#0060c0";
									} else {
										colour = "#60c080";
									}
								}

								if ( AM is Obj_Machinery_Airalarm ) {
									colour = "#00ff00";

									if ( AM.icon_state == "alarm:1" ) {
										colour = "#ffff00";
									}
								}

								if ( AM is Mob ) {
									
									if ( Lang13.Bool( ((dynamic)AM).client ) ) {
										colour = "#ff0000";
									} else {
										colour = "#ff8080";
									}
								}
							}
						}
						A = T.loc;

						if ( Lang13.Bool( ((dynamic)A).fire ) ) {
							red = GlobalFuncs.getr( colour );
							green = GlobalFuncs.getg( colour );
							blue = GlobalFuncs.getb( colour );
							green = Num13.MinInt( 255, green + 40 );
							blue = Num13.MinInt( 255, blue + 40 );
							colour = String13.ColorCode( red, green, blue );
						}
					}
					ix = Num13.Floor( ( ( wx ??0) * 2 + xoff ) / 32 );
					iy = Num13.Floor( ( ( wy ??0) * 2 + yoff ) / 32 );
					rx = ( ( wx ??0) * 2 + xoff ) % 32 + 1;
					ry = ( ( wy ??0) * 2 + yoff ) % 32 + 1;
					I = imap[ix + icx * iy + 1];
					I.DrawBox( colour, rx, ry, rx, ry );
					wy++;
				}
				wx++;
			}
			user.clearmap();
			user.mapobjs = new ByTable();
			i2 = null;
			i2 = 0;

			while (( i2 ??0) < ( icount ??0)) {
				H = new Obj_Screen();
				H.screen_loc = "" + ( ( i2 ??0) % icx + 5 ) + "," + ( Num13.Floor( ( i2 ??0) / icx ) + 6 );
				H.name = ( i2 == 0 ? "maprefresh" : "map" );
				I2 = imap[( i2 ??0) + 1];
				H.icon = I2;
				GlobalFuncs.qdel( I2 );
				H.layer = 25;
				Task13.User.mapobjs.Add( H );
				i2++;
			}
			user.client.screen.Add( user.mapobjs );
			this.close( user );
			return;
		}

		// Function from file: overview.dm
		[Verb]
		[VerbInfo( name: ".map", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void station_map(  ) {
			Task13.User.set_machine( this );

			if ( !this.mapping ) {
				return;
			}
			GlobalFuncs.log_game( "" + Task13.User + "(" + Task13.User.key + ") used station map L" + this.z + " in " + this.loc.loc );
			this.drawmap( Task13.User );
			return;
		}

	}

}