// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Anomaly_IonMobility : Obj_Machinery_Anomaly {

		// Function from file: analysis_ion_mobility.dm
		public Obj_Machinery_Anomaly_IonMobility ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Anom_Ion(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: analysis_ion_mobility.dm
		public override string ScanResults(  ) {
			string results = null;
			dynamic scanned_sample = null;
			string carrier = null;
			int num_reagents = 0;
			Reagent A = null;
			Reagent R = null;
			int found = 0;
			dynamic dis_ratio = null;
			int desc_index = 0;

			results = "The scan was inconclusive. Check sample integrity and carrier consistency.";
			num_reagents = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.held_container.reagents.reagent_list, typeof(Reagent) )) {
				A = _a;
				
				R = A;

				if ( R is Reagent_AnalysisSample ) {
					scanned_sample = R.data;
				} else {
					carrier = R.id;
				}
				num_reagents++;
			}

			if ( num_reagents == 2 && Lang13.Bool( scanned_sample ) && Lang13.Bool( carrier ) ) {
				results = "Kinetic analysis on sample's ionic residue in carrier (" + carrier + ") indicates the dissonance spread:<br><br>";
				found = 0;

				if ( scanned_sample.find_presence.Find( carrier ) != 0 ) {
					dis_ratio = scanned_sample.find_presence[carrier];
					desc_index = GlobalVars.responsive_carriers.Find( carrier );
					results += " - " + GlobalVars.finds_as_strings[desc_index] + ": " + dis_ratio + "<br>";
					found++;
				}

				if ( !( found != 0 ) ) {
					results = "Kinetic analysis on sample's ionic residue in carrier (" + carrier + ") to determine composition were inconclusive.<br>";
				}

				if ( carrier == scanned_sample.source_mineral ) {
					results += "Warning, analysis may be contaminated by high quantities of molecular carrier present throughout sample.";
				}
			}
			return results;
		}

	}

}