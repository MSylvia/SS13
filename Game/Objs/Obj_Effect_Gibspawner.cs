// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Gibspawner : Obj_Effect {

		public bool sparks = false;
		public int virusProb = 20;
		public ByTable gibtypes = new ByTable();
		public ByTable gibamounts = new ByTable();
		public ByTable gibdirections = new ByTable();
		public string fleshcolor = null;
		public string bloodcolor = null;

		// Function from file: gibs.dm
		public Obj_Effect_Gibspawner ( dynamic location = null, ByTable viruses = null, Dna MobDNA = null, string fleshcolor = null, string bloodcolor = null ) : base( (object)(location) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( fleshcolor ) ) {
				this.fleshcolor = fleshcolor;
			}

			if ( Lang13.Bool( bloodcolor ) ) {
				this.bloodcolor = bloodcolor;
			}

			if ( this.loc is Tile ) {
				this.Gib( this.loc, viruses, MobDNA );
			}
			return;
		}

		// Function from file: gibs.dm
		public void Gib( Ent_Static location = null, ByTable viruses = null, Dna MobDNA = null ) {
			viruses = viruses ?? new ByTable();

			Game_Data gib = null;
			Disease D = null;
			Effect_Effect_System_SparkSpread s = null;
			int? i = null;
			int? j = null;
			dynamic gibType = null;
			Disease D2 = null;
			dynamic viruus = null;
			ByTable directions = null;

			
			if ( this.gibtypes.len != this.gibamounts.len || this.gibamounts.len != this.gibdirections.len ) {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='warning'>Gib list length mismatch!</span>" );
				return;
			}
			gib = null;

			foreach (dynamic _a in Lang13.Enumerate( viruses, typeof(Disease) )) {
				D = _a;
				

				if ( D.spread_type == -1 ) {
					D.f_cure( true );
					GlobalFuncs.qdel( D );
					D = null;
				}
			}

			if ( this.sparks ) {
				s = new Effect_Effect_System_SparkSpread();
				s.set_up( 2, 1, location );
				s.start();
			}
			i = null;
			i = 1;

			while (( i ??0) <= this.gibtypes.len) {
				
				if ( Lang13.Bool( this.gibamounts[i] ) ) {
					j = null;
					j = 1;

					while (( j ??0) <= Convert.ToDouble( this.gibamounts[i] )) {
						gibType = this.gibtypes[i];
						gib = GlobalFuncs.getFromPool( gibType, location );
						((dynamic)gib).New( location );

						if ( Lang13.Bool( this.fleshcolor ) ) {
							((dynamic)gib).fleshcolor = this.fleshcolor;
						}

						if ( Lang13.Bool( this.bloodcolor ) ) {
							((dynamic)gib).basecolor = this.bloodcolor;
						}
						((dynamic)gib).update_icon();

						if ( viruses.len > 0 ) {
							
							foreach (dynamic _b in Lang13.Enumerate( viruses, typeof(Disease) )) {
								D2 = _b;
								

								if ( Rand13.PercentChance( this.virusProb ) ) {
									viruus = D2.Copy( true );
									((dynamic)gib).viruses += viruus;
									viruus.holder = gib;
								}
							}
						}
						((dynamic)gib).blood_DNA = new ByTable();

						if ( MobDNA != null ) {
							((dynamic)gib).blood_DNA[MobDNA.unique_enzymes] = MobDNA.b_type;
						} else if ( this is Obj_Effect_Gibspawner_Xeno ) {
							((dynamic)gib).blood_DNA["UNKNOWN DNA"] = "X*";
						} else if ( this is Obj_Effect_Gibspawner_Human ) {
							((dynamic)gib).blood_DNA["Non-human DNA"] = "A+";
						}
						directions = this.gibdirections[i];

						if ( directions.len != 0 ) {
							((dynamic)gib).streak( directions );
						}
						j++;
					}
				}
				i++;
			}
			GlobalFuncs.qdel( this );
			return;
		}

	}

}