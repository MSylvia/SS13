// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RoboticFabricator : Obj_Machinery {

		public double metal_amount = 0;
		public bool operating = false;
		public dynamic being_built = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 20;
			this.active_power_usage = 5000;
			this.icon = "icons/obj/robotics.dmi";
			this.icon_state = "fab-idle";
		}

		public Obj_Machinery_RoboticFabricator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: robot_fabricator.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? part_type = null;
			string build_type = null;
			int build_time = 0;
			double build_cost = 0;
			Type building = null;
			dynamic M = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["make"] ) ) {
				
				if ( !this.operating ) {
					part_type = String13.ParseNumber( href_list["make"] );
					build_type = "";
					build_time = 200;
					build_cost = 25000;

					switch ((int?)( part_type )) {
						case 1:
							build_type = "/obj/item/robot_parts/l_arm";
							build_time = 200;
							build_cost = 10000;
							break;
						case 2:
							build_type = "/obj/item/robot_parts/r_arm";
							build_time = 200;
							build_cost = 10000;
							break;
						case 3:
							build_type = "/obj/item/robot_parts/l_leg";
							build_time = 200;
							build_cost = 10000;
							break;
						case 4:
							build_type = "/obj/item/robot_parts/r_leg";
							build_time = 200;
							build_cost = 10000;
							break;
						case 5:
							build_type = "/obj/item/robot_parts/chest";
							build_time = 350;
							build_cost = 40000;
							break;
						case 6:
							build_type = "/obj/item/robot_parts/head";
							build_time = 350;
							build_cost = 5000;
							break;
						case 7:
							build_type = "/obj/item/robot_parts/robot_suit";
							build_time = 600;
							build_cost = 15000;
							break;
					}
					building = Lang13.FindClass( build_type );

					if ( !( building == null ) ) {
						
						if ( this.metal_amount >= build_cost ) {
							this.operating = true;
							this.use_power = 2;
							this.metal_amount = Num13.MaxInt( 0, ((int)( this.metal_amount - build_cost )) );
							this.being_built = Lang13.Call( building, this );
							this.overlays.Add( "fab-active" );
							this.updateUsrDialog();
							Task13.Schedule( build_time, (Task13.Closure)(() => {
								
								if ( !( this.being_built == null ) ) {
									this.being_built.loc = GlobalFuncs.get_turf( this );
									this.being_built = null;
								}
								this.use_power = 1;
								this.operating = false;
								this.overlays.Remove( "fab-active" );
								return;
							}));
						}
					}
				}
				return null;
			}

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( this, 1 ) )) {
				M = _b;
				

				if ( Lang13.Bool( M.client ) && M.machine == this ) {
					this.attack_hand( M );
				}
			}
			return null;
		}

		// Function from file: robot_fabricator.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}

			if ( this.operating ) {
				dat = "\n<TT>Building " + this.being_built.name + ".<BR>\nPlease wait until completion...</TT><BR>\n<BR>\n";
			} else {
				dat = new Txt( "\n<B>Metal Amount:</B> " ).item( Num13.MinInt( 150000, ((int)( this.metal_amount )) ) ).str( " cm<sup>3</sup> (MAX: 150,000)<BR><HR>\n<BR>\n<A href='?src=" ).Ref( this ).str( ";make=1'>Left Arm (25,000 cc metal.)<BR>\n<A href='?src=" ).Ref( this ).str( ";make=2'>Right Arm (25,000 cc metal.)<BR>\n<A href='?src=" ).Ref( this ).str( ";make=3'>Left Leg (25,000 cc metal.)<BR>\n<A href='?src=" ).Ref( this ).str( ";make=4'>Right Leg (25,000 cc metal).<BR>\n<A href='?src=" ).Ref( this ).str( ";make=5'>Chest (50,000 cc metal).<BR>\n<A href='?src=" ).Ref( this ).str( ";make=6'>Head (50,000 cc metal).<BR>\n<A href='?src=" ).Ref( this ).str( ";make=7'>Robot Frame (75,000 cc metal).<BR>\n" ).ToString();
			}
			Interface13.Browse( a, "<HEAD><TITLE>Robotic Fabricator Control Panel</TITLE></HEAD><TT>" + dat + "</TT>", "window=robot_fabricator" );
			GlobalFuncs.onclose( a, "robot_fabricator" );
			return null;
		}

		// Function from file: robot_fabricator.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: robot_fabricator.dm
		public override void power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
			}
			return;
		}

		// Function from file: robot_fabricator.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			int count = 0;

			
			if ( A is Obj_Item_Stack_Sheet_Metal ) {
				
				if ( this.metal_amount < 150000 ) {
					count = 0;
					this.overlays.Add( "fab-load-metal" );
					Task13.Schedule( 15, (Task13.Closure)(() => {
						
						if ( Lang13.Bool( A ) ) {
							
							if ( !Lang13.Bool( A.amount ) ) {
								return;
							}

							while (this.metal_amount < 150000 && Lang13.Bool( A.amount )) {
								this.metal_amount += Convert.ToDouble( A.materials["$metal"] );
								A.amount--;
								count++;
							}

							if ( Convert.ToDouble( A.amount ) < 1 ) {
								GlobalFuncs.qdel( A );
							}
							user.WriteMsg( new Txt( "<span class='notice'>You insert " ).item( count ).str( " metal sheet" ).s().str( " into " ).the( this ).item().str( ".</span>" ).ToString() );
							this.overlays.Remove( "fab-load-metal" );
							this.updateDialog();
						}
						return;
					}));
				} else {
					user.WriteMsg( new Txt().The( this ).item().str( " is full." ).ToString() );
				}
			}
			return null;
		}

	}

}