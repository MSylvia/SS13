// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Soap : Obj_Item_Weapon {

		public double cleanspeed = 50;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.throw_speed = 3;
			this.icon_state = "soap";
		}

		public Obj_Item_Weapon_Soap ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: clown_items.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic C = null;

			
			if ( !( proximity_flag == true ) || !this.check_allowed_items( target ) ) {
				return false;
			}

			if ( Lang13.Bool( user.client ) && Lang13.Bool( user.client.screen.Contains( target ) ) ) {
				user.WriteMsg( "<span class='warning'>You need to take that " + target.name + " off before cleaning it!</span>" );
			} else if ( target is Obj_Effect_Decal_Cleanable ) {
				((Ent_Static)user).visible_message( new Txt().item( user ).str( " begins to scrub " ).the( target.name ).item().str( " out with " ).item( this ).str( "." ).ToString(), new Txt( "<span class='warning'>You begin to scrub " ).the( target.name ).item().str( " out with " ).item( this ).str( "...</span>" ).ToString() );

				if ( GlobalFuncs.do_after( user, this.cleanspeed, null, target ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>You scrub " ).the( target.name ).item().str( " out.</span>" ).ToString() );
					GlobalFuncs.qdel( target );
				}
			} else if ( target is Mob_Living_Carbon_Human && user.zone_selected == "mouth" ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).the( user ).item().str( " washes " ).the( target ).item().str( "'s mouth out with " ).item( this.name ).str( "!</span>" ).ToString(), new Txt( "<span class='notice'>You wash " ).the( target ).item().str( "'s mouth out with " ).item( this.name ).str( "!</span>" ).ToString() );
				return false;
			} else if ( target is Obj_Structure_Window ) {
				((Ent_Static)user).visible_message( new Txt().item( user ).str( " begins to clean " ).the( target.name ).item().str( " with " ).item( this ).str( "..." ).ToString(), new Txt( "<span class='notice'>You begin to clean " ).the( target.name ).item().str( " with " ).item( this ).str( "...</span>" ).ToString() );

				if ( GlobalFuncs.do_after( user, this.cleanspeed, null, target ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>You clean " ).the( target.name ).item().str( ".</span>" ).ToString() );
					target.color = Lang13.Initial( target, "color" );
					((Ent_Static)target).SetOpacity( Lang13.Initial( target, "opacity" ) );
				}
			} else {
				((Ent_Static)user).visible_message( new Txt().item( user ).str( " begins to clean " ).the( target.name ).item().str( " with " ).item( this ).str( "..." ).ToString(), new Txt( "<span class='notice'>You begin to clean " ).the( target.name ).item().str( " with " ).item( this ).str( "...</span>" ).ToString() );

				if ( GlobalFuncs.do_after( user, this.cleanspeed, null, target ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>You clean " ).the( target.name ).item().str( ".</span>" ).ToString() );
					C = Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable), target );
					GlobalFuncs.qdel( C );
					((Ent_Static)target).clean_blood();
				}
			}
			return false;
		}

		// Function from file: clown_items.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic M = null;

			
			if ( O is Mob_Living_Carbon ) {
				M = O;
				((dynamic)M).slip( 4, 2, this );
			}
			return null;
		}

		// Function from file: clown_items.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.say( ";FFFFFFFFFFFFFFFFUUUUUUUDGE!!" );
			user.visible_message( "<span class='suicide'>" + user + " lifts the " + this.name + " to their mouth and gnaws on it furiously, producing a thick froth! They'll never get that BB gun now!" );
			GlobalFuncs.PoolOrNew( typeof(Obj_Effect_ParticleEffect_Foam), this.loc );
			return 4;
		}

	}

}