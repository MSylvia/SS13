// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Radio : Obj_Item_Device {

		public dynamic on = 1;
		public dynamic last_transmission = null;
		public double? frequency = 1459;
		public double? traitor_frequency = 0;
		public double? canhear_range = 3;
		public dynamic patch_link = null;
		public ByTable secure_radio_connections = null;
		public bool prison_radio = false;
		public bool b_stat = false;
		public bool broadcasting = false;
		public bool listening = true;
		public bool translate_binary = false;
		public bool translate_hive = false;
		public int? freerange = 0;
		public ByTable channels = new ByTable();
		public dynamic keyslot = null;
		public bool subspace_switchable = false;
		public bool subspace_transmission = false;
		public bool syndie = false;
		public bool centcom = false;
		public bool freqlock = false;
		public int emped = 0;
		public int TRANSMISSION_DELAY = 5;
		public bool FREQ_LISTENING = true;
		public int? command = 0;
		public bool use_command = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "walkietalkie";
			this.flags = 80;
			this.slot_flags = 512;
			this.languages = 9;
			this.throw_speed = 3;
			this.w_class = 2;
			this.materials = new ByTable().Set( "$metal", 75 ).Set( "$glass", 25 );
			this.icon = "icons/obj/radio.dmi";
			this.icon_state = "walkietalkie";
		}

		// Function from file: radio.dm
		public Obj_Item_Device_Radio ( dynamic loc = null ) : base( (object)(loc) ) {
			this.wires = new Wires_Radio( this );

			if ( this.prison_radio ) {
				((Wires)this.wires).cut( "transmit" );
			}
			this.secure_radio_connections = new ByTable();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.SSradio != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: radio.dm
		public override double emp_act( int severity = 0 ) {
			int curremp = 0;
			dynamic ch_name = null;

			this.emped++;
			curremp = this.emped;

			if ( this.listening && this.loc is Mob ) {
				((dynamic)this.loc).WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " overloads.</span>" ).ToString() );
			}
			this.broadcasting = false;
			this.listening = false;

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				ch_name = _a;
				
				this.channels[ch_name] = 0;
			}
			this.on = 0;
			Task13.Schedule( 200, (Task13.Closure)(() => {
				
				if ( this.emped == curremp ) {
					this.emped = 0;

					if ( !( this is Obj_Item_Device_Radio_Intercom ) ) {
						this.on = 1;
					}
				}
				return;
			}));
			base.emp_act( severity );
			return 0;
		}

		// Function from file: radio.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				this.b_stat = !this.b_stat;

				if ( this.b_stat ) {
					user.WriteMsg( "<span class='notice'>The radio can now be attached and modified!</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>The radio can no longer be modified or attached!</span>" );
				}
			}
			this.add_fingerprint( user );
			return null;
		}

		// Function from file: radio.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.b_stat ) {
				user.WriteMsg( "<span class='notice'>" + this.name + " can be attached and modified.</span>" );
			} else {
				user.WriteMsg( "<span class='notice'>" + this.name + " can not be modified or attached.</span>" );
			}
			return 0;
		}

		// Function from file: radio.dm
		public override string Hear( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			
			if ( Lang13.Bool( radio_freq ) ) {
				return null;
			}

			if ( this.broadcasting ) {
				
				if ( Map13.GetDistance( this, speaker ) <= ( this.canhear_range ??0) ) {
					this.talk_into( speaker, raw_message, null, spans );
				}
			}
			return null;
		}

		// Function from file: radio.dm
		public override void talk_into( dynamic M = null, dynamic input = null, dynamic channel = null, ByTable spans = null ) {
			dynamic freq = null;
			double? freqnum = null;
			dynamic position = null;
			string real_name = null;
			string mobkey = null;
			bool voicemask = false;
			dynamic voice = null;
			dynamic speaker = null;
			string jobname = null;
			Data_Record findjob = null;
			dynamic B = null;
			Signal signal = null;
			Signal signal2 = null;
			Obj_Machinery_Telecomms_Receiver R = null;
			Obj_Machinery_Telecomms_Allinone R2 = null;
			int? filter_type = null;
			Signal signal3 = null;
			Obj_Machinery_Telecomms_Receiver R3 = null;

			
			if ( !Lang13.Bool( this.on ) ) {
				return;
			}

			if ( !Lang13.Bool( M ) || !Lang13.Bool( input ) ) {
				return;
			}

			if ( ((Wires)this.wires).is_cut( "transmit" ) ) {
				return;
			}

			if ( !((Ent_Dynamic)M).IsVocal() ) {
				return;
			}

			if ( this.use_command ) {
				spans.Or( "commmand_headset" );
			}

			if ( Lang13.Bool( channel ) && this.channels != null && this.channels.len > 0 ) {
				
				if ( channel == "department" ) {
					channel = this.channels[1];
				}
				freq = this.secure_radio_connections[channel];

				if ( !Lang13.Bool( this.channels[channel] ) ) {
					return;
				}
			} else {
				freq = this.frequency;
				channel = null;
			}
			freqnum = String13.ParseNumber( freq );
			position = GlobalFuncs.get_turf( this );
			real_name = M.name;
			mobkey = "none";
			voicemask = false;
			voice = ((Ent_Dynamic)M).GetVoice();

			if ( M is Mob ) {
				speaker = M;
				real_name = speaker.real_name;

				if ( Lang13.Bool( speaker.client ) ) {
					mobkey = speaker.key;
				}
			}

			if ( M is Mob_Living_Carbon_Human ) {
				findjob = GlobalFuncs.find_record( "name", voice, GlobalVars.data_core.general );

				if ( voice != real_name ) {
					voicemask = true;
				}

				if ( findjob != null ) {
					jobname = findjob.fields["rank"];
				} else {
					jobname = "Unknown";
				}
			} else if ( M is Mob_Living_Carbon ) {
				jobname = "No id";
			} else if ( M is Mob_Living_Silicon_Ai ) {
				jobname = "AI";
			} else if ( M is Mob_Living_Silicon_Robot ) {
				B = M;
				jobname = "" + B.designation + " Cyborg";
			} else if ( M is Mob_Living_Silicon_Pai ) {
				jobname = "Personal AI";
			} else if ( M is Obj ) {
				jobname = "Machine";
			} else {
				jobname = "Unknown";
			}

			if ( freqnum == GlobalVars.CENTCOM_FREQ && this.centcom ) {
				signal = new Signal();
				signal.transmission_method = 2;
				signal.data = new ByTable()
					.Set( "mob", M )
					.Set( "mobtype", M.type )
					.Set( "realname", real_name )
					.Set( "name", voice )
					.Set( "job", jobname )
					.Set( "key", mobkey )
					.Set( "vmask", voicemask )
					.Set( "compression", 0 )
					.Set( "message", input )
					.Set( "radio", this )
					.Set( "slow", 0 )
					.Set( "traffic", 0 )
					.Set( "type", 0 )
					.Set( "server", null )
					.Set( "reject", 0 )
					.Set( "level", 0 )
					.Set( "languages", this.languages )
					.Set( "spans", spans )
					.Set( "verb_say", M.verb_say )
					.Set( "verb_ask", M.verb_ask )
					.Set( "verb_exclaim", M.verb_exclaim )
					.Set( "verb_yell", M.verb_yell )
				;
				signal.frequency = freqnum;
				GlobalFuncs.Broadcast_Message( M, voicemask, this, input, voice, jobname, real_name, 5, Lang13.Bool( signal.data["compression"] ), new ByTable(new object [] { position.z, 0 }), freq, spans, this.verb_say, this.verb_ask, this.verb_exclaim, this.verb_yell );
				return;
			}

			if ( this.subspace_transmission ) {
				signal2 = new Signal();
				signal2.transmission_method = 2;
				signal2.data = new ByTable()
					.Set( "mob", M )
					.Set( "mobtype", M.type )
					.Set( "realname", real_name )
					.Set( "name", voice )
					.Set( "job", jobname )
					.Set( "key", mobkey )
					.Set( "vmask", voicemask )
					.Set( "compression", Rand13.Int( 35, 65 ) )
					.Set( "message", input )
					.Set( "radio", this )
					.Set( "slow", 0 )
					.Set( "traffic", 0 )
					.Set( "type", 0 )
					.Set( "server", null )
					.Set( "reject", 0 )
					.Set( "level", position.z )
					.Set( "languages", M.languages )
					.Set( "spans", spans )
					.Set( "verb_say", M.verb_say )
					.Set( "verb_ask", M.verb_ask )
					.Set( "verb_exclaim", M.verb_exclaim )
					.Set( "verb_yell", M.verb_yell )
				;
				signal2.frequency = freq;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
					R = _a;
					
					R.receive_signal( signal2 );
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Allinone) )) {
					R2 = _b;
					
					R2.receive_signal( signal2 );
				}
				return;
			}
			filter_type = 2;
			signal3 = new Signal();
			signal3.transmission_method = 2;
			signal3.data = new ByTable()
				.Set( "mob", M )
				.Set( "mobtype", M.type )
				.Set( "realname", real_name )
				.Set( "name", voice )
				.Set( "job", jobname )
				.Set( "key", mobkey )
				.Set( "vmask", voicemask )
				.Set( "compression", 0 )
				.Set( "message", input )
				.Set( "radio", this )
				.Set( "slow", 0 )
				.Set( "traffic", 0 )
				.Set( "type", 0 )
				.Set( "server", null )
				.Set( "reject", 0 )
				.Set( "level", position.z )
				.Set( "languages", this.languages )
				.Set( "spans", spans )
				.Set( "verb_say", M.verb_say )
				.Set( "verb_ask", M.verb_ask )
				.Set( "verb_exclaim", M.verb_exclaim )
				.Set( "verb_yell", M.verb_yell )
			;
			signal3.frequency = freqnum;

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
				R3 = _c;
				
				R3.receive_signal( signal3 );
			}
			Task13.Schedule( 20, (Task13.Closure)(() => {
				
				if ( Lang13.Bool( signal3.data["level"].Contains( Lang13.Bool( signal3.data["done"] ) && Lang13.Bool( position.z ) ) ) ) {
					return;
				}
				GlobalFuncs.Broadcast_Message( M, voicemask, this, input, voice, jobname, real_name, filter_type, Lang13.Bool( signal3.data["compression"] ), new ByTable(new object [] { position.z }), freq, spans, this.verb_say, this.verb_ask, this.verb_exclaim, this.verb_yell );
				return;
			}));
			return;
		}

		// Function from file: radio.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic tune = null;
			double? adjust = null;
			string min = null;
			string max = null;
			dynamic channel = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "frequency":
					
					if ( this.freqlock ) {
						return _default;
					}
					tune = _params["tune"];
					adjust = String13.ParseNumber( _params["adjust"] );

					if ( tune == "input" ) {
						min = GlobalFuncs.format_frequency( ( Lang13.Bool( this.freerange ) ? 1201 : 1441 ) );
						max = GlobalFuncs.format_frequency( ( Lang13.Bool( this.freerange ) ? 1599 : 1489 ) );
						tune = Interface13.Input( "Tune frequency (" + min + "-" + max + "):", this.name, GlobalFuncs.format_frequency( this.frequency ), null, null, InputType.Num | InputType.Null );

						if ( !( tune == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
							_default = GlobalVars.TRUE;
						}
					} else if ( Lang13.Bool( adjust ) ) {
						tune = ( this.frequency ??0) + ( adjust ??0) * 10;
						_default = GlobalVars.TRUE;
					} else if ( String13.ParseNumber( tune ) != null ) {
						tune = tune * 10;
						_default = GlobalVars.TRUE;
					}

					if ( Lang13.Bool( _default ) ) {
						this.frequency = GlobalFuncs.sanitize_frequency( tune, this.freerange );
						this.set_frequency( this.frequency );

						if ( this.frequency == this.traitor_frequency && this.hidden_uplink != null ) {
							this.hidden_uplink.interact( Task13.User );
							ui.close();
						}
					}
					break;
				case "listen":
					this.listening = !this.listening;
					_default = GlobalVars.TRUE;
					break;
				case "broadcast":
					this.broadcasting = !this.broadcasting;
					_default = GlobalVars.TRUE;
					break;
				case "channel":
					channel = _params["channel"];

					if ( !this.channels.Contains( channel ) ) {
						return _default;
					}

					if ( Lang13.Bool( this.channels[channel] & 1 ) ) {
						this.channels[channel] &= 65534;
					} else {
						this.channels[channel] |= GlobalVars.FREQ_LISTENING;
					}
					_default = GlobalVars.TRUE;
					break;
				case "command":
					this.use_command = !this.use_command;
					_default = GlobalVars.TRUE;
					break;
				case "subspace":
					
					if ( this.subspace_switchable ) {
						this.subspace_transmission = !this.subspace_transmission;

						if ( !this.subspace_transmission ) {
							this.channels = new ByTable();
						} else {
							this.recalculateChannels();
						}
						_default = GlobalVars.TRUE;
					}
					break;
			}
			return _default;
		}

		// Function from file: radio.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			dynamic channel = null;

			data = new ByTable();
			data["broadcasting"] = this.broadcasting;
			data["listening"] = this.listening;
			data["frequency"] = this.frequency;
			data["minFrequency"] = ( Lang13.Bool( this.freerange ) ? 1201 : 1441 );
			data["maxFrequency"] = ( Lang13.Bool( this.freerange ) ? 1599 : 1489 );
			data["freqlock"] = this.freqlock;
			data["channels"] = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				channel = _a;
				
				data["channels"][channel] = this.channels[channel] & 1;
			}
			data["command"] = this.command;
			data["useCommand"] = this.use_command;
			data["subspace"] = this.subspace_transmission;
			data["subspaceSwitchable"] = this.subspace_switchable;
			data["headset"] = this is Obj_Item_Device_Radio_Headset;
			return data;
		}

		// Function from file: radio.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.inventory_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "radio", this.name, 370, this.channels.len * 22 + 220, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: radio.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( Lang13.Bool( base.interact( (object)(user), flag1 ) ) ) {
				return null;
			}

			if ( this.b_stat && !( user is Mob_Living_Silicon_Ai ) ) {
				((Wires)this.wires).interact( user );
			} else {
				this.ui_interact( user );
			}
			return null;
		}

		// Function from file: radio.dm
		public override void initialize(  ) {
			dynamic ch_name = null;

			this.frequency = GlobalFuncs.sanitize_frequency( this.frequency, this.freerange );
			this.set_frequency( this.frequency );

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				ch_name = _a;
				
				this.secure_radio_connections[ch_name] = GlobalFuncs.add_radio( this, Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name] ) );
			}
			return;
		}

		// Function from file: radio.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.wires );
			this.wires = null;
			GlobalFuncs.remove_radio_all( this );
			this.patch_link = null;
			this.keyslot = null;
			return base.Destroy();
		}

		// Function from file: radio.dm
		public virtual ByTable send_hear( dynamic freq = null, int? level = null ) {
			double? range = null;

			range = this.receive_range( freq, level );

			if ( ( range ??0) > -1 ) {
				return GlobalFuncs.get_hearers_in_view( this.canhear_range, this );
			}
			return null;
		}

		// Function from file: radio.dm
		public virtual double? receive_range( dynamic freq = null, dynamic level = null, bool? AIuser = null ) {
			dynamic position = null;
			bool accept = false;
			dynamic ch_name = null;

			
			if ( ((Wires)this.wires).is_cut( "recieve" ) ) {
				return -1;
			}

			if ( !this.listening ) {
				return -1;
			}

			if ( !Lang13.Bool( level.Contains( 0 ) ) ) {
				position = GlobalFuncs.get_turf( this );

				if ( !Lang13.Bool( position ) || !Lang13.Bool( level.Contains( position.z ) ) ) {
					return -1;
				}
			}

			if ( freq == GlobalVars.SYND_FREQ ) {
				
				if ( !this.syndie ) {
					return -1;
				}
			}

			if ( freq == GlobalVars.CENTCOM_FREQ ) {
				
				if ( !this.centcom ) {
					return -1;
				}
			}

			if ( !Lang13.Bool( this.on ) ) {
				return -1;
			}

			if ( !Lang13.Bool( freq ) ) {
				
				if ( !this.listening ) {
					return -1;
				}
			} else {
				accept = freq == this.frequency && this.listening;

				if ( !accept ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
						ch_name = _a;
						

						if ( Lang13.Bool( this.channels[ch_name] & 1 ) ) {
							
							if ( Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name] ) == String13.ParseNumber( freq ) || this.syndie ) {
								accept = true;
								break;
							}
						}
					}
				}

				if ( !accept ) {
					return -1;
				}
			}
			return this.canhear_range;
		}

		// Function from file: radio.dm
		public void make_syndie(  ) {
			GlobalFuncs.qdel( this.keyslot );
			this.keyslot = new Obj_Item_Device_Encryptionkey_Syndicate();
			this.syndie = true;
			this.recalculateChannels();
			return;
		}

		// Function from file: radio.dm
		public virtual void recalculateChannels(  ) {
			dynamic ch_name = null;
			dynamic ch_name2 = null;

			this.channels = new ByTable();
			this.translate_binary = false;
			this.translate_hive = false;
			this.syndie = false;
			this.centcom = false;

			if ( Lang13.Bool( this.keyslot ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.keyslot.channels )) {
					ch_name = _a;
					

					if ( this.channels.Contains( ch_name ) ) {
						continue;
					}
					this.channels.Add( ch_name );
					this.channels[ch_name] = this.keyslot.channels[ch_name];
				}

				if ( Lang13.Bool( this.keyslot.translate_binary ) ) {
					this.translate_binary = true;
				}

				if ( Lang13.Bool( this.keyslot.translate_hive ) ) {
					this.translate_hive = true;
				}

				if ( Lang13.Bool( this.keyslot.syndie ) ) {
					this.syndie = true;
				}

				if ( Lang13.Bool( this.keyslot.centcom ) ) {
					this.centcom = true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.channels )) {
				ch_name2 = _b;
				
				this.secure_radio_connections[ch_name2] = GlobalFuncs.add_radio( this, Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name2] ) );
			}
			return;
		}

		// Function from file: radio.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalFuncs.remove_radio( this, this.frequency );
			this.frequency = GlobalFuncs.add_radio( this, new_frequency );
			return;
		}

	}

}