// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Radio : Obj_Item_Device {

		public dynamic on = 1;
		public dynamic last_transmission = null;
		public dynamic frequency = 1459;
		public int traitor_frequency = 0;
		public int? canhear_range = 3;
		public dynamic patch_link = null;
		public Wires_Radio wires = null;
		public ByTable secure_radio_connections = null;
		public bool prison_radio = false;
		public bool b_stat = false;
		public double? broadcasting = 0;
		public double? listening = 1;
		public bool freerange = false;
		public ByTable channels = new ByTable();
		public bool subspace_transmission = false;
		public bool syndie = false;
		public double maxf = 1499;
		public int TRANSMISSION_DELAY = 5;
		public bool FREQ_LISTENING = true;
		public bool always_talk = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "walkietalkie";
			this.flags = 272;
			this.slot_flags = 512;
			this.throw_range = 9;
			this.w_class = 2;
			this.starting_materials = new ByTable().Set( "$iron", 75 ).Set( "$glass", 25 );
			this.w_type = 5;
			this.melt_temperature = 453.41;
			this.icon = "icons/obj/radio.dmi";
			this.icon_state = "walkietalkie";
		}

		// Function from file: radio.dm
		public Obj_Item_Device_Radio (  ) : base( /* Bad Super Arg: [this.loc] */ null ) {
			this.wires = new Wires_Radio( this );

			if ( this.prison_radio ) {
				this.wires.CutWireIndex( GlobalVars.WIRE_TRANSMIT );
			}
			this.secure_radio_connections = new ByTable();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.radio_controller != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: radio.dm
		public override dynamic emp_act( int severity = 0 ) {
			dynamic ch_name = null;

			this.broadcasting = 0;
			this.listening = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				ch_name = _a;
				
				this.channels[ch_name] = 0;
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );
			((Mob)b).set_machine( this );

			if ( !( a is Obj_Item_Weapon_Screwdriver ) ) {
				return null;
			}
			this.b_stat = !this.b_stat;

			if ( this.b_stat ) {
				b.show_message( new Txt( "<span class = 'notice'>" ).The( this ).item().str( " can now be attached and modified!</span>" ).ToString() );
			} else {
				b.show_message( new Txt( "<span class = 'notice'>" ).The( this ).item().str( " can no longer be modified or attached!</span>" ).ToString() );
			}
			this.updateDialog();
			this.add_fingerprint( b );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.b_stat ) {
				user.show_message( new Txt( "<span class = 'info'>" ).The( this ).item().str( " can be attached and modified!</span>" ).ToString() );
			} else {
				user.show_message( new Txt( "<span class = 'info'>" ).The( this ).item().str( " can not be modified or attached!</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: radio.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( !( _args[1].speaker != null ) || Lang13.Bool( _args[1].frequency ) ) {
				return null;
			}

			if ( Lang13.Bool( this.broadcasting ) ) {
				
				if ( Map13.GetDistance( this, _args[1].speaker ) <= ( this.canhear_range ??0) ) {
					this.talk_into( _args[1] );
				}
			}
			return null;
		}

		// Function from file: radio.dm
		public override void talk_into( Game_Data speech = null, dynamic channel = null ) {
			dynamic speech2 = null;
			bool skip_freq_search = false;
			dynamic position = null;
			string real_name = null;
			string mobkey = null;
			bool? voicemask = null;
			dynamic voice = null;
			Ent_Dynamic speaker = null;
			Game_Data signal = null;
			Obj_Machinery_Telecomms_Receiver R = null;
			Obj_Machinery_Telecomms_Allinone R2 = null;
			int? filter_type = null;
			Game_Data signal2 = null;
			Obj_Machinery_Telecomms_Receiver R3 = null;

			
			if ( !Lang13.Bool( this.on ) ) {
				return;
			}

			if ( !Lang13.Bool( ((dynamic)speech).speaker ) || !Lang13.Bool( ((dynamic)speech).message ) ) {
				return;
			}

			if ( this.isWireCut( GlobalVars.WIRE_TRANSMIT ) != 0 ) {
				return;
			}

			if ( !((Ent_Dynamic)((dynamic)speech).speaker).IsVocal() ) {
				return;
			}
			speech2 = ((dynamic)speech).clone();
			speech2.radio = this;
			skip_freq_search = false;

			dynamic _a = channel; // Was a switch-case, sorry for the mess.
			if ( _a=="headset" || _a==null ) {
				speech2.frequency = this.frequency;
				channel = null;
				skip_freq_search = true;
			} else if ( _a=="secure headset" ) {
				channel = 1;
			}

			if ( !skip_freq_search ) {
				
				if ( Lang13.Bool( channel ) && this.channels != null && this.channels.len > 0 ) {
					
					if ( channel == "department" ) {
						channel = this.channels[1];
					}
					speech2.frequency = this.secure_radio_connections[channel];

					if ( !Lang13.Bool( this.channels[channel] ) ) {
						GlobalFuncs.returnToPool( speech2 );
						return;
					}
				} else {
					speech2.frequency = this.frequency;
					channel = null;
				}
			}
			position = GlobalFuncs.get_turf( this );
			real_name = speech2.name;
			mobkey = "none";
			voicemask = false;
			voice = speech2.speaker.GetVoice();

			if ( speech2.speaker is Mob ) {
				speaker = speech2.speaker;
				real_name = ((dynamic)speaker).real_name;

				if ( Lang13.Bool( ((dynamic)speaker).client ) ) {
					mobkey = ((dynamic)speaker).key;
				}
			}

			if ( speech2.speaker is Mob_Living_Carbon_Human ) {
				
				if ( voice != real_name ) {
					voicemask = true;
				}
				speech2.job = ((Mob_Living_Carbon_Human)speech2.speaker).get_assignment();
			} else if ( speech2.speaker is Mob_Living_Carbon ) {
				speech2.job = "No id";
			} else if ( speech2.speaker is Mob_Living_Silicon_Ai ) {
				speech2.job = "AI";
			} else if ( speech2.speaker is Mob_Living_Silicon_Robot ) {
				speech2.job = "Cyborg";
			} else if ( speech2.speaker is Mob_Living_Silicon_Pai ) {
				speech2.job = "Personal AI";
			} else if ( speech2.speaker is Obj ) {
				speech2.job = "Machine";
			} else {
				speech2.job = "Unknown";
			}

			if ( this.subspace_transmission ) {
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).transmission_method = 2;
				((dynamic)signal).data = new ByTable()
					.Set( "mob", speech2.speaker )
					.Set( "mobtype", speech2.speaker.type )
					.Set( "realname", real_name )
					.Set( "name", voice )
					.Set( "job", speech2.job )
					.Set( "key", mobkey )
					.Set( "vmask", voicemask )
					.Set( "compression", Rand13.Int( 45, 50 ) )
					.Set( "message", speech2.message )
					.Set( "radio", this )
					.Set( "slow", 0 )
					.Set( "traffic", 0 )
					.Set( "type", 0 )
					.Set( "server", null )
					.Set( "reject", 0 )
					.Set( "level", position.z )
					.Set( "language", speech2.language )
					.Set( "r_quote", speech2.rquote )
					.Set( "l_quote", speech2.lquote )
					.Set( "message_classes", speech2.message_classes.Copy() )
					.Set( "wrapper_classes", speech2.wrapper_classes.Copy() )
				;
				((dynamic)signal).frequency = speech2.frequency;

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
					R = _b;
					
					R.receive_signal( signal );
				}

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Allinone) )) {
					R2 = _c;
					
					R2.receive_signal( signal );
				}
				GlobalFuncs.returnToPool( speech2 );
				return;
			}
			filter_type = 2;

			if ( this is Obj_Item_Device_Radio_Intercom ) {
				filter_type = 1;
			}
			signal2 = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal2).transmission_method = 2;
			((dynamic)signal2).data = new ByTable()
				.Set( "mob", speech2.speaker )
				.Set( "mobtype", speech2.speaker.type )
				.Set( "realname", real_name )
				.Set( "name", voice )
				.Set( "job", speech2.job )
				.Set( "key", mobkey )
				.Set( "vmask", voicemask )
				.Set( "compression", 0 )
				.Set( "message", speech2.message )
				.Set( "radio", this )
				.Set( "slow", 0 )
				.Set( "traffic", 0 )
				.Set( "type", 0 )
				.Set( "server", null )
				.Set( "reject", 0 )
				.Set( "level", position.z )
				.Set( "language", speech2.language )
				.Set( "r_quote", speech2.rquote )
				.Set( "l_quote", speech2.lquote )
				.Set( "message_classes", speech2.message_classes.Copy() )
				.Set( "wrapper_classes", speech2.wrapper_classes.Copy() )
			;
			((dynamic)signal2).frequency = speech2.frequency;

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
				R3 = _d;
				
				R3.receive_signal( signal2 );
			}
			Task13.Schedule( Rand13.Int( 10, 25 ), (Task13.Closure)(() => {
				Interface13.Stat( null, ((dynamic)signal2).data["level"].Contains( Lang13.Bool( ((dynamic)signal2).data["done"] ) && Lang13.Bool( position.z ) ) );

				if ( false ) {
					GlobalFuncs.returnToPool( speech2 );
					return;
				}
				GlobalFuncs.Broadcast_Message( speech2, voicemask, filter_type, ((dynamic)signal2).data["compression"], new ByTable(new object [] { position.z }) );
				GlobalFuncs.returnToPool( speech2 );
				return;
			}));
			return;
		}

		// Function from file: radio.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic target = null;
			dynamic A = null;
			dynamic target2 = null;
			dynamic A2 = null;
			dynamic target3 = null;
			dynamic A3 = null;
			dynamic new_frequency = null;
			dynamic chan_name = null;

			
			if ( Lang13.Bool( Task13.User.stat ) || !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( !( Task13.User is Mob_Living_Silicon || Task13.User.contents.Find( this ) != 0 || GlobalFuncs.in_range( this, Task13.User ) && this.loc is Tile ) ) {
				Interface13.Browse( Task13.User, null, "window=radio" );
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["open"] ) ) {
				target = Lang13.FindObj( href_list["open"] );
				A = Lang13.FindObj( href_list["open2"] );

				if ( Lang13.Bool( A ) && Lang13.Bool( target ) ) {
					((Mob_Living_Silicon_Ai)A).open_nearest_door( target );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["track"] ) ) {
				target2 = Lang13.FindObj( href_list["track"] );
				A2 = Lang13.FindObj( href_list["track2"] );

				if ( Lang13.Bool( A2 ) && Lang13.Bool( target2 ) ) {
					((Mob_Living_Silicon_Ai)A2).ai_actual_track( target2 );
				}
				return null;
			} else if ( Lang13.Bool( href_list["faketrack"] ) ) {
				target3 = Lang13.FindObj( href_list["track"] );
				A3 = Lang13.FindObj( href_list["track2"] );

				if ( Lang13.Bool( A3 ) && Lang13.Bool( target3 ) ) {
					A3.cameraFollow = target3;
					GlobalFuncs.to_chat( A3, "Now tracking " + target3.name + " on camera." );

					if ( Task13.User.machine == null ) {
						Task13.User.machine = Task13.User;
					}

					while (((dynamic)Task13.User).cameraFollow == target3) {
						GlobalFuncs.to_chat( Task13.User, "Target is not on or near any active cameras on the station. We'll check again in 5 seconds (unless you use the cancel-camera verb)." );
						Task13.Sleep( 40 );
						continue;
					}
				}
				return null;
			} else if ( Lang13.Bool( href_list["freq"] ) ) {
				new_frequency = this.frequency + String13.ParseNumber( href_list["freq"] );

				if ( !this.freerange || Convert.ToDouble( this.frequency ) < 1200 || Convert.ToDouble( this.frequency ) > 1600 ) {
					new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
				}
				this.set_frequency( new_frequency );

				if ( this.hidden_uplink != null ) {
					
					if ( this.hidden_uplink.check_trigger( Task13.User, this.frequency, this.traitor_frequency ) ) {
						Interface13.Browse( Task13.User, null, "window=radio" );
						return null;
					}
				}
			} else if ( Lang13.Bool( href_list["talk"] ) ) {
				this.broadcasting = String13.ParseNumber( href_list["talk"] );
			} else if ( Lang13.Bool( href_list["listen"] ) ) {
				chan_name = href_list["ch_name"];

				if ( !Lang13.Bool( chan_name ) ) {
					this.listening = String13.ParseNumber( href_list["listen"] );
				} else if ( Lang13.Bool( this.channels[chan_name] & 1 ) ) {
					this.channels[chan_name] &= 65534;
				} else {
					this.channels[chan_name] |= GlobalVars.FREQ_LISTENING;
				}
			}

			if ( !Lang13.Bool( this.master ) ) {
				
				if ( this.loc is Mob ) {
					this.interact( this.loc );
				} else {
					this.updateDialog();
				}
			} else if ( this.master.loc is Mob ) {
				this.interact( this.master.loc );
			} else {
				this.updateDialog();
			}
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			dynamic ch_name = null;

			
			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( this.active_uplink_check( user ) ) {
				return null;
			}
			dat = "<html><head><title>" + this + "</title></head><body><TT>";

			if ( !( this is Obj_Item_Device_Radio_Headset ) ) {
				dat += "Microphone: " + ( Lang13.Bool( this.broadcasting ) ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";talk=0'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";talk=1'>Disengaged</A>" ).ToString() ) + "<BR>";
			}
			dat += new Txt( "\n				Speaker: " ).item( ( Lang13.Bool( this.listening ) ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=0'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=1'>Disengaged</A>" ).ToString() ) ).str( "<BR>\n				Frequency:\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A>\n				" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n				" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				ch_name = _a;
				
				dat += this.text_sec_channel( ch_name, this.channels[ch_name] );
			}
			dat += "" + this.text_wires() + "</TT></body></html>";
			Interface13.Browse( user, dat, "window=radio" );
			GlobalFuncs.onclose( user, "radio" );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			((Mob)user).set_machine( this );
			this.interact( user );
			return null;
		}

		// Function from file: radio.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			dynamic channel_name = null;

			
			if ( this.freerange ) {
				
				if ( Convert.ToDouble( this.frequency ) < 1200 || Convert.ToDouble( this.frequency ) > 1600 ) {
					this.frequency = GlobalFuncs.sanitize_frequency( this.frequency );
				}
			} else if ( Convert.ToDouble( this.frequency ) < 1441 || Convert.ToDouble( this.frequency ) > this.maxf ) {
				this.frequency = GlobalFuncs.sanitize_frequency( this.frequency );
			}
			this.set_frequency( this.frequency );

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				channel_name = _a;
				
				this.secure_radio_connections[channel_name] = GlobalFuncs.add_radio( this, GlobalVars.radiochannels[channel_name] );
			}
			return false;
		}

		// Function from file: radio.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.wires = null;
			GlobalFuncs.remove_radio_all( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: radio.dm
		public ByTable send_hear( int freq = 0, ByTable level = null ) {
			int? range = null;

			range = this.receive_range( freq, level );

			if ( ( range ??0) > -1 ) {
				return GlobalFuncs.get_hearers_in_view( this.canhear_range, this );
			}
			return null;
		}

		// Function from file: radio.dm
		public virtual int? receive_range( dynamic freq = null, dynamic level = null ) {
			dynamic position = null;
			bool accept = false;
			dynamic ch_name = null;

			
			if ( this.isWireCut( GlobalVars.WIRE_RECEIVE ) != 0 ) {
				return -1;
			}

			if ( !Lang13.Bool( this.listening ) ) {
				return -1;
			}
			Interface13.Stat( null, level.Contains( 0 ) );

			if ( !( !Lang13.Bool( this.listening ) ) ) {
				position = GlobalFuncs.get_turf( this );

				if ( !Lang13.Bool( position ) || !false ) {
					return -1;
				}
			}

			if ( freq == GlobalVars.SYND_FREQ ) {
				
				if ( !this.syndie ) {
					return -1;
				}
			}

			if ( !Lang13.Bool( this.on ) ) {
				return -1;
			}

			if ( !Lang13.Bool( freq ) ) {
				
				if ( !Lang13.Bool( this.listening ) ) {
					return -1;
				}
			} else {
				accept = freq == this.frequency && Lang13.Bool( this.listening );

				if ( !accept ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
						ch_name = _a;
						

						if ( Lang13.Bool( this.channels[ch_name] & 1 ) ) {
							
							if ( Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name] ) == String13.ParseNumber( freq ) || this.syndie ) {
								accept = true;
								break;
							}
						}
					}
				}

				if ( !accept ) {
					return -1;
				}
			}
			return this.canhear_range;
		}

		// Function from file: radio.dm
		public int isWireCut( double? index = null ) {
			return this.wires.IsIndexCut( index );
		}

		// Function from file: radio.dm
		public string text_sec_channel( dynamic chan_name = null, dynamic chan_stat = null ) {
			bool list = false;

			list = !( !Lang13.Bool( chan_stat & 1 ) );
			return new Txt( "\n			<B>" ).item( chan_name ).str( "</B>: <A href='byond://?src=" ).Ref( this ).str( ";ch_name=" ).item( chan_name ).str( ";listen=" ).item( !list ).str( "'>" ).item( ( list ? "Engaged" : "Disengaged" ) ).str( "</A><BR>\n			" ).ToString();
		}

		// Function from file: radio.dm
		public string text_wires(  ) {
			
			if ( this.b_stat ) {
				return this.wires.GetInteractWindow();
			}
			return null;
		}

		// Function from file: radio.dm
		public virtual void set_frequency( dynamic new_frequency = null ) {
			GlobalFuncs.remove_radio( this, this.frequency );
			this.frequency = GlobalFuncs.add_radio( this, new_frequency );
			return;
		}

	}

}