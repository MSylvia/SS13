// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Anomaly : Obj_Machinery {

		public dynamic held_container = null;
		public Ent_Static fuel_container = null;
		public dynamic target_scan_ticks = 30;
		public int report_num = 0;
		public int scan_process = 0;
		public double? temperature = 273;
		public double? max_temp = 450;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 20;
			this.active_power_usage = 300;
			this.machine_flags = 30;
			this.icon = "icons/obj/virology.dmi";
			this.icon_state = "analyser";
		}

		// Function from file: analysis_base.dm
		public Obj_Machinery_Anomaly ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: analysis_base.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic proceed = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=anomaly" );
				Task13.User.machine = null;
			}

			if ( Lang13.Bool( href_list["eject_beaker"] ) ) {
				this.held_container.loc = this.loc;
				this.held_container = null;
			}

			if ( Lang13.Bool( href_list["eject_fuel"] ) ) {
				this.fuel_container.loc = this.loc;
				this.fuel_container = null;
			}

			if ( Lang13.Bool( href_list["begin"] ) ) {
				
				if ( ( this.temperature ??0) >= 350 ) {
					proceed = Interface13.Input( "Unsafe internal temperature detected, enter YES below to continue.", "Warning", null, null, null, InputType.Any );

					if ( proceed == "YES" && !Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
						this.scan_process = 1;
					}
				} else {
					this.scan_process = 1;
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: analysis_base.dm
		public int GetResultSpecifity( dynamic scanned_sample = null, string carrier_name = null ) {
			int specifity = 0;

			specifity = 0;

			if ( Lang13.Bool( scanned_sample ) && Lang13.Bool( carrier_name ) ) {
				
				if ( scanned_sample.find_presence.Find( carrier_name ) != 0 ) {
					specifity = Convert.ToInt32( scanned_sample.find_presence[carrier_name] / scanned_sample.total_spread * 0.75 + 0.25 );
				} else {
					specifity = Rand13.Int( 0, ((int)( 0.5 )) );
				}
			}
			return specifity;
		}

		// Function from file: analysis_base.dm
		public void FinishScan(  ) {
			Obj_Item_Weapon_Paper P = null;

			this.scan_process = 0;
			this.updateDialog();

			if ( Lang13.Bool( this.held_container ) ) {
				this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " makes an insistent chime.</span>" ).ToString(), 2 );
				P = new Obj_Item_Weapon_Paper( this.loc );
				P.name = "" + this + " report #" + ++this.report_num;
				P.info = "<b>" + this + " analysis report #" + this.report_num + "</b><br><br>" + this.ScanResults();
				P.stamped = new ByTable(new object [] { typeof(Obj_Item_Weapon_Stamp) });
				P.overlays = new ByTable(new object [] { "paper_stamped" });
			} else {
				this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " makes a low buzzing noise.</span>" ).ToString(), 2 );
			}
			return;
		}

		// Function from file: analysis_base.dm
		public virtual string ScanResults(  ) {
			return "<span class='warning'>Error initialising scanning components.</span>";
		}

		// Function from file: analysis_base.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( Lang13.Bool( this.held_container ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You must remove the " + this.held_container + " first.</span>" );
				} else if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You put the " + a + " into the " + this + ".</span>" );
					this.held_container = a;
					this.updateDialog();
				}
				return 1;
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
		}

		// Function from file: analysis_base.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			a.machine = this;
			dat = "<B>" + this.name + "</B><BR>";
			dat += "Module heat level: " + this.temperature + " kelvin<br>\n		Safeties set at 350k, shielding failure at 400k. Failure to maintain safe heat levels may result in equipment damage.<br>\n		<hr>";

			if ( this.scan_process != 0 ) {
				dat += "Scan in progress<br><br><br>";
			} else {
				dat += "" + ( Lang13.Bool( this.held_container ) ? new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_beaker=1'>Eject beaker</a>" ).ToString() : "No beaker inserted." ) + "<br>";
				dat += "" + ( Lang13.Bool( this.held_container ) ? new Txt( "<A href='?src=" ).Ref( this ).str( ";begin=1'>Begin scanning</a>" ).ToString() : "" );
			}
			dat += new Txt( "<hr>\n		<A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</a><BR>\n		<A href='?src=" ).Ref( this ).str( ";close=1'>Close</a><BR>" ).ToString();
			Interface13.Browse( a, dat, "window=anomaly;size=450x500" );
			GlobalFuncs.onclose( a, "anomaly" );
			return null;
		}

		// Function from file: analysis_base.dm
		public override dynamic process(  ) {
			GasMixture env = null;
			double? environmental_temp = null;
			dynamic heat_added = null;
			double temperature_difference = 0;
			dynamic removed = null;
			int heat_capacity = 0;

			env = this.loc.return_air();
			environmental_temp = env.temperature;

			if ( this.scan_process != 0 ) {
				
				if ( this.scan_process++ > Convert.ToDouble( this.target_scan_ticks ) ) {
					this.FinishScan();
				} else if ( ( this.temperature ??0) > 400 ) {
					this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " shuts down from the heat!</span>" ).ToString(), 2 );
					this.scan_process = 0;
				} else if ( ( this.temperature ??0) > 350 && Rand13.PercentChance( 10 ) ) {
					this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " bleets plaintively.</span>" ).ToString(), 2 );

					if ( ( this.temperature ??0) > 400 ) {
						this.scan_process = 0;
					}
				}

				if ( Rand13.PercentChance( 5 ) ) {
					this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( Rand13.Pick(new object [] { "whirrs", "chuffs", "clicks" }) ).item( Rand13.Pick(new object [] { " quietly", " softly", " sadly", " excitedly", " energetically", " angrily", " plaintively" }) ).str( ".</span>" ).ToString(), 2 );
				}
				this.use_power = 2;
				this.icon_state = "analyser_processing";
			} else {
				this.use_power = 1;
				this.icon_state = "analyser";

				if ( Rand13.PercentChance( 10 ) ) {
					Icon13.Flick( this, "analyser_processing" );
				}
			}

			if ( this.use_power == 1 ) {
				heat_added = this.active_power_usage * 3;

				if ( ( this.temperature ??0) < ( this.max_temp ??0) ) {
					this.temperature += Convert.ToDouble( heat_added / 5000 );
				}
				temperature_difference = Math.Abs( ( environmental_temp ??0) - ( this.temperature ??0) );
				removed = this.loc.remove_air( env.total_moles * 0.25 );
				heat_capacity = ((GasMixture)removed).heat_capacity();
				heat_added = Num13.MaxInt( ((int)( temperature_difference * heat_capacity )), 4000 );

				if ( ( this.temperature ??0) > ( environmental_temp ??0) ) {
					this.temperature = Num13.MaxInt( ((int)( 2.73 )), ((int)( ( this.temperature ??0) - Convert.ToDouble( heat_added / 5000 ) )) );
					removed.temperature = Num13.MaxInt( ((int)( 2.73 )), Convert.ToInt32( removed.temperature + heat_added / heat_capacity ) );

					if ( temperature_difference > 10 && Rand13.PercentChance( 5 ) ) {
						this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " hisses softly.</span>" ).ToString(), 2 );
					}
				} else {
					this.temperature = Num13.MaxInt( ((int)( 2.73 )), ((int)( ( this.temperature ??0) + Convert.ToDouble( heat_added / 5000 ) )) );
					removed.temperature = Num13.MaxInt( ((int)( 2.73 )), Convert.ToInt32( removed.temperature - heat_added / heat_capacity ) );

					if ( temperature_difference > 10 && Rand13.PercentChance( 5 ) ) {
						this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " plinks quietly.</span>" ).ToString(), 2 );
					}
				}
				env.merge( removed );
			}
			return null;
		}

		// Function from file: analysis_base.dm
		public override dynamic RefreshParts(  ) {
			int scancount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			scancount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_ScanningModule ) {
					scancount += SP.rating - 1;
				}
			}
			this.target_scan_ticks = Lang13.Initial( this, "target_scan_ticks" ) - scancount * 4;
			return null;
		}

	}

}