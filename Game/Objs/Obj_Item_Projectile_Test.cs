// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Projectile_Test : Obj_Item_Projectile {

		public dynamic ttarget = null;
		public int result = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 101;
		}

		public Obj_Item_Projectile_Test ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: projectile.dm
		public override dynamic process(  ) {
			dynamic curloc = null;
			dynamic targloc = null;
			dynamic M = null;

			curloc = GlobalFuncs.get_turf( this );
			targloc = GlobalFuncs.get_turf( this.ttarget );

			if ( !Lang13.Bool( curloc ) || !Lang13.Bool( targloc ) ) {
				return 0;
			}
			this.yo = Convert.ToDouble( targloc.y - curloc.y );
			this.xo = Convert.ToDouble( targloc.x - curloc.x );
			this.target = targloc;

			while (this.loc != null) {
				
				if ( this.result != 0 ) {
					return this.result - 1;
				}
				M = Lang13.FindIn( typeof(Mob_Living), GlobalFuncs.get_turf( this ) );

				if ( M is Mob_Living ) {
					return 1;
				} else {
					M = Lang13.FindIn( typeof(Mob_Living), Map13.GetStep( this, Convert.ToInt32( this.ttarget ) ) );

					if ( M is Mob_Living ) {
						return 1;
					}
				}

				if ( !Lang13.Bool( this.ttarget ) || this.loc == this.ttarget ) {
					this.ttarget = Map13.GetTile( Num13.MinInt( Num13.MaxInt( ((int)( this.x + this.xo )), 1 ), Game13.map_size_x ), Num13.MinInt( Num13.MaxInt( ((int)( this.y + this.yo )), 1 ), Game13.map_size_y ), this.z );
				}
				Map13.StepTowardsSimple( this, this.ttarget );
			}
			return null;
		}

		// Function from file: projectile.dm
		public override dynamic Bump( Obj Obstacle = null, dynamic yes = null ) {
			
			if ( Obstacle == this.firer ) {
				this.loc = Obstacle.loc;
				return null;
			}

			if ( Obstacle is Obj_Item_Projectile ) {
				return null;
			}

			if ( Obstacle is Mob_Living ) {
				this.result = 2;
				return null;
			}
			this.result = 1;
			return null;
		}

	}

}