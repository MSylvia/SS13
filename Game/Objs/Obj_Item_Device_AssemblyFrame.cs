// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_AssemblyFrame : Obj_Item_Device {

		public ByTable assemblies = new ByTable();
		public ByTable connections = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "programming=3;engineering=3;magnets=3";
			this.icon_state = "assembly_box";
		}

		public Obj_Item_Device_AssemblyFrame ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: assembly_frame.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Device_Assembly ) {
				this.insert_assembly( a, b );
			} else if ( a is Obj_Item_Device_AssemblyHolder ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( a ).item().str( " is too big for any of the sockets here. Try taking it apart." ).ToString() );
				return null;
			}
			return null;
		}

		// Function from file: assembly_frame.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic AS = null;
			dynamic active_connections = null;
			ByTable list_to_take_from = null;
			ByTable list_for_input = null;
			dynamic A = null;
			dynamic choice = null;
			dynamic choices_connections = null;
			dynamic disconnected = null;
			ByTable L = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			AS = Lang13.FindObj( href_list["assembly"] );

			if ( Lang13.Bool( href_list["connect"] ) ) {
				
				if ( !( AS is Obj_Item_Device_Assembly ) ) {
					return null;
				}

				if ( !( this.assemblies.Find( AS ) != 0 ) ) {
					return null;
				}
				active_connections = this.connections[AS];

				if ( this.assemblies.len == 1 ) {
					return null;
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					list_to_take_from = this.assemblies - AS;

					if ( Lang13.Bool( active_connections ) ) {
						list_to_take_from.Remove( active_connections );
					}
					list_for_input = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( list_to_take_from )) {
						A = _a;
						
						list_for_input["" + this.assemblies.Find( A ) + "-" + A] = A;
					}
					choice = Interface13.Input( Task13.User, "Send output from " + AS + " to which device?", "" + this, null, list_for_input, InputType.Null | InputType.Any );
					choice = list_for_input[choice];

					if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
						return;
					}

					if ( !Lang13.Bool( choice ) ) {
						return;
					}

					if ( choice is Obj_Item_Device_Assembly_Math && AS is Obj_Item_Device_Assembly_Math ) {
						choices_connections = this.connections[choice];

						if ( Lang13.Bool( choices_connections ) && false ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='info'>SYSTEM ERROR: Infinite loop detected, operation aborted.</span>" );
							return;
						}
					}

					if ( !Lang13.Bool( active_connections ) ) {
						this.connections[AS] = new ByTable(new object [] { choice });
					} else {
						active_connections |= choice;
					}
					((Obj_Item_Device_Assembly)AS).connected( choice, true );
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>You connect " ).the( AS ).item().str( " to " ).the( choice ).item().str( ".</span>" ).ToString() );

					if ( Task13.User != null ) {
						this.attack_self( Task13.User );
					}
					return;
				}));
			}

			if ( Lang13.Bool( href_list["eject"] ) ) {
				
				if ( !( AS is Obj_Item_Device_Assembly ) ) {
					return null;
				}

				if ( !( this.assemblies.Find( AS ) != 0 ) ) {
					return null;
				}

				if ( AS.loc != this ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>A pink light flashes on " ).the( this ).item().str( ", indicating an error.</span>" ).ToString() );
					return null;
				}
				this.eject_assembly( AS );
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>You remove " ).the( AS ).item().str( " from " ).the( this ).item().str( ".</span>" ).ToString() );
			}

			if ( Lang13.Bool( href_list["pulse"] ) ) {
				
				if ( !( AS is Obj_Item_Device_Assembly ) ) {
					return null;
				}

				if ( !( this.assemblies.Find( AS ) != 0 ) ) {
					return null;
				}

				if ( AS.loc != this ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>A green light flashes on " ).the( this ).item().str( ", indicating an error.</span>" ).ToString() );
					return null;
				}
				((Obj_Item_Device_Assembly)AS).pulsed();
			}

			if ( Lang13.Bool( href_list["interact"] ) ) {
				
				if ( !( AS is Obj_Item_Device_Assembly ) ) {
					return null;
				}

				if ( !( this.assemblies.Find( AS ) != 0 ) ) {
					return null;
				}
				((Obj_Item)AS).attack_self( Task13.User );
			}

			if ( Lang13.Bool( href_list["disconnect"] ) ) {
				disconnected = Lang13.FindObj( href_list["disconnect_which"] );

				if ( !( AS is Obj_Item_Device_Assembly ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>" + AS + " isn't an assembly.</span>" );
					return null;
				}

				if ( !( disconnected is Obj_Item_Device_Assembly ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>" + disconnected + " isn't an assembly.</span>" );
					return null;
				}

				if ( !( this.assemblies.Find( AS ) != 0 ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>" ).item( AS ).str( " isn't connected to " ).the( this ).item().str( "!</span>" ).ToString() );
					return null;
				}
				L = this.connections[AS];

				if ( !( L != null ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>A red light flashes on " ).the( this ).item().str( ", indicating an error.</span>" ).ToString() );
					return null;
				}
				L.Remove( disconnected );
				((Obj_Item_Device_Assembly)AS).disconnected( disconnected, true );

				if ( !( L.len != 0 ) ) {
					this.connections.Remove( AS );
				}
			}

			if ( Lang13.Bool( href_list["help"] ) ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>You press " ).the( this ).item().str( "'s help button.</span>" ).ToString() );
					Task13.Sleep( 5 );
					GlobalFuncs.to_chat( Task13.User, "----------------------------------" );
					GlobalFuncs.to_chat( Task13.User, "<span class='info'><h5>AdCo. Assembly Frame MK II</h5></span>" );
					GlobalFuncs.to_chat( Task13.User, "----------------------------------" );
					Task13.Sleep( 5 );
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>To connect a device to the assembly frame, insert it into any of the numbered sockets inside.</span>" );
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>The device list on the monitor displays all connected devices along with their number. To the right of each device is a list of other devices that are connected to it.</span>" );
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>To make device A send signals to device B, first ensure that both devices are connected to the assembly frame. Then press the \"connect\" button next to device A on the monitor, and select device B. Any signals emitted by device A will now be received by device B (but not vice versa)." );
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>To stop device A from receiving device B's signals, find device B in the device list. To the right of device B is a list of other devices that are connected to it. Find device A in that list and select it. Device A will no longer receive signals from device B." );
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>To pulse a device, press the [P] button next to it." );
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>To eject a device, press the [X] button next to it." );
					return;
				}));
				return null;
			}

			if ( Task13.User != null ) {
				this.attack_self( Task13.User );
			}
			return null;
		}

		// Function from file: assembly_frame.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;
			Obj_Item_Device_Assembly A = null;
			Browser popup = null;

			dat = new Txt( "<h4>AdCo. Assembly Frame MK II <small>[<a href='?src=" ).Ref( this ).str( ";help=1'>?</a>]</small></h4><br>" ).ToString();

			if ( !( this.assemblies.len != 0 ) ) {
				dat += "<p>No assemblies found!</p>";
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( this.assemblies, typeof(Obj_Item_Device_Assembly) )) {
					A = _a;
					
					dat += "<p>" + this.get_assembly_href( A ) + "</p>";
				}
			}
			popup = new Browser( user, new Txt().Ref( this ).ToString(), "" + this, 500, 300, this );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( user, new Txt().Ref( this ).ToString() );
			return null;
		}

		// Function from file: assembly_frame.dm
		public bool debug_from_text( bool? use_parts = null ) {
			use_parts = use_parts ?? false;

			dynamic P = null;
			ByTable parts_from = null;
			dynamic B = null;

			P = Lang13.FindIn( typeof(Obj_Item_Weapon_Paper), this.loc );
			parts_from = new ByTable();

			if ( use_parts == true ) {
				B = Lang13.FindIn( typeof(Obj_Item_Weapon_Storage_Box), this.loc );
				parts_from = B.contents;
			}
			return this.from_text( P.info, use_parts, parts_from );
		}

		// Function from file: assembly_frame.dm
		public ByTable get_req_parts( ByTable data_list = null ) {
			ByTable _default = null;

			dynamic assembly_path = null;
			dynamic assembly_type = null;
			ByTable part = null;
			dynamic assembly_path2 = null;

			
			if ( !( GlobalVars.assembly_short_name_to_type.len != 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Device_Assembly) ) )) {
					assembly_path = _a;
					
					assembly_type = assembly_path;
					GlobalVars.assembly_short_name_to_type[Lang13.Bool( Lang13.Initial( assembly_type, "short_name" ) ) || Lang13.Bool( Lang13.Initial( assembly_type, "name" ) )] = assembly_path;
				}
			}
			_default = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( data_list, typeof(ByTable) )) {
				part = _b;
				
				assembly_path2 = GlobalVars.assembly_short_name_to_type[part["short_name"]];

				if ( !Lang13.Bool( assembly_path2 ) ) {
					return null;
				}
				_default.Add( assembly_path2 );
			}
			return _default;
		}

		// Function from file: assembly_frame.dm
		public ByTable decompose_text( dynamic assembly_data = null ) {
			ByTable _default = null;

			ByTable mainholder = null;
			dynamic a_data = null;
			ByTable subholder = null;
			ByTable rlistholder = null;
			ByTable valuesholder = null;
			dynamic value = null;
			double? numvalue = null;
			ByTable connectionsholder_text = null;
			ByTable connectionsholder_num = null;
			dynamic num = null;
			double? numholder = null;

			
			if ( !( assembly_data is string ) ) {
				return null;
			}
			mainholder = GlobalFuncs.text2list( assembly_data, "<br>" );
			_default = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( mainholder )) {
				a_data = _c;
				
				subholder = GlobalFuncs.text2list( a_data, "|" );

				if ( subholder.len != 4 ) {
					return null;
				}

				if ( !Lang13.Bool( subholder[1] ) ) {
					return null;
				}
				rlistholder = new ByTable();
				rlistholder["short_name"] = subholder[1];
				rlistholder["labeled"] = Lang13.Bool( subholder[2] ) && Lang13.Bool( " (" + subholder[2] + ")" );

				if ( Lang13.Bool( subholder[3] ) ) {
					valuesholder = String13.ParseUrlParams( subholder[3] );

					foreach (dynamic _a in Lang13.Enumerate( valuesholder )) {
						value = _a;
						
						numvalue = String13.ParseNumber( valuesholder[value] );

						if ( numvalue == null ) {
							continue;
						}

						if ( "" + numvalue == valuesholder[value] ) {
							valuesholder[value] = numvalue;
						}
					}
					rlistholder["values"] = valuesholder;
				} else {
					rlistholder["values"] = new ByTable();
				}

				if ( Lang13.Bool( subholder[4] ) ) {
					connectionsholder_text = GlobalFuncs.text2list( subholder[4], ";" );
					connectionsholder_num = new ByTable();

					foreach (dynamic _b in Lang13.Enumerate( connectionsholder_text )) {
						num = _b;
						
						numholder = String13.ParseNumber( num );

						if ( !Lang13.Bool( numholder ) ) {
							return null;
						}

						if ( ( numholder ??0) > mainholder.len ) {
							return null;
						}
						connectionsholder_num.Add( numholder );
					}
					rlistholder["connections"] = connectionsholder_num;
				} else {
					rlistholder["connections"] = new ByTable();
				}
				_default.Add( new ByTable(new object [] { rlistholder }) );
			}
			return _default;
		}

		// Function from file: assembly_frame.dm
		public bool from_text( dynamic assembly_data = null, bool? use_parts = null, ByTable parts_from = null ) {
			use_parts = use_parts ?? false;

			ByTable data_list = null;
			ByTable parts_to_add = null;
			ByTable req_parts = null;
			dynamic req_part = null;
			ByTable parts_from_holder = null;
			ByTable req_part2 = null;
			Obj_Item_Device_Assembly check_part = null;
			Obj_Item_Device_Assembly AS = null;
			int cur_pos = 0;
			dynamic a_data = null;
			dynamic a_values = null;
			dynamic a_value = null;
			ByTable a_cons = null;
			ByTable active_connections = null;
			dynamic a_con = null;

			
			if ( this.assemblies.len != 0 || this.connections.len != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( assembly_data ) ) {
				return false;
			}

			if ( use_parts == true && !( parts_from is ByTable ) ) {
				return false;
			}
			data_list = this.decompose_text( assembly_data );

			if ( data_list == null ) {
				return false;
			}
			parts_to_add = new ByTable();

			if ( !( use_parts == true ) ) {
				req_parts = this.get_req_parts( data_list );

				if ( req_parts == null ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( req_parts )) {
					req_part = _a;
					
					parts_to_add.Add( Lang13.Call( req_part ) );
				}
			} else {
				parts_from_holder = parts_from.Copy();

				foreach (dynamic _c in Lang13.Enumerate( data_list, typeof(ByTable) )) {
					req_part2 = _c;
					
					string _loop_ctrl_1 = null;

					foreach (dynamic _b in Lang13.Enumerate( parts_from_holder, typeof(Obj_Item_Device_Assembly) )) {
						check_part = _b;
						

						if ( req_part2["short_name"] == check_part.short_name ) {
							parts_to_add.Add( check_part );
							parts_from_holder.Remove( check_part );
							_loop_ctrl_1 = "continue";
							break;
						}
					}

					if ( _loop_ctrl_1 == "break" ) {
						break;
					} else if ( _loop_ctrl_1 == "continue" ) {
						continue;
					}
					return false;
				}
			}

			foreach (dynamic _f in Lang13.Enumerate( parts_to_add, typeof(Obj_Item_Device_Assembly) )) {
				AS = _f;
				
				this.insert_assembly( AS );
				cur_pos = parts_to_add.Find( AS );
				a_data = data_list[cur_pos];
				AS.remove_label();
				AS.labeled = a_data["labeled"];
				AS.name += AS.labeled;
				a_values = a_data["values"];

				foreach (dynamic _d in Lang13.Enumerate( a_values )) {
					a_value = _d;
					
					AS.write_to_value( a_value, a_values[a_value] );
				}
				a_cons = a_data["connections"];

				if ( a_cons.len != 0 ) {
					active_connections = new ByTable();

					foreach (dynamic _e in Lang13.Enumerate( a_cons )) {
						a_con = _e;
						

						if ( a_con == cur_pos ) {
							continue;
						}
						active_connections.Or( parts_to_add[a_con] );
					}
					this.connections[AS] = active_connections;
				}
			}
			return true;
		}

		// Function from file: assembly_frame.dm
		public void debug_to_text(  ) {
			Obj_Item_Weapon_Paper P = null;

			P = new Obj_Item_Weapon_Paper( GlobalFuncs.get_turf( this ) );
			P.info = this.to_text();
			return;
		}

		// Function from file: assembly_frame.dm
		public string to_text(  ) {
			ByTable mainholder = null;
			Obj_Item_Device_Assembly AS = null;
			ByTable midholder = null;
			ByTable subholder = null;
			dynamic V = null;
			dynamic L = null;
			dynamic A = null;

			mainholder = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( this.assemblies, typeof(Obj_Item_Device_Assembly) )) {
				AS = _c;
				
				midholder = new ByTable();
				midholder.Add( AS.short_name );
				midholder.Add( Lang13.Bool( AS.labeled ) && Lang13.Bool( String13.SubStr( AS.labeled, 3, -1 ) ) );
				subholder = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( AS.accessible_values )) {
					V = _a;
					
					subholder[V] = AS.get_value( V );
				}
				midholder.Add( String13.MakeUrlParams( subholder ) );
				L = this.connections[AS];

				if ( Lang13.Bool( L ) ) {
					subholder = new ByTable();

					foreach (dynamic _b in Lang13.Enumerate( L )) {
						A = _b;
						
						subholder.Add( this.assemblies.Find( A ) );
					}
					midholder.Add( GlobalFuncs.list2text( subholder, ";" ) );
				} else {
					midholder.Add( "" );
				}
				mainholder.Add( GlobalFuncs.list2text( midholder, "|" ) );
			}
			return GlobalFuncs.list2text( mainholder, "<br>" );
		}

		// Function from file: assembly_frame.dm
		public void eject_assembly( dynamic AS = null ) {
			dynamic A = null;
			ByTable L = null;
			dynamic disconnected_from = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.connections )) {
				A = _a;
				
				L = this.connections[A];
				L.Remove( AS );
				disconnected_from = A;
				((Obj_Item_Device_Assembly)disconnected_from).disconnected( AS, true );

				if ( !( L.len != 0 ) ) {
					this.connections.Remove( A );
				}
			}
			this.assemblies.Remove( AS );
			this.connections.Remove( AS );
			AS.holder = null;
			((Ent_Dynamic)AS).forceMove( GlobalFuncs.get_turf( this ) );
			return;
		}

		// Function from file: assembly_frame.dm
		public void insert_assembly( dynamic AS = null, dynamic user = null ) {
			Ent_Static S = null;

			
			if ( !( AS is Obj_Item_Device_Assembly ) ) {
				return;
			}

			if ( user is Mob || AS.loc is Mob ) {
				
				if ( !Lang13.Bool( user ) ) {
					user = AS.loc;
				}

				if ( Lang13.Bool( user.drop_item( AS, this ) ) ) {
					AS.holder = this;
					this.assemblies.Add( AS );
				}
			} else if ( AS.loc is Obj_Item_Weapon_Storage ) {
				S = AS.loc;

				if ( Lang13.Bool( ((dynamic)S).remove_from_storage( AS, this ) ) ) {
					AS.holder = this;
					this.assemblies.Add( AS );
				}
			} else if ( ((Ent_Dynamic)AS).forceMove( this ) ) {
				AS.holder = this;
				this.assemblies.Add( AS );
			}

			if ( !Lang13.Bool( AS.secured ) ) {
				((Obj_Item_Device_Assembly)AS).toggle_secure();
			}
			return;
		}

		// Function from file: assembly_frame.dm
		public void receive_pulse( Obj_Item_Device_Assembly from = null ) {
			ByTable connected_to_source = null;

			
			if ( !( this.assemblies.Find( from ) != 0 ) ) {
				return;
			}

			if ( !( this.connections.Find( from ) != 0 ) ) {
				return;
			}
			connected_to_source = this.connections[from];
			from.send_pulses_to_list( connected_to_source );
			return;
		}

		// Function from file: assembly_frame.dm
		public string get_assembly_href( Obj_Item_Device_Assembly A = null ) {
			string txt_buttons = null;
			string txt_assembly_number = null;
			string txt_assembly = null;
			string txt_connections = null;
			ByTable list_of_connections = null;
			Obj_Item_Device_Assembly C = null;

			txt_buttons = new Txt( "<a href='?src=" ).Ref( this ).str( ";eject=1;assembly=" ).Ref( A ).str( "'>[X]</a><a href='?src=" ).Ref( this ).str( ";pulse=1;assembly=" ).Ref( A ).str( "'>[P]</a>" ).ToString();
			txt_assembly_number = "(" + this.assemblies.Find( A ) + ")";
			txt_assembly = new Txt( "<a href='?src=" ).Ref( this ).str( ";interact=1;assembly=" ).Ref( A ).str( "'><b>" ).item( A ).str( "</b></a>" ).ToString();

			if ( !( this.connections.Find( A ) != 0 ) ) {
				txt_connections = new Txt( "<small>(<a href='?src=" ).Ref( this ).str( ";connect=1;assembly=" ).Ref( A ).str( "'>connect</a>)</small>" ).ToString();
			} else {
				txt_connections = "<small> " + A.connection_text + ": ";
				list_of_connections = this.connections[A];

				if ( list_of_connections.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( list_of_connections, typeof(Obj_Item_Device_Assembly) )) {
						C = _a;
						
						txt_connections += new Txt().item( this.assemblies.Find( C ) ).str( "-<a href='?src=" ).Ref( this ).str( ";disconnect=1;assembly=" ).Ref( A ).str( ";disconnect_which=" ).Ref( C ).str( "'><b>" ).item( C.short_name ).item( C.labeled ).str( "</b></a>, " ).ToString();
					}
					txt_connections += new Txt( "<a href='?src=" ).Ref( this ).str( ";connect=1;assembly=" ).Ref( A ).str( "'><b>add more</b></a></small>" ).ToString();
				}
			}
			return "" + txt_buttons + " " + txt_assembly_number + " " + txt_assembly + " " + txt_connections;
		}

		// Function from file: assembly_frame.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Item_Device_Assembly AS = null;
			dynamic L = null;
			dynamic DC = null;
			Ent_Dynamic A = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.connections, typeof(Obj_Item_Device_Assembly) )) {
				AS = _b;
				
				L = this.connections[AS];

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					DC = _a;
					
					AS.disconnected( DC, true );
				}
			}
			this.connections = null;

			foreach (dynamic _c in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
				A = _c;
				
				A.forceMove( GlobalFuncs.get_turf( this ) );
			}
			this.assemblies = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}