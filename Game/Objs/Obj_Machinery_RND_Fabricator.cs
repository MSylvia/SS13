// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND_Fabricator : Obj_Machinery_RND {

		public double? time_coeff = 1.5;
		public double? resource_coeff = 1.5;
		public Research files = null;
		public dynamic id = null;
		public bool sync = false;
		public double amount = 5;
		public int build_number = 8;
		public dynamic being_built = null;
		public ByTable queue = new ByTable();
		public bool processing_queue = false;
		public double? screen = 0;
		public string temp = null;
		public ByTable part_sets = new ByTable();
		public bool start_end_anims = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 20;
			this.active_power_usage = 5000;
			this.max_material_storage = 562500;
			this.build_time = 5;
			this.research_flags = 30;
		}

		// Function from file: fabricators.dm
		public Obj_Machinery_RND_Fabricator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.files = new Research(  );
			this.setup_part_sets();
			return;
		}

		// Function from file: fabricators.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic exit = null;

			
			if ( Lang13.Bool( a.stat ) || ((Mob)a).restrained() ) {
				return null;
			}
			exit = this.get_output();

			if ( exit.density ) {
				this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps, \"Error! Part outlet is obstructed\"." ).ToString() );
				return null;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( !this.allowed( a ) ) {
				this.visible_message( "<span class='warning'>Unauthorized Access</span>: attempted by <b>" + a + "</b>" );
				return null;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: fabricators.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			TopicInput filter = null;
			dynamic num = null;
			bool part = false;
			bool part2 = false;
			dynamic set_name = null;
			double? prevscreen = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}
			filter = new TopicInput( href, href_list );

			if ( Lang13.Bool( href_list["remove_from_queue"] ) ) {
				this.remove_from_queue( filter.getNum( "remove_from_queue" ) );
				return 1;
			}

			if ( Lang13.Bool( href_list["eject"] ) ) {
				num = Interface13.Input( "Enter amount to eject", "Amount", "5", null, null, InputType.Num );

				if ( Lang13.Bool( num ) ) {
					this.amount = ( Num13.Round( String13.ParseNumber( num ) ??0, 1 ) <= 0 ? 0 : ( Num13.Round( String13.ParseNumber( num ) ??0, 1 ) >= 50 ? 50 : Num13.Round( String13.ParseNumber( num ) ??0, 1 ) ) );
				}
				this.remove_material( href_list["eject"], this.amount );
				return 1;
			}

			if ( Lang13.Bool( href_list["build"] ) ) {
				part = this.getTopicDesign( href_list["build"] );

				if ( !this.processing_queue && part ) {
					this.build_part( part );
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["add_to_queue"] ) ) {
				part2 = this.getTopicDesign( href_list["add_to_queue"] );

				if ( this.queue.len > 20 ) {
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps, \"Queue is full, please clear or finish.\"." ).ToString() );
					return null;
				}
				this.add_to_queue( part2 );
				return 1;
			}

			if ( Lang13.Bool( href_list["queue_part_set"] ) ) {
				set_name = href_list["queue_part_set"];

				if ( this.queue.len > 20 ) {
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps, \"Queue is full, please clear or finish.\"." ).ToString() );
					return null;
				}
				this.add_part_set_to_queue( set_name );
				return 1;
			}

			if ( Lang13.Bool( href_list["clear_queue"] ) ) {
				this.stop_processing_queue();
				this.queue = new ByTable();
				return 1;
			}

			if ( Lang13.Bool( href_list["sync"] ) ) {
				this.queue = new ByTable();
				this.temp = "Updating local R&D database...";
				this.updateUsrDialog();
				Task13.Schedule( 30, (Task13.Closure)(() => {
					this.f_sync();
					return;
				}));
				return 1;
			}

			if ( Lang13.Bool( href_list["process_queue"] ) ) {
				
				if ( !this.stopped ) {
					return 0;
				}
				this.start_processing_queue();
				return 1;
			}

			if ( Lang13.Bool( href_list["screen"] ) ) {
				prevscreen = this.screen;
				this.screen = String13.ParseNumber( href_list["screen"] );

				if ( prevscreen == this.screen ) {
					return 0;
				}
				this.ui_interact( Task13.User );
				return 1;
			}
			return null;
		}

		// Function from file: fabricators.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable queue_list = null;
			int? i = null;
			dynamic part = null;
			ByTable materials_list = null;
			dynamic matID = null;
			dynamic material = null;
			ByTable parts_list = null;
			dynamic set_name = null;
			dynamic parts = null;
			ByTable set_name_list = null;
			int i2 = 0;
			Design part2 = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( Lang13.Bool( user.stat ) || ((Mob)user).restrained() || !this.allowed( user ) ) {
				return;
			}
			data = new ByTable( 0 );
			queue_list = new ByTable( 0 );
			i = null;
			i = 1;

			while (( i ??0) <= this.queue.len) {
				part = this.queue[i];
				queue_list.Add( new ByTable(new object [] { new ByTable().Set( "name", part.name ).Set( "commands", new ByTable().Set( "remove_from_queue", i ) ) }) );
				i++;
			}
			data["queue"] = queue_list;
			data["screen"] = this.screen;
			materials_list = null;
			materials_list = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
				matID = _a;
				
				material = ((dynamic)this.materials).getMaterial( matID );

				if ( Lang13.Bool( material ) && Convert.ToDouble( ((dynamic)this.materials).storage[matID] ) > 0 ) {
					materials_list.Add( new ByTable(new object [] { new ByTable().Set( "name", material.processed_name ).Set( "storage", ((dynamic)this.materials).storage[matID] ).Set( "commands", new ByTable().Set( "eject", matID ) ) }) );
				}
			}
			data["materials"] = materials_list;
			parts_list = null;
			parts_list = new ByTable( 0 );

			foreach (dynamic _c in Lang13.Enumerate( this.part_sets )) {
				set_name = _c;
				
				parts = this.part_sets[set_name];
				set_name_list = new ByTable();
				i2 = 0;

				foreach (dynamic _b in Lang13.Enumerate( parts, typeof(Design) )) {
					part2 = _b;
					
					i2++;
					set_name_list.Add( new ByTable(new object [] { 
						new ByTable()
							.Set( "name", part2.name )
							.Set( "cost", this.output_part_cost( part2 ) )
							.Set( "time", this.get_construction_time_w_coeff( part2 ) / 10 )
							.Set( "command1", new ByTable().Set( "add_to_queue", "" + i2 + set_name ) )
							.Set( "command2", new ByTable().Set( "build", "" + i2 + set_name ) )
						
					 }) );
				}
				parts_list[set_name] = set_name_list;
			}
			data["parts"] = parts_list;
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, this.nano_file, this.name, 1040, 750 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

		// Function from file: fabricators.dm
		public override dynamic process(  ) {
			dynamic I = null;

			base.process();

			if ( this.busy || this.stopped || Lang13.Bool( this.being_built ) ) {
				return null;
			}

			if ( this.queue.len == 0 ) {
				this.stopped = true;
				return null;
			}
			this.busy = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				I = this.queue_pop();

				if ( !this.build_part( I ) ) {
					this.queue.Add( I );
				}
				this.busy = false;
				return;
			}));
			return null;
		}

		// Function from file: fabricators.dm
		public int remove_material( dynamic matID = null, double amount = 0 ) {
			dynamic material = null;
			int total_amount = 0;
			double to_spawn = 0;
			dynamic mats = null;

			material = ((dynamic)this.materials).getMaterial( matID );

			if ( Lang13.Bool( material ) ) {
				total_amount = Num13.MinInt( Num13.Floor( Convert.ToDouble( ((dynamic)this.materials).storage[matID] / material.cc_per_sheet ) ), ((int)( amount )) );
				to_spawn = total_amount;

				while (to_spawn > 0) {
					mats = null;

					if ( material.sheettype == typeof(Obj_Item_Stack_Sheet_Metal) ) {
						mats = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
					} else {
						mats = Lang13.Call( material.sheettype, this );
					}

					if ( to_spawn > Convert.ToDouble( mats.max_amount ) ) {
						mats.amount = mats.max_amount;
						to_spawn -= Convert.ToDouble( mats.max_amount );
					} else {
						mats.amount = to_spawn;
						to_spawn = 0;
					}
					((dynamic)this.materials).removeAmount( matID, mats.amount * mats.perunit );
					mats.loc = this.loc;
				}
				return total_amount;
			}
			return 0;
		}

		// Function from file: fabricators.dm
		public bool getTopicDesign( string stringinput = null ) {
			stringinput = stringinput ?? "";

			int? final_digit = null;
			int? i = null;
			ByTable part_list = null;
			double? index = null;

			final_digit = 0;
			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( stringinput )) {
				
				if ( !Lang13.Bool( Lang13.IsNumber( String13.ParseNumber( String13.SubStr( stringinput, i ??0, 0 ) ) ) ) ) {
					final_digit = i;
					break;
				}
				i++;
			}
			part_list = this.part_sets[String13.SubStr( stringinput, final_digit ??0, 0 )];
			index = String13.ParseNumber( String13.SubStr( stringinput, 1, final_digit ??0 ) );

			if ( !( part_list is ByTable ) || part_list.len < ( index ??0) ) {
				return false;
			}
			return Lang13.Bool( part_list[index] );
		}

		// Function from file: fabricators.dm
		public virtual double get_construction_time_w_coeff( dynamic part = null, double? roundto = null ) {
			roundto = roundto ?? 1;

			return Num13.Round( ((Design)part).MatTotal() / 100 * this.build_time * ( this.time_coeff ??0), roundto ??0 );
		}

		// Function from file: fabricators.dm
		public virtual double get_resource_cost_w_coeff( dynamic part = null, dynamic resource = null, double? roundto = null ) {
			roundto = roundto ?? 1;

			return Num13.Round( Convert.ToDouble( part.materials[resource] * this.resource_coeff ), roundto ??0 );
		}

		// Function from file: fabricators.dm
		public void stop_processing_queue(  ) {
			this.stopped = true;
			return;
		}

		// Function from file: fabricators.dm
		public void start_processing_queue(  ) {
			this.stopped = false;
			return;
		}

		// Function from file: fabricators.dm
		[VerbInfo( name: "sync" )]
		public void f_sync( dynamic silent = null ) {
			bool new_data = false;
			bool found = false;
			Obj_Machinery_Computer_Rdconsole console = null;
			Tech T = null;
			Design D = null;
			int i = 0;
			dynamic tech_output = null;

			new_data = false;
			found = false;

			if ( this.busy ) {
				this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps, \"Please wait for completion of current operation.\"" ).ToString() );
				return;
			}

			if ( this.linked_console != null ) {
				console = this.linked_console;
			} else {
				this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps, \"Not connected to a server. Please connect from a local console first.\"" ).ToString() );
			}

			if ( console != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( console.files.known_tech, typeof(Tech) )) {
					T = _a;
					

					if ( T != null ) {
						this.files.AddTech2Known( T );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( console.files.known_designs, typeof(Design) )) {
					D = _b;
					

					if ( D != null ) {
						this.files.AddDesign2Known( D );
					}
				}
				this.files.RefreshResearch();
				i = this.convert_designs();
				tech_output = this.update_tech();

				if ( !Lang13.Bool( silent ) ) {
					this.temp = "Processed " + i + " equipment designs.<br>";
					this.temp += tech_output;
					this.temp += new Txt( "<a href='?src=" ).Ref( this ).str( ";clear_temp=1'>Return</a>" ).ToString();
					this.updateUsrDialog();
				}

				if ( i != 0 || Lang13.Bool( tech_output ) ) {
					new_data = true;
				}
			}

			if ( new_data ) {
				this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps, \"Succesfully synchronized with R&D server. New data processed.\"" ).ToString() );
			}

			if ( !Lang13.Bool( silent ) && !found ) {
				this.temp = new Txt( "Unable to connect to local R&D Database.<br>Please check your connections and try again.<br><a href='?src=" ).Ref( this ).str( ";clear_temp=1'>Return</a>" ).ToString();
			}
			this.updateUsrDialog();
			return;
		}

		// Function from file: fabricators.dm
		public dynamic update_tech(  ) {
			dynamic output = null;
			Tech T = null;
			double? diff = null;
			int pmat = 0;
			Obj_Item_Weapon_StockParts_MicroLaser Ml = null;
			int ptime = 0;
			Obj_Item_Weapon_StockParts_Manipulator Ma = null;

			
			if ( !( this.files != null ) ) {
				return null;
			}

			foreach (dynamic _d in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
				T = _d;
				

				if ( T != null && T.level > 1 ) {
					diff = null;

					switch ((string)( T.id )) {
						case "materials":
							pmat = 0;

							foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
								Ml = _a;
								
								pmat += Ml.rating;
							}

							if ( pmat >= 1 ) {
								pmat -= 1;
							}
							diff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "resource_coeff" ) - Lang13.Initial( this, "resource_coeff" ) * ( T.level + pmat ) / 25 ), 0.01 );

							if ( this.resource_coeff != diff ) {
								this.resource_coeff = diff;
								output += "Production efficiency increased.<br>";
							}
							break;
						case "programming":
							ptime = 0;

							foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
								Ma = _b;
								
								ptime += Ma.rating;
							}

							if ( ptime >= 2 ) {
								ptime -= 2;
							}
							diff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "time_coeff" ) - Lang13.Initial( this, "time_coeff" ) * ( T.level + ptime ) / 25 ), 0.1 );

							if ( this.time_coeff != diff ) {
								this.time_coeff = diff;
								output += "Production routines updated.<br>";
							}
							break;
					}
				}
			}
			return output;
		}

		// Function from file: fabricators.dm
		public int convert_designs(  ) {
			int i = 0;
			Design D = null;

			
			if ( !( this.files != null ) ) {
				return 0;
			}
			i = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
				D = _a;
				

				if ( ( D.build_type & this.build_number ) != 0 ) {
					
					if ( this.part_sets.Contains( D.category ) ) {
						
						if ( this.add_part_to_set( D.category, D ) ) {
							i++;
						}
					} else if ( this.add_part_to_set( "Misc", D ) ) {
						i++;
					}
				}
			}
			return i;
		}

		// Function from file: fabricators.dm
		public virtual bool is_contraband( dynamic part = null ) {
			return false;
		}

		// Function from file: fabricators.dm
		public bool remove_from_queue( dynamic index = null ) {
			
			if ( !Lang13.Bool( Lang13.IsNumber( index ) ) || !( this.queue is ByTable ) || Convert.ToDouble( index ) < 1 || Convert.ToDouble( index ) > this.queue.len ) {
				return false;
			}
			this.queue.Cut( Lang13.IntNullable( index ), Convert.ToInt32( ++index ) );
			return true;
		}

		// Function from file: fabricators.dm
		public int add_to_queue( bool part = false ) {
			
			if ( !( this.queue is ByTable ) ) {
				this.queue = new ByTable();
			}

			if ( !part ) {
				return 0;
			}

			if ( part ) {
				
				if ( this.is_contraband( part ) && !this.hacked ) {
					this.visible_message( "<font color='blue'>The " + this.name + " buzzes, \"Safety procedures prevent that item from being queued.\"</font>" );
					return 0;
				}
				this.queue.Add( part );
			}
			return this.queue.len;
		}

		// Function from file: fabricators.dm
		public void add_part_set_to_queue( dynamic set_name = null, int? max_length = null ) {
			ByTable set_parts = null;
			int? i = null;
			bool D = false;

			set_parts = this.part_sets[set_name];

			if ( this.part_sets.Contains( set_name ) ) {
				i = null;
				i = 1;

				while (( i ??0) <= set_parts.len) {
					
					if ( ( max_length ??0) > 0 && ( i ??0) > ( max_length ??0) ) {
						break;
					}
					D = Lang13.Bool( set_parts[i] );
					this.add_to_queue( D );
					i++;
				}
			}
			this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps: \"" ).item( set_name ).str( " parts were added to the queue\"." ).ToString() );
			return;
		}

		// Function from file: fabricators.dm
		public virtual bool build_part( dynamic part = null ) {
			dynamic matID = null;
			Obj_Item_Weapon_Storage_Lockbox L = null;
			dynamic output = null;

			
			if ( !Lang13.Bool( part ) || Lang13.Bool( this.being_built ) ) {
				return false;
			}

			if ( !Lang13.Bool( part.build_path ) ) {
				Game13.log.WriteMsg( "##WARNING: " + ( "" + part.name + " has a null build path var!" ) + " in " + "code/modules/research/fabricators.dm" + " at line " + 255 + " src: " + this + " usr: " + Task13.User + "." );
				return false;
			}

			if ( this.is_contraband( part ) && !this.hacked ) {
				this.stopped = true;
				this.visible_message( "<font color='blue'>The " + this.name + " buzzes, \"Safety procedures prevent current queued item from being built.\"</font>" );
				return false;
			}

			if ( !this.remove_materials( part ) ) {
				this.stopped = true;
				this.visible_message( "<font color='blue'>The " + this.name + " beeps, \"Not enough materials to complete item.\"</font>" );
				return false;
			}
			this.being_built = Lang13.Call( part.build_path, this );
			this.busy = true;
			this.icon_state = "" + this.base_state + "_ani";

			if ( this.start_end_anims ) {
				Icon13.Flick( "" + this.base_state + "_start", this );
			}
			this.use_power = 2;
			this.updateUsrDialog();
			Task13.Sleep( ((int)( this.get_construction_time_w_coeff( part ) )) );
			this.use_power = 1;
			this.icon_state = this.base_state;

			if ( this.start_end_anims ) {
				Icon13.Flick( "" + this.base_state + "_end", this );
			}

			if ( Lang13.Bool( this.being_built ) ) {
				
				if ( !Lang13.Bool( this.being_built.materials ) ) {
					this.being_built.materials = GlobalFuncs.getFromPool( typeof(Materials), this.being_built );
				}

				foreach (dynamic _a in Lang13.Enumerate( part.materials )) {
					matID = _a;
					

					if ( String13.SubStr( matID, 1, 2 ) != "$" ) {
						continue;
					}
					this.being_built.materials.storage = GlobalVars.initial_materials.Copy();
					((Materials)this.being_built.materials).addAmount( matID, this.get_resource_cost_w_coeff( part, matID ) );
				}

				if ( Lang13.Bool( part.locked ) && ( this.research_flags & 64 ) != 0 ) {
					L = null;
					L = new Obj_Item_Weapon_Storage_Lockbox( this );
					L.req_access = part.req_lock_access;
					this.being_built.loc = L;
					L.name += " (" + this.being_built.name + ")";
					this.being_built = L;
				}
				output = this.get_output();
				this.being_built.loc = GlobalFuncs.get_turf( output );
				this.visible_message( new Txt( " " ).icon( this ).str( " " ).The( this ).item().str( " beeps: \"Succesfully completed " ).the( this.being_built.name ).item().str( ".\"" ).ToString() );
				this.being_built = null;
			}
			this.updateUsrDialog();
			this.busy = false;
			return true;
		}

		// Function from file: fabricators.dm
		public double check_mat( dynamic being_built = null, dynamic M = null ) {
			
			if ( String13.SubStr( M, 1, 2 ) == "$" ) {
				
				if ( ( this.research_flags & 256 ) != 0 ) {
					return 1;
				}
				return Num13.Round( Convert.ToDouble( ((dynamic)this.materials).storage[M] / this.get_resource_cost_w_coeff( being_built, M ) ), 1 );
			} else {
				
				if ( ( this.research_flags & 512 ) != 0 ) {
					return 1;
				}
				return Num13.Round( ( ((Reagents)this.reagents).get_reagent_amount( M ) ?1:0) / this.get_resource_cost_w_coeff( being_built, M ), 1 );
			}
		}

		// Function from file: fabricators.dm
		public virtual bool remove_materials( dynamic part = null ) {
			dynamic M = null;
			dynamic M2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( part.materials )) {
				M = _a;
				

				if ( !( this.check_mat( part, M ) != 0 ) ) {
					return false;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( part.materials )) {
				M2 = _b;
				

				if ( String13.SubStr( M2, 1, 2 ) == "$" && !( ( this.research_flags & 256 ) != 0 ) ) {
					((dynamic)this.materials).removeAmount( M2, this.get_resource_cost_w_coeff( part, M2 ) );
				} else if ( !( ( this.research_flags & 512 ) != 0 ) ) {
					((Reagents)this.reagents).remove_reagent( M2, this.get_resource_cost_w_coeff( part, M2 ) );
				}
			}
			return true;
		}

		// Function from file: fabricators.dm
		public virtual string output_part_cost( Design part = null ) {
			string output = null;
			dynamic M = null;
			dynamic material = null;

			output = "";

			foreach (dynamic _a in Lang13.Enumerate( part.materials )) {
				M = _a;
				

				if ( String13.SubStr( M, 1, 2 ) == "$" ) {
					
					if ( !( ( this.research_flags & 256 ) != 0 ) ) {
						material = ((dynamic)this.materials).getMaterial( M );
						output += "" + ( Lang13.Bool( output ) ? " | " : null ) + this.get_resource_cost_w_coeff( part, M ) + " " + material.processed_name;
					}
				} else if ( !( ( this.research_flags & 512 ) != 0 ) ) {
					output += "" + ( Lang13.Bool( output ) ? " | " : null ) + this.get_resource_cost_w_coeff( part, M ) + " " + GlobalVars.chemical_reagents_list[M];
				}
			}
			return output;
		}

		// Function from file: fabricators.dm
		public bool remove_part_from_set( string set_name = null, bool part = false ) {
			dynamic part_set = null;

			part_set = this.part_sets[set_name];
			part_set -= part ?1:0;
			return true;
		}

		// Function from file: fabricators.dm
		public bool remove_part_set( dynamic set_name = null ) {
			int? i = null;

			i = null;
			i = 1;

			while (( i ??0) <= this.part_sets.len) {
				
				if ( this.part_sets[i] == set_name ) {
					this.part_sets.Remove( this.part_sets[i] );
					return true;
				}
				i++;
			}
			return false;
		}

		// Function from file: fabricators.dm
		public bool add_part_to_set( string set_name = null, Design part = null ) {
			ByTable part_set_list = null;
			Design D = null;

			
			if ( !( part != null ) || !( part is Design ) ) {
				return false;
			}
			part_set_list = this.part_sets[set_name];

			if ( !( part_set_list != null ) ) {
				part_set_list = new ByTable();
			}

			foreach (dynamic _a in Lang13.Enumerate( part_set_list, typeof(Design) )) {
				D = _a;
				

				if ( D.build_path == part.build_path ) {
					return false;
				}
			}
			part_set_list.Add( part );
			this.part_sets[set_name] = part_set_list.Copy();
			part_set_list.len = 0;
			return true;
		}

		// Function from file: fabricators.dm
		public dynamic queue_pop(  ) {
			dynamic D = null;

			D = this.queue[1];
			this.queue.Cut( 1, 2 );
			return D;
		}

		// Function from file: fabricators.dm
		public virtual int setup_part_sets(  ) {
			int counter = 0;
			dynamic name_set = null;
			ByTable part_set = null;
			int? i = null;
			Design D = null;
			dynamic name_set2 = null;
			dynamic part_set2 = null;
			Design element = null;

			
			if ( !( this.part_sets != null ) || !( this.part_sets.len != 0 ) ) {
				return 0;
			}
			counter = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.part_sets )) {
				name_set = _a;
				
				part_set = this.part_sets[name_set];

				if ( !( part_set is ByTable ) || !( part_set.len != 0 ) ) {
					continue;
				}
				i = null;
				i = 1;

				while (( i ??0) <= part_set.len) {
					D = GlobalFuncs.FindDesign( part_set[i] );

					if ( D != null ) {
						part_set[i] = D;
						counter++;
					}
					i++;
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.part_sets )) {
				name_set2 = _c;
				
				part_set2 = this.part_sets[name_set2];

				foreach (dynamic _b in Lang13.Enumerate( part_set2, typeof(Design) )) {
					element = _b;
					
				}
			}
			counter += this.convert_designs();
			return counter;
		}

		// Function from file: fabricators.dm
		public void convert_part_set( dynamic set_name = null ) {
			dynamic parts = null;
			int i = 0;
			dynamic thispart = null;
			Design design = null;

			parts = this.part_sets[set_name];
			i = 0;

			if ( parts is ByTable ) {
				
				foreach (dynamic _a in Lang13.Enumerate( parts )) {
					thispart = _a;
					
					i++;

					if ( !Lang13.Bool( thispart ) ) {
						parts.Remove( thispart );
						continue;
					}

					if ( thispart is Type && !( thispart is Design ) ) {
						design = GlobalFuncs.FindDesign( thispart );

						if ( design is Design ) {
							parts[i] = design;
						} else {
							parts.Remove( thispart );
						}
					}
				}
			}
			return;
		}

		// Function from file: fabricators.dm
		public override int emag( dynamic user = null ) {
			Task13.Sleep( 0 );

			if ( ( ( !( this.research_flags != 0 ) ?1:0) & 32 ) != 0 ) {
				return 0;
			}

			switch ((int)( this.emagged )) {
				case 0:
					this.emagged = 0.5;
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps: \"DB error [Code 0x00F1]\"" ).ToString() );
					Task13.Sleep( 10 );
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps: \"Attempting auto-repair\"" ).ToString() );
					Task13.Sleep( 15 );
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps: \"User DB corrupted [Code 0x00FA]. Truncating data structure...\"" ).ToString() );
					Task13.Sleep( 30 );
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps: \"User DB truncated. Please contact your Nanotrasen system operator for future assistance.\"" ).ToString() );
					this.req_access = null;
					this.emagged = 1;
					break;
				case ((int)( 0.5 )):
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps: \"DB not responding [Code 0x0003]...\"" ).ToString() );
					break;
				case 1:
					this.visible_message( new Txt().icon( this ).str( " <b>" ).item( this ).str( "</b> beeps: \"No records in User DB\"" ).ToString() );
					break;
			}
			return 0;
		}

		// Function from file: fabricators.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts_MatterBin M = null;
			Obj_Item_Weapon_StockParts_MicroLaser Ma = null;
			double? diff = null;
			Obj_Item_Weapon_StockParts_Manipulator Ml = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _a;
				
				T += M.rating - 1;
			}
			this.max_material_storage = Lang13.Initial( this, "max_material_storage" ) + T * 187500;
			T = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				Ma = _b;
				
				T += Ma.rating;
			}

			if ( T >= 1 ) {
				T -= 1;
			}
			diff = null;
			diff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "resource_coeff" ) - Lang13.Initial( this, "resource_coeff" ) * T / 25 ), 0.01 );

			if ( this.resource_coeff != diff ) {
				this.resource_coeff = diff;
			}
			T = 0;

			foreach (dynamic _c in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				Ml = _c;
				
				T += Ml.rating;
			}

			if ( T >= 2 ) {
				T -= 2;
			}
			diff = Num13.Round( Convert.ToDouble( Lang13.Initial( this, "time_coeff" ) - Lang13.Initial( this, "time_coeff" ) * T / 25 ), 0.01 );

			if ( this.time_coeff != diff ) {
				this.time_coeff = diff;
			}
			return null;
		}

		// Function from file: fabricators.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( Lang13.Bool( this.being_built ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>It's building " ).a( this.being_built ).item().str( ".</span>" ).ToString() );
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>Nothing's being built.</span>" );
			}
			return null;
		}

		// Function from file: fabricators.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );

			if ( Lang13.Bool( this.being_built ) && this.icon_state != "" + this.base_state + "_ani" ) {
				this.icon_state = "" + this.base_state + "_ani";
			}
			return null;
		}

	}

}