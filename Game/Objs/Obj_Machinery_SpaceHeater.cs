// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SpaceHeater : Obj_Machinery {

		public dynamic cell = null;
		public bool on = false;
		public double set_temperature = 50;
		public int heating_power = 40000;
		public string base_state = "sheater";
		public int nocell = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.light_power_on = 0.75;
			this.light_range_on = 2;
			this.light_color = "#FA9632";
			this.ghost_read = false;
			this.machine_flags = 2;
			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "sheater0";
		}

		// Function from file: spaceheater.dm
		public Obj_Machinery_SpaceHeater ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.cell = new Obj_Item_Weapon_Cell( this );
			this.cell.charge = 1000;
			this.cell.maxcharge = 1000;
			this.update_icon();
			return;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic process(  ) {
			Ent_Static L = null;
			GasMixture env = null;
			dynamic transfer_moles = null;
			GasMixture removed = null;
			int heat_capacity = 0;
			Mob_Living_Carbon M = null;

			
			if ( this.on ) {
				
				if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) > 0 ) {
					L = this.loc;

					if ( L is Tile_Simulated ) {
						env = L.return_air();

						if ( env.temperature != this.set_temperature + 273.41 ) {
							transfer_moles = env.f_total_moles() * 0.25;
							removed = env.remove( transfer_moles );

							if ( removed != null ) {
								heat_capacity = removed.heat_capacity();

								if ( heat_capacity != 0 ) {
									
									if ( ( removed.temperature ??0) < this.set_temperature + 273.41 ) {
										removed.temperature = Num13.MinInt( ((int)( ( removed.temperature ??0) + this.heating_power / heat_capacity )), 1000 );
									} else {
										removed.temperature = Num13.MaxInt( ((int)( ( removed.temperature ??0) - this.heating_power / heat_capacity )), ((int)( 2.73 )) );
									}
									this.cell.use( this.heating_power / 20000 );
								}
							}
							env.merge( removed );
						}

						if ( !( this.loc is Tile_Space ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this.light_range_on, this ), typeof(Mob_Living_Carbon) )) {
								M = _a;
								
								M.bodytemperature += this.set_temperature * 0.01 / ( Map13.GetDistance( this, M ) + 1 );
							}
						}
					}
				} else {
					this.on = false;
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? value = null;
			dynamic C = null;

			
			if ( Lang13.Bool( Task13.User.stat ) ) {
				return null;
			}

			if ( GlobalFuncs.in_range( this, Task13.User ) && this.loc is Tile || Task13.User is Mob_Living_Silicon ) {
				Task13.User.set_machine( this );

				dynamic _a = href_list["op"]; // Was a switch-case, sorry for the mess.
				if ( _a=="temp" ) {
					value = String13.ParseNumber( href_list["val"] );
					this.set_temperature = ( this.set_temperature + ( value ??0) <= 20 ? 20 : ( this.set_temperature + ( value ??0) >= 90 ? 90 : this.set_temperature + ( value ??0) ) );
				} else if ( _a=="cellremove" ) {
					
					if ( this.panel_open && Lang13.Bool( this.cell ) && !Lang13.Bool( Task13.User.get_active_hand() ) ) {
						this.cell.updateicon();
						Task13.User.put_in_hands( this.cell );
						((Ent_Static)this.cell).add_fingerprint( Task13.User );
						this.cell = null;
						Task13.User.visible_message( new Txt( "<span class='notice'>" ).item( Task13.User ).str( " removes the power cell from " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You remove the power cell from " ).the( this ).item().str( ".</span>" ).ToString() );
					}
				} else if ( _a=="cellinstall" ) {
					
					if ( this.panel_open && !Lang13.Bool( this.cell ) ) {
						C = Task13.User.get_active_hand();

						if ( C is Obj_Item_Weapon_Cell ) {
							
							if ( Task13.User.drop_item( C, this ) ) {
								this.cell = C;
								((Ent_Static)C).add_fingerprint( Task13.User );
								Task13.User.visible_message( new Txt( "<span class='notice'>" ).item( Task13.User ).str( " inserts a power cell into " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You insert the power cell into " ).the( this ).item().str( ".</span>" ).ToString() );
							}
						}
					}
				}
				this.updateDialog();
			} else {
				Interface13.Browse( Task13.User, null, "window=spaceheater" );
				Task13.User.unset_machine();
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			
			if ( this.panel_open ) {
				dat = "Power cell: ";

				if ( Lang13.Bool( this.cell ) ) {
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=cellremove'>Installed</A><BR>" ).ToString();
				} else {
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=cellinstall'>Removed</A><BR>" ).ToString();
				}
				dat += new Txt( "Power Level: " ).item( ( Lang13.Bool( this.cell ) ? Num13.Round( ((Obj_Item_Weapon_Cell)this.cell).percent(), 1 ) : 0 ) ).str( "%<BR><BR>\n			Set Temperature:\n			<A href='?src=" ).Ref( this ).str( ";op=temp;val=-5'>-</A>\n			" ).item( this.set_temperature ).str( "&deg;C\n			<A href='?src=" ).Ref( this ).str( ";op=temp;val=5'>+</A><BR>" ).ToString();
				((Mob)user).set_machine( this );
				Interface13.Browse( user, "<HEAD><TITLE>Space Heater Control Panel</TITLE></HEAD><TT>" + dat + "</TT>", "window=spaceheater" );
				GlobalFuncs.onclose( user, "spaceheater" );
			} else {
				this.on = !this.on;
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " switches " + ( this.on ? "on" : "off" ) + " the " + this + ".</span>", "<span class='notice'>You switch " + ( this.on ? "on" : "off" ) + " the " + this + ".</span>" );
				this.update_icon();
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: spaceheater.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) );
			this.update_icon();

			if ( !this.panel_open && user.machine == this ) {
				Interface13.Browse( user, null, "window=spaceheater" );
				((Mob)user).unset_machine();
			}
			return 0;
		}

		// Function from file: spaceheater.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_Cell && !( this.nocell != 0 ) ) {
				
				if ( this.panel_open ) {
					
					if ( Lang13.Bool( this.cell ) ) {
						GlobalFuncs.to_chat( b, "There is already a power cell inside." );
						return null;
					} else {
						C = Task13.User.get_active_hand();

						if ( C is Obj_Item_Weapon_Cell ) {
							
							if ( Lang13.Bool( b.drop_item( C, this ) ) ) {
								this.cell = C;
								((Ent_Static)C).add_fingerprint( Task13.User );
								((Ent_Static)b).visible_message( "<span class='notice'>" + b + " inserts a power cell into " + this + ".</span>", "<span class='notice'>You insert the power cell into " + this + ".</span>" );
							}
						}
					}
				} else {
					GlobalFuncs.to_chat( b, "The hatch must be open to insert a power cell." );
					return null;
				}
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return null;
			}

			if ( Lang13.Bool( this.cell ) && !( this.nocell != 0 ) ) {
				this.cell.emp_act( severity );
				base.emp_act( severity );
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( !( this.nocell != 0 ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>" ).icon( this ).The( this.name ).item().str( " is " ).item( ( this.on ? "on" : "off" ) ).str( " and the hatch is " ).item( ( this.panel_open ? "open" : "closed" ) ).str( ".</span>" ).ToString() );

				if ( this.panel_open ) {
					GlobalFuncs.to_chat( user, "<span class='info'>The power cell is " + ( Lang13.Bool( this.cell ) ? "installed" : "missing" ) + ".</span>" );
				} else {
					GlobalFuncs.to_chat( user, "<span class='info'>The charge meter reads " + ( Lang13.Bool( this.cell ) ? Num13.Round( ((Obj_Item_Weapon_Cell)this.cell).percent(), 1 ) : 0 ) + "%</span>" );
				}
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;
			this.icon_state = "" + this.base_state + this.on;
			this.set_light( ( this.on ? this.light_range_on : 0 ), this.light_power_on );

			if ( this.panel_open ) {
				this.overlays.Add( "" + this.base_state + "-open" );
			}
			return null;
		}

	}

}