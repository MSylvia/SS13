// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Toy_Cards : Obj_Item_Toy {

		public dynamic cards = null;
		public bool strict_deck = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/toy.dmi";
			this.icon_state = "deck_full";
		}

		// Function from file: playing_cards.dm
		public Obj_Item_Toy_Cards ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.cards = new ByTable();
			this.generate_cards();
			this.update_icon();
			return;
		}

		// Function from file: playing_cards.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			Mob M = null;

			M = Task13.User;

			if ( !( Task13.User is Mob_Living_Carbon_Human ) || Task13.User.incapacitated() ) {
				return null;
			}

			if ( this.Adjacent( Task13.User ) ) {
				
				if ( over_object == M ) {
					M.put_in_hands( this );
					GlobalFuncs.to_chat( Task13.User, "<span class = 'notice'>You pick up the deck.</span>" );
				} else if ( over_object is Obj_Screen ) {
					
					switch ((string)( over_object.name )) {
						case "r_hand":
							M.u_equip( this, false );
							M.put_in_r_hand( this );
							GlobalFuncs.to_chat( Task13.User, "<span class = 'notice'>You pick up the deck.</span>" );
							break;
						case "l_hand":
							M.u_equip( this, false );
							M.put_in_l_hand( this );
							GlobalFuncs.to_chat( Task13.User, "<span class = 'notice'>You pick up the deck.</span>" );
							break;
					}
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class = 'warning'>You can't reach it from here.</span>" );
			}
			return null;
		}

		// Function from file: playing_cards.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.cards.len > 26 ) {
				this.icon_state = "deck_full";
			} else if ( this.cards.len > 10 ) {
				this.icon_state = "deck_half";
			} else if ( this.cards.len > 1 ) {
				this.icon_state = "deck_low";
			}
			return null;
		}

		// Function from file: playing_cards.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;
			dynamic C2 = null;
			Obj_Item_Toy_Singlecard card = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Toy_Singlecard ) {
				C = a;

				if ( !Lang13.Bool( C.parentdeck ) && !this.strict_deck || C.parentdeck == this ) {
					
					if ( Lang13.Bool( C.flipped ) == false ) {
						C.Flip();
					}

					if ( Lang13.Bool( b.drop_item( C, this ) ) ) {
						this.cards += C;
						((Ent_Static)b).visible_message( "<span class = 'notice'>" + b + " adds a card to the bottom of the deck.</span>", "You add the card to the bottom of the deck.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class = 'warning'>You can't mix cards from other decks.</span>" );
					this.update_icon();
				}
			}

			if ( a is Obj_Item_Toy_Cardhand ) {
				C2 = a;

				if ( !Lang13.Bool( C2.parentdeck ) && !this.strict_deck || C2.parentdeck == this ) {
					
					if ( Lang13.Bool( b.drop_item( C2 ) ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( C2.currenthand, typeof(Obj_Item_Toy_Singlecard) )) {
							card = _a;
							

							if ( !card.flipped ) {
								card.Flip();
							}
							card.loc = this;
							this.cards += card;
						}
						((Ent_Static)b).visible_message( "<span class = 'notice'>" + b + " puts their hand of cards into the deck.</span>", "<span class = 'notice'>You put the hand into the deck.</span>" );
						GlobalFuncs.qdel( C2 );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class = 'warning'>You can't mix cards from other decks.</span>" );
				}
				this.update_icon();
			}
			return null;
		}

		// Function from file: playing_cards.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.cards = GlobalFuncs.shuffle( this.cards );
			GlobalFuncs.playsound( user, "sound/items/cardshuffle.ogg", 50, 1 );
			((Ent_Static)user).visible_message( "<span class = 'notice'>" + user + " shuffles the deck.</span>", "<span class = 'notice'>You shuffle the deck.</span>" );
			return null;
		}

		// Function from file: playing_cards.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Item_Weapon choice = null;

			choice = null;

			if ( !( this.cards.len != 0 ) ) {
				this.icon_state = "deck_empty";
				GlobalFuncs.to_chat( a, "<span class = 'notice'>There are no more cards to draw.</span>" );
				return null;
			}
			choice = this.cards[1];
			this.cards -= choice;
			((Mob)a).put_in_active_hand( choice );
			((Ent_Static)a).visible_message( "<span class = 'notice'>" + a + " draws a card from the deck.</span>", "<span class = 'notice'>You draw a card from the deck." );
			this.update_icon();
			return null;
		}

		// Function from file: playing_cards.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			user.show_message( "There are " + this.cards.len + " cards in the deck.", 1 );
			return null;
		}

		// Function from file: playing_cards.dm
		public virtual void generate_cards(  ) {
			int? i = null;

			i = null;
			i = 2;

			while (( i ??0) <= 10) {
				this.cards += new Obj_Item_Toy_Singlecard( this, this, "" + i + " of Hearts" );
				this.cards += new Obj_Item_Toy_Singlecard( this, this, "" + i + " of Spades" );
				this.cards += new Obj_Item_Toy_Singlecard( this, this, "" + i + " of Clubs" );
				this.cards += new Obj_Item_Toy_Singlecard( this, this, "" + i + " of Diamonds" );
				i++;
			}
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "King of Hearts" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "King of Spades" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "King of Clubs" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "King of Diamonds" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Queen of Hearts" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Queen of Spades" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Queen of Clubs" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Queen of Diamonds" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Jack of Hearts" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Jack of Spades" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Jack of Clubs" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Jack of Diamonds" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Ace of Hearts" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Ace of Spades" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Ace of Clubs" );
			this.cards += new Obj_Item_Toy_Singlecard( this, this, "Ace of Diamonds" );
			return;
		}

		// Function from file: playing_cards.dm
		[Verb]
		[VerbInfo( name: "Draw specific card", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void draw_specific(  ) {
			ByTable card_names = null;
			int? i = null;
			Obj_Item_Toy_Singlecard T = null;
			dynamic N = null;
			Obj_Item_Toy_Singlecard C = null;
			int? i2 = null;
			Obj_Item_Toy_Singlecard Q = null;
			Mob M = null;

			card_names = new ByTable( this.cards.len );
			i = null;
			i = 1;

			while (( i ??0) <= this.cards.len) {
				T = this.cards[i];
				card_names[i] = T.cardname;
				i++;
			}
			Task13.User.visible_message( "<span class = 'notice'>" + Task13.User + " rifles through the deck.</span>", "<span class = 'notice'>You rifle through the deck." );
			N = Interface13.Input( "Draw a specific card from the deck.", null, null, null, card_names, InputType.Null | InputType.Any );

			if ( Lang13.Bool( N ) ) {
				C = null;
				i2 = null;
				i2 = 1;

				while (( i2 ??0) <= this.cards.len) {
					Q = this.cards[i2];

					if ( N == Q.cardname ) {
						C = Q;
					}
					i2++;
				}
				M = Task13.User;

				if ( M.r_hand == this ) {
					
					if ( Lang13.Bool( M.l_hand ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class = 'warning'>Your other hand is full.</span>" );
						return;
					} else {
						this.cards -= C;
						C.Flip();
						Task13.User.put_in_l_hand( C );
					}
				} else if ( M.l_hand == this ) {
					
					if ( Lang13.Bool( M.r_hand ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class = 'warning'>Your other hand is full.</span>" );
						return;
					} else {
						this.cards -= C;
						C.Flip();
						Task13.User.put_in_r_hand( C );
					}
				}
				Task13.User.visible_message( "<span class = 'notice'>" + Task13.User + " draws a specific card from the deck.</span>", "<span class = 'notice'>You draw the " + N + " from the deck." );
				this.update_icon();
			}
			return;
		}

	}

}