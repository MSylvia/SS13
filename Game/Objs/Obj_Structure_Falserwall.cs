// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Falserwall : Obj_Structure {

		public string mineral = "metal";
		public bool opening = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.canSmoothWith = "/turf/simulated/wall=0&/obj/structure/falsewall=0&/obj/structure/falserwall=0";
			this.icon = "icons/turf/walls.dmi";
			this.icon_state = "r_wall";
		}

		// Function from file: false_walls.dm
		public Obj_Structure_Falserwall ( dynamic loc = null ) : base( (object)(loc) ) {
			this.relativewall_neighbours();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: false_walls.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic T = null;
			dynamic WT = null;
			dynamic T2 = null;
			dynamic used_pick = null;
			dynamic T3 = null;

			
			if ( this.opening ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You must wait until the door has stopped moving.</span>" );
				return null;
			}

			if ( a is Obj_Item_Weapon_Screwdriver ) {
				T = GlobalFuncs.get_turf( this );
				((Ent_Static)b).visible_message( "" + b + " tightens some bolts on the r wall.", "You tighten the bolts on the wall." );
				((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall_RWall) );
				GlobalFuncs.qdel( this );
			}

			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					T2 = GlobalFuncs.get_turf( this );
					((Tile)T2).ChangeTurf( typeof(Tile_Simulated_Wall) );
					T2 = GlobalFuncs.get_turf( this );
					((Ent_Static)T2).attackby( a, b );
					GlobalFuncs.qdel( this );
				}
			} else if ( a is Obj_Item_Weapon_Pickaxe ) {
				used_pick = a;

				if ( !( ( used_pick.diggables & 4 ) != 0 ) ) {
					return null;
				}
				T3 = GlobalFuncs.get_turf( this );
				((Tile)T3).ChangeTurf( typeof(Tile_Simulated_Wall) );
				T3 = GlobalFuncs.get_turf( this );
				((Ent_Static)T3).attackby( a, b );
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: false_walls.dm
		public override void relativewall(  ) {
			int junction = 0;

			
			if ( !this.density ) {
				this.icon_state = "frwall_open";
				return;
			}
			junction = this.findSmoothingNeighbors();
			this.icon_state = "rwall" + junction;
			return;
		}

		// Function from file: false_walls.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.opening ) {
				return null;
			}

			if ( this.density ) {
				this.opening = true;
				this.icon_state = "frwall_open";
				Icon13.Flick( "frwall_opening", this );
				Task13.Sleep( 15 );
				this.density = false;
				this.set_opacity( 0 );
				this.opening = false;
			} else {
				this.opening = true;
				this.icon_state = "r_wall";
				Icon13.Flick( "frwall_closing", this );
				this.density = true;
				Task13.Sleep( 15 );
				this.set_opacity( 1 );
				this.relativewall();
				this.opening = false;
			}
			return null;
		}

		// Function from file: false_walls.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( user is Mob_Living_Silicon_Robot_Mommi ) {
				this.add_hiddenprint( user );
				this.attack_hand( user );
			}
			return null;
		}

	}

}