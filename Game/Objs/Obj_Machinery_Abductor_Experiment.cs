// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Abductor_Experiment : Obj_Machinery_Abductor {

		public int? points = 0;
		public ByTable history = new ByTable();
		public ByTable abductee_minds = new ByTable();
		public string flash = " - || - ";
		public Obj_Machinery_Abductor_Console console = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.state_open = 1;
			this.icon = "icons/obj/abductor.dmi";
			this.icon_state = "experiment-open";
		}

		public Obj_Machinery_Abductor_Experiment ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: experiment.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( Lang13.Bool( this.state_open ) ) {
				this.icon_state = "experiment-open";
			} else {
				this.icon_state = "experiment";
			}
			return false;
		}

		// Function from file: experiment.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) || Task13.User == this.occupant ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["refresh"] ) ) {
				this.updateUsrDialog();
				return null;
			}

			if ( Lang13.Bool( href_list["open"] ) ) {
				this.open_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				this.close_machine();
				return null;
			}

			if ( Lang13.Bool( this.occupant ) && Convert.ToInt32( this.occupant.stat ) != 2 ) {
				
				if ( Lang13.Bool( href_list["experiment"] ) ) {
					this.flash = this.Experiment( this.occupant, href_list["experiment"] );
				}
			}
			this.updateUsrDialog();
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: experiment.dm
		public void SendBack( dynamic H = null ) {
			Base_Data A = null;

			((Mob)H).Sleeping( 8 );

			if ( this.console != null && this.console.pad != null && this.console.pad.teleport_target != null ) {
				A = this.console.pad.teleport_target;

				if ( Lang13.Bool( ((dynamic)A).safe ) ) {
					this.TeleportToArea( H, A );
					((Mob_Living_Carbon)H).uncuff();
					return;
				}
			}
			((Ent_Dynamic)H).forceMove( Rand13.PickFromTable( GlobalVars.latejoin ) );
			((Mob_Living_Carbon)H).uncuff();
			return;
		}

		// Function from file: experiment.dm
		public string Experiment( dynamic occupant = null, string type = null ) {
			dynamic H = null;
			int point_reward = 0;
			dynamic GlandTest = null;
			dynamic objtype = null;
			dynamic O = null;
			int obj_count = 0;
			Objective objective = null;
			Obj_Item_Organ_Internal_Gland G = null;

			H = occupant;
			point_reward = 0;

			if ( this.history.Contains( H ) ) {
				return "<span class='bad'>Specimen already in database.</span>";
			}

			if ( Convert.ToInt32( H.stat ) == 2 ) {
				this.say( "Specimen deceased - please provide fresh sample." );
				return "<span class='bad'>Specimen deceased.</span>";
			}
			GlandTest = Lang13.FindIn( typeof(Obj_Item_Organ_Internal_Gland), H.internal_organs );

			if ( !Lang13.Bool( GlandTest ) ) {
				this.say( "Experimental dissection not detected!" );
				return "<span class='bad'>No glands detected!</span>";
			}

			if ( H.mind != null && H.ckey != null ) {
				this.history.Add( H );
				this.abductee_minds.Add( H.mind );
				this.say( "Processing specimen..." );
				Task13.Sleep( 5 );

				switch ((int?)( String13.ParseNumber( type ) )) {
					case 1:
						H.WriteMsg( "<span class='warning'>You feel violated.</span>" );
						break;
					case 2:
						H.WriteMsg( "<span class='warning'>You feel yourself being sliced apart and put back together.</span>" );
						break;
					case 3:
						H.WriteMsg( "<span class='warning'>You feel intensely watched.</span>" );
						break;
				}
				Task13.Sleep( 5 );
				H.WriteMsg( "<span class='warning'><b>Your mind snaps!</b></span>" );
				objtype = Rand13.PickFromTable( Lang13.GetTypes( typeof(Objective_Abductee) ) - typeof(Objective_Abductee) );
				O = Lang13.Call( objtype );
				GlobalVars.ticker.mode.abductees.Add( H.mind );
				H.mind.objectives.Add( O );
				obj_count = 1;
				H.WriteMsg( "<span class='notice'>Your current objectives:</span>" );

				foreach (dynamic _b in Lang13.Enumerate( H.mind.objectives, typeof(Objective) )) {
					objective = _b;
					
					H.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
					obj_count++;
				}

				foreach (dynamic _c in Lang13.Enumerate( H.internal_organs, typeof(Obj_Item_Organ_Internal_Gland) )) {
					G = _c;
					
					G.Start();
					point_reward++;
				}

				if ( point_reward > 0 ) {
					this.open_machine();
					this.SendBack( H );
					GlobalFuncs.playsound( this.loc, "sound/machines/ding.ogg", 50, 1 );
					this.points += point_reward;
					return "<span class='good'>Experiment successful! " + point_reward + " new data-points collected.</span>";
				} else {
					GlobalFuncs.playsound( this.loc, "sound/machines/buzz-sigh.ogg", 50, 1 );
					return "<span class='bad'>Experiment failed! No replacement organ detected.</span>";
				}
			} else {
				this.say( "Brain activity nonexistant - disposing sample..." );
				this.open_machine();
				this.SendBack( H );
				return "<span class='bad'>Specimen braindead - disposed.</span>";
			}
			return "<span class='bad'>ERROR</span>";
		}

		// Function from file: experiment.dm
		public void experimentUI( dynamic user = null ) {
			dynamic dat = null;
			Obj_Item_Weapon_Photo P = null;
			Browser popup = null;

			dat += "<h3> Experiment </h3>";

			if ( Lang13.Bool( this.occupant ) ) {
				P = new Obj_Item_Weapon_Photo();
				P.photocreate( null, new Icon( this.dissection_icon( this.occupant ), null, GlobalVars.SOUTH ) );
				Interface13.CacheBrowseResource( user, P.img, "dissection_img" );
				dat += "<table><tr><td>";
				dat += "<img src=dissection_img height=80 width=80>";
				dat += "</td><td>";
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";experiment=1'>Probe</a><br>" ).ToString();
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";experiment=2'>Dissect</a><br>" ).ToString();
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";experiment=3'>Analyze</a><br>" ).ToString();
				dat += "</td></tr></table>";
			} else {
				dat += "<span class='linkOff'>Experiment </span>";
			}

			if ( !Lang13.Bool( this.occupant ) ) {
				dat += "<h3>Machine Unoccupied</h3>";
			} else {
				dat += "<h3>Subject Status : </h3>";
				dat += "" + this.occupant.name + " => ";

				dynamic _a = this.occupant.stat; // Was a switch-case, sorry for the mess.
				if ( _a==0 ) {
					dat += "<span class='good'>Conscious</span>";
				} else if ( _a==1 ) {
					dat += "<span class='average'>Unconscious</span>";
				} else {
					dat += "<span class='bad'>Deceased</span>";
				}
			}
			dat += "<br>";
			dat += "" + this.flash;
			dat += "<br>";
			dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";refresh=1'>Scan</a>" ).ToString();
			dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";" ).item( ( Lang13.Bool( this.state_open ) ? "close=1'>Close</a>" : "open=1'>Open</a>" ) ).ToString();
			popup = new Browser( user, "experiment", "Probing Console", 300, 300 );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: experiment.dm
		public Icon dissection_icon( dynamic H = null ) {
			Icon photo = null;
			string g = null;
			Icon eyes_s = null;
			dynamic S = null;
			Icon hair_s = null;
			Icon facial_s = null;
			Icon splat = null;

			photo = null;
			g = ( H.gender == GlobalVars.FEMALE ? "f" : "m" );

			if ( !GlobalVars.config.mutant_races || H.dna.species.use_skintones ) {
				photo = new Icon( "icons/mob/human.dmi", "" + H.skin_tone + "_" + g + "_s" );
			} else {
				photo = new Icon( "icons/mob/human.dmi", "" + H.dna.species.id + "_" + g + "_s" );
				photo.Blend( "#" + H.dna.features["mcolor"], 2 );
			}

			if ( H.dna.species.specflags.Contains( 8 ) ) {
				eyes_s = new Icon( "icons/mob/human_face.dmi", "" + H.dna.species.eyes + "_s" );
				eyes_s.Blend( "#" + H.eye_color, 2 );
			}
			S = GlobalVars.hair_styles_list[H.hair_style];

			if ( Lang13.Bool( S ) && H.dna.species.specflags.Contains( 2 ) ) {
				hair_s = new Icon( S.icon, "" + S.icon_state + "_s" );
				hair_s.Blend( "#" + H.hair_color, 2 );
				eyes_s.Blend( hair_s, 3 );
			}
			S = GlobalVars.facial_hair_styles_list[H.facial_hair_style];

			if ( Lang13.Bool( S ) && H.dna.species.specflags.Contains( 4 ) ) {
				facial_s = new Icon( S.icon, "" + S.icon_state + "_s" );
				facial_s.Blend( "#" + H.facial_hair_color, 2 );
				eyes_s.Blend( facial_s, 3 );
			}

			if ( eyes_s != null ) {
				photo.Blend( eyes_s, 3 );
			}
			splat = new Icon( "icons/mob/dam_human.dmi", "chest30" );
			photo.Blend( splat, 3 );
			return photo;
		}

		// Function from file: experiment.dm
		public override dynamic close_machine( Ent_Static target = null ) {
			Mob_Living_Carbon C = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Mob_Living_Carbon) )) {
				C = _a;
				

				if ( this.IsAbductor( C ) ) {
					return null;
				}
			}

			if ( Lang13.Bool( this.state_open ) && !Lang13.Bool( this.panel_open ) ) {
				base.close_machine( target );
			}
			return null;
		}

		// Function from file: experiment.dm
		public override bool open_machine( int? dump = null ) {
			
			if ( !Lang13.Bool( this.state_open ) && !Lang13.Bool( this.panel_open ) ) {
				base.open_machine( dump );
			}
			return false;
		}

		// Function from file: experiment.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.experimentUI( a );
			return null;
		}

		// Function from file: experiment.dm
		public override bool MouseDrop_T( Ent_Static dropping = null, Mob user = null ) {
			
			if ( user.stat != 0 || Lang13.Bool( user.lying ) || !this.Adjacent( user ) || !dropping.Adjacent( user ) || !( dropping is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( this.IsAbductor( dropping ) ) {
				return false;
			}
			this.close_machine( dropping );
			return false;
		}

	}

}