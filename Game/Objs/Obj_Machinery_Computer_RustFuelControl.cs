// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_RustFuelControl : Obj_Machinery_Computer {

		public ByTable connected_injectors = new ByTable();
		public ByTable active_stages = new ByTable();
		public ByTable proceeding_stages = new ByTable();
		public ByTable stage_times = new ByTable();
		public double? announce_fueldepletion = 0;
		public double? announce_stageprogression = 0;
		public int scan_range = 25;
		public bool ticks_this_stage = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "code/WorkInProgress/Cael_Aislinn/Rust/rust.dmi";
			this.icon_state = "fuel";
		}

		public Obj_Machinery_Computer_RustFuelControl ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: fuel_control.dm
		public bool check_injector_status( Obj_Machinery_Power_RustFuelInjector I = null ) {
			
			if ( !( I != null ) ) {
				return false;
			}

			if ( ( I.stat & 3 ) != 0 || !I.remote_access_enabled || !Lang13.Bool( I.id_tag ) ) {
				
				if ( this.connected_injectors.Find( I ) != 0 ) {
					this.connected_injectors.Remove( I );
				}
				return false;
			}
			return true;
		}

		// Function from file: fuel_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Obj_Machinery_Power_RustFuelInjector I = null;
			dynamic cur_stage = null;
			Obj_Machinery_Power_RustFuelInjector I2 = null;
			Obj_Machinery_Power_RustFuelInjector I3 = null;
			Obj_Machinery_Power_RustFuelInjector I4 = null;
			Obj_Machinery_Power_RustFuelInjector I5 = null;
			dynamic cur_stage2 = null;
			dynamic new_duration = null;
			dynamic cur_stage3 = null;
			dynamic next_stage = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["scan"] ) ) {
				this.connected_injectors = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, this.scan_range ), typeof(Obj_Machinery_Power_RustFuelInjector) )) {
					I = _a;
					

					if ( this.check_injector_status( I ) ) {
						this.connected_injectors.Add( I );
					}
				}
			}

			if ( Lang13.Bool( href_list["toggle_stage"] ) ) {
				cur_stage = href_list["toggle_stage"];

				if ( this.active_stages.Find( cur_stage ) != 0 ) {
					this.active_stages.Remove( cur_stage );

					foreach (dynamic _b in Lang13.Enumerate( this.connected_injectors, typeof(Obj_Machinery_Power_RustFuelInjector) )) {
						I2 = _b;
						

						if ( I2.id_tag == cur_stage && this.check_injector_status( I2 ) ) {
							I2.StopInjecting();
						}
					}
				} else {
					this.active_stages.Add( cur_stage );

					foreach (dynamic _c in Lang13.Enumerate( this.connected_injectors, typeof(Obj_Machinery_Power_RustFuelInjector) )) {
						I3 = _c;
						

						if ( I3.id_tag == cur_stage && this.check_injector_status( I3 ) ) {
							I3.BeginInjecting();
						}
					}
				}
			}

			if ( Lang13.Bool( href_list["cooldown"] ) ) {
				
				foreach (dynamic _d in Lang13.Enumerate( this.connected_injectors, typeof(Obj_Machinery_Power_RustFuelInjector) )) {
					I4 = _d;
					

					if ( this.check_injector_status( I4 ) ) {
						I4.StopInjecting();
					}
				}
				this.active_stages = new ByTable();
			}

			if ( Lang13.Bool( href_list["warmup"] ) ) {
				
				foreach (dynamic _e in Lang13.Enumerate( this.connected_injectors, typeof(Obj_Machinery_Power_RustFuelInjector) )) {
					I5 = _e;
					

					if ( this.check_injector_status( I5 ) ) {
						I5.BeginInjecting();
					}

					if ( !( this.active_stages.Find( I5.id_tag ) != 0 ) ) {
						this.active_stages.Add( I5.id_tag );
					}
				}
			}

			if ( Lang13.Bool( href_list["stage_time"] ) ) {
				cur_stage2 = href_list["stage_time"];
				new_duration = Interface13.Input( "Enter new stage duration in seconds", "Stage duration", null, null, null, InputType.Num );

				if ( Lang13.Bool( new_duration ) ) {
					this.stage_times[cur_stage2] = new_duration;
				} else if ( this.stage_times.Find( cur_stage2 ) != 0 ) {
					this.stage_times.Remove( cur_stage2 );
				}
			}

			if ( Lang13.Bool( href_list["announce_fueldepletion"] ) ) {
				this.announce_fueldepletion = String13.ParseNumber( href_list["announce_fueldepletion"] );
			}

			if ( Lang13.Bool( href_list["announce_stageprogression"] ) ) {
				this.announce_stageprogression = String13.ParseNumber( href_list["announce_stageprogression"] );
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=fuel_control" );
				Task13.User.unset_machine();
			}

			if ( Lang13.Bool( href_list["set_next_stage"] ) ) {
				cur_stage3 = href_list["set_next_stage"];

				if ( !( this.proceeding_stages.Find( cur_stage3 ) != 0 ) ) {
					this.proceeding_stages.Add( cur_stage3 );
				}
				next_stage = Interface13.Input( "Enter next stage ID", "Automated stage procession", null, null, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( next_stage ) ) {
					this.proceeding_stages[cur_stage3] = next_stage;
				} else {
					this.proceeding_stages.Remove( cur_stage3 );
				}
			}
			this.updateDialog();
			return null;
		}

		// Function from file: fuel_control.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			Obj_Machinery_Power_RustFuelInjector I = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				((Mob)user).unset_machine();
				Interface13.Browse( user, null, "window=fuel_control" );
				return null;
			}

			if ( !( user is Mob_Living_Silicon ) && Map13.GetDistance( this, user ) > 1 ) {
				((Mob)user).unset_machine();
				Interface13.Browse( user, null, "window=fuel_control" );
				return null;
			}
			dat = "<B>Reactor Core Fuel Control</B><BR>";
			dat += new Txt( "\n		<hr>\n		<b>Detected devices</b> <a href='?src=" ).Ref( this ).str( @";scan=1'>[Refresh list]</a>
		<table border=1 width='100%'>
		<tr>
		<td><b>ID</b></td>
		<td><b>Assembly</b></td>
		<td><b>Consumption</b></td>
		<td><b>Depletion</b></td>
		<td><b>Duration</b></td>
		<td><b>Next stage</b></td>
		<td></td>
		<td></td>
		</tr>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( this.connected_injectors, typeof(Obj_Machinery_Power_RustFuelInjector) )) {
				I = _a;
				
				dat += "<tr>\n			<td>" + I.id_tag + "</td>";

				if ( Lang13.Bool( I.cur_assembly ) ) {
					dat += new Txt( "<td><a href='?src=" ).Ref( I ).str( ";toggle_injecting=1;update_extern=" ).Ref( this ).str( "'>[" ).item( ( I.injecting ? "Halt injecting" : "Begin injecting" ) ).str( "]</a></td>" ).ToString();
				} else {
					dat += "<td>None</td>";
				}
				dat += "<td>" + I.fuel_usage * 100 + "%</td>";

				if ( Lang13.Bool( I.cur_assembly ) ) {
					dat += "<td>" + I.cur_assembly.percent_depleted * 100 + "%</td>";
				} else {
					dat += "<td>NA</td>";
				}

				if ( this.stage_times.Find( I.id_tag ) != 0 ) {
					dat += new Txt( "<td>" ).item( this.ticks_this_stage ).str( "/" ).item( this.stage_times[I.id_tag] ).str( "s <a href='?src=" ).Ref( this ).str( ";stage_time=" ).item( I.id_tag ).str( "'>Modify</td>" ).ToString();
				} else {
					dat += new Txt( "<td>" ).item( this.ticks_this_stage ).str( "s <a href='?src=" ).Ref( this ).str( ";stage_time=" ).item( I.id_tag ).str( "'>Set</td>" ).ToString();
				}

				if ( this.proceeding_stages.Find( I.id_tag ) != 0 ) {
					dat += new Txt( "<td><a href='?src=" ).Ref( this ).str( ";set_next_stage=" ).item( I.id_tag ).str( "'>" ).item( this.proceeding_stages[I.id_tag] ).str( "</a></td>" ).ToString();
				} else {
					dat += new Txt( "<td>None <a href='?src=" ).Ref( this ).str( ";set_next_stage=" ).item( I.id_tag ).str( "'>[modify]</a></td>" ).ToString();
				}
				dat += new Txt( "<td><a href='?src=" ).Ref( this ).str( ";toggle_stage=" ).item( I.id_tag ).str( "'>[" ).item( ( this.active_stages.Find( I.id_tag ) != 0 ? "Deactivate stage" : "Activate stage " ) ).str( " ]</a></td>\n			</tr>" ).ToString();
			}
			dat += new Txt( "</table>\n		<hr>\n		<A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>\n		<A href='?src=" ).Ref( this ).str( ";close=1'>Close</A><BR>" ).ToString();
			Interface13.Browse( user, dat, "window=fuel_control;size=800x400" );
			((Mob)user).set_machine( this );
			return null;
		}

		// Function from file: fuel_control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: fuel_control.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

	}

}