// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SortingMachine_Recycling : Obj_Machinery_SortingMachine {

		public ByTable selected_types = new ByTable(new object [] { "Glasses", "Metals/Minerals", "Electronics" });
		public ByTable types = new ByTable( 6 );

		// Function from file: sortingmachinery.dm
		public Obj_Machinery_SortingMachine_Recycling ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_SortingMachine_Recycling(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_Capacitor()
			 });
			this.RefreshParts();
			this.types[3] = "Biological";
			this.types[6] = "Wooden";
			this.types[5] = "Electronics";
			this.types[2] = "Glasses";
			this.types[4] = "Metals/Minerals";
			this.types[1] = "Miscellaneous";
			return;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			int? i = null;
			dynamic selected = null;
			string cssclass = null;
			Browser popup = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				
				if ( user.machine == this ) {
					Task13.User.unset_machine();
				}
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "Select the desired items to sort from the line.<br>";
			i = null;
			i = 1;

			while (( i ??0) <= this.types.len) {
				Interface13.Stat( null, this.selected_types.Contains( this.types[i] ) );
				selected = null;
				cssclass = ( Lang13.Bool( selected ) ? "linkOn" : "linkDanger" );
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";toggle_types=" ).item( i ).str( "' class='" ).item( cssclass ).str( "'>" ).item( this.types[i] ).str( "</a><br>" ).ToString();
				i++;
			}
			popup = new Browser( user, "recycksortingmachine", this.name, 320, 200, this );
			popup.add_stylesheet( "shared", "nano/css/shared.css" );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: sortingmachinery.dm
		public override bool? sort( Ent_Dynamic A = null ) {
			return A.w_type != 0 && false;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			double? typeID = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["toggle_types"] ) ) {
				typeID = String13.ParseNumber( href_list["toggle_types"] );
				typeID = ( ( typeID ??0) <= 1 ? 1 : ( ( typeID ??0) >= this.types.len ? this.types.len : typeID ) );
				Interface13.Stat( null, this.selected_types.Contains( this.types[typeID] ) );

				if ( ( typeID ??0) <= 1 ) {
					this.selected_types.Remove( this.types[typeID] );
				} else {
					this.selected_types.Add( this.types[typeID] );
				}
				this.updateUsrDialog();
				return 1;
			}
			return _default;
		}

	}

}