// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Projectile_Beam : Obj_Item_Projectile {

		public bool frequency = true;
		public int wait = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 101;
			this.pass_flags = 7;
			this.damage = 30;
			this.damage_type = "fire";
			this.flag = "laser";
			this.eyeblur = 4;
			this.icon_state = "laser";
			this.layer = 13;
		}

		public Obj_Item_Projectile_Beam ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: beams.dm
		public void cleanup( dynamic reference = null ) {
			bool TS = false;
			Ent_Static lastloc = null;
			int starttime = 0;
			bool cleanedup = false;
			dynamic turf_master = null;
			dynamic laser_state = null;
			dynamic turfs = null;
			dynamic T = null;
			dynamic turf_master2 = null;
			dynamic laser_state2 = null;
			ByTable turfs2 = null;
			dynamic T2 = null;

			starttime = Game13.time;
			cleanedup = false;

			while (Game13.time - starttime < 3 || TS) {
				
				if ( this.loc != null ) {
					lastloc = this.loc;
				}
				TS = lastloc.timestopped;

				if ( TS ) {
					
					if ( Game13.time - starttime > 3 ) {
						
						if ( !cleanedup ) {
							turf_master = GlobalVars.beam_master[reference];

							foreach (dynamic _b in Lang13.Enumerate( turf_master )) {
								laser_state = _b;
								
								turfs = turf_master[laser_state];

								foreach (dynamic _a in Lang13.Enumerate( turfs )) {
									T = _a;
									

									if ( !T.timestopped ) {
										T.overlays.Remove( GlobalVars.beam_master[laser_state] );
									}
								}
							}
							cleanedup = true;
						}
					}
					Task13.Sleep( 2 );
				} else {
					Task13.Sleep( 1 );
				}
			}

			if ( cleanedup ) {
				Task13.Sleep( 2 );
			}
			turf_master2 = GlobalVars.beam_master[reference];

			foreach (dynamic _d in Lang13.Enumerate( turf_master2 )) {
				laser_state2 = _d;
				
				turfs2 = turf_master2[laser_state2];

				foreach (dynamic _c in Lang13.Enumerate( turfs2 )) {
					T2 = _c;
					
					T2.overlays.Remove( GlobalVars.beam_master[laser_state2] );
				}
				turfs2.len = 0;
			}
			return;
		}

		// Function from file: beams.dm
		public override void dumbfire( int dir = 0 ) {
			string reference = null;
			double? target_dir = null;
			bool first = false;
			bool tS = false;
			dynamic turf_master = null;
			ByTable turfs = null;

			reference = new Txt().Ref( this ).ToString();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				target_dir = ( dir != 0 ? dir : this.dir );
				first = true;
				tS = false;

				while (this.loc != null) {
					
					if ( this.x == 1 || this.x == Game13.map_size_x || this.y == 1 || this.y == Game13.map_size_y ) {
						GlobalFuncs.returnToPool( this );
						break;
					}

					if ( first && this.timestopped ) {
						tS = true;
						this.timestopped = false;
					}
					Map13.Step( this, ((int)( target_dir ??0 )) );

					if ( tS ) {
						tS = false;
						this.timestopped = this.loc.timestopped;
					}

					if ( this.bumped ) {
						break;
					}

					if ( ( this.kill_count-- ??0) < 1 ) {
						GlobalFuncs.returnToPool( this );
						break;
					}

					if ( !( GlobalVars.beam_master.Find( "" + this.icon_state + target_dir ) != 0 ) ) {
						GlobalVars.beam_master["" + this.icon_state + target_dir] = new Image( this.icon, this.icon_state, 10, target_dir );
					}
					this.loc.overlays.Add( GlobalVars.beam_master["" + this.icon_state + target_dir] );

					if ( GlobalVars.beam_master.Find( reference ) != 0 ) {
						turf_master = GlobalVars.beam_master[reference];

						if ( Lang13.Bool( turf_master.Find( "" + this.icon_state + target_dir ) ) ) {
							turf_master["" + this.icon_state + target_dir] += this.loc;
						} else {
							turf_master["" + this.icon_state + target_dir] = new ByTable(new object [] { this.loc });
						}
					} else {
						turfs = new ByTable();
						turfs["" + this.icon_state + target_dir] = new ByTable(new object [] { this.loc });
						GlobalVars.beam_master[reference] = turfs;
					}

					while (( this.loc.timestopped || this.timestopped ) && !first) {
						Task13.Sleep( 3 );
					}
					first = false;
				}
				return;
			}));
			this.cleanup( reference );
			return;
		}

		// Function from file: beams.dm
		public override dynamic bresenham_step( double distA = 0, double distB = 0, double? dA = null, double? dB = null, Ent_Static lastposition = null, double? target_dir = null, dynamic reference = null ) {
			bool first = false;
			bool tS = false;
			Tile step = null;
			Tile step2 = null;
			Image I = null;
			dynamic turf_master = null;
			dynamic turfs = null;
			ByTable turfs2 = null;
			Image I2 = null;
			dynamic turf_master2 = null;
			dynamic turfs3 = null;
			ByTable turfs4 = null;

			first = true;
			tS = false;

			while (this != null && this.loc != null) {
				
				if ( first && this.timestopped ) {
					tS = true;
					this.timestopped = false;
				}

				if ( this.error < 0 ) {
					step = Map13.GetStep( this, ((int)( dB ??0 )) );

					if ( !( step != null ) ) {
						this.bullet_die();
					}
					this.Move( step );
					this.error += distA;
					target_dir = null;
				} else {
					step2 = Map13.GetStep( this, ((int)( dA ??0 )) );

					if ( !( step2 != null ) ) {
						this.bullet_die();
					}
					this.Move( step2 );
					this.error -= distB;
					target_dir = dA;

					if ( this.error < 0 ) {
						target_dir = ( dA ??0) + ( dB ??0);
					}
				}

				if ( this.loc == null ) {
					return reference;
				}

				if ( lastposition == this.loc && !tS && !this.timestopped && !this.loc.timestopped ) {
					this.kill_count = 0;
				}
				lastposition = this.loc;

				if ( ( this.kill_count ??0) < 1 ) {
					GlobalFuncs.returnToPool( this );
					return reference;
				}
				this.kill_count--;

				if ( this.bump_original_check() ) {
					return reference;
				}

				if ( this.linear_movement ) {
					this.update_pixel();
					Interface13.Stat( null, GlobalVars.beam_master.Contains( "" + this.icon_state + "_angle" + this.target_angle + "_pX" + this.PixelX + "_pY" + this.PixelY ) );

					if ( !false ) {
						I = new Image( this.icon, "" + this.icon_state + "_pixel", 13, target_dir );
						I.transform = Num13.Rotate( I.transform, this.target_angle + 45 );
						I.pixel_x = this.PixelX;
						I.pixel_y = this.PixelY;
						GlobalVars.beam_master["" + this.icon_state + "_angle" + this.target_angle + "_pX" + this.PixelX + "_pY" + this.PixelY] = I;
					}

					if ( this.loc != null && Lang13.Bool( target_dir ) ) {
						this.loc.overlays.Add( GlobalVars.beam_master["" + this.icon_state + "_angle" + this.target_angle + "_pX" + this.PixelX + "_pY" + this.PixelY] );
						Interface13.Stat( null, GlobalVars.beam_master.Contains( reference ) );

						if ( false ) {
							turf_master = GlobalVars.beam_master[reference];
							Interface13.Stat( null, turf_master.Contains( "" + this.icon_state + "_angle" + this.target_angle + "_pX" + this.PixelX + "_pY" + this.PixelY ) );

							if ( false ) {
								turfs = turf_master["" + this.icon_state + "_angle" + this.target_angle + "_pX" + this.PixelX + "_pY" + this.PixelY];
								turfs += this.loc;
							} else {
								turf_master["" + this.icon_state + "_angle" + this.target_angle + "_pX" + this.PixelX + "_pY" + this.PixelY] = new ByTable(new object [] { this.loc });
							}
						} else {
							turfs2 = new ByTable();
							turfs2["" + this.icon_state + "_angle" + this.target_angle + "_pX" + this.PixelX + "_pY" + this.PixelY] = new ByTable(new object [] { this.loc });
							GlobalVars.beam_master[reference] = turfs2;
						}
					}
				} else {
					Interface13.Stat( null, GlobalVars.beam_master.Contains( "" + this.icon_state + target_dir ) );

					if ( !this.linear_movement ) {
						I2 = new Image( this.icon, this.icon_state, 10, target_dir );
						GlobalVars.beam_master["" + this.icon_state + target_dir] = I2;
					}

					if ( this.loc != null && Lang13.Bool( target_dir ) ) {
						this.loc.overlays.Add( GlobalVars.beam_master["" + this.icon_state + target_dir] );
						Interface13.Stat( null, GlobalVars.beam_master.Contains( reference ) );

						if ( false ) {
							turf_master2 = GlobalVars.beam_master[reference];
							Interface13.Stat( null, turf_master2.Contains( "" + this.icon_state + target_dir ) );

							if ( false ) {
								turfs3 = turf_master2["" + this.icon_state + target_dir];
								turfs3 += this.loc;
							} else {
								turf_master2["" + this.icon_state + target_dir] = new ByTable(new object [] { this.loc });
							}
						} else {
							turfs4 = new ByTable();
							turfs4["" + this.icon_state + target_dir] = new ByTable(new object [] { this.loc });
							GlobalVars.beam_master[reference] = turfs4;
						}
					}
				}

				if ( tS ) {
					this.timestopped = this.loc.timestopped;
					tS = false;
				}

				if ( this.wait != 0 ) {
					Task13.Sleep( this.wait );
					this.wait = 0;
				}

				while (( this.loc.timestopped || this.timestopped ) && !first) {
					Task13.Sleep( 3 );
				}
				first = false;
			}
			return reference;
		}

		// Function from file: beams.dm
		public override dynamic process(  ) {
			Ent_Static lastposition = null;
			dynamic reference = null;
			double? target_dir = null;

			lastposition = this.loc;
			reference = new Txt().Ref( this ).ToString();
			this.target = GlobalFuncs.get_turf( this.original );
			this.dist_x = Math.Abs( Convert.ToDouble( this.target.x - this.x ) );
			this.dist_y = Math.Abs( Convert.ToDouble( this.target.y - this.y ) );

			if ( Convert.ToDouble( this.target.x ) > this.x ) {
				this.dx = GlobalVars.EAST;
			} else {
				this.dx = GlobalVars.WEST;
			}

			if ( Convert.ToDouble( this.target.y ) > this.y ) {
				this.dy = GlobalVars.NORTH;
			} else {
				this.dy = GlobalVars.SOUTH;
			}
			target_dir = GlobalVars.SOUTH;

			if ( this.dist_x > this.dist_y ) {
				this.error = this.dist_x / 2 - this.dist_y;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					reference = this.bresenham_step( this.dist_x, this.dist_y, this.dx, this.dy, lastposition, target_dir, reference );
					return;
				}));
			} else {
				this.error = this.dist_y / 2 - this.dist_x;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					reference = this.bresenham_step( this.dist_y, this.dist_x, this.dy, this.dx, lastposition, target_dir, reference );
					return;
				}));
			}
			this.cleanup( reference );
			return null;
		}

		// Function from file: beams.dm
		public override bool OnFired(  ) {
			this.target = GlobalFuncs.get_turf( this.original );
			this.dist_x = Math.Abs( Convert.ToDouble( this.target.x - this.starting.x ) );
			this.dist_y = Math.Abs( Convert.ToDouble( this.target.y - this.starting.y ) );
			this.override_starting_X = Convert.ToInt32( this.starting.x );
			this.override_starting_Y = Convert.ToInt32( this.starting.y );
			this.override_target_X = Convert.ToInt32( this.target.x );
			this.override_target_Y = Convert.ToInt32( this.target.y );

			if ( Convert.ToDouble( this.target.x ) > Convert.ToDouble( this.starting.x ) ) {
				this.dx = GlobalVars.EAST;
			} else {
				this.dx = GlobalVars.WEST;
			}

			if ( Convert.ToDouble( this.target.y ) > Convert.ToDouble( this.starting.y ) ) {
				this.dy = GlobalVars.NORTH;
			} else {
				this.dy = GlobalVars.SOUTH;
			}

			if ( this.dist_x > this.dist_y ) {
				this.error = this.dist_x / 2 - this.dist_y;
			} else {
				this.error = this.dist_y / 2 - this.dist_x;
			}
			this.target_angle = Num13.Floor( GlobalFuncs.Get_Angle( this.starting, this.target ) );
			return true;
		}

	}

}