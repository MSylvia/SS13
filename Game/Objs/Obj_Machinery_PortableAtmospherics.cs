// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics : Obj_Machinery {

		public GasMixture air_contents = new GasMixture();
		public dynamic connected_port = null;
		public dynamic holding = null;
		public int volume = 0;
		public bool destroyed = false;
		public double maximum_pressure = 9119.25;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.use_power = 0;
		}

		// Function from file: portable_atmospherics.dm
		public Obj_Machinery_PortableAtmospherics ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.air_contents.volume = this.volume;
			this.air_contents.temperature = 293.41;
			return; // Warning! Attempt to return some other value!
		}

		// Function from file: portable_atmospherics.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Machinery_PortableAtmospherics icon = null;
			dynamic T = null;
			dynamic possible_port = null;
			dynamic S = null;
			dynamic analyzer = null;

			icon = this;

			if ( a is Obj_Item_Weapon_Tank && !this.destroyed ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					return 0;
				}
				T = a;

				if ( Lang13.Bool( b.drop_item( T, this ) ) ) {
					this.holding = T;
					this.update_icon();
					return 1;
				}
			} else if ( a is Obj_Item_Weapon_Wrench ) {
				
				if ( Lang13.Bool( this.connected_port ) ) {
					this.disconnect();
					GlobalFuncs.to_chat( b, "<span class='notice'>You disconnect " + this.name + " from the port.</span>" );
					this.update_icon();
					this.pixel_x = 0;
					this.pixel_y = 0;
					return 1;
				} else {
					possible_port = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Unary_PortablesConnector), this.loc );

					if ( Lang13.Bool( possible_port ) ) {
						
						if ( this.connect( possible_port ) ) {
							GlobalFuncs.to_chat( b, "<span class='notice'>You connect " + this.name + " to the port.</span>" );
							S = Lang13.FindIn( typeof(Gas_SleepingAgent), this.air_contents.trace_gases );

							if ( Convert.ToDouble( this.air_contents.toxins ) > 0 || S is Gas_SleepingAgent ) {
								GlobalFuncs.log_admin( "" + Task13.User + "(" + String13.CKey( Task13.User.key ) + ") connected a canister that contains [" + ( Convert.ToDouble( this.air_contents.toxins ) > 0 ? "Toxins" : "" ) + " " + ( S is Gas_SleepingAgent ? " N2O" : "" ) + "] to a connector_port at " + this.loc.x + ", " + this.loc.y + ", " + this.loc.z );
							}
							this.update_icon();
							this.pixel_x = Convert.ToInt32( possible_port.pixel_x );
							this.pixel_y = Convert.ToInt32( possible_port.pixel_y );
							return 1;
						} else {
							GlobalFuncs.to_chat( b, "<span class='notice'>" + this.name + " failed to connect to the port.</span>" );
							return 0;
						}
					} else {
						
						if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
							return 1;
						}
						GlobalFuncs.to_chat( b, "<span class='notice'>Nothing happens.</span>" );
						return 0;
					}
				}
			}

			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			} else if ( a is Obj_Item_Device_Analyzer && Map13.GetDistance( b, this ) <= 1 ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='attack'>" ).item( b ).str( " has used " ).item( a ).str( " on " ).icon( icon ).str( " " ).item( this ).str( "</span>" ).ToString(), new Txt( "<span class='attack'>You use " ).the( a ).item().str( " on " ).icon( icon ).str( " " ).item( this ).str( "</span>" ).ToString() );
				analyzer = a;
				b.show_message( ((Obj_Item_Device_Analyzer)analyzer).output_gas_scan( this.air_contents, this, false ), 1 );
				this.add_fingerprint( b );
				return null;
			}
			return null;
		}

		// Function from file: portable_atmospherics.dm
		public void eject_holding(  ) {
			((Ent_Dynamic)this.holding).forceMove( this.loc );
			this.holding = null;
			return;
		}

		// Function from file: portable_atmospherics.dm
		public bool disconnect(  ) {
			dynamic network = null;

			
			if ( !Lang13.Bool( this.connected_port ) ) {
				return false;
			}
			network = this.connected_port.return_network( this );

			if ( Lang13.Bool( network ) ) {
				network.gases.Remove( this.air_contents );
			}
			this.anchored = 0;
			this.connected_port.connected_device = null;
			this.connected_port = null;
			return true;
		}

		// Function from file: portable_atmospherics.dm
		public bool connect( dynamic new_port = null ) {
			dynamic network = null;

			
			if ( Lang13.Bool( this.connected_port ) || !Lang13.Bool( new_port ) || new_port.connected_device != null ) {
				return false;
			}

			if ( new_port.loc != this.loc ) {
				return false;
			}
			this.connected_port = new_port;
			this.connected_port.connected_device = this;
			this.anchored = 1;
			network = this.connected_port.return_network( this );

			if ( Lang13.Bool( network ) && !( network.gases.Find( this.air_contents ) != 0 ) ) {
				network.gases.Add( this.air_contents );
				network.update = 1;
			}
			return true;
		}

		// Function from file: portable_atmospherics.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			return null;
		}

		// Function from file: portable_atmospherics.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalFuncs.qdel( this.air_contents );
			this.air_contents = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: portable_atmospherics.dm
		public override dynamic process(  ) {
			
			if ( !Lang13.Bool( this.connected_port ) ) {
				this.air_contents.react();
			} else {
				this.update_icon();
			}
			return null;
		}

		// Function from file: portable_atmospherics.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			bool _default = false;

			dynamic port = null;

			_default = base.initialize( suppress_icon_check );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				port = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Unary_PortablesConnector), this.loc );

				if ( Lang13.Bool( port ) ) {
					this.connect( port );
					this.update_icon();
				}
				return;
			}));
			return _default;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}