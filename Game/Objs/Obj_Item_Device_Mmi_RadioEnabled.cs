// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Mmi_RadioEnabled : Obj_Item_Device_Mmi {

		public Obj_Item_Device_Radio radio = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "biotech=4";
		}

		// Function from file: MMI.dm
		public Obj_Item_Device_Mmi_RadioEnabled ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.radio = new Obj_Item_Device_Radio(  );
			this.radio.broadcasting = 0;
			return;
		}

		// Function from file: MMI.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			GlobalFuncs.qdel( this.radio );
			this.radio = null;
			return null;
		}

		// Function from file: MMI.dm
		[Verb]
		[VerbInfo( desc: "Toggle listening channel on or off.", group: "MMI", access: VerbAccess.InUserLocation )]
		public void Toggle_Listening(  ) {
			
			if ( Lang13.Bool( this.brainmob.stat ) ) {
				GlobalFuncs.to_chat( this.brainmob, "Can't do that while incapacitated or dead." );
			}
			this.radio.listening = ( this.radio.listening == 1 ? false : true ) ?1:0;
			GlobalFuncs.to_chat( this.brainmob, "<span class='notice'>Radio is " + this.radio + " receiving broadcast.</span>" );
			return;
		}

		// Function from file: MMI.dm
		[Verb]
		[VerbInfo( desc: "Toggle broadcasting channel on or off.", group: "MMI", access: VerbAccess.InUserLocation )]
		public void Toggle_Broadcasting(  ) {
			
			if ( Lang13.Bool( this.brainmob.stat ) ) {
				GlobalFuncs.to_chat( this.brainmob, "Can't do that while incapacitated or dead." );
			}
			this.radio.broadcasting = ( this.radio.broadcasting == 1 ? false : true ) ?1:0;
			GlobalFuncs.to_chat( this.brainmob, "<<span class='notice'>Radio is " + ( this.radio.broadcasting == 1 ? "now" : "no longer" ) + " broadcasting.</span>" );
			return;
		}

	}

}