// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun : Obj_Item_Weapon {

		public string fire_sound = "sound/weapons/Gunshot.ogg";
		public dynamic in_chamber = null;
		public ByTable caliber = null;
		public dynamic silenced = 0;
		public int? recoil = 0;
		public bool ejectshell = true;
		public bool clumsy_check = true;
		public ByTable target = null;
		public int lock_time = -100;
		public bool mouthshoot = false;
		public bool automatic = false;
		public Mob_Living last_moved_mob = null;
		public bool told_cant_shoot = false;
		public bool firerate = true;
		public dynamic fire_delay = 2;
		public int last_fired = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "gun";
			this.slot_flags = 512;
			this.starting_materials = new ByTable().Set( "$iron", 2000 );
			this.w_type = 4;
			this.throwforce = 5;
			this.throw_speed = 4;
			this.throw_range = 5;
			this.force = 5;
			this.origin_tech = "combat=1";
			this.attack_verb = new ByTable(new object [] { "struck", "hit", "bashed" });
			this.mech_flags = 2;
			this.min_harm_label = 20;
			this.harm_label_examine = new ByTable(new object [] { 
				"<span class='info'>A label is stuck to the trigger, but it is too small to get in the way.</span>", 
				"<span class='warning'>A label firmly sticks the trigger to the guard!</span>"
			 });
			this.icon = "icons/obj/gun.dmi";
			this.icon_state = "detective";
		}

		public Obj_Item_Weapon_Gun ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: targeting.dm
		public override dynamic equipped( dynamic user = null, dynamic slot = null ) {
			
			if ( slot != 4 && slot != 5 ) {
				this.stop_aim();

				if ( Lang13.Bool( user.client ) ) {
					((Client)user.client).remove_gun_icons();
				}
			}
			return base.equipped( (object)(user), (object)(slot) );
		}

		// Function from file: targeting.dm
		public override dynamic dropped( dynamic user = null ) {
			this.stop_aim();

			if ( Lang13.Bool( user.client ) ) {
				((Client)user.client).remove_gun_icons();
			}
			return base.dropped( (object)(user) );
		}

		// Function from file: targeting.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.__CallVerb("Lower Aim" );
			return null;
		}

		// Function from file: gun.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic suicidesound = null;

			
			if ( M == user && ((dynamic)user.zone_sel).selecting == "mouth" && !this.mouthshoot ) {
				
				if ( M.wear_mask is Obj_Item_Clothing_Mask_Happy ) {
					GlobalFuncs.to_chat( M, "<span class='sinister'>BUT WHY? I'M SO HAPPY!</span>" );
					return null;
				}
				this.mouthshoot = true;
				((Ent_Static)M).visible_message( "<span class='warning'>" + user + " sticks their gun in their mouth, ready to pull the trigger...</span>" );

				if ( !GlobalFuncs.do_after( user, this, 40 ) ) {
					((Ent_Static)M).visible_message( "<span class='notice'>" + user + " decided life was worth living</span>" );
					this.mouthshoot = false;
					return null;
				}

				if ( this.process_chambered() ) {
					((Ent_Static)user).visible_message( "<span class = 'warning'>" + user + " pulls the trigger.</span>" );

					if ( Lang13.Bool( this.silenced ) ) {
						GlobalFuncs.playsound( user, this.fire_sound, 10, 1 );
					} else {
						GlobalFuncs.playsound( user, this.fire_sound, 50, 1 );
					}
					((Obj_Item_Projectile)this.in_chamber).on_hit( M );

					if ( !this.in_chamber.nodamage ) {
						((Mob_Living)user).apply_damage( this.in_chamber.damage * 2.5, this.in_chamber.damage_type, "head", null, null, null, new Txt( "Point blank shot in the mouth with " ).a( this.in_chamber ).item().ToString() );
						user.stat = 2;
						((Mob)user).death();
						suicidesound = Rand13.Pick(new object [] { "sound/misc/suicide/suicide1.ogg", "sound/misc/suicide/suicide2.ogg", "sound/misc/suicide/suicide3.ogg", "sound/misc/suicide/suicide4.ogg", "sound/misc/suicide/suicide5.ogg", "sound/misc/suicide/suicide6.ogg" });
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), Rand13.PickFromTable( suicidesound ), 10, null, null, null, null, 125 );
					} else {
						GlobalFuncs.to_chat( user, "<span class = 'notice'>Ow...</span>" );
						((Mob_Living)user).apply_effect( 110, "agony", 0 );
					}
					GlobalFuncs.qdel( this.in_chamber );
					this.in_chamber = null;
					this.mouthshoot = false;
					return null;
				} else {
					this.click_empty( user );
					this.mouthshoot = false;
					return null;
				}
			}

			if ( this.process_chambered() ) {
				
				if ( user.a_intent == "hurt" ) {
					((Ent_Static)user).visible_message( new Txt( "<span class='danger'> " ).The( user ).item().str( " fires " ).the( this ).item().str( " point blank at " ).item( M ).str( "!</span>" ).ToString() );
					this.in_chamber.damage *= 121;
					this.Fire( M, user, 0, false, true );
					return null;
				} else {
					Interface13.Stat( null, this.target.Contains( this.target != null && Lang13.Bool( M ) ) );

					if ( user.a_intent == "hurt" ) {
						this.Fire( M, user, 0, false, true );
						return null;
					} else {
						return base.attack( (object)(M), (object)(user), def_zone, eat_override );
					}
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: gun.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			struggle = struggle ?? false;

			
			if ( flag == true ) {
				return false;
			}

			if ( this.harm_labeled >= this.min_harm_label ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>A label sticks the trigger to the trigger guard!</span>" );
				return false;
			}

			if ( this.target is Obj_Machinery_Recharger && this is Obj_Item_Weapon_Gun_Energy ) {
				return false;
			}

			if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) && user.client.gun_mode && !false ) {
				this.PreFire( A, user, _params, struggle );
			} else {
				this.Fire( A, user, _params, null, struggle );
			}
			return false;
		}

		// Function from file: gun.dm
		public override dynamic emp_act( int severity = 0 ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				
				O.emp_act( severity );
			}
			return null;
		}

		// Function from file: targeting.dm
		public void TargetActed( Mob_Living T = null ) {
			Ent_Static M = null;
			dynamic firing_check = null;

			M = this.loc;

			if ( M == T ) {
				return;
			}

			if ( !( M is Mob_Living ) ) {
				return;
			}

			if ( this != ((Mob)M).get_active_hand() ) {
				this.stop_aim();
				return;
			}
			((dynamic)M).last_move_intent = Game13.time;

			if ( this.can_fire() != 0 ) {
				firing_check = this.can_hit( T, Task13.User );

				if ( Convert.ToDouble( firing_check ) > 0 ) {
					
					if ( firing_check == 1 ) {
						this.Fire( T, Task13.User, null, true );
					}
				} else if ( !this.told_cant_shoot ) {
					GlobalFuncs.to_chat( M, "<span class='warning'>They can't be hit from here!</span>" );
					this.told_cant_shoot = true;
					Task13.Schedule( 30, (Task13.Closure)(() => {
						this.told_cant_shoot = false;
						return;
					}));
				}
			} else {
				this.click_empty( M );
			}
			Task13.User.dir = GlobalFuncs.get_cardinal_dir( this, T );

			if ( !this.firerate ) {
				T.NotTargeted( this );
			}
			return;
		}

		// Function from file: targeting.dm
		public void Aim( dynamic M = null ) {
			Mob_Living L = null;

			
			if ( !( this.target != null ) || !false ) {
				this.lock_time = Game13.time;

				if ( this.target != null && !this.automatic ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.target, typeof(Mob_Living) )) {
						L = _a;
						

						if ( L != null ) {
							L.NotTargeted( this );
						}
					}
					GlobalFuncs.qdel( this.target );
					this.target = null;
					Task13.User.visible_message( new Txt( "<span class='danger'>" ).item( Task13.User ).str( " turns " ).the( this ).item().str( " on " ).item( M ).str( "!</span>" ).ToString() );
				} else {
					Task13.User.visible_message( new Txt( "<span class='danger'>" ).item( Task13.User ).str( " aims " ).a( this ).item().str( " at " ).item( M ).str( "!</span>" ).ToString() );
				}
				((Mob_Living)M).Targeted( this );
			}
			return;
		}

		// Function from file: targeting.dm
		public void PreFire( dynamic A = null, dynamic user = null, dynamic _params = null, bool? struggle = null ) {
			struggle = struggle ?? false;

			dynamic M = null;

			
			if ( this.lock_time > Game13.time - 2 ) {
				return;
			}

			if ( A is Mob && A is Mob_Living && !false ) {
				this.Aim( A );
			} else {
				M = GlobalFuncs.GunTrace( Task13.User.x, Task13.User.y, Convert.ToInt32( A.x ), Convert.ToInt32( A.y ), Task13.User.z, Task13.User );
				Interface13.Stat( null, ((dynamic)( Map13.FetchInView( null, user ) != null && !false )).Contains( Lang13.Bool( M ) && M is Mob_Living && Lang13.Bool( M ) ) );

				if ( A is Mob && A is Mob_Living && !false ) {
					this.Aim( M );
				} else if ( !( M is Mob ) || M is Mob && !false ) {
					this.Fire( A, user, _params, null, struggle );
				}
			}
			Task13.User.dir = GlobalFuncs.get_cardinal_dir( this, A );
			return;
		}

		// Function from file: targeting.dm
		public void stop_aim(  ) {
			Mob_Living M = null;

			
			if ( this.target != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.target, typeof(Mob_Living) )) {
					M = _a;
					

					if ( M != null ) {
						M.NotTargeted( this );
					}
				}
				GlobalFuncs.qdel( this.target );
				this.target = null;
			}
			return;
		}

		// Function from file: gun.dm
		public void click_empty( dynamic user = null ) {
			
			if ( Lang13.Bool( user ) ) {
				((Ent_Static)user).visible_message( "*click click*", "<span class='danger'>*click*</span>" );
				GlobalFuncs.playsound( user, "sound/weapons/empty.ogg", 100, 1 );
			} else {
				this.visible_message( "*click click*" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/empty.ogg", 100, 1 );
			}
			return;
		}

		// Function from file: gun.dm
		public virtual dynamic can_hit( Mob_Living target = null, Mob user = null ) {
			return ((Obj_Item_Projectile)this.in_chamber).check_fire( target, user );
		}

		// Function from file: gun.dm
		public virtual int can_fire(  ) {
			return this.process_chambered() ?1:0;
		}

		// Function from file: gun.dm
		public virtual void Fire( dynamic target = null, dynamic user = null, dynamic _params = null, bool? reflex = null, bool? struggle = null ) {
			reflex = reflex ?? false;
			struggle = struggle ?? false;

			dynamic M = null;
			dynamic M2 = null;
			dynamic H = null;
			dynamic a_hand = null;
			Ent_Static curloc = null;
			dynamic targloc = null;
			int direction = 0;
			dynamic B = null;
			int movementdirection = 0;
			ByTable mouse_control = null;

			
			if ( this.clumsy_check ) {
				
				if ( user is Mob_Living ) {
					M = user;
					Interface13.Stat( null, M.mutations.Contains( 5 ) );

					if ( false && Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.to_chat( M, "<span class='danger'>" + this + " blows up in your face.</span>" );
						((Mob_Living)M).take_organ_damage( 0, 20 );
						new ByTable().Set( 1, this ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( M, "drop_item" ) );
						GlobalFuncs.qdel( this );
						return;
					}
				}
			}

			if ( !Lang13.Bool( ((Mob)user).IsAdvancedToolUser() ) || user is Mob_Living_Silicon_Robot_Mommi || user is Mob_Living_Carbon_Monkey_Diona ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return;
			}

			if ( user is Mob_Living ) {
				M2 = user;
				Interface13.Stat( null, M2.mutations.Contains( 4 ) );

				if ( false ) {
					GlobalFuncs.to_chat( M2, "<span class='warning'>Your meaty finger is much too large for the trigger guard!</span>" );
					return;
				}
			}

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( Lang13.Bool( user.dna ) && ( user.dna.mutantrace == "adamantine" || user.dna.mutantrace == "coalgolem" ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Your fat fingers don't fit in the trigger guard!</span>" );
					return;
				}
				a_hand = ((Mob)H).get_active_hand_organ();

				if ( !((Organ_External)a_hand).can_use_advanced_tools() ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Your " + a_hand + " doesn't have the dexterity to do this!</span>" );
					return;
				}
			}
			this.add_fingerprint( user );
			curloc = user.loc;
			targloc = GlobalFuncs.get_turf( target );

			if ( !( targloc is Tile ) || !( curloc is Tile ) ) {
				return;
			}

			if ( !this.special_check( user ) ) {
				return;
			}

			if ( !this.ready_to_fire() ) {
				
				if ( Game13.time % 3 != 0 ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>" + this + " is not ready to fire again!" );
				}
				return;
			}

			if ( !this.process_chambered() ) {
				this.click_empty( user ); return;
			}

			if ( !Lang13.Bool( this.in_chamber ) ) {
				return;
			}

			if ( !( this is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) && !( this is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) ) {
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + new Txt().item( user.name ).str( " (" ).item( user.ckey ).str( ") fired " ).the( this ).item().str( " (proj:" ).item( this.in_chamber.name ).str( ") at " ).item( target ).str( " " ).item( ( target is Mob ? "(" + target.ckey + ")" : "" ) ).str( " (" ).item( target.x ).str( "," ).item( target.y ).str( "," ).item( target.z ).str( ")" ).item( ( struggle == true ? " due to being disarmed." : "" ) ).ToString() ) );
			}
			this.in_chamber.firer = user;

			if ( user.zone_sel != null ) {
				this.in_chamber.def_zone = ((dynamic)user.zone_sel).selecting;
			} else {
				this.in_chamber.def_zone = "chest";
			}

			if ( targloc == curloc ) {
				((Ent_Static)user).bullet_act( this.in_chamber );
				GlobalFuncs.qdel( this.in_chamber );
				this.in_chamber = null;
				this.update_icon();
				return;
			}

			if ( Lang13.Bool( this.recoil ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.shake_camera( user, ( this.recoil ??0) + 1, this.recoil );
					return;
				}));

				if ( Lang13.Bool( user.locked_to ) && user.locked_to is Obj && !Lang13.Bool( user.locked_to.anchored ) ) {
					direction = Map13.GetDistance( user, target );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						B = user.locked_to;
						movementdirection = Num13.Rotate( direction, 180 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 1 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 1 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 1 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 2 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 2 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 3 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 3 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						Task13.Sleep( 3 );
						B.Move( Map13.GetStep( user, movementdirection ), movementdirection );
						return;
					}));
				}

				if ( user.loc is Tile_Space || user.areaMaster.has_gravity == false ) {
					user.inertia_dir = Map13.GetDistance( target, user );
					Map13.Step( user, Convert.ToInt32( user.inertia_dir ) );
				}
			}

			if ( Lang13.Bool( this.silenced ) ) {
				GlobalFuncs.playsound( user, this.fire_sound, 10, 1 );
			} else {
				GlobalFuncs.playsound( user, this.fire_sound, 50, 1 );
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " fires " + this + ( reflex == true ? " by reflex" : "" ) + "!</span>", "<span class='warning'>You fire " + this + ( reflex == true ? "by reflex" : "" ) + "!</span>", "You hear a " + ( this.in_chamber is Obj_Item_Projectile_Beam ? "laser blast" : "gunshot" ) + "!" );
			}
			this.in_chamber.original = target;
			this.in_chamber.loc = GlobalFuncs.get_turf( user );
			this.in_chamber.starting = GlobalFuncs.get_turf( user );
			this.in_chamber.shot_from = this;
			((Mob)user).delayNextAttack( 4 );
			this.in_chamber.silenced = this.silenced;
			this.in_chamber.current = curloc;
			((Obj_Item_Projectile)this.in_chamber).OnFired();
			this.in_chamber.yo = Convert.ToDouble( targloc.y - curloc.y );
			this.in_chamber.xo = Convert.ToDouble( targloc.x - curloc.x );
			this.in_chamber.inaccurate = user.locked_to is Obj_Structure_Bed_Chair_Vehicle;

			if ( Lang13.Bool( _params ) ) {
				mouse_control = String13.ParseUrlParams( _params );

				if ( Lang13.Bool( mouse_control["icon-x"] ) ) {
					this.in_chamber.p_x = String13.ParseNumber( mouse_control["icon-x"] );
				}

				if ( Lang13.Bool( mouse_control["icon-y"] ) ) {
					this.in_chamber.p_y = String13.ParseNumber( mouse_control["icon-y"] );
				}
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( Lang13.Bool( this.in_chamber ) ) {
					this.in_chamber.process();
				}
				return;
			}));
			Task13.Sleep( 1 );
			this.in_chamber = null;
			this.update_icon();

			if ( user.hand == true ) {
				((Mob)user).update_inv_l_hand();
			} else {
				((Mob)user).update_inv_r_hand();
			}
			return;
		}

		// Function from file: gun.dm
		public virtual bool isHandgun(  ) {
			return true;
		}

		// Function from file: gun.dm
		public virtual bool special_check( dynamic M = null ) {
			return true;
		}

		// Function from file: gun.dm
		public virtual bool process_chambered(  ) {
			return false;
		}

		// Function from file: gun.dm
		public bool ready_to_fire(  ) {
			
			if ( Game13.time >= this.last_fired + Convert.ToDouble( this.fire_delay ) ) {
				this.last_fired = Game13.time;
				return true;
			} else {
				return false;
			}
		}

		// Function from file: targeting.dm
		[Verb]
		[VerbInfo( name: "Lower Aim", group: "Object" )]
		public void lower_aim(  ) {
			
			if ( this.target != null ) {
				this.stop_aim();
				Task13.User.visible_message( new Txt( "<span class='notice'>" ).The( Task13.User ).item().str( " lowers " ).the( this ).item().str( "...</span>" ).ToString() );
			}
			return;
		}

		// Function from file: targeting.dm
		[Verb]
		[VerbInfo( name: "Toggle Firerate", group: "Object" )]
		public void toggle_firerate(  ) {
			this.firerate = !this.firerate;

			if ( !this.firerate ) {
				GlobalFuncs.to_chat( this.loc, "You will now continue firing when your target moves." );
			} else {
				GlobalFuncs.to_chat( this.loc, "You will now only fire once, then lower your aim, when your target moves." );
			}
			return;
		}

	}

}