// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Apc : Obj_Machinery_Power {

		public dynamic area = null;
		public dynamic areastring = null;
		public dynamic cell = null;
		public int start_charge = 90;
		public int cell_type = 2500;
		public int opened = 0;
		public int? shorted = 0;
		public double? lighting = 3;
		public double? equipment = 3;
		public double? environ = 3;
		public bool operating = true;
		public int charging = 0;
		public bool chargemode = true;
		public int chargecount = 0;
		public int? locked = 1;
		public bool coverlocked = true;
		public int? aidisabled = 0;
		public int tdir = 0;
		public Obj_Machinery_Power_Terminal terminal = null;
		public dynamic lastused_light = 0;
		public dynamic lastused_equip = 0;
		public dynamic lastused_environ = 0;
		public dynamic lastused_total = 0;
		public int main_status = 0;
		public int? malfhack = 0;
		public dynamic malfai = null;
		public int has_electronics = 0;
		public int overload = 1;
		public int beenhit = 0;
		public Mob_Living_Silicon_Ai occupier = null;
		public int longtermpower = 10;
		public bool auto_name = false;
		public int update_state = -1;
		public int update_overlay = -1;
		public bool status_overlays = false;
		public bool updating_icon = false;
		public dynamic status_overlays_lock = null;
		public dynamic status_overlays_charging = null;
		public dynamic status_overlays_equipment = null;
		public dynamic status_overlays_lighting = null;
		public dynamic status_overlays_environ = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 11 });
			this.powernet = 0;
			this.icon_state = "apc0";
		}

		// Function from file: apc.dm
		public Obj_Machinery_Power_Apc ( dynamic loc = null, dynamic ndir = null, bool? building = null ) : base( (object)(loc) ) {
			building = building ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.apcs_list.Add( this );
			this.wires = new Wires_Apc( this );

			if ( building == true ) {
				this.dir = Convert.ToInt32( ndir );
			}
			this.tdir = this.dir;
			this.dir = ((int)( GlobalVars.SOUTH ));

			if ( this.auto_name ) {
				this.name = "" + GlobalFuncs.get_area( this ) + " APC";
			}
			this.pixel_x = ( ( this.tdir & 3 ) != 0 ? 0 : ( this.tdir == 4 ? 24 : -24 ) );
			this.pixel_y = ( ( this.tdir & 3 ) != 0 ? ( this.tdir == 1 ? 24 : -24 ) : 0 );

			if ( building == false ) {
				this.init();
			} else {
				this.area = ((dynamic)this.loc.loc).master;
				this.opened = 1;
				this.operating = false;
				this.name = "" + this.area.name + " APC";
				this.stat |= 8;
				this.update_icon();
				Task13.Schedule( 5, (Task13.Closure)(() => {
					this.update();
					return;
				}));
			}
			return;
		}

		// Function from file: terminal.dm
		public override bool can_terminal_dismantle(  ) {
			bool _default = false;

			_default = false;

			if ( this.opened != 0 && this.has_electronics != 2 ) {
				_default = true;
			}
			return _default;
		}

		// Function from file: apc.dm
		public override void disconnect_terminal(  ) {
			
			if ( this.terminal != null ) {
				this.terminal.master = null;
				this.terminal = null;
			}
			return;
		}

		// Function from file: apc.dm
		public override bool blob_act( dynamic severity = null ) {
			this.set_broken();
			return false;
		}

		// Function from file: apc.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			if ( !Lang13.Bool( this.gc_destroyed ) ) {
				
				switch ((int?)( severity )) {
					case 2:
						
						if ( Rand13.PercentChance( 50 ) ) {
							this.set_broken();
						}
						break;
					case 3:
						
						if ( Rand13.PercentChance( 25 ) ) {
							this.set_broken();
						}
						break;
				}
			}
			return false;
		}

		// Function from file: apc.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.cell ) ) {
				((Ent_Static)this.cell).emp_act( severity );
			}

			if ( this.occupier != null ) {
				this.occupier.emp_act( severity );
			}
			this.lighting = 0;
			this.equipment = 0;
			this.environ = 0;
			this.update_icon();
			this.update();
			GlobalFuncs.addtimer( this, "reset", 600, GlobalVars.FALSE, "emp" );
			base.emp_act( severity );
			return 0;
		}

		// Function from file: apc.dm
		public override int? process( dynamic seconds = null ) {
			double? last_lt = null;
			double? last_eq = null;
			double? last_en = null;
			int last_ch = 0;
			dynamic excess = null;
			double cellused = 0;
			double ch = 0;

			
			if ( ( this.stat & 9 ) != 0 ) {
				return null;
			}

			if ( !this.area.requires_power ) {
				return null;
			}
			this.lastused_light = ((Zone)this.area).usage( 6 );
			this.lastused_light += ((Zone)this.area).usage( 2 );
			this.lastused_equip = ((Zone)this.area).usage( 1 );
			this.lastused_equip += ((Zone)this.area).usage( 5 );
			this.lastused_environ = ((Zone)this.area).usage( 3 );
			this.lastused_environ += ((Zone)this.area).usage( 7 );
			((Zone)this.area).clear_usage();
			this.lastused_total = this.lastused_light + this.lastused_equip + this.lastused_environ;
			last_lt = this.lighting;
			last_eq = this.equipment;
			last_en = this.environ;
			last_ch = this.charging;
			excess = this.surplus();

			if ( !Lang13.Bool( this.avail() ) ) {
				this.main_status = 0;
			} else if ( Convert.ToDouble( excess ) < 0 ) {
				this.main_status = 1;
			} else {
				this.main_status = 2;
			}

			if ( Lang13.Bool( this.cell ) && !Lang13.Bool( this.shorted ) ) {
				cellused = Num13.MinInt( Convert.ToInt32( this.cell.charge ), ((int)( GlobalVars.CELLRATE * Convert.ToDouble( this.lastused_total ) )) );
				this.cell.use( cellused );

				if ( Convert.ToDouble( excess ) > Convert.ToDouble( this.lastused_total ) ) {
					this.cell.give( cellused );
					this.add_load( cellused / GlobalVars.CELLRATE );
				} else if ( Convert.ToDouble( this.cell.charge / GlobalVars.CELLRATE + excess ) >= Convert.ToDouble( this.lastused_total ) ) {
					this.cell.charge = Num13.MinInt( ((int)( this.cell.maxcharge ??0 )), Convert.ToInt32( this.cell.charge + GlobalVars.CELLRATE * Convert.ToDouble( excess ) ) );
					this.add_load( excess );
					this.charging = 0;
				} else {
					this.charging = 0;
					this.chargecount = 0;
					this.equipment = this.autoset( this.equipment, 0 );
					this.lighting = this.autoset( this.lighting, 0 );
					this.environ = this.autoset( this.environ, 0 );
				}

				if ( this.charging != 0 && this.longtermpower < 10 ) {
					this.longtermpower += 1;
				} else if ( this.longtermpower > -10 ) {
					this.longtermpower -= 2;
				}

				if ( Convert.ToDouble( this.cell.charge ) <= 0 ) {
					this.equipment = this.autoset( this.equipment, 0 );
					this.lighting = this.autoset( this.lighting, 0 );
					this.environ = this.autoset( this.environ, 0 );
					((Zone)this.area).poweralert( false, this );
				} else if ( ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent() < 15 && this.longtermpower < 0 ) {
					this.equipment = this.autoset( this.equipment, 2 );
					this.lighting = this.autoset( this.lighting, 2 );
					this.environ = this.autoset( this.environ, 1 );
					((Zone)this.area).poweralert( false, this );
				} else if ( ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent() < 30 && this.longtermpower < 0 ) {
					this.equipment = this.autoset( this.equipment, 2 );
					this.lighting = this.autoset( this.lighting, 1 );
					this.environ = this.autoset( this.environ, 1 );
					((Zone)this.area).poweralert( false, this );
				} else {
					this.equipment = this.autoset( this.equipment, 1 );
					this.lighting = this.autoset( this.lighting, 1 );
					this.environ = this.autoset( this.environ, 1 );
					((Zone)this.area).poweralert( true, this );

					if ( ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent() > 75 ) {
						((Zone)this.area).poweralert( true, this );
					}
				}

				if ( this.chargemode && this.charging == 1 && this.operating ) {
					
					if ( Convert.ToDouble( excess ) > 0 ) {
						ch = Num13.MinInt( Convert.ToInt32( excess * GlobalVars.CELLRATE ), ((int)( ( this.cell.maxcharge ??0) * GlobalVars.CHARGELEVEL )) );
						this.add_load( ch / GlobalVars.CELLRATE );
						this.cell.give( ch );
					} else {
						this.charging = 0;
						this.chargecount = 0;
					}
				}

				if ( Convert.ToDouble( this.cell.charge ) >= ( this.cell.maxcharge ??0) ) {
					this.cell.charge = this.cell.maxcharge;
					this.charging = 2;
				}

				if ( this.chargemode ) {
					
					if ( !( this.charging != 0 ) ) {
						
						if ( Convert.ToDouble( excess ) > ( this.cell.maxcharge ??0) * GlobalVars.CHARGELEVEL ) {
							this.chargecount++;
						} else {
							this.chargecount = 0;
						}

						if ( this.chargecount == 10 ) {
							this.chargecount = 0;
							this.charging = 1;
						}
					}
				} else {
					this.charging = 0;
					this.chargecount = 0;
				}
			} else {
				this.charging = 0;
				this.chargecount = 0;
				this.equipment = this.autoset( this.equipment, 0 );
				this.lighting = this.autoset( this.lighting, 0 );
				this.environ = this.autoset( this.environ, 0 );
				((Zone)this.area).poweralert( false, this );
			}

			if ( last_lt != this.lighting || last_eq != this.equipment || last_en != this.environ ) {
				this.queue_icon_update();
				this.update();
			} else if ( last_ch != this.charging ) {
				this.queue_icon_update();
			}
			return null;
		}

		// Function from file: apc.dm
		public override dynamic avail(  ) {
			
			if ( this.terminal != null ) {
				return this.terminal.avail();
			} else {
				return 0;
			}
		}

		// Function from file: apc.dm
		public override void add_load( dynamic amount = null ) {
			
			if ( this.terminal != null && Lang13.Bool( this.terminal.powernet ) ) {
				this.terminal.powernet.load += amount;
			}
			return;
		}

		// Function from file: apc.dm
		public override dynamic surplus(  ) {
			
			if ( this.terminal != null ) {
				return this.terminal.surplus();
			} else {
				return 0;
			}
		}

		// Function from file: apc.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) || !Lang13.Bool( this.can_use( Task13.User, true ) ) || Lang13.Bool( this.locked ) && !Task13.User.has_unlimited_silicon_privilege ) {
				return _default;
			}

			switch ((string)( action )) {
				case "lock":
					
					if ( Task13.User.has_unlimited_silicon_privilege ) {
						
						if ( Lang13.Bool( this.emagged ) || ( this.stat & 9 ) != 0 ) {
							Task13.User.WriteMsg( "The APC does not respond to the command." );
						} else {
							this.locked = !Lang13.Bool( this.locked ) ?1:0;
							this.update_icon();
							_default = GlobalVars.TRUE;
						}
					}
					break;
				case "cover":
					this.coverlocked = !this.coverlocked;
					_default = GlobalVars.TRUE;
					break;
				case "breaker":
					this.toggle_breaker();
					_default = GlobalVars.TRUE;
					break;
				case "charge":
					this.chargemode = !this.chargemode;

					if ( !this.chargemode ) {
						this.charging = 0;
						this.update_icon();
					}
					_default = GlobalVars.TRUE;
					break;
				case "channel":
					
					if ( Lang13.Bool( _params["eqp"] ) ) {
						this.equipment = this.setsubsystem( String13.ParseNumber( _params["eqp"] ) );
						this.update_icon();
						this.update();
					} else if ( Lang13.Bool( _params["lgt"] ) ) {
						this.lighting = this.setsubsystem( String13.ParseNumber( _params["lgt"] ) );
						this.update_icon();
						this.update();
					} else if ( Lang13.Bool( _params["env"] ) ) {
						this.environ = this.setsubsystem( String13.ParseNumber( _params["env"] ) );
						this.update_icon();
						this.update();
					}
					_default = GlobalVars.TRUE;
					break;
				case "overload":
					
					if ( Task13.User.has_unlimited_silicon_privilege ) {
						this.overload_lighting();
						_default = GlobalVars.TRUE;
					}
					break;
				case "hack":
					
					if ( this.get_malf_status( Task13.User ) != 0 ) {
						this.f_malfhack( Task13.User );
					}
					break;
				case "occupy":
					
					if ( this.get_malf_status( Task13.User ) != 0 ) {
						this.malfoccupy( Task13.User );
					}
					break;
				case "deoccupy":
					
					if ( this.get_malf_status( Task13.User ) != 0 ) {
						this.malfvacate();
					}
					break;
			}
			return _default;
		}

		// Function from file: apc.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable()
				.Set( "locked", this.locked )
				.Set( "isOperating", this.operating )
				.Set( "externalPower", this.main_status )
				.Set( "powerCellStatus", ( Lang13.Bool( this.cell ) ? ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent() : 0 ) )
				.Set( "chargeMode", this.chargemode )
				.Set( "chargingStatus", this.charging )
				.Set( "totalLoad", this.lastused_total )
				.Set( "coverLocked", this.coverlocked )
				.Set( "siliconUser", user.has_unlimited_silicon_privilege )
				.Set( "malfStatus", this.get_malf_status( user ) )
				.Set( "powerChannels", new ByTable(new object [] { 
					new ByTable()
						.Set( "title", "Equipment" )
						.Set( "powerLoad", this.lastused_equip )
						.Set( "status", this.equipment )
						.Set( "topicParams", new ByTable().Set( "auto", new ByTable().Set( "eqp", 3 ) ).Set( "on", new ByTable().Set( "eqp", 2 ) ).Set( "off", new ByTable().Set( "eqp", 1 ) ) )
					, 
					new ByTable()
						.Set( "title", "Lighting" )
						.Set( "powerLoad", this.lastused_light )
						.Set( "status", this.lighting )
						.Set( "topicParams", new ByTable().Set( "auto", new ByTable().Set( "lgt", 3 ) ).Set( "on", new ByTable().Set( "lgt", 2 ) ).Set( "off", new ByTable().Set( "lgt", 1 ) ) )
					, 
					new ByTable()
						.Set( "title", "Environment" )
						.Set( "powerLoad", this.lastused_environ )
						.Set( "status", this.environ )
						.Set( "topicParams", new ByTable().Set( "auto", new ByTable().Set( "env", 3 ) ).Set( "on", new ByTable().Set( "env", 2 ) ).Set( "off", new ByTable().Set( "env", 1 ) ) )
					
				 }) )
			;
			return data;
		}

		// Function from file: apc.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "apc", this.name, 535, 515, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: apc.dm
		public override bool attack_alien( dynamic user = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return false;
			}
			((Mob)user).changeNext_move( 8 );
			((Ent_Dynamic)user).do_attack_animation( this );
			((Ent_Static)user).visible_message( "<span class='danger'>" + user.name + " slashes at the " + this.name + "!</span>", "<span class='notice'>You slash at the " + this.name + "!</span>" );
			GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 100, 1 );

			if ( this.beenhit >= Convert.ToDouble( Rand13.Pick(new object [] { 3, 4 }) ) && this.panel_open != 1 ) {
				this.panel_open = 1;
				this.update_icon();
				this.visible_message( "<span class='danger'>The " + this.name + "'s cover flies open, exposing the wires!</span>" );
			} else if ( this.panel_open == 1 && !Lang13.Bool( ((Wires)this.wires).is_all_cut() ) ) {
				((Wires)this.wires).cut_all();
				this.update_icon();
				this.visible_message( "<span class='danger'>The " + this.name + "'s wires are shredded!</span>" );
			} else {
				this.beenhit += 1;
			}
			return false;
		}

		// Function from file: apc.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}

			if ( Task13.User == a && this.opened != 0 && !( a is Mob_Living_Silicon ) ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					((Mob)a).put_in_hands( this.cell );
					((Ent_Static)this.cell).add_fingerprint( a );
					this.cell.updateicon();
					this.cell = null;
					((Ent_Static)a).visible_message( "" + a.name + " removes the power cell from " + this.name + "!", "<span class='notice'>You remove the power cell.</span>" );
					this.charging = 0;
					this.update_icon();
				}
				return null;
			}
			base.attack_hand( (object)(a), b, c );
			return null;
		}

		// Function from file: apc.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !Lang13.Bool( this.emagged ) && !Lang13.Bool( this.malfhack ) ) {
				
				if ( this.opened != 0 ) {
					user.WriteMsg( "<span class='warning'>You must close the cover to swipe an ID card!</span>" );
				} else if ( Lang13.Bool( this.panel_open ) ) {
					user.WriteMsg( "<span class='warning'>You must close the panel first!</span>" );
				} else if ( ( this.stat & 9 ) != 0 ) {
					user.WriteMsg( "<span class='warning'>Nothing happens!</span>" );
				} else {
					Icon13.Flick( "apc-spark", this );
					this.emagged = 1;
					this.locked = 0;
					user.WriteMsg( "<span class='notice'>You emag the APC interface.</span>" );
					this.update_icon();
				}
			}
			return false;
		}

		// Function from file: apc.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic C = null;
			dynamic T = null;
			dynamic N = null;
			EffectSystem_SparkSpread s = null;
			dynamic WT = null;

			
			if ( user is Mob_Living_Silicon && Map13.GetDistance( this, user ) > 1 ) {
				return this.attack_hand( user );
			}

			if ( A is Obj_Item_Weapon_Crowbar && this.opened != 0 ) {
				
				if ( this.has_electronics == 1 ) {
					
					if ( this.terminal != null ) {
						user.WriteMsg( "<span class='warning'>Disconnect the wires first!</span>" );
						return null;
					}
					GlobalFuncs.playsound( this.loc, "sound/items/Crowbar.ogg", 50, 1 );
					user.WriteMsg( "<span class='notice'>You are trying to remove the power control board...</span>" );

					if ( GlobalFuncs.do_after( user, 50 / A.toolspeed, null, this ) ) {
						
						if ( this.has_electronics == 1 ) {
							this.has_electronics = 0;

							if ( ( this.stat & 1 ) != 0 || Lang13.Bool( this.malfhack ) ) {
								((Ent_Static)user).visible_message( "" + user.name + " has broken the power control board inside " + this.name + "!", "<span class='notice'>You break the charred power control board and remove the remains.</span>", "<span class='italics'>You hear a crack.</span>" );
							} else {
								((Ent_Static)user).visible_message( "" + user.name + " has removed the power control board from " + this.name + "!", "<span class='notice'>You remove the power control board.</span>" );
								new Obj_Item_Weapon_Electronics_Apc( this.loc );
							}
						}
					}
				} else if ( this.opened != 2 ) {
					this.opened = 0;
					this.update_icon();
				}
			} else if ( A is Obj_Item_Weapon_Crowbar && !( ( this.stat & 1 ) != 0 || Lang13.Bool( this.malfhack ) ) ) {
				
				if ( this.coverlocked && !( ( this.stat & 8 ) != 0 ) ) {
					user.WriteMsg( "<span class='warning'>The cover is locked and cannot be opened!</span>" );
					return null;
				} else {
					this.opened = 1;
					this.update_icon();
				}
			} else if ( A is Obj_Item_Weapon_StockParts_Cell && this.opened != 0 ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					user.WriteMsg( "<span class='warning'>There is a power cell already installed!</span>" );
					return null;
				} else {
					
					if ( ( this.stat & 8 ) != 0 ) {
						user.WriteMsg( "<span class='warning'>There is no connector for your power cell!</span>" );
						return null;
					}

					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					A.loc = this;
					this.cell = A;
					((Ent_Static)user).visible_message( "" + user.name + " has inserted the power cell to " + this.name + "!", "<span class='notice'>You insert the power cell.</span>" );
					this.chargecount = 0;
					this.update_icon();
				}
			} else if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.opened != 0 ) {
					
					if ( Lang13.Bool( this.cell ) ) {
						user.WriteMsg( "<span class='warning'>Close the APC first!</span>" );
						return null;
					} else {
						
						if ( this.has_electronics == 1 && this.terminal != null ) {
							this.has_electronics = 2;
							this.stat &= 65527;
							GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );
							user.WriteMsg( "<span class='notice'>You screw the circuit electronics into place.</span>" );
						} else if ( this.has_electronics == 2 ) {
							this.has_electronics = 1;
							this.stat |= 8;
							GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );
							user.WriteMsg( "<span class='notice'>You unfasten the electronics.</span>" );
						} else {
							user.WriteMsg( "<span class='warning'>There is nothing to secure!</span>" );
							return null;
						}
						this.update_icon();
					}
				} else if ( Lang13.Bool( this.emagged ) ) {
					user.WriteMsg( "<span class='warning'>The interface is broken!</span>" );
				} else {
					this.panel_open = !Lang13.Bool( this.panel_open ) ?1:0;
					user.WriteMsg( "The wires have been " + ( Lang13.Bool( this.panel_open ) ? "exposed" : "unexposed" ) );
					this.update_icon();
				}
			} else if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( Lang13.Bool( this.emagged ) ) {
					user.WriteMsg( "<span class='warning'>The interface is broken!</span>" );
				} else if ( this.opened != 0 ) {
					user.WriteMsg( "<span class='warning'>You must close the cover to swipe an ID card!</span>" );
				} else if ( Lang13.Bool( this.panel_open ) ) {
					user.WriteMsg( "<span class='warning'>You must close the panel!</span>" );
				} else if ( ( this.stat & 9 ) != 0 ) {
					user.WriteMsg( "<span class='warning'>Nothing happens!</span>" );
				} else if ( this.allowed( Task13.User ) && !((Wires)this.wires).is_cut( "idscan" ) ) {
					this.locked = !Lang13.Bool( this.locked ) ?1:0;
					user.WriteMsg( "<span class='notice'>You " + ( Lang13.Bool( this.locked ) ? "lock" : "unlock" ) + " the APC interface.</span>" );
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='warning'>Access denied.</span>" );
				}
			} else if ( A is Obj_Item_Stack_CableCoil && !( this.terminal != null ) && this.opened != 0 && this.has_electronics != 2 ) {
				
				if ( Lang13.Bool( ((dynamic)this.loc).intact ) ) {
					user.WriteMsg( "<span class='warning'>You must remove the floor plating in front of the APC first!</span>" );
					return null;
				}
				C = A;

				if ( ( ((Obj_Item_Stack)C).get_amount() ??0) < 10 ) {
					user.WriteMsg( "<span class='warning'>You need ten lengths of cable for APC!</span>" );
					return null;
				}
				((Ent_Static)user).visible_message( "" + user.name + " adds cables to the APC frame.", "<span class='notice'>You start adding cables to the APC frame...</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 20, null, this ) ) {
					
					if ( Convert.ToDouble( C.amount ) >= 10 && !( this.terminal != null ) && this.opened != 0 && this.has_electronics != 2 ) {
						T = GlobalFuncs.get_turf( this );
						N = ((Tile)T).get_cable_node();

						if ( Rand13.PercentChance( 50 ) && Lang13.Bool( GlobalFuncs.electrocute_mob( Task13.User, N, N ) ) ) {
							s = new EffectSystem_SparkSpread();
							s.set_up( 5, 1, this );
							s.start();
							return null;
						}
						C.use( 10 );
						user.WriteMsg( "<span class='notice'>You add cables to the APC frame.</span>" );
						this.make_terminal();
						this.terminal.connect_to_network();
					}
				}
			} else if ( A is Obj_Item_Weapon_Wirecutters && this.terminal != null && this.opened != 0 && this.has_electronics != 2 ) {
				this.terminal.dismantle( user );
			} else if ( A is Obj_Item_Weapon_Electronics_Apc && this.opened != 0 && this.has_electronics == 0 && !( ( this.stat & 1 ) != 0 || Lang13.Bool( this.malfhack ) ) ) {
				((Ent_Static)user).visible_message( "" + user.name + " inserts the power control board into " + this + ".", "<span class='notice'>You start to insert the power control board into the frame...</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 10, null, this ) ) {
					
					if ( this.has_electronics == 0 ) {
						this.has_electronics = 1;
						user.WriteMsg( "<span class='notice'>You place the power control board inside the frame.</span>" );
						GlobalFuncs.qdel( A );
					}
				}
			} else if ( A is Obj_Item_Weapon_Electronics_Apc && this.opened != 0 && this.has_electronics == 0 && ( ( this.stat & 1 ) != 0 || Lang13.Bool( this.malfhack ) ) ) {
				user.WriteMsg( "<span class='warning'>You cannot put the board inside, the frame is damaged!</span>" );
				return null;
			} else if ( A is Obj_Item_Weapon_Weldingtool && this.opened != 0 && this.has_electronics == 0 && !( this.terminal != null ) ) {
				WT = A;

				if ( ( ((Obj_Item_Weapon_Weldingtool)WT).get_fuel() ?1:0) < 3 ) {
					user.WriteMsg( "<span class='warning'>You need more welding fuel to complete this task!</span>" );
					return null;
				}
				((Ent_Static)user).visible_message( "" + user.name + " welds " + this + ".", "<span class='notice'>You start welding the APC frame...</span>", "<span class='italics'>You hear welding.</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 50 / A.toolspeed, null, this ) ) {
					
					if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 3, user ) ) {
						return null;
					}

					if ( Lang13.Bool( this.emagged ) || Lang13.Bool( this.malfhack ) || ( this.stat & 1 ) != 0 || this.opened == 2 ) {
						new Obj_Item_Stack_Sheet_Metal( this.loc );
						((Ent_Static)user).visible_message( "" + user.name + " has cut " + this + " apart with " + A + ".", "<span class='notice'>You disassembled the broken APC frame.</span>" );
					} else {
						new Obj_Item_Wallframe_Apc( this.loc );
						((Ent_Static)user).visible_message( "" + user.name + " has cut " + this + " from the wall with " + A + ".", "<span class='notice'>You cut the APC frame from the wall.</span>" );
					}
					GlobalFuncs.qdel( this );
					return null;
				}
			} else if ( A is Obj_Item_Wallframe_Apc && this.opened != 0 && Lang13.Bool( this.emagged ) ) {
				this.emagged = 0;

				if ( this.opened == 2 ) {
					this.opened = 1;
				}
				((Ent_Static)user).visible_message( "" + user.name + " has replaced the damaged APC frontal panel with a new one.", "<span class='notice'>You replace the damaged APC frontal panel with a new one.</span>" );
				GlobalFuncs.qdel( A );
				this.update_icon();
			} else if ( A is Obj_Item_Wallframe_Apc && this.opened != 0 && ( ( this.stat & 1 ) != 0 || Lang13.Bool( this.malfhack ) ) ) {
				
				if ( this.has_electronics != 0 ) {
					user.WriteMsg( "<span class='warning'>You cannot repair this APC until you remove the electronics still inside!</span>" );
					return null;
				}
				((Ent_Static)user).visible_message( "" + user.name + " replaces the damaged APC frame with a new one.", "<span class='notice'>You begin to replace the damaged APC frame...</span>" );

				if ( GlobalFuncs.do_after( user, 50, null, this ) ) {
					user.WriteMsg( "<span class='notice'>You replace the damaged APC frame with a new one.</span>" );
					GlobalFuncs.qdel( A );
					this.stat &= 65534;
					this.malfai = null;
					this.malfhack = 0;

					if ( this.opened == 2 ) {
						this.opened = 1;
					}
					this.update_icon();
				}
			} else {
				
				if ( Lang13.Bool( this.panel_open ) && !( this.opened != 0 ) && Lang13.Bool( GlobalFuncs.is_wire_tool( A ) ) ) {
					this.wires.interact( user );
				}

				if ( ( ( this.stat & 1 ) != 0 || Lang13.Bool( this.malfhack ) ) && !( this.opened != 0 ) && Convert.ToDouble( A.force ) >= 5 && Convert.ToDouble( A.w_class ) >= 3 && Rand13.PercentChance( 20 ) ) {
					this.opened = 2;
					((Ent_Static)user).visible_message( "<span class='warning'>" + user.name + " has knocked down the APC cover  with the " + A.name + ".</span>", "<span class='danger'>You knock down the APC cover with your " + A.name + "!</span>", "<span class='italics'>You hear bang.</span>" );
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: apc.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			int update = 0;
			string basestate = null;

			
			if ( !GlobalVars.status_overlays ) {
				GlobalVars.status_overlays = true;
				GlobalVars.status_overlays_lock = new ByTable();
				GlobalVars.status_overlays_charging = new ByTable();
				GlobalVars.status_overlays_equipment = new ByTable();
				GlobalVars.status_overlays_lighting = new ByTable();
				GlobalVars.status_overlays_environ = new ByTable();
				GlobalVars.status_overlays_lock.len = 2;
				GlobalVars.status_overlays_charging.len = 3;
				GlobalVars.status_overlays_equipment.len = 4;
				GlobalVars.status_overlays_lighting.len = 4;
				GlobalVars.status_overlays_environ.len = 4;
				GlobalVars.status_overlays_lock[1] = new Image( this.icon, "apcox-0" );
				GlobalVars.status_overlays_lock[2] = new Image( this.icon, "apcox-1" );
				GlobalVars.status_overlays_charging[1] = new Image( this.icon, "apco3-0" );
				GlobalVars.status_overlays_charging[2] = new Image( this.icon, "apco3-1" );
				GlobalVars.status_overlays_charging[3] = new Image( this.icon, "apco3-2" );
				GlobalVars.status_overlays_equipment[1] = new Image( this.icon, "apco0-0" );
				GlobalVars.status_overlays_equipment[2] = new Image( this.icon, "apco0-1" );
				GlobalVars.status_overlays_equipment[3] = new Image( this.icon, "apco0-2" );
				GlobalVars.status_overlays_equipment[4] = new Image( this.icon, "apco0-3" );
				GlobalVars.status_overlays_lighting[1] = new Image( this.icon, "apco1-0" );
				GlobalVars.status_overlays_lighting[2] = new Image( this.icon, "apco1-1" );
				GlobalVars.status_overlays_lighting[3] = new Image( this.icon, "apco1-2" );
				GlobalVars.status_overlays_lighting[4] = new Image( this.icon, "apco1-3" );
				GlobalVars.status_overlays_environ[1] = new Image( this.icon, "apco2-0" );
				GlobalVars.status_overlays_environ[2] = new Image( this.icon, "apco2-1" );
				GlobalVars.status_overlays_environ[3] = new Image( this.icon, "apco2-2" );
				GlobalVars.status_overlays_environ[4] = new Image( this.icon, "apco2-3" );
			}
			update = this.check_updates();

			if ( !( update != 0 ) ) {
				return false;
			}

			if ( ( update & 1 ) != 0 ) {
				
				if ( ( this.update_state & 128 ) != 0 ) {
					this.icon_state = "apc0";
				} else if ( ( this.update_state & 6 ) != 0 ) {
					basestate = "apc" + ( Lang13.Bool( this.cell ) ? "2" : "1" );

					if ( ( this.update_state & 2 ) != 0 ) {
						
						if ( ( this.update_state & 24 ) != 0 ) {
							this.icon_state = "apcmaint";
						} else {
							this.icon_state = basestate;
						}
					} else if ( ( this.update_state & 4 ) != 0 ) {
						
						if ( ( this.update_state & 16 ) != 0 || Lang13.Bool( this.malfhack ) ) {
							this.icon_state = "" + basestate + "-b-nocover";
						} else {
							this.icon_state = "" + basestate + "-nocover";
						}
					}
				} else if ( ( this.update_state & 16 ) != 0 ) {
					this.icon_state = "apc-b";
				} else if ( ( this.update_state & 32 ) != 0 ) {
					this.icon_state = "apcemag";
				} else if ( ( this.update_state & 64 ) != 0 ) {
					this.icon_state = "apcewires";
				}
			}

			if ( !( ( this.update_state & 128 ) != 0 ) ) {
				
				if ( this.overlays.len != 0 ) {
					this.overlays = 0;
				}
			}

			if ( ( update & 2 ) != 0 ) {
				
				if ( this.overlays.len != 0 ) {
					this.overlays.len = 0;
				}

				if ( !( ( this.stat & 9 ) != 0 ) && ( this.update_state & 128 ) != 0 ) {
					this.overlays.Add( GlobalVars.status_overlays_lock[( this.locked ??0) + 1] );
					this.overlays.Add( GlobalVars.status_overlays_charging[this.charging + 1] );

					if ( this.operating ) {
						this.overlays.Add( GlobalVars.status_overlays_equipment[( this.equipment ??0) + 1] );
						this.overlays.Add( GlobalVars.status_overlays_lighting[( this.lighting ??0) + 1] );
						this.overlays.Add( GlobalVars.status_overlays_environ[( this.environ ??0) + 1] );
					}
				}
			}
			return false;
		}

		// Function from file: apc.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( ( this.stat & 1 ) != 0 ) {
				user.WriteMsg( "Looks broken." );
				return 0;
			}

			if ( this.opened != 0 ) {
				
				if ( this.has_electronics != 0 && this.terminal != null ) {
					user.WriteMsg( "The cover is " + ( this.opened == 2 ? "removed" : "open" ) + " and the power cell is " + ( Lang13.Bool( this.cell ) ? "installed" : "missing" ) + "." );
				} else {
					user.WriteMsg( "It's " + ( !( this.terminal != null ) ? " not" : "" ) + "wired up." );
					user.WriteMsg( "The electronics are" + ( !( this.has_electronics != 0 ) ? "n't" : "" ) + " installed." );
				}
			} else if ( ( this.stat & 8 ) != 0 ) {
				user.WriteMsg( "The cover is closed. Something is wrong with it. It doesn't work." );
			} else if ( Lang13.Bool( this.malfhack ) ) {
				user.WriteMsg( "The cover is broken. It may be hard to force it open." );
			} else {
				user.WriteMsg( "The cover is closed." );
			}
			return 0;
		}

		// Function from file: apc.dm
		public double? setsubsystem( double? val = null ) {
			
			if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) > 0 ) {
				return ( val == 1 ? 0 : val );
			} else if ( val == 3 ) {
				return 1;
			} else {
				return 0;
			}
			return null;
		}

		// Function from file: apc.dm
		public bool shock( dynamic user = null, int prb = 0 ) {
			EffectSystem_SparkSpread s = null;

			
			if ( !Rand13.PercentChance( prb ) ) {
				return false;
			}
			s = new EffectSystem_SparkSpread();
			s.set_up( 5, 1, this );
			s.start();

			if ( user is Mob_Living_Carbon_Alien ) {
				return false;
			}

			if ( Lang13.Bool( GlobalFuncs.electrocute_mob( user, this, this ) ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: apc.dm
		public void overload_lighting(  ) {
			dynamic A = null;
			Obj_Machinery_Light L = null;

			
			if ( !this.operating || Lang13.Bool( this.shorted ) ) {
				return;
			}

			if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) >= 20 ) {
				this.cell.use( 20 );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _b in Lang13.Enumerate( this.area.related )) {
						A = _b;
						

						foreach (dynamic _a in Lang13.Enumerate( A, typeof(Obj_Machinery_Light) )) {
							L = _a;
							
							L.on = true;
							L.broken();
							Task13.Sleep( 1 );
						}
					}
					return;
				}));
			}
			return;
		}

		// Function from file: apc.dm
		public void set_broken(  ) {
			
			if ( Lang13.Bool( this.malfai ) && this.operating ) {
				this.malfai.malf_picker.processing_time = Num13.MaxInt( 0, Num13.MinInt( this.malfai.malf_picker.processing_time - 10, 1000 ) );
			}
			this.stat |= 1;
			this.operating = false;

			if ( this.occupier != null ) {
				this.malfvacate( true );
			}
			this.update_icon();
			this.update();
			return;
		}

		// Function from file: apc.dm
		public void reset( dynamic wire = null ) {
			
			dynamic _a = wire; // Was a switch-case, sorry for the mess.
			if ( _a=="idscan" ) {
				this.locked = GlobalVars.TRUE;
			} else if ( _a=="power1" || _a=="power2" ) {
				
				if ( !((Wires)this.wires).is_cut( "power1" ) && !((Wires)this.wires).is_cut( "power2" ) ) {
					this.shorted = GlobalVars.FALSE;
				}
			} else if ( _a=="ai" ) {
				
				if ( !((Wires)this.wires).is_cut( "ai" ) ) {
					this.aidisabled = GlobalVars.FALSE;
				}
			} else if ( _a=="emp" ) {
				this.equipment = 3;
				this.environ = 3;
				this.update_icon();
				this.update();
			}
			return;
		}

		// Function from file: apc.dm
		public double? autoset( double? val = null, int on = 0 ) {
			
			if ( on == 0 ) {
				
				if ( val == 2 ) {
					return 0;
				} else if ( val == 3 ) {
					return 1;
				}
			} else if ( on == 1 ) {
				
				if ( val == 1 ) {
					return 3;
				}
			} else if ( on == 2 ) {
				
				if ( val == 3 ) {
					return 1;
				}
			}
			return val;
		}

		// Function from file: apc.dm
		public void malfvacate( bool? forced = null ) {
			Obj_Item_Weapon_Pinpointer point = null;
			Mob_Living_Silicon_Ai A = null;
			Obj_Item_Weapon_Pinpointer point2 = null;

			
			if ( !( this.occupier != null ) ) {
				return;
			}

			if ( this.occupier.parent != null && this.occupier.parent.stat != 2 ) {
				this.occupier.mind.transfer_to( this.occupier.parent );
				((dynamic)this.occupier.parent).shunted = 0;
				((dynamic)this.occupier.parent).adjustOxyLoss( this.occupier.getOxyLoss() );
				this.occupier.parent.__CallVerb("Cancel Camera View" );
				GlobalFuncs.qdel( this.occupier );

				if ( GlobalFuncs.seclevel2num( GlobalFuncs.get_security_level() ) == 3 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.pinpointer_list, typeof(Obj_Item_Weapon_Pinpointer) )) {
						point = _b;
						

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ai_list, typeof(Mob_Living_Silicon_Ai) )) {
							A = _a;
							

							if ( A.stat != 2 && A.nuking ) {
								point.the_disk = A;
							}
						}
					}
				}
			} else {
				this.occupier.WriteMsg( "<span class='danger'>Primary core damaged, unable to return core processes.</span>" );

				if ( forced == true ) {
					this.occupier.loc = this.loc;
					this.occupier.death();
					this.occupier.gib();

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.pinpointer_list, typeof(Obj_Item_Weapon_Pinpointer) )) {
						point2 = _c;
						
						point2.the_disk = null;
					}
				}
			}
			return;
		}

		// Function from file: apc.dm
		public void malfoccupy( Mob malf = null ) {
			Obj_Item_Weapon_Pinpointer point = null;

			
			if ( !( malf is Mob_Living_Silicon_Ai ) ) {
				return;
			}

			if ( malf.loc is Obj_Machinery_Power_Apc ) {
				malf.WriteMsg( "<span class='warning'>You must evacuate your current APC first!</span>" );
				return;
			}

			if ( !Lang13.Bool( ((dynamic)malf).can_shunt ) ) {
				malf.WriteMsg( "<span class='warning'>You cannot shunt!</span>" );
				return;
			}

			if ( this.z != 1 ) {
				return;
			}
			this.occupier = new Mob_Living_Silicon_Ai( this, ((dynamic)malf).laws, null, true );
			this.occupier.adjustOxyLoss( ((dynamic)malf).getOxyLoss() );

			if ( !( String13.FindIgnoreCase( this.occupier.name, "APC Copy", 1, 0 ) != 0 ) ) {
				this.occupier.name = "" + malf.name + " APC Copy";
			}

			if ( Lang13.Bool( ((dynamic)malf).parent ) ) {
				this.occupier.parent = ((dynamic)malf).parent;
			} else {
				this.occupier.parent = malf;
			}
			((dynamic)malf).shunted = 1;
			malf.mind.transfer_to( this.occupier );
			this.occupier.eyeobj.name = "" + this.occupier.name + " (AI Eye)";

			if ( Lang13.Bool( ((dynamic)malf).parent ) ) {
				GlobalFuncs.qdel( malf );
			}
			this.occupier.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "corereturn" ) );
			this.occupier.__CallVerb("Cancel Camera View" );

			if ( GlobalFuncs.seclevel2num( GlobalFuncs.get_security_level() ) == 3 && Lang13.Bool( ((dynamic)malf).nuking ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.pinpointer_list, typeof(Obj_Item_Weapon_Pinpointer) )) {
					point = _a;
					
					point.the_disk = this;
				}
			}
			return;
		}

		// Function from file: apc.dm
		public void malfhacked( Mob_Living_Silicon_Ai malf = null ) {
			
			if ( !( malf is Mob_Living_Silicon_Ai ) ) {
				return;
			}

			if ( this != null && !Lang13.Bool( this.aidisabled ) ) {
				malf.malfhack = null;
				malf.malfhacking = GlobalVars.FALSE;
				malf.malf_picker.processing_time += 10;
				this.malfai = malf.parent != null || malf != null;
				this.malfhack = GlobalVars.TRUE;
				this.locked = GlobalVars.TRUE;
				malf.WriteMsg( "Hack complete. The APC is now under your exclusive control." );
				this.update_icon();
			}
			return;
		}

		// Function from file: apc.dm
		[VerbInfo( name: "malfhack" )]
		[VerbArg( 1, InputType.Mob )]
		public void f_malfhack( Mob malf = null ) {
			
			if ( !( malf is Mob_Living_Silicon_Ai ) ) {
				return;
			}

			if ( this.get_malf_status( malf ) != 1 ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)malf).malfhacking ) ) {
				malf.WriteMsg( "You are already hacking an APC." );
				return;
			}
			malf.WriteMsg( "Beginning override of APC systems. This takes some time, and you cannot perform other actions during the process." );
			((dynamic)malf).malfhack = this;
			((dynamic)malf).malfhacking = GlobalVars.TRUE;
			GlobalFuncs.addtimer( this, "malfhacked", 600, GlobalVars.FALSE, malf );
			return;
		}

		// Function from file: apc.dm
		public void toggle_breaker(  ) {
			this.operating = !this.operating;
			this.update();
			this.update_icon();
			return;
		}

		// Function from file: apc.dm
		public int? can_use( Mob user = null, bool? loud = null ) {
			loud = loud ?? false;

			Mob AI = null;
			Mob robot = null;

			
			if ( Lang13.Bool( GlobalFuncs.IsAdminGhost( user ) ) ) {
				return GlobalVars.TRUE;
			}

			if ( user.has_unlimited_silicon_privilege ) {
				AI = user;
				robot = user;

				if ( Lang13.Bool( this.aidisabled ) || Lang13.Bool( this.malfhack ) && this.malfai is Mob_Living_Silicon_Ai && ( AI is Mob_Living_Silicon_Ai && this.malfai != AI && this.malfai != ((dynamic)AI).parent || robot is Mob_Living_Silicon_Robot && this.malfai.connected_robots.Contains( robot ) ) ) {
					
					if ( !( loud == true ) ) {
						user.WriteMsg( new Txt( "<span class='danger'>" ).The( this ).item().str( " has eee disabled!</span>" ).ToString() );
					}
					return GlobalVars.FALSE;
				}
			}
			return GlobalVars.TRUE;
		}

		// Function from file: apc.dm
		public void update(  ) {
			
			if ( this.operating && !Lang13.Bool( this.shorted ) ) {
				this.area.power_light = ( this.lighting ??0) > 1;
				this.area.power_equip = ( this.equipment ??0) > 1;
				this.area.power_environ = ( this.environ ??0) > 1;
			} else {
				this.area.power_light = false;
				this.area.power_equip = false;
				this.area.power_environ = false;
			}
			((Zone)this.area).power_change();
			return;
		}

		// Function from file: apc.dm
		public string report(  ) {
			return "" + this.area.name + " : " + this.equipment + "/" + this.lighting + "/" + this.environ + " (" + ( this.lastused_equip + this.lastused_light + this.lastused_environ ) + ") : " + ( Lang13.Bool( this.cell ) ? ((dynamic)( ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent() )) : ((dynamic)( "N/C" )) ) + " (" + this.charging + ")";
		}

		// Function from file: apc.dm
		public int get_malf_status( dynamic malf = null ) {
			
			if ( malf is Mob_Living_Silicon_Ai && malf.malf_picker != null ) {
				
				if ( this.malfai == ( Lang13.Bool( malf.parent ) || Lang13.Bool( malf ) ) ) {
					
					if ( this.occupier == malf ) {
						return 3;
					} else if ( malf.loc is Obj_Machinery_Power_Apc ) {
						return 4;
					} else {
						return 2;
					}
				} else {
					return 1;
				}
			} else {
				return 0;
			}
			return 0;
		}

		// Function from file: apc.dm
		public void queue_icon_update(  ) {
			
			if ( !this.updating_icon ) {
				this.updating_icon = true;
				Task13.Schedule( 200, (Task13.Closure)(() => {
					this.update_icon();
					this.updating_icon = false;
					return;
				}));
			}
			return;
		}

		// Function from file: apc.dm
		public int check_updates(  ) {
			int last_update_state = 0;
			int last_update_overlay = 0;
			int results = 0;

			last_update_state = this.update_state;
			last_update_overlay = this.update_overlay;
			this.update_state = 0;
			this.update_overlay = 0;

			if ( Lang13.Bool( this.cell ) ) {
				this.update_state |= 1;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				this.update_state |= 16;
			}

			if ( ( this.stat & 8 ) != 0 ) {
				this.update_state |= 8;
			}

			if ( this.opened != 0 ) {
				
				if ( this.opened == 1 ) {
					this.update_state |= 2;
				}

				if ( this.opened == 2 ) {
					this.update_state |= 4;
				}
			} else if ( Lang13.Bool( this.emagged ) || Lang13.Bool( this.malfai ) ) {
				this.update_state |= 32;
			} else if ( Lang13.Bool( this.panel_open ) ) {
				this.update_state |= 64;
			}

			if ( this.update_state <= 1 ) {
				this.update_state |= 128;
			}

			if ( this.operating ) {
				this.update_overlay |= 8192;
			}

			if ( ( this.update_state & 128 ) != 0 ) {
				
				if ( Lang13.Bool( this.locked ) ) {
					this.update_overlay |= 4096;
				}

				if ( !( this.charging != 0 ) ) {
					this.update_overlay |= 1;
				} else if ( this.charging == 1 ) {
					this.update_overlay |= 2;
				} else if ( this.charging == 2 ) {
					this.update_overlay |= 4;
				}

				if ( !Lang13.Bool( this.equipment ) ) {
					this.update_overlay |= 8;
				} else if ( this.equipment == 1 ) {
					this.update_overlay |= 16;
				} else if ( this.equipment == 2 ) {
					this.update_overlay |= 32;
				}

				if ( !Lang13.Bool( this.lighting ) ) {
					this.update_overlay |= 64;
				} else if ( this.lighting == 1 ) {
					this.update_overlay |= 128;
				} else if ( this.lighting == 2 ) {
					this.update_overlay |= 256;
				}

				if ( !Lang13.Bool( this.environ ) ) {
					this.update_overlay |= 512;
				} else if ( this.environ == 1 ) {
					this.update_overlay |= 1024;
				} else if ( this.environ == 2 ) {
					this.update_overlay |= 2048;
				}
			}
			results = 0;

			if ( last_update_state == this.update_state && last_update_overlay == this.update_overlay ) {
				return 0;
			}

			if ( last_update_state != this.update_state ) {
				results += 1;
			}

			if ( last_update_overlay != this.update_overlay ) {
				results += 2;
			}
			return results;
		}

		// Function from file: apc.dm
		public void init(  ) {
			Ent_Static A = null;

			this.has_electronics = 2;

			if ( this.cell_type != 0 ) {
				this.cell = new Obj_Item_Weapon_StockParts_Cell( this );
				this.cell.maxcharge = this.cell_type;
				this.cell.charge = this.start_charge * ( this.cell.maxcharge ??0) / 100;
			}
			A = this.loc.loc;

			if ( A is Zone && this.areastring == null ) {
				this.area = A;
			} else {
				this.area = GlobalFuncs.get_area_name( this.areastring );
			}
			this.update_icon();
			this.make_terminal();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.update();
				return;
			}));
			return;
		}

		// Function from file: apc.dm
		public void make_terminal(  ) {
			this.terminal = new Obj_Machinery_Power_Terminal( this.loc );
			this.terminal.dir = this.tdir;
			this.terminal.master = this;
			return;
		}

		// Function from file: apc.dm
		public override dynamic Destroy(  ) {
			GlobalVars.apcs_list.Remove( this );

			if ( Lang13.Bool( this.malfai ) && this.operating ) {
				this.malfai.malf_picker.processing_time = Num13.MaxInt( 0, Num13.MinInt( this.malfai.malf_picker.processing_time - 10, 1000 ) );
			}
			this.area.power_light = false;
			this.area.power_equip = false;
			this.area.power_environ = false;
			this.area.power_change();

			if ( this.occupier != null ) {
				this.malfvacate( true );
			}
			GlobalFuncs.qdel( this.wires );
			this.wires = null;

			if ( Lang13.Bool( this.cell ) ) {
				GlobalFuncs.qdel( this.cell );
			}

			if ( this.terminal != null ) {
				this.disconnect_terminal();
			}
			return base.Destroy();
		}

		// Function from file: apc.dm
		public override bool connect_to_network(  ) {
			
			if ( !( this.terminal != null ) ) {
				this.make_terminal();
			}

			if ( this.terminal != null ) {
				this.terminal.connect_to_network();
			}
			return false;
		}

		// Function from file: ninjaDrainAct.dm
		public override dynamic ninjadrain_act( Obj_Item_Clothing_Suit_Space_SpaceNinja S = null, Ent_Static H = null, Obj_Item_Clothing_Gloves_SpaceNinja G = null ) {
			dynamic _default = null;

			bool maxcapacity = false;
			double drain = 0;
			EffectSystem_SparkSpread spark_system = null;

			
			if ( !( S != null ) || !( H != null ) || !( G != null ) ) {
				return "INVALID";
			}
			maxcapacity = false;
			drain = 0;
			_default = 0;

			if ( Lang13.Bool( this.cell ) && Lang13.Bool( this.cell.charge ) ) {
				spark_system = new EffectSystem_SparkSpread();
				spark_system.set_up( 5, 0, this.loc );

				while (G.candrain && Convert.ToDouble( this.cell.charge ) > 0 && !maxcapacity) {
					drain = Rand13.Int( G.mindrain, G.maxdrain );

					if ( Convert.ToDouble( this.cell.charge ) < drain ) {
						drain = Convert.ToDouble( this.cell.charge );
					}

					if ( Convert.ToDouble( S.cell.charge + drain ) > ( S.cell.maxcharge ??0) ) {
						drain = ( S.cell.maxcharge ??0) - Convert.ToDouble( S.cell.charge );
						maxcapacity = true;
					}

					if ( GlobalFuncs.do_after( H, 10, null, this ) ) {
						spark_system.start();
						GlobalFuncs.playsound( this.loc, "sparks", 50, 1 );
						this.cell.charge -= drain;
						S.cell.charge += drain;
						_default += drain;
					} else {
						break;
					}
				}

				if ( !Lang13.Bool( this.emagged ) ) {
					Icon13.Flick( "apc-spark", G );
					this.emagged = 1;
					this.locked = 0;
					this.update_icon();
				}
			}
			return _default;
		}

		// Function from file: cyborg.dm
		public override void BorgCtrlClick( Mob_Living_Silicon_Robot user = null ) {
			this.AICtrlClick();
			return;
		}

		// Function from file: ai.dm
		public override void AICtrlClick(  ) {
			this.toggle_breaker();
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}