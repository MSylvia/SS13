// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Apc : Obj_Machinery_Power {

		public bool spooky = false;
		public dynamic cell = null;
		public int start_charge = 90;
		public int cell_type = 2500;
		public int opened = 0;
		public bool shorted = false;
		public double? lighting = 3;
		public double? equipment = 3;
		public double? environ = 3;
		public bool operating = true;
		public int charging = 0;
		public bool chargemode = true;
		public int chargecount = 0;
		public bool locked = true;
		public bool coverlocked = true;
		public bool aidisabled = false;
		public int tdir = 0;
		public double lastused_light = 0;
		public double lastused_equip = 0;
		public double lastused_environ = 0;
		public double lastused_total = 0;
		public int main_status = 0;
		public bool wiresexposed = false;
		public bool malfhack = false;
		public Mob malfai = null;
		public int has_electronics = 0;
		public int overload = 1;
		public int beenhit = 0;
		public Mob_Living_Silicon_Ai occupant = null;
		public int longtermpower = 10;
		public int update_state = -1;
		public int update_overlay = -1;
		public bool status_overlays = false;
		public bool updating_icon = false;
		public Wires_Apc wires = null;
		public dynamic status_overlays_lock = null;
		public dynamic status_overlays_charging = null;
		public dynamic status_overlays_equipment = null;
		public dynamic status_overlays_lighting = null;
		public dynamic status_overlays_environ = null;
		public bool is_critical = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 11 });
			this.powernet = 0;
			this.machine_flags = 512;
			this.icon_state = "apc0";
		}

		// Function from file: apc.dm
		public Obj_Machinery_Power_Apc ( dynamic loc = null, int ndir = 0, bool? building = null ) : base( (object)(loc) ) {
			building = building ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.wires = new Wires_Apc( this );

			if ( building == true ) {
				this.dir = ndir;
			}
			this.tdir = this.dir;
			this.dir = ((int)( GlobalVars.SOUTH ));

			if ( this.areaMaster.areaapc != null ) {
				Game13.log.WriteMsg( "Secondary APC detected in area: " + this.areaMaster.name + ", deleting the second APC" );
				GlobalFuncs.qdel( this );
				return;
			}
			((Zone)this.areaMaster).set_apc( this );

			if ( ( this.tdir & 3 ) != 0 ) {
				this.pixel_x = 0;
				this.pixel_y = ( this.tdir == 1 ? 24 : -24 );
			} else {
				this.pixel_x = ( this.tdir == 4 ? 24 : -24 );
				this.pixel_y = 0;
			}

			if ( building == false ) {
				this.init();
			} else {
				this.opened = 1;
				this.operating = false;
				this.stat |= 8;
			}

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: apc.dm
		public override bool wirejack( dynamic P = null ) {
			
			if ( base.wirejack( (object)(P) ) ) {
				this.locked = !this.locked;
				this.update_icon();
				return true;
			}
			return false;
		}

		// Function from file: apc.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			base.change_area( (object)(oldarea), (object)(newarea) );
			this.name = GlobalFuncs.replacetext( this.name, oldarea, newarea );
			return;
		}

		// Function from file: apc.dm
		public override dynamic cultify(  ) {
			
			if ( this.invisibility != 100 ) {
				this.invisibility = 100;
			}
			return null;
		}

		// Function from file: apc.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			((Zone)this.areaMaster).remove_apc( this );

			if ( this.malfai != null && this.operating ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "malfunction" ) {
					
					if ( 1 == this.z ) {
						GlobalVars.ticker.mode.apcs--;
					}
				}
			}
			this.areaMaster.power_light = false;
			this.areaMaster.power_equip = false;
			this.areaMaster.power_environ = false;
			this.areaMaster.power_change();

			if ( this.occupant != null ) {
				this.malfvacate( true );
			}

			if ( Lang13.Bool( this.cell ) ) {
				this.cell.loc = this.loc;
				this.cell = null;
			}

			if ( this.terminal != null ) {
				this.terminal.master = null;
				this.terminal = null;
			}

			if ( this.wires != null ) {
				GlobalFuncs.qdel( this.wires );
				this.wires = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: apc.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.set_broken();

				if ( Lang13.Bool( this.cell ) && Rand13.PercentChance( 5 ) ) {
					((Ent_Static)this.cell).blob_act();
				}
			}
			return false;
		}

		// Function from file: apc.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					
					if ( Lang13.Bool( this.cell ) ) {
						((Ent_Static)this.cell).ex_act( 1 );
					}
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.set_broken();

						if ( Lang13.Bool( this.cell ) && Rand13.PercentChance( 50 ) ) {
							((Ent_Static)this.cell).ex_act( 2 );
						}
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.set_broken();

						if ( Lang13.Bool( this.cell ) && Rand13.PercentChance( 25 ) ) {
							((Ent_Static)this.cell).ex_act( 3 );
						}
					}
					break;
			}
			return false;
		}

		// Function from file: apc.dm
		public override dynamic emp_act( int severity = 0 ) {
			Icon13.Flick( "apc-spark", this );

			if ( Lang13.Bool( this.cell ) ) {
				this.cell.emp_act( severity );
			}

			if ( this.occupant != null ) {
				this.occupant.emp_act( severity );
			}
			this.lighting = 0;
			this.equipment = 0;
			this.environ = 0;
			this.update();
			Task13.Schedule( ((int)( 600 / severity )), (Task13.Closure)(() => {
				this.lighting = 3;
				this.equipment = 3;
				this.environ = 3;
				this.update();
				return;
			}));
			base.emp_act( severity );
			return null;
		}

		// Function from file: apc.dm
		public override dynamic process(  ) {
			double? last_lt = null;
			double? last_eq = null;
			double? last_en = null;
			int last_ch = 0;
			dynamic excess = null;
			double cellused = 0;
			double ch = 0;

			
			if ( ( this.stat & 9 ) != 0 ) {
				return null;
			}

			if ( !this.areaMaster.requires_power ) {
				return null;
			}
			this.lastused_light = ((Zone)this.areaMaster).usage( 2 );
			this.lastused_light += ((Zone)this.areaMaster).usage( 6 );
			this.lastused_equip = ((Zone)this.areaMaster).usage( 1 );
			this.lastused_light += ((Zone)this.areaMaster).usage( 5 );
			this.lastused_environ = ((Zone)this.areaMaster).usage( 3 );
			this.lastused_light += ((Zone)this.areaMaster).usage( 7 );
			((Zone)this.areaMaster).clear_usage();
			this.lastused_total = this.lastused_light + this.lastused_equip + this.lastused_environ;
			last_lt = this.lighting;
			last_eq = this.equipment;
			last_en = this.environ;
			last_ch = this.charging;
			excess = this.surplus();

			if ( !Lang13.Bool( this.avail() ) ) {
				this.main_status = 0;
			} else if ( Convert.ToDouble( excess ) < 0 ) {
				this.main_status = 1;
			} else {
				this.main_status = 2;
			}

			if ( Lang13.Bool( this.cell ) && !this.shorted ) {
				cellused = Num13.MinInt( Convert.ToInt32( this.cell.charge ), ((int)( GlobalVars.CELLRATE * this.lastused_total )) );
				this.cell.use( cellused );

				if ( Convert.ToDouble( excess ) > this.lastused_total ) {
					((Obj_Item_Weapon_Cell)this.cell).give( cellused );
					this.add_load( cellused / GlobalVars.CELLRATE );
				} else if ( Convert.ToDouble( this.cell.charge / GlobalVars.CELLRATE + excess ) >= this.lastused_total ) {
					this.cell.charge = Num13.MinInt( Convert.ToInt32( this.cell.maxcharge ), Convert.ToInt32( this.cell.charge + GlobalVars.CELLRATE * Convert.ToDouble( excess ) ) );
					this.add_load( excess );
					this.charging = 0;
				} else {
					this.charging = 0;
					this.chargecount = 0;
					this.equipment = this.autoset( this.equipment, 0 );
					this.lighting = this.autoset( this.lighting, 0 );
					this.environ = this.autoset( this.environ, 0 );
				}

				if ( this.charging != 0 && this.longtermpower < 10 ) {
					this.longtermpower += 1;
				} else if ( this.longtermpower > -10 ) {
					this.longtermpower -= 2;
				}

				if ( Convert.ToDouble( this.cell.charge ) <= 0 ) {
					this.equipment = this.autoset( this.equipment, 0 );
					this.lighting = this.autoset( this.lighting, 0 );
					this.environ = this.autoset( this.environ, 0 );

					if ( this.areaMaster.poweralm ) {
						((Zone)this.areaMaster).poweralert( false, this );
					}
				} else if ( ((Obj_Item_Weapon_Cell)this.cell).percent() < 15 && this.longtermpower < 0 ) {
					this.equipment = this.autoset( this.equipment, 2 );
					this.lighting = this.autoset( this.lighting, 2 );
					this.environ = this.autoset( this.environ, 1 );

					if ( this.areaMaster.poweralm ) {
						((Zone)this.areaMaster).poweralert( false, this );
					}
				} else if ( ((Obj_Item_Weapon_Cell)this.cell).percent() < 30 && this.longtermpower < 0 ) {
					this.equipment = this.autoset( this.equipment, 2 );
					this.lighting = this.autoset( this.lighting, 1 );
					this.environ = this.autoset( this.environ, 1 );

					if ( this.areaMaster.poweralm ) {
						((Zone)this.areaMaster).poweralert( false, this );
					}
				} else {
					this.equipment = this.autoset( this.equipment, 1 );
					this.lighting = this.autoset( this.lighting, 1 );
					this.environ = this.autoset( this.environ, 1 );

					if ( ((Obj_Item_Weapon_Cell)this.cell).percent() > 75 && !this.areaMaster.poweralm ) {
						((Zone)this.areaMaster).poweralert( true, this );
					}
				}

				if ( this.chargemode && this.charging == 1 && this.operating ) {
					
					if ( Convert.ToDouble( excess ) > 0 ) {
						ch = Num13.MinInt( Convert.ToInt32( excess * GlobalVars.CELLRATE ), Convert.ToInt32( this.cell.maxcharge * GlobalVars.CHARGELEVEL ) );
						this.add_load( ch / GlobalVars.CELLRATE );
						((Obj_Item_Weapon_Cell)this.cell).give( ch );
					} else {
						this.charging = 0;
						this.chargecount = 0;
					}
				}

				if ( Convert.ToDouble( this.cell.charge ) >= Convert.ToDouble( this.cell.maxcharge ) ) {
					this.cell.charge = this.cell.maxcharge;
					this.charging = 2;
				}

				if ( this.chargemode ) {
					
					if ( !( this.charging != 0 ) ) {
						
						if ( Convert.ToDouble( excess ) > Convert.ToDouble( this.cell.maxcharge * GlobalVars.CHARGELEVEL ) ) {
							this.chargecount++;
						} else {
							this.chargecount = 0;
							this.charging = 0;
						}

						if ( this.chargecount == 10 ) {
							this.chargecount = 0;
							this.charging = 1;
						}
					}
				} else {
					this.charging = 0;
					this.chargecount = 0;
				}
			} else {
				this.charging = 0;
				this.chargecount = 0;
				this.equipment = this.autoset( this.equipment, 0 );
				this.lighting = this.autoset( this.lighting, 0 );
				this.environ = this.autoset( this.environ, 0 );
				((Zone)this.areaMaster).poweralert( false, this );
			}

			if ( last_lt != this.lighting || last_eq != this.equipment || last_en != this.environ ) {
				this.queue_icon_update();
				this.update();
			} else if ( last_ch != this.charging ) {
				this.queue_icon_update();
			}
			return null;
		}

		// Function from file: apc.dm
		public override dynamic avail(  ) {
			
			if ( this.terminal != null ) {
				return this.terminal.avail();
			} else {
				return 0;
			}
		}

		// Function from file: apc.dm
		public override bool add_load( dynamic amount = null ) {
			
			if ( this.terminal != null && Lang13.Bool( this.terminal.get_powernet() ) ) {
				this.terminal.powernet.load += amount;
			}
			return false;
		}

		// Function from file: apc.dm
		public override dynamic surplus(  ) {
			
			if ( this.terminal != null ) {
				return this.terminal.surplus();
			} else {
				return 0;
			}
		}

		// Function from file: apc.dm
		public override bool can_attach_terminal( dynamic user = null ) {
			return user.loc == this.loc && this.has_electronics != 2 && !( this.terminal != null );
		}

		// Function from file: apc.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? val = null;
			double? val2 = null;
			double? val3 = null;
			Mob malfai = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 0;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			if ( !this.can_use( Task13.User, true ) ) {
				return 0;
			}

			if ( !( Task13.User is Mob_Living_Silicon ) && this.locked ) {
				GlobalFuncs.to_chat( Task13.User, "You must unlock the panel to use this!" );
				return 1;
			}

			if ( Lang13.Bool( href_list["lock"] ) ) {
				this.coverlocked = !this.coverlocked;
			} else if ( Lang13.Bool( href_list["breaker"] ) ) {
				this.toggle_breaker();
			} else if ( Lang13.Bool( href_list["cmode"] ) ) {
				this.chargemode = !this.chargemode;

				if ( !this.chargemode ) {
					this.charging = 0;
					this.update_icon();
				}
			} else if ( Lang13.Bool( href_list["eqp"] ) ) {
				val = String13.ParseNumber( href_list["eqp"] );
				this.equipment = this.setsubsystem( val );
				this.update_icon();
				this.update();
			} else if ( Lang13.Bool( href_list["lgt"] ) ) {
				val2 = String13.ParseNumber( href_list["lgt"] );
				this.lighting = this.setsubsystem( val2 );
				this.update_icon();
				this.update();
			} else if ( Lang13.Bool( href_list["env"] ) ) {
				val3 = String13.ParseNumber( href_list["env"] );
				this.environ = this.setsubsystem( val3 );
				this.update_icon();
				this.update();
			} else if ( Lang13.Bool( href_list["overload"] ) ) {
				
				if ( Task13.User is Mob_Living_Silicon ) {
					this.overload_lighting();
				}
			} else if ( Lang13.Bool( href_list["malfhack"] ) ) {
				malfai = Task13.User;

				if ( this.get_malf_status( malfai ) == 1 ) {
					
					if ( Lang13.Bool( ((dynamic)malfai).malfhacking ) ) {
						GlobalFuncs.to_chat( malfai, "You are already hacking an APC." );
						return 1;
					}
					GlobalFuncs.to_chat( malfai, "Beginning override of APC systems. This takes some time, and you cannot perform other actions during the process." );
					((dynamic)malfai).malfhack = this;
					((dynamic)malfai).malfhacking = 1;
					Task13.Sleep( 600 );

					if ( this != null && malfai != null ) {
						
						if ( !this.aidisabled ) {
							((dynamic)malfai).malfhack = null;
							((dynamic)malfai).malfhacking = 0;
							this.locked = true;

							if ( GlobalVars.ticker.mode.config_tag == "malfunction" ) {
								
								if ( 1 == this.z ) {
									GlobalVars.ticker.mode.apcs++;
								}
							}

							if ( Lang13.Bool( ((dynamic)Task13.User).parent ) ) {
								this.malfai = ((dynamic)Task13.User).parent;
							} else {
								this.malfai = Task13.User;
							}
							GlobalFuncs.to_chat( malfai, "Hack complete. The APC is now under your exclusive control." );
							this.update_icon();
						}
					}
				}
			} else if ( Lang13.Bool( href_list["occupyapc"] ) ) {
				
				if ( this.get_malf_status( Task13.User ) != 0 ) {
					this.malfoccupy( Task13.User );
				}
			} else if ( Lang13.Bool( href_list["deoccupyapc"] ) ) {
				
				if ( this.get_malf_status( Task13.User ) != 0 ) {
					this.malfvacate();
				}
			} else if ( Lang13.Bool( href_list["toggleaccess"] ) ) {
				
				if ( Task13.User is Mob_Living_Silicon ) {
					
					if ( this.emagged != 0 || ( this.stat & 9 ) != 0 ) {
						GlobalFuncs.to_chat( Task13.User, "The APC does not respond to the command." );
					} else {
						this.locked = !this.locked;
						this.update_icon();
					}
				}
			}
			return 1;
		}

		// Function from file: apc.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}
			data = new ByTable()
				.Set( "locked", this.locked )
				.Set( "isOperating", this.operating )
				.Set( "externalPower", this.main_status )
				.Set( "powerCellStatus", ( Lang13.Bool( this.cell ) ? ((Obj_Item_Weapon_Cell)this.cell).percent() : 0 ) )
				.Set( "chargeMode", this.chargemode )
				.Set( "chargingStatus", this.charging )
				.Set( "totalLoad", this.lastused_equip + this.lastused_light + this.lastused_environ )
				.Set( "coverLocked", this.coverlocked )
				.Set( "siliconUser", user is Mob_Living_Silicon || GlobalFuncs.isAdminGhost( user ) )
				.Set( "malfStatus", this.get_malf_status( user ) )
				.Set( "powerChannels", new ByTable(new object [] { 
					new ByTable()
						.Set( "title", "Equipment" )
						.Set( "powerLoad", this.lastused_equip )
						.Set( "status", this.equipment )
						.Set( "topicParams", new ByTable().Set( "auto", new ByTable().Set( "eqp", 3 ) ).Set( "on", new ByTable().Set( "eqp", 2 ) ).Set( "off", new ByTable().Set( "eqp", 1 ) ) )
					, 
					new ByTable()
						.Set( "title", "Lighting" )
						.Set( "powerLoad", this.lastused_light )
						.Set( "status", this.lighting )
						.Set( "topicParams", new ByTable().Set( "auto", new ByTable().Set( "lgt", 3 ) ).Set( "on", new ByTable().Set( "lgt", 2 ) ).Set( "off", new ByTable().Set( "lgt", 1 ) ) )
					, 
					new ByTable()
						.Set( "title", "Environment" )
						.Set( "powerLoad", this.lastused_environ )
						.Set( "status", this.environ )
						.Set( "topicParams", new ByTable().Set( "auto", new ByTable().Set( "env", 3 ) ).Set( "on", new ByTable().Set( "env", 2 ) ).Set( "off", new ByTable().Set( "env", 1 ) ) )
					
				 }) )
			;
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "apc.tmpl", "" + this.areaMaster.name + " - APC", 520, ( Lang13.Bool( data["siliconUser"] ) ? 465 : 440 ) );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			}
			return;
		}

		// Function from file: apc.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return null;
			}

			if ( this.wiresexposed ) {
				this.wires.Interact( user );
			}

			if ( ( this.stat & 25 ) != 0 ) {
				return null;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: apc.dm
		public override dynamic attack_alien( Mob user = null ) {
			bool allcut = false;

			
			if ( !( user != null ) ) {
				return null;
			}
			user.delayNextAttack( 8 );
			user.visible_message( "<span class='warning'>" + user.name + " slashes at the " + this.name + "!</span>", "<span class='notice'>You slash at the " + this.name + "!</span>" );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/slash.ogg", 100, 1 );
			allcut = this.wires.IsAllCut();

			if ( this.beenhit >= Convert.ToDouble( Rand13.Pick(new object [] { 3, 4 }) ) && !this.wiresexposed ) {
				this.wiresexposed = true;
				this.update_icon();
				this.visible_message( "<span class='warning'>The " + this.name + "'s cover flies open, exposing the wires!</span>" );
			} else if ( this.wiresexposed && !allcut ) {
				this.wires.CutAll();
				this.update_icon();
				this.visible_message( "<span class='warning'>The " + this.name + "'s wires are shredded!</span>" );
			} else {
				this.beenhit += 1;
			}
			return null;
		}

		// Function from file: apc.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}

			if ( !( a is Mob_Dead_Observer ) ) {
				this.add_fingerprint( a );

				if ( Task13.User == a && this.opened != 0 ) {
					
					if ( Lang13.Bool( this.cell ) && this.Adjacent( a ) ) {
						
						if ( a is Mob_Living_Silicon_Ai ) {
							this.interact( a );
							return null;
						} else if ( a is Mob_Living_Silicon && !( a is Mob_Living_Silicon_Robot_Mommi ) ) {
							this.cell.loc = this.loc;
						} else {
							((Mob)a).put_in_hands( this.cell );
						}
						((Ent_Static)this.cell).add_fingerprint( a );
						this.cell.updateicon();
						this.cell = null;
						((Ent_Static)a).visible_message( "<span class='warning'>" + a.name + " removes the power cell from " + this.name + "!</span>", "You remove the power cell." );
						this.charging = 0;
						this.update_icon();
					}
					return null;
				}

				if ( ( this.stat & 9 ) != 0 ) {
					return null;
				}
			}
			this.interact( a );
			return null;
		}

		// Function from file: apc.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic oldpowercell = null;
			dynamic C = null;
			dynamic T = null;
			Effect_Effect_System_SparkSpread s = null;
			dynamic WT = null;

			
			if ( b is Mob_Living_Silicon && Map13.GetDistance( this, b ) > 1 ) {
				return this.attack_hand( b );
			}
			this.add_fingerprint( b );

			if ( a is Obj_Item_Weapon_Crowbar && this.opened != 0 ) {
				
				if ( this.has_electronics == 1 ) {
					
					if ( this.terminal != null ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>Disconnect wires first.</span>" );
						return null;
					}
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Crowbar.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, "You are trying to remove the power control board..." );

					if ( GlobalFuncs.do_after( b, this, 50 ) && this.opened != 0 && !( this.terminal != null ) && this.has_electronics == 1 ) {
						this.has_electronics = 0;

						if ( ( this.stat & 1 ) != 0 || this.malfhack ) {
							((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " has broken the power control board inside " + this.name + "!</span>", "You broke the charred power control board and remove the remains.", "You hear a crack!" );
						} else {
							((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " has removed the power control board from " + this.name + "!</span>", "You remove the power control board." );
							new Obj_Item_Weapon_Circuitboard_PowerControl( this.loc );
						}
					}
				} else if ( this.opened != 2 ) {
					this.opened = 0;
					this.update_icon();
				}
			} else if ( a is Obj_Item_Weapon_Crowbar && !( ( this.stat & 1 ) != 0 || this.malfhack ) ) {
				
				if ( this.coverlocked && !( ( this.stat & 8 ) != 0 ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The cover is locked and cannot be opened.</span>" );
					return null;
				} else {
					this.opened = 1;
					this.update_icon();
				}
			} else if ( a is Obj_Item_Weapon_Cell && this.opened != 0 ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, "You swap the power cell within with the new cell in your hand." );
						oldpowercell = this.cell;
						this.cell = a;
						this.chargecount = 0;
						this.update_icon();
						((Mob)b).put_in_hands( oldpowercell );
						return null;
					}
				} else {
					
					if ( ( this.stat & 8 ) != 0 ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>There is no connector for your power cell.</span>" );
						return null;
					}

					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.cell = a;
						((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " has inserted the power cell to " + this.name + "!</span>", "You insert the power cell." );
						this.chargecount = 0;
						this.update_icon();
					}
				}
			} else if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.opened != 0 ) {
					
					if ( Lang13.Bool( this.cell ) ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>Close the APC first.</span>" );
						return null;
					} else {
						
						if ( this.has_electronics == 1 && this.terminal != null ) {
							this.has_electronics = 2;
							this.stat &= 65527;
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
							GlobalFuncs.to_chat( b, "You screw the circuit electronics into place." );
						} else if ( this.has_electronics == 2 ) {
							this.has_electronics = 1;
							this.stat |= 8;
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
							GlobalFuncs.to_chat( b, "You unfasten the electronics." );
						} else {
							GlobalFuncs.to_chat( b, "<span class='warning'>There is nothing to secure.</span>" );
							return null;
						}
						this.update_icon();
					}
				} else if ( this.emagged != 0 ) {
					GlobalFuncs.to_chat( b, "The interface is broken." );
				} else if ( this.has_electronics == 2 ) {
					this.wiresexposed = !this.wiresexposed;
					GlobalFuncs.to_chat( b, "The wires have been " + ( this.wiresexposed ? "exposed" : "unexposed" ) + "." );
					this.update_icon();
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You open the panel and find nothing inside.</span>" );
					return null;
				}
			} else if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.emagged != 0 ) {
					GlobalFuncs.to_chat( b, "The interface is broken." );
				} else if ( this.opened != 0 ) {
					GlobalFuncs.to_chat( b, "You must close the cover to swipe an ID card." );
				} else if ( this.wiresexposed ) {
					GlobalFuncs.to_chat( b, "You must close the panel" );
				} else if ( ( this.stat & 9 ) != 0 ) {
					GlobalFuncs.to_chat( b, "Nothing happens." );
				} else if ( this.allowed( Task13.User ) && !( this.isWireCut( 1 ) != 0 ) ) {
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "You " + ( this.locked ? "lock" : "unlock" ) + " the APC interface." );
					this.update_icon();
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Card_Emag && !( this.emagged != 0 || this.malfhack ) ) {
				
				if ( this.opened != 0 ) {
					GlobalFuncs.to_chat( b, "You must close the cover to swipe an ID card." );
				} else if ( this.wiresexposed ) {
					GlobalFuncs.to_chat( b, "You must close the panel first" );
				} else if ( ( this.stat & 9 ) != 0 ) {
					GlobalFuncs.to_chat( b, "Nothing happens." );
				} else {
					Icon13.Flick( "apc-spark", this );

					if ( GlobalFuncs.do_after( b, this, 6 ) && !( this.opened != 0 ) && !this.wiresexposed && !( ( this.stat & 9 ) != 0 ) && !( this.emagged != 0 ) ) {
						
						if ( Rand13.PercentChance( 50 ) ) {
							this.emagged = 1;
							this.locked = false;
							GlobalFuncs.to_chat( b, "You emag the APC interface." );
							this.update_icon();
						} else {
							GlobalFuncs.to_chat( b, "You fail to " + ( this.locked ? "unlock" : "lock" ) + " the APC interface." );
						}
					}
				}
			} else if ( a is Obj_Item_Stack_CableCoil && !( this.terminal != null ) && this.opened != 0 && this.has_electronics != 2 ) {
				C = a;

				if ( Convert.ToDouble( C.amount ) < 10 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You need more wires.</span>" );
					return null;
				}

				if ( this.make_terminal( b ) ) {
					C.use( 10 );
					this.terminal.connect_to_network();
				}
			} else if ( a is Obj_Item_Weapon_Wirecutters && this.opened != 0 && this.terminal != null && this.has_electronics != 2 ) {
				T = GlobalFuncs.get_turf( this );

				if ( T.intact == true ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You must remove the floor plating in front of the APC first.</span>" );
					return null;
				}
				GlobalFuncs.to_chat( b, "You begin to cut the cables..." );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 50 ) && this.opened != 0 && this.terminal != null && this.has_electronics != 2 && !( T.intact == true ) ) {
					
					if ( Rand13.PercentChance( 50 ) && Lang13.Bool( GlobalFuncs.electrocute_mob( Task13.User, this.terminal.get_powernet(), this.terminal ) ) ) {
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();
						return null;
					}
					GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_CableCoil), GlobalFuncs.get_turf( b ), 10 );
					((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " cut the cables and dismantled the power terminal.</span>", "You cut the cables and dismantle the power terminal." );
					GlobalFuncs.qdel( this.terminal );
					this.terminal = null;
				}
			} else if ( a is Obj_Item_Weapon_Circuitboard_PowerControl && this.opened != 0 && this.has_electronics == 0 && !( ( this.stat & 1 ) != 0 || this.malfhack ) ) {
				GlobalFuncs.to_chat( b, "You begin to insert the power control board into the frame..." );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 10 ) && this.opened != 0 && this.has_electronics == 0 && !( ( this.stat & 1 ) != 0 || this.malfhack ) ) {
					this.has_electronics = 1;
					GlobalFuncs.to_chat( b, "You place the power control board inside the frame." );
					GlobalFuncs.qdel( a );
					a = null;
				}
			} else if ( a is Obj_Item_Weapon_Circuitboard_PowerControl && this.opened != 0 && this.has_electronics == 0 && ( ( this.stat & 1 ) != 0 || this.malfhack ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You cannot put the board inside, the frame is damaged.</span>" );
				return null;
			} else if ( a is Obj_Item_Weapon_Weldingtool && this.opened != 0 && this.has_electronics == 0 && !( this.terminal != null ) ) {
				WT = a;

				if ( ( ((Obj_Item_Weapon_Weldingtool)WT).get_fuel() ?1:0) < 3 ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
					return null;
				}
				GlobalFuncs.to_chat( b, "You start welding the APC frame..." );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					
					if ( !( this != null ) || !Lang13.Bool( WT.remove_fuel( 3, b ) ) ) {
						return null;
					}

					if ( this.emagged != 0 || this.malfhack || ( this.stat & 1 ) != 0 || this.opened == 2 ) {
						GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ), 1 );
						((Ent_Static)b).visible_message( "<span class='warning'>" + this + " has been cut apart by " + b.name + " with the weldingtool.</span>", "You disassembled the broken APC frame.", "<span class='warning'>You hear welding.</span>" );
					} else {
						new Obj_Item_Mounted_Frame_ApcFrame( this.loc );
						((Ent_Static)b).visible_message( "<span class='warning'>" + this + " has been cut from the wall by " + b.name + " with the weldingtool.</span>", "You cut the APC frame from the wall.", "<span class='warning'>You hear welding.</span>" );
					}
					GlobalFuncs.qdel( this );
					return null;
				}
			} else if ( a is Obj_Item_Mounted_Frame_ApcFrame && this.opened != 0 && this.emagged != 0 ) {
				this.emagged = 0;

				if ( this.opened == 2 ) {
					this.opened = 1;
				}
				((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " has replaced the damaged APC frontal panel with a new one.</span>", "You replace the damaged APC frontal panel with a new one." );
				GlobalFuncs.qdel( a );
				a = null;
				this.update_icon();
			} else if ( a is Obj_Item_Mounted_Frame_ApcFrame && this.opened != 0 && ( ( this.stat & 1 ) != 0 || this.malfhack ) ) {
				
				if ( this.has_electronics != 0 ) {
					GlobalFuncs.to_chat( b, "You cannot repair this APC until you remove the electronics still inside." );
					return null;
				}
				GlobalFuncs.to_chat( b, "You begin to replace the damaged APC frame..." );

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					((Ent_Static)b).visible_message( "<span class='warning'>" + b.name + " has replaced the damaged APC frame with new one.</span>", "You replace the damaged APC frame with new one." );
					GlobalFuncs.qdel( a );
					a = null;
					this.stat &= 65534;
					this.malfai = null;
					this.malfhack = false;

					if ( this.opened == 2 ) {
						this.opened = 1;
					}
					this.update_icon();
				}
			} else if ( ( ( this.stat & 1 ) != 0 || this.malfhack ) && !( this.opened != 0 ) && ( Convert.ToDouble( a.force ) >= 5 && Convert.ToDouble( a.w_class ) >= 3 || a is Obj_Item_Weapon_Crowbar ) && Rand13.PercentChance( 20 ) ) {
				this.opened = 2;
				((Ent_Static)b).visible_message( "<span class='warning'>The APC cover was knocked down with the " + a.name + " by " + b.name + "!</span>", "<span class='warning'>You knock down the APC cover with your " + a.name + "!</span>", "You hear bang" );
				this.update_icon();
			} else {
				
				if ( b is Mob_Living_Silicon ) {
					return this.attack_hand( b );
				}

				if ( !( this.opened != 0 ) && this.wiresexposed && ( a is Obj_Item_Device_Multitool || a is Obj_Item_Weapon_Wirecutters || a is Obj_Item_Device_Assembly_Signaler ) ) {
					return this.attack_hand( b );
				}
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: apc.dm
		public override bool spook(  ) {
			
			if ( this.spooky ) {
				return false;
			}

			if ( !base.spook() ) {
				return false;
			}
			this.spooky = true;
			this.update_icon();
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.spooky = false;
				this.update_icon();
				return;
			}));
			return false;
		}

		// Function from file: apc.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int update = 0;
			string basestate = null;

			
			if ( !GlobalVars.status_overlays ) {
				GlobalVars.status_overlays = true;
				GlobalVars.status_overlays_lock = new ByTable();
				GlobalVars.status_overlays_charging = new ByTable();
				GlobalVars.status_overlays_equipment = new ByTable();
				GlobalVars.status_overlays_lighting = new ByTable();
				GlobalVars.status_overlays_environ = new ByTable();
				GlobalVars.status_overlays_lock.len = 2;
				GlobalVars.status_overlays_charging.len = 3;
				GlobalVars.status_overlays_equipment.len = 4;
				GlobalVars.status_overlays_lighting.len = 4;
				GlobalVars.status_overlays_environ.len = 4;
				GlobalVars.status_overlays_lock[1] = new Image( this.icon, "apcox-0" );
				GlobalVars.status_overlays_lock[2] = new Image( this.icon, "apcox-1" );
				GlobalVars.status_overlays_charging[1] = new Image( this.icon, "apco3-0" );
				GlobalVars.status_overlays_charging[2] = new Image( this.icon, "apco3-1" );
				GlobalVars.status_overlays_charging[3] = new Image( this.icon, "apco3-2" );
				GlobalVars.status_overlays_equipment[1] = new Image( this.icon, "apco0-0" );
				GlobalVars.status_overlays_equipment[2] = new Image( this.icon, "apco0-1" );
				GlobalVars.status_overlays_equipment[3] = new Image( this.icon, "apco0-2" );
				GlobalVars.status_overlays_equipment[4] = new Image( this.icon, "apco0-3" );
				GlobalVars.status_overlays_lighting[1] = new Image( this.icon, "apco1-0" );
				GlobalVars.status_overlays_lighting[2] = new Image( this.icon, "apco1-1" );
				GlobalVars.status_overlays_lighting[3] = new Image( this.icon, "apco1-2" );
				GlobalVars.status_overlays_lighting[4] = new Image( this.icon, "apco1-3" );
				GlobalVars.status_overlays_environ[1] = new Image( this.icon, "apco2-0" );
				GlobalVars.status_overlays_environ[2] = new Image( this.icon, "apco2-1" );
				GlobalVars.status_overlays_environ[3] = new Image( this.icon, "apco2-2" );
				GlobalVars.status_overlays_environ[4] = new Image( this.icon, "apco2-3" );
			}
			update = this.check_updates();

			if ( !( update != 0 ) ) {
				return null;
			}

			if ( ( update & 1 ) != 0 ) {
				
				if ( ( this.update_state & 128 ) != 0 ) {
					this.icon_state = "apc0";
				} else if ( ( this.update_state & 6 ) != 0 ) {
					basestate = "apc" + ( Lang13.Bool( this.cell ) ? "2" : "1" );

					if ( ( this.update_state & 2 ) != 0 ) {
						
						if ( ( this.update_state & 24 ) != 0 ) {
							this.icon_state = "apcmaint";
						} else {
							this.icon_state = basestate;
						}
					} else if ( ( this.update_state & 4 ) != 0 ) {
						this.icon_state = "" + basestate + "-nocover";
					}
				} else if ( ( this.update_state & 16 ) != 0 ) {
					this.icon_state = "apc-b";
				} else if ( ( this.update_state & 32 ) != 0 ) {
					this.icon_state = "apcemag";
				} else if ( ( this.update_state & 64 ) != 0 ) {
					this.icon_state = "apcewires";
				}
			}

			if ( !( ( this.update_state & 128 ) != 0 ) ) {
				
				if ( this.overlays.len != 0 ) {
					this.overlays = 0;
					return null;
				}
			}

			if ( ( update & 2 ) != 0 ) {
				
				if ( this.overlays.len != 0 ) {
					this.overlays = 0;
				}

				if ( !( ( this.stat & 9 ) != 0 ) && ( this.update_state & 128 ) != 0 ) {
					this.overlays.Add( GlobalVars.status_overlays_lock[( this.locked ?1:0) + 1] );
					this.overlays.Add( GlobalVars.status_overlays_charging[this.charging + 1] );

					if ( this.operating ) {
						this.overlays.Add( GlobalVars.status_overlays_equipment[( this.equipment ??0) + 1] );
						this.overlays.Add( GlobalVars.status_overlays_lighting[( this.lighting ??0) + 1] );
						this.overlays.Add( GlobalVars.status_overlays_environ[( this.environ ??0) + 1] );
					}
				}
			}
			return null;
		}

		// Function from file: apc.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( ( this.stat & 1 ) != 0 ) {
				GlobalFuncs.to_chat( user, "Looks broken." );
				return null;
			}

			if ( this.opened != 0 ) {
				
				if ( this.has_electronics != 0 && this.terminal != null ) {
					GlobalFuncs.to_chat( user, "The cover is " + ( this.opened == 2 ? "removed" : "open" ) + " and the power cell is " + ( Lang13.Bool( this.cell ) ? "installed" : "missing" ) + "." );
				} else if ( !( this.has_electronics != 0 ) && this.terminal != null ) {
					GlobalFuncs.to_chat( user, "There are some wires but no any electronics." );
				} else if ( this.has_electronics != 0 && !( this.terminal != null ) ) {
					GlobalFuncs.to_chat( user, "Electronics installed but not wired." );
				} else {
					GlobalFuncs.to_chat( user, "There is no electronics nor connected wires." );
				}
			} else if ( ( this.stat & 8 ) != 0 ) {
				GlobalFuncs.to_chat( user, "The cover is closed. Something wrong with it: it doesn't work." );
			} else if ( this.malfhack ) {
				GlobalFuncs.to_chat( user, "The cover is broken. It may be hard to force it open." );
			} else {
				GlobalFuncs.to_chat( user, "The cover is closed." );
			}
			return null;
		}

		// Function from file: apc.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );
			this.name = "" + this.areaMaster.name + " APC";
			this.update_icon();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.update();
				return;
			}));
			return false;
		}

		// Function from file: apc.dm
		public override void finalise_terminal( dynamic newloc = null ) {
			this.terminal = new Obj_Machinery_Power_Terminal( this.loc );
			this.terminal.dir = this.tdir;
			this.terminal.master = this;
			return;
		}

		// Function from file: apc.dm
		public double? setsubsystem( double? val = null ) {
			
			if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) > 0 ) {
				return ( val == 1 ? 0 : val );
			} else if ( val == 3 ) {
				return 1;
			} else {
				return 0;
			}
			return null;
		}

		// Function from file: apc.dm
		public void overload_lighting(  ) {
			Obj_Machinery_Light L = null;

			
			if ( !this.operating || this.shorted ) {
				return;
			}

			if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) >= 20 ) {
				this.cell.use( 20 );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _a in Lang13.Enumerate( this.areaMaster, typeof(Obj_Machinery_Light) )) {
						L = _a;
						
						L.on = true;
						L.broken();
						Task13.Sleep( 1 );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: apc.dm
		public void set_broken(  ) {
			
			if ( this.malfai != null && this.operating ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "malfunction" ) {
					
					if ( 1 == this.z ) {
						GlobalVars.ticker.mode.apcs--;
					}
				}
			}
			this.stat |= 1;
			this.operating = false;

			if ( this.occupant != null ) {
				this.malfvacate( true );
			}
			this.update_icon();
			this.update();
			return;
		}

		// Function from file: apc.dm
		public double? autoset( double? val = null, int on = 0 ) {
			
			if ( on == 0 ) {
				
				if ( val == 2 ) {
					return 0;
				} else if ( val == 3 ) {
					return 1;
				}
			} else if ( on == 1 ) {
				
				if ( val == 1 ) {
					return 3;
				}
			} else if ( on == 2 ) {
				
				if ( val == 3 ) {
					return 1;
				}
			}
			return val;
		}

		// Function from file: apc.dm
		public void ion_act(  ) {
			Effect_Effect_System_SmokeSpread smoke = null;
			Effect_Effect_System_SparkSpread s = null;
			dynamic M = null;

			
			if ( !this.malfhack && 1 == this.z ) {
				
				if ( Rand13.PercentChance( 3 ) ) {
					this.locked = true;

					if ( Convert.ToDouble( this.cell.charge ) > 0 ) {
						this.cell.charge = 0;
						((Obj_Item_Weapon_Cell)this.cell).corrupt();
						this.malfhack = true;
						this.update_icon();
						smoke = new Effect_Effect_System_SmokeSpread();
						smoke.set_up( 3, 0, this.loc );
						smoke.attach( this );
						smoke.start();
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 3, 1, this );
						s.start();

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							M = _a;
							
							M.show_message( "<span class='warning'>The " + this.name + " suddenly lets out a blast of smoke and some sparks!</span>", 1, "<span class='warning'>You hear sizzling electronics.</span>", 2 );
						}
					}
				}
			}
			return;
		}

		// Function from file: apc.dm
		public void malfvacate( bool? forced = null ) {
			Obj_Item_Weapon_Pinpointer point = null;
			Mind AI_mind = null;
			dynamic A = null;
			Obj_Item_Weapon_Pinpointer point2 = null;

			
			if ( !( this.occupant != null ) ) {
				return;
			}

			if ( this.occupant.parent != null && this.occupant.parent.stat != 2 ) {
				this.occupant.mind.transfer_to( this.occupant.parent );
				((dynamic)this.occupant.parent).adjustOxyLoss( this.occupant.getOxyLoss() );
				this.occupant.parent.__CallVerb("Cancel Camera View" );
				GlobalFuncs.qdel( this.occupant );
				this.occupant = null;

				if ( GlobalFuncs.seclevel2num( GlobalFuncs.get_security_level() ) == 3 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Weapon_Pinpointer) )) {
						point = _b;
						

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.malf_ai, typeof(Mind) )) {
							AI_mind = _a;
							
							A = AI_mind.current;

							if ( Convert.ToInt32( A.stat ) != 2 ) {
								point.the_disk = A;
							}
						}
					}
				}
			} else {
				GlobalFuncs.to_chat( this.occupant, "<span class='warning'>Primary core damaged, unable to return core processes.</span>" );

				if ( forced == true ) {
					this.occupant.loc = this.loc;
					this.occupant.death();
					this.occupant.gib();

					foreach (dynamic _c in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Weapon_Pinpointer) )) {
						point2 = _c;
						
						point2.the_disk = null;
					}
				}
			}
			return;
		}

		// Function from file: apc.dm
		public void malfoccupy( Mob malf = null ) {
			Obj_Item_Weapon_Pinpointer point = null;

			
			if ( !( malf is Mob_Living_Silicon_Ai ) ) {
				return;
			}

			if ( malf.loc is Obj_Machinery_Power_Apc ) {
				GlobalFuncs.to_chat( malf, "<span class='warning'>You must evacuate your current apc first.</span>" );
				return;
			}

			if ( !Lang13.Bool( ((dynamic)malf).can_shunt ) ) {
				GlobalFuncs.to_chat( malf, "<span class='warning'>You cannot shunt.</span>" );
				return;
			}

			if ( 1 != this.z ) {
				return;
			}
			this.occupant = new Mob_Living_Silicon_Ai( this, ((dynamic)malf).laws, null, true );
			this.occupant.adjustOxyLoss( ((dynamic)malf).getOxyLoss() );

			if ( !( String13.FindIgnoreCase( this.occupant.name, "APC Copy", 1, 0 ) != 0 ) ) {
				this.occupant.name = "" + malf.name + " APC Copy";
			}

			if ( Lang13.Bool( ((dynamic)malf).parent ) ) {
				this.occupant.parent = ((dynamic)malf).parent;
			} else {
				this.occupant.parent = malf;
			}
			malf.mind.transfer_to( this.occupant );
			this.occupant.eyeobj.name = "" + this.occupant.name + " (AI Eye)";

			if ( Lang13.Bool( ((dynamic)malf).parent ) ) {
				GlobalFuncs.qdel( malf );
				malf = null;
			}
			this.occupant.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "corereturn" ) );
			this.occupant.verbs.Add( typeof(GameMode_Malfunction).GetMethod( "takeover" ) );
			this.occupant.__CallVerb("Cancel Camera View" );

			if ( GlobalFuncs.seclevel2num( GlobalFuncs.get_security_level() ) == 3 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Weapon_Pinpointer) )) {
					point = _a;
					
					point.the_disk = this;
				}
			}
			return;
		}

		// Function from file: apc.dm
		public void toggle_breaker(  ) {
			this.operating = !this.operating;

			if ( this.malfai != null ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "malfunction" ) {
					
					if ( 1 == this.z ) {
						if ( this.operating ) GlobalVars.ticker.mode.apcs++; else GlobalVars.ticker.mode.apcs--;
					}
				}
			}
			this.update();
			this.update_icon();
			return;
		}

		// Function from file: apc.dm
		public bool can_use( Mob user = null, bool? loud = null ) {
			loud = loud ?? false;

			Mob AI = null;
			Mob robot = null;
			Mob H = null;
			dynamic M = null;

			
			if ( Lang13.Bool( user.stat ) && !( user is Mob_Dead_Observer ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You must be conscious to use this " + this + "!</span>" );
				return false;
			}

			if ( !( user.client != null ) ) {
				return false;
			}

			if ( !Lang13.Bool( user.dexterity_check() ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You don't have the dexterity to use this " + this + "!</span>" );
				GlobalVars.nanomanager.close_user_uis( user, this );
				return false;
			}

			if ( user.restrained() ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You must have free hands to use this " + this + "</span>" );
				return false;
			}

			if ( user.lying == true ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You must stand to use this " + this + "!</span>" );
				return false;
			}

			if ( user is Mob_Living_Silicon ) {
				AI = user;
				robot = user;

				if ( this.aidisabled || this.malfhack && this.malfai is Mob_Living_Silicon_Ai && ( AI is Mob_Living_Silicon_Ai && this.malfai != AI && this.malfai != ((dynamic)AI).parent || robot is Mob_Living_Silicon_Robot && Lang13.Bool( ((dynamic)this.malfai).connected_robots.Contains( robot ) ) ) ) {
					
					if ( !( loud == true ) ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " have AI control disabled!</span>" ).ToString() );
						GlobalVars.nanomanager.close_user_uis( user, this );
					}
					return false;
				}
			} else if ( user is Mob_Dead_Observer ) {
				
				if ( this.malfhack && this.malfai is Mob_Living_Silicon_Ai && !GlobalFuncs.isAdminGhost( user ) ) {
					
					if ( !( loud == true ) ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " have AI control disabled!</span>" ).ToString() );
						GlobalVars.nanomanager.close_user_uis( user, this );
					}
					return false;
				}
			} else if ( !GlobalFuncs.in_range( this, user ) || !( this.loc is Tile ) ) {
				GlobalVars.nanomanager.close_user_uis( user, this );
				return false;
			}
			H = user;

			if ( H is Mob_Living_Carbon_Human ) {
				
				if ( Convert.ToDouble( ((dynamic)H).getBrainLoss() ) >= 60 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						M = _a;
						
						GlobalFuncs.to_chat( M, "<span class='warning'>" + H + " stares cluelessly at " + this + " and drools.</span>" );
					}
					return false;
				} else if ( Rand13.PercentChance( Convert.ToInt32( ((dynamic)H).getBrainLoss() ) ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You momentarily forget how to use " + this + ".</span>" );
					return false;
				}
			}
			return true;
		}

		// Function from file: apc.dm
		public int isWireCut( double? wireIndex = null ) {
			return this.wires.IsIndexCut( wireIndex );
		}

		// Function from file: apc.dm
		public void update(  ) {
			
			if ( this.operating && !this.shorted ) {
				this.areaMaster.power_light = ( this.lighting ??0) > 1;
				this.areaMaster.power_equip = ( this.equipment ??0) > 1;
				this.areaMaster.power_environ = ( this.environ ??0) > 1;
			} else {
				this.areaMaster.power_light = false;
				this.areaMaster.power_equip = false;
				this.areaMaster.power_environ = false;
			}
			((Zone)this.areaMaster).power_change();
			return;
		}

		// Function from file: apc.dm
		public string report(  ) {
			return "" + this.areaMaster.name + " : " + this.equipment + "/" + this.lighting + "/" + this.environ + " (" + ( this.lastused_equip + this.lastused_light + this.lastused_environ ) + ") : " + ( Lang13.Bool( this.cell ) ? ((dynamic)( ((Obj_Item_Weapon_Cell)this.cell).percent() )) : ((dynamic)( "N/C" )) ) + " (" + this.charging + ")";
		}

		// Function from file: apc.dm
		public int get_malf_status( dynamic user = null ) {
			
			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.malf_ai.Contains( user.mind ) && user is Mob_Living_Silicon_Ai ) {
				
				if ( this.malfai == ( Lang13.Bool( user.parent ) ? user.parent : user ) ) {
					
					if ( this.occupant == user ) {
						return 3;
					} else if ( user.loc is Obj_Machinery_Power_Apc ) {
						return 4;
					} else {
						return 2;
					}
				} else {
					return 1;
				}
			} else {
				return 0;
			}
			return 0;
		}

		// Function from file: apc.dm
		public void queue_icon_update(  ) {
			
			if ( !this.updating_icon ) {
				this.updating_icon = true;
				Task13.Schedule( 100, (Task13.Closure)(() => {
					this.update_icon();
					this.updating_icon = false;
					return;
				}));
			}
			return;
		}

		// Function from file: apc.dm
		public int check_updates(  ) {
			int last_update_state = 0;
			int last_update_overlay = 0;
			int results = 0;

			last_update_state = this.update_state;
			last_update_overlay = this.update_overlay;
			this.update_state = 0;
			this.update_overlay = 0;

			if ( Lang13.Bool( this.cell ) ) {
				this.update_state |= 1;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				this.update_state |= 16;
			}

			if ( ( this.stat & 8 ) != 0 ) {
				this.update_state |= 8;
			}

			if ( this.opened != 0 ) {
				
				if ( this.opened == 1 ) {
					this.update_state |= 2;
				}

				if ( this.opened == 2 ) {
					this.update_state |= 4;
				}
			} else if ( this.emagged != 0 || this.malfai != null || this.spooky ) {
				this.update_state |= 32;
			} else if ( this.wiresexposed ) {
				this.update_state |= 64;
			}

			if ( this.update_state <= 1 ) {
				this.update_state |= 128;
			}

			if ( this.operating ) {
				this.update_overlay |= 8192;
			}

			if ( ( this.update_state & 128 ) != 0 ) {
				
				if ( this.locked ) {
					this.update_overlay |= 4096;
				}

				if ( !( this.charging != 0 ) ) {
					this.update_overlay |= 1;
				} else if ( this.charging == 1 ) {
					this.update_overlay |= 2;
				} else if ( this.charging == 2 ) {
					this.update_overlay |= 4;
				}

				if ( !Lang13.Bool( this.equipment ) ) {
					this.update_overlay |= 8;
				} else if ( this.equipment == 1 ) {
					this.update_overlay |= 16;
				} else if ( this.equipment == 2 ) {
					this.update_overlay |= 32;
				}

				if ( !Lang13.Bool( this.lighting ) ) {
					this.update_overlay |= 64;
				} else if ( this.lighting == 1 ) {
					this.update_overlay |= 128;
				} else if ( this.lighting == 2 ) {
					this.update_overlay |= 256;
				}

				if ( !Lang13.Bool( this.environ ) ) {
					this.update_overlay |= 512;
				} else if ( this.environ == 1 ) {
					this.update_overlay |= 1024;
				} else if ( this.environ == 2 ) {
					this.update_overlay |= 2048;
				}
			}
			results = 0;

			if ( last_update_state == this.update_state && last_update_overlay == this.update_overlay ) {
				return 0;
			}

			if ( last_update_state != this.update_state ) {
				results += 1;
			}

			if ( last_update_overlay != this.update_overlay && this.update_overlay != 0 ) {
				results += 2;
			}
			return results;
		}

		// Function from file: apc.dm
		public void init(  ) {
			this.has_electronics = 2;

			if ( this.cell_type != 0 ) {
				this.cell = new Obj_Item_Weapon_Cell( this );
				this.cell.maxcharge = this.cell_type;
				this.cell.charge = this.start_charge * Convert.ToDouble( this.cell.maxcharge ) / 100;
			}
			this.finalise_terminal();
			return;
		}

		// Function from file: ai.dm
		public override void AICtrlClick(  ) {
			this.Topic( "breaker=1", new ByTable().Set( "breaker", "1" ), 0 );
			return;
		}

	}

}