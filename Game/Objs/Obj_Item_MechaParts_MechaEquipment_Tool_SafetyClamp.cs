// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Tool_SafetyClamp : Obj_Item_MechaParts_MechaEquipment_Tool {

		public bool dam_force = false;
		public Obj_Mecha cargo_holder = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.equip_cooldown = 15;
			this.icon_state = "mecha_clamp";
		}

		public Obj_Item_MechaParts_MechaEquipment_Tool_SafetyClamp ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tools.dm
		public override bool action( dynamic target = null ) {
			dynamic O = null;
			Ent_Static T = null;
			dynamic M = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( !( this.cargo_holder != null ) ) {
				return false;
			}

			if ( target is Obj ) {
				O = target;

				if ( !Lang13.Bool( O.anchored ) ) {
					
					if ( ((dynamic)this.cargo_holder).cargo.len < Convert.ToDouble( ((dynamic)this.cargo_holder).cargo_capacity ) ) {
						this.chassis.occupant_message( "You lift " + target + " and start to load it into cargo compartment." );
						this.chassis.visible_message( "" + this.chassis + " lifts " + target + " and starts to load it into cargo compartment." );
						this.set_ready_state( false );
						this.chassis.use_power( this.energy_drain );
						O.anchored = 1;
						T = this.chassis.loc;

						if ( this.do_after_cooldown( target ) ) {
							
							if ( T == this.chassis.loc && this == this.chassis.selected ) {
								((dynamic)this.cargo_holder).cargo += O;
								O.loc = this.chassis;
								O.anchored = 0;
								this.chassis.occupant_message( "<font color='blue'>" + target + " succesfully loaded.</font>" );
								this.chassis.log_message( "Loaded " + O + ". Cargo compartment capacity: " + ( ((dynamic)this.cargo_holder).cargo_capacity - ((dynamic)this.cargo_holder).cargo.len ) );
							} else {
								this.chassis.occupant_message( "<font color='red'>You must hold still while handling objects.</font>" );
								O.anchored = Lang13.Initial( O, "anchored" );
							}
						}
					} else {
						this.chassis.occupant_message( "<font color='red'>Not enough room in cargo compartment.</font>" );
					}
				} else {
					this.chassis.occupant_message( "<font color='red'>" + target + " is firmly secured.</font>" );
				}
			} else if ( target is Mob_Living ) {
				M = target;

				if ( Convert.ToDouble( M.stat ) > 1 ) {
					return false;
				}

				if ( ((dynamic)this.chassis.occupant).a_intent == "hurt" ) {
					this.chassis.occupant_message( "<span class='warning'>You obliterate " + target + " with " + this.name + ", leaving blood and guts everywhere.</span>" );
					this.chassis.visible_message( "<span class='warning'>" + this.chassis + " destroys " + target + " in an unholy fury.</span>" );
				}

				if ( ((dynamic)this.chassis.occupant).a_intent == "disarm" ) {
					this.chassis.occupant_message( "<span class='warning'>You tear " + target + "'s limbs off with " + this.name + ".</span>" );
					this.chassis.visible_message( "<span class='warning'>" + this.chassis + " rips " + target + "'s arms off.</span>" );
				} else {
					Map13.StepAway( M, this.chassis, null );
					this.chassis.occupant_message( "You smash into " + target + ", sending them flying." );
					this.chassis.visible_message( "" + this.chassis + " tosses " + target + " like a piece of paper." );
				}
				this.set_ready_state( false );
				this.chassis.use_power( this.energy_drain );
				this.do_after_cooldown();
			}
			return true;
		}

		// Function from file: tools.dm
		public override void attach( Obj_Mecha M = null ) {
			base.attach( M );
			this.cargo_holder = M;
			return;
		}

		// Function from file: tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Working_Ripley ) {
					return true;
				}
			}
			return false;
		}

	}

}