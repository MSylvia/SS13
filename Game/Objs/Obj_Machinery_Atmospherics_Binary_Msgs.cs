// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Binary_Msgs : Obj_Machinery_Atmospherics_Binary {

		public int internal_volume = 10000;
		public int max_pressure = 10000;
		public int target_pressure = 4500;
		public int on = 0;
		public GasMixture air = null;
		public HtmlInterface_Nanotrasen v_interface = null;
		public dynamic update_flags = null;
		public int last_pressure = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 24;
			this.idle_power_usage = 1000;
			this.icon = "icons/obj/atmospherics/msgs.dmi";
			this.icon_state = "msgs";
		}

		// Function from file: MSGS.dm
		public Obj_Machinery_Atmospherics_Binary_Msgs ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.html_machines.Add( this );
			this.v_interface = new HtmlInterface_Nanotrasen( this, GlobalFuncs.sanitize( this.name ), 500, 520 );
			this.init_ui();
			this.air = new GasMixture();
			this.air.volume = this.internal_volume;
			this.update_icon();
			return;
		}

		// Function from file: MSGS.dm
		public override int wrenchAnchor( dynamic user = null ) {
			base.wrenchAnchor( (object)(user) );

			if ( Lang13.Bool( this.anchored ) ) {
				
				if ( ( this.dir & 3 ) != 0 ) {
					this.initialize_directions = 3;
				} else if ( ( this.dir & 12 ) != 0 ) {
					this.initialize_directions = 12;
				}
				this.initialize();
				this.build_network();

				if ( this.node1 != null ) {
					this.node1.initialize();
					this.node1.build_network();
				}

				if ( this.node2 != null ) {
					this.node2.initialize();
					this.node2.build_network();
				}
			} else {
				
				if ( this.node1 != null ) {
					this.node1.disconnect( this );

					if ( this.network1 != null ) {
						GlobalFuncs.returnToPool( this.network1 );
					}
				}

				if ( this.node2 != null ) {
					this.node2.disconnect( this );

					if ( this.network2 != null ) {
						GlobalFuncs.returnToPool( this.network2 );
					}
				}
				this.node1 = null;
				this.node2 = null;
			}
			return 0;
		}

		// Function from file: MSGS.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			bool? _default = null;

			bool update = false;
			dynamic pressure = null;
			int i = 0;

			_default = base.update_icon( (object)(location), (object)(target) );
			update = false;

			if ( Convert.ToInt32( this.update_flags & 2 ) != this.on ) {
				update = true;
			}

			if ( Lang13.Bool( this.update_flags & 1 ) != !( ( this.stat & 3 ) != 0 ) ) {
				update = true;
			}
			pressure = this.air.return_pressure();
			i = ( Num13.Floor( Convert.ToDouble( pressure / ( this.max_pressure / 5 ) ) ) <= 0 ? 0 : ( Num13.Floor( Convert.ToDouble( pressure / ( this.max_pressure / 5 ) ) ) >= 5 ? 5 : Num13.Floor( Convert.ToDouble( pressure / ( this.max_pressure / 5 ) ) ) ) );

			if ( i != this.last_pressure ) {
				update = true;
			}

			if ( !update ) {
				return _default;
			}
			this.overlays.Cut();

			if ( this.node1 != null ) {
				this.overlays.Add( "node-1" );
			}

			if ( this.node2 != null ) {
				this.overlays.Add( "node-2" );
			}

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				this.overlays.Add( "o-" + i );
				this.overlays.Add( "p" );

				if ( this.on != 0 ) {
					this.overlays.Add( "i" );
				}
			}
			return _default;
		}

		// Function from file: MSGS.dm
		public override dynamic power_change(  ) {
			dynamic _default = null;

			_default = base.power_change();
			this.update_icon();
			return _default;
		}

		// Function from file: MSGS.dm
		public override dynamic attack_ai( dynamic user = null ) {
			dynamic _default = null;

			_default = this.attack_hand( user );
			return _default;
		}

		// Function from file: MSGS.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				
				if ( a.machine == this ) {
					((Mob)a).unset_machine();
				}
				return _default;
			}
			this.v_interface.show( a );
			this.updateUsrDialog();
			return _default;
		}

		// Function from file: MSGS.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["power"] ) ) {
				this.on = Num13.Floor( ( ( String13.ParseNumber( href_list["power"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( href_list["power"] ) ??0) >= 1 ? 1 : String13.ParseNumber( href_list["power"] ) ) ) ??0 );
				this.updateUsrDialog();
				this.update_icon();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_pressure"] ) ) {
				this.target_pressure = Num13.Floor( ( ( String13.ParseNumber( href_list["set_pressure"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( href_list["set_pressure"] ) ??0) >= 4500 ? 4500 : String13.ParseNumber( href_list["set_pressure"] ) ) ) ??0 );
				this.update_icon();
				this.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: MSGS.dm
		public override void updateUsrDialog(  ) {
			dynamic total_moles = null;
			dynamic G = null;
			double? n2o_moles = null;

			
			if ( !( this.v_interface.isUsed() == true ) ) {
				return;
			}
			this.v_interface.updateContent( "pressurereadout", Num13.Round( Convert.ToDouble( this.air.return_pressure() ), 0.01 ) );
			this.v_interface.updateContent( "tempreadout", this.air.return_temperature() );
			total_moles = this.air.f_total_moles();

			if ( Num13.Round( Convert.ToDouble( total_moles ), 0.01 ) != 0 ) {
				this.v_interface.updateContent( "oxypercent", ( Num13.Round( Convert.ToDouble( this.air.oxygen * 100 / total_moles ), 0.1 ) <= 0 ? 0 : ( Num13.Round( Convert.ToDouble( this.air.oxygen * 100 / total_moles ), 0.1 ) >= 100 ? 100 : Num13.Round( Convert.ToDouble( this.air.oxygen * 100 / total_moles ), 0.1 ) ) ) );
				this.v_interface.updateContent( "nitpercent", ( Num13.Round( Convert.ToDouble( this.air.nitrogen * 100 / total_moles ), 0.1 ) <= 0 ? 0 : ( Num13.Round( Convert.ToDouble( this.air.nitrogen * 100 / total_moles ), 0.1 ) >= 100 ? 100 : Num13.Round( Convert.ToDouble( this.air.nitrogen * 100 / total_moles ), 0.1 ) ) ) );
				this.v_interface.updateContent( "co2percent", ( Num13.Round( Convert.ToDouble( this.air.carbon_dioxide * 100 / total_moles ), 0.1 ) <= 0 ? 0 : ( Num13.Round( Convert.ToDouble( this.air.carbon_dioxide * 100 / total_moles ), 0.1 ) >= 100 ? 100 : Num13.Round( Convert.ToDouble( this.air.carbon_dioxide * 100 / total_moles ), 0.1 ) ) ) );
				this.v_interface.updateContent( "plapercent", ( Num13.Round( Convert.ToDouble( this.air.toxins * 100 / total_moles ), 0.1 ) <= 0 ? 0 : ( Num13.Round( Convert.ToDouble( this.air.toxins * 100 / total_moles ), 0.1 ) >= 100 ? 100 : Num13.Round( Convert.ToDouble( this.air.toxins * 100 / total_moles ), 0.1 ) ) ) );
				G = Lang13.FindIn( typeof(Gas_SleepingAgent), this.air.trace_gases );
				n2o_moles = 0;

				if ( Lang13.Bool( G ) ) {
					n2o_moles = G.moles;
				}
				this.v_interface.updateContent( "n2opercent", ( Num13.Round( ( n2o_moles ??0) * 100 / Convert.ToDouble( total_moles ), 0.1 ) <= 0 ? 0 : ( Num13.Round( ( n2o_moles ??0) * 100 / Convert.ToDouble( total_moles ), 0.1 ) >= 100 ? 100 : Num13.Round( ( n2o_moles ??0) * 100 / Convert.ToDouble( total_moles ), 0.1 ) ) ) );
			} else {
				this.v_interface.updateContent( "oxypercent", 0 );
				this.v_interface.updateContent( "nitpercent", 0 );
				this.v_interface.updateContent( "co2percent", 0 );
				this.v_interface.updateContent( "plapercent", 0 );
				this.v_interface.updateContent( "n2opercent", 0 );
			}

			if ( this.on != 0 ) {
				this.v_interface.updateContent( "inputtoggles", new Txt( "<a href=\"?src=" ).Ref( this.v_interface ).str( ";power=1\" class=\"linkOn\">Enable</a> <a href=\"?src=" ).Ref( this.v_interface ).str( ";power=0\">Disable</a>" ).ToString() );
			} else {
				this.v_interface.updateContent( "inputtoggles", new Txt( "<a href=\"?src=" ).Ref( this.v_interface ).str( ";power=1\">Enable</a> <a href=\"?src=" ).Ref( this.v_interface ).str( ";power=0\" class=\"linkDanger\">Disable</a>" ).ToString() );
			}
			this.v_interface.updateContent( "pressureinput", "<input type=\"textbox\" name=\"set_pressure\" value=\"" + this.target_pressure + "\"/>" );
			return;
		}

		// Function from file: MSGS.dm
		public override bool? hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			
			if ( Lang13.Bool( hclient.client.mob ) ) {
				return ((Mob)hclient.client.mob).html_mob_check( this.type );
			}
			return null;
		}

		// Function from file: MSGS.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			dynamic output_starting_pressure = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;
			dynamic input_starting_pressure = null;
			double pressure_delta2 = 0;
			double transfer_moles2 = 0;
			GasMixture removed2 = null;

			_default = base.process();

			if ( ( this.stat & 3 ) != 0 ) {
				return _default;
			}
			output_starting_pressure = this.air2.return_pressure();

			if ( this.target_pressure - Convert.ToDouble( output_starting_pressure ) > 0.01 ) {
				
				if ( Convert.ToDouble( this.air.f_total_moles() ) > 0 && ( this.air.temperature ??0) > 0 ) {
					pressure_delta = this.target_pressure - Convert.ToDouble( output_starting_pressure );
					transfer_moles = pressure_delta * ( this.air2.volume ??0) / ( ( this.air.temperature ??0) * 8.314 );
					removed = this.air.remove( transfer_moles );
					this.air2.merge( removed );

					if ( this.network2 != null ) {
						((dynamic)this.network2).update = 1;
					}
				}
			}
			input_starting_pressure = this.air1.return_pressure();

			if ( this.max_pressure - Convert.ToDouble( input_starting_pressure ) > 0.01 ) {
				
				if ( Convert.ToDouble( this.air1.f_total_moles() ) > 0 && ( this.air1.temperature ??0) > 0 ) {
					pressure_delta2 = this.max_pressure - Convert.ToDouble( input_starting_pressure );
					transfer_moles2 = pressure_delta2 * ( this.air.volume ??0) / ( ( this.air1.temperature ??0) * 8.314 );
					removed2 = this.air1.remove( transfer_moles2 );
					this.air.merge( removed2 );

					if ( this.network1 != null ) {
						((dynamic)this.network1).update = 1;
					}
				}
			}
			this.updateUsrDialog();
			this.update_icon();
			return _default;
		}

		// Function from file: MSGS.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			_default = base.Destroy( (object)(brokenup) );
			GlobalVars.html_machines.Remove( this );
			GlobalFuncs.qdel( this.v_interface );
			this.v_interface = null;
			this.air = null;
			return _default;
		}

		// Function from file: MSGS.dm
		public void init_ui(  ) {
			string data = null;

			data = new Txt( @"
		<h2>
			Gas storage status
		</h2>
		<div class=""statusDisplay"">
			<div class=""statusLabel"">Total pressure: 	</div><div class=""statusValue""><span id=""pressurereadout"">0</span> kPa</div><br>
			<div class=""statusLabel"">Temperature:	 	</div><div class=""statusValue""><span id=""tempreadout"">0</span> K</div><br>
			<hr>
			<div class=""statusLabel"">Oxygen: 			</div><div class=""statusValue""><span id=""oxypercent"">0</span> %</div><br>
			<div class=""statusLabel"">Nitrogen: 			</div><div class=""statusValue""><span id=""nitpercent"">0</span> %</div><br>
			<div class=""statusLabel"">Carbon Dioxide: 	</div><div class=""statusValue""><span id=""co2percent"">0</span> %</div><br>
			<div class=""statusLabel"">Plasma: 			</div><div class=""statusValue""><span id=""plapercent"">0</span> %</div><br>
			<div class=""statusLabel"">Nitrous Oxide: 	</div><div class=""statusValue""><span id=""n2opercent"">0</span> %</div><br>
		</div>
		<h2>
			I/O controls
		</h2>
		<div class=""item"">
			<div class=""itemLabel"">Input: </div>
			<div class=""itemContent"">
				<span id=""inputtoggles"">
					<a href=""?src=" ).Ref( this.v_interface ).str( ";power=1\">Enable</a> <a href=\"?src=" ).Ref( this.v_interface ).str( @";power=0"" class=""linkDanger"">Disable</a>
				</span>
			</div>
		</div>
		<br><br>
		<div class=""item"">
			<div class=""itemLabel"">Output pressure (kPa): </div>
			<div class=""itemContent"">
				<form action=""?src=" ).Ref( this.v_interface ).str( "\" method=\"get\"><input type=\"hidden\" name=\"src\" value=\"" ).Ref( this.v_interface ).str( @"""/>
					<span id=""pressureinput""><input type=""textbox"" name=""set_pressure"" value=""0""/></span> <input type=""submit"" name=""act"" value=""Set""/>
				</form>
			</div>
		</div>
	" ).ToString();
			this.v_interface.updateContent( "content", data );
			return;
		}

		// Function from file: MSGS.dm
		[Verb]
		[VerbInfo( name: "Rotate MSGS (Counter-clockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_anticlockwise(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			return;
		}

		// Function from file: MSGS.dm
		[Verb]
		[VerbInfo( name: "Rotate MSGS (Clockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_clockwise(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return;
		}

	}

}