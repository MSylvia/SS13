// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_AreaAtmos_Area : Obj_Machinery_Computer_AreaAtmos {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.zone = "This computer is working in a wired network limited to this area.";
		}

		public Obj_Machinery_Computer_AreaAtmos_Area ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: area_atmos_computer.dm
		public override void scanscrubbers(  ) {
			bool found = false;
			dynamic T = null;
			dynamic A = null;
			Obj_Machinery_PortableAtmospherics_Scrubber_Huge scrubber = null;
			dynamic T2 = null;
			Ent_Static A2 = null;

			this.connectedscrubbers = new ByTable();
			found = false;
			T = GlobalFuncs.get_turf( this );

			if ( !( T.loc != null ) ) {
				return;
			}
			A = GlobalFuncs.get_area_master( T );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_PortableAtmospherics_Scrubber_Huge) )) {
				scrubber = _a;
				
				T2 = GlobalFuncs.get_turf( scrubber );

				if ( Lang13.Bool( T2 ) && T2.loc != null ) {
					A2 = T2.loc;

					if ( A2 is Zone && A2 == A ) {
						this.connectedscrubbers.Add( scrubber );
						found = true;
					}
				}
			}

			if ( !found ) {
				this.status = "ERROR: No scrubber found!";
			}
			this.updateUsrDialog();
			return;
		}

		// Function from file: area_atmos_computer.dm
		public override bool validscrubber( dynamic scrubber = null ) {
			dynamic T_src = null;
			Ent_Static A_src = null;
			dynamic T_scrub = null;
			Ent_Static A_scrub = null;

			
			if ( !( scrubber is Obj ) ) {
				return false;
			}
			T_src = GlobalFuncs.get_turf( this );

			if ( !( T_src.loc != null ) ) {
				return false;
			}
			A_src = T_src.loc;
			T_scrub = GlobalFuncs.get_turf( scrubber );

			if ( !( T_scrub.loc != null ) ) {
				return false;
			}
			A_scrub = T_scrub.loc;

			if ( A_scrub != A_src ) {
				return false;
			}
			return true;
		}

	}

}