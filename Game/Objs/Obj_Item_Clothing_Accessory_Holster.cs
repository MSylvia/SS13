// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Accessory_Holster : Obj_Item_Clothing_Accessory {

		public dynamic holstered = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this._color = "holster";
			this.origin_tech = "combat=2";
			this.accessory_exclusion = 1;
			this.icon_state = "holster";
		}

		public Obj_Item_Clothing_Accessory_Holster ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: holster.dm
		public override void on_removed( dynamic user = null ) {
			this.has_suit.verbs.Remove( typeof(Obj_Item_Clothing_Accessory_Holster).GetMethod( "holster_verb" ) );
			base.on_removed( (object)(user) );
			return;
		}

		// Function from file: holster.dm
		public override void on_attached( Obj_Item_Clothing_Under S = null, dynamic user = null ) {
			base.on_attached( S, (object)(user) );
			this.has_suit.verbs.Add( typeof(Obj_Item_Clothing_Accessory_Holster).GetMethod( "holster_verb" ) );
			return;
		}

		// Function from file: holster.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( Lang13.Bool( this.holstered ) ) {
				GlobalFuncs.to_chat( user, "A " + this.holstered + " is holstered here." );
			} else {
				GlobalFuncs.to_chat( user, "It is empty." );
			}
			return null;
		}

		// Function from file: holster.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.holstered ) ) {
				this.holstered.emp_act( severity );
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: holster.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.holster( a, b );
		}

		// Function from file: holster.dm
		public override int on_accessory_interact( dynamic user = null, bool? delayed = null ) {
			
			if ( Lang13.Bool( this.holstered ) && !( delayed == true ) ) {
				this.unholster( user );
				return 1;
			}
			return base.on_accessory_interact( (object)(user), delayed );
		}

		// Function from file: holster.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( this.holstered ) && this.loc == a ) {
				this.unholster( a ); return null;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: holster.dm
		public void unholster( dynamic user = null ) {
			
			if ( !Lang13.Bool( this.holstered ) ) {
				return;
			}

			if ( Lang13.Bool( ((Mob)user).get_active_hand() ) && Lang13.Bool( ((Mob)user).get_inactive_hand() ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You need an empty hand to draw the " + this.holstered + "!</span>" );
			} else {
				
				if ( user.a_intent == "hurt" ) {
					Task13.User.visible_message( "<span class='warning'>" + user + " draws the " + this.holstered + ", ready to shoot!</span></span>", "<span class='warning'>You draw the " + this.holstered + ", ready to shoot!</span>" );
				} else {
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " draws the " + this.holstered + ", pointing it at the ground.</span>", "<span class='notice'>You draw the " + this.holstered + ", pointing it at the ground.</span>" );
				}
				((Mob)user).put_in_hands( this.holstered );
				((Ent_Static)this.holstered).add_fingerprint( user );
				this.holstered = null;
			}
			return;
		}

		// Function from file: holster.dm
		public bool holster( dynamic I = null, dynamic user = null ) {
			dynamic W = null;

			
			if ( !( I is Obj_Item_Weapon_Gun ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Only guns can be holstered!</span>" );
				return false;
			}

			if ( Lang13.Bool( this.holstered ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>There is already a " + this.holstered + " holstered here!</span>" );
				return false;
			}
			W = I;

			if ( !Lang13.Bool( this.can_holster( W ) ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>This " + W + " won't fit in the " + this + "!</span>" );
				return false;
			}
			this.holstered = W;
			((Mob)user).drop_from_inventory( this.holstered );
			this.holstered.loc = this;
			((Ent_Static)this.holstered).add_fingerprint( user );
			((Ent_Static)user).visible_message( "<span class='notice'>" + user + " holsters the " + this.holstered + ".</span>", "<span class='notice'>You holster the " + this.holstered + ".</span>" );
			return true;
		}

		// Function from file: holster.dm
		public dynamic can_holster( dynamic W = null ) {
			
			if ( !Lang13.Bool( W ) || !( W is Obj_Item_Weapon_Gun ) ) {
				return null;
			}
			return ((Obj_Item_Weapon_Gun)W).isHandgun();
		}

		// Function from file: holster.dm
		[Verb]
		[VerbInfo( name: "Holster", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void holster_verb(  ) {
			dynamic H = null;
			Obj_Item_Clothing_Accessory_Holster S = null;
			dynamic W = null;

			
			if ( !( Task13.User is Mob_Living ) ) {
				return;
			}

			if ( Task13.User.isUnconscious() ) {
				return;
			}
			H = null;

			if ( this is Obj_Item_Clothing_Accessory_Holster ) {
				H = this;
			} else if ( this is Obj_Item_Clothing_Under ) {
				S = this;

				if ( ((dynamic)S).accessories.len != 0 ) {
					H = Lang13.FindIn( typeof(Obj_Item_Clothing_Accessory_Holster), ((dynamic)S).accessories );
				}
			}

			if ( !Lang13.Bool( H ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Something is very wrong.</span>" );
			}

			if ( !Lang13.Bool( H.holstered ) ) {
				
				if ( !( Task13.User.get_active_hand() is Obj_Item_Weapon_Gun ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You need your gun equiped to holster it.</span>" );
					return;
				}
				W = Task13.User.get_active_hand();
				((Obj_Item_Clothing_Accessory_Holster)H).holster( W, Task13.User );
			} else {
				((Obj_Item_Clothing_Accessory_Holster)H).unholster( Task13.User );
			}
			return;
		}

	}

}