// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Miner : Obj_Machinery_Atmospherics {

		public GasMixture air_contents = null;
		public GasMixture pumping = new GasMixture();
		public bool on = true;
		public int max_external_pressure = 10000;
		public int internal_pressure = 4500;
		public string overlay_color = "#FFFFFF";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 24;
			this.icon = "icons/obj/atmospherics/miner.dmi";
			this.icon_state = "miner";
		}

		// Function from file: gas_mine.dm
		public Obj_Machinery_Atmospherics_Miner ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.air_contents = new GasMixture();
			this.air_contents.volume = 1000;
			this.air_contents.temperature = 293.41;
			this.AddAir();
			this.air_contents.update_values();
			this.update_icon();
			return;
		}

		// Function from file: gas_mine.dm
		public override dynamic process(  ) {
			int oldstat = 0;
			GasMixture environment = null;
			dynamic environment_pressure = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			
			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( !this.on ) {
				return null;
			}
			oldstat = this.stat;

			if ( !( this.loc is Tile_Simulated ) ) {
				this.stat |= 1;
			} else {
				this.stat &= 65534;
			}

			if ( this.stat != oldstat ) {
				this.update_icon();
			}

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			environment = this.loc.return_air();
			environment_pressure = environment.return_pressure();
			this.pumping.copy_from( this.air_contents );
			pressure_delta = 10000;
			pressure_delta = Num13.MinInt( ((int)( pressure_delta )), ((int)( this.max_external_pressure - Convert.ToDouble( environment_pressure ) )) );

			if ( pressure_delta > 0.1 ) {
				transfer_moles = pressure_delta * ( environment.volume ??0) / ( ( this.pumping.temperature ??0) * 8.314 );
				removed = this.pumping.remove( transfer_moles );
				this.loc.assume_air( removed );
			}
			return null;
		}

		// Function from file: gas_mine.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			string new_icon_state = null;
			string new_color = null;
			Image I = null;

			this.overlays = 0;

			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( this.on ) {
				new_icon_state = "on";
				new_color = this.overlay_color;

				if ( ( this.stat & 1 ) != 0 ) {
					new_icon_state = "broken";
					new_color = "#FF0000";
				}
				I = new Image( this.icon, null, new_icon_state, null, this.dir );
				I.color = new_color;
				this.overlays.Add( I );
			}
			return null;
		}

		// Function from file: gas_mine.dm
		public virtual void AddAir(  ) {
			return;
		}

		// Function from file: gas_mine.dm
		public override dynamic attack_ai( dynamic user = null ) {
			base.attack_ai( (object)(user) );
			this.on = !this.on;
			this.update_icon();
			return null;
		}

		// Function from file: gas_mine.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( this.anchored ) ) {
				this.on = !this.on;
				this.update_icon();
			}
			return null;
		}

		// Function from file: gas_mine.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			return null;
		}

		// Function from file: gas_mine.dm
		public override dynamic power_change(  ) {
			base.power_change();
			this.update_icon();
			return null;
		}

		// Function from file: gas_mine.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: gas_mine.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: gas_mine.dm
		public override int wrenchAnchor( dynamic user = null ) {
			base.wrenchAnchor( (object)(user) );

			if ( this.on ) {
				this.on = false;
				this.update_icon();
			}
			return 0;
		}

	}

}