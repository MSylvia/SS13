// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers : Obj_Item_Weapon {

		public dynamic amount_per_transfer_from_this = 5;
		public ByTable possible_transfer_amounts = new ByTable(new object [] { 5, 10, 15, 25, 30 });
		public dynamic volume = 30;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.icon = "icons/obj/chemical.dmi";
		}

		// Function from file: reagent_containers.dm
		public Obj_Item_Weapon_ReagentContainers ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( this.volume );

			if ( !( this.possible_transfer_amounts != null ) ) {
				this.verbs.Remove( typeof(Obj_Item_Weapon_ReagentContainers).GetMethod( "set_APTFT" ) );
			}
			return;
		}

		// Function from file: reagent_containers.dm
		public string reagentlist( Obj_Item_Weapon_ReagentContainers snack = null ) {
			dynamic data = null;
			Reagent R = null;

			
			if ( Lang13.Bool( snack.reagents.reagent_list ) && snack.reagents.reagent_list.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( snack.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					data += new Txt().item( R.id ).str( "(" ).item( R.volume ).str( " unit" ).s().str( "); " ).ToString();
				}
				return data;
			} else {
				return "No reagents";
			}
		}

		// Function from file: reagent_containers.dm
		public ByTable get_reagent_ids(  ) {
			ByTable reagent_ids = null;
			Reagent R = null;

			reagent_ids = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				reagent_ids.Add( R.id );
			}
			return reagent_ids;
		}

		// Function from file: reagent_containers.dm
		public ByTable get_reagent_names(  ) {
			ByTable reagent_names = null;
			Reagent R = null;

			reagent_names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				reagent_names.Add( R.name );
			}
			return reagent_names;
		}

		// Function from file: reagent_containers.dm
		public bool can_transfer_an_APTFT(  ) {
			return ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.amount_per_transfer_from_this );
		}

		// Function from file: reagent_containers.dm
		public bool is_full(  ) {
			return ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.reagents.maximum_volume );
		}

		// Function from file: reagent_containers.dm
		public bool is_empty(  ) {
			return ( this.reagents.total_volume ??0) <= 0;
		}

		// Function from file: reagent_containers.dm
		public dynamic transfer( dynamic target = null, dynamic user = null, bool? can_send = null, bool? can_receive = null, int? splashable_units = null ) {
			can_send = can_send ?? GlobalVars.TRUE;
			can_receive = can_receive ?? GlobalVars.TRUE;
			splashable_units = splashable_units ?? 0;

			dynamic success = null;
			dynamic tx_amount = null;
			dynamic container = null;
			ByTable bad_reagents = null;
			dynamic tx_amount2 = null;
			double? to_splash = null;
			dynamic M = null;
			string splashed_reagents = null;
			dynamic reagent_id = null;

			
			if ( !( target is Ent_Static ) || !Lang13.Bool( this.is_open_container() ) ) {
				return -1;
			}

			if ( can_receive == true && target is Obj_Structure_ReagentDispensers ) {
				tx_amount = GlobalFuncs.transfer_sub( target, this, target.amount_per_transfer_from_this, user );

				if ( Convert.ToDouble( tx_amount ) > 0 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You fill " ).the( this ).item().item( ( this.is_full() ? " to the brim" : "" ) ).str( " with " ).item( tx_amount ).str( " units of the contents of " ).the( target ).item().str( ".</span>" ).ToString() );
				}
				return tx_amount;
			} else if ( can_send == true ) {
				container = target;

				if ( !Lang13.Bool( ((Ent_Static)container).is_open_container() ) && container is Obj_Item_Weapon_ReagentContainers ) {
					return -1;
				}
				bad_reagents = ((Reagents)this.reagents).get_bad_reagent_names();
				tx_amount2 = GlobalFuncs.transfer_sub( this, target, this.amount_per_transfer_from_this, user );
				success = tx_amount2;

				if ( Lang13.Bool( success ) ) {
					
					if ( Convert.ToDouble( tx_amount2 ) > 0 ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You transfer " ).item( tx_amount2 ).str( " units of the solution to " ).the( target ).item().str( ".</span>" ).ToString() );
					}

					if ( Convert.ToDouble( tx_amount2 ) > 0 && container.log_reagents && bad_reagents != null && bad_reagents.len > 0 ) {
						GlobalFuncs.log_reagents( user, this, target, tx_amount2, bad_reagents );
					}
					return tx_amount2;
				}
			}

			if ( !Lang13.Bool( success ) ) {
				
				if ( splashable_units != 0 ) {
					to_splash = this.reagents.total_volume;

					if ( target is Mob ) {
						
						if ( this.is_empty() || !Lang13.Bool( target.reagents ) ) {
							return -1;
						}
						M = target;
						splashed_reagents = GlobalFuncs.english_list( this.get_reagent_names() );
						GlobalFuncs.add_logs( user, M, "splashed", GlobalVars.TRUE, this, "Reagents: " + splashed_reagents );
						GlobalFuncs.splash_sub( this.reagents, M, splashable_units, user );
						return to_splash;
					} else if ( !this.is_empty() ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.LOGGED_SPLASH_REAGENTS )) {
							reagent_id = _a;
							

							if ( ((Reagents)this.reagents).has_reagent( reagent_id ) ) {
								GlobalFuncs.add_gamelogs( user, new Txt( "poured '" ).item( reagent_id ).str( "' onto " ).the( target ).item().ToString(), GlobalVars.TRUE, GlobalVars.TRUE, null, "danger" );
							}
						}
						GlobalFuncs.splash_sub( this.reagents, target, splashable_units, user );
						return to_splash;
					}
				}
			}
			return 0;
		}

		// Function from file: reagent_containers.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			return false;
		}

		// Function from file: reagent_containers.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			return null;
		}

		// Function from file: reagent_containers.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			return null;
		}

		// Function from file: reagent_containers.dm
		public override void AltClick( Mob user = null ) {
			
			if ( this.loc == Task13.User && this.possible_transfer_amounts != null ) {
				this.__CallVerb("Set transfer amount" );
				return;
			}
			base.AltClick( user ); return;
		}

		// Function from file: reagent_containers.dm
		[Verb]
		[VerbInfo( name: "Set transfer amount", group: "Object", access: VerbAccess.InRange, range: 0 )]
		public void set_APTFT(  ) {
			dynamic N = null;

			N = Interface13.Input( "Amount per transfer from this:", "" + this, null, null, this.possible_transfer_amounts, InputType.Null | InputType.Any );

			if ( Lang13.Bool( N ) ) {
				this.amount_per_transfer_from_this = N;
			}
			return;
		}

	}

}