// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_OxygenGenerator : Obj_Machinery_Atmospherics_Components_Unary {

		public bool on = false;
		public double oxygen_content = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "o2gen_map";
		}

		// Function from file: oxygen_generator.dm
		public Obj_Machinery_Atmospherics_Components_Unary_OxygenGenerator ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			dynamic air_contents = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			air_contents = this.airs[1];
			air_contents.volume = 50;
			this.airs[1] = air_contents;
			return;
		}

		// Function from file: oxygen_generator.dm
		public override int? process_atmos(  ) {
			GasMixture air_contents = null;
			double total_moles = 0;
			double current_heat_capacity = 0;
			double added_oxygen = 0;

			base.process_atmos();

			if ( !this.on ) {
				return 0;
			}
			air_contents = this.airs[1];
			total_moles = air_contents.total_moles();

			if ( total_moles < this.oxygen_content ) {
				current_heat_capacity = air_contents.heat_capacity();
				added_oxygen = this.oxygen_content - total_moles;
				air_contents.temperature = ( current_heat_capacity * Convert.ToDouble( air_contents.temperature ) + added_oxygen * 5463 ) / ( current_heat_capacity + added_oxygen * 20 );
				air_contents.assert_gas( "o2" );
				air_contents.gases["o2"][1] += added_oxygen;
				this.update_parents();
			}
			return 1;
		}

		// Function from file: oxygen_generator.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			this.overlays.Cut();

			if ( this.showpipe ) {
				this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/unary_devices.dmi", "scrub_cap", this.initialize_directions ) );
			}

			if ( !Lang13.Bool( this.nodes[1] ) || !this.on || ( this.stat & 1 ) != 0 ) {
				this.icon_state = "o2gen_off";
				return;
			} else {
				this.icon_state = "o2gen_on";
			}
			return;
		}

	}

}