// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Falsewall : Obj_Structure {

		public string mineral = "metal";
		public bool opening = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.canSmoothWith = "/turf/simulated/wall=0&/obj/structure/falsewall=0&/obj/structure/falserwall=0";
			this.icon = "icons/turf/walls.dmi";
		}

		// Function from file: false_walls.dm
		public Obj_Structure_Falsewall ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.relativewall();
			this.relativewall_neighbours();
			return;
		}

		// Function from file: false_walls.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );

			if ( this.density ) {
				this.icon_state = "" + this.mineral + "0";
				this.relativewall();
			} else {
				this.icon_state = "" + this.mineral + "fwall_open";
			}
			return null;
		}

		// Function from file: false_walls.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic T = null;
			dynamic WT = null;
			dynamic used_pick = null;
			dynamic T2 = null;

			
			if ( this.opening ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You must wait until the door has stopped moving.</span>" );
				return null;
			}

			if ( this.density ) {
				T = GlobalFuncs.get_turf( this );

				if ( T.density ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The wall is blocked!</span>" );
					return null;
				}

				if ( a is Obj_Item_Weapon_Screwdriver ) {
					((Ent_Static)b).visible_message( "" + b + " tightens some bolts on the wall.", "You tighten the bolts on the wall." );

					if ( !Lang13.Bool( this.mineral ) || this.mineral == "metal" ) {
						((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall) );
					} else {
						((Tile)T).ChangeTurf( Lang13.FindClass( "/turf/simulated/wall/mineral/" + this.mineral ) );
					}
					GlobalFuncs.qdel( this );
				}

				if ( a is Obj_Item_Weapon_Weldingtool ) {
					WT = a;

					if ( WT.welding ) {
						
						if ( !Lang13.Bool( this.mineral ) ) {
							((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall) );
						} else {
							((Tile)T).ChangeTurf( Lang13.FindClass( "/turf/simulated/wall/mineral/" + this.mineral ) );
						}

						if ( this.mineral != "plasma" ) {
							T = GlobalFuncs.get_turf( this );
							((Ent_Static)T).attackby( a, b );
						}
						GlobalFuncs.qdel( this );
					}
				}
			} else {
				GlobalFuncs.to_chat( b, "<span class='notice'>You can't reach, close it first!</span>" );
			}

			if ( a is Obj_Item_Weapon_Pickaxe ) {
				used_pick = a;

				if ( !( ( used_pick.diggables & 4 ) != 0 ) ) {
					return null;
				}
				T2 = GlobalFuncs.get_turf( this );

				if ( !Lang13.Bool( this.mineral ) ) {
					((Tile)T2).ChangeTurf( typeof(Tile_Simulated_Wall) );
				} else {
					((Tile)T2).ChangeTurf( Lang13.FindClass( "/turf/simulated/wall/mineral/" + this.mineral ) );
				}

				if ( this.mineral != "plasma" ) {
					T2 = GlobalFuncs.get_turf( this );
					((Ent_Static)T2).attackby( a, b );
				}
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: false_walls.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.opening ) {
				return null;
			}

			if ( this.density ) {
				this.opening = true;
				this.icon_state = "" + this.mineral + "fwall_open";
				Icon13.Flick( "" + this.mineral + "fwall_opening", this );
				Task13.Sleep( 15 );
				this.density = false;
				this.set_opacity( 0 );
				this.opening = false;
			} else {
				this.opening = true;
				Icon13.Flick( "" + this.mineral + "fwall_closing", this );
				this.icon_state = "" + this.mineral + "0";
				this.density = true;
				Task13.Sleep( 15 );
				this.set_opacity( 1 );
				this.relativewall();
				this.opening = false;
			}
			return null;
		}

		// Function from file: false_walls.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( user is Mob_Living_Silicon_Robot_Mommi ) {
				this.add_hiddenprint( user );
				this.attack_hand( user );
			}
			return null;
		}

		// Function from file: false_walls.dm
		public override void relativewall(  ) {
			int junction = 0;

			
			if ( !this.density ) {
				this.icon_state = "" + this.mineral + "fwall_open";
				return;
			}
			junction = this.findSmoothingNeighbors();
			this.icon_state = "" + this.mineral + junction;
			return;
		}

		// Function from file: false_walls.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Ent_Static temploc = null;
			Tile_Simulated_Wall W = null;
			Obj_Structure_Falsewall W2 = null;
			Obj_Structure_Falserwall W3 = null;

			temploc = this.loc;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( 1, temploc ), typeof(Tile_Simulated_Wall) )) {
					W = _a;
					
					W.relativewall();
				}

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( 1, temploc ), typeof(Obj_Structure_Falsewall) )) {
					W2 = _b;
					
					W2.relativewall();
				}

				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInRange( 1, temploc ), typeof(Obj_Structure_Falserwall) )) {
					W3 = _c;
					
					W3.relativewall();
				}
				return;
			}));
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}