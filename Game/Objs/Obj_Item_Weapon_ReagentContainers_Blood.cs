// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Blood : Obj_Item_Weapon_ReagentContainers {

		public string blood_type = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 200;
			this.icon = "icons/obj/bloodpack.dmi";
			this.icon_state = "empty";
		}

		// Function from file: blood_pack.dm
		public Obj_Item_Weapon_ReagentContainers_Blood ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.blood_type != null ) {
				this.name = "" + this.blood_type + " Bloodpack";
			}
			((Reagents)this.reagents).add_reagent( "blood", 200, new ByTable().Set( "donor", null ).Set( "viruses", null ).Set( "blood_DNA", null ).Set( "blood_type", this.blood_type ).Set( "resistances", null ).Set( "trace_chem", null ) );
			this.update_icon();
			return;
		}

		// Function from file: blood_pack.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			Reagent R = null;
			dynamic type = null;

			base.examine( (object)(user), size );

			if ( Map13.GetDistance( user, this ) > 3 ) {
				GlobalFuncs.to_chat( user, "<span class='info'>You can't make out the contents.</span>" );
				return null;
			}

			if ( Lang13.Bool( this.reagents ) ) {
				GlobalFuncs.to_chat( user, "It contains:" );

				if ( this.reagents.reagent_list.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
						R = _a;
						

						if ( R.id == "blood" ) {
							type = R.data["blood_type"];
							GlobalFuncs.to_chat( user, "<span class='info'>" + R.volume + " units of " + R.name + ", of type " + type + "</span>" );
						} else {
							GlobalFuncs.to_chat( user, "<span class='info'>" + R.volume + " units of " + R.name + "</span>" );
						}
					}
				} else {
					GlobalFuncs.to_chat( user, "<span class='info'>Nothing.</span>" );
				}
			}
			return null;
		}

		// Function from file: blood_pack.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int percent = 0;

			percent = Num13.Floor( ( this.reagents.total_volume ??0) / Convert.ToDouble( this.volume ) * 100 );

			dynamic _a = percent; // Was a switch-case, sorry for the mess.
			if ( 0<=_a&&_a<=9 ) {
				this.icon_state = "empty";
			} else if ( 10<=_a&&_a<=50 ) {
				this.icon_state = "half";
			} else if ( 51<=_a&&_a<=Double.PositiveInfinity ) {
				this.icon_state = "full";
			}
			return null;
		}

		// Function from file: blood_pack.dm
		public override void on_reagent_change(  ) {
			dynamic target_type = null;
			double? the_volume = null;
			Reagent A = null;

			this.update_icon();

			if ( this.reagents.total_volume == 0 && this.name != "Empty Bloodback" ) {
				this.name = "Empty Bloodpack";
				this.desc = "Empty bloodpacks are good in vampire movies, but bad in hospitals.";
			} else if ( this.reagents.reagent_list.len > 0 ) {
				target_type = null;
				the_volume = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					A = _a;
					

					if ( ( A.volume ??0) > ( the_volume ??0) && false ) {
						the_volume = A.volume;
						target_type = A.data["blood_type"];
					}
				}

				if ( Lang13.Bool( target_type ) ) {
					this.name = "" + target_type + " Bloodpack";
					this.desc = "A bloodpack filled with " + target_type + " blood.";
					this.blood_type = target_type;
				} else {
					this.name = "Murky Bloodpack";
					this.desc = "A bloodpack that's clearly not filled with blood.";
				}
			}
			return;
		}

	}

}