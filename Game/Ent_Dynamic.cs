// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Ent_Dynamic : Base_Dynamic {

		public int w_type = 0;
		public dynamic airflow_dest = null;
		public double airflow_speed = 0;
		public int airflow_time = 0;
		public double last_airflow = 0;
		public int? last_move = null;
		public dynamic anchored = 0;
		public int move_speed = 10;
		public int l_move_time = 1;
		public bool m_flag = true;
		public int throwing = 0;
		public int throw_speed = 2;
		public double? throw_range = 7;
		public bool moved_recently = false;
		public Mob pulledby = null;
		public dynamic areaMaster = null;
		public bool sound_override = false;
		public bool hard_deleted = false;
		public Ent_Dynamic tether = null;
		public bool tether_pull = false;
		public ByTable locked_atoms = null;
		public dynamic locked_to = null;
		public bool locked_should_lie = false;
		public int lockflags = 6;
		public bool internal_gravity = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.layer = 3;
		}

		// Function from file: atoms_movable.dm
		public Ent_Dynamic ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.areaMaster = GlobalFuncs.get_area_master( this );

			if ( Lang13.Bool( this.flags & 16 ) && !( this is Mob ) ) {
				GlobalFuncs.getFromPool( typeof(Mob_Virtualhearer), this );
			}
			this.locked_atoms = new ByTable();
			return;
		}

		// Function from file: atoms_movable.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			
			if ( this.throwing != 0 ) {
				this.throw_impact( Obstacle );
				this.throwing = 0;
			}

			if ( Obstacle != null && Lang13.Bool( yes ) ) {
				Obstacle.last_bumped = Game13.time;
				Obstacle.Bumped( this );
			}
			return null;
			base.Bump( Obstacle );
			return null;
		}

		// Function from file: atoms_movable.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Mob_Virtualhearer VH = null;
			Ent_Dynamic AM = null;

			
			if ( Lang13.Bool( this.flags & 16 ) && !( this is Mob ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.virtualhearers, typeof(Mob_Virtualhearer) )) {
					VH = _a;
					

					if ( VH.attached == this ) {
						GlobalFuncs.returnToPool( VH );
					}
				}
			}
			this.gcDestroyed = "Bye, world!";
			this.tag = null;
			this.loc = null;

			foreach (dynamic _b in Lang13.Enumerate( this.locked_atoms, typeof(Ent_Dynamic) )) {
				AM = _b;
				
				this.unlock_atom( AM );
			}

			if ( Lang13.Bool( this.locked_to ) ) {
				((Ent_Dynamic)this.locked_to).unlock_atom( this );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: atoms_movable.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			this.areaMaster = newarea;
			base.change_area( (object)(oldarea), (object)(newarea) );
			return;
		}

		// Function from file: atoms_movable.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			return null;
		}

		// Function from file: Airflow.dm
		public virtual dynamic airflow_hit( dynamic A = null ) {
			this.airflow_speed = 0;
			this.airflow_dest = null;
			return null;
		}

		// Function from file: Airflow.dm
		public void RepelAirflowDest( double n = 0 ) {
			Ent_Dynamic M = null;
			Ent_Dynamic H = null;
			double airflow_falloff = 0;
			int xo = 0;
			int yo = 0;
			bool od = false;
			Ent_Dynamic M2 = null;

			
			if ( this.airflow_dest == this.loc ) {
				Map13.StepAway( this, this.loc, null );
			}

			if ( this is Mob ) {
				M = this;

				if ( Lang13.Bool( ((dynamic)M).status_flags & 4096 ) || Lang13.Bool( this.flags & 128 ) ) {
					return;
				}

				if ( this is Mob_Living_Carbon_Human ) {
					H = this;

					if ( Lang13.Bool( H.locked_to ) ) {
						return;
					}

					if ( Lang13.Bool( ((dynamic)H).shoes ) ) {
						
						if ( Convert.ToDouble( ((dynamic)H).CheckSlip() ) < 0 ) {
							return;
						}
					}
				}
				GlobalFuncs.to_chat( this, "<SPAN CLASS='warning'>You are pushed away by airflow!</SPAN>" );
				this.last_airflow = Game13.time;
			}
			airflow_falloff = 9 - this.ul_FalloffAmount( this.airflow_dest );

			if ( airflow_falloff < 1 ) {
				this.airflow_dest = null;
				return;
			}
			this.airflow_speed = ( n * ( 9 / airflow_falloff ) <= 1 ? 1 : ( n * ( 9 / airflow_falloff ) >= 9 ? 9 : n * ( 9 / airflow_falloff ) ) );
			xo = Convert.ToInt32( -( this.airflow_dest.x - this.x ) );
			yo = Convert.ToInt32( -( this.airflow_dest.y - this.y ) );
			od = false;
			this.airflow_dest = null;

			if ( !this.density ) {
				this.density = true;
				od = true;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this.airflow_speed > 0) {
					this.airflow_speed = Num13.MinInt( ((int)( this.airflow_speed )), 15 );
					this.airflow_speed -= Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowSpeedDecay) ) );

					if ( this.airflow_speed > 7 ) {
						
						if ( this.airflow_time++ >= this.airflow_speed - 7 ) {
							Task13.Sleep( GlobalVars.tick_multiplier );
						}
					} else {
						Task13.Sleep( Num13.MaxInt( 1, ((int)( 10 - ( this.airflow_speed + 3 ) )) ) * GlobalVars.tick_multiplier );
					}

					if ( !Lang13.Bool( this.airflow_dest ) || this.loc == this.airflow_dest ) {
						this.airflow_dest = Map13.GetTile( ( this.x + xo <= 1 ? 1 : ( this.x + xo >= Game13.map_size_x ? Game13.map_size_x : this.x + xo ) ), ( this.y + yo <= 1 ? 1 : ( this.y + yo >= Game13.map_size_y ? Game13.map_size_y : this.y + yo ) ), this.z );
					}

					if ( this.x == 1 || this.x == Game13.map_size_x || this.y == 1 || this.y == Game13.map_size_y ) {
						return;
					}

					if ( !( this.loc is Tile ) ) {
						return;
					}
					Map13.StepTowardsSimple( this, this.airflow_dest );

					if ( this is Mob && Lang13.Bool( ((dynamic)this).client ) ) {
						M2 = this;
						((dynamic)M2).delayNextMove( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowMobSlowdown) ) );
					}
				}
				this.airflow_dest = null;
				this.airflow_speed = 0;
				this.airflow_time = 0;

				if ( od ) {
					this.density = false;
				}
				return;
			}));
			return;
		}

		// Function from file: Airflow.dm
		public void GotoAirflowDest( double n = 0 ) {
			Ent_Dynamic M = null;
			Ent_Dynamic H = null;
			double airflow_falloff = 0;
			int xo = 0;
			int yo = 0;
			bool od = false;
			Ent_Dynamic M2 = null;

			this.last_airflow = Game13.time;

			if ( this.airflow_dest == this.loc ) {
				return;
			}

			if ( this is Mob ) {
				M = this;

				if ( Lang13.Bool( ((dynamic)M).status_flags & 4096 ) || Lang13.Bool( this.flags & 128 ) ) {
					return;
				}

				if ( this is Mob_Living_Carbon_Human ) {
					H = this;

					if ( Lang13.Bool( H.locked_to ) ) {
						return;
					}

					if ( Lang13.Bool( ((dynamic)H).shoes ) ) {
						
						if ( Convert.ToDouble( ((dynamic)H).CheckSlip() ) < 0 ) {
							return;
						}
					}
				}
				GlobalFuncs.to_chat( this, "<SPAN CLASS='warning'>You are sucked away by airflow!</SPAN>" );
			}
			airflow_falloff = 9 - this.ul_FalloffAmount( this.airflow_dest );

			if ( airflow_falloff < 1 ) {
				this.airflow_dest = null;
				return;
			}
			this.airflow_speed = ( n * ( 9 / airflow_falloff ) <= 1 ? 1 : ( n * ( 9 / airflow_falloff ) >= 9 ? 9 : n * ( 9 / airflow_falloff ) ) );
			xo = Convert.ToInt32( this.airflow_dest.x - this.x );
			yo = Convert.ToInt32( this.airflow_dest.y - this.y );
			od = false;
			this.airflow_dest = null;

			if ( !this.density ) {
				this.density = true;
				od = true;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this.airflow_speed > 0) {
					this.airflow_speed = Num13.MinInt( ((int)( this.airflow_speed )), 15 );
					this.airflow_speed -= Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowSpeedDecay) ) );

					if ( this.airflow_speed > 7 ) {
						
						if ( this.airflow_time++ >= this.airflow_speed - 7 ) {
							
							if ( od ) {
								this.density = false;
							}
							Task13.Sleep( GlobalVars.tick_multiplier );
						}
					} else {
						
						if ( od ) {
							this.density = false;
						}
						Task13.Sleep( Num13.MaxInt( 1, ((int)( 10 - ( this.airflow_speed + 3 ) )) ) * GlobalVars.tick_multiplier );
					}

					if ( od ) {
						this.density = true;
					}

					if ( !Lang13.Bool( this.airflow_dest ) || this.loc == this.airflow_dest ) {
						this.airflow_dest = Map13.GetTile( ( this.x + xo <= 1 ? 1 : ( this.x + xo >= Game13.map_size_x ? Game13.map_size_x : this.x + xo ) ), ( this.y + yo <= 1 ? 1 : ( this.y + yo >= Game13.map_size_y ? Game13.map_size_y : this.y + yo ) ), this.z );
					}

					if ( this.x == 1 || this.x == Game13.map_size_x || this.y == 1 || this.y == Game13.map_size_y ) {
						break;
					}

					if ( !( this.loc is Tile ) ) {
						break;
					}
					Map13.StepTowardsSimple( this, this.airflow_dest );

					if ( this is Mob && Lang13.Bool( ((dynamic)this).client ) ) {
						M2 = this;
						((dynamic)M2).delayNextMove( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowMobSlowdown) ) );
					}
				}
				this.airflow_dest = null;
				this.airflow_speed = 0;
				this.airflow_time = 0;

				if ( od ) {
					this.density = false;
				}
				return;
			}));
			return;
		}

		// Function from file: Airflow.dm
		public virtual bool AirflowCanPush(  ) {
			return true;
		}

		// Function from file: Airflow.dm
		public virtual bool check_airflow_movable( double n = 0 ) {
			
			if ( Lang13.Bool( this.anchored ) && !( this is Mob ) ) {
				return false;
			}

			if ( !( this is Obj_Item ) && n < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowDensePressure) ) ) ) {
				return false;
			}
			return true;
		}

		// Function from file: disposal.dm
		public virtual void pipe_eject( int? direction = null ) {
			return;
		}

		// Function from file: objs.dm
		public virtual bool initialize( bool? suppress_icon_check = null ) {
			return false;
		}

		// Function from file: say.dm
		public virtual dynamic GetDefaultRadio(  ) {
			return null;
		}

		// Function from file: say.dm
		public virtual Ent_Dynamic GetSource(  ) {
			return this;
		}

		// Function from file: say.dm
		public virtual dynamic GetTrack(  ) {
			return null;
		}

		// Function from file: say.dm
		public virtual dynamic GetJob(  ) {
			return null;
		}

		// Function from file: say.dm
		public virtual string get_alt_name(  ) {
			return null;
		}

		// Function from file: say.dm
		public virtual bool IsVocal(  ) {
			return true;
		}

		// Function from file: say.dm
		public virtual dynamic GetVoice(  ) {
			return this.name;
		}

		// Function from file: say.dm
		public string render_lang( Speech speech = null ) {
			string raw_message = null;
			Ent_Dynamic AM = null;
			Ent_Dynamic AM2 = null;
			Ent_Dynamic source = null;
			dynamic rendered = null;

			raw_message = speech.message;

			if ( speech.language != null ) {
				AM = speech.speaker.GetSource();

				if ( this.say_understands( ( AM is Ent_Dynamic ? AM : speech.speaker ), speech.language ) ) {
					return this.render_speech( speech );
				} else {
					return this.render_speech( speech.scramble() );
				}
			} else {
				AM2 = speech.speaker.GetSource();
				source = ( AM2 is Ent_Dynamic ? AM2 : speech.speaker );
				rendered = raw_message;

				if ( !this.say_understands( source ) ) {
					rendered = GlobalFuncs.stars( rendered );
				}
				rendered = "" + speech.lquote + String13.HtmlEncode( rendered ) + speech.rquote;

				if ( AM2 != null ) {
					return AM2.say_quote( rendered );
				} else {
					return speech.speaker.say_quote( rendered );
				}
			}
			return null;
		}

		// Function from file: say.dm
		public virtual string say_quote( dynamic text = null ) {
			string ending = null;

			
			if ( !Lang13.Bool( text ) ) {
				return "says, \"...\"";
			}
			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "asks, " + text;
			}

			if ( ending == "!" ) {
				return "exclaims, " + text;
			}
			return "says, " + text;
		}

		// Function from file: say.dm
		public string render_job( dynamic speech = null ) {
			
			if ( Lang13.Bool( speech.job ) ) {
				return " (" + speech.job + ")";
			}
			return "";
		}

		// Function from file: say.dm
		public string get_job( Game_Data speech = null ) {
			return "";
		}

		// Function from file: say.dm
		public virtual string render_speaker_track_end( dynamic speech = null ) {
			return "";
		}

		// Function from file: say.dm
		public virtual string render_speaker_track_start( dynamic speech = null ) {
			return "";
		}

		// Function from file: say.dm
		public string render_speech( Game_Data speech = null ) {
			string _default = null;

			string freqpart = null;
			string radioicon = null;
			bool pooled = false;
			dynamic filtered_speech = null;
			Ent_Dynamic source = null;

			freqpart = "";
			radioicon = "";

			if ( Lang13.Bool( ((dynamic)speech).frequency ) ) {
				
				if ( Lang13.Bool( ((dynamic)speech).radio ) ) {
					radioicon = new Txt().icon( ((dynamic)speech).radio ).ToString();
				}
				freqpart = " " + radioicon + "[" + GlobalFuncs.get_radio_name( Convert.ToDouble( ((dynamic)speech).frequency ) ) + "]";
				((dynamic)speech).wrapper_classes.Add( GlobalFuncs.get_radio_span( Convert.ToDouble( ((dynamic)speech).frequency ) ) );
			}
			pooled = false;

			if ( Lang13.Bool( ((dynamic)speech).language ) ) {
				filtered_speech = ((Language)((dynamic)speech).language).filter_speech( ((dynamic)speech).clone() );
			} else {
				filtered_speech = speech;
			}
			source = ((Ent_Dynamic)((dynamic)speech).speaker).GetSource();

			if ( !this.say_understands( source, ((dynamic)speech).language ) ) {
				filtered_speech = filtered_speech.scramble();
				pooled = true;
			}
			_default = "<span class='" + ((Speech)filtered_speech).render_wrapper_classes() + "'><span class='name'>" + this.render_speaker_track_start( filtered_speech ) + this.render_speech_name( filtered_speech ) + this.render_speaker_track_end( filtered_speech ) + freqpart + this.render_job( filtered_speech ) + "</span> " + ((Speech)filtered_speech).render_message() + "</span>";

			if ( pooled ) {
				GlobalFuncs.returnToPool( filtered_speech );
			}
			return _default;
		}

		// Function from file: say.dm
		public string render_speech_name( dynamic speech = null ) {
			return "" + speech.name + ((Speech)speech).render_as_name();
		}

		// Function from file: say.dm
		public Game_Data create_speech( dynamic message = null, int? frequency = null, Ent_Dynamic transmitter = null ) {
			frequency = frequency ?? 0;

			Game_Data speech = null;

			
			if ( !( transmitter != null ) ) {
				transmitter = this.GetDefaultRadio();
			}
			speech = GlobalFuncs.getFromPool( typeof(Speech) );
			((dynamic)speech).message = message;
			((dynamic)speech).frequency = frequency;
			((dynamic)speech).job = this.get_job( speech );
			((dynamic)speech).radio = transmitter;
			((dynamic)speech).speaker = this;
			((dynamic)speech).name = this.GetVoice();
			((dynamic)speech).as_name = this.get_alt_name();
			return speech;
		}

		// Function from file: say.dm
		public virtual void send_speech( Game_Data speech = null, dynamic message_range = null, string bubble_type = null ) {
			message_range = message_range ?? 7;
			message_range = message_range ?? 7;

			string rendered = null;
			Ent_Dynamic AM = null;

			rendered = this.render_speech( speech );

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( message_range, this ), typeof(Ent_Dynamic) )) {
				AM = _a;
				
				AM.Hear( speech, rendered );
			}
			return;
		}

		// Function from file: say.dm
		public virtual bool can_speak( dynamic message = null ) {
			return true;
		}

		// Function from file: say.dm
		public virtual dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}
			return null;
		}

		// Function from file: say.dm
		public virtual bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			radio = radio ?? this;

			Game_Data speech = null;

			
			if ( !this.can_speak() ) {
				return false;
			}

			if ( message == "" || !Lang13.Bool( message ) ) {
				return false;
			}
			speech = this.create_speech( message, null, radio );
			((dynamic)speech).language = speaking;
			this.send_speech( speech, Game13.view );
			GlobalFuncs.returnToPool( speech );
			return false;
		}

		// Function from file: atoms_movable.dm
		public virtual bool can_shuttle_move( Shuttle S = null ) {
			return true;
		}

		// Function from file: atoms_movable.dm
		public void removeHear(  ) {
			Mob_Virtualhearer VH = null;

			this.flags &= 65519;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.virtualhearers, typeof(Mob_Virtualhearer) )) {
				VH = _a;
				

				if ( VH.attached == this ) {
					GlobalFuncs.returnToPool( VH );
				}
			}
			return;
		}

		// Function from file: atoms_movable.dm
		public void addHear(  ) {
			this.flags |= 16;
			GlobalFuncs.getFromPool( typeof(Mob_Virtualhearer), this );
			return;
		}

		// Function from file: atoms_movable.dm
		public virtual bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			return true;
		}

		// Function from file: atoms_movable.dm
		public virtual bool canSingulothPull( Obj_Machinery_Singularity singulo = null ) {
			return this.singuloCanEat();
		}

		// Function from file: atoms_movable.dm
		public virtual dynamic attempt_to_follow( Ent_Dynamic A = null, dynamic T = null ) {
			Ent_Static U = null;

			
			if ( Lang13.Bool( this.anchored ) ) {
				return 0;
			}

			if ( Map13.GetDistance( T, this.loc ) <= 1 ) {
				return 1;
			} else {
				U = A.loc;
				return U.Enter( this, this.loc );
			}
		}

		// Function from file: atoms_movable.dm
		public virtual bool throw_at( dynamic target = null, double? range = null, dynamic speed = null, bool? _override = null ) {
			_override = _override ?? true;

			Mob user = null;
			double dist_x = 0;
			double dist_y = 0;
			double? dx = null;
			double? dy = null;
			double? dist_travelled = null;
			int dist_since_sleep = 0;
			dynamic a = null;
			double error = 0;
			bool tS = false;
			Tile step = null;
			Tile step2 = null;
			double error2 = 0;
			Tile step3 = null;
			Tile step4 = null;

			
			if ( !Lang13.Bool( target ) || !( this != null ) ) {
				return false;
			}

			if ( _override == true ) {
				this.sound_override = true;
			}
			this.throwing = 1;

			if ( !Lang13.Bool( speed ) ) {
				speed = this.throw_speed;
			}

			if ( Task13.User != null ) {
				user = Task13.User;

				if ( Task13.User.mutations.Contains( 4 ) ) {
					this.throwing = 2;
				}
			}
			dist_x = Math.Abs( Convert.ToDouble( target.x - this.x ) );
			dist_y = Math.Abs( Convert.ToDouble( target.y - this.y ) );

			if ( Convert.ToDouble( target.x ) > this.x ) {
				dx = GlobalVars.EAST;
			} else {
				dx = GlobalVars.WEST;
			}

			if ( Convert.ToDouble( target.y ) > this.y ) {
				dy = GlobalVars.NORTH;
			} else {
				dy = GlobalVars.SOUTH;
			}
			dist_travelled = 0;
			dist_since_sleep = 0;
			a = GlobalFuncs.get_area( this.loc );

			if ( dist_x > dist_y ) {
				error = dist_x / 2 - dist_y;
				tS = false;

				while (this != null && Lang13.Bool( target ) && ( ( this.x < Convert.ToDouble( target.x ) && dx == GlobalVars.EAST || this.x > Convert.ToDouble( target.x ) && dx == GlobalVars.WEST ) && ( dist_travelled ??0) < ( range ??0) || Lang13.Bool( a ) && a.has_gravity == false || this.loc is Tile_Space ) && this.throwing != 0 && this.loc is Tile) {
					
					if ( tS && Lang13.Bool( dist_travelled ) ) {
						this.timestopped = this.loc.timestopped;
						tS = false;
					}

					if ( this.timestopped && !Lang13.Bool( dist_travelled ) ) {
						this.timestopped = false;
						tS = true;
					}

					while (( this.loc.timestopped || this.timestopped ) && Lang13.Bool( dist_travelled )) {
						Task13.Sleep( 3 );
					}

					if ( error < 0 ) {
						step = Map13.GetStep( this, ((int)( dy ??0 )) );

						if ( !( step != null ) ) {
							break;
						}
						this.Move( step );
						this.hit_check( speed, user );
						error += dist_x;
						dist_travelled++;
						dist_since_sleep++;

						if ( dist_since_sleep >= Convert.ToDouble( speed ) ) {
							dist_since_sleep = 0;
							Task13.Sleep( 1 );
						}
					} else {
						step2 = Map13.GetStep( this, ((int)( dx ??0 )) );

						if ( !( step2 != null ) ) {
							break;
						}
						this.Move( step2 );
						this.hit_check( speed, user );
						error -= dist_y;
						dist_travelled++;
						dist_since_sleep++;

						if ( dist_since_sleep >= Convert.ToDouble( speed ) ) {
							dist_since_sleep = 0;
							Task13.Sleep( 1 );
						}
					}
					a = GlobalFuncs.get_area( this.loc );
				}
			} else {
				error2 = dist_y / 2 - dist_x;

				while (this != null && Lang13.Bool( target ) && ( ( this.y < Convert.ToDouble( target.y ) && dy == GlobalVars.NORTH || this.y > Convert.ToDouble( target.y ) && dy == GlobalVars.SOUTH ) && ( dist_travelled ??0) < ( range ??0) || Lang13.Bool( a ) && a.has_gravity == false || this.loc is Tile_Space ) && this.throwing != 0 && this.loc is Tile) {
					
					if ( this.timestopped ) {
						Task13.Sleep( 1 );
						continue;
					}

					if ( error2 < 0 ) {
						step3 = Map13.GetStep( this, ((int)( dx ??0 )) );

						if ( !( step3 != null ) ) {
							break;
						}
						this.Move( step3 );
						this.hit_check( speed, user );
						error2 += dist_y;
						dist_travelled++;
						dist_since_sleep++;

						if ( dist_since_sleep >= Convert.ToDouble( speed ) ) {
							dist_since_sleep = 0;
							Task13.Sleep( 1 );
						}
					} else {
						step4 = Map13.GetStep( this, ((int)( dy ??0 )) );

						if ( !( step4 != null ) ) {
							break;
						}
						this.Move( step4 );
						this.hit_check( speed, user );
						error2 -= dist_x;
						dist_travelled++;
						dist_since_sleep++;

						if ( dist_since_sleep >= Convert.ToDouble( speed ) ) {
							dist_since_sleep = 0;
							Task13.Sleep( 1 );
						}
					}
					a = GlobalFuncs.get_area( this.loc );
				}
			}
			this.throwing = 0;

			if ( this is Obj ) {
				this.throw_impact( GlobalFuncs.get_turf( this ), speed, user );
			}
			return false;
		}

		// Function from file: atoms_movable.dm
		public void hit_check( dynamic speed = null, Mob user = null ) {
			Ent_Static A = null;
			Ent_Static L = null;

			
			if ( this.throwing != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Ent_Static) )) {
					A = _a;
					

					if ( A == this ) {
						continue;
					}

					if ( A is Mob_Living ) {
						L = A;

						if ( Lang13.Bool( ((dynamic)L).lying ) ) {
							continue;
						}
						this.throw_impact( L, speed, user );

						if ( this.throwing == 1 ) {
							this.throwing = 0;
						}
					} else if ( A is Obj ) {
						
						if ( A.density && !A.throwpass ) {
							this.throw_impact( A, speed, user );
							this.throwing = 0;
						}
					}
				}
			}
			return;
		}

		// Function from file: atoms_movable.dm
		public bool forceEnter( dynamic destination = null ) {
			dynamic A = null;
			Ent_Dynamic AM = null;

			
			if ( Lang13.Bool( destination ) ) {
				
				if ( this.loc != null ) {
					this.loc.Exited( this );
				}
				this.loc = destination;
				this.loc.Entered( this );

				if ( destination is Tile ) {
					A = GlobalFuncs.get_area_master( destination );
					((Base_Static)A).Entered( this , null );
				}

				foreach (dynamic _a in Lang13.Enumerate( this.locked_atoms, typeof(Ent_Dynamic) )) {
					AM = _a;
					
					AM.forceMove( this.loc );
				}
				return true;
			}
			return false;
		}

		// Function from file: atoms_movable.dm
		public virtual bool forceMove( dynamic destination = null, int? no_tp = null ) {
			no_tp = no_tp ?? 0;

			dynamic A = null;
			Ent_Dynamic AM = null;
			Ent_Dynamic AM2 = null;

			
			if ( Lang13.Bool( destination ) ) {
				
				if ( this.loc != null ) {
					this.loc.Exited( this );
				}
				this.loc = destination;
				this.loc.Entered( this );

				if ( destination is Tile ) {
					A = GlobalFuncs.get_area_master( destination );
					((Base_Static)A).Entered( this , null );
				}

				foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
					AM = _a;
					
					AM.Crossed( this, no_tp );
				}

				foreach (dynamic _b in Lang13.Enumerate( this.locked_atoms, typeof(Ent_Dynamic) )) {
					AM2 = _b;
					
					AM2.forceMove( this.loc );
				}

				if ( this.on_moved is _Event ) {
					this.on_moved.Invoke( new ByTable().Set( "loc", this.loc ) );
				}
				return true;
			}
			return false;
		}

		// Function from file: atoms_movable.dm
		public virtual int recycle( Game_Data rec = null ) {
			dynamic matid = null;
			dynamic material = null;

			
			if ( this.materials != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
					matid = _a;
					
					material = ((dynamic)this.materials).getMaterial( matid );
					((dynamic)rec).addAmount( matid, ((dynamic)this.materials).storage[matid] / material.cc_per_sheet );
					((dynamic)this.materials).storage[matid] = 0;
				}
				return 1;
			}
			return 0;
		}

		// Function from file: atoms_movable.dm
		public bool unlock_from(  ) {
			
			if ( !Lang13.Bool( this.locked_to ) ) {
				return false;
			}
			((Ent_Dynamic)this.locked_to).unlock_atom( this );
			return false;
		}

		// Function from file: atoms_movable.dm
		public virtual bool unlock_atom( dynamic AM = null ) {
			dynamic M = null;

			
			if ( !this.locked_atoms.Contains( AM ) ) {
				return false;
			}
			this.locked_atoms.Remove( AM );
			AM.locked_to = null;

			if ( AM is Mob ) {
				M = AM;
				((Mob)M).update_canmove();
			}
			AM.anchored = Lang13.Initial( AM, "anchored" );

			if ( ( this.lockflags & 2 ) != 0 && AM.lockflags != 0 && 4 != 0 ) {
				this.density = Lang13.Bool( Lang13.Initial( this, "density" ) );
			}
			return true;
		}

		// Function from file: atoms_movable.dm
		public virtual bool lock_atom( dynamic AM = null ) {
			dynamic M = null;

			
			if ( Lang13.Bool( ((dynamic)( this.locked_atoms != null || Lang13.Bool( AM.locked_to ) || !( AM is Ent_Dynamic ) )).Contains( AM ) ) ) {
				return false;
			}
			AM.locked_to = this;
			this.locked_atoms.Add( AM );
			((Ent_Dynamic)AM).forceMove( this.loc );
			((Ent_Dynamic)AM).change_dir( this.dir, this );

			if ( AM is Mob ) {
				M = AM;
				((Mob)M).update_canmove();
			}
			AM.anchored = 1;

			if ( ( this.lockflags & 2 ) != 0 && ( AM.lockflags & 4 ) != 0 ) {
				this.density = true;
			}
			return true;
		}

		// Function from file: atoms_movable.dm
		public void change_dir( double? new_dir = null, Ent_Dynamic changer = null ) {
			
			if ( Lang13.Bool( this.locked_to ) && changer != this.locked_to ) {
				return;
			}

			if ( new_dir != this.dir ) {
				this.dir = ((int)( new_dir ??0 ));
				this.update_dir();
			}
			return;
		}

		// Function from file: atoms_movable.dm
		public virtual dynamic update_dir(  ) {
			Ent_Dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.locked_atoms, typeof(Ent_Dynamic) )) {
				AM = _a;
				

				if ( this.dir != AM.dir ) {
					AM.change_dir( this.dir, this );
				}
			}
			return null;
		}

		// Function from file: atoms_movable.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;

			bool _default = false;

			double move_delay = 0;
			Ent_Dynamic M = null;
			bool can_pull_tether = false;
			Ent_Static oldloc = null;
			Ent_Dynamic AM = null;
			Chain tether_datum = null;

			
			if ( !( this.loc != null ) || !Lang13.Bool( NewLoc ) ) {
				return false;
			}

			if ( this.timestopped ) {
				
				if ( !( this.pulledby != null ) || this.pulledby.timestopped ) {
					return false;
				}
			}
			move_delay = Num13.MaxInt( ((int)( Game13.tick_lag * 5 )), 1 );

			if ( this is Mob ) {
				M = this;

				if ( Lang13.Bool( ((dynamic)M).client ) ) {
					move_delay = ( ((dynamic)M).client.move_delayer.next_allowed - Game13.time + 3 ) * Game13.tick_lag;
				}
			}
			can_pull_tether = false;

			if ( this.tether != null ) {
				
				if ( Lang13.Bool( this.tether.attempt_to_follow( this, NewLoc ) ) ) {
					can_pull_tether = true;
				} else {
					return false;
				}
			}
			this.glide_size = GlobalFuncs.Ceiling( 32 / move_delay * Game13.tick_lag ) - 1;
			oldloc = this.loc;

			if ( ( this.bound_height != 32 || this.bound_width != 32 ) && this.loc == NewLoc ) {
				_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );
				this.update_dir();
				return _default;
			}

			if ( this.loc != NewLoc ) {
				
				if ( !( ( ( Dir ??0) & ( Dir ??0) - 1 ) != 0 ) ) {
					_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );
				} else if ( ( ( Dir ??0) & 1 ) != 0 ) {
					
					if ( ( ( Dir ??0) & 4 ) != 0 ) {
						Map13.Step( this, ((int)( GlobalVars.NORTH )) );

						if ( false ) {
							Map13.Step( this, ((int)( GlobalVars.EAST )) );
							_default = false;
						} else {
							Map13.Step( this, ((int)( GlobalVars.EAST )) );

							if ( false ) {
								Map13.Step( this, ((int)( GlobalVars.NORTH )) );
								_default = false;
							}
						}
					} else if ( ( ( Dir ??0) & 8 ) != 0 ) {
						Map13.Step( this, ((int)( GlobalVars.NORTH )) );

						if ( false ) {
							Map13.Step( this, ((int)( GlobalVars.WEST )) );
							_default = false;
						} else {
							Map13.Step( this, ((int)( GlobalVars.WEST )) );

							if ( false ) {
								Map13.Step( this, ((int)( GlobalVars.NORTH )) );
								_default = false;
							}
						}
					}
				} else if ( ( ( Dir ??0) & 2 ) != 0 ) {
					
					if ( ( ( Dir ??0) & 4 ) != 0 ) {
						Map13.Step( this, ((int)( GlobalVars.SOUTH )) );

						if ( false ) {
							Map13.Step( this, ((int)( GlobalVars.EAST )) );
							_default = false;
						} else {
							Map13.Step( this, ((int)( GlobalVars.EAST )) );

							if ( false ) {
								Map13.Step( this, ((int)( GlobalVars.SOUTH )) );
								_default = false;
							}
						}
					} else if ( ( ( Dir ??0) & 8 ) != 0 ) {
						Map13.Step( this, ((int)( GlobalVars.SOUTH )) );

						if ( false ) {
							Map13.Step( this, ((int)( GlobalVars.WEST )) );
							_default = false;
						} else {
							Map13.Step( this, ((int)( GlobalVars.WEST )) );

							if ( false ) {
								Map13.Step( this, ((int)( GlobalVars.SOUTH )) );
								_default = false;
							}
						}
					}
				}
			}

			if ( _default && this.locked_atoms != null && this.locked_atoms.len != 0 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _a in Lang13.Enumerate( this.locked_atoms, typeof(Ent_Dynamic) )) {
						AM = _a;
						
						AM.forceMove( this.loc );
					}
					return;
				}));
			}
			this.update_dir();

			if ( !( this.loc != null ) || this.loc == oldloc && oldloc != NewLoc ) {
				this.last_move = 0;
				return _default;
			}

			if ( this.tether != null && can_pull_tether && !this.tether_pull ) {
				((Obj_Effect_Overlay_Chain)this.tether).follow( this, oldloc );
				tether_datum = ((dynamic)this.tether).chain_datum;

				if ( !tether_datum.Check_Integrity() ) {
					tether_datum.snap = true;
					tether_datum.Delete_Chain();
				}
			}
			this.last_move = Dir;
			this.move_speed = Game13.timeofday - this.l_move_time;
			this.l_move_time = Game13.timeofday;

			if ( this.on_moved is _Event ) {
				this.on_moved.Invoke( new ByTable().Set( "loc", NewLoc ) );
			}
			return _default;
		}

		// Function from file: atoms_movable.dm
		public override void Del(  ) {
			
			if ( Lang13.Bool( this.gcDestroyed ) ) {
				
				if ( this.hard_deleted ) {
					GlobalFuncs.delete_profile( "" + this.type, 1 );
				} else {
					GlobalVars.garbageCollector.dequeue( new Txt().Ref( this ).ToString() );
					GlobalFuncs.delete_profile( "" + this.type, 2 );
				}
			} else {
				GlobalFuncs.delete_profile( "" + this.type, 0 );
				this.Destroy();
			}
			base.Del();
			return;
		}

		// Function from file: item_attack.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( a ) && !Lang13.Bool( a.flags & 4 ) ) {
				this.visible_message( "<span class='danger'>" + this + " has been hit by " + b + " with " + a + ".</span>" );
			}
			return null;
		}

		// Function from file: click.dm
		public override void CtrlClick( dynamic user = null ) {
			
			if ( this.Adjacent( user ) ) {
				((Mob)user).start_pulling( this );
			}
			return;
		}

		// Function from file: adjacent.dm
		public override bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			dynamic T = null;

			
			if ( neighbor == this.loc ) {
				return true;
			}

			if ( !( this.loc is Tile ) ) {
				return false;
			}
			T = GlobalFuncs.get_turf( this );

			if ( ((Ent_Static)T).Adjacent( neighbor, this ) ) {
				return true;
			}
			return false;
		}

	}

}