// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_Failsafe : Controller {

		public int processing_interval = 100;
		public int defcon = 0;
		public int master_iteration = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Failsafe";
		}

		// Function from file: failsafe.dm
		public Controller_Failsafe (  ) {
			
			if ( GlobalVars.Failsafe != this ) {
				
				if ( GlobalVars.Failsafe is Controller_Failsafe ) {
					GlobalFuncs.qdel( GlobalVars.Failsafe );
				}
			}
			GlobalVars.Failsafe = this;
			GlobalVars.Failsafe.process();
			return;
		}

		// Function from file: failsafe.dm
		public void stat_entry(  ) {
			
			if ( !( this.statclick != null ) ) {
				this.statclick = new Obj_Effect_Statclick_Debug( "Initializing...", this );
			}
			Interface13.Stat( "Failsafe Controller:", this.statclick.update( "Defcon: " + GlobalVars.Failsafe.defcon_pretty() + " (Interval: " + GlobalVars.Failsafe.processing_interval + " | Iteration: " + GlobalVars.Failsafe.master_iteration + ")" ) );
			return;
		}

		// Function from file: failsafe.dm
		public int defcon_pretty(  ) {
			return 5 - GlobalVars.Failsafe.defcon;
		}

		// Function from file: failsafe.dm
		public override int? process( dynamic seconds = null ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (true) {
					
					if ( !( GlobalVars.Master != null ) ) {
						new Controller_Master();
					}

					if ( this.processing_interval > 0 ) {
						
						if ( ( GlobalVars.Master.processing_interval ?1:0) > 0 ) {
							
							if ( GlobalVars.Master.iteration == this.master_iteration ) {
								
								dynamic _a = this.defcon; // Was a switch-case, sorry for the mess.
								if ( 1<=_a&&_a<=2 ) {
									this.defcon++;
								} else if ( _a==3 ) {
									GlobalVars.admins.WriteMsg( "<span class='boldannounce'>Warning: DEFCON " + this.defcon_pretty() + ". The Master Controller has not fired in the last " + this.defcon * this.processing_interval + " ticks. Automatic restart in " + this.processing_interval + " ticks.</span>" );
									this.defcon = 4;
								} else if ( _a==4 ) {
									GlobalVars.admins.WriteMsg( "<span class='boldannounce'>Warning: DEFCON " + this.defcon_pretty() + ". The Master Controller has still not fired within the last " + this.defcon * this.processing_interval + " ticks. Killing and restarting...</span>" );
									new Controller_Master();
									GlobalVars.Master.process();
									this.defcon = 0;
								}
							} else {
								this.defcon = 0;
								this.master_iteration = GlobalVars.Master.iteration;
							}
						}
						Task13.Sleep( this.processing_interval );
					} else {
						this.defcon = 0;
						Task13.Sleep( Convert.ToInt32( Lang13.Initial( this, "processing_interval" ) ) );
					}
				}
				return;
			}));
			return null;
		}

	}

}