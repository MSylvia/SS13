// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent : Game_Data {

		public bool processing = true;
		public RoundEventControl control = null;
		public double startWhen = 0;
		public double announceWhen = 0;
		public double endWhen = 0;
		public double activeFor = 0;

		// Function from file: event.dm
		public RoundEvent (  ) {
			this.setup();
			GlobalVars.SSevent.running.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: event.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( !this.processing ) {
				return null;
			}

			if ( this.activeFor == this.startWhen ) {
				this.start();
			}

			if ( this.activeFor == this.announceWhen ) {
				this.announce();
			}

			if ( this.startWhen < this.activeFor && this.activeFor < this.endWhen ) {
				this.tick();
			}

			if ( this.activeFor == this.endWhen ) {
				this.end();
			}

			if ( this.activeFor >= this.endWhen && this.activeFor >= this.announceWhen && this.activeFor >= this.startWhen ) {
				this.kill();
			}
			this.activeFor++;
			return null;
		}

		// Function from file: event.dm
		public virtual void kill(  ) {
			GlobalVars.SSevent.running.Remove( this );
			return;
		}

		// Function from file: event.dm
		public virtual void end(  ) {
			return;
		}

		// Function from file: event.dm
		public virtual void tick(  ) {
			return;
		}

		// Function from file: event.dm
		public virtual void announce(  ) {
			return;
		}

		// Function from file: event.dm
		public virtual bool start(  ) {
			return false;
		}

		// Function from file: event.dm
		public virtual void setup( int? loop = null ) {
			return;
		}

		// Function from file: events.dm
		public dynamic findEventArea(  ) {
			ByTable safe_areas = null;
			ByTable danger_areas = null;

			safe_areas = new ByTable(new object [] { typeof(Zone_TurretProtected_Ai), typeof(Zone_TurretProtected_AiUpload), typeof(Zone_Engine), typeof(Zone_Solar), typeof(Zone_Holodeck), typeof(Zone_Shuttle) });
			danger_areas = new ByTable(new object [] { typeof(Zone_Engine_BreakRoom), typeof(Zone_Engine_ChiefsOffice) });
			return Lang13.FindObj( Rand13.PickFromTable( GlobalVars.the_station_areas - safe_areas + danger_areas ) );
		}

	}

}