// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class MapTemplate : Game_Data {

		public string name = "Default Template Name";
		public double width = 0;
		public double height = 0;
		public string mappath = null;
		public dynamic mapfile = null;

		// Function from file: map_template.dm
		public MapTemplate ( string path = null, dynamic map = null, string rename = null ) {
			
			if ( Lang13.Bool( path ) ) {
				this.mappath = path;
				this.preload_size( this.mappath );
			}

			if ( Lang13.Bool( map ) ) {
				this.mapfile = map;
			}

			if ( Lang13.Bool( rename ) ) {
				this.name = rename;
			}
			return;
		}

		// Function from file: map_template.dm
		public ByTable get_affected_turfs( dynamic T = null, int? centered = null ) {
			centered = centered ?? GlobalVars.FALSE;

			Tile placement = null;
			Tile corner = null;

			placement = T;

			if ( Lang13.Bool( centered ) ) {
				corner = Map13.GetTile( ((int)( placement.x - this.width / 2 )), ((int)( placement.y - this.height / 2 )), placement.z );

				if ( corner != null ) {
					placement = corner;
				}
			}
			return Map13.FetchInBlock( placement, Map13.GetTile( ((int)( placement.x + this.width )), ((int)( placement.y + this.height )), placement.z ) );
		}

		// Function from file: map_template.dm
		public dynamic get_file(  ) {
			
			if ( Lang13.Bool( this.mapfile ) ) {
				return this.mapfile;
			}

			if ( Lang13.Bool( this.mappath ) ) {
				this.mapfile = new File( this.mappath );
				return this.mapfile;
			}
			return null;
		}

		// Function from file: map_template.dm
		public void load( dynamic T = null, int? centered = null ) {
			centered = centered ?? GlobalVars.FALSE;

			ByTable atmos_machines = null;
			ByTable cables = null;
			ByTable atoms = null;
			dynamic L = null;
			dynamic B = null;
			dynamic A = null;

			
			if ( Lang13.Bool( centered ) ) {
				T = Map13.GetTile( Convert.ToInt32( T.x - this.width / 2 ), Convert.ToInt32( T.y - this.height / 2 ), Convert.ToInt32( T.z ) );
			}

			if ( !Lang13.Bool( T ) ) {
				return;
			}

			if ( Convert.ToDouble( T.x + this.width ) > Game13.map_size_x ) {
				return;
			}

			if ( Convert.ToDouble( T.y + this.height ) > Game13.map_size_y ) {
				return;
			}
			GlobalVars.maploader.__CallVerb("load map", this.get_file(), T.x, T.y, T.z );
			atmos_machines = new ByTable();
			cables = new ByTable();
			atoms = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInBlock( T, Map13.GetTile( Convert.ToInt32( T.x + this.width ), Convert.ToInt32( T.y + this.height ), Convert.ToInt32( T.z ) ) ) )) {
				L = _b;
				
				B = L;

				foreach (dynamic _a in Lang13.Enumerate( B )) {
					A = _a;
					
					atoms.Add( A );

					if ( A is Obj_Structure_Cable ) {
						cables.Add( A );
						continue;
					}

					if ( A is Obj_Machinery_Atmospherics ) {
						atmos_machines.Add( A );
						continue;
					}
				}
			}
			GlobalVars.SSobj.setup_template_objects( atoms );
			GlobalVars.SSmachine.setup_template_powernets( cables );
			GlobalVars.SSair.setup_template_machinery( atmos_machines );
			GlobalFuncs.log_game( "" + this.name + " loaded at at " + T.x + "," + T.y + "," + T.z );
			return;
		}

		// Function from file: map_template.dm
		public void preload_size( string path = null ) {
			string quote = null;
			string map_file = null;
			int key_len = 0;
			int mapstart = 0;
			string content = null;
			int line_len = 0;

			quote = String13.GetCharFromCode( 34 );
			map_file = File13.Read( path );
			key_len = Lang13.Length( String13.SubStr( map_file, 2, String13.FindIgnoreCase( map_file, quote, 2, 0 ) ) );
			mapstart = String13.FindIgnoreCase( map_file, "\n(1,1,", 1, 0 );
			content = String13.SubStr( map_file, String13.FindIgnoreCase( map_file, quote + "\n", mapstart, 0 ) + 2, String13.FindIgnoreCase( map_file, "\n" + quote, mapstart, 0 ) + 1 );
			line_len = Lang13.Length( String13.SubStr( content, 1, String13.FindIgnoreCase( content, "\n", 2, 0 ) ) );
			this.width = line_len / key_len;
			this.height = Lang13.Length( content ) / ( line_len + 1 );
			return;
		}

	}

}