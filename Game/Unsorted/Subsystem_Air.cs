// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Air : Subsystem {

		public double cost_turfs = 0;
		public double cost_groups = 0;
		public double cost_highpressure = 0;
		public double cost_hotspots = 0;
		public double cost_superconductivity = 0;
		public double cost_pipenets = 0;
		public double cost_atmos_machinery = 0;
		public ByTable excited_groups = new ByTable();
		public ByTable active_turfs = new ByTable();
		public ByTable hotspots = new ByTable();
		public ByTable networks = new ByTable();
		public ByTable atmos_machinery = new ByTable();
		public ByTable active_super_conductivity = new ByTable();
		public ByTable high_pressure_delta = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Air";
			this.priority = -1;
			this.wait = 5;
			this.dynamic_wait = true;
			this.dwait_upper = 300;
			this.dwait_buffer = 0;
			this.dwait_delta = 10;
			this.display = 1;
		}

		// Function from file: air.dm
		public Subsystem_Air (  ) {
			
			if ( GlobalVars.SSair != this ) {
				
				if ( GlobalVars.SSair is Subsystem_Air ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSair );
				}
				GlobalVars.SSair = this;
			}
			return;
		}

		// Function from file: air.dm
		public void setup_template_machinery( ByTable atmos_machines = null ) {
			dynamic A = null;
			dynamic AM = null;
			dynamic A2 = null;
			dynamic AM2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( atmos_machines )) {
				A = _a;
				
				AM = A;
				((Obj_Machinery_Atmospherics)AM).atmosinit();
			}

			foreach (dynamic _b in Lang13.Enumerate( atmos_machines )) {
				A2 = _b;
				
				AM2 = A2;
				((Obj_Machinery_Atmospherics)AM2).build_network();
			}
			return;
		}

		// Function from file: air.dm
		public void setup_pipenets( double? z_level = null ) {
			Obj_Machinery_Atmospherics AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.atmos_machinery, typeof(Obj_Machinery_Atmospherics) )) {
				AM = _a;
				

				if ( Lang13.Bool( z_level ) && AM.z != z_level ) {
					continue;
				}
				AM.build_network();
			}
			return;
		}

		// Function from file: air.dm
		public void setup_atmos_machinery( double? z_level = null ) {
			Obj_Machinery_Atmospherics AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.atmos_machinery, typeof(Obj_Machinery_Atmospherics) )) {
				AM = _a;
				

				if ( Lang13.Bool( z_level ) && AM.z != z_level ) {
					continue;
				}
				AM.atmosinit();
			}
			return;
		}

		// Function from file: air.dm
		public void setup_allturfs( double? z_level = null ) {
			double? z_start = null;
			double? z_finish = null;
			ByTable turfs_to_init = null;
			Tile_Simulated T = null;
			dynamic tile = null;
			dynamic enemy_tile = null;
			GasMixture enemy_air = null;
			dynamic is_active = null;
			Tile_Simulated T2 = null;

			z_start = 1;
			z_finish = Game13.map_size_z;

			if ( 1 <= ( z_level ??0) && ( z_level ??0) <= Game13.map_size_z ) {
				z_level = Num13.Floor( z_level ??0 );
				z_start = z_level;
				z_finish = z_level;
			}
			turfs_to_init = Map13.FetchInBlock( Map13.GetTile( 1, 1, ((int)( z_start ??0 )) ), Map13.GetTile( Game13.map_size_x, Game13.map_size_y, ((int)( z_finish ??0 )) ) );

			foreach (dynamic _b in Lang13.Enumerate( turfs_to_init, typeof(Tile_Simulated) )) {
				T = _b;
				
				T.CalculateAdjacentTurfs();
				T.excited = false;
				this.active_turfs.Remove( T );

				if ( T.blocks_air ) {
					continue;
				}
				T.update_visuals();

				foreach (dynamic _a in Lang13.Enumerate( T.atmos_adjacent_turfs )) {
					tile = _a;
					
					enemy_tile = tile;
					enemy_air = ((Ent_Static)enemy_tile).return_air();
					is_active = T.air.compare( enemy_air );

					if ( Lang13.Bool( is_active ) ) {
						GlobalFuncs.testing( "Active turf found. Return value of compare(): " + is_active );
						T.excited = true;
						this.active_turfs.Or( T );
						break;
					}
				}
			}

			if ( this.active_turfs.len != 0 ) {
				GlobalFuncs.warning( "There are " + this.active_turfs.len + " active turfs at roundstart, this is a mapping error caused by a difference of the air between the adjacent turfs. You can see its coordinates using \"Mapping -> Show roundstart AT list\" verb (debug verbs required)" );

				foreach (dynamic _c in Lang13.Enumerate( this.active_turfs, typeof(Tile_Simulated) )) {
					T2 = _c;
					
					GlobalVars.active_turfs_startlist.Add( "" + T2.x + ", " + T2.y + ", " + T2.z + "\n" );
				}
			}
			return;
		}

		// Function from file: air.dm
		public void process_excited_groups(  ) {
			ExcitedGroup EG = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.excited_groups, typeof(ExcitedGroup) )) {
				EG = _a;
				
				EG.breakdown_cooldown++;

				if ( EG.breakdown_cooldown == 10 ) {
					EG.self_breakdown();
					return;
				}

				if ( EG.breakdown_cooldown > 20 ) {
					EG.dismantle();
				}
			}
			return;
		}

		// Function from file: air.dm
		public void add_to_active( dynamic T = null, bool? blockchanges = null ) {
			blockchanges = blockchanges ?? true;

			Tile_Simulated S = null;

			
			if ( T is Tile_Simulated && Lang13.Bool( T.air ) ) {
				T.excited = true;
				this.active_turfs.Or( T );

				if ( blockchanges == true && T.excited_group != null ) {
					T.excited_group.garbage_collect();
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( T.atmos_adjacent_turfs, typeof(Tile_Simulated) )) {
					S = _a;
					
					this.add_to_active( S );
				}
			}
			return;
		}

		// Function from file: air.dm
		public void remove_from_active( Base_Data T = null ) {
			
			if ( T is Tile_Simulated ) {
				((dynamic)T).excited = 0;
				this.active_turfs.Remove( T );

				if ( Lang13.Bool( ((dynamic)T).excited_group ) ) {
					((ExcitedGroup)((dynamic)T).excited_group).garbage_collect();
				}
			}
			return;
		}

		// Function from file: air.dm
		public void process_active_turfs(  ) {
			int fire_count = 0;
			Tile_Simulated T = null;

			fire_count = this.times_fired;

			foreach (dynamic _a in Lang13.Enumerate( this.active_turfs, typeof(Tile_Simulated) )) {
				T = _a;
				
				T.process_cell( fire_count );
			}
			return;
		}

		// Function from file: air.dm
		public void process_high_pressure_delta(  ) {
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.high_pressure_delta )) {
				T = _a;
				
				((Tile)T).high_pressure_movements();
				T.pressure_difference = 0;
			}
			this.high_pressure_delta.len = 0;
			return;
		}

		// Function from file: air.dm
		public void process_hotspots(  ) {
			Obj_Effect_Hotspot H = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.hotspots, typeof(Obj_Effect_Hotspot) )) {
				H = _a;
				
				H.process();
			}
			return;
		}

		// Function from file: air.dm
		public void process_super_conductivity(  ) {
			Tile_Simulated T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.active_super_conductivity, typeof(Tile_Simulated) )) {
				T = _a;
				
				T.super_conduct();
			}
			return;
		}

		// Function from file: air.dm
		public void process_atmos_machinery(  ) {
			double seconds = 0;
			Obj_Machinery M = null;

			seconds = this.wait * 0.1;

			foreach (dynamic _a in Lang13.Enumerate( this.atmos_machinery, typeof(Obj_Machinery) )) {
				M = _a;
				

				if ( M != null && M.process_atmos(  ) != 26 ) {
					continue;
				}
				this.atmos_machinery.Remove( M );
			}
			return;
		}

		// Function from file: air.dm
		public void process_pipenets(  ) {
			dynamic thing = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.networks )) {
				thing = _a;
				

				if ( Lang13.Bool( thing ) ) {
					((Game_Data)thing).process();
					continue;
				}
				this.networks.Remove( thing );
			}
			return;
		}

		// Function from file: air.dm
		public override void fire(  ) {
			int timer = 0;

			timer = Game13.timeofday;
			this.process_pipenets();
			this.cost_pipenets = this.cost_pipenets * 0.8 + ( Game13.timeofday - timer ) * 0.2;
			timer = Game13.timeofday;
			this.process_atmos_machinery();
			this.cost_atmos_machinery = this.cost_atmos_machinery * 0.8 + ( Game13.timeofday - timer ) * 0.2;
			timer = Game13.timeofday;
			this.process_active_turfs();
			this.cost_turfs = this.cost_turfs * 0.8 + ( Game13.timeofday - timer ) * 0.2;
			timer = Game13.timeofday;
			this.process_excited_groups();
			this.cost_groups = this.cost_groups * 0.8 + ( Game13.timeofday - timer ) * 0.2;
			timer = Game13.timeofday;
			this.process_high_pressure_delta();
			this.cost_highpressure = this.cost_highpressure * 0.8 + ( Game13.timeofday - timer ) * 0.2;
			timer = Game13.timeofday;
			this.process_hotspots();
			this.cost_hotspots = this.cost_hotspots * 0.8 + ( Game13.timeofday - timer ) * 0.2;
			timer = Game13.timeofday;
			this.process_super_conductivity();
			this.cost_superconductivity = this.cost_superconductivity * 0.8 + ( Game13.timeofday - timer ) * 0.2;
			return;
		}

		// Function from file: air.dm
		public override double Initialize( int start_timeofday = 0, double? zlevel = null ) {
			this.setup_allturfs( zlevel );
			this.setup_atmos_machinery( zlevel );
			this.setup_pipenets( zlevel );
			base.Initialize( start_timeofday, zlevel );
			return 0;
		}

		// Function from file: air.dm
		public override void stat_entry( string msg = null ) {
			msg += "C:{";
			msg += "AT:" + Num13.Round( this.cost_turfs, 0.01 ) + "|";
			msg += "EG:" + Num13.Round( this.cost_groups, 0.01 ) + "|";
			msg += "HP:" + Num13.Round( this.cost_highpressure, 0.01 ) + "|";
			msg += "HS:" + Num13.Round( this.cost_hotspots, 0.01 ) + "|";
			msg += "SC:" + Num13.Round( this.cost_superconductivity, 0.01 ) + "|";
			msg += "PN:" + Num13.Round( this.cost_pipenets, 0.01 ) + "|";
			msg += "AM:" + Num13.Round( this.cost_atmos_machinery, 0.01 );
			msg += "} ";
			msg += "AT:" + this.active_turfs.len + "|";
			msg += "EG:" + this.excited_groups.len + "|";
			msg += "HS:" + this.hotspots.len + "|";
			msg += "AS:" + this.active_super_conductivity.len;
			base.stat_entry( msg );
			return;
		}

	}

}