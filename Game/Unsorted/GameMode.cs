// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode : Game_Data {

		public string name = "invalid";
		public string config_tag = null;
		public bool votable = true;
		public bool probability = false;
		public bool station_was_nuked = false;
		public bool explosion_in_progress = false;
		public bool round_ends_with_antag_death = false;
		public ByTable modePlayer = new ByTable();
		public ByTable antag_candidates = new ByTable();
		public ByTable restricted_jobs = new ByTable();
		public ByTable protected_jobs = new ByTable();
		public int required_players = 0;
		public int required_enemies = 0;
		public int recommended_enemies = 0;
		public string antag_flag = null;
		public dynamic living_antag_player = null;
		public dynamic replacementmode = null;
		public int? round_converted = 0;
		public bool reroll_friendly = false;
		public bool continuous_sanity_checked = false;
		public int enemy_minimum_age = 7;
		public int waittime_l = 600;
		public int waittime_h = 1800;
		public ByTable changelings = new ByTable();
		public ByTable cult = new ByTable();
		public ByTable gangs = new ByTable();
		public GangPoints gang_points = null;
		public ByTable red_deities = new ByTable();
		public ByTable red_deity_prophets = new ByTable();
		public ByTable red_deity_followers = new ByTable();
		public ByTable blue_deities = new ByTable();
		public ByTable blue_deity_prophets = new ByTable();
		public ByTable blue_deity_followers = new ByTable();
		public ByTable unassigned_followers = new ByTable();
		public ByTable assigned_to_red = new ByTable();
		public ByTable assigned_to_blue = new ByTable();
		public int? abductor_teams = 0;
		public ByTable abductors = new ByTable();
		public ByTable abductees = new ByTable();
		public ByTable ape_infectees = new ByTable();
		public ByTable syndicates = new ByTable();
		public string nukeops_lastname = "";
		public ByTable head_revolutionaries = new ByTable();
		public ByTable revolutionaries = new ByTable();
		public ByTable shadows = new ByTable();
		public ByTable thralls = new ByTable();
		public ByTable shadow_objectives = new ByTable();
		public int required_thralls = 15;
		public bool shadowling_ascended = false;
		public bool shadowling_dead = false;
		public string objective_explanation = null;
		public string traitor_name = "traitor";
		public ByTable traitors = new ByTable();
		public Mind exchange_red = null;
		public dynamic exchange_blue = null;
		public ByTable wizards = new ByTable();
		public ByTable apprentices = new ByTable();

		// Function from file: extended.dm
		public virtual void announce(  ) {
			Game13.WriteMsg( "<B>The current game mode is - Extended Role-Playing!</B>" );
			Game13.WriteMsg( "<B>Just have fun and role-play!</B>" );
			return;
		}

		// Function from file: game_mode.dm
		public override int? process( dynamic seconds = null ) {
			return 0;
		}

		// Function from file: wizard.dm
		public void update_wiz_icons_removed( dynamic wiz_mind = null ) {
			AtomHud_Antag wizhud = null;

			wizhud = GlobalVars.huds[9];
			wizhud.leave_hud( wiz_mind.current );
			this.set_antag_hud( wiz_mind.current, null );
			return;
		}

		// Function from file: wizard.dm
		public void update_wiz_icons_added( Mind wiz_mind = null ) {
			AtomHud_Antag wizhud = null;

			wizhud = GlobalVars.huds[9];
			wizhud.join_hud( wiz_mind.current );
			this.set_antag_hud( wiz_mind.current, ( this.wizards.Contains( wiz_mind ) ? "wizard" : "apprentice" ) );
			return;
		}

		// Function from file: wizard.dm
		public bool auto_declare_completion_wizard(  ) {
			string text = null;
			Mind wizard = null;
			int count = 0;
			bool wizardwin = false;
			Objective objective = null;
			int i = 0;
			Obj_Effect_ProcHolder_Spell S = null;

			
			if ( this.wizards.len != 0 ) {
				text = "<br><font size=3><b>the wizards/witches were:</b></font>";

				foreach (dynamic _c in Lang13.Enumerate( this.wizards, typeof(Mind) )) {
					wizard = _c;
					
					text += "<br><b>" + wizard.key + "</b> was <b>" + wizard.name + "</b> (";

					if ( Lang13.Bool( wizard.current ) ) {
						
						if ( Convert.ToInt32( wizard.current.stat ) == 2 ) {
							text += "died";
						} else {
							text += "survived";
						}

						if ( wizard.current.real_name != wizard.name ) {
							text += " as <b>" + wizard.current.real_name + "</b>";
						}
					} else {
						text += "body destroyed";
					}
					text += ")";
					count = 1;
					wizardwin = true;

					foreach (dynamic _a in Lang13.Enumerate( wizard.objectives, typeof(Objective) )) {
						objective = _a;
						

						if ( objective.check_completion() != 0 ) {
							text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "wizard_objective", "" + objective.type + "|SUCCESS" );
						} else {
							text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='red'>Fail.</font>";
							GlobalFuncs.feedback_add_details( "wizard_objective", "" + objective.type + "|FAIL" );
							wizardwin = false;
						}
						count++;
					}

					if ( Lang13.Bool( wizard.current ) && Convert.ToInt32( wizard.current.stat ) != 2 && wizardwin ) {
						text += "<br><font color='green'><B>The wizard was successful!</B></font>";
						GlobalFuncs.feedback_add_details( "wizard_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The wizard has failed!</B></font>";
						GlobalFuncs.feedback_add_details( "wizard_success", "FAIL" );
					}

					if ( wizard.spell_list.len > 0 ) {
						text += "<br><B>" + wizard.name + " used the following spells: </B>";
						i = 1;

						foreach (dynamic _b in Lang13.Enumerate( wizard.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
							S = _b;
							
							text += "" + S.name;

							if ( wizard.spell_list.len > i ) {
								text += ", ";
							}
							i++;
						}
					}
					text += "<br>";
				}
				Game13.WriteMsg( text );
			}
			return true;
		}

		// Function from file: wizard.dm
		public bool equip_wizard( dynamic wizard_mob = null ) {
			Obj_Item_Weapon_Spellbook spellbook = null;

			
			if ( !( wizard_mob is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			GlobalFuncs.qdel( wizard_mob.wear_suit );
			GlobalFuncs.qdel( wizard_mob.head );
			GlobalFuncs.qdel( wizard_mob.shoes );
			GlobalFuncs.qdel( wizard_mob.r_hand );
			GlobalFuncs.qdel( wizard_mob.r_store );
			GlobalFuncs.qdel( wizard_mob.l_store );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset( wizard_mob ), 8 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Lightpurple( wizard_mob ), 14 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sandal( wizard_mob ), 12 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wizrobe( wizard_mob ), 13 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Wizard( wizard_mob ), 11 );

			if ( Lang13.Bool( wizard_mob.backbag ) == true ) {
				((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack( wizard_mob ), 1 );
			}

			if ( Convert.ToInt32( wizard_mob.backbag ) == 2 ) {
				((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_SatchelNorm( wizard_mob ), 1 );
			}
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box_Survival( wizard_mob ), 18 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_TeleportationScroll( wizard_mob ), 16 );
			spellbook = new Obj_Item_Weapon_Spellbook( wizard_mob );
			spellbook.owner = wizard_mob;
			((Mob)wizard_mob).equip_to_slot_or_del( spellbook, 5 );
			wizard_mob.WriteMsg( "You will find a list of available spells in your spell book. Choose your magic arsenal carefully." );
			wizard_mob.WriteMsg( "The spellbook is bound to you, and others cannot use it." );
			wizard_mob.WriteMsg( "In your pockets you will find a teleport scroll. Use it as needed." );
			wizard_mob.mind.store_memory( "<B>Remember:</B> do not forget to prepare your spells." );
			wizard_mob.update_icons();
			return true;
		}

		// Function from file: wizard.dm
		public bool learn_basic_spells( dynamic wizard_mob = null ) {
			
			if ( !( wizard_mob is Mob_Living_Carbon_Human ) || !Lang13.Bool( wizard_mob.mind ) ) {
				return false;
			}
			wizard_mob.mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Targeted_Projectile_MagicMissile( null ) );
			wizard_mob.mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Targeted_EtherealJaunt( null ) );
			return false;
		}

		// Function from file: wizard.dm
		public virtual void greet_wizard( Mind wizard = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			int obj_count = 0;
			Objective objective = null;

			
			if ( you_are == true ) {
				wizard.current.WriteMsg( "<span class='boldannounce'>You are the Space Wizard!</span>" );
			}
			wizard.current.WriteMsg( "<B>The Space Wizards Federation has given you the following tasks:</B>" );
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( wizard.objectives, typeof(Objective) )) {
				objective = _a;
				
				wizard.current.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: wizard.dm
		public void name_wizard( dynamic wizard_mob = null ) {
			dynamic wizard_name_first = null;
			dynamic wizard_name_second = null;
			string randomname = null;
			string newname = null;

			wizard_name_first = Rand13.PickFromTable( GlobalVars.wizard_first );
			wizard_name_second = Rand13.PickFromTable( GlobalVars.wizard_second );
			randomname = "" + wizard_name_first + " " + wizard_name_second;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				newname = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( wizard_mob, "You are the Space Wizard. Would you like to change your name to something else?", "Name change", randomname, null, InputType.Str | InputType.Null ) ), 1, 26 );

				if ( !Lang13.Bool( newname ) ) {
					newname = randomname;
				}
				wizard_mob.real_name = newname;
				wizard_mob.name = newname;

				if ( Lang13.Bool( wizard_mob.mind ) ) {
					wizard_mob.mind.name = newname;
				}
				return;
			}));
			return;
		}

		// Function from file: wizard.dm
		public void forge_wizard_objectives( Mind wizard = null ) {
			Objective_Assassinate kill_objective = null;
			Objective_Escape escape_objective = null;
			Objective_Steal steal_objective = null;
			Objective_Escape escape_objective2 = null;
			Objective_Assassinate kill_objective2 = null;
			Objective_Steal steal_objective2 = null;
			Objective_Survive survive_objective = null;
			Objective_Hijack hijack_objective = null;

			
			dynamic _a = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=30 ) {
				kill_objective = new Objective_Assassinate();
				kill_objective.owner = wizard;
				kill_objective.find_target();
				wizard.objectives.Add( kill_objective );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), wizard.objectives ) ) ) {
					escape_objective = new Objective_Escape();
					escape_objective.owner = wizard;
					wizard.objectives.Add( escape_objective );
				}
			} else if ( 31<=_a&&_a<=60 ) {
				steal_objective = new Objective_Steal();
				steal_objective.owner = wizard;
				steal_objective.find_target();
				wizard.objectives.Add( steal_objective );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), wizard.objectives ) ) ) {
					escape_objective2 = new Objective_Escape();
					escape_objective2.owner = wizard;
					wizard.objectives.Add( escape_objective2 );
				}
			} else if ( 61<=_a&&_a<=85 ) {
				kill_objective2 = new Objective_Assassinate();
				kill_objective2.owner = wizard;
				kill_objective2.find_target();
				wizard.objectives.Add( kill_objective2 );
				steal_objective2 = new Objective_Steal();
				steal_objective2.owner = wizard;
				steal_objective2.find_target();
				wizard.objectives.Add( steal_objective2 );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Survive), wizard.objectives ) ) ) {
					survive_objective = new Objective_Survive();
					survive_objective.owner = wizard;
					wizard.objectives.Add( survive_objective );
				}
			} else {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Hijack), wizard.objectives ) ) ) {
					hijack_objective = new Objective_Hijack();
					hijack_objective.owner = wizard;
					wizard.objectives.Add( hijack_objective );
				}
			}
			return;
		}

		// Function from file: traitor.dm
		public void assign_exchange_role( dynamic owner = null ) {
			string faction = null;
			Objective_Steal_Exchange exchange_objective = null;
			Objective_Steal_Exchange_Backstab backstab_objective = null;
			Mob_Living_Carbon_Human mob = null;
			Obj_Item_Weapon_Folder_Syndicate folder = null;
			ByTable slots = null;
			string where = null;
			dynamic equipped_slot = null;

			faction = "red";

			if ( owner == this.exchange_blue ) {
				faction = "blue";
			}
			exchange_objective = new Objective_Steal_Exchange();
			exchange_objective.set_faction( faction, ( faction == "red" ? this.exchange_blue : ((dynamic)( this.exchange_red )) ) );
			exchange_objective.owner = owner;
			owner.objectives.Add( exchange_objective );

			if ( Rand13.PercentChance( 20 ) ) {
				backstab_objective = new Objective_Steal_Exchange_Backstab();
				backstab_objective.set_faction( faction );
				backstab_objective.owner = owner;
				owner.objectives.Add( backstab_objective );
			}
			mob = owner.current;

			if ( owner == this.exchange_red ) {
				folder = new Obj_Item_Weapon_Folder_Syndicate_Red( mob.loc );
			} else {
				folder = new Obj_Item_Weapon_Folder_Syndicate_Blue( mob.loc );
			}
			slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			where = "At your feet";
			equipped_slot = mob.equip_in_one_of_slots( folder, slots );

			if ( Lang13.Bool( equipped_slot ) ) {
				where = "In your " + equipped_slot;
			}
			mob.WriteMsg( "<BR><BR><span class='info'>" + where + " is a folder containing <b>secret documents</b> that another Syndicate group wants. We have set up a meeting with one of their agents on station to make an exchange. Exercise extreme caution as they cannot be trusted and may be hostile.</span><BR>" );
			mob.update_icons();
			return;
		}

		// Function from file: traitor.dm
		public bool equip_traitor( dynamic traitor_mob = null, bool? safety = null ) {
			safety = safety ?? false;

			bool _default = false;

			string loc = null;
			dynamic I = null;
			Obj_Item_Device_Uplink U = null;
			dynamic R = null;
			dynamic P = null;

			
			if ( !( traitor_mob is Mob_Living_Carbon_Human ) ) {
				return _default;
			}
			_default = true;

			if ( Lang13.Bool( traitor_mob.mind ) ) {
				
				if ( traitor_mob.mind.assigned_role == "Clown" ) {
					traitor_mob.WriteMsg( "Your training has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
					((Dna)traitor_mob.dna).remove_mutation( "Clumsiness" );
				}
			}
			loc = "";
			I = Lang13.FindIn( typeof(Obj_Item_Device_Pda), traitor_mob.contents );

			if ( !Lang13.Bool( I ) ) {
				I = Lang13.FindIn( typeof(Obj_Item_Device_Radio), traitor_mob.contents );
			}

			if ( !Lang13.Bool( I ) ) {
				traitor_mob.WriteMsg( "Unfortunately, the Syndicate wasn't able to get you a radio." );
				_default = false;
			} else {
				U = new Obj_Item_Device_Uplink( I );
				U.owner = "" + traitor_mob.key;
				I.hidden_uplink = U;

				if ( I is Obj_Item_Device_Radio ) {
					R = I;
					R.traitor_frequency = GlobalFuncs.sanitize_frequency( Rand13.Int( 1441, 1489 ) );
					traitor_mob.WriteMsg( "The Syndicate have cunningly disguised a Syndicate Uplink as your " + R.name + " " + loc + ". Simply dial the frequency " + GlobalFuncs.format_frequency( R.traitor_frequency ) + " to unlock its hidden features." );
					traitor_mob.mind.store_memory( "<B>Radio Frequency:</B> " + GlobalFuncs.format_frequency( R.traitor_frequency ) + " (" + R.name + " " + loc + ")." );
				} else if ( I is Obj_Item_Device_Pda ) {
					P = I;
					P.lock_code = "" + Rand13.Int( 100, 999 ) + " " + Rand13.Pick(new object [] { "Alpha", "Bravo", "Delta", "Omega" });
					traitor_mob.WriteMsg( "The Syndicate have cunningly disguised a Syndicate Uplink as your " + P.name + " " + loc + ". Simply enter the code \"" + P.lock_code + "\" into the ringtone select to unlock its hidden features." );
					traitor_mob.mind.store_memory( "<B>Uplink Passcode:</B> " + P.lock_code + " (" + P.name + " " + loc + ")." );
				}
			}

			if ( !( safety == true ) ) {
				GlobalFuncs.give_codewords( traitor_mob );
			}
			return _default;
		}

		// Function from file: traitor.dm
		public bool auto_declare_completion_traitor(  ) {
			string text = null;
			Mind traitor = null;
			bool traitorwin = false;
			double TC_uses = 0;
			bool uplink_true = false;
			string purchases = null;
			Obj_Item_Device_Uplink H = null;
			string objectives = null;
			int count = 0;
			Objective objective = null;
			string special_role_text = null;

			
			if ( this.traitors.len != 0 ) {
				text = "<br><font size=3><b>The " + this.traitor_name + "s were:</b></font>";

				foreach (dynamic _c in Lang13.Enumerate( this.traitors, typeof(Mind) )) {
					traitor = _c;
					
					traitorwin = true;
					text += this.printplayer( traitor );
					TC_uses = 0;
					uplink_true = false;
					purchases = "";

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.uplinks, typeof(Obj_Item_Device_Uplink) )) {
						H = _a;
						

						if ( H != null && Lang13.Bool( H.owner ) && H.owner == traitor.key ) {
							TC_uses += H.spent_telecrystals;
							uplink_true = true;
							purchases += H.purchase_log;
						}
					}
					objectives = "";

					if ( traitor.objectives.len != 0 ) {
						count = 1;

						foreach (dynamic _b in Lang13.Enumerate( traitor.objectives, typeof(Objective) )) {
							objective = _b;
							

							if ( objective.check_completion() != 0 ) {
								objectives += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|SUCCESS" );
							} else {
								objectives += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='red'>Fail.</font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|FAIL" );
								traitorwin = false;
							}
							count++;
						}
					}

					if ( uplink_true ) {
						text += " (used " + TC_uses + " TC) " + purchases;

						if ( TC_uses == 0 && traitorwin ) {
							text += new Txt( "<BIG><IMG CLASS=icon SRC=" ).Ref( "icons/BadAss.dmi" ).str( " ICONSTATE='badass'></BIG>" ).ToString();
						}
					}
					text += objectives;
					special_role_text = null;

					if ( Lang13.Bool( traitor.special_role ) ) {
						special_role_text = String13.ToLower( traitor.special_role );
					} else {
						special_role_text = "antagonist";
					}

					if ( traitorwin ) {
						text += "<br><font color='green'><B>The " + special_role_text + " was successful!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The " + special_role_text + " has failed!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "FAIL" );
					}
					text += "<br>";
				}
				text += "<br><b>The code phrases were:</b> <font color='red'>" + GlobalVars.syndicate_code_phrase + "</font><br><b>The code responses were:</b> <font color='red'>" + GlobalVars.syndicate_code_response + "</font><br>";
				Game13.WriteMsg( text );
			}
			return true;
		}

		// Function from file: traitor.dm
		public void add_law_zero( dynamic killer = null ) {
			string law = null;
			string law_borg = null;

			law = "Accomplish your objectives at all costs.";
			law_borg = "Accomplish your AI's objectives at all costs.";
			killer.WriteMsg( "<b>Your laws have been changed!</b>" );
			((Mob_Living_Silicon)killer).set_zeroth_law( law, law_borg );
			GlobalFuncs.give_codewords( killer );
			((Mob_Living_Silicon_Ai)killer).set_syndie_radio();
			killer.WriteMsg( "Your radio has been upgraded! Use :t to speak on an encrypted channel with Syndicate Agents!" );
			((Mob_Living_Silicon_Ai)killer).add_malf_picker();
			killer.show_laws();
			return;
		}

		// Function from file: traitor.dm
		public void finalize_traitor( Mind traitor = null ) {
			
			if ( traitor.current is Mob_Living_Silicon ) {
				this.add_law_zero( traitor.current );
			} else {
				this.equip_traitor( traitor.current );
			}
			return;
		}

		// Function from file: traitor.dm
		public void greet_traitor( Mind traitor = null ) {
			int obj_count = 0;
			Objective objective = null;

			traitor.current.WriteMsg( "<B><font size=3 color=red>You are the " + this.traitor_name + ".</font></B>" );
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( traitor.objectives, typeof(Objective) )) {
				objective = _a;
				
				traitor.current.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: traitor.dm
		public virtual void forge_traitor_objectives( Mind traitor = null ) {
			int objective_count = 0;
			int special_pick = 0;
			Objective_Block block_objective = null;
			Objective_Purge purge_objective = null;
			Objective_RobotArmy robot_objective = null;
			Objective_Protect yandere_one = null;
			Objective_Maroon yandere_two = null;
			double? i = null;
			Objective_Assassinate kill_objective = null;
			Objective_Survive survive_objective = null;
			bool is_hijacker = false;
			bool martyr_chance = false;
			double? objective_count2 = null;
			ByTable active_ais = null;
			double? i2 = null;
			Objective_Destroy destroy_objective = null;
			Objective_Maroon maroon_objective = null;
			Objective_Assassinate kill_objective2 = null;
			Objective_Steal steal_objective = null;
			Objective_Hijack hijack_objective = null;
			bool martyr_compatibility = false;
			Objective O = null;
			Objective_Martyr martyr_objective = null;
			Objective_Escape escape_objective = null;

			
			if ( traitor.current is Mob_Living_Silicon ) {
				objective_count = 0;

				if ( Rand13.PercentChance( 30 ) ) {
					special_pick = Rand13.Int( 1, 4 );

					switch ((int)( special_pick )) {
						case 1:
							block_objective = new Objective_Block();
							block_objective.owner = traitor;
							traitor.objectives.Add( block_objective );
							objective_count++;
							break;
						case 2:
							purge_objective = new Objective_Purge();
							purge_objective.owner = traitor;
							traitor.objectives.Add( purge_objective );
							objective_count++;
							break;
						case 3:
							robot_objective = new Objective_RobotArmy();
							robot_objective.owner = traitor;
							traitor.objectives.Add( robot_objective );
							objective_count++;
							break;
						case 4:
							yandere_one = new Objective_Protect();
							yandere_one.owner = traitor;
							traitor.objectives.Add( yandere_one );
							yandere_one.find_target();
							objective_count++;
							yandere_two = new Objective_Maroon();
							yandere_two.owner = traitor;
							yandere_two.target = yandere_one.target;
							traitor.objectives.Add( yandere_two );
							objective_count++;
							break;
					}
				}
				i = null;
				i = objective_count;

				while (( i ??0) < ( GlobalVars.config.traitor_objectives_amount ??0)) {
					kill_objective = new Objective_Assassinate();
					kill_objective.owner = traitor;
					kill_objective.find_target();
					traitor.objectives.Add( kill_objective );
					i++;
				}
				survive_objective = new Objective_Survive();
				survive_objective.owner = traitor;
				traitor.objectives.Add( survive_objective );
			} else {
				is_hijacker = Rand13.PercentChance( 10 );
				martyr_chance = Rand13.PercentChance( 20 );
				objective_count2 = is_hijacker ?1:0;

				if ( !Lang13.Bool( this.exchange_blue ) && this.traitors.len >= 8 ) {
					
					if ( !( this.exchange_red != null ) ) {
						this.exchange_red = traitor;
					} else {
						this.exchange_blue = traitor;
						this.assign_exchange_role( this.exchange_red );
						this.assign_exchange_role( this.exchange_blue );
					}
					objective_count2 += 1;
				}
				active_ais = GlobalFuncs.active_ais();
				i2 = null;
				i2 = objective_count2;

				while (( i2 ??0) < ( GlobalVars.config.traitor_objectives_amount ??0)) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						
						if ( active_ais.len != 0 && Rand13.PercentChance( ((int)( 100 / GlobalVars.joined_player_list.len )) ) ) {
							destroy_objective = new Objective_Destroy();
							destroy_objective.owner = traitor;
							destroy_objective.find_target();
							traitor.objectives.Add( destroy_objective );
						} else if ( Rand13.PercentChance( 30 ) ) {
							maroon_objective = new Objective_Maroon();
							maroon_objective.owner = traitor;
							maroon_objective.find_target();
							traitor.objectives.Add( maroon_objective );
						} else {
							kill_objective2 = new Objective_Assassinate();
							kill_objective2.owner = traitor;
							kill_objective2.find_target();
							traitor.objectives.Add( kill_objective2 );
						}
					} else {
						steal_objective = new Objective_Steal();
						steal_objective.owner = traitor;
						steal_objective.find_target();
						traitor.objectives.Add( steal_objective );
					}
					i2++;
				}

				if ( is_hijacker && ( objective_count2 ??0) <= ( GlobalVars.config.traitor_objectives_amount ??0) ) {
					
					if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Hijack), traitor.objectives ) ) ) {
						hijack_objective = new Objective_Hijack();
						hijack_objective.owner = traitor;
						traitor.objectives.Add( hijack_objective );
						return;
					}
				}
				martyr_compatibility = true;

				foreach (dynamic _b in Lang13.Enumerate( traitor.objectives, typeof(Objective) )) {
					O = _b;
					

					if ( !O.martyr_compatible ) {
						martyr_compatibility = false;
						break;
					}
				}

				if ( martyr_compatibility && martyr_chance ) {
					martyr_objective = new Objective_Martyr();
					martyr_objective.owner = traitor;
					traitor.objectives.Add( martyr_objective );
					return;
				} else if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), traitor.objectives ) ) ) {
					escape_objective = new Objective_Escape();
					escape_objective.owner = traitor;
					traitor.objectives.Add( escape_objective );
					return;
				}
			}
			return;
		}

		// Function from file: shadowling.dm
		public void update_shadow_icons_removed( Mind shadow_mind = null ) {
			AtomHud_Antag shadow_hud = null;

			shadow_hud = GlobalVars.huds[10];
			shadow_hud.leave_hud( shadow_mind.current );
			this.set_antag_hud( shadow_mind.current, null );
			return;
		}

		// Function from file: shadowling.dm
		public void update_shadow_icons_added( Mind shadow_mind = null ) {
			AtomHud_Antag shadow_hud = null;

			shadow_hud = GlobalVars.huds[10];
			shadow_hud.join_hud( shadow_mind.current );
			this.set_antag_hud( shadow_mind.current, ( this.shadows.Contains( shadow_mind ) ? "shadowling" : "thrall" ) );
			return;
		}

		// Function from file: shadowling.dm
		public void auto_declare_completion_shadowling(  ) {
			string text = null;
			Mind shadow = null;
			Mind thrall = null;

			text = "";

			if ( this.shadows.len != 0 ) {
				text += "<br><span class='big'><b>The shadowlings were:</b></span>";

				foreach (dynamic _a in Lang13.Enumerate( this.shadows, typeof(Mind) )) {
					shadow = _a;
					
					text += this.printplayer( shadow );
				}
				text += "<br>";

				if ( this.thralls.len != 0 ) {
					text += "<br><span class='big'><b>The thralls were:</b></span>";

					foreach (dynamic _b in Lang13.Enumerate( this.thralls, typeof(Mind) )) {
						thrall = _b;
						
						text += this.printplayer( thrall );
					}
				}
			}
			text += "<br>";
			Game13.WriteMsg( text );
			return;
		}

		// Function from file: shadowling.dm
		public bool remove_shadowling( Mind ling_mind = null ) {
			Obj_Effect_ProcHolder_Spell S = null;
			dynamic M = null;

			
			if ( !( ling_mind is Mind ) || !this.shadows.Contains( ling_mind ) ) {
				return false;
			}
			this.update_shadow_icons_removed( ling_mind );
			this.shadows.Remove( ling_mind );
			ling_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <span class='danger'>Deshadowlinged</span>";
			ling_mind.special_role = null;

			foreach (dynamic _a in Lang13.Enumerate( ling_mind.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				S = _a;
				
				ling_mind.remove_spell( S );
			}
			M = ling_mind.current;

			if ( M is Mob_Living_Silicon ) {
				((Ent_Static)M).audible_message( "<span class='notice'>" + M + " lets out a short blip.</span>", "<span class='userdanger'>You have been turned into a robot! You are no longer a shadowling! Though you try, you cannot remember anything about your time as one...</span>" );
			} else {
				((Ent_Static)M).visible_message( "<span class='big'>" + M + " screams and contorts!</span>", "<span class='userdanger'>THE LIGHT-- YOUR MIND-- <i>BURNS--</i></span>" );
				Task13.Schedule( 30, (Task13.Closure)(() => {
					
					if ( !Lang13.Bool( M ) || Lang13.Bool( GlobalFuncs.qdeleted( M ) ) ) {
						return;
					}
					((Ent_Static)M).visible_message( "<span class='warning'>" + M + " suddenly bloats and explodes!</span>", "<span class='warning'><b>AAAAAAAAA<font size=3>AAAAAAAAAAAAA</font><font size=4>AAAAAAAAAAAA----</font></span>" );
					GlobalFuncs.playsound( M, "sound/magic/Disintegrate.ogg", 100, 1 );
					((Mob)M).gib();
					return;
				}));
			}
			return false;
		}

		// Function from file: shadowling.dm
		public bool remove_thrall( Mind thrall_mind = null, bool? kill = null ) {
			kill = kill ?? false;

			Obj_Effect_ProcHolder_Spell S = null;
			dynamic H = null;
			dynamic M = null;

			
			if ( !( thrall_mind is Mind ) || !this.thralls.Contains( thrall_mind ) || !( thrall_mind.current is Mob_Living ) ) {
				return false;
			}
			this.update_shadow_icons_removed( thrall_mind );
			this.thralls.Remove( thrall_mind );
			thrall_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <span class='danger'>Dethralled</span>";
			thrall_mind.special_role = null;

			foreach (dynamic _a in Lang13.Enumerate( thrall_mind.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				S = _a;
				
				thrall_mind.remove_spell( S );
			}

			if ( kill == true && thrall_mind.current is Mob_Living_Carbon_Human ) {
				H = thrall_mind.current;
				((Ent_Static)H).visible_message( "<span class='warning'>" + H + " jerks violently and falls still.</span>", "<span class='userdanger'>A piercing white light floods your mind, banishing your memories as a thrall and--</span>" );
				((Mob)H).death();
				return true;
			}
			M = thrall_mind.current;

			if ( M is Mob_Living_Silicon ) {
				((Ent_Static)M).audible_message( "<span class='notice'>" + M + " lets out a short blip.</span>", "<span class='userdanger'>You have been turned into a robot! You are no longer a thrall! Though you try, you cannot remember anything about your servitude...</span>" );
			} else {
				((Ent_Static)M).visible_message( "<span class='big'>" + M + " looks like their mind is their own again!</span>", "<span class='userdanger'>A piercing white light floods your eyes. Your mind is your own again! Though you try, you cannot remember anything about the shadowlings or your time under their command...</span>" );
			}
			return true;
		}

		// Function from file: shadowling.dm
		public bool add_thrall( Mind new_thrall_mind = null ) {
			
			if ( !( new_thrall_mind is Mind ) ) {
				return false;
			}

			if ( !this.thralls.Contains( new_thrall_mind ) ) {
				this.update_shadow_icons_added( new_thrall_mind );
				this.thralls.Add( new_thrall_mind );
				new_thrall_mind.special_role = "thrall";
				new_thrall_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <span class='danger'>Became a thrall</span>";
				new_thrall_mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Self_LesserShadowlingHivemind( null ) );
				new_thrall_mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Targeted_LesserGlare( null ) );
				new_thrall_mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Self_LesserShadowWalk( null ) );
				new_thrall_mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Self_ThrallVision( null ) );
				new_thrall_mind.current.WriteMsg( "<span class='shadowling'><b>You see the truth. Reality has been torn away and you realize what a fool you've been.</b></span>" );
				new_thrall_mind.current.WriteMsg( "<span class='shadowling'><b>The shadowlings are your masters.</b> Serve them above all else and ensure they complete their goals.</span>" );
				new_thrall_mind.current.WriteMsg( "<span class='shadowling'>You may not harm other thralls or the shadowlings. However, you do not need to obey other thralls.</span>" );
				new_thrall_mind.current.WriteMsg( "<span class='shadowling'>Your body has been irreversibly altered. The attentive can see this - you may conceal it by wearing a mask.</span>" );
				new_thrall_mind.current.WriteMsg( "<span class='shadowling'>Though not nearly as powerful as your masters, you possess some weak powers. These can be found in the Thrall Abilities tab.</span>" );
				new_thrall_mind.current.WriteMsg( "<span class='shadowling'>You may communicate with your allies by using the Lesser Commune ability.</span>" );

				if ( GlobalFuncs.jobban_isbanned( new_thrall_mind.current, "shadowling" ) ) {
					this.replace_jobbaned_player( new_thrall_mind.current, "shadowling", "shadowling" );
				}
				return true;
			}
			return false;
		}

		// Function from file: shadowling.dm
		public void finalize_shadowling( Mind shadow_mind = null ) {
			dynamic S = null;

			S = shadow_mind.current;
			shadow_mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Self_ShadowlingHatch( null ) );
			shadow_mind.AddSpell( new Obj_Effect_ProcHolder_Spell_Self_ShadowlingHivemind( null ) );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.update_shadow_icons_added( shadow_mind );

				if ( shadow_mind.assigned_role == "Clown" ) {
					S.WriteMsg( "<span class='notice'>Your alien nature has allowed you to overcome your clownishness.</span>" );
					((Dna)S.dna).remove_mutation( "Clumsiness" );
				}
				return;
			}));
			return;
		}

		// Function from file: shadowling.dm
		public void process_shadow_objectives( Mind shadow_mind = null ) {
			string objective = null;

			objective = "enthrall";

			if ( objective == "enthrall" ) {
				this.objective_explanation = "Ascend to your true form by use of the Ascendance ability. This may only be used with " + this.required_thralls + " collective thralls, while hatched, and is unlocked with the Collective Mind ability.";
				this.shadow_objectives.Add( "enthrall" );
				shadow_mind.memory += "<b>Objective #1</b>: " + this.objective_explanation;
				shadow_mind.current.WriteMsg( "<b>Objective #1</b>: " + this.objective_explanation + "<br>" );
			}
			return;
		}

		// Function from file: shadowling.dm
		public void greet_shadow( Mind shadow = null ) {
			shadow.current.WriteMsg( "<b>Currently, you are disguised as an employee aboard " + GlobalFuncs.station_name() + "].</b>" );
			shadow.current.WriteMsg( "<b>In your limited state, you have three abilities: Enthrall, Hatch, and Hivemind Commune.</b>" );
			shadow.current.WriteMsg( "<b>Any other shadowlings are your allies. You must assist them as they shall assist you.</b>" );
			shadow.current.WriteMsg( "<b>If you are new to shadowling, or want to read about abilities, check the wiki page at https://tgstation13.org/wiki/Shadowling</b><br>" );
			return;
		}

		// Function from file: revolution.dm
		public void auto_declare_completion_revolution(  ) {
			ByTable targets = null;
			int num_revs = 0;
			int num_survivors = 0;
			Mob_Living_Carbon survivor = null;
			string text = null;
			Mind headrev = null;
			string text2 = null;
			Mind rev = null;
			string text3 = null;
			ByTable heads = null;
			Mind head = null;
			bool target = false;

			targets = new ByTable();

			if ( this.head_revolutionaries.len != 0 || GlobalVars.ticker.mode is GameMode_Revolution ) {
				num_revs = 0;
				num_survivors = 0;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.living_mob_list, typeof(Mob_Living_Carbon) )) {
					survivor = _a;
					

					if ( Lang13.Bool( survivor.ckey ) ) {
						num_survivors++;

						if ( survivor.mind != null ) {
							
							if ( this.head_revolutionaries.Contains( survivor.mind ) || this.revolutionaries.Contains( survivor.mind ) ) {
								num_revs++;
							}
						}
					}
				}

				if ( num_survivors != 0 ) {
					Game13.WriteMsg( "" + GlobalVars.TAB + "Command's Approval Rating: <B>" + ( 100 - Num13.Round( num_revs / num_survivors * 100, 0.1 ) ) + "%</B>" );
				}
				text = "<br><font size=3><b>The head revolutionaries were:</b></font>";

				foreach (dynamic _b in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
					headrev = _b;
					
					text += this.printplayer( headrev, true );
				}
				text += "<br>";
				Game13.WriteMsg( text );
			}

			if ( this.revolutionaries.len != 0 || GlobalVars.ticker.mode is GameMode_Revolution ) {
				text2 = "<br><font size=3><b>The revolutionaries were:</b></font>";

				foreach (dynamic _c in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
					rev = _c;
					
					text2 += this.printplayer( rev, true );
				}
				text2 += "<br>";
				Game13.WriteMsg( text2 );
			}

			if ( this.head_revolutionaries.len != 0 || this.revolutionaries.len != 0 || GlobalVars.ticker.mode is GameMode_Revolution ) {
				text3 = "<br><font size=3><b>The heads of staff were:</b></font>";
				heads = this.get_all_heads();

				foreach (dynamic _d in Lang13.Enumerate( heads, typeof(Mind) )) {
					head = _d;
					
					target = targets.Contains( head );

					if ( target ) {
						text3 += "<span class='boldannounce'>Target</span>";
					}
					text3 += this.printplayer( head, true );
				}
				text3 += "<br>";
				Game13.WriteMsg( text3 );
			}
			return;
		}

		// Function from file: revolution.dm
		public void update_rev_icons_removed( dynamic rev_mind = null ) {
			AtomHud_Antag revhud = null;

			revhud = GlobalVars.huds[7];
			revhud.leave_hud( rev_mind.current );
			this.set_antag_hud( rev_mind.current, null );
			return;
		}

		// Function from file: revolution.dm
		public void update_rev_icons_added( dynamic rev_mind = null ) {
			AtomHud_Antag revhud = null;

			revhud = GlobalVars.huds[7];
			revhud.join_hud( rev_mind.current );
			this.set_antag_hud( rev_mind.current, ( this.head_revolutionaries.Contains( rev_mind ) ? "rev_head" : "rev" ) );
			return;
		}

		// Function from file: revolution.dm
		public void remove_revolutionary( Mind rev_mind = null, bool? beingborged = null ) {
			bool remove_head = false;
			Mob_Living M = null;

			remove_head = false;

			if ( beingborged == true && this.head_revolutionaries.Contains( rev_mind ) ) {
				this.head_revolutionaries.Remove( rev_mind );
				remove_head = true;
			}

			if ( this.revolutionaries.Contains( rev_mind ) || remove_head ) {
				this.revolutionaries.Remove( rev_mind );
				rev_mind.special_role = null;
				rev_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has renounced the revolution!</font>";

				if ( beingborged == true ) {
					rev_mind.current.WriteMsg( "<span class='danger'><FONT size = 3>The frame's firmware detects and deletes your neural reprogramming! You remember nothing" + ( remove_head ? "." : " but the name of the one who flashed you." ) + "</FONT></span>" );
					GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( rev_mind.current ) ).str( " <A HREF='?_src_=holder;adminmoreinfo=" ).Ref( rev_mind.current ).str( "'>?</A> (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( rev_mind.current ).str( "'>FLW</A>) has been borged while being a " ).item( ( remove_head ? "leader" : " member" ) ).str( " of the revolution." ).ToString() );
				} else {
					((Mob)rev_mind.current).Paralyse( 5 );
					rev_mind.current.WriteMsg( "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a revolutionary! Your memory is hazy from the time you were a rebel...the only thing you remember is the name of the one who brainwashed you...</FONT></span>" );
				}
				this.update_rev_icons_removed( rev_mind );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, rev_mind.current ), typeof(Mob_Living) )) {
					M = _a;
					

					if ( beingborged == true ) {
						M.WriteMsg( "The frame beeps contentedly, purging the hostile memory engram from the MMI before initalizing it." );
					} else {
						M.WriteMsg( "" + rev_mind.current + " looks like they just remembered their real allegiance!" );
					}
				}
			}
			return;
		}

		// Function from file: revolution.dm
		public bool add_revolutionary( Mind rev_mind = null ) {
			dynamic H = null;
			dynamic carbon_mob = null;

			
			if ( GlobalVars.command_positions.Contains( rev_mind.assigned_role ) ) {
				return false;
			}
			H = rev_mind.current;

			if ( GlobalFuncs.isloyal( H ) ) {
				return false;
			}

			if ( this.revolutionaries.Contains( rev_mind ) || this.head_revolutionaries.Contains( rev_mind ) ) {
				return false;
			}
			this.revolutionaries.Add( rev_mind );

			if ( rev_mind.current is Mob_Living_Carbon ) {
				carbon_mob = rev_mind.current;
				carbon_mob.silent = Num13.MaxInt( Convert.ToInt32( carbon_mob.silent ), 5 );
				((Mob_Living)carbon_mob).flash_eyes( 1, true );
			}
			((Mob)rev_mind.current).Stun( 5 );
			rev_mind.current.WriteMsg( "<span class='danger'><FONT size = 3> You are now a revolutionary! Help your cause. Do not harm your fellow freedom fighters. You can identify your comrades by the red \"R\" icons, and your leaders by the blue \"R\" icons. Help them kill the heads to win the revolution!</FONT></span>" );
			rev_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has been converted to the revolution!</font>";
			rev_mind.special_role = "Revolutionary";
			this.update_rev_icons_added( rev_mind );

			if ( GlobalFuncs.jobban_isbanned( rev_mind.current, "revolutionary" ) ) {
				this.replace_jobbaned_player( rev_mind.current, "revolutionary", "revolutionary" );
			}
			return true;
		}

		// Function from file: revolution.dm
		public bool equip_revolutionary( dynamic mob = null ) {
			Obj_Item_Device_Assembly_Flash T = null;
			Obj_Item_Toy_Crayon_Spraycan R = null;
			Obj_Item_Clothing_Glasses_Hud_Security_Chameleon C = null;
			ByTable slots = null;
			dynamic where = null;
			dynamic where2 = null;

			
			if ( !( mob is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( Lang13.Bool( mob.mind ) ) {
				
				if ( mob.mind.assigned_role == "Clown" ) {
					mob.WriteMsg( "Your training has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
					((Dna)mob.dna).remove_mutation( "Clumsiness" );
				}
			}
			T = new Obj_Item_Device_Assembly_Flash( mob );
			R = new Obj_Item_Toy_Crayon_Spraycan( mob );
			C = new Obj_Item_Clothing_Glasses_Hud_Security_Chameleon( mob );
			slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			where = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( T, slots );
			where2 = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( C, slots );
			((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( R, slots );
			mob.update_icons();

			if ( !Lang13.Bool( where2 ) ) {
				mob.WriteMsg( "The Syndicate were unfortunately unable to get you a chameleon security HUD." );
			} else {
				mob.WriteMsg( "The chameleon security HUD in your " + where2 + " will help you keep track of who is loyalty-implanted, and unable to be recruited." );
			}

			if ( !Lang13.Bool( where ) ) {
				mob.WriteMsg( "The Syndicate were unfortunately unable to get you a flash." );
			} else {
				mob.WriteMsg( "The flash in your " + where + " will help you to persuade the crew to join your cause." );
				return true;
			}
			return false;
		}

		// Function from file: revolution.dm
		public void greet_revolutionary( dynamic rev_mind = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			int obj_count = 0;
			Objective objective = null;

			obj_count = 1;
			this.update_rev_icons_added( rev_mind );

			if ( you_are == true ) {
				rev_mind.current.WriteMsg( "<span class='userdanger'>You are a member of the revolutionaries' leadership!</span>" );
			}

			foreach (dynamic _a in Lang13.Enumerate( rev_mind.objectives, typeof(Objective) )) {
				objective = _a;
				
				rev_mind.current.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				rev_mind.special_role = "Head Revolutionary";
				obj_count++;
			}
			return;
		}

		// Function from file: revolution.dm
		public void forge_revolutionary_objectives( dynamic rev_mind = null ) {
			ByTable heads = null;
			Mind head_mind = null;
			Objective_Mutiny rev_obj = null;

			heads = this.get_living_heads();

			foreach (dynamic _a in Lang13.Enumerate( heads, typeof(Mind) )) {
				head_mind = _a;
				
				rev_obj = new Objective_Mutiny();
				rev_obj.owner = rev_mind;
				rev_obj.target = head_mind;
				rev_obj.explanation_text = "Assassinate or exile " + head_mind.name + ", the " + head_mind.assigned_role + ".";
				rev_mind.objectives.Add( rev_obj );
			}
			return;
		}

		// Function from file: nuclear.dm
		public bool auto_declare_completion_nuclear(  ) {
			string text = null;
			string purchases = null;
			double TC_uses = 0;
			Mind syndicate = null;
			Obj_Item_Device_Uplink H = null;

			
			if ( this.syndicates.len != 0 || GlobalVars.ticker != null && GlobalVars.ticker.mode is GameMode_Nuclear ) {
				text = "<br><FONT size=3><B>The syndicate operatives were:</B></FONT>";
				purchases = "";
				TC_uses = 0;

				foreach (dynamic _b in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
					syndicate = _b;
					
					text += this.printplayer( syndicate );

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.uplinks, typeof(Obj_Item_Device_Uplink) )) {
						H = _a;
						

						if ( H != null && Lang13.Bool( H.owner ) && H.owner == syndicate.key ) {
							TC_uses += H.spent_telecrystals;
							purchases += H.purchase_log;
						}
					}
				}
				text += "<br>";
				text += "(Syndicates used " + TC_uses + " TC) " + purchases;

				if ( TC_uses == 0 && this.station_was_nuked && !this.are_operatives_dead() ) {
					text += new Txt( "<BIG><IMG CLASS=icon SRC=" ).Ref( "icons/BadAss.dmi" ).str( " ICONSTATE='badass'></BIG>" ).ToString();
				}
				Game13.WriteMsg( text );
			}
			return true;
		}

		// Function from file: nuclear.dm
		public bool are_operatives_dead(  ) {
			Mind operative_mind = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
				operative_mind = _a;
				

				if ( operative_mind.current is Mob_Living_Carbon_Human && Convert.ToInt32( operative_mind.current.stat ) != 2 ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: nuclear.dm
		public bool equip_syndicate( dynamic synd_mob = null, int? telecrystals = null ) {
			telecrystals = telecrystals ?? GlobalVars.TRUE;

			
			if ( Lang13.Bool( telecrystals ) ) {
				((Mob_Living_Carbon_Human)synd_mob).equipOutfit( typeof(Outfit_Syndicate) );
			} else {
				((Mob_Living_Carbon_Human)synd_mob).equipOutfit( typeof(Outfit_Syndicate_NoCrystals) );
			}
			return true;
		}

		// Function from file: nuclear.dm
		public void greet_syndicate( Mind syndicate = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			int obj_count = 0;
			Objective objective = null;

			
			if ( you_are == true ) {
				syndicate.current.WriteMsg( "<span class='notice'>You are a " + GlobalFuncs.syndicate_name() + " agent!</span>" );
			}
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( syndicate.objectives, typeof(Objective) )) {
				objective = _a;
				
				syndicate.current.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: nuclear.dm
		public void forge_syndicate_objectives( Mind syndicate = null ) {
			Objective_Nuclear syndobj = null;

			syndobj = new Objective_Nuclear();
			syndobj.owner = syndicate;
			syndicate.objectives.Add( syndobj );
			return;
		}

		// Function from file: nuclear.dm
		public void prepare_syndicate_leader( Mind synd_mind = null, dynamic nuke_code = null ) {
			dynamic leader_title = null;
			Obj_Item_Device_NuclearChallenge challenge = null;
			ByTable foundIDs = null;
			Obj_Item_Weapon_Card_Id ID = null;
			dynamic A = null;
			Obj_Item_Weapon_Paper P = null;
			dynamic H = null;

			leader_title = Rand13.Pick(new object [] { "Czar", "Boss", "Commander", "Chief", "Kingpin", "Director", "Overlord" });
			Task13.Schedule( 1, (Task13.Closure)(() => {
				this.nukeops_lastname = GlobalFuncs.nukelastname( synd_mind.current );
				GlobalFuncs.NukeNameAssign( this.nukeops_lastname, this.syndicates );
				return;
			}));
			synd_mind.current.real_name = "" + GlobalFuncs.syndicate_name() + " " + leader_title;
			synd_mind.current.WriteMsg( "<B>You are the Syndicate " + leader_title + " for this mission. You are responsible for the distribution of telecrystals and your ID is the only one who can open the launch bay doors.</B>" );
			synd_mind.current.WriteMsg( "<B>If you feel you are not up to this task, give your ID to another operative.</B>" );
			synd_mind.current.WriteMsg( "<B>In your hand you will find a special item capable of triggering a greater challenge for your team. Examine it carefully and consult with your fellow operatives before activating it.</B>" );
			challenge = new Obj_Item_Device_NuclearChallenge();
			((Mob)synd_mind.current).equip_to_slot_or_del( challenge, 5 );
			foundIDs = ((Ent_Static)synd_mind.current).search_contents_for( typeof(Obj_Item_Weapon_Card_Id) );

			if ( foundIDs.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( foundIDs, typeof(Obj_Item_Weapon_Card_Id) )) {
					ID = _a;
					
					ID.name = "lead agent card";
					ID.access += GlobalVars.access_syndicate_leader;
				}
			} else {
				GlobalFuncs.message_admins( "Warning: Nuke Ops spawned without access to leave their spawn area!" );
			}
			A = Lang13.FindIn( typeof(Obj_Item_Device_Radio_Headset_Syndicate_Alt), synd_mind.current );

			if ( Lang13.Bool( A ) ) {
				A.command = GlobalVars.TRUE;
			}

			if ( Lang13.Bool( nuke_code ) ) {
				P = new Obj_Item_Weapon_Paper();
				P.info = "The nuclear authorization code is: <b>" + nuke_code + "</b>";
				P.name = "nuclear bomb code";
				H = synd_mind.current;
				P.loc = H.loc;
				((Mob)H).equip_to_slot_or_del( P, 5 );
				H.update_icons();
			} else {
				nuke_code = "code will be provided later";
			}
			return;
		}

		// Function from file: nuclear.dm
		public void update_synd_icons_removed( Mind synd_mind = null ) {
			AtomHud_Antag opshud = null;

			opshud = GlobalVars.huds[8];
			opshud.leave_hud( synd_mind.current );
			this.set_antag_hud( synd_mind.current, null );
			return;
		}

		// Function from file: nuclear.dm
		public void update_synd_icons_added( Mind synd_mind = null ) {
			AtomHud_Antag opshud = null;

			opshud = GlobalVars.huds[8];
			opshud.join_hud( synd_mind.current );
			this.set_antag_hud( synd_mind.current, "synd" );
			return;
		}

		// Function from file: monkey.dm
		public void remove_monkey( Mind monkey_mind = null ) {
			this.ape_infectees.Remove( monkey_mind );
			monkey_mind.special_role = null;
			return;
		}

		// Function from file: monkey.dm
		public void add_monkey( Mind monkey_mind = null ) {
			this.ape_infectees.Or( monkey_mind );
			monkey_mind.special_role = "Infected Monkey";
			return;
		}

		// Function from file: abduction.dm
		public void auto_declare_completion_abduction(  ) {
			string text = null;
			Mind abductor_mind = null;
			Mind abductee_mind = null;

			text = "";

			if ( this.abductors.len != 0 ) {
				text += "<br><span class='big'><b>The abductors were:</b></span>";

				foreach (dynamic _a in Lang13.Enumerate( this.abductors, typeof(Mind) )) {
					abductor_mind = _a;
					
					text += this.printplayer( abductor_mind );
					text += this.printobjectives( abductor_mind );
				}
				text += "<br>";

				if ( this.abductees.len != 0 ) {
					text += "<br><span class='big'><b>The abductees were:</b></span>";

					foreach (dynamic _b in Lang13.Enumerate( this.abductees, typeof(Mind) )) {
						abductee_mind = _b;
						
						text += this.printplayer( abductee_mind );
						text += this.printobjectives( abductee_mind );
					}
				}
			}
			text += "<br>";
			Game13.WriteMsg( text );
			return;
		}

		// Function from file: _handofgod.dm
		public void update_hog_icons_removed( Mind hog_mind = null, string side = null ) {
			int hud_key = 0;
			AtomHud_Antag hog_hud = null;

			
			if ( side == "red" ) {
				hud_key = 12;
			} else if ( side == "blue" ) {
				hud_key = 11;
			}

			if ( hud_key != 0 ) {
				hog_hud = GlobalVars.huds[hud_key];
				hog_hud.leave_hud( hog_mind.current );
				this.set_antag_hud( hog_mind.current, null );
			}
			return;
		}

		// Function from file: _handofgod.dm
		public void update_hog_icons_added( Mind hog_mind = null, string side = null ) {
			int hud_key = 0;
			int rank = 0;
			AtomHud_Antag hog_hud = null;

			rank = 0;

			if ( side == "red" ) {
				hud_key = 12;

				if ( GlobalFuncs.is_handofgod_redprophet( hog_mind.current ) ) {
					rank = 1;
				}
			} else if ( side == "blue" ) {
				hud_key = 11;

				if ( GlobalFuncs.is_handofgod_blueprophet( hog_mind.current ) ) {
					rank = 1;
				}
			}

			if ( GlobalFuncs.is_handofgod_god( hog_mind.current ) ) {
				rank = 2;
			}

			if ( hud_key != 0 ) {
				hog_hud = GlobalVars.huds[hud_key];
				hog_hud.join_hud( hog_mind.current );
				this.set_antag_hud( hog_mind.current, "hog-" + side + "-" + rank );
			}
			return;
		}

		// Function from file: _handofgod.dm
		public void remove_hog_follower( Mind follower_mind = null, bool? announce = null ) {
			announce = announce ?? true;

			dynamic H = null;
			Mob_Living M = null;

			follower_mind.remove_hog_follower_prophet();
			this.update_hog_icons_removed( follower_mind, "red" );
			this.update_hog_icons_removed( follower_mind, "blue" );

			if ( Lang13.Bool( follower_mind.current ) ) {
				H = follower_mind.current;
				H.faction -= "red god";
				H.faction -= "blue god";
			}

			if ( announce == true ) {
				follower_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has been deconverted from a deity's cult!</font>";
				follower_mind.current.WriteMsg( "<span class='danger'><b>Your mind has been cleared from the brainwashing the followers have done to you.  Now you serve yourself and the crew.</b></span>" );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, follower_mind.current ), typeof(Mob_Living) )) {
					M = _a;
					
					M.WriteMsg( "" + follower_mind.current + " looks like their faith is shattered. They're no longer a cultist!" );
				}
			}
			return;
		}

		// Function from file: _handofgod.dm
		public void add_god( Mind god_mind = null, string colour = null ) {
			colour = colour ?? "No Colour";

			this.remove_hog_follower( god_mind, false );

			if ( colour == "red" ) {
				this.red_deities.Add( god_mind );
			}

			if ( colour == "blue" ) {
				this.blue_deities.Add( god_mind );
			}
			god_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has been made into a " + colour + " deity!</font>";
			god_mind.special_role = "Hand of God: " + colour + " God";
			this.update_hog_icons_added( god_mind, colour );
			return;
		}

		// Function from file: _handofgod.dm
		public bool add_hog_follower( Mind follower_mind = null, string colour = null ) {
			colour = colour ?? "No Colour";

			dynamic H = null;
			dynamic N = null;

			H = follower_mind.current;

			if ( GlobalFuncs.isloyal( H ) ) {
				H.WriteMsg( "<span class='danger'>Your loyalty implant blocked the influence of the " + colour + " deity. </span>" );
				return false;
			}

			if ( this.red_deity_followers.Contains( follower_mind ) || this.red_deity_prophets.Contains( follower_mind ) || this.blue_deity_followers.Contains( follower_mind ) || this.blue_deity_prophets.Contains( follower_mind ) ) {
				H.WriteMsg( "<span class='danger'>You already belong to a deity. Your strong faith has blocked out the conversion attempt by the followers of the " + colour + " deity.</span>" );
				return false;
			}
			N = ((Mob)H).null_rod_check();

			if ( Lang13.Bool( N ) ) {
				H.WriteMsg( "<span class='danger'>Your holy weapon prevented the " + colour + " deity from brainwashing you.</span>" );
				return false;
			}

			if ( colour == "red" ) {
				this.red_deity_followers.Add( follower_mind );
			}

			if ( colour == "blue" ) {
				this.blue_deity_followers.Add( follower_mind );
			}
			H.faction |= "" + colour + " god";
			follower_mind.current.WriteMsg( "<span class='danger'><FONT size = 3>You are now a follower of the " + colour + " deity! Follow your deity's prophet in order to complete your deity's objectives. Convert crewmembers to your cause by using your deity's nexus. And remember - there is no you, there is only the cult.</FONT></span>" );
			this.update_hog_icons_added( follower_mind, colour );
			follower_mind.special_role = "Hand of God: " + GlobalFuncs.capitalize( colour ) + " Follower";
			follower_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has been converted to the " + colour + " follower cult!</font>";
			return true;
		}

		// Function from file: _handofgod.dm
		public void greet_hog_follower( Mind follower_mind = null, string colour = null ) {
			
			if ( this.red_deity_prophets.Contains( ((dynamic)( this.blue_deity_prophets != null || follower_mind != null )).Contains( follower_mind ) ) ) {
				follower_mind.current.WriteMsg( "<span class='danger'><B>You have been appointed as the prophet of the " + colour + " deity! You are the only one who can communicate with your deity at will. Guide your followers, but be wary, for many will want you dead.</span>" );
			} else if ( Lang13.Bool( colour ) ) {
				follower_mind.current.WriteMsg( "<span class='danger'><B>You are a follower of the " + colour + " cult's deity!</span>" );
			} else {
				follower_mind.current.WriteMsg( "<span class='danger'><B>You are a follower of a cult's deity!</span>" );
			}
			return;
		}

		// Function from file: _handofgod.dm
		public void forge_deity_objectives( Mind deity = null ) {
			Objective_Deicide deicide = null;
			Objective_EscapeFollowers recruit = null;
			Objective_SacrificeProphet sacrifice = null;
			Objective_EscapeFollowers recruit2 = null;
			Objective_Build build = null;
			Objective_SacrificeProphet sacrifice2 = null;
			Objective_EscapeFollowers recruit3 = null;
			Objective_FollowerBlock block = null;

			
			dynamic _a = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=30 ) {
				deicide = new Objective_Deicide();
				deicide.owner = deity;
				deicide.find_target();
				deity.objectives.Add( deicide );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_EscapeFollowers), deity.objectives ) ) ) {
					recruit = new Objective_EscapeFollowers();
					recruit.owner = deity;
					deity.objectives.Add( recruit );
					recruit.gen_amount_goal( 8, 12 );
				}
			} else if ( 31<=_a&&_a<=60 ) {
				sacrifice = new Objective_SacrificeProphet();
				sacrifice.owner = deity;
				deity.objectives.Add( sacrifice );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_EscapeFollowers), deity.objectives ) ) ) {
					recruit2 = new Objective_EscapeFollowers();
					recruit2.owner = deity;
					deity.objectives.Add( recruit2 );
					recruit2.gen_amount_goal( 8, 12 );
				}
			} else if ( 61<=_a&&_a<=85 ) {
				build = new Objective_Build();
				build.owner = deity;
				deity.objectives.Add( build );
				build.gen_amount_goal( 8, 16 );
				sacrifice2 = new Objective_SacrificeProphet();
				sacrifice2.owner = deity;
				deity.objectives.Add( sacrifice2 );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_EscapeFollowers), deity.objectives ) ) ) {
					recruit3 = new Objective_EscapeFollowers();
					recruit3.owner = deity;
					deity.objectives.Add( recruit3 );
					recruit3.gen_amount_goal( 8, 12 );
				}
			} else {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_FollowerBlock), deity.objectives ) ) ) {
					block = new Objective_FollowerBlock();
					block.owner = deity;
					deity.objectives.Add( block );
				}
			}
			return;
		}

		// Function from file: gang.dm
		public void auto_declare_completion_gang( Gang winner = null ) {
			Gang G = null;
			string text = null;
			Mind boss = null;
			Mind gangster = null;

			
			if ( this.gangs.len != 0 ) {
				
				if ( !( winner != null ) ) {
					Game13.WriteMsg( "<span class='redtext'>The station was " + ( this.station_was_nuked ? "destroyed!" : "evacuated before a gang could claim it! The station wins!" ) + "</span><br>" );
				} else {
					Game13.WriteMsg( "<span class='redtext'>The " + winner.name + " Gang successfully performed a hostile takeover of the station!</span><br>" );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.gangs, typeof(Gang) )) {
				G = _c;
				
				text = "<b>The " + G.name + " Gang was " + ( winner == G ? "<span class='greenannounce'>victorious</span>" : "<span class='boldannounce'>defeated</span>" ) + " with " + Num13.Round( G.territory.len / GlobalVars.start_state.num_territories * 100, 1 ) + "% control of the station!</b>";
				text += "<br>The " + G.name + " Gang Bosses were:";

				foreach (dynamic _a in Lang13.Enumerate( G.bosses, typeof(Mind) )) {
					boss = _a;
					
					text += this.printplayer( boss, true );
				}
				text += "<br>The " + G.name + " Gangsters were:";

				foreach (dynamic _b in Lang13.Enumerate( G.gangsters, typeof(Mind) )) {
					gangster = _b;
					
					text += this.printplayer( gangster, true );
				}
				text += "<br>";
				Game13.WriteMsg( text );
			}
			return;
		}

		// Function from file: gang.dm
		public ByTable get_gang_bosses(  ) {
			ByTable gang_bosses = null;
			Gang G = null;

			gang_bosses = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.gangs, typeof(Gang) )) {
				G = _a;
				
				gang_bosses.Add( G.bosses );
			}
			return gang_bosses;
		}

		// Function from file: gang.dm
		public ByTable get_gangsters(  ) {
			ByTable gangsters = null;
			Gang G = null;

			gangsters = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.gangs, typeof(Gang) )) {
				G = _a;
				
				gangsters.Add( G.gangsters );
			}
			return gangsters;
		}

		// Function from file: gang.dm
		public ByTable get_all_gangsters(  ) {
			ByTable all_gangsters = null;

			all_gangsters = new ByTable();
			all_gangsters.Add( this.get_gangsters() );
			all_gangsters.Add( this.get_gang_bosses() );
			return all_gangsters;
		}

		// Function from file: gang.dm
		public bool remove_gangster( Mind gangster_mind = null, bool? beingborged = null, int? silent = null, bool? remove_bosses = null ) {
			remove_bosses = remove_bosses ?? false;

			dynamic gang = null;
			bool removed = false;
			Gang G = null;

			gang = gangster_mind.gang_datum;

			if ( !Lang13.Bool( gang ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.gangs, typeof(Gang) )) {
				G = _a;
				

				if ( G.gangsters.Contains( gangster_mind ) ) {
					G.gangsters.Remove( gangster_mind );
					removed = true;
				}

				if ( remove_bosses == true && G.bosses.Contains( gangster_mind ) ) {
					G.bosses.Remove( gangster_mind );
					removed = true;
				}
			}

			if ( !removed ) {
				return false;
			}
			gangster_mind.special_role = null;
			gangster_mind.gang_datum = null;

			if ( ( silent ??0) < 2 ) {
				gangster_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has reformed and defected from the " + gang.name + " Gang!</font>";

				if ( beingborged == true ) {
					
					if ( !Lang13.Bool( silent ) ) {
						((Ent_Static)gangster_mind.current).visible_message( "The frame beeps contentedly from the MMI before initalizing it." );
					}
					gangster_mind.current.WriteMsg( "<FONT size=3 color=red><B>The frame's firmware detects and deletes your criminal behavior! You are no longer a gangster!</B></FONT>" );
					GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( gangster_mind.current ) ).str( " <A HREF='?_src_=holder;adminmoreinfo=" ).Ref( gangster_mind.current ).str( "'>?</A> (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( gangster_mind.current ).str( "'>FLW</A>) has been borged while being a member of the " ).item( gang.name ).str( " Gang. They are no longer a gangster." ).ToString() );
				} else {
					
					if ( !Lang13.Bool( silent ) ) {
						((Mob)gangster_mind.current).Paralyse( 5 );
						((Ent_Static)gangster_mind.current).visible_message( "<FONT size=3><B>" + gangster_mind.current + " looks like they've given up the life of crime!<B></font>" );
					}
					gangster_mind.current.WriteMsg( "<FONT size=3 color=red><B>You have been reformed! You are no longer a gangster!</B><BR>You try as hard as you can, but you can't seem to recall any of the identities of your former gangsters...</FONT>" );
				}
			}
			((Gang)gang).remove_gang_hud( gangster_mind );
			return true;
		}

		// Function from file: gang.dm
		public int add_gangster( Mind gangster_mind = null, dynamic G = null, bool? check = null ) {
			check = check ?? true;

			dynamic carbon_mob = null;

			
			if ( !Lang13.Bool( G ) || this.get_all_gangsters().Contains( gangster_mind ) ) {
				return 0;
			}

			if ( check == true && GlobalFuncs.isloyal( gangster_mind.current ) ) {
				return 1;
			}
			G.gangsters.Add( gangster_mind );
			gangster_mind.gang_datum = G;

			if ( check == true ) {
				
				if ( gangster_mind.current is Mob_Living_Carbon ) {
					carbon_mob = gangster_mind.current;
					carbon_mob.silent = Num13.MaxInt( Convert.ToInt32( carbon_mob.silent ), 5 );
					((Mob_Living)carbon_mob).flash_eyes( 1, true );
				}
				((Mob)gangster_mind.current).Stun( 5 );
			}
			gangster_mind.current.WriteMsg( "<FONT size=3 color=red><B>You are now a member of the " + G.name + " Gang!</B></FONT>" );
			gangster_mind.current.WriteMsg( "<font color='red'>Help your bosses take over the station by claiming territory with <b>special spraycans</b> only they can provide. Simply spray on any unclaimed area of the station.</font>" );
			gangster_mind.current.WriteMsg( "<font color='red'>Their ultimate objective is to take over the station with a Dominator machine.</font>" );
			gangster_mind.current.WriteMsg( "<font color='red'>You can identify your bosses by their <b>red [G] icon</b>.</font>" );
			gangster_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has been converted to the " + G.name + " Gang!</font>";
			gangster_mind.special_role = "" + G.name + " Gangster";
			((Gang)G).add_gang_hud( gangster_mind );

			if ( GlobalFuncs.jobban_isbanned( gangster_mind.current, "gangster" ) ) {
				this.replace_jobbaned_player( gangster_mind.current, "gangster", "gangster" );
			}
			return 2;
		}

		// Function from file: gang.dm
		public int equip_gang( dynamic mob = null, dynamic gang = null ) {
			int _default = 0;

			Obj_Item_Device_Gangtool gangtool = null;
			Obj_Item_Weapon_Pen_Gang T = null;
			Obj_Item_Toy_Crayon_Spraycan_Gang SC = null;
			Obj_Item_Clothing_Glasses_Hud_Security_Chameleon C = null;
			ByTable slots = null;
			dynamic where = null;
			dynamic where2 = null;
			dynamic where3 = null;
			dynamic where4 = null;

			
			if ( !( mob is Mob_Living_Carbon_Human ) ) {
				return _default;
			}

			if ( Lang13.Bool( mob.mind ) ) {
				
				if ( mob.mind.assigned_role == "Clown" ) {
					mob.WriteMsg( "Your training has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
					((Dna)mob.dna).remove_mutation( "Clumsiness" );
				}
			}
			gangtool = new Obj_Item_Device_Gangtool( mob );
			T = new Obj_Item_Weapon_Pen_Gang( mob );
			SC = new Obj_Item_Toy_Crayon_Spraycan_Gang( mob, gang );
			C = new Obj_Item_Clothing_Glasses_Hud_Security_Chameleon( mob );
			slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			_default = 0;
			where = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( gangtool, slots );

			if ( !Lang13.Bool( where ) ) {
				mob.WriteMsg( "Your Syndicate benefactors were unfortunately unable to get you a Gangtool." );
				_default += 1;
			} else {
				gangtool.register_device( mob );
				mob.WriteMsg( "The <b>Gangtool</b> in your " + where + " will allow you to purchase weapons and equipment, send messages to your gang, and recall the emergency shuttle from anywhere on the station." );
				mob.WriteMsg( "As the gang boss, you can also promote your gang members to <b>lieutenant</b>. Unlike regular gangsters, Lieutenants cannot be deconverted and are able to use recruitment pens and gangtools." );
			}
			where2 = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( T, slots );

			if ( !Lang13.Bool( where2 ) ) {
				mob.WriteMsg( "Your Syndicate benefactors were unfortunately unable to get you a recruitment pen to start." );
				_default += 1;
			} else {
				mob.WriteMsg( "The <b>recruitment pen</b> in your " + where2 + " will help you get your gang started. Stab unsuspecting crew members with it to recruit them." );
			}
			where3 = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( SC, slots );

			if ( !Lang13.Bool( where3 ) ) {
				mob.WriteMsg( "Your Syndicate benefactors were unfortunately unable to get you a territory spraycan to start." );
				_default += 1;
			} else {
				mob.WriteMsg( "The <b>territory spraycan</b> in your " + where3 + " can be used to claim areas of the station for your gang. The more territory your gang controls, the more influence you get. All gangsters can use these, so distribute them to grow your influence faster." );
			}
			where4 = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( C, slots );

			if ( !Lang13.Bool( where4 ) ) {
				mob.WriteMsg( "Your Syndicate benefactors were unfortunately unable to get you a chameleon security HUD." );
				_default += 1;
			} else {
				mob.WriteMsg( "The <b>chameleon security HUD</b> in your " + where4 + " will help you keep track of who is loyalty-implanted, and unable to be recruited." );
			}
			mob.update_icons();
			return _default;
		}

		// Function from file: gang.dm
		public void greet_gang( Mind boss_mind = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			int obj_count = 0;
			Objective objective = null;

			obj_count = 1;

			if ( you_are == true ) {
				boss_mind.current.WriteMsg( "<FONT size=3 color=red><B>You are the Boss of the " + boss_mind.gang_datum.name + " Gang!</B></FONT>" );
			}

			foreach (dynamic _a in Lang13.Enumerate( boss_mind.objectives, typeof(Objective) )) {
				objective = _a;
				
				boss_mind.current.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: gang.dm
		public void forge_gang_objectives( Mind boss_mind = null ) {
			Objective rival_obj = null;

			rival_obj = new Objective();
			rival_obj.owner = boss_mind;
			rival_obj.explanation_text = "Be the first gang to successfully takeover the station with a Dominator.";
			boss_mind.objectives.Add( rival_obj );
			return;
		}

		// Function from file: cult.dm
		public void auto_declare_completion_cult(  ) {
			string text = null;
			Mind cultist = null;

			
			if ( this.cult.len != 0 || GlobalVars.ticker != null && GlobalVars.ticker.mode is GameMode_Cult ) {
				text = "<br><font size=3><b>The cultists were:</b></font>";

				foreach (dynamic _a in Lang13.Enumerate( this.cult, typeof(Mind) )) {
					cultist = _a;
					
					text += this.printplayer( cultist );
				}
				text += "<br>";
				Game13.WriteMsg( text );
			}
			return;
		}

		// Function from file: cult.dm
		public void update_cult_icons_removed( Mind cult_mind = null ) {
			AtomHud_Antag culthud = null;

			culthud = GlobalVars.huds[6];
			culthud.leave_hud( cult_mind.current );
			this.set_antag_hud( cult_mind.current, null );
			return;
		}

		// Function from file: cult.dm
		public void update_cult_icons_added( Mind cult_mind = null ) {
			AtomHud_Antag culthud = null;

			culthud = GlobalVars.huds[6];
			culthud.join_hud( cult_mind.current );
			this.set_antag_hud( cult_mind.current, "cult" );
			return;
		}

		// Function from file: cult.dm
		public void remove_cultist( Mind cult_mind = null, bool? show_message = null ) {
			show_message = show_message ?? true;

			dynamic M = null;

			
			if ( this.cult.Contains( cult_mind ) ) {
				this.cult.Remove( cult_mind );
				cult_mind.current.faction -= "cult";
				cult_mind.current.verbs -= typeof(Mob_Living).GetMethod( "cult_innate_comm" );
				((Mob)cult_mind.current).Paralyse( 5 );
				cult_mind.current.WriteMsg( "<span class='userdanger'>An unfamiliar white light flashes through your mind, cleansing the taint of the Dark One and all your memories as its servant.</span>" );
				cult_mind.memory = "";
				this.update_cult_icons_removed( cult_mind );
				cult_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <span class='danger'>Has renounced the cult!</span>";

				if ( show_message == true ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, cult_mind.current ) )) {
						M = _a;
						
						M.WriteMsg( "<span class='big'>" + cult_mind.current + " looks like they just reverted to their old faith!</span>" );
					}
				}
			}
			return;
		}

		// Function from file: cult.dm
		public virtual bool add_cultist( Mind cult_mind = null ) {
			
			if ( !( cult_mind is Mind ) || this.cult.Contains( cult_mind ) ) {
				return false;
			}
			((Mob)cult_mind.current).Paralyse( 5 );
			this.cult.Add( cult_mind );
			cult_mind.current.faction |= "cult";
			((Mob)cult_mind.current).cult_add_comm();
			this.update_cult_icons_added( cult_mind );
			cult_mind.current.attack_log += "[" + GlobalFuncs.time_stamp() + "] <span class='danger'>Has been converted to the cult!</span>";

			if ( GlobalFuncs.jobban_isbanned( cult_mind.current, "cultist" ) ) {
				this.replace_jobbaned_player( cult_mind.current, "cultist", "cultist" );
			}
			return true;
		}

		// Function from file: cult.dm
		public bool cult_give_item( Type item_path = null, dynamic mob = null ) {
			ByTable slots = null;
			dynamic T = null;
			dynamic item_name = null;
			dynamic where = null;
			Obj_Item_Weapon_Storage B = null;

			slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			T = Lang13.Call( item_path, mob );
			item_name = Lang13.Initial( item_path, "name" );
			where = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( T, slots );

			if ( !Lang13.Bool( where ) ) {
				mob.WriteMsg( "<span class='userdanger'>Unfortunately, you weren't able to get a " + item_name + ". This is very bad and you should adminhelp immediately (press F1).</span>" );
				return false;
			} else {
				mob.WriteMsg( "<span class='danger'>You have a " + item_name + " in your " + where + "." );
				mob.update_icons();

				if ( where == "backpack" ) {
					B = mob.back;
					B.orient2hud( mob );
					B.show_to( mob );
				}
				return true;
			}
		}

		// Function from file: cult.dm
		public dynamic equip_cultist( dynamic mob = null ) {
			dynamic _default = null;

			
			if ( !( mob is Mob_Living_Carbon_Human ) ) {
				return _default;
			}
			((Mob)mob).cult_add_comm();

			if ( Lang13.Bool( mob.mind ) ) {
				
				if ( mob.mind.assigned_role == "Clown" ) {
					mob.WriteMsg( "Your training has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
					((Dna)mob.dna).remove_mutation( "Clumsiness" );
				}
			}
			_default += this.cult_give_item( typeof(Obj_Item_Weapon_Tome), mob ) ?1:0;
			_default += this.cult_give_item( typeof(Obj_Item_Weapon_Paper_Talisman_Supply), mob ) ?1:0;
			_default += this.cult_give_item( typeof(Obj_Item_Weapon_Melee_Cultblade_Dagger), mob ) ?1:0;
			mob.WriteMsg( "These will help you start the cult on this station. Use them well, and remember - you are not the only one.</span>" );
			return _default;
		}

		// Function from file: changeling.dm
		public bool auto_declare_completion_changeling(  ) {
			string text = null;
			Mind changeling = null;
			bool changelingwin = false;
			int count = 0;
			Objective objective = null;

			
			if ( this.changelings.len != 0 ) {
				text = "<br><font size=3><b>The changelings were:</b></font>";

				foreach (dynamic _b in Lang13.Enumerate( this.changelings, typeof(Mind) )) {
					changeling = _b;
					
					changelingwin = true;

					if ( !Lang13.Bool( changeling.current ) ) {
						changelingwin = false;
					}
					text += this.printplayer( changeling );
					text += "<br><b>Changeling ID:</b> " + changeling.changeling.changelingID + ".";
					text += "<br><b>Genomes Extracted:</b> " + changeling.changeling.absorbedcount;

					if ( changeling.objectives.len != 0 ) {
						count = 1;

						foreach (dynamic _a in Lang13.Enumerate( changeling.objectives, typeof(Objective) )) {
							objective = _a;
							

							if ( objective.check_completion() != 0 ) {
								text += "<br><b>Objective #" + count + "</b>: " + objective.explanation_text + " <font color='green'><b>Success!</b></font>";
								GlobalFuncs.feedback_add_details( "changeling_objective", "" + objective.type + "|SUCCESS" );
							} else {
								text += "<br><b>Objective #" + count + "</b>: " + objective.explanation_text + " <span class='danger'>Fail.</span>";
								GlobalFuncs.feedback_add_details( "changeling_objective", "" + objective.type + "|FAIL" );
								changelingwin = false;
							}
							count++;
						}
					}

					if ( changelingwin ) {
						text += "<br><font color='green'><b>The changeling was successful!</b></font>";
						GlobalFuncs.feedback_add_details( "changeling_success", "SUCCESS" );
					} else {
						text += "<br><span class='boldannounce'>The changeling has failed.</span>";
						GlobalFuncs.feedback_add_details( "changeling_success", "FAIL" );
					}
					text += "<br>";
				}
				Game13.WriteMsg( text );
			}
			return true;
		}

		// Function from file: changeling.dm
		public void greet_changeling( Mind changeling = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			dynamic H = null;
			int obj_count = 0;
			Objective objective = null;

			
			if ( you_are == true ) {
				changeling.current.WriteMsg( "<span class='boldannounce'>You are " + changeling.changeling.changelingID + ", a changeling! You have absorbed and taken the form of a human.</span>" );
			}
			changeling.current.WriteMsg( "<span class='boldannounce'>Use say \":g message\" to communicate with your fellow changelings.</span>" );
			changeling.current.WriteMsg( "<b>You must complete the following tasks:</b>" );

			if ( Lang13.Bool( changeling.current.mind ) ) {
				H = changeling.current;

				if ( H.mind.assigned_role == "Clown" ) {
					H.WriteMsg( "You have evolved beyond your clownish nature, allowing you to wield weapons without harming yourself." );
					((Dna)H.dna).remove_mutation( "Clumsiness" );
				}
			}
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( changeling.objectives, typeof(Objective) )) {
				objective = _a;
				
				changeling.current.WriteMsg( "<b>Objective #" + obj_count + "</b>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: changeling.dm
		public virtual void forge_changeling_objectives( Mind changeling = null, bool? team_mode = null ) {
			team_mode = team_mode ?? false;

			int? escape_objective_possible = null;
			Objective_ChangelingTeamObjective CTO = null;
			Objective_Absorb absorb_objective = null;
			Objective_Steal steal_objective = null;
			ByTable active_ais = null;
			Objective_Destroy destroy_objective = null;
			Objective_Assassinate kill_objective = null;
			Objective_Maroon maroon_objective = null;
			Objective_Escape_EscapeWithIdentity identity_theft = null;
			Objective_Escape escape_objective = null;
			Objective_Escape_EscapeWithIdentity identity_theft2 = null;

			escape_objective_possible = GlobalVars.TRUE;

			foreach (dynamic _a in Lang13.Enumerate( changeling.objectives, typeof(Objective_ChangelingTeamObjective) )) {
				CTO = _a;
				

				if ( !CTO.escape_objective_compatible ) {
					escape_objective_possible = GlobalVars.FALSE;
					break;
				}
			}
			absorb_objective = new Objective_Absorb();
			absorb_objective.owner = changeling;
			absorb_objective.gen_amount_goal( 6, 8 );
			changeling.objectives.Add( absorb_objective );

			if ( Rand13.PercentChance( 60 ) ) {
				steal_objective = new Objective_Steal();
				steal_objective.owner = changeling;
				steal_objective.find_target();
				changeling.objectives.Add( steal_objective );
			}
			active_ais = GlobalFuncs.active_ais();

			if ( active_ais.len != 0 && Rand13.PercentChance( ((int)( 100 / GlobalVars.joined_player_list.len )) ) ) {
				destroy_objective = new Objective_Destroy();
				destroy_objective.owner = changeling;
				destroy_objective.find_target();
				changeling.objectives.Add( destroy_objective );
			} else if ( Rand13.PercentChance( 70 ) ) {
				kill_objective = new Objective_Assassinate();
				kill_objective.owner = changeling;

				if ( team_mode == true ) {
					kill_objective.find_target_by_role( "Changeling", true, true );
				} else {
					kill_objective.find_target();
				}
				changeling.objectives.Add( kill_objective );
			} else {
				maroon_objective = new Objective_Maroon();
				maroon_objective.owner = changeling;

				if ( team_mode == true ) {
					maroon_objective.find_target_by_role( "Changeling", true, true );
				} else {
					maroon_objective.find_target();
				}
				changeling.objectives.Add( maroon_objective );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), changeling.objectives ) ) && Lang13.Bool( escape_objective_possible ) ) {
					identity_theft = new Objective_Escape_EscapeWithIdentity();
					identity_theft.owner = changeling;
					identity_theft.target = maroon_objective.target;
					identity_theft.update_explanation_text();
					changeling.objectives.Add( identity_theft );
					escape_objective_possible = GlobalVars.FALSE;
				}
			}

			if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), changeling.objectives ) ) && Lang13.Bool( escape_objective_possible ) ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					escape_objective = new Objective_Escape();
					escape_objective.owner = changeling;
					changeling.objectives.Add( escape_objective );
				} else {
					identity_theft2 = new Objective_Escape_EscapeWithIdentity();
					identity_theft2.owner = changeling;

					if ( team_mode == true ) {
						identity_theft2.find_target_by_role( "Changeling", true, true );
					} else {
						identity_theft2.find_target();
					}
					changeling.objectives.Add( identity_theft2 );
				}
				escape_objective_possible = GlobalVars.FALSE;
			}
			return;
		}

		// Function from file: blob_finish.dm
		public bool auto_declare_completion_blob(  ) {
			GameMode blob_mode = null;
			string text = null;
			Mind blob = null;

			
			if ( GlobalVars.ticker.mode is GameMode_Blob ) {
				blob_mode = this;

				if ( ((dynamic)blob_mode).infected_crew.len != 0 ) {
					text = "<FONT size = 2><B>The blob" + ( ((dynamic)blob_mode).infected_crew.len > 1 ? "s were" : " was" ) + ":</B></FONT>";

					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)blob_mode).infected_crew, typeof(Mind) )) {
						blob = _a;
						
						text += this.printplayer( blob );
					}
					Game13.WriteMsg( text );
				}
				return true;
			}
			return false;
		}

		// Function from file: game_mode.dm
		public void remove_antag_for_borging( Mind newborgie = null ) {
			((GameMode)GlobalVars.ticker.mode).remove_cultist( newborgie, false );
			((GameMode)GlobalVars.ticker.mode).remove_revolutionary( newborgie, false );
			((GameMode)GlobalVars.ticker.mode).remove_gangster( newborgie, false, null, true );
			((GameMode)GlobalVars.ticker.mode).remove_hog_follower( newborgie, false );
			return;
		}

		// Function from file: game_mode.dm
		public void replace_jobbaned_player( dynamic M = null, string role_type = null, string pref = null ) {
			ByTable candidates = null;
			dynamic theghost = null;

			candidates = GlobalFuncs.pollCandidates( "Do you want to play as a " + role_type + "?", "" + role_type, null, pref, 100 );
			theghost = null;

			if ( candidates.len != 0 ) {
				theghost = Rand13.PickFromTable( candidates );
				M.WriteMsg( "Your mob has been taken over by a ghost! Appeal your job ban if you want to avoid this in the future!" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( theghost ) + " has taken control of (" + GlobalFuncs.key_name_admin( M ) + ") to replace a jobbaned player." );
				((Mob)M).ghostize( false );
				M.key = theghost.key;
			}
			return;
		}

		// Function from file: game_mode.dm
		public int get_remaining_days( Client C = null ) {
			
			if ( !( C != null ) ) {
				return 0;
			}

			if ( !GlobalVars.config.use_age_restriction_for_jobs ) {
				return 0;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( C.player_age ) ) ) {
				return 0;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( this.enemy_minimum_age ) ) ) {
				return 0;
			}
			return Num13.MaxInt( 0, ((int)( this.enemy_minimum_age - Convert.ToDouble( C.player_age ) )) );
		}

		// Function from file: game_mode.dm
		public bool age_check( Client C = null ) {
			
			if ( this.get_remaining_days( C ) == 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: game_mode.dm
		public string printobjectives( Mind ply = null ) {
			string text = null;
			int count = 0;
			Objective objective = null;

			text = "";
			count = 1;

			foreach (dynamic _a in Lang13.Enumerate( ply.objectives, typeof(Objective) )) {
				objective = _a;
				

				if ( objective.check_completion() != 0 ) {
					text += "<br><b>Objective #" + count + "</b>: " + objective.explanation_text + " <span class='greenannounce'>Success!</span>";
				} else {
					text += "<br><b>Objective #" + count + "</b>: " + objective.explanation_text + " <span class='boldannounce'>Fail.</span>";
				}
				count++;
			}
			return text;
		}

		// Function from file: game_mode.dm
		public string printplayer( Mind ply = null, bool? fleecheck = null ) {
			string text = null;

			text = "<br><b>" + ply.key + "</b> was <b>" + ply.name + "</b> the <b>" + ply.assigned_role + "</b> and";

			if ( Lang13.Bool( ply.current ) ) {
				
				if ( Convert.ToInt32( ply.current.stat ) == 2 ) {
					text += " <span class='boldannounce'>died</span>";
				} else {
					text += " <span class='greenannounce'>survived</span>";
				}

				if ( fleecheck == true && Convert.ToDouble( ply.current.z ) > 1 ) {
					text += " while <span class='boldannounce'>fleeing the station</span>";
				}

				if ( ply.current.real_name != ply.name ) {
					text += " as <b>" + ply.current.real_name + "</b>";
				}
			} else {
				text += " <span class='boldannounce'>had their body destroyed</span>";
			}
			return text;
		}

		// Function from file: game_mode.dm
		public ByTable get_all_sec(  ) {
			ByTable _default = null;

			Mob_Living_Carbon_Human player = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( player.mind != null && GlobalVars.security_positions.Contains( player.mind.assigned_role ) ) {
					_default.Or( player.mind );
				}
			}
			return _default;
		}

		// Function from file: game_mode.dm
		public ByTable get_living_sec(  ) {
			ByTable _default = null;

			Mob_Living_Carbon_Human player = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( player.stat != 2 && player.mind != null && GlobalVars.security_positions.Contains( player.mind.assigned_role ) ) {
					_default.Or( player.mind );
				}
			}
			return _default;
		}

		// Function from file: game_mode.dm
		public ByTable get_all_heads(  ) {
			ByTable _default = null;

			dynamic player = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				player = _a;
				

				if ( Lang13.Bool( player.mind ) && GlobalVars.command_positions.Contains( player.mind.assigned_role ) ) {
					_default.Or( player.mind );
				}
			}
			return _default;
		}

		// Function from file: game_mode.dm
		public ByTable get_living_heads(  ) {
			ByTable _default = null;

			Mob_Living_Carbon_Human player = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( player.stat != 2 && player.mind != null && GlobalVars.command_positions.Contains( player.mind.assigned_role ) ) {
					_default.Or( player.mind );
				}
			}
			return _default;
		}

		// Function from file: game_mode.dm
		public int num_players(  ) {
			int _default = 0;

			Mob_NewPlayer P = null;

			_default = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				P = _a;
				

				if ( P.client != null && Lang13.Bool( P.ready ) ) {
					_default++;
				}
			}
			return _default;
		}

		// Function from file: game_mode.dm
		public ByTable get_players_for_role( string role = null ) {
			dynamic players = null;
			ByTable candidates = null;
			dynamic drafted = null;
			dynamic applicant = null;
			Mob_NewPlayer player = null;
			Mob_NewPlayer player2 = null;
			Mind player3 = null;
			dynamic job = null;
			Mob_NewPlayer player4 = null;
			Mind player5 = null;
			dynamic job2 = null;
			Mind player6 = null;
			dynamic job3 = null;

			players = new ByTable();
			candidates = new ByTable();
			drafted = new ByTable();
			applicant = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( player.client != null && Lang13.Bool( player.ready ) ) {
					players += player;
				}
			}
			players = GlobalFuncs.shuffle( players );

			foreach (dynamic _b in Lang13.Enumerate( players, typeof(Mob_NewPlayer) )) {
				player2 = _b;
				

				if ( player2.client != null && Lang13.Bool( player2.ready ) ) {
					
					if ( player2.client.prefs.be_special.Contains( role ) ) {
						
						if ( !GlobalFuncs.jobban_isbanned( player2, "Syndicate" ) && !GlobalFuncs.jobban_isbanned( player2, role ) ) {
							
							if ( this.age_check( player2.client ) ) {
								candidates.Add( player2.mind );
							}
						}
					}
				}
			}

			if ( this.restricted_jobs != null ) {
				
				foreach (dynamic _d in Lang13.Enumerate( candidates, typeof(Mind) )) {
					player3 = _d;
					

					foreach (dynamic _c in Lang13.Enumerate( this.restricted_jobs )) {
						job = _c;
						

						if ( player3.assigned_role == job ) {
							candidates.Remove( player3 );
						}
					}
				}
			}

			if ( candidates.len < this.recommended_enemies ) {
				
				foreach (dynamic _e in Lang13.Enumerate( players, typeof(Mob_NewPlayer) )) {
					player4 = _e;
					

					if ( player4.client != null && Lang13.Bool( player4.ready ) ) {
						
						if ( !player4.client.prefs.be_special.Contains( role ) ) {
							
							if ( !GlobalFuncs.jobban_isbanned( player4, "Syndicate" ) && !GlobalFuncs.jobban_isbanned( player4, role ) ) {
								drafted += player4.mind;
							}
						}
					}
				}
			}

			if ( this.restricted_jobs != null ) {
				
				foreach (dynamic _g in Lang13.Enumerate( drafted, typeof(Mind) )) {
					player5 = _g;
					

					foreach (dynamic _f in Lang13.Enumerate( this.restricted_jobs )) {
						job2 = _f;
						

						if ( player5.assigned_role == job2 ) {
							drafted -= player5;
						}
					}
				}
			}
			drafted = GlobalFuncs.shuffle( drafted );

			while (candidates.len < this.recommended_enemies) {
				
				if ( drafted.len > 0 ) {
					applicant = Rand13.PickFromTable( drafted );

					if ( Lang13.Bool( applicant ) ) {
						candidates.Add( applicant );
						drafted.Remove( applicant );
					}
				} else {
					break;
				}
			}

			if ( this.restricted_jobs != null ) {
				
				foreach (dynamic _i in Lang13.Enumerate( drafted, typeof(Mind) )) {
					player6 = _i;
					

					foreach (dynamic _h in Lang13.Enumerate( this.restricted_jobs )) {
						job3 = _h;
						

						if ( player6.assigned_role == job3 ) {
							drafted -= player6;
						}
					}
				}
			}
			drafted = GlobalFuncs.shuffle( drafted );

			while (candidates.len < this.recommended_enemies) {
				
				if ( drafted.len > 0 ) {
					applicant = Rand13.PickFromTable( drafted );

					if ( Lang13.Bool( applicant ) ) {
						candidates.Add( applicant );
						drafted.Remove( applicant );
					}
				} else {
					break;
				}
			}
			return candidates;
		}

		// Function from file: game_mode.dm
		public virtual void send_intercept( int? report = null ) {
			string intercepttext = null;
			dynamic possible_modes = null;
			int number = 0;
			int i = 0;
			InterceptText i_text = null;
			dynamic A = null;

			intercepttext = "<FONT size = 3><B>Centcom Update</B> Requested status information:</FONT><HR>";
			intercepttext += "<B> Centcom has recently been contacted by the following syndicate affiliated organisations in your area, please investigate any information you may have:</B>";
			possible_modes = new ByTable();
			possible_modes.Add( "revolution", "wizard", "nuke", "traitor", "malf", "changeling", "cult", "gang" );
			possible_modes -= "" + GlobalVars.ticker.mode;
			number = Convert.ToInt32( Rand13.Pick(new object [] { 1, 2 }) );
			i = 0;
			i = 0;

			while (i < number) {
				possible_modes.Remove( Rand13.PickFromTable( possible_modes ) );
				i++;
			}
			possible_modes[Rand13.Int( 1, possible_modes.len )] = "" + GlobalVars.ticker.mode;
			possible_modes = GlobalFuncs.shuffle( possible_modes );
			i_text = new InterceptText();

			foreach (dynamic _a in Lang13.Enumerate( possible_modes )) {
				A = _a;
				

				if ( this.modePlayer.len == 0 ) {
					intercepttext += i_text.build( A );
				} else {
					intercepttext += i_text.build( A, Rand13.PickFromTable( this.modePlayer ) );
				}
			}
			GlobalFuncs.print_command_report( intercepttext, "Centcom Status Summary" );
			GlobalFuncs.priority_announce( "Summary downloaded and printed out at all communications consoles.", "Enemy communication intercept. Security Level Elevated.", "sound/AI/intercept.ogg" );

			if ( GlobalVars.security_level < 1 ) {
				GlobalFuncs.set_security_level( 1 );
			}
			return;
		}

		// Function from file: game_mode.dm
		public virtual bool check_win(  ) {
			return false;
		}

		// Function from file: game_mode.dm
		public virtual bool declare_completion(  ) {
			int clients = 0;
			int surviving_humans = 0;
			int surviving_total = 0;
			int ghosts = 0;
			int escaped_humans = 0;
			int escaped_total = 0;
			dynamic M = null;

			clients = 0;
			surviving_humans = 0;
			surviving_total = 0;
			ghosts = 0;
			escaped_humans = 0;
			escaped_total = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					clients++;

					if ( M is Mob_Living_Carbon_Human ) {
						
						if ( !Lang13.Bool( M.stat ) ) {
							surviving_humans++;

							if ( Convert.ToInt32( M.z ) == 2 ) {
								escaped_humans++;
							}
						}
					}

					if ( !Lang13.Bool( M.stat ) ) {
						surviving_total++;

						if ( Convert.ToInt32( M.z ) == 2 ) {
							escaped_total++;
						}
					}

					if ( M is Mob_Dead_Observer ) {
						ghosts++;
					}
				}
			}

			if ( clients > 0 ) {
				GlobalFuncs.feedback_set( "round_end_clients", clients );
			}

			if ( ghosts > 0 ) {
				GlobalFuncs.feedback_set( "round_end_ghosts", ghosts );
			}

			if ( surviving_humans > 0 ) {
				GlobalFuncs.feedback_set( "survived_human", surviving_humans );
			}

			if ( surviving_total > 0 ) {
				GlobalFuncs.feedback_set( "survived_total", surviving_total );
			}

			if ( escaped_humans > 0 ) {
				GlobalFuncs.feedback_set( "escaped_human", escaped_humans );
			}

			if ( escaped_total > 0 ) {
				GlobalFuncs.feedback_set( "escaped_total", escaped_total );
			}
			GlobalFuncs.send2irc( "Server", "Round just ended." );
			return false;
		}

		// Function from file: game_mode.dm
		public virtual bool check_finished(  ) {
			dynamic Player = null;
			dynamic Player2 = null;

			
			if ( Lang13.Bool( this.replacementmode ) && this.round_converted == 2 ) {
				return ((GameMode)this.replacementmode).check_finished();
			}

			if ( GlobalVars.SSshuttle.emergency.mode >= 6 || this.station_was_nuked ) {
				return true;
			}

			if ( !Lang13.Bool( this.round_converted ) && ( !Lang13.Bool( GlobalVars.config.continuous[this.config_tag] ) || Lang13.Bool( GlobalVars.config.continuous[this.config_tag] ) && Lang13.Bool( GlobalVars.config.midround_antag[this.config_tag] ) ) ) {
				
				if ( !this.continuous_sanity_checked ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
						Player = _a;
						

						if ( Lang13.Bool( Player.mind ) ) {
							
							if ( Lang13.Bool( Player.mind.special_role ) ) {
								this.continuous_sanity_checked = true;
								return false;
							}
						}
					}

					if ( !this.continuous_sanity_checked ) {
						GlobalFuncs.message_admins( "The roundtype (" + this.config_tag + ") has no antagonists, continuous round has been defaulted to on and midround_antag has been defaulted to off." );
						GlobalVars.config.continuous[this.config_tag] = 1;
						GlobalVars.config.midround_antag[this.config_tag] = 0;
						GlobalVars.SSshuttle.emergencyNoEscape = false;
						return false;
					}
				}

				if ( Lang13.Bool( this.living_antag_player ) && Lang13.Bool( this.living_antag_player.mind ) && this.living_antag_player is Mob_Living && Convert.ToInt32( this.living_antag_player.stat ) != 2 && !( this.living_antag_player is Mob_NewPlayer ) && !( this.living_antag_player is Mob_Living_Carbon_Brain ) ) {
					return false;
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.living_mob_list )) {
					Player2 = _b;
					

					if ( Lang13.Bool( Player2.mind ) && Convert.ToInt32( Player2.stat ) != 2 && !( Player2 is Mob_NewPlayer ) && !( Player2 is Mob_Living_Carbon_Brain ) ) {
						
						if ( Lang13.Bool( Player2.mind.special_role ) ) {
							this.living_antag_player = Player2;
							return false;
						}
					}
				}

				if ( !Lang13.Bool( GlobalVars.config.continuous[this.config_tag] ) ) {
					return true;
				} else {
					this.round_converted = Lang13.IntNullable( this.convert_roundtype() );

					if ( !Lang13.Bool( this.round_converted ) ) {
						
						if ( this.round_ends_with_antag_death ) {
							return true;
						} else {
							GlobalVars.config.midround_antag[this.config_tag] = 0;
							return false;
						}
					}
				}
			}
			return false;
		}

		// Function from file: game_mode.dm
		public bool? convert_roundtype(  ) {
			ByTable living_crew = null;
			dynamic Player = null;
			ByTable runnable_modes = null;
			ByTable usable_modes = null;
			GameMode G = null;
			dynamic antag_canadates = null;
			Mob_Living_Carbon_Human H = null;
			Mob_Living_Carbon_Human H2 = null;

			living_crew = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				Player = _a;
				

				if ( Lang13.Bool( Player.mind ) && Convert.ToInt32( Player.stat ) != 2 && !( Player is Mob_NewPlayer ) && !( Player is Mob_Living_Carbon_Brain ) ) {
					living_crew.Add( Player );
				}
			}

			if ( living_crew.len / GlobalVars.joined_player_list.len <= Convert.ToDouble( GlobalVars.config.midround_antag_life_check ) ) {
				GlobalFuncs.message_admins( "Convert_roundtype failed due to too many dead people. Limit is " + GlobalVars.config.midround_antag_life_check * 100 + "% living crew" );
				return null;
			}
			runnable_modes = GlobalVars.config.get_runnable_midround_modes( living_crew.len );
			usable_modes = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( runnable_modes, typeof(GameMode) )) {
				G = _b;
				

				if ( G.reroll_friendly ) {
					usable_modes.Add( G );
				} else {
					GlobalFuncs.qdel( G );
				}
			}

			if ( !( usable_modes != null ) ) {
				GlobalFuncs.message_admins( "Convert_roundtype failed due to no valid modes to convert to. Please report this error to the Coders." );
				return null;
			}
			this.replacementmode = GlobalFuncs.pickweight( usable_modes );

			switch ((int)( GlobalVars.SSshuttle.emergency.mode )) {
				case 4:
				case 5:
					return true;
					break;
				case 2:
					
					if ( GlobalVars.SSshuttle.emergency.timeLeft( 1 ) < Convert.ToDouble( Lang13.Initial( GlobalVars.SSshuttle, "emergencyCallTime" ) * 0.5 ) ) {
						return true;
					}
					break;
			}

			if ( Game13.time >= Convert.ToDouble( GlobalVars.config.midround_antag_time_check * 600 ) ) {
				GlobalFuncs.message_admins( "Convert_roundtype failed due to round length. Limit is " + GlobalVars.config.midround_antag_time_check + " minutes." );
				return null;
			}
			antag_canadates = new ByTable();

			foreach (dynamic _d in Lang13.Enumerate( living_crew, typeof(Mob_Living_Carbon_Human) )) {
				H = _d;
				

				if ( H.client != null && H.client.prefs.allow_midround_antag ) {
					antag_canadates += H;
				}
			}

			if ( !Lang13.Bool( antag_canadates ) ) {
				GlobalFuncs.message_admins( "Convert_roundtype failed due to no antag canadates." );
				return null;
			}
			antag_canadates = GlobalFuncs.shuffle( antag_canadates );

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.replacementmode.restricted_jobs.Add( this.replacementmode.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				this.replacementmode.restricted_jobs.Add( "Assistant" );
			}
			GlobalFuncs.message_admins( new Txt( "The roundtype will be converted. If you have other plans for the station or think the round should end <A HREF='?_src_=holder;toggle_midround_antag=" ).Ref( Task13.User ).str( "'>stop the creation of antags</A> or <A HREF='?_src_=holder;end_round=" ).Ref( Task13.User ).str( "'>end the round now</A>." ).ToString() );
			Task13.Schedule( Rand13.Int( 1200, 3000 ), (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( GlobalVars.config.midround_antag[GlobalVars.ticker.mode.config_tag] ) ) {
					this.round_converted = 0;
					return;
				}

				foreach (dynamic _e in Lang13.Enumerate( antag_canadates, typeof(Mob_Living_Carbon_Human) )) {
					H2 = _e;
					
					((GameMode)this.replacementmode).make_antag_chance( H2 );
				}
				this.round_converted = 2;
				GlobalFuncs.message_admins( "The roundtype has been converted, antagonists may have been created" );
				return;
			}));
			return true;
		}

		// Function from file: game_mode.dm
		public virtual void make_antag_chance( Mob_Living_Carbon_Human character = null ) {
			
			if ( Lang13.Bool( this.replacementmode ) && this.round_converted == 2 ) {
				((GameMode)this.replacementmode).make_antag_chance( character );
			}
			return;
		}

		// Function from file: game_mode.dm
		public virtual bool post_setup( bool? report = null ) {
			report = report ?? false;

			
			if ( !( report == true ) ) {
				report = GlobalVars.config.intercept;
			}
			Task13.Schedule( 6000, (Task13.Closure)(() => {
				GlobalFuncs.display_roundstart_logout_report();
				return;
			}));
			GlobalFuncs.feedback_set_details( "round_start", "" + String13.FormatTime( Game13.realtime, null ) );

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				GlobalFuncs.feedback_set_details( "game_mode", "" + GlobalVars.ticker.mode );
			}

			if ( Lang13.Bool( GlobalVars.revdata.revision ) ) {
				GlobalFuncs.feedback_set_details( "revision", "" + GlobalVars.revdata.revision );
			}
			GlobalFuncs.feedback_set_details( "server_ip", "" + Game13.internet_address + ":" + Game13.port );

			if ( report == true ) {
				Task13.Schedule( Rand13.Int( GlobalVars.waittime_l, GlobalVars.waittime_h ), (Task13.Closure)(() => {
					this.send_intercept( 0 );
					return;
				}));
			}
			GlobalVars.start_state = new StationState();
			GlobalVars.start_state.count( true );
			return true;
		}

		// Function from file: game_mode.dm
		public virtual bool pre_setup(  ) {
			return true;
		}

		// Function from file: game_mode.dm
		public virtual bool can_start(  ) {
			int playerC = 0;
			Mob_NewPlayer player = null;

			playerC = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( player.client != null && Lang13.Bool( player.ready ) ) {
					playerC++;
				}
			}

			if ( !GlobalVars.Debug2 ) {
				
				if ( playerC < this.required_players ) {
					return false;
				}
			}
			this.antag_candidates = this.get_players_for_role( this.antag_flag );

			if ( !GlobalVars.Debug2 ) {
				
				if ( this.antag_candidates.len < this.required_enemies ) {
					return false;
				}
				return true;
			} else {
				Game13.WriteMsg( "<span class='notice'>DEBUG: GAME STARTING WITHOUT PLAYER NUMBER CHECKS, THIS WILL PROBABLY BREAK SHIT." );
				return true;
			}
		}

		// Function from file: game_mode.dm
		[VerbInfo( name: "announce" )]
		public void _internal_announce(  ) {
			Game13.WriteMsg( "<B>Notice</B>: " + this + " did not define announce()" );
			return;
		}

		// Function from file: antag_hud.dm
		public void set_antag_hud( dynamic M = null, string new_icon_state = null ) {
			dynamic holder = null;

			
			if ( !( M is Mob ) ) {
				Task13.Crash( "set_antag_hud(): " + M + " (" + M.type + ") is not a mob!" );
			}
			holder = M.hud_list["12"];

			if ( Lang13.Bool( holder ) ) {
				holder.icon_state = new_icon_state;
			}

			if ( Lang13.Bool( M.mind ) || Lang13.Bool( new_icon_state ) ) {
				M.mind.antag_hud_icon_state = new_icon_state;
			}
			return;
		}

	}

}