// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tgui : Game_Data {

		public dynamic user = null;
		public Game_Data src_object = null;
		public string title = null;
		public string ui_key = null;
		public string window_id = null;
		public int? width = 0;
		public int? height = 0;
		public ByTable window_options = new ByTable().Set( "focus", 0 ).Set( "titlebar", 1 ).Set( "can_resize", 1 ).Set( "can_minimize", 1 ).Set( "can_maximize", 0 ).Set( "can_close", 1 ).Set( "auto_format", 0 );
		public string style = "nanotrasen";
		public string v_interface = null;
		public int? autoupdate = 1;
		public int? initialized = 0;
		public ByTable initial_data = null;
		public int status = 2;
		public UiState state = null;
		public Tgui master_ui = null;
		public ByTable children = new ByTable();

		// Function from file: tgui.dm
		public Tgui ( dynamic user = null, Game_Data src_object = null, string ui_key = null, string _interface = null, string title = null, int? width = null, int? height = null, Tgui master_ui = null, UiState state = null ) {
			width = width ?? 0;
			height = height ?? 0;
			state = state ?? GlobalVars.default_state;

			dynamic assets = null;

			this.user = user;
			this.src_object = src_object;
			this.ui_key = ui_key;
			this.window_id = new Txt().Ref( src_object ).str( "-" ).item( ui_key ).ToString();
			this.set_interface( _interface );

			if ( Lang13.Bool( title ) ) {
				this.title = GlobalFuncs.sanitize( title );
			}

			if ( Lang13.Bool( width ) ) {
				this.width = width;
			}

			if ( Lang13.Bool( height ) ) {
				this.height = height;
			}
			this.master_ui = master_ui;

			if ( master_ui != null ) {
				master_ui.children.Add( this );
			}
			this.state = state;
			assets = GlobalFuncs.get_asset_datum( typeof(Asset_Simple_Tgui) );
			assets.send( user );
			return;
		}

		// Function from file: tgui.dm
		public override int? process( dynamic seconds = null ) {
			seconds = seconds ?? 0;

			Game_Data host = null;

			host = this.src_object.ui_host();

			if ( !( this.src_object != null ) || !( host != null ) || !Lang13.Bool( this.user ) ) {
				this.close();
				return null;
			}

			if ( this.status != 0 && ( Lang13.Bool( seconds ) || Lang13.Bool( this.autoupdate ) ) ) {
				this.update();
			} else {
				this.update_status( true );
			}
			return null;
		}

		// Function from file: tgui.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string action = null;
			ByTable _params = null;

			
			if ( this.user != Task13.User ) {
				return null;
			}
			action = href_list["action"];
			_params = href_list;
			_params.Remove( "action" );

			switch ((string)( action )) {
				case "tgui:initialize":
					Interface13.Output( this.user, String13.UrlEncode( this.get_json( this.initial_data ), false ), "" + this.window_id + ".browser:initialize" );
					this.initialized = GlobalVars.TRUE;
					break;
				case "tgui:view":
					
					if ( Lang13.Bool( _params["screen"] ) ) {
						this.src_object.ui_screen = _params["screen"];
					}
					GlobalVars.SStgui.update_uis( this.src_object );
					break;
				case "tgui:link":
					Interface13.Link( this.user, _params["url"] );
					break;
				case "tgui:fancy":
					this.user.client.prefs.tgui_fancy = GlobalVars.TRUE;
					break;
				case "tgui:nofrills":
					this.user.client.prefs.tgui_fancy = GlobalVars.FALSE;
					break;
				default:
					this.update_status( false );

					if ( Lang13.Bool( this.src_object.ui_act( action, _params, this, this.state ) ) ) {
						GlobalVars.SStgui.update_uis( this.src_object );
					}
					break;
			}
			return null;
		}

		// Function from file: tgstation.dme
		public void set_status( int status = 0, bool? push = null ) {
			push = push ?? false;

			
			if ( this.status != status ) {
				
				if ( this.status == 0 ) {
					this.status = status;

					if ( push == true ) {
						this.update();
					}
				} else {
					this.status = status;

					if ( status == 0 || push == true ) {
						this.push_data( null, true );
					}
				}
			}
			return;
		}

		// Function from file: tgui.dm
		public void update_status( bool? push = null ) {
			push = push ?? false;

			int status = 0;

			status = this.src_object.ui_status( this.user, this.state );

			if ( this.master_ui != null ) {
				status = Num13.MinInt( status, this.master_ui.status );
			}
			this.set_status( status, push );

			if ( status == -1 ) {
				this.close();
			}
			return;
		}

		// Function from file: tgui.dm
		public void update( bool? force_open = null ) {
			force_open = force_open ?? false;

			this.src_object.ui_interact( this.user, this.ui_key, this, force_open, this.master_ui, this.state );
			return;
		}

		// Function from file: tgui.dm
		public void push_data( ByTable data = null, bool? force = null ) {
			force = force ?? false;

			this.update_status( false );

			if ( !Lang13.Bool( this.initialized ) ) {
				return;
			}

			if ( this.status <= 0 && !( force == true ) ) {
				return;
			}
			Interface13.Output( this.user, String13.UrlEncode( this.get_json( data ), false ), "" + this.window_id + ".browser:update" );
			return;
		}

		// Function from file: tgui.dm
		public dynamic get_json( ByTable data = null ) {
			ByTable json_data = null;
			dynamic json = null;

			json_data = new ByTable();
			json_data["config"] = this.get_config_data();

			if ( !( data == null ) ) {
				json_data["data"] = data;
			}
			json = GlobalFuncs.json_encode( json_data );
			json = GlobalFuncs.replacetext( json, "ÿ", "" );
			json = GlobalFuncs.replacetext( json, "ÿ", "" );
			return json;
		}

		// Function from file: tgui.dm
		public ByTable get_config_data(  ) {
			ByTable config_data = null;

			config_data = new ByTable()
				.Set( "title", this.title )
				.Set( "status", this.status )
				.Set( "screen", this.src_object.ui_screen )
				.Set( "style", this.style )
				.Set( "interface", this.v_interface )
				.Set( "fancy", this.user.client.prefs.tgui_fancy )
				.Set( "locked", this.user.client.prefs.tgui_lock )
				.Set( "window", this.window_id )
				.Set( "ref", new Txt().Ref( this ).ToString() )
				.Set( "user", new ByTable().Set( "name", this.user.name ).Set( "ref", new Txt().Ref( this.user ).ToString() ) )
				.Set( "srcObject", new ByTable().Set( "name", "" + this.src_object ).Set( "ref", new Txt().Ref( this.src_object ).ToString() ) )
			;
			return config_data;
		}

		// Function from file: tgui.dm
		public dynamic get_html( bool inline = false ) {
			dynamic html = null;

			
			if ( inline ) {
				html = GlobalFuncs.replacetextEx( GlobalVars.SStgui.basehtml, "{}", this.get_json( this.initial_data ) );
			} else {
				html = GlobalVars.SStgui.basehtml;
			}
			html = GlobalFuncs.replacetextEx( html, "[ref]", new Txt().Ref( this ).ToString() );
			html = GlobalFuncs.replacetextEx( html, "[style]", this.style );
			return html;
		}

		// Function from file: tgui.dm
		public void set_initial_data( ByTable data = null ) {
			this.initial_data = data;
			return;
		}

		// Function from file: tgui.dm
		public void set_autoupdate( int? state = null ) {
			state = state ?? 1;

			this.autoupdate = state;
			return;
		}

		// Function from file: tgui.dm
		public void set_interface( string _interface = null ) {
			this.v_interface = String13.ToLower( _interface );
			return;
		}

		// Function from file: tgui.dm
		public void set_style( string style = null ) {
			this.style = String13.ToLower( style );
			return;
		}

		// Function from file: tgui.dm
		public void set_window_options( dynamic window_options = null ) {
			this.window_options = window_options;
			return;
		}

		// Function from file: tgui.dm
		public void close(  ) {
			Tgui child = null;

			Interface13.Browse( this.user, null, "window=" + this.window_id );
			GlobalVars.SStgui.on_close( this );

			foreach (dynamic _a in Lang13.Enumerate( this.children, typeof(Tgui) )) {
				child = _a;
				
				child.close();
			}
			this.children.Cut();
			this.state = null;
			this.master_ui = null;
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: tgui.dm
		public void reinitialize( string _interface = null, ByTable data = null ) {
			
			if ( Lang13.Bool( _interface ) ) {
				this.set_interface( _interface );
			}

			if ( data != null ) {
				this.set_initial_data( data );
			}
			this.open();
			return;
		}

		// Function from file: tgui.dm
		public void open(  ) {
			string window_size = null;
			bool debugable = false;

			
			if ( !Lang13.Bool( this.user.client ) ) {
				return;
			}
			this.update_status( false );

			if ( this.status < 1 ) {
				return;
			}

			if ( !( this.initial_data != null ) ) {
				this.set_initial_data( this.src_object.ui_data( this.user ) );
			}
			window_size = "";

			if ( Lang13.Bool( this.width ) && Lang13.Bool( this.height ) ) {
				window_size = "size=" + this.width + "x" + this.height + ";";
			}
			debugable = GlobalFuncs.check_rights_for( this.user.client, 32 );
			Interface13.Browse( this.user, this.get_html( debugable ), "window=" + this.window_id + ";" + window_size + String13.MakeUrlParams( this.window_options ) );
			Interface13.WindowSet( this.user, this.window_id, new Txt( "on-close=\"uiclose " ).Ref( this ).str( "\"" ).ToString() );
			GlobalVars.SStgui.on_open( this );
			return;
		}

	}

}