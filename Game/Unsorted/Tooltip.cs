// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tooltip : Game_Data {

		public Client owner = null;
		public string control = "mainwindow.tooltip";
		public string file = "code/modules/tooltip/tooltip.html";
		public bool showing = false;
		public bool queueHide = false;
		public bool init = false;

		// Function from file: tooltip.dm
		public Tooltip ( Client C = null ) {
			
			if ( C != null ) {
				this.owner = C;
				Interface13.Browse( this.owner, File13.Read( this.file ), "window=" + this.control );
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: tooltip.dm
		public bool hide(  ) {
			
			if ( this.queueHide ) {
				Task13.Schedule( 1, (Task13.Closure)(() => {
					Interface13.WindowShow( this.owner, this.control, 0 );
					return;
				}));
			} else {
				Interface13.WindowShow( this.owner, this.control, 0 );
			}
			this.queueHide = ( this.showing ? true : false );
			return true;
		}

		// Function from file: tooltip.dm
		public bool show( Obj_Screen thing = null, string _params = null, string title = null, string content = null, string theme = null, string special = null ) {
			theme = theme ?? "default";
			special = special ?? "none";

			
			if ( !( thing != null ) || !Lang13.Bool( _params ) || !Lang13.Bool( title ) && !Lang13.Bool( content ) || !( this.owner != null ) || !Lang13.Bool( Lang13.IsNumber( Game13.icon_size ) ) ) {
				return false;
			}

			if ( !this.init ) {
				this.init = true;
				Interface13.Output( this.owner, String13.MakeUrlParams( new ByTable(new object [] { Game13.icon_size, this.control }) ), "" + this.control + ":tooltip.init" );
			}
			this.showing = true;

			if ( Lang13.Bool( title ) && Lang13.Bool( content ) ) {
				title = "<h1>" + title + "</h1>";
				content = "<p>" + content + "</p>";
			} else if ( Lang13.Bool( title ) && !Lang13.Bool( content ) ) {
				title = "<p>" + title + "</p>";
			} else if ( !Lang13.Bool( title ) && Lang13.Bool( content ) ) {
				content = "<p>" + content + "</p>";
			}
			_params = "{ \"cursor\": \"" + _params + "\", \"screenLoc\": \"" + thing.screen_loc + "\" }";
			Interface13.Output( this.owner, String13.MakeUrlParams( new ByTable(new object [] { _params, this.owner.view, "" + title + content, theme, special }) ), "" + this.control + ":tooltip.update" );
			this.showing = false;

			if ( this.queueHide ) {
				this.hide();
			}
			return true;
		}

	}

}