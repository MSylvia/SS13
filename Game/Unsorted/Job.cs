// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Job : Game_Data {

		public string title = "NOPE";
		public ByTable minimal_access = new ByTable();
		public ByTable access = new ByTable();
		public ByTable department_head = new ByTable();
		public int flag = 0;
		public int? department_flag = 0;
		public string faction = "None";
		public dynamic total_positions = 0;
		public double? spawn_positions = 0;
		public double? current_positions = 0;
		public string supervisors = "";
		public string selection_color = "#ffffff";
		public bool req_admin_notify = false;
		public int minimal_player_age = 0;
		public Type outfit = null;

		// Function from file: security.dm
		public ByTable check_config_for_sec_maint(  ) {
			
			if ( ( GlobalVars.config.jobs_have_maint_access & 2 ) != 0 ) {
				return new ByTable(new object [] { GlobalVars.access_maint_tunnels });
			}
			return new ByTable();
		}

		// Function from file: job.dm
		public virtual bool config_check(  ) {
			return true;
		}

		// Function from file: job.dm
		public int available_in_days( Client C = null ) {
			
			if ( !( C != null ) ) {
				return 0;
			}

			if ( !GlobalVars.config.use_age_restriction_for_jobs ) {
				return 0;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( C.player_age ) ) ) {
				return 0;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( this.minimal_player_age ) ) ) {
				return 0;
			}
			return Num13.MaxInt( 0, ((int)( this.minimal_player_age - Convert.ToDouble( C.player_age ) )) );
		}

		// Function from file: job.dm
		public bool player_old_enough( Client C = null ) {
			
			if ( this.available_in_days( C ) == 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: job.dm
		public virtual ByTable get_access(  ) {
			ByTable _default = null;

			
			if ( !( GlobalVars.config != null ) ) {
				return this.minimal_access.Copy();
			}
			_default = new ByTable();

			if ( GlobalVars.config.jobs_have_minimal_access ) {
				_default = this.minimal_access.Copy();
			} else {
				_default = this.access.Copy();
			}

			if ( ( GlobalVars.config.jobs_have_maint_access & 4 ) != 0 ) {
				_default.Or( new ByTable(new object [] { GlobalVars.access_maint_tunnels }) );
			}
			return _default;
		}

		// Function from file: job.dm
		public bool apply_fingerprints( dynamic H = null ) {
			Obj_Item I = null;
			Obj_Item I2 = null;

			
			if ( !( H is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( Lang13.Bool( H.back ) ) {
				((Ent_Static)H.back).add_fingerprint( H, true );

				foreach (dynamic _a in Lang13.Enumerate( H.back.contents, typeof(Obj_Item) )) {
					I = _a;
					
					I.add_fingerprint( H, true );
				}
			}

			if ( Lang13.Bool( H.wear_id ) ) {
				((Ent_Static)H.wear_id).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.w_uniform ) ) {
				((Ent_Static)H.w_uniform).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.wear_suit ) ) {
				((Ent_Static)H.wear_suit).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.wear_mask ) ) {
				((Ent_Static)H.wear_mask).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.head ) ) {
				((Ent_Static)H.head).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.shoes ) ) {
				((Ent_Static)H.shoes).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.gloves ) ) {
				((Ent_Static)H.gloves).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.ears ) ) {
				((Ent_Static)H.ears).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.glasses ) ) {
				((Ent_Static)H.glasses).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.belt ) ) {
				((Ent_Static)H.belt).add_fingerprint( H, true );

				foreach (dynamic _b in Lang13.Enumerate( H.belt.contents, typeof(Obj_Item) )) {
					I2 = _b;
					
					I2.add_fingerprint( H, true );
				}
			}

			if ( Lang13.Bool( H.s_store ) ) {
				((Ent_Static)H.s_store).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.l_store ) ) {
				((Ent_Static)H.l_store).add_fingerprint( H, true );
			}

			if ( Lang13.Bool( H.r_store ) ) {
				((Ent_Static)H.r_store).add_fingerprint( H, true );
			}
			return true;
		}

		// Function from file: job.dm
		public virtual dynamic equip( dynamic H = null, int? visualsOnly = null ) {
			visualsOnly = visualsOnly ?? GlobalVars.FALSE;

			
			if ( !Lang13.Bool( H ) ) {
				return 0;
			}
			((Species)H.dna.species).before_equip_job( this, H, visualsOnly );

			if ( this.outfit != null ) {
				((Mob_Living_Carbon_Human)H).equipOutfit( this.outfit, visualsOnly );
			}
			((Species)H.dna.species).after_equip_job( this, H );
			return null;
		}

		// Function from file: job.dm
		public void equip_items( dynamic H = null ) {
			return;
		}

	}

}