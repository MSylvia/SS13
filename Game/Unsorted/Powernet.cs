// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Powernet : Game_Data {

		public dynamic number = null;
		public ByTable cables = new ByTable();
		public ByTable nodes = new ByTable();
		public double load = 0;
		public double newavail = 0;
		public double avail = 0;
		public int viewavail = 0;
		public double viewload = 0;
		public double netexcess = 0;

		// Function from file: powernet.dm
		public Powernet (  ) {
			GlobalVars.SSmachine.powernets.Add( this );
			return;
		}

		// Function from file: powernet.dm
		public int get_electrocute_damage(  ) {
			
			if ( this.avail >= 1000 ) {
				return Num13.MaxInt( 10, Num13.MinInt( Num13.Floor( this.avail / 10000 ), 90 ) ) + Rand13.Int( -5, 5 );
			} else {
				return 0;
			}
		}

		// Function from file: powernet.dm
		public void reset(  ) {
			Obj_Machinery_Power_Smes S = null;

			this.netexcess = this.avail - this.load;

			if ( this.netexcess > 100 && this.nodes != null && this.nodes.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.nodes, typeof(Obj_Machinery_Power_Smes) )) {
					S = _a;
					
					S.restore();
				}
			}
			this.viewavail = Num13.Floor( this.viewavail * 0.8 + this.avail * 0.2 );
			this.viewload = Num13.Floor( this.viewload * 0.8 + this.load * 0.2 );
			this.load = 0;
			this.avail = this.newavail;
			this.newavail = 0;
			return;
		}

		// Function from file: powernet.dm
		public void add_machine( Obj_Machinery_Power M = null ) {
			
			if ( Lang13.Bool( M.powernet ) ) {
				
				if ( M.powernet == this ) {
					return;
				} else {
					M.disconnect_from_network();
				}
			}
			M.powernet = this;
			this.nodes[M] = M;
			return;
		}

		// Function from file: powernet.dm
		public void remove_machine( Obj_Machinery_Power M = null ) {
			this.nodes.Remove( M );
			M.powernet = null;

			if ( this.is_empty() ) {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: powernet.dm
		public void add_cable( dynamic C = null ) {
			
			if ( Lang13.Bool( C.powernet ) ) {
				
				if ( C.powernet == this ) {
					return;
				} else {
					((Powernet)C.powernet).remove_cable( C );
				}
			}
			C.powernet = this;
			this.cables.Add( C );
			return;
		}

		// Function from file: powernet.dm
		public void remove_cable( dynamic C = null ) {
			this.cables.Remove( C );
			C.powernet = null;

			if ( this.is_empty() ) {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: powernet.dm
		public bool is_empty(  ) {
			return !( this.cables.len != 0 ) && !( this.nodes.len != 0 );
		}

		// Function from file: powernet.dm
		public override dynamic Destroy(  ) {
			Obj_Structure_Cable C = null;
			Obj_Machinery_Power M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.cables, typeof(Obj_Structure_Cable) )) {
				C = _a;
				
				this.cables.Remove( C );
				C.powernet = null;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.nodes, typeof(Obj_Machinery_Power) )) {
				M = _b;
				
				this.nodes.Remove( M );
				M.powernet = null;
			}
			GlobalVars.SSmachine.powernets.Remove( this );
			return base.Destroy();
		}

	}

}