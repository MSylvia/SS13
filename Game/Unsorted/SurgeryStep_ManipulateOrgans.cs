// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_ManipulateOrgans : SurgeryStep {

		public ByTable implements_extract = new ByTable().Set( typeof(Obj_Item_Weapon_Hemostat), 100 ).Set( typeof(Obj_Item_Weapon_Crowbar), 55 );
		public ByTable implements_mend = new ByTable().Set( typeof(Obj_Item_Weapon_Cautery), 100 ).Set( typeof(Obj_Item_Weapon_Weldingtool), 70 ).Set( typeof(Obj_Item_Weapon_Lighter), 45 ).Set( typeof(Obj_Item_Weapon_Match), 20 );
		public string current_type = null;
		public dynamic I = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.time = 64;
			this.name = "manipulate organs";
			this.implements = new ByTable().Set( typeof(Obj_Item_Organ_Internal), 100 ).Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Organ), 0 );
		}

		// Function from file: organ_manipulation.dm
		public SurgeryStep_ManipulateOrgans (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.implements = this.implements + this.implements_extract + this.implements_mend;
			return;
		}

		// Function from file: organ_manipulation.dm
		public override bool success( dynamic user = null, Mob target = null, string target_zone = null, dynamic tool = null, Surgery surgery = null ) {
			
			if ( this.current_type == "mend" ) {
				((Ent_Static)user).visible_message( "" + user + " mends the incision in " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + ".", "<span class='notice'>You mend the incision in " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + ".</span>" );
				return true;
			} else if ( this.current_type == "insert" ) {
				this.I = tool;
				user.drop_item();
				this.I.Insert( target );
				((Ent_Static)user).visible_message( "" + user + " inserts " + tool + " into " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "!", "<span class='notice'>You insert " + tool + " into " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + ".</span>" );
			} else if ( this.current_type == "extract" ) {
				
				if ( Lang13.Bool( this.I ) && this.I.owner == target ) {
					((Ent_Static)user).visible_message( "" + user + " successfully extracts " + this.I + " from " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "!", "<span class='notice'>You successfully extract " + this.I + " from " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + ".</span>" );
					GlobalFuncs.add_logs( user, target, "surgically removed " + this.I.name + " from", null, "INTENT: " + String13.ToUpper( user.a_intent ) );
					this.I.Remove( target );
					this.I.loc = GlobalFuncs.get_turf( target );
				} else {
					((Ent_Static)user).visible_message( "" + user + " can't seem to extract anything from " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "!", "<span class='notice'>You can't extract anything from " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "!</span>" );
				}
			}
			return false;
		}

		// Function from file: organ_manipulation.dm
		public override int preop( dynamic user = null, Mob target = null, string target_zone = null, dynamic tool = null, Surgery surgery = null ) {
			ByTable organs = null;
			Obj_Item_Organ_Internal O = null;

			this.I = null;

			if ( GlobalFuncs.isorgan( tool ) ) {
				this.current_type = "insert";
				this.I = tool;

				if ( target_zone != this.I.zone || target.getorganslot( this.I.slot ) != null ) {
					user.WriteMsg( "<span class='notice'>There is no room for " + this.I + " in " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "!</span>" );
					return -1;
				}
				((Ent_Static)user).visible_message( "" + user + " begins to insert " + tool + " into " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + ".", "<span class='notice'>You begin to insert " + tool + " into " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "...</span>" );
			} else if ( this.implements_extract.Contains( this.implement_type ) ) {
				this.current_type = "extract";
				organs = target.getorganszone( target_zone );

				if ( !( organs.len != 0 ) ) {
					user.WriteMsg( "<span class='notice'>There is no removeable organs in " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "!</span>" );
					return -1;
				} else {
					
					foreach (dynamic _a in Lang13.Enumerate( organs, typeof(Obj_Item_Organ_Internal) )) {
						O = _a;
						
						O.on_find( user );
						organs.Remove( O );
						organs[O.name] = O;
					}
					this.I = Interface13.Input( "Remove which organ?", "Surgery", null, null, organs, InputType.Null | InputType.Any );

					if ( Lang13.Bool( this.I ) && Lang13.Bool( user ) && target != null && ((Ent_Static)user).Adjacent( target ) && ((Mob)user).get_active_hand() == tool ) {
						this.I = organs[this.I];

						if ( !Lang13.Bool( this.I ) ) {
							return -1;
						}
						((Ent_Static)user).visible_message( "" + user + " begins to extract " + this.I + " from " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + ".", "<span class='notice'>You begin to extract " + this.I + " from " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "...</span>" );
					} else {
						return -1;
					}
				}
			} else if ( this.implements_mend.Contains( this.implement_type ) ) {
				this.current_type = "mend";
				((Ent_Static)user).visible_message( "" + user + " begins to mend the incision in " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + ".", "<span class='notice'>You begin to mend the incision in " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + "...</span>" );
			} else if ( tool is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Organ ) {
				user.WriteMsg( "<span class='warning'>" + tool + " was biten by someone! It's too damaged to use!</span>" );
				return -1;
			}
			return 0;
		}

		// Function from file: organ_manipulation.dm
		public override bool tool_check( dynamic user = null, dynamic tool = null ) {
			dynamic WT = null;
			dynamic L = null;
			dynamic M = null;

			
			if ( tool is Obj_Item_Weapon_Weldingtool ) {
				WT = tool;

				if ( !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
					return false;
				}
			} else if ( tool is Obj_Item_Weapon_Lighter ) {
				L = tool;

				if ( !Lang13.Bool( L.lit ) ) {
					return false;
				}
			} else if ( tool is Obj_Item_Weapon_Match ) {
				M = tool;

				if ( !Lang13.Bool( M.lit ) ) {
					return false;
				}
			}
			return true;
		}

	}

}