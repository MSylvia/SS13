// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Reagent_Blob_RegenerativeMateria : Reagent_Blob {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Regenerative Materia";
			this.id = "regenerative_materia";
			this.description = "will do low toxin damage and cause targets to believe they are fully healed.";
			this.color = "#C8A5DC";
			this.message_living = ", and you feel <i>alive</i>";
		}

		// Function from file: blob_reagents.dm
		public override void on_mob_delete( dynamic M = null ) {
			dynamic N = null;

			
			if ( M is Mob_Living_Carbon ) {
				N = M;
				N.hal_screwyhud = 0;
			}
			base.on_mob_delete( (object)(M) );
			return;
		}

		// Function from file: blob_reagents.dm
		public override bool on_mob_life( dynamic M = null ) {
			dynamic N = null;

			((Mob_Living)M).adjustToxLoss( 1 );

			if ( M is Mob_Living_Carbon ) {
				N = M;
				N.hal_screwyhud = 5;
			}
			base.on_mob_life( (object)(M) );
			return false;
		}

		// Function from file: blob_reagents.dm
		public override double reaction_mob( dynamic M = null, int? method = null, double? reac_volume = null, bool? show_message = null, dynamic touch_protection = null, Mob_Camera_Blob O = null ) {
			method = method ?? GlobalVars.TOUCH;

			reac_volume = base.reaction_mob( (object)(M), method, reac_volume, show_message, (object)(touch_protection), O );

			if ( Lang13.Bool( M.reagents ) ) {
				((Reagents)M.reagents).add_reagent( "regenerative_materia", ( reac_volume ??0) * 0.2 );
			}
			((Mob_Living)M).apply_damage( ( reac_volume ??0) * 0.6, "tox" );
			return 0;
		}

	}

}