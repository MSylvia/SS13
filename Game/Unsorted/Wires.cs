// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires : Game_Data {

		public Obj holder = null;
		public Type holder_type = null;
		public ByTable wires = new ByTable();
		public ByTable cut_wires = new ByTable();
		public ByTable colors = new ByTable();
		public ByTable assemblies = new ByTable();
		public bool randomize = false;

		// Function from file: wires.dm
		public Wires ( Obj holder = null ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( ((dynamic)this.holder_type).IsInstanceOfType( holder ) ) ) {
				Task13.Crash( "Wire holder is not of the expected type!" );
				return;
			}
			this.holder = holder;

			if ( this.randomize ) {
				this.f_randomize();
			} else if ( !Lang13.Bool( GlobalVars.wire_color_directory[this.holder_type] ) ) {
				this.f_randomize();
				GlobalVars.wire_color_directory[this.holder_type] = this.colors;
			} else {
				this.colors = GlobalVars.wire_color_directory[this.holder_type];
			}
			return;
		}

		// Function from file: wires.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic target_wire = null;
			Mob L = null;
			dynamic I = null;
			Ent_Static O = null;
			dynamic A = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) || !Lang13.Bool( this.interactable( Task13.User ) ) ) {
				return _default;
			}
			target_wire = _params["wire"];
			L = Task13.User;
			I = L.get_active_hand();

			switch ((string)( action )) {
				case "cut":
					
					if ( I is Obj_Item_Weapon_Wirecutters || Lang13.Bool( GlobalFuncs.IsAdminGhost( Task13.User ) ) ) {
						GlobalFuncs.playsound( this.holder, "sound/items/Wirecutter.ogg", 20, 1 );
						this.cut_color( target_wire );
						_default = GlobalVars.TRUE;
					} else {
						L.WriteMsg( "<span class='warning'>You need wirecutters!</span>" );
					}
					break;
				case "pulse":
					
					if ( I is Obj_Item_Device_Multitool || Lang13.Bool( GlobalFuncs.IsAdminGhost( Task13.User ) ) ) {
						GlobalFuncs.playsound( this.holder, "sound/weapons/empty.ogg", 20, 1 );
						this.pulse_color( target_wire );
						_default = GlobalVars.TRUE;
					} else {
						L.WriteMsg( "<span class='warning'>You need a multitool!</span>" );
					}
					break;
				case "attach":
					
					if ( Lang13.Bool( this.is_attached( target_wire ) ) ) {
						O = this.detach_assembly( target_wire );

						if ( O != null ) {
							L.put_in_hands( O );
							_default = GlobalVars.TRUE;
						}
					} else if ( I is Obj_Item_Device_Assembly ) {
						A = I;

						if ( A.attachable ) {
							
							if ( !L.drop_item() ) {
								return _default;
							}
							this.attach_assembly( target_wire, A );
							_default = GlobalVars.TRUE;
						} else {
							L.WriteMsg( "<span class='warning'>You need an attachable assembly!</span>" );
						}
					}
					break;
			}
			return _default;
		}

		// Function from file: wires.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			ByTable payload = null;
			dynamic color = null;

			data = new ByTable();
			payload = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.colors )) {
				color = _a;
				
				payload.Add( new ByTable(new object [] { 
					new ByTable()
						.Set( "color", color )
						.Set( "wire", ( Lang13.Bool( GlobalFuncs.IsAdminGhost( user ) ) ? this.get_wire( color ) : null ) )
						.Set( "cut", this.is_color_cut( color ) )
						.Set( "attached", this.is_attached( color ) )
					
				 }) );
			}
			data["wires"] = payload;
			data["status"] = this.get_status();
			return data;
		}

		// Function from file: wires.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "wires";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.physical_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "wires", "" + this.holder.name + " wires", 350, this.wires.len * 30 + 150, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: wires.dm
		public override int ui_status( dynamic user = null, UiState state = null ) {
			
			if ( Lang13.Bool( this.interactable( user ) ) ) {
				return base.ui_status( (object)(user), state );
			}
			return -1;
		}

		// Function from file: wires.dm
		public override Game_Data ui_host(  ) {
			return this.holder;
		}

		// Function from file: wires.dm
		public void interact( dynamic user = null ) {
			dynamic A = null;
			Obj_Item I = null;

			
			if ( !Lang13.Bool( this.interactable( user ) ) ) {
				return;
			}
			this.ui_interact( user );

			foreach (dynamic _a in Lang13.Enumerate( this.assemblies )) {
				A = _a;
				
				I = this.assemblies[A];

				if ( I is Obj_Item && I.on_found( user ) ) {
					return;
				}
			}
			return;
		}

		// Function from file: wires.dm
		public virtual void on_pulse( string wire = null ) {
			return;
		}

		// Function from file: wires.dm
		public virtual void on_cut( dynamic wire = null, int? mend = null ) {
			mend = mend ?? GlobalVars.FALSE;

			return;
		}

		// Function from file: wires.dm
		public virtual ByTable get_status(  ) {
			return new ByTable();
		}

		// Function from file: wires.dm
		public virtual int? interactable( dynamic user = null ) {
			return GlobalVars.TRUE;
		}

		// Function from file: wires.dm
		public Ent_Static detach_assembly( dynamic color = null ) {
			Ent_Static S = null;

			S = this.get_attached( color );

			if ( S != null && S is Obj_Item_Device_Assembly ) {
				this.assemblies.Remove( color );
				((dynamic)S).connected = null;
				S.loc = this.holder.loc;
				return S;
			}
			return null;
		}

		// Function from file: wires.dm
		public dynamic attach_assembly( dynamic color = null, dynamic S = null ) {
			
			if ( Lang13.Bool( S ) && S is Obj_Item_Device_Assembly && S.attachable && !Lang13.Bool( this.is_attached( color ) ) ) {
				this.assemblies[color] = S;
				S.loc = this.holder;
				S.connected = this;
				return S;
			}
			return null;
		}

		// Function from file: wires.dm
		public int? pulse_assembly( Obj_Item_Device_Assembly S = null ) {
			dynamic color = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.assemblies )) {
				color = _a;
				

				if ( S == this.assemblies[color] ) {
					this.pulse_color( color );
					return GlobalVars.TRUE;
				}
			}
			return null;
		}

		// Function from file: wires.dm
		public void pulse_color( dynamic color = null ) {
			this.pulse( this.get_wire( color ) );
			return;
		}

		// Function from file: wires.dm
		public void pulse( string wire = null ) {
			
			if ( this.is_cut( wire ) ) {
				return;
			}
			this.on_pulse( wire );
			return;
		}

		// Function from file: wires.dm
		public void cut_all(  ) {
			dynamic wire = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.wires )) {
				wire = _a;
				
				this.cut( wire );
			}
			return;
		}

		// Function from file: wires.dm
		public void cut_random(  ) {
			this.cut( this.wires[Rand13.Int( 1, this.wires.len )] );
			return;
		}

		// Function from file: wires.dm
		public void cut_color( dynamic color = null ) {
			this.cut( this.get_wire( color ) );
			return;
		}

		// Function from file: wires.dm
		public void cut( dynamic wire = null ) {
			
			if ( this.is_cut( wire ) ) {
				this.cut_wires.Remove( wire );
				this.on_cut( wire, GlobalVars.TRUE );
			} else {
				this.cut_wires.Add( wire );
				this.on_cut( wire, GlobalVars.FALSE );
			}
			return;
		}

		// Function from file: wires.dm
		public int? is_all_cut(  ) {
			
			if ( this.cut_wires.len == this.wires.len ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

		// Function from file: wires.dm
		public bool is_color_cut( dynamic color = null ) {
			return this.is_cut( this.get_wire( color ) );
		}

		// Function from file: wires.dm
		public bool is_cut( dynamic wire = null ) {
			return this.cut_wires.Contains( wire );
		}

		// Function from file: wires.dm
		public int? is_attached( dynamic color = null ) {
			
			if ( Lang13.Bool( this.assemblies[color] ) ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

		// Function from file: wires.dm
		public dynamic get_attached( dynamic color = null ) {
			
			if ( Lang13.Bool( this.assemblies[color] ) ) {
				return this.assemblies[color];
			}
			return null;
		}

		// Function from file: wires.dm
		public dynamic get_wire( dynamic color = null ) {
			return this.colors[color];
		}

		// Function from file: wires.dm
		public void repair(  ) {
			this.cut_wires.Cut();
			return;
		}

		// Function from file: wires.dm
		public void shuffle_wires(  ) {
			this.colors.Cut();
			this.f_randomize();
			return;
		}

		// Function from file: wires.dm
		[VerbInfo( name: "randomize" )]
		public void f_randomize(  ) {
			ByTable possible_colors = null;
			dynamic wire = null;

			possible_colors = GlobalVars.wire_colors.Copy();

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.shuffle( this.wires ) )) {
				wire = _a;
				
				this.colors[GlobalFuncs.pick_n_take( possible_colors )] = wire;
			}
			return;
		}

		// Function from file: wires.dm
		public void add_duds( int duds = 0 ) {
			string dud = null;

			
			while (duds != 0) {
				dud = "dud" + --duds;

				if ( this.wires.Contains( dud ) ) {
					continue;
				}
				this.wires.Add( dud );
			}
			return;
		}

		// Function from file: wires.dm
		public override dynamic Destroy(  ) {
			this.holder = null;
			this.assemblies = new ByTable();
			return base.Destroy();
		}

	}

}