// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Admins : Game_Data {

		public AdminRank rank = null;
		public Client owner = null;
		public string fakekey = null;
		public dynamic marked_datum = null;
		public double? admincaster_screen = 0;
		public Newscaster_FeedMessage admincaster_feed_message = new Newscaster_FeedMessage();
		public Newscaster_WantedMessage admincaster_wanted_message = new Newscaster_WantedMessage();
		public dynamic admincaster_feed_channel = new Newscaster_FeedChannel();
		public string admin_signature = null;

		// Function from file: holder2.dm
		public Admins ( AdminRank R = null, string ckey = null ) {
			
			if ( !Lang13.Bool( ckey ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					Lang13.Delete( this );
					Task13.Source = null;
					return;
					return;
				}));
				throw new Exception( "Admin datum created without a ckey" );
				return;
			}

			if ( !( R is AdminRank ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					Lang13.Delete( this );
					Task13.Source = null;
					return;
					return;
				}));
				throw new Exception( "Admin datum created without a rank" );
				return;
			}
			this.rank = R;
			this.admin_signature = "Nanotrasen Officer #" + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 );
			GlobalVars.admin_datums[ckey] = this;
			return;
		}

		// Function from file: topic.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic C = null;
			dynamic strength = null;
			dynamic E = null;
			dynamic _event = null;
			string prompt = null;
			string adminckey = null;
			string playerckey = null;
			dynamic banedit = null;
			double? banid = null;
			double? bantype = null;
			string banckey = null;
			dynamic banip = null;
			dynamic bancid = null;
			double? banduration = null;
			dynamic banjob = null;
			string banreason = null;
			dynamic playermob = null;
			dynamic M = null;
			dynamic timer = null;
			dynamic timer2 = null;
			dynamic ratio = null;
			dynamic M2 = null;
			bool? delmob = null;
			dynamic banfolder = null;
			dynamic key = null;
			dynamic reason = null;
			dynamic banfolder2 = null;
			dynamic reason2 = null;
			bool temp = false;
			double minutes = 0;
			dynamic banned_key = null;
			dynamic duration = null;
			dynamic mins = null;
			dynamic M3 = null;
			dynamic banreason2 = null;
			dynamic reason3 = null;
			dynamic M4 = null;
			string dat = null;
			string header = null;
			string body = null;
			string jobs = null;
			int counter = 0;
			dynamic jobPos = null;
			Job job = null;
			dynamic jobPos2 = null;
			Job job2 = null;
			dynamic jobPos3 = null;
			Job job3 = null;
			dynamic jobPos4 = null;
			Job job4 = null;
			dynamic jobPos5 = null;
			Job job5 = null;
			dynamic jobPos6 = null;
			Job job6 = null;
			dynamic jobPos7 = null;
			Job job7 = null;
			dynamic jobPos8 = null;
			Job job8 = null;
			bool isbanned_dept = false;
			dynamic M5 = null;
			ByTable joblist = null;
			dynamic jobPos9 = null;
			Job temp2 = null;
			dynamic jobPos10 = null;
			Job temp3 = null;
			dynamic jobPos11 = null;
			Job temp4 = null;
			dynamic jobPos12 = null;
			Job temp5 = null;
			dynamic jobPos13 = null;
			Job temp6 = null;
			dynamic jobPos14 = null;
			Job temp7 = null;
			dynamic jobPos15 = null;
			Job temp8 = null;
			dynamic jobPos16 = null;
			Job temp9 = null;
			ByTable notbannedlist = null;
			dynamic job9 = null;
			dynamic mins2 = null;
			dynamic reason4 = null;
			dynamic msg = null;
			dynamic job10 = null;
			dynamic reason5 = null;
			dynamic msg2 = null;
			dynamic job11 = null;
			dynamic msg3 = null;
			dynamic job12 = null;
			bool reason6 = false;
			dynamic M6 = null;
			string target_ckey = null;
			dynamic note_id = null;
			dynamic note_id2 = null;
			string target = null;
			dynamic target2 = null;
			string target_ckey2 = null;
			dynamic target3 = null;
			string note_id3 = null;
			DBQuery query_noteedits = null;
			dynamic err = null;
			dynamic edit_log = null;
			dynamic M7 = null;
			dynamic mins3 = null;
			dynamic reason7 = null;
			dynamic reason8 = null;
			dynamic target_ckey3 = null;
			dynamic target_ckey4 = null;
			dynamic target_ckey5 = null;
			dynamic target_ckey6 = null;
			dynamic target_ckey7 = null;
			string target_ckey8 = null;
			string target_ckey9 = null;
			DBQuery query_watchedits = null;
			dynamic err2 = null;
			dynamic edit_log2 = null;
			string dat2 = null;
			dynamic mode = null;
			string dat3 = null;
			dynamic mode2 = null;
			dynamic H = null;
			dynamic Mo = null;
			dynamic H2 = null;
			dynamic M8 = null;
			dynamic speech = null;
			dynamic M9 = null;
			dynamic M10 = null;
			Mob_NewPlayer NP = null;
			dynamic M11 = null;
			Obj_Item I = null;
			dynamic M12 = null;
			Obj_Item I2 = null;
			dynamic M13 = null;
			dynamic M14 = null;
			Obj_Item I3 = null;
			dynamic observer = null;
			dynamic L = null;
			dynamic H3 = null;
			dynamic H4 = null;
			dynamic H5 = null;
			dynamic H6 = null;
			dynamic H7 = null;
			dynamic M15 = null;
			dynamic G = null;
			dynamic newpoints = null;
			dynamic M16 = null;
			dynamic AM = null;
			Client C2 = null;
			Mob A = null;
			double? x = null;
			double? y = null;
			double? z = null;
			Client C3 = null;
			dynamic M17 = null;
			string location_description = null;
			string special_role_description = null;
			string health_description = null;
			string gender_description = null;
			dynamic T = null;
			dynamic L2 = null;
			string status = null;
			string Add = null;
			Job job13 = null;
			string Remove = null;
			Job job14 = null;
			string Unlimit = null;
			Job job15 = null;
			string Limit = null;
			Job job16 = null;
			dynamic H8 = null;
			dynamic M18 = null;
			dynamic H9 = null;
			dynamic input = null;
			dynamic H10 = null;
			dynamic input2 = null;
			dynamic M19 = null;
			dynamic M20 = null;
			dynamic M21 = null;
			dynamic M22 = null;
			dynamic M23 = null;
			dynamic M24 = null;
			Ent_Static loc = null;
			ByTable dirty_paths = null;
			ByTable paths = null;
			dynamic dirty_path = null;
			Type path = null;
			ByTable offset = null;
			int? number = null;
			double? X = null;
			double? Y = null;
			double? Z = null;
			string tmp_dir = null;
			double? obj_dir = null;
			string obj_name = null;
			dynamic target4 = null;
			string where = null;
			dynamic path2 = null;
			int? i = null;
			dynamic O = null;
			dynamic N = null;
			dynamic O2 = null;
			dynamic M25 = null;
			Mob L3 = null;
			dynamic I4 = null;
			Mob R = null;
			dynamic path3 = null;
			dynamic path4 = null;
			bool check = false;
			Newscaster_FeedChannel FC = null;
			string choice = null;
			ByTable available_channels = null;
			Newscaster_FeedChannel F = null;
			Obj_Machinery_Newscaster NEWSCASTER = null;
			bool already_wanted = false;
			double? input_param = null;
			string choice2 = null;
			string choice3 = null;
			dynamic FC2 = null;
			dynamic MSG = null;
			dynamic MSG2 = null;
			dynamic FC3 = null;
			dynamic FC4 = null;
			dynamic FC5 = null;
			dynamic FC6 = null;
			dynamic FC7 = null;
			dynamic FM = null;
			dynamic FM2 = null;
			string sql_key = null;
			DBQuery query_memoedits = null;
			dynamic err3 = null;
			dynamic edit_log3 = null;
			double? afkonly = null;
			ByTable listkicked = null;
			string strkicked = null;
			dynamic name = null;
			Outfit O3 = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.client != this.owner || !GlobalFuncs.check_rights( 0 ) ) {
				GlobalFuncs.message_admins( "" + Task13.User.key + " has attempted to override the admin panel!" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " tried to use the admin panel without authorization." );
				return null;
			}

			if ( Lang13.Bool( href_list["rejectadminhelp"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				C = Lang13.FindObj( href_list["rejectadminhelp"] );

				if ( !Lang13.Bool( C ) ) {
					return null;
				}

				if ( GlobalFuncs.deltimer( C.adminhelptimerid ) ) {
					((Client)C).giveadminhelpverb();
				}
				C.WriteMsg( "sound/effects/adminhelp.ogg" );
				C.WriteMsg( "<font color='red' size='4'><b>- AdminHelp Rejected! -</b></font>" );
				C.WriteMsg( "<font color='red'><b>Your admin help was rejected.</b> The adminhelp verb has been returned to you so that you may try again</font>" );
				C.WriteMsg( "Please try to be calm, clear, and descriptive in admin helps, do not assume the admin has seen any related events, and clearly state the names of anybody you are reporting." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " Rejected " + C.key + "'s admin help. " + C.key + "'s Adminhelp verb has been returned to them" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " Rejected " + C.key + "'s admin help" );
			} else if ( Lang13.Bool( href_list["stickyban"] ) ) {
				this.stickyban( href_list["stickyban"], href_list );
			} else if ( Lang13.Bool( href_list["makeAntag"] ) ) {
				
				if ( !Lang13.Bool( GlobalVars.ticker.mode ) ) {
					Task13.User.WriteMsg( "<span class='danger'>Not until the round starts!</span>" );
					return null;
				}

				dynamic _a = href_list["makeAntag"]; // Was a switch-case, sorry for the mess.
				if ( _a=="1" ) {
					
					if ( this.makeTraitors() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created traitors." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created traitors." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create traitors. Unfortunately, there were no candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create traitors." );
					}
				} else if ( _a=="2" ) {
					
					if ( this.makeChanglings() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created changelings." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created changelings." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create changelings. Unfortunately, there were no candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create changelings." );
					}
				} else if ( _a=="3" ) {
					
					if ( this.makeRevs() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " started a revolution." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " started a revolution." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to start a revolution. Unfortunately, there were no candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to start a revolution." );
					}
				} else if ( _a=="4" ) {
					
					if ( this.makeCult() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " started a cult." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " started a cult." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to start a cult. Unfortunately, there were no candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to start a cult." );
					}
				} else if ( _a=="6" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " is creating a wizard..." );

					if ( this.makeWizard() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created a wizard." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a wizard." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create a wizard. Unfortunately, there were no candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create a wizard." );
					}
				} else if ( _a=="7" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " is creating a nuke team..." );

					if ( this.makeNukeTeam() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created a nuke team." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a nuke team." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create a nuke team. Unfortunately, there were not enough candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create a nuke team." );
					}
				} else if ( _a=="8" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " spawned a ninja." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned a ninja." );
					this.makeSpaceNinja();
				} else if ( _a=="9" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " started an alien infestation." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " started an alien infestation." );
					this.makeAliens();
				} else if ( _a=="10" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " is creating a death squad..." );

					if ( this.makeDeathsquad() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created a death squad." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a death squad." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create a death squad. Unfortunately, there were not enough candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create a death squad." );
					}
				} else if ( _a=="11" ) {
					strength = Interface13.Input( "Set Blob Strength (1=Weak, 2=Strong, 3=Full)", "Set Strength", 1, null, null, InputType.Num );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " spawned a blob with strength " + strength + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned a blob with strength " + strength + "." );
					new RoundEvent_Blob( strength );
				} else if ( _a=="12" ) {
					
					if ( this.makeGangsters() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created gangs." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created gangs." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " tried to create gangs. Unfortunately, there were not enough candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed create gangs." );
					}
				} else if ( _a=="13" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " is creating a Centcom response team..." );

					if ( this.makeEmergencyresponseteam() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created a Centcom response team." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a Centcom response team." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create a Centcom response team. Unfortunately, there were not enough candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create a Centcom response team." );
					}
				} else if ( _a=="14" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " is creating an abductor team..." );

					if ( this.makeAbductorTeam() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created an abductor team." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created an abductor team." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create an abductor team. Unfortunatly there were not enough candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create an abductor team." );
					}
				} else if ( _a=="15" ) {
					
					if ( this.makeRevenant() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created a revenant." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a revenant." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create a revenant. Unfortunately, there were no candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create a revenant." );
					}
				} else if ( _a=="16" ) {
					
					if ( this.makeShadowling() ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created a shadowling." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a shadowling." );
					} else {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " tried to create a shadowling. Unfortunately, there were no candidates available." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " failed to create a shadowling." );
					}
				}
			} else if ( Lang13.Bool( href_list["forceevent"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return null;
				}
				E = Lang13.FindIn( href_list["forceevent"], GlobalVars.SSevent.control );

				if ( Lang13.Bool( E ) ) {
					_event = ((RoundEventControl)E).runEvent();

					if ( _event.announceWhen > 0 ) {
						_event.processing = 0;
						prompt = Interface13.Alert( Task13.User, "Would you like to alert the crew?", "Alert", "Yes", "No", "Cancel" );

						switch ((string)( prompt )) {
							case "Cancel":
								((RoundEvent)_event).kill();
								return null;
								break;
							case "No":
								_event.announceWhen = -1;
								break;
						}
						_event.processing = 1;
					}
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has triggered an event. (" + E.name + ")" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has triggered an event. (" + E.name + ")" );
				}
				return null;
			} else if ( Lang13.Bool( href_list["dbsearchckey"] ) || Lang13.Bool( href_list["dbsearchadmin"] ) ) {
				adminckey = href_list["dbsearchadmin"];
				playerckey = href_list["dbsearchckey"];
				this.DB_ban_panel( playerckey, adminckey );
				return null;
			} else if ( Lang13.Bool( href_list["dbbanedit"] ) ) {
				banedit = href_list["dbbanedit"];
				banid = String13.ParseNumber( href_list["dbbanid"] );

				if ( !Lang13.Bool( banedit ) || !Lang13.Bool( banid ) ) {
					return null;
				}
				this.DB_ban_edit( banid, banedit );
				return null;
			} else if ( Lang13.Bool( href_list["dbbanaddtype"] ) ) {
				bantype = String13.ParseNumber( href_list["dbbanaddtype"] );
				banckey = href_list["dbbanaddckey"];
				banip = href_list["dbbanaddip"];
				bancid = href_list["dbbanaddcid"];
				banduration = String13.ParseNumber( href_list["dbbaddduration"] );
				banjob = href_list["dbbanaddjob"];
				banreason = href_list["dbbanreason"];
				banckey = String13.CKey( banckey );

				switch ((int?)( bantype )) {
					case 1:
						
						if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) ) {
							Task13.User.WriteMsg( "Not enough parameters (Requires ckey and reason)" );
							return null;
						}
						banduration = null;
						banjob = null;
						break;
					case 2:
						
						if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banduration ) ) {
							Task13.User.WriteMsg( "Not enough parameters (Requires ckey, reason and duration)" );
							return null;
						}
						banjob = null;
						break;
					case 3:
						
						if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banjob ) ) {
							Task13.User.WriteMsg( "Not enough parameters (Requires ckey, reason and job)" );
							return null;
						}
						banduration = null;
						break;
					case 4:
						
						if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banjob ) || !Lang13.Bool( banduration ) ) {
							Task13.User.WriteMsg( "Not enough parameters (Requires ckey, reason and job)" );
							return null;
						}
						break;
					case 6:
						
						if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) ) {
							Task13.User.WriteMsg( "Not enough parameters (Requires ckey and reason)" );
							return null;
						}
						banduration = null;
						banjob = null;
						break;
					case 7:
						
						if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) ) {
							Task13.User.WriteMsg( "Not enough parameters (Requires ckey and reason)" );
							return null;
						}
						banduration = null;
						banjob = null;
						break;
					case 8:
						
						if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banduration ) ) {
							Task13.User.WriteMsg( "Not enough parameters (Requires ckey, reason and duration)" );
							return null;
						}
						banjob = null;
						break;
				}
				playermob = null;

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _d;
					

					if ( M.ckey == banckey ) {
						playermob = M;
						break;
					}
				}
				banreason = "(MANUAL BAN) " + banreason;

				if ( !Lang13.Bool( playermob ) ) {
					
					if ( Lang13.Bool( banip ) ) {
						banreason = "" + banreason + " (CUSTOM IP)";
					}

					if ( Lang13.Bool( bancid ) ) {
						banreason = "" + banreason + " (CUSTOM CID)";
					}
				} else {
					GlobalFuncs.message_admins( "Ban process: A mob matching " + playermob.ckey + " was found at location " + playermob.x + ", " + playermob.y + ", " + playermob.z + ". Custom ip and computer id fields replaced with the ip and computer id from the located mob" );
				}
				this.DB_ban_record( bantype, playermob, banduration, banreason, banjob, null, banckey, banip, bancid );
				GlobalFuncs.add_note( banckey, banreason, null, Task13.User.ckey, false );
			} else if ( Lang13.Bool( href_list["editrights"] ) ) {
				this.edit_rights_topic( href_list );
			} else if ( Lang13.Bool( href_list["call_shuttle"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				dynamic _f = href_list["call_shuttle"]; // Was a switch-case, sorry for the mess.
				if ( _f=="1" ) {
					
					if ( GlobalVars.SSshuttle.emergency.mode >= 3 ) {
						return null;
					}
					GlobalVars.SSshuttle.emergency.request();
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " called the Emergency Shuttle" );
					GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " called the Emergency Shuttle to the station</span>" );
				} else if ( _f=="2" ) {
					
					if ( GlobalVars.SSshuttle.emergency.mode >= 3 ) {
						return null;
					}

					switch ((int)( GlobalVars.SSshuttle.emergency.mode )) {
						case 2:
							GlobalVars.SSshuttle.emergency.cancel();
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " sent the Emergency Shuttle back" );
							GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " sent the Emergency Shuttle back</span>" );
							break;
						default:
							GlobalVars.SSshuttle.emergency.cancel();
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " called the Emergency Shuttle" );
							GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " called the Emergency Shuttle to the station</span>" );
							break;
					}
				}
				href_list["secrets"] = "check_antagonist";
			} else if ( Lang13.Bool( href_list["edit_shuttle_time"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 16 ) ) {
					return null;
				}
				timer = Interface13.Input( "Enter new shuttle duration (seconds):", "Edit Shuttle Timeleft", GlobalVars.SSshuttle.emergency.timeLeft(), null, null, InputType.Num );
				GlobalVars.SSshuttle.emergency.setTimer( timer * 10 );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " edited the Emergency Shuttle's timeleft to " + timer + " seconds" );
				GlobalFuncs.minor_announce( "The emergency shuttle will reach its destination in " + Num13.Floor( GlobalVars.SSshuttle.emergency.timeLeft( 600 ) ) + " minutes." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " edited the Emergency Shuttle's timeleft to " + timer + " seconds</span>" );
				href_list["secrets"] = "check_antagonist";
			} else if ( Lang13.Bool( href_list["toggle_continuous"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( !Lang13.Bool( GlobalVars.config.continuous[GlobalVars.ticker.mode.config_tag] ) ) {
					GlobalVars.config.continuous[GlobalVars.ticker.mode.config_tag] = 1;
				} else {
					GlobalVars.config.continuous[GlobalVars.ticker.mode.config_tag] = 0;
				}
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled the round to " + ( Lang13.Bool( GlobalVars.config.continuous[GlobalVars.ticker.mode.config_tag] ) ? "continue if all antagonists die" : "end with the antagonists" ) + ".</span>" );
				this.check_antagonists();
			} else if ( Lang13.Bool( href_list["toggle_midround_antag"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( !Lang13.Bool( GlobalVars.config.midround_antag[GlobalVars.ticker.mode.config_tag] ) ) {
					GlobalVars.config.midround_antag[GlobalVars.ticker.mode.config_tag] = 1;
				} else {
					GlobalVars.config.midround_antag[GlobalVars.ticker.mode.config_tag] = 0;
				}
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled the round to " + ( Lang13.Bool( GlobalVars.config.midround_antag[GlobalVars.ticker.mode.config_tag] ) ? "use" : "skip" ) + " the midround antag system.</span>" );
				this.check_antagonists();
			} else if ( Lang13.Bool( href_list["alter_midround_time_limit"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				timer2 = Interface13.Input( "Enter new maximum time", null, GlobalVars.config.midround_antag_time_check, null, null, InputType.Num );

				if ( Lang13.Bool( timer2 ) ) {
					GlobalVars.config.midround_antag_time_check = timer2;
				}
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " edited the maximum midround antagonist time to " + timer2 + " minutes.</span>" );
				this.check_antagonists();
			} else if ( Lang13.Bool( href_list["alter_midround_life_limit"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				ratio = Interface13.Input( "Enter new life ratio", null, GlobalVars.config.midround_antag_life_check * 100, null, null, InputType.Num );

				if ( Lang13.Bool( ratio ) ) {
					GlobalVars.config.midround_antag_life_check = ratio / 100;
				}
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " edited the midround antagonist living crew ratio to " + ratio + "% alive.</span>" );
				this.check_antagonists();
			} else if ( Lang13.Bool( href_list["toggle_noncontinuous_behavior"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( !GlobalVars.ticker.mode.round_ends_with_antag_death ) {
					GlobalVars.ticker.mode.round_ends_with_antag_death = true;
				} else {
					GlobalVars.ticker.mode.round_ends_with_antag_death = false;
				}
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " edited the midround antagonist system to " + ( GlobalVars.ticker.mode.round_ends_with_antag_death ? "end the round" : "continue as extended" ) + " upon failure." );
				this.check_antagonists();
			} else if ( Lang13.Bool( href_list["delay_round_end"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 16 ) ) {
					return null;
				}
				GlobalVars.ticker.delay_end = !GlobalVars.ticker.delay_end;
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " " + ( GlobalVars.ticker.delay_end ? "delayed the round end" : "has made the round end normally" ) + "." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name( Task13.User ) + " " + ( GlobalVars.ticker.delay_end ? "delayed the round end" : "has made the round end normally" ) + ".</span>" );
				href_list["secrets"] = "check_antagonist";
			} else if ( Lang13.Bool( href_list["end_round"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " is considering ending the round.</span>" );

				if ( Interface13.Alert( Task13.User, "This will end the round, are you SURE you want to do this?", "Confirmation", "Yes", "No" ) == "Yes" ) {
					
					if ( Interface13.Alert( Task13.User, "Final Confirmation: End the round NOW?", "Confirmation", "Yes", "No" ) == "Yes" ) {
						GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has ended the round.</span>" );
						GlobalVars.ticker.force_ending = 1;
						return null;
					} else {
						GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " decided against ending the round.</span>" );
					}
				} else {
					GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " decided against ending the round.</span>" );
				}
			} else if ( Lang13.Bool( href_list["simplemake"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				M2 = Lang13.FindObj( href_list["mob"] );

				if ( !( M2 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}
				delmob = false;

				switch ((string)( Interface13.Alert( "Delete old mob?", "Message", "Yes", "No", "Cancel" ) )) {
					case "Cancel":
						return null;
						break;
					case "Yes":
						delmob = true;
						break;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has used rudimentary transformation on " + GlobalFuncs.key_name( M2 ) + ". Transforming to " + href_list["simplemake"] + "; deletemob=" + delmob );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has used rudimentary transformation on " + GlobalFuncs.key_name_admin( M2 ) + ". Transforming to " + href_list["simplemake"] + "; deletemob=" + delmob + "</span>" );

				dynamic _h = href_list["simplemake"]; // Was a switch-case, sorry for the mess.
				if ( _h=="observer" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Dead_Observer), null, null, delmob );
				} else if ( _h=="drone" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Drone), null, null, delmob );
				} else if ( _h=="hunter" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Hunter), null, null, delmob );
				} else if ( _h=="queen" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Royal_Queen), null, null, delmob );
				} else if ( _h=="praetorian" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Royal_Praetorian), null, null, delmob );
				} else if ( _h=="sentinel" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Sentinel), null, null, delmob );
				} else if ( _h=="larva" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Larva), null, null, delmob );
				} else if ( _h=="human" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Human), null, null, delmob );
				} else if ( _h=="slime" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Slime), null, null, delmob );
				} else if ( _h=="monkey" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Monkey), null, null, delmob );
				} else if ( _h=="robot" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_Silicon_Robot), null, null, delmob );
				} else if ( _h=="cat" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Pet_Cat), null, null, delmob );
				} else if ( _h=="runtime" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Pet_Cat_Runtime), null, null, delmob );
				} else if ( _h=="corgi" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Pet_Dog_Corgi), null, null, delmob );
				} else if ( _h=="ian" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Pet_Dog_Corgi_Ian), null, null, delmob );
				} else if ( _h=="pug" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Pet_Dog_Pug), null, null, delmob );
				} else if ( _h=="crab" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Crab), null, null, delmob );
				} else if ( _h=="coffee" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Crab_Coffee), null, null, delmob );
				} else if ( _h=="parrot" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Parrot), null, null, delmob );
				} else if ( _h=="polyparrot" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Parrot_Poly), null, null, delmob );
				} else if ( _h=="constructarmored" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Hostile_Construct_Armored), null, null, delmob );
				} else if ( _h=="constructbuilder" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Hostile_Construct_Builder), null, null, delmob );
				} else if ( _h=="constructwraith" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Hostile_Construct_Wraith), null, null, delmob );
				} else if ( _h=="shade" ) {
					((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Shade), null, null, delmob );
				}
			} else if ( Lang13.Bool( href_list["unbanf"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4 ) ) {
					return null;
				}
				banfolder = href_list["unbanf"];
				GlobalVars.Banlist.cd = "/base/" + banfolder;
				key = GlobalVars.Banlist["key"];

				if ( Interface13.Alert( Task13.User, "Are you sure you want to unban " + key + "?", "Confirmation", "Yes", "No" ) == "Yes" ) {
					
					if ( GlobalFuncs.RemoveBan( banfolder ) ) {
						this.unbanpanel();
					} else {
						Interface13.Alert( Task13.User, "This ban has already been lifted / does not exist.", "Error", "Ok" );
						this.unbanpanel();
					}
				}
			} else if ( Lang13.Bool( href_list["unbane"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4 ) ) {
					return null;
				}
				GlobalFuncs.UpdateTime();
				reason = null;
				banfolder2 = href_list["unbane"];
				GlobalVars.Banlist.cd = "/base/" + banfolder2;
				reason2 = GlobalVars.Banlist["reason"];
				temp = Lang13.Bool( GlobalVars.Banlist["temp"] );
				minutes = Convert.ToDouble( GlobalVars.Banlist["minutes"] );
				banned_key = GlobalVars.Banlist["key"];
				GlobalVars.Banlist.cd = "/base";
				duration = null;

				switch ((string)( Interface13.Alert( "Temporary Ban?", null, "Yes", "No" ) )) {
					case "Yes":
						temp = true;
						mins = 0;

						if ( minutes > GlobalVars.CMinutes ) {
							mins = minutes - GlobalVars.CMinutes;
						}
						mins = Interface13.Input( Task13.User, "How long (in minutes)? (Default: 1440)", "Ban time", ( Lang13.Bool( mins ) ? mins : ((dynamic)( 1440 )) ), null, InputType.Num | InputType.Null );

						if ( !Lang13.Bool( mins ) ) {
							return null;
						}
						minutes = GlobalVars.CMinutes + Convert.ToDouble( mins );
						duration = GlobalFuncs.GetExp( minutes );
						reason = Interface13.Input( Task13.User, "Please State Reason", "Reason", reason2, null, InputType.StrMultiline );

						if ( !Lang13.Bool( reason ) ) {
							return null;
						}
						break;
					case "No":
						temp = false;
						duration = "Perma";
						reason = Interface13.Input( Task13.User, "Please State Reason", "Reason", reason2, null, InputType.StrMultiline );

						if ( !Lang13.Bool( reason ) ) {
							return null;
						}
						break;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " edited " + banned_key + "'s ban. Reason: " + reason + " Duration: " + duration );
				GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " edited " + banned_key + "'s ban. Reason: " + reason + " Duration: " + duration );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " edited " + banned_key + "'s ban. Reason: " + reason + " Duration: " + duration + "</span>" );
				GlobalVars.Banlist.cd = "/base/" + banfolder2;
				GlobalVars.Banlist["reason"] = reason;
				GlobalVars.Banlist["temp"] = temp;
				GlobalVars.Banlist["minutes"] = minutes;
				GlobalVars.Banlist["bannedby"] = Task13.User.ckey;
				GlobalVars.Banlist.cd = "/base";
				GlobalFuncs.feedback_inc( "ban_edit", 1 );
				this.unbanpanel();
			} else if ( Lang13.Bool( href_list["appearanceban"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4 ) ) {
					return null;
				}
				M3 = Lang13.FindObj( href_list["appearanceban"] );

				if ( !( M3 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( !Lang13.Bool( M3.ckey ) ) {
					Task13.User.WriteMsg( "This mob has no ckey" );
					return null;
				}
				banreason2 = GlobalFuncs.appearance_isbanned( M3 );

				if ( Lang13.Bool( banreason2 ) ) {
					
					switch ((string)( Interface13.Alert( "Reason: '" + banreason2 + "' Remove appearance ban?", "Please Confirm", "Yes", "No" ) )) {
						case "Yes":
							GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + GlobalFuncs.key_name( M3 ) + "'s appearance ban" );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + GlobalFuncs.key_name( M3 ) + "'s appearance ban" );
							GlobalFuncs.feedback_inc( "ban_appearance_unban", 1 );
							this.DB_ban_unban( M3.ckey, 6 );
							GlobalFuncs.appearance_unban( M3 );
							GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " removed " + GlobalFuncs.key_name_admin( M3 ) + "'s appearance ban</span>" );
							M3.WriteMsg( "<span class='boldannounce'><BIG>" + Task13.User.client.ckey + " has removed your appearance ban.</BIG></span>" );
							break;
					}
				} else {
					
					switch ((string)( Interface13.Alert( "Appearance ban " + M3.ckey + "?", null, "Yes", "No", "Cancel" ) )) {
						case "Yes":
							reason3 = Interface13.Input( Task13.User, "Please State Reason", "Reason", null, null, InputType.StrMultiline );

							if ( !Lang13.Bool( reason3 ) ) {
								return null;
							}
							GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " appearance banned " + GlobalFuncs.key_name( M3 ) + ". reason: " + reason3 );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " appearance banned " + GlobalFuncs.key_name( M3 ) + ". \nReason: " + reason3 );
							GlobalFuncs.feedback_inc( "ban_appearance", 1 );
							this.DB_ban_record( 6, M3, -1, reason3 );
							GlobalFuncs.appearance_fullban( M3, "" + reason3 + "; By " + Task13.User.ckey + " on " + String13.FormatTime( Game13.realtime, null ) );
							GlobalFuncs.add_note( M3.ckey, "Appearance banned - " + reason3, null, Task13.User.ckey, false );
							GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " appearance banned " + GlobalFuncs.key_name_admin( M3 ) + "</span>" );
							M3.WriteMsg( "<span class='boldannounce'><BIG>You have been appearance banned by " + Task13.User.client.ckey + ".</BIG></span>" );
							M3.WriteMsg( "<span class='boldannounce'>The reason is: " + reason3 + "</span>" );
							M3.WriteMsg( "<span class='danger'>Appearance ban can be lifted only upon request.</span>" );

							if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
								M3.WriteMsg( "<span class='danger'>To try to resolve this matter head to " + GlobalVars.config.banappeals + "</span>" );
							} else {
								M3.WriteMsg( "<span class='danger'>No ban appeals URL has been set.</span>" );
							}
							break;
						case "No":
							return null;
							break;
					}
				}
			} else if ( Lang13.Bool( href_list["jobban2"] ) ) {
				M4 = Lang13.FindObj( href_list["jobban2"] );

				if ( !( M4 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( !Lang13.Bool( M4.ckey ) ) {
					Task13.User.WriteMsg( "This mob has no ckey" );
					return null;
				}
				dat = "";
				header = "<head><title>Job-Ban Panel: " + M4.name + "</title></head>";
				body = null;
				jobs = "";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr align='center' bgcolor='ccccff'><th colspan='" ).item( Lang13.Length( GlobalVars.command_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=commanddept;jobban4=" ).Ref( M4 ).str( "'>Command Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _l in Lang13.Enumerate( GlobalVars.command_positions )) {
					jobPos = _l;
					

					if ( !Lang13.Bool( jobPos ) ) {
						continue;
					}
					job = GlobalVars.SSjob.GetJob( jobPos );

					if ( !( job != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 6 ) {
						jobs += "</tr><tr>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='ffddf0'><th colspan='" ).item( Lang13.Length( GlobalVars.security_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=securitydept;jobban4=" ).Ref( M4 ).str( "'>Security Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _m in Lang13.Enumerate( GlobalVars.security_positions )) {
					jobPos2 = _m;
					

					if ( !Lang13.Bool( jobPos2 ) ) {
						continue;
					}
					job2 = GlobalVars.SSjob.GetJob( jobPos2 );

					if ( !( job2 != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job2.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job2.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job2.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job2.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job2.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 5 ) {
						jobs += "</tr><tr align='center'>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='fff5cc'><th colspan='" ).item( Lang13.Length( GlobalVars.engineering_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=engineeringdept;jobban4=" ).Ref( M4 ).str( "'>Engineering Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _n in Lang13.Enumerate( GlobalVars.engineering_positions )) {
					jobPos3 = _n;
					

					if ( !Lang13.Bool( jobPos3 ) ) {
						continue;
					}
					job3 = GlobalVars.SSjob.GetJob( jobPos3 );

					if ( !( job3 != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job3.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job3.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job3.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job3.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job3.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 5 ) {
						jobs += "</tr><tr align='center'>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='ffeef0'><th colspan='" ).item( Lang13.Length( GlobalVars.medical_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=medicaldept;jobban4=" ).Ref( M4 ).str( "'>Medical Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _o in Lang13.Enumerate( GlobalVars.medical_positions )) {
					jobPos4 = _o;
					

					if ( !Lang13.Bool( jobPos4 ) ) {
						continue;
					}
					job4 = GlobalVars.SSjob.GetJob( jobPos4 );

					if ( !( job4 != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job4.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job4.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job4.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job4.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job4.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 5 ) {
						jobs += "</tr><tr align='center'>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='e79fff'><th colspan='" ).item( Lang13.Length( GlobalVars.science_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=sciencedept;jobban4=" ).Ref( M4 ).str( "'>Science Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _p in Lang13.Enumerate( GlobalVars.science_positions )) {
					jobPos5 = _p;
					

					if ( !Lang13.Bool( jobPos5 ) ) {
						continue;
					}
					job5 = GlobalVars.SSjob.GetJob( jobPos5 );

					if ( !( job5 != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job5.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job5.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job5.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job5.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job5.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 5 ) {
						jobs += "</tr><tr align='center'>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='DDAA55'><th colspan='" ).item( Lang13.Length( GlobalVars.supply_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=supplydept;jobban4=" ).Ref( M4 ).str( "'>Supply Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _q in Lang13.Enumerate( GlobalVars.supply_positions )) {
					jobPos6 = _q;
					

					if ( !Lang13.Bool( jobPos6 ) ) {
						continue;
					}
					job6 = GlobalVars.SSjob.GetJob( jobPos6 );

					if ( !( job6 != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job6.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job6.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job6.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job6.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job6.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 5 ) {
						jobs += "</tr><tr align='center'>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='dddddd'><th colspan='" ).item( Lang13.Length( GlobalVars.civilian_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=civiliandept;jobban4=" ).Ref( M4 ).str( "'>Civilian Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _r in Lang13.Enumerate( GlobalVars.civilian_positions )) {
					jobPos7 = _r;
					

					if ( !Lang13.Bool( jobPos7 ) ) {
						continue;
					}
					job7 = GlobalVars.SSjob.GetJob( jobPos7 );

					if ( !( job7 != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job7.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job7.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job7.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job7.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job7.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 5 ) {
						jobs += "</tr><tr align='center'>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				counter = 0;
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='ccffcc'><th colspan='" ).item( Lang13.Length( GlobalVars.nonhuman_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=nonhumandept;jobban4=" ).Ref( M4 ).str( "'>Non-human Positions</a></th></tr><tr align='center'>" ).ToString();

				foreach (dynamic _s in Lang13.Enumerate( GlobalVars.nonhuman_positions )) {
					jobPos8 = _s;
					

					if ( !Lang13.Bool( jobPos8 ) ) {
						continue;
					}
					job8 = GlobalVars.SSjob.GetJob( jobPos8 );

					if ( !( job8 != null ) ) {
						continue;
					}

					if ( GlobalFuncs.jobban_isbanned( M4, job8.title ) ) {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job8.title ).str( ";jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job8.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
						counter++;
					} else {
						jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job8.title ).str( ";jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( job8.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
						counter++;
					}

					if ( counter >= 5 ) {
						jobs += "</tr><tr align='center'>";
						counter = 0;
					}
				}
				jobs += "</tr></table>";
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='eeeeee'><th colspan='4'><a href='?src=" ).Ref( this ).str( ";jobban3=ghostroles;jobban4=" ).Ref( M4 ).str( "'>Ghost Roles</a></th></tr><tr align='center'>" ).ToString();

				if ( GlobalFuncs.jobban_isbanned( M4, "pAI" ) ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=pAI;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "pAI", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=pAI;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "pAI", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "drone" ) ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=drone;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Drone", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=drone;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Drone", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "posibrain" ) ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=posibrain;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Posibrain", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=posibrain;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Posibrain", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "deathsquad" ) ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=deathsquad;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Deathsquad", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=deathsquad;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Deathsquad", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}
				jobs += "</tr></table>";
				isbanned_dept = GlobalFuncs.jobban_isbanned( M4, "Syndicate" );
				jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
				jobs += new Txt( "<tr bgcolor='ffeeaa'><th colspan='10'><a href='?src=" ).Ref( this ).str( ";jobban3=Syndicate;jobban4=" ).Ref( M4 ).str( "'>Antagonist Positions</a></th></tr><tr align='center'>" ).ToString();

				if ( GlobalFuncs.jobban_isbanned( M4, "traitor" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=traitor;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Traitor", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=traitor;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Traitor", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "changeling" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=changeling;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Changeling", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=changeling;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Changeling", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "operative" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=operative;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Nuke Operative", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=operative;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Nuke Operative", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "revolutionary" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=revolutionary;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Revolutionary", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=revolutionary;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Revolutionary", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "gangster" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=gangster;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Gangster", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=gangster;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Gangster", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}
				jobs += "</tr><tr align='center'>";

				if ( GlobalFuncs.jobban_isbanned( M4, "cultist" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=cultist;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Cultist", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=cultist;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Cultist", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "shadowling" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=shadowling;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Shadowling", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=shadowling;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Shadowling", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "wizard" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=wizard;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Wizard", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=wizard;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Wizard", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "abductor" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=abductor;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Abductor", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=abductor;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Abductor", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}

				if ( GlobalFuncs.jobban_isbanned( M4, "alien candidate" ) || isbanned_dept ) {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=alien candidate;jobban4=" ).Ref( M4 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Alien", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
				} else {
					jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=alien candidate;jobban4=" ).Ref( M4 ).str( "'>" ).item( GlobalFuncs.replacetext( "Alien", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
				}
				jobs += "</tr></table>";
				body = "<body>" + jobs + "</body>";
				dat = "<tt>" + header + body + "</tt>";
				Interface13.Browse( Task13.User, dat, "window=jobban2;size=800x450" );
				return null;
			} else if ( Lang13.Bool( href_list["jobban3"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4 ) ) {
					return null;
				}
				M5 = Lang13.FindObj( href_list["jobban4"] );

				if ( !( M5 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( !( GlobalVars.SSjob != null ) ) {
					Task13.User.WriteMsg( "Job Master has not been setup!" );
					return null;
				}
				joblist = new ByTable();

				dynamic _bb = href_list["jobban3"]; // Was a switch-case, sorry for the mess.
				if ( _bb=="commanddept" ) {
					
					foreach (dynamic _t in Lang13.Enumerate( GlobalVars.command_positions )) {
						jobPos9 = _t;
						

						if ( !Lang13.Bool( jobPos9 ) ) {
							continue;
						}
						temp2 = GlobalVars.SSjob.GetJob( jobPos9 );

						if ( !( temp2 != null ) ) {
							continue;
						}
						joblist.Add( temp2.title );
					}
				} else if ( _bb=="securitydept" ) {
					
					foreach (dynamic _u in Lang13.Enumerate( GlobalVars.security_positions )) {
						jobPos10 = _u;
						

						if ( !Lang13.Bool( jobPos10 ) ) {
							continue;
						}
						temp3 = GlobalVars.SSjob.GetJob( jobPos10 );

						if ( !( temp3 != null ) ) {
							continue;
						}
						joblist.Add( temp3.title );
					}
				} else if ( _bb=="engineeringdept" ) {
					
					foreach (dynamic _v in Lang13.Enumerate( GlobalVars.engineering_positions )) {
						jobPos11 = _v;
						

						if ( !Lang13.Bool( jobPos11 ) ) {
							continue;
						}
						temp4 = GlobalVars.SSjob.GetJob( jobPos11 );

						if ( !( temp4 != null ) ) {
							continue;
						}
						joblist.Add( temp4.title );
					}
				} else if ( _bb=="medicaldept" ) {
					
					foreach (dynamic _w in Lang13.Enumerate( GlobalVars.medical_positions )) {
						jobPos12 = _w;
						

						if ( !Lang13.Bool( jobPos12 ) ) {
							continue;
						}
						temp5 = GlobalVars.SSjob.GetJob( jobPos12 );

						if ( !( temp5 != null ) ) {
							continue;
						}
						joblist.Add( temp5.title );
					}
				} else if ( _bb=="sciencedept" ) {
					
					foreach (dynamic _x in Lang13.Enumerate( GlobalVars.science_positions )) {
						jobPos13 = _x;
						

						if ( !Lang13.Bool( jobPos13 ) ) {
							continue;
						}
						temp6 = GlobalVars.SSjob.GetJob( jobPos13 );

						if ( !( temp6 != null ) ) {
							continue;
						}
						joblist.Add( temp6.title );
					}
				} else if ( _bb=="supplydept" ) {
					
					foreach (dynamic _y in Lang13.Enumerate( GlobalVars.supply_positions )) {
						jobPos14 = _y;
						

						if ( !Lang13.Bool( jobPos14 ) ) {
							continue;
						}
						temp7 = GlobalVars.SSjob.GetJob( jobPos14 );

						if ( !( temp7 != null ) ) {
							continue;
						}
						joblist.Add( temp7.title );
					}
				} else if ( _bb=="civiliandept" ) {
					
					foreach (dynamic _z in Lang13.Enumerate( GlobalVars.civilian_positions )) {
						jobPos15 = _z;
						

						if ( !Lang13.Bool( jobPos15 ) ) {
							continue;
						}
						temp8 = GlobalVars.SSjob.GetJob( jobPos15 );

						if ( !( temp8 != null ) ) {
							continue;
						}
						joblist.Add( temp8.title );
					}
				} else if ( _bb=="nonhumandept" ) {
					
					foreach (dynamic _ba in Lang13.Enumerate( GlobalVars.nonhuman_positions )) {
						jobPos16 = _ba;
						

						if ( !Lang13.Bool( jobPos16 ) ) {
							continue;
						}
						temp9 = GlobalVars.SSjob.GetJob( jobPos16 );

						if ( !( temp9 != null ) ) {
							continue;
						}
						joblist.Add( temp9.title );
					}
				} else if ( _bb=="ghostroles" ) {
					joblist.Add( new ByTable(new object [] { "pAI", "posibrain", "drone", "deathsquad" }) );
				} else {
					joblist.Add( href_list["jobban3"] );
				}
				notbannedlist = new ByTable();

				foreach (dynamic _bc in Lang13.Enumerate( joblist )) {
					job9 = _bc;
					

					if ( !GlobalFuncs.jobban_isbanned( M5, job9 ) ) {
						notbannedlist.Add( job9 );
					}
				}

				if ( notbannedlist.len != 0 ) {
					
					switch ((string)( Interface13.Alert( "Temporary Ban?", null, "Yes", "No", "Cancel" ) )) {
						case "Yes":
							mins2 = Interface13.Input( Task13.User, "How long (in minutes)?", "Ban time", 1440, null, InputType.Num | InputType.Null );

							if ( !Lang13.Bool( mins2 ) ) {
								return null;
							}
							reason4 = Interface13.Input( Task13.User, "Please State Reason", "Reason", null, null, InputType.StrMultiline );

							if ( !Lang13.Bool( reason4 ) ) {
								return null;
							}
							msg = null;

							foreach (dynamic _bd in Lang13.Enumerate( notbannedlist )) {
								job10 = _bd;
								
								GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " temp-jobbanned " + GlobalFuncs.key_name( M5 ) + " from " + job10 + " for " + mins2 + " minutes. reason: " + reason4 );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " temp-jobbanned " + GlobalFuncs.key_name( M5 ) + " from " + job10 + " for " + mins2 + " minutes" );
								GlobalFuncs.feedback_inc( "ban_job_tmp", 1 );
								this.DB_ban_record( 4, M5, mins2, reason4, job10 );
								GlobalFuncs.feedback_add_details( "ban_job_tmp", "- " + job10 );

								if ( !Lang13.Bool( msg ) ) {
									msg = job10;
								} else {
									msg += ", " + job10;
								}
							}
							GlobalFuncs.add_note( M5.ckey, "Banned  from " + msg + " - " + reason4, null, Task13.User.ckey, false );
							GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " banned " + GlobalFuncs.key_name_admin( M5 ) + " from " + msg + " for " + mins2 + " minutes</span>" );
							M5.WriteMsg( "<span class='boldannounce'><BIG>You have been jobbanned by " + Task13.User.client.ckey + " from: " + msg + ".</BIG></span>" );
							M5.WriteMsg( "<span class='boldannounce'>The reason is: " + reason4 + "</span>" );
							M5.WriteMsg( "<span class='danger'>This jobban will be lifted in " + mins2 + " minutes.</span>" );
							href_list["jobban2"] = 1;
							return 1;
							break;
						case "No":
							reason5 = Interface13.Input( Task13.User, "Please State Reason", "Reason", null, null, InputType.StrMultiline );

							if ( Lang13.Bool( reason5 ) ) {
								msg2 = null;

								foreach (dynamic _be in Lang13.Enumerate( notbannedlist )) {
									job11 = _be;
									
									GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " perma-jobbanned " + GlobalFuncs.key_name( M5 ) + " from " + job11 + ". reason: " + reason5 );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " perma-banned " + GlobalFuncs.key_name( M5 ) + " from " + job11 );
									GlobalFuncs.feedback_inc( "ban_job", 1 );
									this.DB_ban_record( 3, M5, -1, reason5, job11 );
									GlobalFuncs.feedback_add_details( "ban_job", "- " + job11 );

									if ( !Lang13.Bool( msg2 ) ) {
										msg2 = job11;
									} else {
										msg2 += ", " + job11;
									}
								}
								GlobalFuncs.add_note( M5.ckey, "Banned  from " + msg2 + " - " + reason5, null, Task13.User.ckey, false );
								GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " banned " + GlobalFuncs.key_name_admin( M5 ) + " from " + msg2 + "</span>" );
								M5.WriteMsg( "<span class='boldannounce'><BIG>You have been jobbanned by " + Task13.User.client.ckey + " from: " + msg2 + ".</BIG></span>" );
								M5.WriteMsg( "<span class='boldannounce'>The reason is: " + reason5 + "</span>" );
								M5.WriteMsg( "<span class='danger'>Jobban can be lifted only upon request.</span>" );
								href_list["jobban2"] = 1;
								return 1;
							}
							break;
						case "Cancel":
							return null;
							break;
					}
				}

				if ( joblist.len != 0 ) {
					msg3 = null;

					foreach (dynamic _bh in Lang13.Enumerate( joblist )) {
						job12 = _bh;
						
						reason6 = GlobalFuncs.jobban_isbanned( M5, job12 );

						if ( !reason6 ) {
							continue;
						}

						switch ((string)( Interface13.Alert( "Job: '" + job12 + "' Reason: '" + reason6 + "' Un-jobban?", "Please Confirm", "Yes", "No" ) )) {
							case "Yes":
								GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " unjobbanned " + GlobalFuncs.key_name( M5 ) + " from " + job12 );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " unbanned " + GlobalFuncs.key_name( M5 ) + " from " + job12 );
								this.DB_ban_unban( M5.ckey, 9, job12 );
								GlobalFuncs.feedback_inc( "ban_job_unban", 1 );
								GlobalFuncs.feedback_add_details( "ban_job_unban", "- " + job12 );

								if ( !Lang13.Bool( msg3 ) ) {
									msg3 = job12;
								} else {
									msg3 += ", " + job12;
								}
								break;
							default:
								continue;
								break;
						}
					}

					if ( Lang13.Bool( msg3 ) ) {
						GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " unbanned " + GlobalFuncs.key_name_admin( M5 ) + " from " + msg3 + "</span>" );
						M5.WriteMsg( "<span class='boldannounce'><BIG>You have been un-jobbanned by " + Task13.User.client.ckey + " from " + msg3 + ".</BIG></span>" );
						href_list["jobban2"] = 1;
					}
					return 1;
				}
				return 0;
			} else if ( Lang13.Bool( href_list["boot2"] ) ) {
				M6 = Lang13.FindObj( href_list["boot2"] );

				if ( M6 is Mob ) {
					
					if ( !GlobalFuncs.check_if_greater_rights_than( M6.client ) ) {
						Task13.User.WriteMsg( "<span class='danger'>Error: They have more rights than you do.</span>" );
						return null;
					}
					M6.WriteMsg( "<span class='danger'>You have been kicked from the server by " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "an Administrator" : "" + Task13.User.client.ckey ) + ".</span>" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " kicked " + GlobalFuncs.key_name( M6 ) + "." );
					GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " kicked " + GlobalFuncs.key_name_admin( M6 ) + ".</span>" );
					Lang13.Delete( M6.client );
					M6.client = null;
				}
			} else if ( Lang13.Bool( href_list["addnote"] ) ) {
				target_ckey = href_list["addnote"];
				GlobalFuncs.add_note( target_ckey );
			} else if ( Lang13.Bool( href_list["addnoteempty"] ) ) {
				GlobalFuncs.add_note();
			} else if ( Lang13.Bool( href_list["removenote"] ) ) {
				note_id = href_list["removenote"];
				GlobalFuncs.remove_note( note_id );
			} else if ( Lang13.Bool( href_list["editnote"] ) ) {
				note_id2 = href_list["editnote"];
				GlobalFuncs.edit_note( note_id2 );
			} else if ( Lang13.Bool( href_list["shownote"] ) ) {
				target = href_list["shownote"];
				GlobalFuncs.show_note( null, target );
			} else if ( Lang13.Bool( href_list["nonalpha"] ) ) {
				target2 = href_list["nonalpha"];
				target2 = String13.ParseNumber( target2 );
				GlobalFuncs.show_note( null, target2 );
			} else if ( Lang13.Bool( href_list["shownoteckey"] ) ) {
				target_ckey2 = href_list["shownoteckey"];
				GlobalFuncs.show_note( target_ckey2 );
			} else if ( Lang13.Bool( href_list["notessearch"] ) ) {
				target3 = href_list["notessearch"];
				GlobalFuncs.show_note( null, target3 );
			} else if ( Lang13.Bool( href_list["noteedits"] ) ) {
				note_id3 = GlobalFuncs.sanitizeSQL( "" + href_list["noteedits"] );
				query_noteedits = GlobalVars.dbcon.NewQuery( "SELECT edits FROM " + GlobalFuncs.format_table_name( "notes" ) + " WHERE id = '" + note_id3 + "'" );

				if ( !query_noteedits.Execute() ) {
					err = query_noteedits.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining edits from notes table. Error : [" + err + "]\n" );
					return null;
				}

				if ( query_noteedits.NextRow() ) {
					edit_log = query_noteedits.item[1];
					Interface13.Browse( Task13.User, edit_log, "window=noteedits" );
				}
			} else if ( Lang13.Bool( href_list["newban"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4 ) ) {
					return null;
				}
				M7 = Lang13.FindObj( href_list["newban"] );

				if ( !( M7 is Mob ) ) {
					return null;
				}

				if ( Lang13.Bool( M7.client ) && Lang13.Bool( M7.client.holder ) ) {
					return null;
				}

				switch ((string)( Interface13.Alert( "Temporary Ban?", null, "Yes", "No", "Cancel" ) )) {
					case "Yes":
						mins3 = Interface13.Input( Task13.User, "How long (in minutes)?", "Ban time", 1440, null, InputType.Num | InputType.Null );

						if ( !Lang13.Bool( mins3 ) ) {
							return null;
						}
						reason7 = Interface13.Input( Task13.User, "Please State Reason", "Reason", null, null, InputType.StrMultiline );

						if ( !Lang13.Bool( reason7 ) ) {
							return null;
						}
						GlobalFuncs.AddBan( M7.ckey, M7.computer_id, reason7, Task13.User.ckey, true, mins3 );
						GlobalFuncs.ban_unban_log_save( "" + Task13.User.client.ckey + " has banned " + M7.ckey + ". - Reason: " + reason7 + " - This will be removed in " + mins3 + " minutes." );
						M7.WriteMsg( "<span class='boldannounce'><BIG>You have been banned by " + Task13.User.client.ckey + ".\nReason: " + reason7 + "</BIG></span>" );
						M7.WriteMsg( "<span class='danger'>This is a temporary ban, it will be removed in " + mins3 + " minutes.</span>" );
						GlobalFuncs.feedback_inc( "ban_tmp", 1 );
						this.DB_ban_record( 2, M7, mins3, reason7 );
						GlobalFuncs.feedback_inc( "ban_tmp_mins", mins3 );

						if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
							M7.WriteMsg( "<span class='danger'>To try to resolve this matter head to " + GlobalVars.config.banappeals + "</span>" );
						} else {
							M7.WriteMsg( "<span class='danger'>No ban appeals URL has been set.</span>" );
						}
						GlobalFuncs.log_admin( "" + Task13.User.client.ckey + " has banned " + M7.ckey + ".\nReason: " + reason7 + "\nThis will be removed in " + mins3 + " minutes." );
						GlobalFuncs.message_admins( "<span class='adminnotice'>" + Task13.User.client.ckey + " has banned " + M7.ckey + ".\nReason: " + reason7 + "\nThis will be removed in " + mins3 + " minutes.</span>" );
						Lang13.Delete( M7.client );
						M7.client = null;
						break;
					case "No":
						reason8 = Interface13.Input( Task13.User, "Please State Reason", "Reason", null, null, InputType.StrMultiline );

						if ( !Lang13.Bool( reason8 ) ) {
							return null;
						}

						switch ((string)( Interface13.Alert( Task13.User, "IP ban?", null, "Yes", "No", "Cancel" ) )) {
							case "Cancel":
								return null;
								break;
							case "Yes":
								GlobalFuncs.AddBan( M7.ckey, M7.computer_id, reason8, Task13.User.ckey, false, 0, M7.lastKnownIP );
								break;
							case "No":
								GlobalFuncs.AddBan( M7.ckey, M7.computer_id, reason8, Task13.User.ckey, false, 0 );
								break;
						}
						M7.WriteMsg( "<span class='boldannounce'><BIG>You have been banned by " + Task13.User.client.ckey + ".\nReason: " + reason8 + "</BIG></span>" );
						M7.WriteMsg( "<span class='danger'>This is a permanent ban.</span>" );

						if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
							M7.WriteMsg( "<span class='danger'>To try to resolve this matter head to " + GlobalVars.config.banappeals + "</span>" );
						} else {
							M7.WriteMsg( "<span class='danger'>No ban appeals URL has been set.</span>" );
						}
						GlobalFuncs.ban_unban_log_save( "" + Task13.User.client.ckey + " has permabanned " + M7.ckey + ". - Reason: " + reason8 + " - This is a permanent ban." );
						GlobalFuncs.log_admin( "" + Task13.User.client.ckey + " has banned " + M7.ckey + ".\nReason: " + reason8 + "\nThis is a permanent ban." );
						GlobalFuncs.message_admins( "<span class='adminnotice'>" + Task13.User.client.ckey + " has banned " + M7.ckey + ".\nReason: " + reason8 + "\nThis is a permanent ban.</span>" );
						GlobalFuncs.feedback_inc( "ban_perma", 1 );
						this.DB_ban_record( 1, M7, -1, reason8 );
						Lang13.Delete( M7.client );
						M7.client = null;
						break;
					case "Cancel":
						return null;
						break;
				}
			} else if ( Lang13.Bool( href_list["watchadd"] ) ) {
				target_ckey3 = Lang13.FindObj( href_list["watchadd"] );
				Task13.User.client.watchlist_add( target_ckey3 );
			} else if ( Lang13.Bool( href_list["watchremove"] ) ) {
				target_ckey4 = href_list["watchremove"];
				Task13.User.client.watchlist_remove( target_ckey4 );
			} else if ( Lang13.Bool( href_list["watchedit"] ) ) {
				target_ckey5 = href_list["watchedit"];
				Task13.User.client.watchlist_edit( target_ckey5 );
			} else if ( Lang13.Bool( href_list["watchaddbrowse"] ) ) {
				Task13.User.client.watchlist_add( null, true );
			} else if ( Lang13.Bool( href_list["watchremovebrowse"] ) ) {
				target_ckey6 = href_list["watchremovebrowse"];
				Task13.User.client.watchlist_remove( target_ckey6, true );
			} else if ( Lang13.Bool( href_list["watcheditbrowse"] ) ) {
				target_ckey7 = href_list["watcheditbrowse"];
				Task13.User.client.watchlist_edit( target_ckey7, true );
			} else if ( Lang13.Bool( href_list["watchsearch"] ) ) {
				target_ckey8 = href_list["watchsearch"];
				Task13.User.client.watchlist_show( target_ckey8 );
			} else if ( Lang13.Bool( href_list["watchshow"] ) ) {
				Task13.User.client.watchlist_show();
			} else if ( Lang13.Bool( href_list["watcheditlog"] ) ) {
				target_ckey9 = GlobalFuncs.sanitizeSQL( "" + href_list["watcheditlog"] );
				query_watchedits = GlobalVars.dbcon.NewQuery( "SELECT edits FROM " + GlobalFuncs.format_table_name( "watch" ) + " WHERE ckey = '" + target_ckey9 + "'" );

				if ( !query_watchedits.Execute() ) {
					err2 = query_watchedits.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining edits from watch table. Error : [" + err2 + "]\n" );
					return null;
				}

				if ( query_watchedits.NextRow() ) {
					edit_log2 = query_watchedits.item[1];
					Interface13.Browse( Task13.User, edit_log2, "window=watchedits" );
				}
			} else if ( Lang13.Bool( href_list["mute"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				GlobalFuncs.cmd_admin_mute( href_list["mute"], String13.ParseNumber( href_list["mute_type"] ) );
			} else if ( Lang13.Bool( href_list["c_mode"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
					return Interface13.Alert( Task13.User, "The game has already started." );
				}
				dat2 = "<B>What mode do you wish to play?</B><HR>";

				foreach (dynamic _bk in Lang13.Enumerate( GlobalVars.config.modes )) {
					mode = _bk;
					
					dat2 += new Txt( "<A href='?src=" ).Ref( this ).str( ";c_mode2=" ).item( mode ).str( "'>" ).item( GlobalVars.config.mode_names[mode] ).str( "</A><br>" ).ToString();
				}
				dat2 += new Txt( "<A href='?src=" ).Ref( this ).str( ";c_mode2=secret'>Secret</A><br>" ).ToString();
				dat2 += new Txt( "<A href='?src=" ).Ref( this ).str( ";c_mode2=random'>Random</A><br>" ).ToString();
				dat2 += "Now: " + GlobalVars.master_mode;
				Interface13.Browse( Task13.User, dat2, "window=c_mode" );
			} else if ( Lang13.Bool( href_list["f_secret"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
					return Interface13.Alert( Task13.User, "The game has already started." );
				}

				if ( GlobalVars.master_mode != "secret" ) {
					return Interface13.Alert( Task13.User, "The game mode has to be secret!" );
				}
				dat3 = "<B>What game mode do you want to force secret to be? Use this if you want to change the game mode, but want the players to believe it's secret. This will only work if the current game mode is secret.</B><HR>";

				foreach (dynamic _bl in Lang13.Enumerate( GlobalVars.config.modes )) {
					mode2 = _bl;
					
					dat3 += new Txt( "<A href='?src=" ).Ref( this ).str( ";f_secret2=" ).item( mode2 ).str( "'>" ).item( GlobalVars.config.mode_names[mode2] ).str( "</A><br>" ).ToString();
				}
				dat3 += new Txt( "<A href='?src=" ).Ref( this ).str( ";f_secret2=secret'>Random (default)</A><br>" ).ToString();
				dat3 += "Now: " + GlobalVars.secret_force_mode;
				Interface13.Browse( Task13.User, dat3, "window=f_secret" );
			} else if ( Lang13.Bool( href_list["c_mode2"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 18 ) ) {
					return null;
				}

				if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
					return Interface13.Alert( Task13.User, "The game has already started." );
				}
				GlobalVars.master_mode = href_list["c_mode2"];
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the mode as " + GlobalVars.master_mode + "." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " set the mode as " + GlobalVars.master_mode + ".</span>" );
				Game13.WriteMsg( "<span class='adminnotice'><b>The mode is now: " + GlobalVars.master_mode + "</b></span>" );
				this.Game();
				Game13.save_mode( GlobalVars.master_mode );
				this.Topic( href, new ByTable().Set( "c_mode", 1 ) );
			} else if ( Lang13.Bool( href_list["f_secret2"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 18 ) ) {
					return null;
				}

				if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
					return Interface13.Alert( Task13.User, "The game has already started." );
				}

				if ( GlobalVars.master_mode != "secret" ) {
					return Interface13.Alert( Task13.User, "The game mode has to be secret!" );
				}
				GlobalVars.secret_force_mode = href_list["f_secret2"];
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the forced secret mode as " + GlobalVars.secret_force_mode + "." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " set the forced secret mode as " + GlobalVars.secret_force_mode + ".</span>" );
				this.Game();
				this.Topic( href, new ByTable().Set( "f_secret", 1 ) );
			} else if ( Lang13.Bool( href_list["monkeyone"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				H = Lang13.FindObj( href_list["monkeyone"] );

				if ( !( H is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name( H ) );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name_admin( H ) + "</span>" );
				((Mob_Living_Carbon)H).monkeyize();
			} else if ( Lang13.Bool( href_list["humanone"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				Mo = Lang13.FindObj( href_list["humanone"] );

				if ( !( Mo is Mob_Living_Carbon_Monkey ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/monkey" );
					return null;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to humanize " + GlobalFuncs.key_name( Mo ) );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to humanize " + GlobalFuncs.key_name_admin( Mo ) + "</span>" );
				((Mob_Living_Carbon)Mo).humanize();
			} else if ( Lang13.Bool( href_list["corgione"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				H2 = Lang13.FindObj( href_list["corgione"] );

				if ( !( H2 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to corgize " + GlobalFuncs.key_name( H2 ) );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to corgize " + GlobalFuncs.key_name_admin( H2 ) + "</span>" );
				((Mob_Living_Carbon_Human)H2).corgize();
			} else if ( Lang13.Bool( href_list["forcespeech"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return null;
				}
				M8 = Lang13.FindObj( href_list["forcespeech"] );

				if ( !( M8 is Mob ) ) {
					Task13.User.WriteMsg( "this can only be used on instances of type /mob" );
				}
				speech = Interface13.Input( "What will " + GlobalFuncs.key_name( M8 ) + " say?.", "Force speech", "", null, null, InputType.Any );

				if ( !Lang13.Bool( speech ) ) {
					return null;
				}
				((Ent_Dynamic)M8).say( speech );
				speech = GlobalFuncs.sanitize( speech );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " forced " + GlobalFuncs.key_name( M8 ) + " to say: " + speech );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " forced " + GlobalFuncs.key_name_admin( M8 ) + " to say: " + speech + "</span>" );
			} else if ( Lang13.Bool( href_list["sendtoprison"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				M9 = Lang13.FindObj( href_list["sendtoprison"] );

				if ( !( M9 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( M9 is Mob_Living_Silicon_Ai ) {
					Task13.User.WriteMsg( "This cannot be used on instances of type /mob/living/silicon/ai" );
					return null;
				}

				if ( Interface13.Alert( Task13.User, "Send " + GlobalFuncs.key_name( M9 ) + " to Prison?", "Message", "Yes", "No" ) != "Yes" ) {
					return null;
				}
				M9.loc = Rand13.PickFromTable( GlobalVars.prisonwarp );
				M9.WriteMsg( "<span class='adminnotice'>You have been sent to Prison!</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M9 ) + " to Prison!" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M9 ) + " Prison!" );
			} else if ( Lang13.Bool( href_list["sendbacktolobby"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				M10 = Lang13.FindObj( href_list["sendbacktolobby"] );

				if ( !( M10 is Mob_Dead_Observer ) ) {
					Task13.User.WriteMsg( "<span class='notice'>You can only send ghost players back to the Lobby.</span>" );
					return null;
				}

				if ( !Lang13.Bool( M10.client ) ) {
					Task13.User.WriteMsg( "<span class='warning'>" + M10 + " doesn't seem to have an active client.</span>" );
					return null;
				}

				if ( Interface13.Alert( Task13.User, "Send " + GlobalFuncs.key_name( M10 ) + " back to Lobby?", "Message", "Yes", "No" ) != "Yes" ) {
					return null;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M10 ) + " back to the Lobby." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M10 ) + " back to the Lobby." );
				NP = new Mob_NewPlayer();
				NP.ckey = M10.ckey;
				GlobalFuncs.qdel( M10 );
			} else if ( Lang13.Bool( href_list["tdome1"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return null;
				}

				if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
					return null;
				}
				M11 = Lang13.FindObj( href_list["tdome1"] );

				if ( !( M11 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( M11 is Mob_Living_Silicon_Ai ) {
					Task13.User.WriteMsg( "This cannot be used on instances of type /mob/living/silicon/ai" );
					return null;
				}

				foreach (dynamic _bm in Lang13.Enumerate( M11, typeof(Obj_Item) )) {
					I = _bm;
					
					((Mob)M11).unEquip( I );

					if ( I != null ) {
						I.loc = M11.loc;
						I.layer = Convert.ToDouble( Lang13.Initial( I, "layer" ) );
						I.dropped( M11 );
					}
				}
				((Mob)M11).Paralyse( 5 );
				Task13.Sleep( 5 );
				M11.loc = Rand13.PickFromTable( GlobalVars.tdome1 );
				Task13.Schedule( 50, (Task13.Closure)(() => {
					M11.WriteMsg( "<span class='adminnotice'>You have been sent to the Thunderdome.</span>" );
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M11 ) + " to the thunderdome. (Team 1)" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M11 ) + " to the thunderdome. (Team 1)" );
			} else if ( Lang13.Bool( href_list["tdome2"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return null;
				}

				if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
					return null;
				}
				M12 = Lang13.FindObj( href_list["tdome2"] );

				if ( !( M12 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( M12 is Mob_Living_Silicon_Ai ) {
					Task13.User.WriteMsg( "This cannot be used on instances of type /mob/living/silicon/ai" );
					return null;
				}

				foreach (dynamic _bn in Lang13.Enumerate( M12, typeof(Obj_Item) )) {
					I2 = _bn;
					
					((Mob)M12).unEquip( I2 );

					if ( I2 != null ) {
						I2.loc = M12.loc;
						I2.layer = Convert.ToDouble( Lang13.Initial( I2, "layer" ) );
						I2.dropped( M12 );
					}
				}
				((Mob)M12).Paralyse( 5 );
				Task13.Sleep( 5 );
				M12.loc = Rand13.PickFromTable( GlobalVars.tdome2 );
				Task13.Schedule( 50, (Task13.Closure)(() => {
					M12.WriteMsg( "<span class='adminnotice'>You have been sent to the Thunderdome.</span>" );
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M12 ) + " to the thunderdome. (Team 2)" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M12 ) + " to the thunderdome. (Team 2)" );
			} else if ( Lang13.Bool( href_list["tdomeadmin"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return null;
				}

				if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
					return null;
				}
				M13 = Lang13.FindObj( href_list["tdomeadmin"] );

				if ( !( M13 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( M13 is Mob_Living_Silicon_Ai ) {
					Task13.User.WriteMsg( "This cannot be used on instances of type /mob/living/silicon/ai" );
					return null;
				}
				((Mob)M13).Paralyse( 5 );
				Task13.Sleep( 5 );
				M13.loc = Rand13.PickFromTable( GlobalVars.tdomeadmin );
				Task13.Schedule( 50, (Task13.Closure)(() => {
					M13.WriteMsg( "<span class='adminnotice'>You have been sent to the Thunderdome.</span>" );
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M13 ) + " to the thunderdome. (Admin.)" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M13 ) + " to the thunderdome. (Admin.)" );
			} else if ( Lang13.Bool( href_list["tdomeobserve"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return null;
				}

				if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
					return null;
				}
				M14 = Lang13.FindObj( href_list["tdomeobserve"] );

				if ( !( M14 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}

				if ( M14 is Mob_Living_Silicon_Ai ) {
					Task13.User.WriteMsg( "This cannot be used on instances of type /mob/living/silicon/ai" );
					return null;
				}

				foreach (dynamic _bo in Lang13.Enumerate( M14, typeof(Obj_Item) )) {
					I3 = _bo;
					
					((Mob)M14).unEquip( I3 );

					if ( I3 != null ) {
						I3.loc = M14.loc;
						I3.layer = Convert.ToDouble( Lang13.Initial( I3, "layer" ) );
						I3.dropped( M14 );
					}
				}

				if ( M14 is Mob_Living_Carbon_Human ) {
					observer = M14;
					((Mob)observer).equip_to_slot_or_del( new Obj_Item_Clothing_Under_SuitJacket( observer ), 14 );
					((Mob)observer).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sneakers_Black( observer ), 12 );
				}
				((Mob)M14).Paralyse( 5 );
				Task13.Sleep( 5 );
				M14.loc = Rand13.PickFromTable( GlobalVars.tdomeobserve );
				Task13.Schedule( 50, (Task13.Closure)(() => {
					M14.WriteMsg( "<span class='adminnotice'>You have been sent to the Thunderdome.</span>" );
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M14 ) + " to the thunderdome. (Observer.)" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M14 ) + " to the thunderdome. (Observer.)" );
			} else if ( Lang13.Bool( href_list["revive"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 512 ) ) {
					return null;
				}
				L = Lang13.FindObj( href_list["revive"] );

				if ( !( L is Mob_Living ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living" );
					return null;
				}
				L.revive();
				GlobalFuncs.message_admins( "<span class='danger'>Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " healed / revived " + GlobalFuncs.key_name_admin( L ) + "!</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " healed / Revived " + GlobalFuncs.key_name( L ) );
			} else if ( Lang13.Bool( href_list["makeai"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				H3 = Lang13.FindObj( href_list["makeai"] );

				if ( !( H3 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				GlobalFuncs.message_admins( "<span class='danger'>Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " AIized " + GlobalFuncs.key_name_admin( H3 ) + "!</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " AIized " + GlobalFuncs.key_name( H3 ) );
				((Mob)H3).AIize();
			} else if ( Lang13.Bool( href_list["makealien"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				H4 = Lang13.FindObj( href_list["makealien"] );

				if ( !( H4 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				Task13.User.client.cmd_admin_alienize( H4 );
			} else if ( Lang13.Bool( href_list["makeslime"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				H5 = Lang13.FindObj( href_list["makeslime"] );

				if ( !( H5 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				Task13.User.client.cmd_admin_slimeize( H5 );
			} else if ( Lang13.Bool( href_list["makeblob"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				H6 = Lang13.FindObj( href_list["makeblob"] );

				if ( !( H6 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				Task13.User.client.cmd_admin_blobize( H6 );
			} else if ( Lang13.Bool( href_list["makerobot"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				H7 = Lang13.FindObj( href_list["makerobot"] );

				if ( !( H7 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				Task13.User.client.cmd_admin_robotize( H7 );
			} else if ( Lang13.Bool( href_list["makeanimal"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				M15 = Lang13.FindObj( href_list["makeanimal"] );

				if ( M15 is Mob_NewPlayer ) {
					Task13.User.WriteMsg( "This cannot be used on instances of type /mob/new_player" );
					return null;
				}
				Task13.User.client.cmd_admin_animalize( M15 );
			} else if ( Lang13.Bool( href_list["gangpoints"] ) ) {
				G = Lang13.FindIn( href_list["gangpoints"], GlobalVars.ticker.mode.gangs );

				if ( Lang13.Bool( G ) ) {
					newpoints = Interface13.Input( "Set " + G.name + " Gang's influence.", "Set Influence", G.points, null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( newpoints ) ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " changed the " + G.name + " Gang's influence from " + G.points + " to " + newpoints + "</span>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed the " + G.name + " Gang's influence from " + G.points + " to " + newpoints + "</span>" );
						G.points = newpoints;
						((Gang)G).message_gangtools( "Your gang now has " + G.points + " influence." );
					}
				}
			} else if ( Lang13.Bool( href_list["adminplayeropts"] ) ) {
				M16 = Lang13.FindObj( href_list["adminplayeropts"] );
				this.show_player_panel( M16 );
			} else if ( Lang13.Bool( href_list["adminplayerobservefollow"] ) ) {
				
				if ( !( Task13.User is Mob_Dead_Observer ) && !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				AM = Lang13.FindObj( href_list["adminplayerobservefollow"] );
				C2 = Task13.User.client;

				if ( !( Task13.User is Mob_Dead_Observer ) ) {
					C2.admin_ghost();
				}
				A = C2.mob;
				((dynamic)A).ManualFollow( AM );
			} else if ( Lang13.Bool( href_list["adminplayerobservecoodjump"] ) ) {
				
				if ( !( Task13.User is Mob_Dead_Observer ) && !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				x = String13.ParseNumber( href_list["X"] );
				y = String13.ParseNumber( href_list["Y"] );
				z = String13.ParseNumber( href_list["Z"] );
				C3 = Task13.User.client;

				if ( !( Task13.User is Mob_Dead_Observer ) ) {
					C3.admin_ghost();
				}
				Task13.Sleep( 2 );
				C3.jumptocoord( x, y, z );
			} else if ( Lang13.Bool( href_list["adminchecklaws"] ) ) {
				this.output_ai_laws();
			} else if ( Lang13.Bool( href_list["adminmoreinfo"] ) ) {
				M17 = Lang13.FindObj( href_list["adminmoreinfo"] );

				if ( !( M17 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return null;
				}
				location_description = "";
				special_role_description = "";
				health_description = "";
				gender_description = "";
				T = GlobalFuncs.get_turf( M17 );

				if ( T is Tile ) {
					
					if ( T.loc is Zone ) {
						location_description = "(" + ( M17.loc == T ? "at coordinates " : "in " + M17.loc + " at coordinates " ) + " " + T.x + ", " + T.y + ", " + T.z + " in area <b>" + T.loc + "</b>)";
					} else {
						location_description = "(" + ( M17.loc == T ? "at coordinates " : "in " + M17.loc + " at coordinates " ) + " " + T.x + ", " + T.y + ", " + T.z + ")";
					}
				}

				if ( Lang13.Bool( M17.mind ) ) {
					special_role_description = "Role: <b>" + M17.mind.assigned_role + "</b>; Antagonist: <font color='red'><b>" + M17.mind.special_role + "</b></font>";
				} else {
					special_role_description = "Role: <i>Mind datum missing</i> Antagonist: <i>Mind datum missing</i>";
				}

				if ( M17 is Mob_Living ) {
					L2 = M17;
					status = null;

					dynamic _bp = M17.stat; // Was a switch-case, sorry for the mess.
					if ( _bp==0 ) {
						status = "Alive";
					} else if ( _bp==1 ) {
						status = "<font color='orange'><b>Unconscious</b></font>";
					} else if ( _bp==2 ) {
						status = "<font color='red'><b>Dead</b></font>";
					}
					health_description = "Status = " + status;
					health_description += "<BR>Oxy: " + ((Mob_Living)L2).getOxyLoss() + " - Tox: " + ((Mob_Living)L2).getToxLoss() + " - Fire: " + ((Mob_Living)L2).getFireLoss() + " - Brute: " + ((Mob_Living)L2).getBruteLoss() + " - Clone: " + ((Mob_Living)L2).getCloneLoss() + " - Brain: " + ((Mob_Living)L2).getBrainLoss() + " - Stamina: " + ((Mob_Living)L2).getStaminaLoss();
				} else {
					health_description = "This mob type has no health to speak of.";
				}

				dynamic _bq = M17.gender; // Was a switch-case, sorry for the mess.
				if ( _bq=="male" || _bq=="female" ) {
					gender_description = "" + M17.gender;
				} else {
					gender_description = "<font color='red'><b>" + M17.gender + "</b></font>";
				}
				this.owner.WriteMsg( "<b>Info about " + M17.name + ":</b> " );
				this.owner.WriteMsg( "Mob type = " + M17.type + "; Gender = " + gender_description + " Damage = " + health_description );
				this.owner.WriteMsg( "Name = <b>" + M17.name + "</b>; Real_name = " + M17.real_name + "; Mind_name = " + ( Lang13.Bool( M17.mind ) ? "" + M17.mind.name : "" ) + "; Key = <b>" + M17.key + "</b>;" );
				this.owner.WriteMsg( "Location = " + location_description + ";" );
				this.owner.WriteMsg( "" + special_role_description );
				this.owner.WriteMsg( new Txt( "(<a href='?priv_msg=" ).item( M17.ckey ).str( "'>PM</a>) (<A HREF='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M17 ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( M17 ).str( "'>VV</A>) (<A HREF='?src=" ).Ref( this ).str( ";subtlemessage=" ).Ref( M17 ).str( "'>SM</A>) (<A HREF='?src=" ).Ref( this ).str( ";adminplayerobservefollow=" ).Ref( M17 ).str( "'>FLW</A>) (<A HREF='?src=" ).Ref( this ).str( ";secrets=check_antagonist'>CA</A>)" ).ToString() );
			} else if ( Lang13.Bool( href_list["addjobslot"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				Add = href_list["addjobslot"];

				foreach (dynamic _br in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job13 = _br;
					

					if ( job13.title == Add ) {
						job13.total_positions += 1;
						break;
					}
				}
				this.manage_free_slots();
			} else if ( Lang13.Bool( href_list["removejobslot"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				Remove = href_list["removejobslot"];

				foreach (dynamic _bs in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job14 = _bs;
					

					if ( job14.title == Remove && Convert.ToDouble( job14.total_positions - job14.current_positions ) > 0 ) {
						job14.total_positions -= 1;
						break;
					}
				}
				this.manage_free_slots();
			} else if ( Lang13.Bool( href_list["unlimitjobslot"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				Unlimit = href_list["unlimitjobslot"];

				foreach (dynamic _bt in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job15 = _bt;
					

					if ( job15.title == Unlimit ) {
						job15.total_positions = -1;
						break;
					}
				}
				this.manage_free_slots();
			} else if ( Lang13.Bool( href_list["limitjobslot"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				Limit = href_list["limitjobslot"];

				foreach (dynamic _bu in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job16 = _bu;
					

					if ( job16.title == Limit ) {
						job16.total_positions = job16.current_positions;
						break;
					}
				}
				this.manage_free_slots();
			} else if ( Lang13.Bool( href_list["adminspawncookie"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 10 ) ) {
					return null;
				}
				H8 = Lang13.FindObj( href_list["adminspawncookie"] );

				if ( !( H8 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}
				((Mob)H8).equip_to_slot_or_del( new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie( H8 ), 4 );

				if ( !( H8.l_hand is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie ) ) {
					((Mob)H8).equip_to_slot_or_del( new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie( H8 ), 5 );

					if ( !( H8.r_hand is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie ) ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( H8 ) + " has their hands full, so they did not receive their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) + "." );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( H8 ) + " has their hands full, so they did not receive their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) + "." );
						return null;
					} else {
						((Mob)H8).update_inv_r_hand();
					}
				} else {
					((Mob)H8).update_inv_l_hand();
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( H8 ) + " got their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( H8 ) + " got their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) );
				GlobalFuncs.feedback_inc( "admin_cookies_spawned", 1 );
				H8.WriteMsg( "<span class='adminnotice'>Your prayers have been answered!! You received the <b>best cookie</b>!</span>" );
				H8.WriteMsg( "sound/effects/pray_chaplain.ogg" );
			} else if ( Lang13.Bool( href_list["BlueSpaceArtillery"] ) ) {
				M18 = Lang13.FindObj( href_list["BlueSpaceArtillery"] );
				Task13.User.client.bluespace_artillery( M18 );
			} else if ( Lang13.Bool( href_list["CentcommReply"] ) ) {
				H9 = Lang13.FindObj( href_list["CentcommReply"] );

				if ( !( H9 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}

				if ( !( H9.ears is Obj_Item_Device_Radio_Headset ) ) {
					Task13.User.WriteMsg( "The person you are trying to contact is not wearing a headset" );
					return null;
				}
				input = Interface13.Input( this.owner, "Please enter a message to reply to " + GlobalFuncs.key_name( H9 ) + " via their headset.", "Outgoing message from Centcom", "", null, InputType.Any );

				if ( !Lang13.Bool( input ) ) {
					return null;
				}
				this.owner.WriteMsg( "You sent " + input + " to " + H9 + " via a secure channel." );
				GlobalFuncs.log_admin( "" + this.owner + " replied to " + GlobalFuncs.key_name( H9 ) + "'s Centcom message with the message " + input + "." );
				GlobalFuncs.message_admins( "" + this.owner + " replied to " + GlobalFuncs.key_name( H9 ) + "'s Centcom message with: \"" + input + "\"" );
				H9.WriteMsg( "You hear something crackle in your ears for a moment before a voice speaks.  \"Please stand by for a message from Central Command.  Message as follows. " + input + ".  Message ends.\"" );
			} else if ( Lang13.Bool( href_list["SyndicateReply"] ) ) {
				H10 = Lang13.FindObj( href_list["SyndicateReply"] );

				if ( !( H10 is Mob_Living_Carbon_Human ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob/living/carbon/human" );
					return null;
				}

				if ( !( H10.ears is Obj_Item_Device_Radio_Headset ) ) {
					Task13.User.WriteMsg( "The person you are trying to contact is not wearing a headset" );
					return null;
				}
				input2 = Interface13.Input( this.owner, "Please enter a message to reply to " + GlobalFuncs.key_name( H10 ) + " via their headset.", "Outgoing message from The Syndicate", "", null, InputType.Any );

				if ( !Lang13.Bool( input2 ) ) {
					return null;
				}
				this.owner.WriteMsg( "You sent " + input2 + " to " + H10 + " via a secure channel." );
				GlobalFuncs.log_admin( "" + this.owner + " replied to " + GlobalFuncs.key_name( H10 ) + "'s Syndicate message with the message " + input2 + "." );
				GlobalFuncs.message_admins( "" + this.owner + " replied to " + GlobalFuncs.key_name( H10 ) + "'s Syndicate message with: \"" + input2 + "\"" );
				H10.WriteMsg( "You hear something crackle in your ears for a moment before a voice speaks.  \"Please stand by for a message from your benefactor.  Message as follows, agent. " + input2 + ".  Message ends.\"" );
			} else if ( Lang13.Bool( href_list["jumpto"] ) ) {
				
				if ( !( Task13.User is Mob_Dead_Observer ) && !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				M19 = Lang13.FindObj( href_list["jumpto"] );
				Task13.User.client.jumptomob( M19 );
			} else if ( Lang13.Bool( href_list["getmob"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
					return null;
				}
				M20 = Lang13.FindObj( href_list["getmob"] );
				Task13.User.client.Getmob( M20 );
			} else if ( Lang13.Bool( href_list["sendmob"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				M21 = Lang13.FindObj( href_list["sendmob"] );
				Task13.User.client.sendmob( M21 );
			} else if ( Lang13.Bool( href_list["narrateto"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				M22 = Lang13.FindObj( href_list["narrateto"] );
				Task13.User.client.cmd_admin_direct_narrate( M22 );
			} else if ( Lang13.Bool( href_list["subtlemessage"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				M23 = Lang13.FindObj( href_list["subtlemessage"] );
				Task13.User.client.cmd_admin_subtle_message( M23 );
			} else if ( Lang13.Bool( href_list["traitor"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
					Interface13.Alert( "The game hasn't started yet!" );
					return null;
				}
				M24 = Lang13.FindObj( href_list["traitor"] );

				if ( !( M24 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob." );
					return null;
				}
				this.show_traitor_panel( M24 );
			} else if ( Lang13.Bool( href_list["create_object"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				this.create_object( Task13.User ); return null;
			} else if ( Lang13.Bool( href_list["quick_create_object"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				this.quick_create_object( Task13.User ); return null;
			} else if ( Lang13.Bool( href_list["create_turf"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				this.create_turf( Task13.User ); return null;
			} else if ( Lang13.Bool( href_list["create_mob"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				this.create_mob( Task13.User ); return null;
			} else if ( Lang13.Bool( href_list["dupe_marked_datum"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				return GlobalFuncs.DuplicateObject( this.marked_datum, true, null, GlobalFuncs.get_turf( Task13.User ) );
			} else if ( Lang13.Bool( href_list["object_list"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return null;
				}
				loc = Task13.User.loc;
				dirty_paths = null;

				if ( href_list["object_list"] is string ) {
					dirty_paths = new ByTable(new object [] { href_list["object_list"] });
				} else if ( href_list["object_list"] is ByTable ) {
					dirty_paths = href_list["object_list"];
				}
				paths = new ByTable();

				foreach (dynamic _bv in Lang13.Enumerate( dirty_paths )) {
					dirty_path = _bv;
					
					path = Lang13.FindClass( dirty_path );

					if ( !( path != null ) ) {
						continue;
					} else if ( !Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Obj) ) ) && !Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Tile) ) ) && !Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Mob) ) ) ) {
						continue;
					}
					paths.Add( path );
				}

				if ( !( paths != null ) ) {
					Interface13.Alert( "The path list you sent is empty" );
					return null;
				}

				if ( Lang13.Length( paths ) > 5 ) {
					Interface13.Alert( "Select fewer object types, (max 5)" );
					return null;
				}
				offset = GlobalFuncs.splittext( href_list["offset"], "," );
				number = Num13.MaxInt( 1, Num13.MinInt( ((int)( String13.ParseNumber( href_list["object_count"] ) ??0 )), 100 ) );
				X = ( offset.len > 0 ? String13.ParseNumber( offset[1] ) : 0 );
				Y = ( offset.len > 1 ? String13.ParseNumber( offset[2] ) : 0 );
				Z = ( offset.len > 2 ? String13.ParseNumber( offset[3] ) : 0 );
				tmp_dir = href_list["object_dir"];
				obj_dir = ( Lang13.Bool( tmp_dir ) ? String13.ParseNumber( tmp_dir ) : 2 );

				if ( !Lang13.Bool( obj_dir ) || !new ByTable(new object [] { 1, 2, 4, 8, 5, 6, 9, 10 }).Contains( obj_dir ) ) {
					obj_dir = 2;
				}
				obj_name = GlobalFuncs.sanitize( href_list["object_name"] );
				target4 = null;
				where = href_list["object_where"];

				if ( !new ByTable(new object [] { "onfloor", "inhand", "inmarked" }).Contains( where ) ) {
					where = "onfloor";
				}

				switch ((string)( where )) {
					case "inhand":
						
						if ( !( Task13.User is Mob_Living_Carbon ) && !( Task13.User is Mob_Living_Silicon_Robot ) ) {
							Task13.User.WriteMsg( "Can only spawn in hand when you're a carbon mob or cyborg." );
							where = "onfloor";
						}
						target4 = Task13.User;
						break;
					case "onfloor":
						
						dynamic _bw = href_list["offset_type"]; // Was a switch-case, sorry for the mess.
						if ( _bw=="absolute" ) {
							target4 = Map13.GetTile( ((int)( X ??0 )), ((int)( Y ??0 )), ((int)( Z ??0 )) );
						} else if ( _bw=="relative" ) {
							target4 = Map13.GetTile( ((int)( loc.x + ( X ??0) )), ((int)( loc.y + ( Y ??0) )), ((int)( loc.z + ( Z ??0) )) );
						}
						break;
					case "inmarked":
						
						if ( !Lang13.Bool( this.marked_datum ) ) {
							Task13.User.WriteMsg( "You don't have any object marked. Abandoning spawn." );
							return null;
						} else if ( !( this.marked_datum is Ent_Static ) ) {
							Task13.User.WriteMsg( "The object you have marked cannot be used as a target. Target must be of type /atom. Abandoning spawn." );
							return null;
						} else {
							target4 = this.marked_datum;
						}
						break;
				}

				if ( Lang13.Bool( target4 ) ) {
					
					foreach (dynamic _by in Lang13.Enumerate( paths )) {
						path2 = _by;
						
						i = null;
						i = 0;

						while (( i ??0) < ( number ??0)) {
							
							if ( Lang13.Bool( Lang13.GetTypes( typeof(Tile) ).Contains( path2 ) ) ) {
								O = target4;
								N = ((Tile)O).ChangeTurf( path2 );

								if ( Lang13.Bool( N ) && Lang13.Bool( obj_name ) ) {
									N.name = obj_name;
								}
							} else {
								O2 = Lang13.Call( path2, target4 );

								if ( Lang13.Bool( O2 ) ) {
									O2.dir = obj_dir;

									if ( Lang13.Bool( obj_name ) ) {
										O2.name = obj_name;

										if ( O2 is Mob ) {
											M25 = O2;
											M25.real_name = obj_name;
										}
									}

									if ( where == "inhand" && Task13.User is Mob_Living && O2 is Obj_Item ) {
										L3 = Task13.User;
										I4 = O2;
										L3.put_in_hands( I4 );

										if ( L3 is Mob_Living_Silicon_Robot ) {
											R = L3;

											if ( Lang13.Bool( ((dynamic)R).module ) ) {
												((Obj_Item_Weapon_RobotModule)((dynamic)R).module).add_module( I4 );
												((Mob_Living_Silicon_Robot)R).activate_module( I4 );
											}
										}
									}
								}
							}
							i++;
						}
					}
				}

				if ( number == 1 ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a " + GlobalFuncs.english_list( paths ) );

					foreach (dynamic _bz in Lang13.Enumerate( paths )) {
						path3 = _bz;
						

						if ( Lang13.Bool( path3.IsSubclassOf( typeof(Mob) ) ) ) {
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created a " + GlobalFuncs.english_list( paths ) );
							break;
						}
					}
				} else {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created " + number + "ea " + GlobalFuncs.english_list( paths ) );

					foreach (dynamic _ca in Lang13.Enumerate( paths )) {
						path4 = _ca;
						

						if ( Lang13.Bool( path4.IsSubclassOf( typeof(Mob) ) ) ) {
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created " + number + "ea " + GlobalFuncs.english_list( paths ) );
							break;
						}
					}
				}
				return null;
			} else if ( Lang13.Bool( href_list["secrets"] ) ) {
				this.Secrets_topic( href_list["secrets"], href_list );
			} else if ( Lang13.Bool( href_list["ac_view_wanted"] ) ) {
				this.admincaster_screen = 18;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_set_channel_name"] ) ) {
				this.admincaster_feed_channel.channel_name = GlobalFuncs.stripped_input( Task13.User, "Provide a Feed Channel Name", "Network Channel Handler", "" );

				while (String13.FindIgnoreCase( this.admincaster_feed_channel.channel_name, " ", 1, 0 ) == 1) {
					this.admincaster_feed_channel.channel_name = String13.SubStr( this.admincaster_feed_channel.channel_name, 2, Lang13.Length( this.admincaster_feed_channel.channel_name ) + 1 );
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_set_channel_lock"] ) ) {
				this.admincaster_feed_channel.locked = !Lang13.Bool( this.admincaster_feed_channel.locked );
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_submit_new_channel"] ) ) {
				check = false;

				foreach (dynamic _cb in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
					FC = _cb;
					

					if ( FC.channel_name == this.admincaster_feed_channel.channel_name ) {
						check = true;
						break;
					}
				}

				if ( this.admincaster_feed_channel.channel_name == "" || this.admincaster_feed_channel.channel_name == "[REDACTED]" || check ) {
					this.admincaster_screen = 7;
				} else {
					choice = Interface13.Alert( "Please confirm Feed channel creation", "Network Channel Handler", "Confirm", "Cancel" );

					if ( choice == "Confirm" ) {
						GlobalVars.news_network.CreateFeedChannel( this.admincaster_feed_channel.channel_name, this.admin_signature, Lang13.Bool( this.admincaster_feed_channel.locked ), true );
						GlobalFuncs.feedback_inc( "newscaster_channels", 1 );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created command feed channel: " + this.admincaster_feed_channel.channel_name + "!" );
						this.admincaster_screen = 5;
					}
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_set_channel_receiving"] ) ) {
				available_channels = new ByTable();

				foreach (dynamic _cc in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
					F = _cc;
					
					available_channels.Add( F.channel_name );
				}
				this.admincaster_feed_channel.channel_name = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Choose receiving Feed Channel", "Network Channel Handler", null, available_channels, InputType.Any ) );
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_set_new_message"] ) ) {
				this.admincaster_feed_message.body = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Write your Feed story", "Network Channel Handler", "", null, InputType.Any ) );

				while (String13.FindIgnoreCase( this.admincaster_feed_message.returnBody( -1 ), " ", 1, 0 ) == 1) {
					this.admincaster_feed_message.body = String13.SubStr( this.admincaster_feed_message.returnBody( -1 ), 2, Lang13.Length( this.admincaster_feed_message.returnBody( -1 ) ) + 1 );
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_submit_new_message"] ) ) {
				
				if ( this.admincaster_feed_message.returnBody( -1 ) == "" || this.admincaster_feed_message.returnBody( -1 ) == "[REDACTED]" || this.admincaster_feed_channel.channel_name == "" ) {
					this.admincaster_screen = 6;
				} else {
					GlobalVars.news_network.SubmitArticle( this.admincaster_feed_message.returnBody( -1 ), this.admin_signature, this.admincaster_feed_channel.channel_name, null, true );
					GlobalFuncs.feedback_inc( "newscaster_stories", 1 );
					this.admincaster_screen = 4;
				}

				foreach (dynamic _cd in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
					NEWSCASTER = _cd;
					
					NEWSCASTER.newsAlert( this.admincaster_feed_channel.channel_name );
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " submitted a feed story to channel: " + this.admincaster_feed_channel.channel_name + "!" );
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_create_channel"] ) ) {
				this.admincaster_screen = 2;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_create_feed_story"] ) ) {
				this.admincaster_screen = 3;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_menu_censor_story"] ) ) {
				this.admincaster_screen = 10;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_menu_censor_channel"] ) ) {
				this.admincaster_screen = 11;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_menu_wanted"] ) ) {
				already_wanted = false;

				if ( GlobalVars.news_network.wanted_issue.active ) {
					already_wanted = true;
				}

				if ( already_wanted ) {
					this.admincaster_wanted_message.criminal = GlobalVars.news_network.wanted_issue.criminal;
					this.admincaster_wanted_message.body = GlobalVars.news_network.wanted_issue.body;
				}
				this.admincaster_screen = 14;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_set_wanted_name"] ) ) {
				this.admincaster_wanted_message.criminal = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Provide the name of the Wanted person", "Network Security Handler", "", null, InputType.Any ) );

				while (String13.FindIgnoreCase( this.admincaster_wanted_message.criminal, " ", 1, 0 ) == 1) {
					this.admincaster_wanted_message.criminal = String13.SubStr( this.admincaster_wanted_message.criminal, 2, Lang13.Length( this.admincaster_wanted_message.criminal ) + 1 );
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_set_wanted_desc"] ) ) {
				this.admincaster_wanted_message.body = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Provide the a description of the Wanted person and any other details you deem important", "Network Security Handler", "", null, InputType.Any ) );

				while (String13.FindIgnoreCase( this.admincaster_wanted_message.body, " ", 1, 0 ) == 1) {
					this.admincaster_wanted_message.body = String13.SubStr( this.admincaster_wanted_message.body, 2, Lang13.Length( this.admincaster_wanted_message.body ) + 1 );
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_submit_wanted"] ) ) {
				input_param = String13.ParseNumber( href_list["ac_submit_wanted"] );

				if ( this.admincaster_wanted_message.criminal == "" || this.admincaster_wanted_message.body == "" ) {
					this.admincaster_screen = 16;
				} else {
					choice2 = Interface13.Alert( "Please confirm Wanted Issue " + ( input_param == 1 ? "creation." : "edit." ), "Network Security Handler", "Confirm", "Cancel" );

					if ( choice2 == "Confirm" ) {
						
						if ( input_param == 1 ) {
							GlobalVars.news_network.submitWanted( this.admincaster_wanted_message.criminal, this.admincaster_wanted_message.body, this.admin_signature, null, true, true );
							this.admincaster_screen = 15;
						} else {
							GlobalVars.news_network.submitWanted( this.admincaster_wanted_message.criminal, this.admincaster_wanted_message.body, this.admin_signature );
							this.admincaster_screen = 19;
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " issued a Station-wide Wanted Notification for " + this.admincaster_wanted_message.criminal + "!" );
					}
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_cancel_wanted"] ) ) {
				choice3 = Interface13.Alert( "Please confirm Wanted Issue removal", "Network Security Handler", "Confirm", "Cancel" );

				if ( choice3 == "Confirm" ) {
					GlobalVars.news_network.deleteWanted();
					this.admincaster_screen = 17;
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_censor_channel_author"] ) ) {
				FC2 = Lang13.FindObj( href_list["ac_censor_channel_author"] );
				FC2.toggleCensorAuthor();
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_censor_channel_story_author"] ) ) {
				MSG = Lang13.FindObj( href_list["ac_censor_channel_story_author"] );
				MSG.toggleCensorAuthor();
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_censor_channel_story_body"] ) ) {
				MSG2 = Lang13.FindObj( href_list["ac_censor_channel_story_body"] );
				((Newscaster_FeedMessage)MSG2).toggleCensorBody();
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_pick_d_notice"] ) ) {
				FC3 = Lang13.FindObj( href_list["ac_pick_d_notice"] );
				this.admincaster_feed_channel = FC3;
				this.admincaster_screen = 13;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_toggle_d_notice"] ) ) {
				FC4 = Lang13.FindObj( href_list["ac_toggle_d_notice"] );
				((Newscaster_FeedChannel)FC4).toggleCensorDclass();
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_view"] ) ) {
				this.admincaster_screen = 1;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_setScreen"] ) ) {
				this.admincaster_screen = String13.ParseNumber( href_list["ac_setScreen"] );

				if ( this.admincaster_screen == 0 ) {
					
					if ( Lang13.Bool( this.admincaster_feed_channel ) ) {
						this.admincaster_feed_channel = new Newscaster_FeedChannel();
					}

					if ( this.admincaster_feed_message != null ) {
						this.admincaster_feed_message = new Newscaster_FeedMessage();
					}

					if ( this.admincaster_wanted_message != null ) {
						this.admincaster_wanted_message = new Newscaster_WantedMessage();
					}
				}
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_show_channel"] ) ) {
				FC5 = Lang13.FindObj( href_list["ac_show_channel"] );
				this.admincaster_feed_channel = FC5;
				this.admincaster_screen = 9;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_pick_censor_channel"] ) ) {
				FC6 = Lang13.FindObj( href_list["ac_pick_censor_channel"] );
				this.admincaster_feed_channel = FC6;
				this.admincaster_screen = 12;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_refresh"] ) ) {
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_set_signature"] ) ) {
				this.admin_signature = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Provide your desired signature", "Network Identity Handler", "", null, InputType.Any ) );
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_del_comment"] ) ) {
				FC7 = Lang13.FindObj( href_list["ac_del_comment"] );
				FM = Lang13.FindObj( href_list["ac_del_comment_msg"] );
				FM.comments -= FC7;
				GlobalFuncs.qdel( FC7 );
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["ac_lock_comment"] ) ) {
				FM2 = Lang13.FindObj( href_list["ac_lock_comment"] );
				FM2.locked ^= 1;
				this.access_news_network();
			} else if ( Lang13.Bool( href_list["memoeditlist"] ) ) {
				sql_key = GlobalFuncs.sanitizeSQL( "" + href_list["memoeditlist"] );
				query_memoedits = GlobalVars.dbcon.NewQuery( "SELECT edits FROM " + GlobalFuncs.format_table_name( "memo" ) + " WHERE (ckey = '" + sql_key + "')" );

				if ( !query_memoedits.Execute() ) {
					err3 = query_memoedits.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining edits from memo table. Error : [" + err3 + "]\n" );
					return null;
				}

				if ( query_memoedits.NextRow() ) {
					edit_log3 = query_memoedits.item[1];
					Interface13.Browse( Task13.User, edit_log3, "window=memoeditlist" );
				}
			} else if ( Lang13.Bool( href_list["check_antagonist"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				Task13.User.client.check_antagonists();
			} else if ( Lang13.Bool( href_list["kick_all_from_lobby"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}

				if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
					afkonly = String13.ParseNumber( href_list["afkonly"] );

					if ( Interface13.Alert( "Are you sure you want to kick all " + ( Lang13.Bool( afkonly ) ? "AFK" : "" ) + " clients from the lobby??", "Message", "Yes", "Cancel" ) != "Yes" ) {
						Task13.User.WriteMsg( "Kick clients from lobby aborted" );
						return null;
					}
					listkicked = GlobalFuncs.kick_clients_in_lobby( "<span class='danger'>You were kicked from the lobby by " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "an Administrator" : "" + Task13.User.client.ckey ) + ".</span>", afkonly );
					strkicked = "";

					foreach (dynamic _ce in Lang13.Enumerate( listkicked )) {
						name = _ce;
						
						strkicked += "" + name + ", ";
					}
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has kicked " + ( Lang13.Bool( afkonly ) ? "all AFK" : "all" ) + " clients from the lobby. " + Lang13.Length( listkicked ) + " clients kicked: " + ( Lang13.Bool( strkicked ) ? strkicked : "--" ) );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has kicked " + ( Lang13.Bool( afkonly ) ? "all AFK" : "all" ) + " clients from the lobby. " + Lang13.Length( listkicked ) + " clients kicked: " + ( Lang13.Bool( strkicked ) ? strkicked : "--" ) );
				} else {
					Task13.User.WriteMsg( "You may only use this when the game is running" );
				}
			} else if ( Lang13.Bool( href_list["create_outfit"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return null;
				}
				O3 = new Outfit();
				O3.name = href_list["outfit_name"];
				O3.uniform = Lang13.FindClass( href_list["outfit_uniform"] );
				O3.shoes = Lang13.FindClass( href_list["outfit_shoes"] );
				O3.gloves = Lang13.FindClass( href_list["outfit_gloves"] );
				O3.suit = Lang13.FindClass( href_list["outfit_suit"] );
				O3.head = Lang13.FindClass( href_list["outfit_head"] );
				O3.back = Lang13.FindClass( href_list["outfit_back"] );
				O3.mask = Lang13.FindClass( href_list["outfit_mask"] );
				O3.glasses = Lang13.FindClass( href_list["outfit_glasses"] );
				O3.r_hand = Lang13.FindClass( href_list["outfit_r_hand"] );
				O3.l_hand = Lang13.FindClass( href_list["outfit_l_hand"] );
				O3.suit_store = Lang13.FindClass( href_list["outfit_s_store"] );
				O3.l_pocket = Lang13.FindClass( href_list["outfit_l_pocket"] );
				O3.r_pocket = Lang13.FindClass( href_list["outfit_r_pocket"] );
				O3.id = Lang13.FindClass( href_list["outfit_id"] );
				O3.belt = Lang13.FindClass( href_list["outfit_belt"] );
				O3.ears = Lang13.FindClass( href_list["outfit_ears"] );
				GlobalVars.custom_outfits.Add( O3 );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " created \"" + O3.name + "\" outfit!" );
			}
			return null;
		}

		// Function from file: randomverbs.dm
		public void create_outfit(  ) {
			dynamic uniforms = null;
			dynamic suits = null;
			dynamic gloves = null;
			dynamic shoes = null;
			dynamic headwear = null;
			dynamic glasses = null;
			dynamic masks = null;
			dynamic ids = null;
			string uniform_select = null;
			dynamic path = null;
			string suit_select = null;
			dynamic path2 = null;
			string gloves_select = null;
			dynamic path3 = null;
			string shoes_select = null;
			dynamic path4 = null;
			string head_select = null;
			dynamic path5 = null;
			string glasses_select = null;
			dynamic path6 = null;
			string mask_select = null;
			dynamic path7 = null;
			string id_select = null;
			dynamic path8 = null;
			string dat = null;

			uniforms = Lang13.GetTypes( typeof(Obj_Item_Clothing_Under) );
			suits = Lang13.GetTypes( typeof(Obj_Item_Clothing_Suit) );
			gloves = Lang13.GetTypes( typeof(Obj_Item_Clothing_Gloves) );
			shoes = Lang13.GetTypes( typeof(Obj_Item_Clothing_Shoes) );
			headwear = Lang13.GetTypes( typeof(Obj_Item_Clothing_Head) );
			glasses = Lang13.GetTypes( typeof(Obj_Item_Clothing_Glasses) );
			masks = Lang13.GetTypes( typeof(Obj_Item_Clothing_Mask) );
			ids = Lang13.GetTypes( typeof(Obj_Item_Weapon_Card_Id) );
			uniform_select = "<select name=\"outfit_uniform\"><option value=\"\">None</option>";

			foreach (dynamic _a in Lang13.Enumerate( uniforms )) {
				path = _a;
				
				uniform_select += "<option value=\"" + path + "\">" + path + "</option>";
			}
			uniform_select += "</select>";
			suit_select = "<select name=\"outfit_suit\"><option value=\"\">None</option>";

			foreach (dynamic _b in Lang13.Enumerate( suits )) {
				path2 = _b;
				
				suit_select += "<option value=\"" + path2 + "\">" + path2 + "</option>";
			}
			suit_select += "</select>";
			gloves_select = "<select name=\"outfit_gloves\"><option value=\"\">None</option>";

			foreach (dynamic _c in Lang13.Enumerate( gloves )) {
				path3 = _c;
				
				gloves_select += "<option value=\"" + path3 + "\">" + path3 + "</option>";
			}
			gloves_select += "</select>";
			shoes_select = "<select name=\"outfit_shoes\"><option value=\"\">None</option>";

			foreach (dynamic _d in Lang13.Enumerate( shoes )) {
				path4 = _d;
				
				shoes_select += "<option value=\"" + path4 + "\">" + path4 + "</option>";
			}
			shoes_select += "</select>";
			head_select = "<select name=\"outfit_head\"><option value=\"\">None</option>";

			foreach (dynamic _e in Lang13.Enumerate( headwear )) {
				path5 = _e;
				
				head_select += "<option value=\"" + path5 + "\">" + path5 + "</option>";
			}
			head_select += "</select>";
			glasses_select = "<select name=\"outfit_glasses\"><option value=\"\">None</option>";

			foreach (dynamic _f in Lang13.Enumerate( glasses )) {
				path6 = _f;
				
				glasses_select += "<option value=\"" + path6 + "\">" + path6 + "</option>";
			}
			glasses_select += "</select>";
			mask_select = "<select name=\"outfit_mask\"><option value=\"\">None</option>";

			foreach (dynamic _g in Lang13.Enumerate( masks )) {
				path7 = _g;
				
				mask_select += "<option value=\"" + path7 + "\">" + path7 + "</option>";
			}
			mask_select += "</select>";
			id_select = "<select name=\"outfit_id\"><option value=\"\">None</option>";

			foreach (dynamic _h in Lang13.Enumerate( ids )) {
				path8 = _h;
				
				id_select += "<option value=\"" + path8 + "\">" + path8 + "</option>";
			}
			id_select += "</select>";
			dat = new Txt( "\n	<html><head><title>Create Outfit</title></head><body>\n	<form name=\"outfit\" action=\"byond://?src=" ).Ref( this ).str( "\" method=\"get\">\n	<input type=\"hidden\" name=\"src\" value=\"" ).Ref( this ).str( @""">
	<input type=""hidden"" name=""create_outfit"" value=""1"">
	<table>
		<tr>
			<th>Name:</th>
			<td>
				<input type=""text"" name=""outfit_name"" value=""Custom Outfit"">
			</td>
		</tr>
		<tr>
			<th>Uniform:</th>
			<td>
			   " ).item( uniform_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>Suit:</th>
			<td>
				" ).item( suit_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>Back:</th>
			<td>
				<input type=""text"" name=""outfit_back"" value="""">
			</td>
		</tr>
		<tr>
			<th>Belt:</th>
			<td>
				<input type=""text"" name=""outfit_belt"" value="""">
			</td>
		</tr>
		<tr>
			<th>Gloves:</th>
			<td>
				" ).item( gloves_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>Shoes:</th>
			<td>
				" ).item( shoes_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>Head:</th>
			<td>
				" ).item( head_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>Mask:</th>
			<td>
				" ).item( mask_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>Ears:</th>
			<td>
				<input type=""text"" name=""outfit_ears"" value="""">
			</td>
		</tr>
		<tr>
			<th>Glasses:</th>
			<td>
				" ).item( glasses_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>ID:</th>
			<td>
				" ).item( id_select ).str( @"
			</td>
		</tr>
		<tr>
			<th>Left Pocket:</th>
			<td>
				<input type=""text"" name=""outfit_l_pocket"" value="""">
			</td>
		</tr>
		<tr>
			<th>Right Pocket:</th>
			<td>
				<input type=""text"" name=""outfit_r_pocket"" value="""">
			</td>
		</tr>
		<tr>
			<th>Suit Store:</th>
			<td>
				<input type=""text"" name=""outfit_s_store"" value="""">
			</td>
		</tr>
		<tr>
			<th>Right Hand:</th>
			<td>
				<input type=""text"" name=""outfit_r_hand"" value="""">
			</td>
		</tr>
		<tr>
			<th>Left Hand:</th>
			<td>
				<input type=""text"" name=""outfit_l_hand"" value="""">
			</td>
		</tr>
	</table>
	<br>
	<input type=""submit"" value=""Save"">
	</form></body></html>
	" ).ToString();
			Interface13.Browse( Task13.User, dat, "window=dressup;size=550x600" );
			return;
		}

		// Function from file: one_click_antag.dm
		public bool makeShadowling(  ) {
			GameMode_Shadowling temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;

			temp = new GameMode_Shadowling();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				temp.restricted_jobs.Add( "Assistant" );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( applicant.client.prefs.be_special.Contains( "shadowling" ) ) {
					
					if ( !( applicant.stat != 0 ) ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !GlobalFuncs.jobban_isbanned( applicant, "shadowling" ) && !GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) {
									
									if ( temp.age_check( applicant.client ) ) {
										
										if ( !temp.restricted_jobs.Contains( applicant.job ) ) {
											
											if ( !GlobalFuncs.is_shadow_or_thrall( applicant ) ) {
												candidates.Add( applicant );
											}
										}
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				H = Rand13.PickFromTable( candidates );
				GlobalVars.ticker.mode.shadows.Add( H.mind );
				H.mind.special_role = "shadowling";
				H.WriteMsg( "<span class='shadowling'><b><i>Something stirs in the space between worlds. A red light floods your mind, and suddenly you understand. Your human disguise has served you well, but it is time you cast it away. You are a shadowling, and you are to ascend at all costs.</b></i></span>" );
				((GameMode)GlobalVars.ticker.mode).finalize_shadowling( H.mind );
				GlobalFuncs.message_admins( "" + H + " has been made into a shadowling." );
				candidates.Remove( H );
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeRevenant(  ) {
			ByTable candidates = null;
			dynamic spook_op = null;
			dynamic O = null;
			Mob_Living_SimpleAnimal_Revenant revvie = null;

			candidates = GlobalFuncs.pollCandidates( "Do you wish to be considered for becoming a revenant?", "revenant", null );

			if ( candidates.len >= 1 ) {
				spook_op = Rand13.PickFromTable( candidates );
				O = spook_op;
				candidates.Remove( spook_op );
				revvie = new Mob_Living_SimpleAnimal_Revenant( GlobalFuncs.get_turf( O ) );
				revvie.key = O.key;
				revvie.mind.assigned_role = "revenant";
				revvie.mind.special_role = "Revenant";
				return true;
			} else {
				return false;
			}
		}

		// Function from file: one_click_antag.dm
		public bool makeAbductorTeam(  ) {
			new RoundEvent_Abductor();
			return true;
		}

		// Function from file: one_click_antag.dm
		public bool makeEmergencyresponseteam(  ) {
			dynamic alert = null;
			int teamsize = 0;
			dynamic mission = null;
			ByTable candidates = null;
			int teamSpawned = 0;
			int numagents = 0;
			bool? redalert = null;
			ByTable spawnpoints = null;
			dynamic spawnloc = null;
			dynamic chosen_candidate = null;
			Mob_Living_Carbon_Human ERTOperative = null;
			ByTable lastname = null;
			dynamic ertname = null;
			Obj_Machinery_Door_Poddoor_Ert door = null;
			Objective missionobj = null;
			string missiondesc = null;

			alert = Interface13.Input( "Which team should we send?", "Select Response Level", null, null, new ByTable(new object [] { 
				"Green: Centcom Official", 
				"Blue: Light ERT (No Armoury Access)", 
				"Amber: Full ERT (Armoury Access)", 
				"Red: Elite ERT (Armoury Access + Pulse Weapons)", 
				"Delta: Deathsquad"
			 }), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( alert ) ) {
				return false;
			}

			dynamic _a = alert; // Was a switch-case, sorry for the mess.
			if ( _a=="Delta: Deathsquad" ) {
				return this.makeDeathsquad();
			} else if ( _a=="Red: Elite ERT (Armoury Access + Pulse Weapons)" ) {
				alert = "Red";
			} else if ( _a=="Amber: Full ERT (Armoury Access)" ) {
				alert = "Amber";
			} else if ( _a=="Blue: Light ERT (No Armoury Access)" ) {
				alert = "Blue";
			} else if ( _a=="Green: Centcom Official" ) {
				return this.makeOfficial();
			}
			teamsize = Num13.MinInt( 7, Convert.ToInt32( Interface13.Input( "Maximum size of team? (7 max)", "Select Team Size", 4, null, null, InputType.Num | InputType.Null ) ) );
			mission = Interface13.Input( "Assign a mission to the Emergency Response Team", "Assign Mission", "Assist the station.", null, null, InputType.Any );
			candidates = GlobalFuncs.pollCandidates( "Do you wish to be considered for a Code " + alert + " Nanotrasen Emergency Response Team?", "deathsquad", null );
			teamSpawned = 0;

			if ( candidates.len > 0 ) {
				numagents = Num13.MinInt( teamsize, candidates.len );
				redalert = null;

				if ( alert == "Red" ) {
					numagents = Num13.MinInt( teamsize, candidates.len );
					redalert = true;
				}
				spawnpoints = GlobalVars.emergencyresponseteamspawn;

				while (numagents != 0 && candidates.len != 0) {
					
					if ( numagents > spawnpoints.len ) {
						numagents--;
						continue;
					}
					spawnloc = spawnpoints[numagents];
					chosen_candidate = Rand13.PickFromTable( candidates );
					candidates.Remove( chosen_candidate );

					if ( !Lang13.Bool( chosen_candidate.key ) ) {
						continue;
					}
					ERTOperative = new Mob_Living_Carbon_Human( spawnloc );
					lastname = GlobalVars.last_names;
					chosen_candidate.client.prefs.copy_to( ERTOperative );
					ertname = Rand13.PickFromTable( lastname );

					switch ((int)( numagents )) {
						case 1:
							ERTOperative.real_name = "Commander " + ertname;
							ERTOperative.equipOutfit( ( redalert == true ? typeof(Outfit_Ert_Commander_Alert) : typeof(Outfit_Ert_Commander) ) );
							break;
						case 2:
							ERTOperative.real_name = "Security Officer " + ertname;
							ERTOperative.equipOutfit( ( redalert == true ? typeof(Outfit_Ert_Security_Alert) : typeof(Outfit_Ert_Security) ) );
							break;
						case 3:
							ERTOperative.real_name = "Medical Officer " + ertname;
							ERTOperative.equipOutfit( ( redalert == true ? typeof(Outfit_Ert_Medic_Alert) : typeof(Outfit_Ert_Medic) ) );
							break;
						case 4:
							ERTOperative.real_name = "Engineer " + ertname;
							ERTOperative.equipOutfit( ( redalert == true ? typeof(Outfit_Ert_Engineer_Alert) : typeof(Outfit_Ert_Engineer) ) );
							break;
						case 5:
							ERTOperative.real_name = "Security Officer " + ertname;
							ERTOperative.equipOutfit( ( redalert == true ? typeof(Outfit_Ert_Security_Alert) : typeof(Outfit_Ert_Security) ) );
							break;
						case 6:
							ERTOperative.real_name = "Medical Officer " + ertname;
							ERTOperative.equipOutfit( ( redalert == true ? typeof(Outfit_Ert_Medic_Alert) : typeof(Outfit_Ert_Medic) ) );
							break;
						case 7:
							ERTOperative.real_name = "Engineer " + ertname;
							ERTOperative.equipOutfit( ( redalert == true ? typeof(Outfit_Ert_Engineer_Alert) : typeof(Outfit_Ert_Engineer) ) );
							break;
					}
					ERTOperative.dna.update_dna_identity();
					ERTOperative.key = chosen_candidate.key;
					ERTOperative.mind.assigned_role = "ERT";

					if ( alert != "Blue" ) {
						
						foreach (dynamic _c in Lang13.Enumerate( GlobalVars.airlocks, typeof(Obj_Machinery_Door_Poddoor_Ert) )) {
							door = _c;
							
							Task13.Schedule( 0, (Task13.Closure)(() => {
								door.open();
								return;
							}));
						}
					}
					GlobalVars.ticker.mode.traitors.Add( ERTOperative.mind );
					ERTOperative.mind.special_role = "ERT";
					missionobj = new Objective();
					missionobj.owner = ERTOperative.mind;
					missionobj.explanation_text = mission;
					missionobj.completed = true;
					ERTOperative.mind.objectives.Add( missionobj );
					ERTOperative.WriteMsg( "<B><font size=3 color=red>You are " + ( numagents == 1 ? "the Emergency Response Team Commander" : "an Emergency Response Officer" ) + ".</font></B>" );
					missiondesc = "Your squad is being sent on a Code " + alert + " mission to " + GlobalFuncs.station_name() + " by Nanotrasen's Security Division.";

					if ( numagents == 1 ) {
						missiondesc += " Lead your squad to ensure the completion of the mission. Avoid civilian casualites when possible. Board the shuttle when your team is ready.";
					} else {
						missiondesc += " Follow orders given to you by your commander. Avoid civilian casualites when possible.";
					}
					missiondesc += "<BR><B>Your Mission</B>: " + mission;
					ERTOperative.WriteMsg( missiondesc );

					if ( GlobalVars.config.enforce_human_authority ) {
						ERTOperative.set_species( "human" );
					}

					if ( numagents == 1 ) {
						GlobalFuncs.message_admins( "A Code " + alert + " emergency response team has spawned with the mission: " + mission );
					}
					GlobalFuncs.log_game( "" + GlobalFuncs.key_name( ERTOperative ) + " has been selected as an Emergency Response Officer" );
					numagents--;
					teamSpawned++;
				}

				if ( teamSpawned != 0 ) {
					return true;
				} else {
					return false;
				}
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeOfficial(  ) {
			dynamic mission = null;
			ByTable candidates = null;
			dynamic chosen_candidate = null;
			Mob_Living_Carbon_Human newmob = null;
			Objective missionobj = null;

			mission = Interface13.Input( "Assign a task for the official", "Assign Task", "Conduct a routine preformance review of " + GlobalFuncs.station_name() + " and its Captain.", null, null, InputType.Any );
			candidates = GlobalFuncs.pollCandidates( "Do you wish to be considered to be a Centcom Official?", "deathsquad" );

			if ( candidates.len != 0 ) {
				chosen_candidate = Rand13.PickFromTable( candidates );
				newmob = new Mob_Living_Carbon_Human( Rand13.PickFromTable( GlobalVars.emergencyresponseteamspawn ) );
				chosen_candidate.client.prefs.copy_to( newmob );
				newmob.real_name = ((Species)newmob.dna.species).random_name( newmob.gender, true );
				newmob.dna.update_dna_identity();
				newmob.key = chosen_candidate.key;
				newmob.mind.assigned_role = "Centcom Official";
				newmob.equipOutfit( typeof(Outfit_CentcomOfficial) );
				GlobalVars.ticker.mode.traitors.Add( newmob.mind );
				newmob.mind.special_role = "official";
				missionobj = new Objective();
				missionobj.owner = newmob.mind;
				missionobj.explanation_text = mission;
				missionobj.completed = true;
				newmob.mind.objectives.Add( missionobj );
				newmob.WriteMsg( "<B><font size=3 color=red>You are a Centcom Official.</font></B>" );
				newmob.WriteMsg( "<BR>Central Command is sending you to " + GlobalFuncs.station_name() + " with the task: " + mission );
				GlobalFuncs.message_admins( "Centcom Official " + GlobalFuncs.key_name_admin( newmob ) + " has spawned with the task: " + mission );
				GlobalFuncs.log_game( "" + GlobalFuncs.key_name( newmob ) + " has been selected as a Centcom Official" );
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeGangsters(  ) {
			GameMode_Gang temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			int? needs_assigned = null;
			Gang newgang = null;

			temp = new GameMode_Gang();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				temp.restricted_jobs.Add( "Assistant" );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( applicant.client.prefs.be_special.Contains( "gangster" ) ) {
					
					if ( !( applicant.stat != 0 ) ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !GlobalFuncs.jobban_isbanned( applicant, "gangster" ) && !GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) {
									
									if ( temp.age_check( applicant.client ) ) {
										
										if ( !temp.restricted_jobs.Contains( applicant.job ) ) {
											candidates.Add( applicant );
										}
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len >= 2 ) {
				needs_assigned = null;
				needs_assigned = 2;

				while (( needs_assigned ??0) > 0) {
					H = Rand13.PickFromTable( candidates );

					if ( GlobalVars.gang_colors_pool.len != 0 ) {
						newgang = new Gang();
						GlobalVars.ticker.mode.gangs.Add( newgang );
						((Mind)H.mind).make_Gang( newgang );
						candidates.Remove( H );
					} else if ( needs_assigned == 2 ) {
						return false;
					}
					needs_assigned--;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeDeathsquad(  ) {
			dynamic mission = null;
			ByTable candidates = null;
			int squadSpawned = 0;
			int numagents = 0;
			ByTable spawnpoints = null;
			dynamic spawnloc = null;
			dynamic chosen_candidate = null;
			Mob_Living_Carbon_Human Commando = null;
			Obj_Machinery_Door_Poddoor_Ert door = null;
			Objective missionobj = null;
			string missiondesc = null;

			mission = Interface13.Input( "Assign a mission to the deathsquad", "Assign Mission", "Leave no witnesses.", null, null, InputType.Any );
			candidates = GlobalFuncs.pollCandidates( "Do you wish to be considered for an elite Nanotrasen Strike Team?", "deathsquad", null );
			squadSpawned = 0;

			if ( candidates.len >= 2 ) {
				numagents = Num13.MinInt( 5, candidates.len );
				spawnpoints = GlobalVars.emergencyresponseteamspawn;

				while (numagents != 0 && candidates.len != 0) {
					
					if ( numagents > spawnpoints.len ) {
						numagents--;
						continue;
					}
					spawnloc = spawnpoints[numagents];
					chosen_candidate = Rand13.PickFromTable( candidates );
					candidates.Remove( chosen_candidate );

					if ( !Lang13.Bool( chosen_candidate.key ) ) {
						continue;
					}
					Commando = new Mob_Living_Carbon_Human( spawnloc );
					chosen_candidate.client.prefs.copy_to( Commando );

					if ( numagents == 1 ) {
						Commando.real_name = "Officer " + Rand13.PickFromTable( GlobalVars.commando_names );
						Commando.equipOutfit( typeof(Outfit_DeathCommando_Officer) );
					} else {
						Commando.real_name = "Trooper " + Rand13.PickFromTable( GlobalVars.commando_names );
						Commando.equipOutfit( typeof(Outfit_DeathCommando) );
					}
					Commando.dna.update_dna_identity();
					Commando.key = chosen_candidate.key;
					Commando.mind.assigned_role = "Death Commando";

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.airlocks, typeof(Obj_Machinery_Door_Poddoor_Ert) )) {
						door = _a;
						
						Task13.Schedule( 0, (Task13.Closure)(() => {
							door.open();
							return;
						}));
					}
					GlobalVars.ticker.mode.traitors.Add( Commando.mind );
					Commando.mind.special_role = "deathsquad";
					missionobj = new Objective();
					missionobj.owner = Commando.mind;
					missionobj.explanation_text = mission;
					missionobj.completed = true;
					Commando.mind.objectives.Add( missionobj );
					Commando.WriteMsg( "<B><font size=3 color=red>You are the " + ( numagents == 1 ? "Deathsquad Officer" : "Death Commando" ) + ".</font></B>" );
					missiondesc = "Your squad is being sent on a mission to " + GlobalFuncs.station_name() + " by Nanotrasen's Security Division.";

					if ( numagents == 1 ) {
						missiondesc += " Lead your squad to ensure the completion of the mission. Board the shuttle when your team is ready.";
					} else {
						missiondesc += " Follow orders given to you by your squad leader.";
					}
					missiondesc += "<BR><B>Your Mission</B>: " + mission;
					Commando.WriteMsg( missiondesc );

					if ( GlobalVars.config.enforce_human_authority ) {
						Commando.set_species( "human" );
					}

					if ( numagents == 1 ) {
						GlobalFuncs.message_admins( "The deathsquad has spawned with the mission: " + mission + "." );
					}
					GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Commando ) + " has been selected as a Death Commando" );
					numagents--;
					squadSpawned++;
				}

				if ( squadSpawned != 0 ) {
					return true;
				} else {
					return false;
				}
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeSpaceNinja(  ) {
			new RoundEvent_Ninja();
			return true;
		}

		// Function from file: one_click_antag.dm
		public bool makeAliens(  ) {
			new RoundEvent_AlienInfestation() {
				spawncount = 3
				
			};
			return true;
		}

		// Function from file: one_click_antag.dm
		public bool makeNukeTeam(  ) {
			GameMode_Nuclear temp = null;
			ByTable candidates = null;
			ByTable chosen = null;
			dynamic theghost = null;
			int? numagents = null;
			int agentcount = 0;
			int? i = null;
			dynamic j = null;
			string nuke_code = null;
			dynamic nuke = null;
			ByTable synd_spawn = null;
			Obj_Effect_Landmark A = null;
			bool? leader_chosen = null;
			int spawnpos = 0;
			dynamic c = null;
			Mob_Living_Carbon_Human new_character = null;

			temp = new GameMode_Nuclear();
			candidates = GlobalFuncs.pollCandidates( "Do you wish to be considered for a nuke team being sent in?", "operative", temp );
			chosen = new ByTable();
			theghost = null;

			if ( candidates.len != 0 ) {
				numagents = 5;
				agentcount = 0;
				i = null;
				i = 0;

				while (( i ??0) < ( numagents ??0)) {
					GlobalFuncs.shuffle( candidates );

					foreach (dynamic _a in Lang13.Enumerate( candidates )) {
						j = _a;
						

						if ( !Lang13.Bool( j ) || !Lang13.Bool( j.client ) ) {
							candidates.Remove( j );
							continue;
						}
						theghost = j;
						candidates.Remove( theghost );
						chosen.Add( theghost );
						agentcount++;
						break;
					}
					i++;
				}

				if ( agentcount < 3 ) {
					return false;
				}
				nuke_code = "" + Rand13.Int( 10000, 99999 );
				nuke = Lang13.FindIn( "syndienuke", GlobalVars.nuke_list );

				if ( Lang13.Bool( nuke ) ) {
					nuke.r_code = nuke_code;
				}
				synd_spawn = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					A = _b;
					

					if ( A.name == "Syndicate-Spawn" ) {
						synd_spawn.Add( GlobalFuncs.get_turf( A ) );
						continue;
					}
				}
				leader_chosen = null;
				spawnpos = 1;

				foreach (dynamic _c in Lang13.Enumerate( chosen )) {
					c = _c;
					

					if ( spawnpos > synd_spawn.len ) {
						spawnpos = 2;
					}
					new_character = GlobalFuncs.makeBody( c );

					if ( !( leader_chosen == true ) ) {
						leader_chosen = true;
						new_character.mind.make_Nuke( synd_spawn[spawnpos], nuke_code, true );
					} else {
						new_character.mind.make_Nuke( synd_spawn[spawnpos], nuke_code );
					}
					spawnpos++;
				}
				return true;
			} else {
				return false;
			}
		}

		// Function from file: one_click_antag.dm
		public bool makeCult(  ) {
			GameMode_Cult temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			int? numCultists = null;
			int? i = null;

			temp = new GameMode_Cult();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				temp.restricted_jobs.Add( "Assistant" );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( applicant.client.prefs.be_special.Contains( "cultist" ) ) {
					
					if ( applicant.stat == 0 ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !GlobalFuncs.jobban_isbanned( applicant, "cultist" ) && !GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) {
									
									if ( temp.age_check( applicant.client ) ) {
										
										if ( !temp.restricted_jobs.Contains( applicant.job ) ) {
											candidates.Add( applicant );
										}
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				numCultists = Num13.MinInt( candidates.len, 5 );
				i = null;
				i = 0;

				while (( i ??0) < ( numCultists ??0)) {
					H = Rand13.PickFromTable( candidates );
					((Mind)H.mind).make_Cultist();
					candidates.Remove( H );
					i++;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeWizard(  ) {
			GameMode_Wizard temp = null;
			ByTable candidates = null;
			dynamic theghost = null;
			int time_passed = 0;
			Mob_Dead_Observer G = null;
			dynamic i = null;
			Mob_Living_Carbon_Human new_character = null;

			temp = new GameMode_Wizard();
			candidates = new ByTable();
			theghost = null;
			time_passed = Game13.time;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
				G = _b;
				

				if ( !GlobalFuncs.jobban_isbanned( G, "wizard" ) && !GlobalFuncs.jobban_isbanned( G, "Syndicate" ) ) {
					
					if ( temp.age_check( G.client ) ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							switch ((string)( Interface13.Alert( G, "Do you wish to be considered for the position of Space Wizard Foundation 'diplomat'?", "Please answer in 30 seconds!", "Yes", "No" ) )) {
								case "Yes":
									
									if ( Game13.time - time_passed > 300 ) {
										return;
									}
									candidates.Add( G );
									break;
								case "No":
									return;
									break;
								default:
									return;
									break;
							}
							return;
						}));
					}
				}
			}
			Task13.Sleep( 300 );

			if ( candidates.len != 0 ) {
				GlobalFuncs.shuffle( candidates );

				foreach (dynamic _c in Lang13.Enumerate( candidates )) {
					i = _c;
					

					if ( !Lang13.Bool( i ) || !Lang13.Bool( i.client ) ) {
						continue;
					}
					theghost = i;
					break;
				}
			}

			if ( Lang13.Bool( theghost ) ) {
				new_character = GlobalFuncs.makeBody( theghost );
				new_character.mind.make_Wizard();
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeRevs(  ) {
			GameMode_Revolution temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			dynamic T = null;
			int? numRevs = null;
			int? i = null;

			temp = new GameMode_Revolution();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				temp.restricted_jobs.Add( "Assistant" );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( applicant.client.prefs.be_special.Contains( "revolutionary" ) ) {
					
					if ( applicant.stat == 0 ) {
						T = GlobalFuncs.get_turf( applicant );

						if ( Lang13.Bool( T.z ) == true ) {
							
							if ( applicant.mind != null ) {
								
								if ( !Lang13.Bool( applicant.mind.special_role ) ) {
									
									if ( !GlobalFuncs.jobban_isbanned( applicant, "revolutionary" ) && !GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) {
										
										if ( temp.age_check( applicant.client ) ) {
											
											if ( !temp.restricted_jobs.Contains( applicant.job ) ) {
												candidates.Add( applicant );
											}
										}
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				numRevs = Num13.MinInt( candidates.len, 3 );
				i = null;
				i = 0;

				while (( i ??0) < ( numRevs ??0)) {
					H = Rand13.PickFromTable( candidates );
					((Mind)H.mind).make_Rev();
					candidates.Remove( H );
					i++;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeChanglings(  ) {
			GameMode_Changeling temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			int? numChanglings = null;
			int? i = null;

			temp = new GameMode_Changeling();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				temp.restricted_jobs.Add( "Assistant" );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( applicant.client.prefs.be_special.Contains( "changeling" ) ) {
					
					if ( !( applicant.stat != 0 ) ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !GlobalFuncs.jobban_isbanned( applicant, "changeling" ) && !GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) {
									
									if ( temp.age_check( applicant.client ) ) {
										
										if ( !temp.restricted_jobs.Contains( applicant.job ) ) {
											candidates.Add( applicant );
										}
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				numChanglings = Num13.MinInt( candidates.len, 3 );
				i = null;
				i = 0;

				while (( i ??0) < ( numChanglings ??0)) {
					H = Rand13.PickFromTable( candidates );
					((Mind)H.mind).make_Changling();
					candidates.Remove( H );
					i++;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeTraitors(  ) {
			GameMode_Traitor temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			int? numTraitors = null;
			int? i = null;

			temp = new GameMode_Traitor();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				temp.restricted_jobs.Add( "Assistant" );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( applicant.client.prefs.be_special.Contains( "traitor" ) ) {
					
					if ( !( applicant.stat != 0 ) ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !GlobalFuncs.jobban_isbanned( applicant, "traitor" ) && !GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) {
									
									if ( temp.age_check( applicant.client ) ) {
										
										if ( !temp.restricted_jobs.Contains( applicant.job ) ) {
											candidates.Add( applicant );
										}
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				numTraitors = Num13.MinInt( candidates.len, 3 );
				i = null;
				i = 0;

				while (( i ??0) < ( numTraitors ??0)) {
					H = Rand13.PickFromTable( candidates );
					((Mind)H.mind).make_Traitor();
					candidates.Remove( H );
					i++;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public void one_click_antag(  ) {
			string dat = null;
			Browser popup = null;

			dat = new Txt( "\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=1'>Make Traitors</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=2'>Make Changelings</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=3'>Make Revs</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=4'>Make Cult</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=11'>Make Blob</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=12'>Make Gangsters</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=16'>Make Shadowling</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=6'>Make Wizard (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=7'>Make Nuke Team (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=13'>Make Centcom Response Team (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=14'>Make Abductor Team (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=15'>Make Revenant (Requires Ghost)</a><br>\n		" ).ToString();
			popup = new Browser( Task13.User, "oneclickantag", "Quick-Create Antagonist", 400, 400 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: getlogs.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Server Attack Log", desc: "Shows today's server attack log.", group: "Admin" )]
		public void view_atk_log(  ) {
			
			if ( File13.Exists( "" + GlobalVars.diaryofmeanpeople ) ) {
				Interface13.SendFile( this, GlobalVars.diaryofmeanpeople, null );
			} else {
				((dynamic)this).WriteMsg( "<font color='red'>Server attack log not found, try using .getserverlog.</font>" );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SSAL" );
			return;
		}

		// Function from file: getlogs.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Server Log", desc: "Shows today's server log.", group: "Admin" )]
		public void view_txt_log(  ) {
			
			if ( File13.Exists( "" + GlobalVars.diary ) ) {
				Interface13.SendFile( this, GlobalVars.diary, null );
			} else {
				((dynamic)this).WriteMsg( "<font color='red'>Server log not found, try using .getserverlog.</font>" );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "VTL" );
			return;
		}

		// Function from file: permissionedit.dm
		public void log_admin_permission_modification( string adm_ckey = null, dynamic new_permission = null ) {
			DBQuery select_query = null;
			double? admin_id = null;
			DBQuery insert_query = null;
			DBQuery log_query = null;

			
			if ( GlobalVars.config.admin_legacy_system ) {
				return;
			}

			if ( !( Task13.User.client != null ) ) {
				return;
			}

			if ( GlobalFuncs.check_rights( 128 ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				Task13.User.WriteMsg( "<span class='danger'>Failed to establish database connection.</span>" );
				return;
			}

			if ( !Lang13.Bool( adm_ckey ) || !( adm_ckey is string ) || !Lang13.Bool( Lang13.IsNumber( new_permission ) ) ) {
				return;
			}
			select_query = GlobalVars.dbcon.NewQuery( "SELECT id, flags FROM " + GlobalFuncs.format_table_name( "admin" ) + " WHERE ckey = '" + adm_ckey + "'" );
			select_query.Execute();

			while (select_query.NextRow()) {
				admin_id = String13.ParseNumber( select_query.item[1] );
			}

			if ( !Lang13.Bool( admin_id ) ) {
				return;
			}
			insert_query = GlobalVars.dbcon.NewQuery( "UPDATE `" + GlobalFuncs.format_table_name( "admin" ) + "` SET flags = " + new_permission + " WHERE id = " + admin_id );
			insert_query.Execute();
			log_query = GlobalVars.dbcon.NewQuery( "INSERT INTO `" + GlobalFuncs.format_table_name( "admin_log" ) + "` (`id` ,`datetime` ,`adminckey` ,`adminip` ,`log` ) VALUES (NULL , NOW( ) , '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', 'Edit permission " + GlobalFuncs.rights2text( new_permission ) + " (flag = " + new_permission + ") to admin " + adm_ckey + "');" );
			log_query.Execute();
			return;
		}

		// Function from file: permissionedit.dm
		public void log_admin_rank_modification( string adm_ckey = null, dynamic new_rank = null ) {
			DBQuery select_query = null;
			bool new_admin = false;
			double? admin_id = null;
			DBQuery insert_query = null;
			DBQuery log_query = null;
			DBQuery insert_query2 = null;
			DBQuery log_query2 = null;

			
			if ( GlobalVars.config.admin_legacy_system ) {
				return;
			}

			if ( !( Task13.User.client != null ) ) {
				return;
			}

			if ( !GlobalFuncs.check_rights( 128 ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				Task13.User.WriteMsg( "<span class='danger'>Failed to establish database connection.</span>" );
				return;
			}

			if ( !Lang13.Bool( adm_ckey ) || !Lang13.Bool( new_rank ) ) {
				return;
			}
			adm_ckey = String13.CKey( adm_ckey );

			if ( !Lang13.Bool( adm_ckey ) ) {
				return;
			}

			if ( !( adm_ckey is string ) || !( new_rank is string ) ) {
				return;
			}
			select_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "admin" ) + " WHERE ckey = '" + adm_ckey + "'" );
			select_query.Execute();
			new_admin = true;

			while (select_query.NextRow()) {
				new_admin = false;
				admin_id = String13.ParseNumber( select_query.item[1] );
			}

			if ( new_admin ) {
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO `" + GlobalFuncs.format_table_name( "admin" ) + "` (`id`, `ckey`, `rank`, `level`, `flags`) VALUES (null, '" + adm_ckey + "', '" + new_rank + "', -1, 0)" );
				insert_query.Execute();
				log_query = GlobalVars.dbcon.NewQuery( "INSERT INTO `" + GlobalFuncs.format_table_name( "admin_log" ) + "` (`id` ,`datetime` ,`adminckey` ,`adminip` ,`log` ) VALUES (NULL , NOW( ) , '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', 'Added new admin " + adm_ckey + " to rank " + new_rank + "');" );
				log_query.Execute();
				Task13.User.WriteMsg( "<span class='adminnotice'>New admin added.</span>" );
			} else if ( !( admin_id == null ) && Lang13.Bool( Lang13.IsNumber( admin_id ) ) ) {
				insert_query2 = GlobalVars.dbcon.NewQuery( "UPDATE `" + GlobalFuncs.format_table_name( "admin" ) + "` SET rank = '" + new_rank + "' WHERE id = " + admin_id );
				insert_query2.Execute();
				log_query2 = GlobalVars.dbcon.NewQuery( "INSERT INTO `" + GlobalFuncs.format_table_name( "admin_log" ) + "` (`id` ,`datetime` ,`adminckey` ,`adminip` ,`log` ) VALUES (NULL , NOW( ) , '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', 'Edited the rank of " + adm_ckey + " to " + new_rank + "');" );
				log_query2.Execute();
				Task13.User.WriteMsg( "<span class='adminnnotice'>Admin rank changed.</span>" );
			}
			return;
		}

		// Function from file: permissionedit.dm
		public void edit_admin_permissions(  ) {
			string output = null;
			dynamic adm_ckey = null;
			dynamic D = null;
			string rights = null;

			
			if ( !GlobalFuncs.check_rights( 128 ) ) {
				return;
			}
			output = new Txt( @"<!DOCTYPE html>
<html>
<head>
<title>Permissions Panel</title>
<script type='text/javascript' src='search.js'></script>
<link rel='stylesheet' type='text/css' href='panels.css'>
</head>
<body onload='selectTextField();updateSearch();'>
<div id='main'><table id='searchable' cellspacing='0'>
<tr class='title'>
<th style='width:125px;text-align:right;'>CKEY <a class='small' href='?src=" ).Ref( this ).str( @";editrights=add'>[+]</a></th>
<th style='width:125px;'>RANK</th>
<th style='width:375px;'>PERMISSIONS</th>
<th style='width:100%;'>VERB-OVERRIDES</th>
</tr>
" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admin_datums )) {
				adm_ckey = _a;
				
				D = GlobalVars.admin_datums[adm_ckey];

				if ( !Lang13.Bool( D ) ) {
					continue;
				}
				rights = GlobalFuncs.rights2text( D.rank.rights, " " );

				if ( !Lang13.Bool( rights ) ) {
					rights = "*none*";
				}
				output += "<tr>";
				output += new Txt( "<td style='text-align:right;'>" ).item( adm_ckey ).str( " <a class='small' href='?src=" ).Ref( this ).str( ";editrights=remove;ckey=" ).item( adm_ckey ).str( "'>[-]</a></td>" ).ToString();
				output += new Txt( "<td><a href='?src=" ).Ref( this ).str( ";editrights=rank;ckey=" ).item( adm_ckey ).str( "'>" ).item( D.rank.name ).str( "</a></td>" ).ToString();
				output += new Txt( "<td><a class='small' href='?src=" ).Ref( this ).str( ";editrights=permissions;ckey=" ).item( adm_ckey ).str( "'>" ).item( rights ).str( "</a></td>" ).ToString();
				output += new Txt( "<td><a class='small' href='?src=" ).Ref( this ).str( ";editrights=permissions;ckey=" ).item( adm_ckey ).str( "'>" ).item( GlobalFuncs.rights2text( 0, " ", D.rank.adds, D.rank.subs ) ).str( "</a></td>" ).ToString();
				output += "</tr>";
			}
			output += @"
</table></div>
<div id='top'><b>Search:</b> <input type='text' id='filter' value='' style='width:70%;' onkeyup='updateSearch();'></div>
</body>
</html>";
			Interface13.Browse( Task13.User, output, "window=editrights;size=900x650" );
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_panel( string playerckey = null, string adminckey = null ) {
			string output = null;
			dynamic j = null;
			dynamic j2 = null;
			dynamic j3 = null;
			string blcolor = null;
			string bdcolor = null;
			string ulcolor = null;
			string udcolor = null;
			string adminsearch = null;
			string playersearch = null;
			DBQuery select_query = null;
			dynamic banid = null;
			dynamic bantime = null;
			dynamic bantype = null;
			dynamic reason = null;
			dynamic job = null;
			dynamic duration = null;
			dynamic expiration = null;
			dynamic ckey = null;
			dynamic ackey = null;
			dynamic unbanned = null;
			dynamic unbanckey = null;
			dynamic unbantime = null;
			dynamic edits = null;
			string lcolor = null;
			string dcolor = null;
			string typedesc = null;

			
			if ( !( Task13.User.client != null ) ) {
				return;
			}

			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				Task13.User.WriteMsg( "<span class='danger'>Failed to establish database connection.</span>" );
				return;
			}
			output = "<div align='center'><table width='90%'><tr>";
			output += "<td width='35%' align='center'>";
			output += "<h1>Banning panel</h1>";
			output += "</td>";
			output += "<td width='65%' align='center' bgcolor='#f9f9f9'>";
			output += new Txt( "<form method='GET' action='?src=" ).Ref( this ).str( "'><b>Add custom ban:</b> (ONLY use this if you can't ban through any other method)" ).ToString();
			output += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
			output += "<table width='100%'><tr>";
			output += "<td><b>Ban type:</b><select name='dbbanaddtype'>";
			output += "<option value=''>--</option>";
			output += "<option value='" + 1 + "'>PERMABAN</option>";
			output += "<option value='" + 2 + "'>TEMPBAN</option>";
			output += "<option value='" + 3 + "'>JOB PERMABAN</option>";
			output += "<option value='" + 4 + "'>JOB TEMPBAN</option>";
			output += "<option value='" + 6 + "'>IDENTITY BAN</option>";
			output += "<option value='" + 7 + "'>ADMIN PERMABAN</option>";
			output += "<option value='" + 8 + "'>ADMIN TEMPBAN</option>";
			output += "</select></td>";
			output += "<td><b>Ckey:</b> <input type='text' name='dbbanaddckey'></td></tr>";
			output += "<tr><td><b>IP:</b> <input type='text' name='dbbanaddip'></td>";
			output += "<td><b>Computer id:</b> <input type='text' name='dbbanaddcid'></td></tr>";
			output += "<tr><td><b>Duration:</b> <input type='text' name='dbbaddduration'></td>";
			output += "<td><b>Job:</b><select name='dbbanaddjob'>";
			output += "<option value=''>--</option>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_all_jobs() )) {
				j = _a;
				
				output += "<option value='" + j + "'>" + j + "</option>";
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.nonhuman_positions )) {
				j2 = _b;
				
				output += "<option value='" + j2 + "'>" + j2 + "</option>";
			}

			foreach (dynamic _c in Lang13.Enumerate( new ByTable(new object [] { "traitor", "changeling", "operative", "revolutionary", "gangster", "cultist", "wizard" }) )) {
				j3 = _c;
				
				output += "<option value='" + j3 + "'>" + j3 + "</option>";
			}
			output += "</select></td></tr></table>";
			output += "<b>Reason:<br></b><textarea name='dbbanreason' cols='50'></textarea><br>";
			output += "<input type='submit' value='Add ban'>";
			output += "</form>";
			output += "</td>";
			output += "</tr>";
			output += "</table>";
			output += new Txt( "<form method='GET' action='?src=" ).Ref( this ).str( "'><b>Search:</b> " ).ToString();
			output += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
			output += "<b>Ckey:</b> <input type='text' name='dbsearchckey' value='" + playerckey + "'>";
			output += "<b>Admin ckey:</b> <input type='text' name='dbsearchadmin' value='" + adminckey + "'>";
			output += "<input type='submit' value='search'>";
			output += "</form>";
			output += "Please note that all jobban bans or unbans are in-effect the following round.";

			if ( Lang13.Bool( adminckey ) || Lang13.Bool( playerckey ) ) {
				blcolor = "#ffeeee";
				bdcolor = "#ffdddd";
				ulcolor = "#eeffee";
				udcolor = "#ddffdd";
				output += "<table width='90%' bgcolor='#e3e3e3' cellpadding='5' cellspacing='0' align='center'>";
				output += "<tr>";
				output += "<th width='25%'><b>TYPE</b></th>";
				output += "<th width='20%'><b>CKEY</b></th>";
				output += "<th width='20%'><b>TIME APPLIED</b></th>";
				output += "<th width='20%'><b>ADMIN</b></th>";
				output += "<th width='15%'><b>OPTIONS</b></th>";
				output += "</tr>";
				adminckey = String13.CKey( adminckey );
				playerckey = String13.CKey( playerckey );
				adminsearch = "";
				playersearch = "";

				if ( Lang13.Bool( adminckey ) ) {
					adminsearch = "AND a_ckey = '" + adminckey + "' ";
				}

				if ( Lang13.Bool( playerckey ) ) {
					playersearch = "AND ckey = '" + playerckey + "' ";
				}
				select_query = GlobalVars.dbcon.NewQuery( "SELECT id, bantime, bantype, reason, job, duration, expiration_time, ckey, a_ckey, unbanned, unbanned_ckey, unbanned_datetime, edits FROM " + GlobalFuncs.format_table_name( "ban" ) + " WHERE 1 " + playersearch + " " + adminsearch + " ORDER BY bantime DESC" );
				select_query.Execute();

				while (select_query.NextRow()) {
					banid = select_query.item[1];
					bantime = select_query.item[2];
					bantype = select_query.item[3];
					reason = select_query.item[4];
					job = select_query.item[5];
					duration = select_query.item[6];
					expiration = select_query.item[7];
					ckey = select_query.item[8];
					ackey = select_query.item[9];
					unbanned = select_query.item[10];
					unbanckey = select_query.item[11];
					unbantime = select_query.item[12];
					edits = select_query.item[13];
					lcolor = blcolor;
					dcolor = bdcolor;

					if ( Lang13.Bool( unbanned ) ) {
						lcolor = ulcolor;
						dcolor = udcolor;
					}
					typedesc = "";

					dynamic _d = bantype; // Was a switch-case, sorry for the mess.
					if ( _d=="PERMABAN" ) {
						typedesc = "<font color='red'><b>PERMABAN</b></font>";
					} else if ( _d=="TEMPBAN" ) {
						typedesc = "<b>TEMPBAN</b><br><font size='2'>(" + duration + " minutes " + ( Lang13.Bool( unbanned ) ? "" : new Txt( "(<a href=\"byond://?src=" ).Ref( this ).str( ";dbbanedit=duration;dbbanid=" ).item( banid ).str( "\">Edit</a>))" ).ToString() ) + "<br>Expires " + expiration + "</font>";
					} else if ( _d=="JOB_PERMABAN" ) {
						typedesc = "<b>JOBBAN</b><br><font size='2'>(" + job + ")";
					} else if ( _d=="JOB_TEMPBAN" ) {
						typedesc = "<b>TEMP JOBBAN</b><br><font size='2'>(" + job + ")<br>(" + duration + " minutes<br>Expires " + expiration;
					} else if ( _d=="APPEARANCE_PERMABAN" ) {
						typedesc = "<b>IDENTITY PERMABAN</b>";
					} else if ( _d=="ADMIN_PERMABAN" ) {
						typedesc = "<b>ADMIN PERMABAN</b>";
					} else if ( _d=="ADMIN_TEMPBAN" ) {
						typedesc = "<b>ADMIN TEMPBAN</b><br><font size='2'>(" + duration + " minutes " + ( Lang13.Bool( unbanned ) ? "" : new Txt( "(<a href=\"byond://?src=" ).Ref( this ).str( ";dbbanedit=duration;dbbanid=" ).item( banid ).str( "\">Edit</a>))" ).ToString() ) + "<br>Expires " + expiration + "</font>";
					}
					output += "<tr bgcolor='" + dcolor + "'>";
					output += "<td align='center'>" + typedesc + "</td>";
					output += "<td align='center'><b>" + ckey + "</b></td>";
					output += "<td align='center'>" + bantime + "</td>";
					output += "<td align='center'><b>" + ackey + "</b></td>";
					output += "<td align='center'>" + ( Lang13.Bool( unbanned ) ? "" : new Txt( "<b><a href=\"byond://?src=" ).Ref( this ).str( ";dbbanedit=unban;dbbanid=" ).item( banid ).str( "\">Unban</a></b>" ).ToString() ) + "</td>";
					output += "</tr>";
					output += "<tr bgcolor='" + lcolor + "'>";
					output += "<td align='center' colspan='5'><b>Reason: " + ( Lang13.Bool( unbanned ) ? "" : new Txt( "(<a href=\"byond://?src=" ).Ref( this ).str( ";dbbanedit=reason;dbbanid=" ).item( banid ).str( "\">Edit</a>)" ).ToString() ) + "</b> <cite>\"" + reason + "\"</cite></td>";
					output += "</tr>";

					if ( Lang13.Bool( edits ) ) {
						output += "<tr bgcolor='" + dcolor + "'>";
						output += "<td align='center' colspan='5'><b>EDITS</b></td>";
						output += "</tr>";
						output += "<tr bgcolor='" + lcolor + "'>";
						output += "<td align='center' colspan='5'><font size='2'>" + edits + "</font></td>";
						output += "</tr>";
					}

					if ( Lang13.Bool( unbanned ) ) {
						output += "<tr bgcolor='" + dcolor + "'>";
						output += "<td align='center' colspan='5' bgcolor=''><b>UNBANNED by admin " + unbanckey + " on " + unbantime + "</b></td>";
						output += "</tr>";
					}
					output += "<tr>";
					output += "<td colspan='5' bgcolor='white'>&nbsp</td>";
					output += "</tr>";
				}
				output += "</table></div>";
			}
			Interface13.Browse( Task13.User, output, "window=lookupbans;size=900x500" );
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_unban_by_id( dynamic id = null ) {
			string sql = null;
			int ban_number = 0;
			dynamic pckey = null;
			DBQuery query = null;
			string unban_ckey = null;
			string unban_computerid = null;
			string unban_ip = null;
			string sql_update = null;
			DBQuery query_update = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			sql = "SELECT ckey FROM " + GlobalFuncs.format_table_name( "ban" ) + " WHERE id = " + id;
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			ban_number = 0;
			query = GlobalVars.dbcon.NewQuery( sql );
			query.Execute();

			while (query.NextRow()) {
				pckey = query.item[1];
				ban_number++;
			}

			if ( ban_number == 0 ) {
				Task13.User.WriteMsg( "<span class='danger'>Database update failed due to a ban id not being present in the database.</span>" );
				return;
			}

			if ( ban_number > 1 ) {
				Task13.User.WriteMsg( "<span class='danger'>Database update failed due to multiple bans having the same ID. Contact the database admin.</span>" );
				return;
			}

			if ( !( this.owner != null ) || !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( this.owner ) ) ) {
				return;
			}
			unban_ckey = this.owner.ckey;
			unban_computerid = this.owner.computer_id;
			unban_ip = this.owner.address;
			sql_update = "UPDATE " + GlobalFuncs.format_table_name( "ban" ) + " SET unbanned = 1, unbanned_datetime = Now(), unbanned_ckey = '" + unban_ckey + "', unbanned_computerid = '" + unban_computerid + "', unbanned_ip = '" + unban_ip + "' WHERE id = " + id;
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has lifted " + pckey + "'s ban." );
			query_update = GlobalVars.dbcon.NewQuery( sql_update );
			query_update.Execute();
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_edit( double? banid = null, dynamic param = null ) {
			DBQuery query = null;
			string eckey = null;
			dynamic pckey = null;
			dynamic duration = null;
			string reason = null;
			dynamic value = null;
			DBQuery update_query = null;
			DBQuery update_query2 = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( banid ) ) || !( param is string ) ) {
				Task13.User.WriteMsg( "Cancelled" );
				return;
			}
			query = GlobalVars.dbcon.NewQuery( "SELECT ckey, duration, reason FROM " + GlobalFuncs.format_table_name( "ban" ) + " WHERE id = " + banid );
			query.Execute();
			eckey = Task13.User.ckey;

			if ( query.NextRow() ) {
				pckey = query.item[1];
				duration = query.item[2];
				reason = query.item[3];
			} else {
				Task13.User.WriteMsg( "Invalid ban id. Contact the database admin" );
				return;
			}
			reason = GlobalFuncs.sanitizeSQL( reason );

			dynamic _a = param; // Was a switch-case, sorry for the mess.
			if ( _a=="reason" ) {
				
				if ( !Lang13.Bool( value ) ) {
					value = Interface13.Input( "Insert the new reason for " + pckey + "'s ban", "New Reason", "" + reason, null, null, InputType.Str | InputType.Null );
					value = GlobalFuncs.sanitizeSQL( value );

					if ( !Lang13.Bool( value ) ) {
						Task13.User.WriteMsg( "Cancelled" );
						return;
					}
				}
				update_query = GlobalVars.dbcon.NewQuery( "UPDATE " + GlobalFuncs.format_table_name( "ban" ) + " SET reason = '" + value + "', edits = CONCAT(edits,'- " + eckey + " changed ban reason from <cite><b>\\\"" + reason + "\\\"</b></cite> to <cite><b>\\\"" + value + "\\\"</b></cite><BR>') WHERE id = " + banid );
				update_query.Execute();
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has edited a ban for " + pckey + "'s reason from " + reason + " to " + value );
			} else if ( _a=="duration" ) {
				
				if ( !Lang13.Bool( value ) ) {
					value = Interface13.Input( "Insert the new duration (in minutes) for " + pckey + "'s ban", "New Duration", "" + duration, null, null, InputType.Num | InputType.Null );

					if ( !Lang13.Bool( Lang13.IsNumber( value ) ) || !Lang13.Bool( value ) ) {
						Task13.User.WriteMsg( "Cancelled" );
						return;
					}
				}
				update_query2 = GlobalVars.dbcon.NewQuery( "UPDATE " + GlobalFuncs.format_table_name( "ban" ) + " SET duration = " + value + ", edits = CONCAT(edits,'- " + eckey + " changed ban duration from " + duration + " to " + value + "<br>'), expiration_time = DATE_ADD(bantime, INTERVAL " + value + " MINUTE) WHERE id = " + banid );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has edited a ban for " + pckey + "'s duration from " + duration + " to " + value );
				update_query2.Execute();
			} else if ( _a=="unban" ) {
				
				if ( Interface13.Alert( "Unban " + pckey + "?", "Unban?", "Yes", "No" ) == "Yes" ) {
					this.DB_ban_unban_by_id( banid );
					return;
				} else {
					Task13.User.WriteMsg( "Cancelled" );
					return;
				}
			} else {
				Task13.User.WriteMsg( "Cancelled" );
				return;
			}
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_unban( string ckey = null, int bantype = 0, dynamic job = null ) {
			job = job ?? "";

			string bantype_str = null;
			bool bantype_pass = false;
			string bantype_sql = null;
			string sql = null;
			dynamic ban_id = null;
			int ban_number = 0;
			DBQuery query = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}

			if ( bantype != 0 ) {
				bantype_pass = false;

				switch ((int)( bantype )) {
					case 1:
						bantype_str = "PERMABAN";
						bantype_pass = true;
						break;
					case 2:
						bantype_str = "TEMPBAN";
						bantype_pass = true;
						break;
					case 3:
						bantype_str = "JOB_PERMABAN";
						bantype_pass = true;
						break;
					case 4:
						bantype_str = "JOB_TEMPBAN";
						bantype_pass = true;
						break;
					case 6:
						bantype_str = "APPEARANCE_PERMABAN";
						bantype_pass = true;
						break;
					case 7:
						bantype_str = "ADMIN_PERMABAN";
						bantype_pass = true;
						break;
					case 8:
						bantype_str = "ADMIN_TEMPBAN";
						bantype_pass = true;
						break;
					case 5:
						bantype_str = "ANY";
						bantype_pass = true;
						break;
					case 9:
						bantype_str = "ANYJOB";
						bantype_pass = true;
						break;
				}

				if ( !bantype_pass ) {
					return;
				}
			}
			bantype_sql = null;

			if ( bantype_str == "ANY" ) {
				bantype_sql = "(bantype = 'PERMABAN' OR (bantype = 'TEMPBAN' AND expiration_time > Now() ) )";
			} else if ( bantype_str == "ANYJOB" ) {
				bantype_sql = "(bantype = 'JOB_PERMABAN' OR (bantype = 'JOB_TEMPBAN' AND expiration_time > Now() ) )";
			} else {
				bantype_sql = "bantype = '" + bantype_str + "'";
			}
			sql = "SELECT id FROM " + GlobalFuncs.format_table_name( "ban" ) + " WHERE ckey = '" + ckey + "' AND " + bantype_sql + " AND (unbanned is null OR unbanned = false)";

			if ( Lang13.Bool( job ) ) {
				sql += " AND job = '" + job + "'";
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			ban_id = null;
			ban_number = 0;
			query = GlobalVars.dbcon.NewQuery( sql );
			query.Execute();

			while (query.NextRow()) {
				ban_id = query.item[1];
				ban_number++;
			}

			if ( ban_number == 0 ) {
				Task13.User.WriteMsg( "<span class='danger'>Database update failed due to no bans fitting the search criteria. If this is not a legacy ban you should contact the database admin.</span>" );
				return;
			}

			if ( ban_number > 1 ) {
				Task13.User.WriteMsg( "<span class='danger'>Database update failed due to multiple bans fitting the search criteria. Note down the ckey, job and current time and contact the database admin.</span>" );
				return;
			}

			if ( ban_id is string ) {
				ban_id = String13.ParseNumber( ban_id );
			}

			if ( !Lang13.Bool( Lang13.IsNumber( ban_id ) ) ) {
				Task13.User.WriteMsg( "<span class='danger'>Database update failed due to a ban ID mismatch. Contact the database admin.</span>" );
				return;
			}
			this.DB_ban_unban_by_id( ban_id );
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_record( double? bantype = null, dynamic banned_mob = null, dynamic duration = null, dynamic reason = null, dynamic job = null, bool? rounds = null, string banckey = null, dynamic banip = null, dynamic bancid = null ) {
			duration = duration ?? -1;
			job = job ?? "";
			rounds = rounds ?? false;

			string serverip = null;
			bool bantype_pass = false;
			string bantype_str = null;
			bool maxadminbancheck = false;
			bool announceinirc = false;
			bool blockselfban = false;
			bool kickbannedckey = false;
			string ckey = null;
			dynamic computerid = null;
			string ip = null;
			DBQuery query = null;
			bool validckey = false;
			string a_ckey = null;
			string a_computerid = null;
			string a_ip = null;
			string who = null;
			dynamic C = null;
			string adminwho = null;
			dynamic C2 = null;
			DBQuery adm_query = null;
			double? adm_bans = null;
			string sql = null;
			DBQuery query_insert = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			serverip = "" + Game13.internet_address + ":" + Game13.port;
			bantype_pass = false;

			switch ((int?)( bantype )) {
				case 1:
					bantype_str = "PERMABAN";
					duration = -1;
					bantype_pass = true;
					blockselfban = true;
					break;
				case 2:
					bantype_str = "TEMPBAN";
					bantype_pass = true;
					blockselfban = true;
					break;
				case 3:
					bantype_str = "JOB_PERMABAN";
					duration = -1;
					bantype_pass = true;
					break;
				case 4:
					bantype_str = "JOB_TEMPBAN";
					bantype_pass = true;
					break;
				case 6:
					bantype_str = "APPEARANCE_PERMABAN";
					duration = -1;
					bantype_pass = true;
					break;
				case 7:
					bantype_str = "ADMIN_PERMABAN";
					duration = -1;
					bantype_pass = true;
					maxadminbancheck = true;
					announceinirc = true;
					blockselfban = true;
					kickbannedckey = true;
					break;
				case 8:
					bantype_str = "ADMIN_TEMPBAN";
					bantype_pass = true;
					maxadminbancheck = true;
					announceinirc = true;
					blockselfban = true;
					kickbannedckey = true;
					break;
			}

			if ( !bantype_pass ) {
				return;
			}

			if ( !( reason is string ) ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( duration ) ) ) {
				return;
			}
			ckey = null;
			computerid = null;
			ip = null;

			if ( banned_mob is Mob ) {
				ckey = banned_mob.ckey;

				if ( Lang13.Bool( banned_mob.client ) ) {
					computerid = banned_mob.client.computer_id;
					ip = banned_mob.client.address;
				} else {
					computerid = banned_mob.computer_id;
					ip = banned_mob.lastKnownIP;
				}
			} else if ( Lang13.Bool( banckey ) ) {
				ckey = String13.CKey( banckey );
				computerid = bancid;
				ip = banip;
			}
			query = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "player" ) + " WHERE ckey = '" + ckey + "'" );
			query.Execute();
			validckey = false;

			if ( query.NextRow() ) {
				validckey = true;
			}

			if ( !validckey ) {
				
				if ( !Lang13.Bool( banned_mob ) || Lang13.Bool( banned_mob ) && !GlobalFuncs.IsGuestKey( banned_mob.key ) ) {
					GlobalFuncs.message_admins( "<font color='red'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted to ban " + ckey + ", but " + ckey + " has not been seen yet. Please only ban actual players.</font>" );
					return;
				}
			}
			a_ckey = null;
			a_computerid = null;
			a_ip = null;

			if ( this.owner != null && Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( this.owner ) ) ) {
				a_ckey = this.owner.ckey;
				a_computerid = this.owner.computer_id;
				a_ip = this.owner.address;
			}

			if ( blockselfban ) {
				
				if ( a_ckey == ckey ) {
					Task13.User.WriteMsg( "<span class='danger'>You cannot apply this ban type on yourself.</span>" );
					return;
				}
			}
			who = null;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.clients )) {
				C = _b;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( !Lang13.Bool( who ) ) {
					who = "" + C;
				} else {
					who += ", " + C;
				}
			}
			adminwho = null;

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.admins )) {
				C2 = _c;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
					continue;
				}

				if ( !Lang13.Bool( adminwho ) ) {
					adminwho = "" + C2;
				} else {
					adminwho += ", " + C2;
				}
			}
			reason = GlobalFuncs.sanitizeSQL( reason );

			if ( maxadminbancheck ) {
				adm_query = GlobalVars.dbcon.NewQuery( "SELECT count(id) AS num FROM " + GlobalFuncs.format_table_name( "ban" ) + " WHERE (a_ckey = '" + a_ckey + "') AND (bantype = 'ADMIN_PERMABAN'  OR (bantype = 'ADMIN_TEMPBAN' AND expiration_time > Now())) AND isnull(unbanned)" );
				adm_query.Execute();

				if ( adm_query.NextRow() ) {
					adm_bans = String13.ParseNumber( adm_query.item[1] );

					if ( ( adm_bans ??0) >= 1 ) {
						Task13.User.WriteMsg( "<span class='danger'>You already logged " + 1 + " admin ban(s) or more. Do not abuse this function!</span>" );
						return;
					}
				}
			}
			sql = "INSERT INTO " + GlobalFuncs.format_table_name( "ban" ) + " (`id`,`bantime`,`serverip`,`bantype`,`reason`,`job`,`duration`,`rounds`,`expiration_time`,`ckey`,`computerid`,`ip`,`a_ckey`,`a_computerid`,`a_ip`,`who`,`adminwho`,`edits`,`unbanned`,`unbanned_datetime`,`unbanned_ckey`,`unbanned_computerid`,`unbanned_ip`) VALUES (null, Now(), '" + serverip + "', '" + bantype_str + "', '" + reason + "', '" + job + "', " + ( Lang13.Bool( duration ) ? "" + duration : "0" ) + ", " + ( rounds == true ? "" + rounds : "0" ) + ", Now() + INTERVAL " + ( Convert.ToDouble( duration ) > 0 ? duration : ((dynamic)( 0 )) ) + " MINUTE, '" + ckey + "', '" + computerid + "', '" + ip + "', '" + a_ckey + "', '" + a_computerid + "', '" + a_ip + "', '" + who + "', '" + adminwho + "', '', null, null, null, null, null)";
			query_insert = GlobalVars.dbcon.NewQuery( sql );
			query_insert.Execute();
			Task13.User.WriteMsg( "<span class='adminnotice'>Ban saved to database.</span>" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has added a " + bantype_str + " for " + ckey + " " + ( Lang13.Bool( job ) ? "(" + job + ")" : "" ) + " " + ( Convert.ToDouble( duration ) > 0 ? "(" + duration + " minutes)" : "" ) + " with the reason: \"" + reason + "\" to the ban database." );

			if ( announceinirc ) {
				GlobalFuncs.send2irc( "BAN ALERT", "" + a_ckey + " applied a " + bantype_str + " on " + ckey );
			}

			if ( kickbannedckey ) {
				
				if ( Lang13.Bool( banned_mob ) && Lang13.Bool( banned_mob.client ) && banned_mob.client.ckey == banckey ) {
					Lang13.Delete( banned_mob.client );
					banned_mob.client = null;
				}
			}
			return;
		}

		// Function from file: stickyban.dm
		public void stickyban_show(  ) {
			dynamic bans = null;
			string banhtml = null;
			dynamic key = null;
			string ckey = null;
			ByTable ban = null;
			string html = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			bans = GlobalFuncs.sortList( Game13.GetConfig( "ban" ) );
			banhtml = "";

			foreach (dynamic _a in Lang13.Enumerate( bans )) {
				key = _a;
				
				ckey = String13.CKey( key );
				ban = GlobalFuncs.stickyban2list( Game13.GetConfig( "ban", key ) );
				banhtml += "<br /><hr />\n";
				banhtml += this.stickyban_gethtml( ckey, ban );
			}
			html = @"
	<head>
		<title>Sticky Bans</title>
	</head>
	<body>
		<h2>All Sticky Bans:</h2> <a href='?_src_=holder;stickyban=add'>[+]</a><br>
		" + banhtml + "\n	</body>\n	";
			Interface13.Browse( Task13.User, html, "window=stickybans;size=700x400" );
			return;
		}

		// Function from file: stickyban.dm
		public string stickyban_gethtml( string ckey = null, ByTable ban = null ) {
			string _default = null;

			dynamic key = null;

			_default = "<a href='?_src_=holder;stickyban=remove&ckey=" + ckey + "'>[-]</a><b>" + ckey + "</b><br />";
			_default += "" + ban["message"] + " <b><a href='?_src_=holder;stickyban=edit&ckey=" + ckey + "'>[Edit]</a></b><br />";

			if ( Lang13.Bool( ban["admin"] ) ) {
				_default += "" + ban["admin"] + "<br />";
			} else {
				_default += "LEGACY<br />";
			}
			_default += "Caught keys<br />\n<ol>";

			foreach (dynamic _a in Lang13.Enumerate( ban["keys"] )) {
				key = _a;
				

				if ( String13.CKey( key ) == ckey ) {
					continue;
				}
				_default += "<li><a href='?_src_=holder;stickyban=remove_alt&ckey=" + ckey + "&alt=" + String13.CKey( key ) + "'>[-]</a>" + key + "</li>";
			}
			_default += "</ol>\n";
			return _default;
		}

		// Function from file: stickyban.dm
		public void stickyban( dynamic action = null, ByTable data = null ) {
			ByTable ban = null;
			dynamic ckey = null;
			dynamic reason = null;
			dynamic ckey2 = null;
			ByTable ban2 = null;
			dynamic ckey3 = null;
			string alt = null;
			ByTable ban3 = null;
			bool found = false;
			dynamic key = null;
			dynamic key2 = null;
			dynamic ckey4 = null;
			ByTable ban4 = null;
			dynamic oldreason = null;
			dynamic reason2 = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}

			dynamic _c = action; // Was a switch-case, sorry for the mess.
			if ( _c=="show" ) {
				this.stickyban_show();
			} else if ( _c=="add" ) {
				ban = new ByTable();
				ckey = null;
				ban["admin"] = Task13.User.key;
				ban["type"] = new ByTable(new object [] { "sticky" });
				ban["reason"] = "(InGameBan)(" + Task13.User.key + ")";

				if ( Lang13.Bool( data["ckey"] ) ) {
					ckey = String13.CKey( data["ckey"] );
				} else {
					ckey = Interface13.Input( Task13.User, "Ckey", "Ckey", "", null, InputType.Str | InputType.Null );

					if ( !Lang13.Bool( ckey ) ) {
						return;
					}
					ckey = String13.CKey( ckey );
				}

				if ( GlobalFuncs.get_stickyban_from_ckey( ckey ) != null ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: Can not add a stickyban: User already has a current sticky ban</span>" );
				}

				if ( Lang13.Bool( data["reason"] ) ) {
					ban["message"] = data["reason"];
				} else {
					reason = Interface13.Input( Task13.User, "Reason", "Reason", "Ban Evasion", null, InputType.Str | InputType.Null );

					if ( !Lang13.Bool( reason ) ) {
						return;
					}
					ban["message"] = "" + reason;
				}
				Game13.SetConfig( "ban", ckey, GlobalFuncs.list2stickyban( ban ) );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has stickybanned " + ckey + ".\nReason: " + ban["message"] );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has stickybanned " + ckey + ".\nReason: " + ban["message"] + "</span>" );
			} else if ( _c=="remove" ) {
				
				if ( !Lang13.Bool( data["ckey"] ) ) {
					return;
				}
				ckey2 = data["ckey"];
				ban2 = GlobalFuncs.get_stickyban_from_ckey( ckey2 );

				if ( !( ban2 != null ) ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: No sticky ban for " + ckey2 + " found!</span>" );
					return;
				}

				if ( Interface13.Alert( "Are you sure you want to remove the sticky ban on " + ckey2 + "?", "Are you sure", "Yes", "No" ) == "No" ) {
					return;
				}

				if ( !( GlobalFuncs.get_stickyban_from_ckey( ckey2 ) != null ) ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: The ban disappeared.</span>" );
					return;
				}
				Game13.SetConfig( "ban", ckey2, null );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + ckey2 + "'s stickyban" );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " removed " + ckey2 + "'s stickyban</span>" );
			} else if ( _c=="remove_alt" ) {
				
				if ( !Lang13.Bool( data["ckey"] ) ) {
					return;
				}
				ckey3 = data["ckey"];

				if ( !Lang13.Bool( data["alt"] ) ) {
					return;
				}
				alt = String13.CKey( data["alt"] );
				ban3 = GlobalFuncs.get_stickyban_from_ckey( ckey3 );

				if ( !( ban3 != null ) ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: No sticky ban for " + ckey3 + " found!</span>" );
					return;
				}
				found = false;

				foreach (dynamic _a in Lang13.Enumerate( ban3["keys"] )) {
					key = _a;
					

					if ( String13.CKey( key ) == alt ) {
						found = true;
						break;
					}
				}

				if ( !found ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: " + alt + " is not linked to " + ckey3 + "'s sticky ban!</span>" );
					return;
				}

				if ( Interface13.Alert( "Are you sure you want to disassociate " + alt + " from " + ckey3 + "'s sticky ban? \nNote: Nothing stops byond from re-linking them", "Are you sure", "Yes", "No" ) == "No" ) {
					return;
				}
				ban3 = GlobalFuncs.get_stickyban_from_ckey( ckey3 );

				if ( !( ban3 != null ) ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: The ban disappeared.</span>" );
					return;
				}
				found = false;

				foreach (dynamic _b in Lang13.Enumerate( ban3["keys"] )) {
					key2 = _b;
					

					if ( String13.CKey( key2 ) == alt ) {
						ban3["keys"] -= key2;
						found = true;
						break;
					}
				}

				if ( !found ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: " + alt + " link to " + ckey3 + "'s sticky ban disappeared.</span>" );
					return;
				}
				Game13.SetConfig( "ban", ckey3, GlobalFuncs.list2stickyban( ban3 ) );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has disassociated " + alt + " from " + ckey3 + "'s sticky ban" );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has disassociated " + alt + " from " + ckey3 + "'s sticky ban</span>" );
			} else if ( _c=="edit" ) {
				
				if ( !Lang13.Bool( data["ckey"] ) ) {
					return;
				}
				ckey4 = data["ckey"];
				ban4 = GlobalFuncs.get_stickyban_from_ckey( ckey4 );

				if ( !( ban4 != null ) ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: No sticky ban for " + ckey4 + " found!" );
					return;
				}
				oldreason = ban4["message"];
				reason2 = Interface13.Input( Task13.User, "Reason", "Reason", "" + ban4["message"], null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( reason2 ) || reason2 == oldreason ) {
					return;
				}
				ban4 = GlobalFuncs.get_stickyban_from_ckey( ckey4 );

				if ( !( ban4 != null ) ) {
					Task13.User.WriteMsg( "<span class='adminnotice'>Error: The ban disappeared.</span>" );
					return;
				}
				ban4["message"] = "" + reason2;
				Game13.SetConfig( "ban", ckey4, GlobalFuncs.list2stickyban( ban4 ) );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has edited " + ckey4 + "'s sticky ban reason from " + oldreason + " to " + reason2 );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has edited " + ckey4 + "'s sticky ban reason from " + oldreason + " to " + reason2 + "</span>" );
			}
			return;
		}

		// Function from file: secrets.dm
		public void Secrets_topic( dynamic item = null, ByTable href_list = null ) {
			RoundEvent E = null;
			bool ok = false;
			string dat = null;
			dynamic l = null;
			string dat2 = null;
			dynamic line = null;
			Job job = null;
			string dat3 = null;
			dynamic ckey = null;
			dynamic D = null;
			string delete_mobs = null;
			dynamic thunderdome = null;
			Mob_Living mob = null;
			Obj obj = null;
			dynamic template = null;
			dynamic choice = null;
			Disease D2 = null;
			string dat4 = null;
			dynamic l2 = null;
			string dat5 = null;
			dynamic sig = null;
			string dat6 = null;
			dynamic sig2 = null;
			string dat7 = null;
			Data_Record t = null;
			string dat8 = null;
			Mob_Living_Carbon_Human H = null;
			string dat9 = null;
			Mob_Living_Carbon_Human H2 = null;
			Mob_Living_Carbon_Human H3 = null;
			dynamic result = null;
			dynamic newtype = null;
			Mob_Living_Carbon_Human H4 = null;
			Mob_Living_Carbon_Human H5 = null;
			string objective = null;
			Mob_Living_Carbon_Human H6 = null;
			Objective new_objective = null;
			Mob_Living_Silicon A = null;
			Objective new_objective2 = null;
			dynamic newBombCap = null;
			Obj_Machinery_Light L = null;
			Obj_Machinery_Light L2 = null;
			Weather_FloorIsLava storm = null;
			dynamic virus = null;
			RoundEvent DO = null;
			Mob_Living_Carbon_Human H7 = null;
			Obj_Machinery_Door_Airlock W = null;
			int survivor_probability = 0;
			int survivor_probability2 = 0;
			Mob_Living_Carbon_Human B = null;
			Obj_Machinery_Door_Airlock_Maintenance M = null;
			Obj_Machinery_Door_Airlock_Maintenance M2 = null;
			Job J = null;

			ok = false;

			dynamic _bd = item; // Was a switch-case, sorry for the mess.
			if ( _bd=="admin_log" ) {
				dat = "<B>Admin Log<HR></B>";

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admin_log )) {
					l = _a;
					
					dat += "<li>" + l + "</li>";
				}

				if ( !( GlobalVars.admin_log.len != 0 ) ) {
					dat += "No-one has done anything this round!";
				}
				Interface13.Browse( Task13.User, dat, "window=admin_log" );
			} else if ( _bd=="list_job_debug" ) {
				dat2 = "<B>Job Debug info.</B><HR>";

				if ( GlobalVars.SSjob != null ) {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSjob.job_debug )) {
						line = _b;
						
						dat2 += "" + line + "<BR>";
					}
					dat2 += "*******<BR><BR>";

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
						job = _c;
						

						if ( !( job != null ) ) {
							continue;
						}
						dat2 += "job: " + job.title + ", current_positions: " + job.current_positions + ", total_positions: " + job.total_positions + " <BR>";
					}
					Interface13.Browse( Task13.User, dat2, "window=jobdebug;size=600x500" );
				}
			} else if ( _bd=="show_admins" ) {
				dat3 = "<B>Current admins:</B><HR>";

				if ( GlobalVars.admin_datums != null ) {
					
					foreach (dynamic _d in Lang13.Enumerate( GlobalVars.admin_datums )) {
						ckey = _d;
						
						D = GlobalVars.admin_datums[ckey];
						dat3 += "" + ckey + " - " + D.rank.name + "<br>";
					}
					Interface13.Browse( Task13.User, dat3, "window=showadmins;size=600x500" );
				}
			} else if ( _bd=="tdomereset" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				delete_mobs = Interface13.Alert( "Clear all mobs?", "Confirm", "Yes", "No", "Cancel" );

				if ( delete_mobs == "Cancel" ) {
					return;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " reset the thunderdome to default with delete_mobs==" + delete_mobs + "." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " reset the thunderdome to default with delete_mobs==" + delete_mobs + ".</span>" );
				thunderdome = Lang13.FindObj( typeof(Zone_Tdome_Arena) );

				if ( delete_mobs == "Yes" ) {
					
					foreach (dynamic _e in Lang13.Enumerate( thunderdome, typeof(Mob_Living) )) {
						mob = _e;
						
						GlobalFuncs.qdel( mob );
					}
				}

				foreach (dynamic _f in Lang13.Enumerate( thunderdome, typeof(Obj) )) {
					obj = _f;
					

					if ( !( obj is Obj_Machinery_Camera ) ) {
						GlobalFuncs.qdel( obj );
					}
				}
				template = Lang13.FindObj( typeof(Zone_Tdome_ArenaSource) );
				((Zone)template).copy_contents_to( thunderdome );
			} else if ( _bd=="clear_virus" ) {
				choice = Interface13.Input( "Are you sure you want to cure all disease?", null, null, null, new ByTable(new object [] { "Yes", "Cancel" }), InputType.Any );

				if ( choice == "Yes" ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has cured all diseases." );

					foreach (dynamic _g in Lang13.Enumerate( GlobalVars.SSdisease.processing, typeof(Disease) )) {
						D2 = _g;
						
						D2.cure( D2 );
					}
				}
			} else if ( _bd=="list_bombers" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				dat4 = "<B>Bombing List<HR>";

				foreach (dynamic _h in Lang13.Enumerate( GlobalVars.bombers )) {
					l2 = _h;
					
					dat4 += "" + l2 + "<BR>";
				}
				Interface13.Browse( Task13.User, dat4, "window=bombers" );
			} else if ( _bd=="list_signalers" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				dat5 = "<B>Showing last " + Lang13.Length( GlobalVars.lastsignalers ) + " signalers.</B><HR>";

				foreach (dynamic _i in Lang13.Enumerate( GlobalVars.lastsignalers )) {
					sig = _i;
					
					dat5 += "" + sig + "<BR>";
				}
				Interface13.Browse( Task13.User, dat5, "window=lastsignalers;size=800x500" );
			} else if ( _bd=="list_lawchanges" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				dat6 = "<B>Showing last " + Lang13.Length( GlobalVars.lawchanges ) + " law changes.</B><HR>";

				foreach (dynamic _j in Lang13.Enumerate( GlobalVars.lawchanges )) {
					sig2 = _j;
					
					dat6 += "" + sig2 + "<BR>";
				}
				Interface13.Browse( Task13.User, dat6, "window=lawchanges;size=800x500" );
			} else if ( _bd=="moveminingshuttle" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "ShM" );

				if ( !( GlobalVars.SSshuttle.toggleShuttle( "mining", "mining_home", "mining_away" ) != 0 ) ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " moved mining shuttle" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " moved the mining shuttle" );
				}
			} else if ( _bd=="movelaborshuttle" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "ShL" );

				if ( !( GlobalVars.SSshuttle.toggleShuttle( "laborcamp", "laborcamp_home", "laborcamp_away" ) != 0 ) ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " moved labor shuttle" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " moved the labor shuttle" );
				}
			} else if ( _bd=="moveferry" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "ShF" );

				if ( !( GlobalVars.SSshuttle.toggleShuttle( "ferry", "ferry_home", "ferry_away" ) != 0 ) ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " moved the centcom ferry" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " moved the centcom ferry" );
				}
			} else if ( _bd=="showailaws" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				this.output_ai_laws();
			} else if ( _bd=="showgm" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}

				if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
					Interface13.Alert( "The game hasn't started yet!" );
				} else if ( Lang13.Bool( GlobalVars.ticker.mode ) ) {
					Interface13.Alert( "The game mode is " + GlobalVars.ticker.mode.name );
				} else {
					Interface13.Alert( "For some reason there's a ticker, but not a game mode" );
				}
			} else if ( _bd=="manifest" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				dat7 = "<B>Showing Crew Manifest.</B><HR>";
				dat7 += "<table cellspacing=5><tr><th>Name</th><th>Position</th></tr>";

				foreach (dynamic _k in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
					t = _k;
					
					dat7 += "<tr><td>" + t.fields["name"] + "</td><td>" + t.fields["rank"] + "</td></tr>";
				}
				dat7 += "</table>";
				Interface13.Browse( Task13.User, dat7, "window=manifest;size=440x410" );
			} else if ( _bd=="DNA" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				dat8 = "<B>Showing DNA from blood.</B><HR>";
				dat8 += "<table cellspacing=5><tr><th>Name</th><th>DNA</th><th>Blood Type</th></tr>";

				foreach (dynamic _l in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
					H = _l;
					

					if ( Lang13.Bool( H.ckey ) ) {
						dat8 += "<tr><td>" + H + "</td><td>" + H.dna.unique_enzymes + "</td><td>" + H.dna.blood_type + "</td></tr>";
					}
				}
				dat8 += "</table>";
				Interface13.Browse( Task13.User, dat8, "window=DNA;size=440x410" );
			} else if ( _bd=="fingerprints" ) {
				
				if ( !GlobalFuncs.check_rights( 2 ) ) {
					return;
				}
				dat9 = "<B>Showing Fingerprints.</B><HR>";
				dat9 += "<table cellspacing=5><tr><th>Name</th><th>Fingerprints</th></tr>";

				foreach (dynamic _m in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
					H2 = _m;
					

					if ( Lang13.Bool( H2.ckey ) ) {
						dat9 += "<tr><td>" + H2 + "</td><td>" + Num13.Md5( H2.dna.uni_identity ) + "</td></tr>";
					}
				}
				dat9 += "</table>";
				Interface13.Browse( Task13.User, dat9, "window=fingerprints;size=440x410" );
			} else if ( _bd=="monkey" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "M" );

				foreach (dynamic _n in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
					H3 = _n;
					
					Task13.Schedule( 0, (Task13.Closure)(() => {
						H3.monkeyize();
						return;
					}));
				}
				ok = true;
			} else if ( _bd=="allspecies" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				result = Interface13.Input( Task13.User, "Please choose a new species", "Species", null, GlobalVars.species_list, InputType.Null | InputType.Any );

				if ( Lang13.Bool( result ) ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " turned all humans into " + result );
					GlobalFuncs.message_admins( new Txt().blue().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( " turned all humans into " ).item( result ).ToString() );
					newtype = GlobalVars.species_list[result];

					foreach (dynamic _o in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
						H4 = _o;
						
						H4.set_species( newtype );
					}
				}
			} else if ( _bd=="corgi" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "M" );

				foreach (dynamic _p in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
					H5 = _p;
					
					Task13.Schedule( 0, (Task13.Closure)(() => {
						H5.corgize();
						return;
					}));
				}
				ok = true;
			} else if ( _bd=="tripleAI" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				Task13.User.client.triple_ai();
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "TriAI" );
			} else if ( _bd=="power" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "P" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made all areas powered" );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made all areas powered</span>" );
				GlobalFuncs.power_restore();
			} else if ( _bd=="unpower" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "UP" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made all areas unpowered" );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made all areas unpowered</span>" );
				GlobalFuncs.power_failure();
			} else if ( _bd=="quickpower" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "QP" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made all SMESs powered" );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made all SMESs powered</span>" );
				GlobalFuncs.power_restore_quick();
			} else if ( _bd=="traitor_all" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}

				if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
					Interface13.Alert( "The game hasn't started yet!" );
					return;
				}
				objective = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Enter an objective", null, null, null, null, InputType.Any ) ), 1, 1024 );

				if ( !Lang13.Bool( objective ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "TA(" + objective + ")" );

				foreach (dynamic _q in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
					H6 = _q;
					

					if ( H6.stat == 2 || !( H6.client != null ) || !( H6.mind != null ) ) {
						continue;
					}

					if ( GlobalFuncs.is_special_character( H6 ) != 0 ) {
						continue;
					}
					GlobalVars.ticker.mode.traitors.Add( H6.mind );
					H6.mind.special_role = "traitor";
					new_objective = new Objective();
					new_objective.owner = H6;
					new_objective.explanation_text = objective;
					H6.mind.objectives.Add( new_objective );
					((GameMode)GlobalVars.ticker.mode).greet_traitor( H6.mind );
					((GameMode)GlobalVars.ticker.mode).finalize_traitor( H6.mind );
				}

				foreach (dynamic _r in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon) )) {
					A = _r;
					

					if ( A.stat == 2 || !( A.client != null ) || !( A.mind != null ) ) {
						continue;
					}

					if ( A is Mob_Living_Silicon_Pai ) {
						continue;
					} else if ( GlobalFuncs.is_special_character( A ) != 0 ) {
						continue;
					}
					GlobalVars.ticker.mode.traitors.Add( A.mind );
					A.mind.special_role = "traitor";
					new_objective2 = new Objective();
					new_objective2.owner = A;
					new_objective2.explanation_text = objective;
					A.mind.objectives.Add( new_objective2 );
					((GameMode)GlobalVars.ticker.mode).greet_traitor( A.mind );
					((GameMode)GlobalVars.ticker.mode).finalize_traitor( A.mind );
				}
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " used everyone is a traitor secret. Objective is " + objective + "</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used everyone is a traitor secret. Objective is " + objective );
			} else if ( _bd=="changebombcap" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BC" );
				newBombCap = Interface13.Input( Task13.User, "What would you like the new bomb cap to be. (entered as the light damage range (the 3rd number in common (1,2,3) notation)) Must be between 4 and 128)", "New Bomb Cap", GlobalVars.MAX_EX_LIGHT_RANGE, null, InputType.Num | InputType.Null );

				if ( Convert.ToDouble( newBombCap ) < 4 ) {
					return;
				}

				if ( Convert.ToDouble( newBombCap ) > 128 ) {
					newBombCap = 128;
				}
				GlobalVars.MAX_EX_DEVESTATION_RANGE = Num13.Floor( Convert.ToDouble( newBombCap / 4 ) );
				GlobalVars.MAX_EX_HEAVY_RANGE = Num13.Floor( Convert.ToDouble( newBombCap / 2 ) );
				GlobalVars.MAX_EX_LIGHT_RANGE = newBombCap;
				GlobalVars.MAX_EX_FLASH_RANGE = newBombCap;
				GlobalVars.MAX_EX_FLAME_RANGE = newBombCap;
				GlobalFuncs.message_admins( "<span class='boldannounce'>" + GlobalFuncs.key_name_admin( Task13.User ) + " changed the bomb cap to " + GlobalVars.MAX_EX_DEVESTATION_RANGE + ", " + GlobalVars.MAX_EX_HEAVY_RANGE + ", " + GlobalVars.MAX_EX_LIGHT_RANGE + "</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed the bomb cap to " + GlobalVars.MAX_EX_DEVESTATION_RANGE + ", " + GlobalVars.MAX_EX_HEAVY_RANGE + ", " + GlobalVars.MAX_EX_LIGHT_RANGE );
			} else if ( _bd=="lightsout" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "LO" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has broke a lot of lights" );
				E = new RoundEvent_ElectricalStorm() {
					lightsoutAmount = 2
					
				};
			} else if ( _bd=="blackout" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BO" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " broke all lights" );

				foreach (dynamic _s in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Light) )) {
					L = _s;
					
					L.broken();
				}
			} else if ( _bd=="whiteout" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "WO" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " fixed all lights" );

				foreach (dynamic _t in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Light) )) {
					L2 = _t;
					
					L2.fix();
				}
			} else if ( _bd=="floorlava" ) {
				storm = new Weather_FloorIsLava();
				storm.weather_start_up();
			} else if ( _bd=="virus" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "V" );

				switch ((string)( Interface13.Alert( "Do you want this to be a random disease or do you have something in mind?", null, "Make Your Own", "Random", "Choose" ) )) {
					case "Make Your Own":
						GlobalFuncs.AdminCreateVirus( Task13.User.client );
						break;
					case "Random":
						E = new RoundEvent_DiseaseOutbreak();
						break;
					case "Choose":
						virus = Interface13.Input( "Choose the virus to spread", "BIOHAZARD", null, null, Lang13.GetTypes( typeof(Disease) ), InputType.Null | InputType.Any );
						E = new RoundEvent_DiseaseOutbreak();
						DO = E;
						((dynamic)DO).virus_type = virus;
						break;
				}
			} else if ( _bd=="retardify" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "RET" );

				foreach (dynamic _v in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
					H7 = _v;
					
					H7.WriteMsg( "<span class='boldannounce'>You suddenly feel stupid.</span>" );
					H7.setBrainLoss( 60 );
				}
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made everybody retarded" );
			} else if ( _bd=="eagles" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "EgL" );

				foreach (dynamic _w in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Door_Airlock) )) {
					W = _w;
					

					if ( W.z == 1 && !( GlobalFuncs.get_area( W ) is Zone_Bridge ) && !( GlobalFuncs.get_area( W ) is Zone_CrewQuarters ) && !( GlobalFuncs.get_area( W ) is Zone_Security_Prison ) ) {
						W.req_access = new ByTable();
					}
				}
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " activated Egalitarian Station mode" );
				GlobalFuncs.priority_announce( "Centcom airlock control override activated. Please take this time to get acquainted with your coworkers.", null, "sound/AI/commandreport.ogg" );
			} else if ( _bd=="guns" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SG" );
				survivor_probability = 0;

				switch ((string)( Interface13.Alert( "Do you want this to create survivors antagonists?", null, "No Antags", "Some Antags", "All Antags!" ) )) {
					case "Some Antags":
						survivor_probability = 25;
						break;
					case "All Antags!":
						survivor_probability = 100;
						break;
				}
				GlobalFuncs.rightandwrong( false, Task13.User, survivor_probability );
			} else if ( _bd=="magic" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SM" );
				survivor_probability2 = 0;

				switch ((string)( Interface13.Alert( "Do you want this to create survivors antagonists?", null, "No Antags", "Some Antags", "All Antags!" ) )) {
					case "Some Antags":
						survivor_probability2 = 25;
						break;
					case "All Antags!":
						survivor_probability2 = 100;
						break;
				}
				GlobalFuncs.rightandwrong( true, Task13.User, survivor_probability2 );
			} else if ( _bd=="events" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}

				if ( !GlobalVars.SSevent.wizardmode ) {
					
					if ( Interface13.Alert( "Do you want to toggle summon events on?", null, "Yes", "No" ) == "Yes" ) {
						GlobalFuncs.summonevents();
						GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
						GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SE" );
					}
				} else {
					
					switch ((string)( Interface13.Alert( "What would you like to do?", null, "Intensify Summon Events", "Turn Off Summon Events", "Nothing" ) )) {
						case "Intensify Summon Events":
							GlobalFuncs.summonevents();
							GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
							GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SE" );
							break;
						case "Turn Off Summon Events":
							GlobalVars.SSevent.toggleWizardmode();
							GlobalVars.SSevent.resetFrequency();
							break;
					}
				}
			} else if ( _bd=="dorf" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "DF" );

				foreach (dynamic _ba in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
					B = _ba;
					
					B.facial_hair_style = "Dward Beard";
					B.update_hair();
				}
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " activated dorf mode" );
			} else if ( _bd=="onlyone" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "OO" );
				Task13.User.client.only_one();
			} else if ( _bd=="onlyme" ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "OM" );
				GlobalFuncs.only_me();
			} else if ( _bd=="maint_access_brig" ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}

				foreach (dynamic _bb in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Door_Airlock_Maintenance) )) {
					M = _bb;
					
					M.check_access();

					if ( Lang13.Bool( M.req_access.Contains( GlobalVars.access_maint_tunnels ) ) ) {
						M.req_access = new ByTable(new object [] { GlobalVars.access_brig });
					}
				}
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made all maint doors brig access-only." );
			} else if ( _bd=="maint_access_engiebrig" ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}

				foreach (dynamic _bc in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Door_Airlock_Maintenance) )) {
					M2 = _bc;
					
					M2.check_access();

					if ( Lang13.Bool( M2.req_access.Contains( GlobalVars.access_maint_tunnels ) ) ) {
						M2.req_access = new ByTable();
						M2.req_one_access = new ByTable(new object [] { GlobalVars.access_brig, GlobalVars.access_engine });
					}
				}
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made all maint doors engineering and brig access-only." );
			} else if ( _bd=="infinite_sec" ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}
				J = GlobalVars.SSjob.GetJob( "Security Officer" );

				if ( !( J != null ) ) {
					return;
				}
				J.total_positions = -1;
				J.spawn_positions = -1;
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has removed the cap on security officers." );
			}

			if ( E != null ) {
				E.processing = false;

				if ( E.announceWhen > 0 ) {
					
					if ( Interface13.Alert( Task13.User, "Would you like to alert the crew?", "Alert", "Yes", "No" ) == "No" ) {
						E.announceWhen = -1;
					}
				}
				E.processing = true;
			}

			if ( Task13.User != null ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used secret " + item );

				if ( ok ) {
					Game13.WriteMsg( "<B>A secret has been activated by " + Task13.User.key + "!</B>" );
				}
			}
			return;
		}

		// Function from file: secrets.dm
		public void Secrets(  ) {
			string dat = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			dat = "<B>The first rule of adminbuse is: you don't talk about the adminbuse.</B><HR>";
			dat += new Txt( "\n			<B>General Secrets</B><BR>\n			<BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=list_job_debug'>Show Job Debug</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=admin_log'>Admin Log</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=show_admins'>Show Admin List</A><BR>\n			<BR>\n			" ).ToString();

			if ( GlobalFuncs.check_rights( 2, false ) ) {
				dat += new Txt( "\n			<B>Admin Secrets</B><BR>\n			<BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=clear_virus'>Cure all diseases currently in existence</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=list_bombers'>Bombing List</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=check_antagonist'>Show current traitors and objectives</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=list_signalers'>Show last " ).item( Lang13.Length( GlobalVars.lastsignalers ) ).str( " signalers</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=list_lawchanges'>Show last " ).item( Lang13.Length( GlobalVars.lawchanges ) ).str( " law changes</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=showailaws'>Show AI Laws</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=showgm'>Show Game Mode</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=manifest'>Show Crew Manifest</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=DNA'>List DNA (Blood)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=fingerprints'>List Fingerprints</A><BR><BR>\n			<A href='?src=" ).Ref( this ).str( @";secrets=tdomereset'>Reset Thunderdome to default state</A><BR>
			<BR>
			<B>Shuttles</B><BR>
			<BR>
			<A href='?src=" ).Ref( this ).str( ";secrets=moveferry'>Move Ferry</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=moveminingshuttle'>Move Mining Shuttle</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=movelaborshuttle'>Move Labor Shuttle</A><BR>\n			<BR>\n			" ).ToString();
			}

			if ( GlobalFuncs.check_rights( 8, false ) ) {
				dat += new Txt( @"
			<B>Fun Secrets</B><BR>
			<BR>

			<A href='?src=" ).Ref( this ).str( ";secrets=virus'>Trigger a Virus Outbreak</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=monkey'>Turn all humans into monkeys</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=allspecies'>Change the species of all humans</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=power'>Make all areas powered</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=unpower'>Make all areas unpowered</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=quickpower'>Power all SMES</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=tripleAI'>Triple AI mode (needs to be used in the lobby)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=traitor_all'>Everyone is the traitor</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=guns'>Summon Guns</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=magic'>Summon Magic</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=events'>Summon Events (Toggle)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=onlyone'>There can only be one!</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=onlyme'>There can only be me!</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=retardify'>Make all players retarded</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=eagles'>Egalitarian Station Mode</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=blackout'>Break all lights</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=whiteout'>Fix all lights</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=floorlava'>The floor is lava! (DANGEROUS: extremely lame)</A><BR>\n			<BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=changebombcap'>Change bomb cap</A><BR>\n			" ).ToString();
			}
			dat += "<BR>";

			if ( GlobalFuncs.check_rights( 32, false ) ) {
				dat += new Txt( "\n			<B>Security Level Elevated</B><BR>\n			<BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=maint_access_engiebrig'>Change all maintenance doors to engie/brig access only</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=maint_access_brig'>Change all maintenance doors to brig access only</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secrets=infinite_sec'>Remove cap on security officers</A><BR>\n			<BR>\n			" ).ToString();
			}
			Interface13.Browse( Task13.User, dat, "window=secrets" );
			return;
		}

		// Function from file: player_panel.dm
		public void check_antagonists(  ) {
			string dat = null;
			double timeleft = 0;
			Mind N = null;
			dynamic M = null;
			Obj_Item_Weapon_Disk_Nuclear N2 = null;
			Ent_Static disk_loc = null;
			Ent_Static M2 = null;
			Ent_Static O = null;
			Mind N3 = null;
			dynamic M3 = null;
			Mind N4 = null;
			dynamic M4 = null;
			Mind N5 = null;
			dynamic M5 = null;
			dynamic mob_loc = null;
			Gang G = null;
			Mind N6 = null;
			dynamic M6 = null;
			Mind N7 = null;
			dynamic M7 = null;
			Mind changeling = null;
			dynamic M8 = null;
			Mind wizard = null;
			dynamic M9 = null;
			Mind apprentice = null;
			dynamic M10 = null;
			Mind N8 = null;
			dynamic M11 = null;
			Mind N9 = null;
			dynamic M12 = null;
			Mind N10 = null;
			dynamic M13 = null;
			Mind N11 = null;
			dynamic M14 = null;
			Mind N12 = null;
			dynamic M15 = null;
			Mind N13 = null;
			dynamic M16 = null;
			Mind N14 = null;
			dynamic M17 = null;
			Mind traitor = null;
			dynamic M18 = null;
			Mind N15 = null;
			dynamic M19 = null;
			Mind N16 = null;
			dynamic M20 = null;
			Mind abductor = null;
			dynamic M21 = null;
			Obj_Machinery_Abductor_Experiment E = null;
			Mind abductee = null;
			dynamic M22 = null;
			ByTable blob_minds = null;
			Mob_Camera_Blob B = null;
			dynamic mode = null;
			Mind blob = null;
			dynamic M23 = null;
			dynamic mode2 = null;
			Mind eek = null;
			dynamic M24 = null;

			
			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state >= 3 ) {
				dat = "<html><head><title>Round Status</title></head><body><h1><B>Round Status</B></h1>";

				if ( Lang13.Bool( GlobalVars.ticker.mode.replacementmode ) ) {
					dat += "Former Game Mode: <B>" + GlobalVars.ticker.mode.name + "</B><BR>";
					dat += "Replacement Game Mode: <B>" + GlobalVars.ticker.mode.replacementmode.name + "</B><BR>";
				} else {
					dat += "Current Game Mode: <B>" + GlobalVars.ticker.mode.name + "</B><BR>";
				}
				dat += "Round Duration: <B>" + Num13.Floor( Game13.time / 36000 ) + ":" + GlobalFuncs.add_zero( "" + Game13.time / 600 % 60, 2 ) + ":" + Game13.time / 100 % 6 + Game13.time / 100 % 10 + "</B><BR>";
				dat += "<B>Emergency shuttle</B><BR>";

				if ( GlobalVars.SSshuttle.emergency.mode < 2 ) {
					dat += "<a href='?_src_=holder;call_shuttle=1'>Call Shuttle</a><br>";
				} else {
					timeleft = GlobalVars.SSshuttle.emergency.timeLeft();

					if ( GlobalVars.SSshuttle.emergency.mode < 3 ) {
						dat += "ETA: <a href='?_src_=holder;edit_shuttle_time=1'>" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) + "</a><BR>";
						dat += "<a href='?_src_=holder;call_shuttle=2'>Send Back</a><br>";
					} else {
						dat += "ETA: <a href='?_src_=holder;edit_shuttle_time=1'>" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) + "</a><BR>";
					}
				}
				dat += "<B>Continuous Round Status</B><BR>";
				dat += "<a href='?_src_=holder;toggle_continuous=1'>" + ( Lang13.Bool( GlobalVars.config.continuous[GlobalVars.ticker.mode.config_tag] ) ? "Continue if antagonists die" : "End on antagonist death" ) + "</a>";

				if ( Lang13.Bool( GlobalVars.config.continuous[GlobalVars.ticker.mode.config_tag] ) ) {
					dat += ", <a href='?_src_=holder;toggle_midround_antag=1'>" + ( Lang13.Bool( GlobalVars.config.midround_antag[GlobalVars.ticker.mode.config_tag] ) ? "creating replacement antagonists" : "not creating new antagonists" ) + "</a><BR>";
				} else {
					dat += "<BR>";
				}

				if ( Lang13.Bool( GlobalVars.config.midround_antag[GlobalVars.ticker.mode.config_tag] ) ) {
					dat += "Time limit: <a href='?_src_=holder;alter_midround_time_limit=1'>" + GlobalVars.config.midround_antag_time_check + " minutes into round</a><BR>";
					dat += "Living crew limit: <a href='?_src_=holder;alter_midround_life_limit=1'>" + GlobalVars.config.midround_antag_life_check * 100 + "% of crew alive</a><BR>";
					dat += "If limits past: <a href='?_src_=holder;toggle_noncontinuous_behavior=1'>" + ( GlobalVars.ticker.mode.round_ends_with_antag_death ? "End The Round" : "Continue As Extended" ) + "</a><BR>";
				}
				dat += "<BR>";
				dat += new Txt( "<a href='?_src_=holder;end_round=" ).Ref( Task13.User ).str( "'>End Round Now</a><br>" ).ToString();
				dat += "<a href='?_src_=holder;delay_round_end=1'>" + ( GlobalVars.ticker.delay_end ? "End Round Normally" : "Delay Round End" ) + "</a><br>";

				if ( GlobalVars.ticker.mode.syndicates.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Syndicates</B></td><td></td></tr>";

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.syndicates, typeof(Mind) )) {
						N = _a;
						
						M = N.current;

						if ( Lang13.Bool( M ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M ).str( "'>" ).item( M.real_name ).str( "</a>" ).item( ( Lang13.Bool( M.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M ).str( "'>FLW</a></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><i><a href='?_src_=vars;Vars=" ).Ref( N ).str( "'>" ).item( N.name ).str( "(" ).item( N.key ).str( ")</a> Nuclear Operative Body destroyed!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + N.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table><br><table><tr><td><B>Nuclear Disk(s)</B></td></tr>";

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.poi_list, typeof(Obj_Item_Weapon_Disk_Nuclear) )) {
						N2 = _b;
						
						dat += "<tr><td>" + N2.name + ", ";
						disk_loc = N2.loc;

						while (!( disk_loc is Tile )) {
							
							if ( disk_loc is Mob ) {
								M2 = disk_loc;
								dat += new Txt( "carried by <a href='?_src_=holder;adminplayeropts=" ).Ref( M2 ).str( "'>" ).item( ((dynamic)M2).real_name ).str( "</a> " ).ToString();
							}

							if ( disk_loc is Obj ) {
								O = disk_loc;
								dat += new Txt( "in " ).a( O.name ).item().str( " " ).ToString();
							}
							disk_loc = disk_loc.loc;
						}
						dat += "in " + disk_loc.loc + " at (" + disk_loc.x + ", " + disk_loc.y + ", " + disk_loc.z + ")</td></tr>";
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.head_revolutionaries.len != 0 || GlobalVars.ticker.mode.revolutionaries.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Revolutionaries</B></td><td></td></tr>";

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.ticker.mode.head_revolutionaries, typeof(Mind) )) {
						N3 = _c;
						
						M3 = N3.current;

						if ( !Lang13.Bool( M3 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( N3 ).str( "'>" ).item( N3.name ).str( "(" ).item( N3.key ).str( ")</a><i>Head Revolutionary body destroyed!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + N3.key + "'>PM</A></td></tr>";
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M3 ).str( "'>" ).item( M3.real_name ).str( "</a> <b>(Leader)</b>" ).item( ( Lang13.Bool( M3.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M3.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M3.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M3 ).str( "'>FLW</a></td></tr>" ).ToString();
						}
					}

					foreach (dynamic _d in Lang13.Enumerate( GlobalVars.ticker.mode.revolutionaries, typeof(Mind) )) {
						N4 = _d;
						
						M4 = N4.current;

						if ( Lang13.Bool( M4 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M4 ).str( "'>" ).item( M4.real_name ).str( "</a>" ).item( ( Lang13.Bool( M4.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M4.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M4.ckey + "'>PM</A></td></tr>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M4 ).str( "'>FLW</a></td>" ).ToString();
						}
					}
					dat += "</table><table cellspacing=5><tr><td><B>Target(s)</B></td><td></td><td><B>Location</B></td></tr>";

					foreach (dynamic _e in Lang13.Enumerate( ((GameMode)GlobalVars.ticker.mode).get_living_heads(), typeof(Mind) )) {
						N5 = _e;
						
						M5 = N5.current;

						if ( Lang13.Bool( M5 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M5 ).str( "'>" ).item( M5.real_name ).str( "</a>" ).item( ( Lang13.Bool( M5.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M5.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M5.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M5 ).str( "'>FLW</a></td>" ).ToString();
							mob_loc = GlobalFuncs.get_turf( M5 );
							dat += "<td>" + mob_loc.loc + "</td></tr>";
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( N5 ).str( "'>" ).item( N5.name ).str( "(" ).item( N5.key ).str( ")</a><i>Head body destroyed!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + N5.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				foreach (dynamic _h in Lang13.Enumerate( GlobalVars.ticker.mode.gangs, typeof(Gang) )) {
					G = _h;
					
					dat += new Txt( "<br><table cellspacing=5><tr><td><B>" ).item( G.name ).str( " Gang: <a href='?_src_=holder;gangpoints=" ).Ref( G ).str( "'>" ).item( G.points ).str( " Influence</a> | " ).item( Num13.Round( G.territory.len / GlobalVars.start_state.num_territories * 100, 1 ) ).str( "% Control</B></td><td></td></tr>" ).ToString();

					foreach (dynamic _f in Lang13.Enumerate( G.bosses, typeof(Mind) )) {
						N6 = _f;
						
						M6 = N6.current;

						if ( !Lang13.Bool( M6 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( N6 ).str( "'>" ).item( N6.name ).str( "(" ).item( N6.key ).str( ")</a><i>Gang Boss body destroyed!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + N6.key + "'>PM</A></td></tr>";
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M6 ).str( "'>" ).item( M6.real_name ).str( "</a> <b>(Boss)</b>" ).item( ( Lang13.Bool( M6.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M6.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M6.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M6 ).str( "'>FLW</a></td></tr>" ).ToString();
						}
					}

					foreach (dynamic _g in Lang13.Enumerate( G.gangsters, typeof(Mind) )) {
						N7 = _g;
						
						M7 = N7.current;

						if ( Lang13.Bool( M7 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M7 ).str( "'>" ).item( M7.real_name ).str( "</a>" ).item( ( Lang13.Bool( M7.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M7.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M7.ckey + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.changelings.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Changelings</B></td><td></td><td></td></tr>";

					foreach (dynamic _i in Lang13.Enumerate( GlobalVars.ticker.mode.changelings, typeof(Mind) )) {
						changeling = _i;
						
						M8 = changeling.current;

						if ( Lang13.Bool( M8 ) ) {
							dat += new Txt( "<tr><td>" ).item( M8.mind.changeling.changelingID ).str( " as <a href='?_src_=holder;adminplayeropts=" ).Ref( M8 ).str( "'>" ).item( M8.real_name ).str( "</a>" ).item( ( Lang13.Bool( M8.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M8.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M8.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M8 ).str( "'>FLW</a></td>" ).ToString();
							dat += new Txt( "<td><A HREF='?_src_=holder;traitor=" ).Ref( M8 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( changeling ).str( "'>" ).item( changeling.name ).str( "(" ).item( changeling.key ).str( ")</a><i>Changeling body destroyed!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + changeling.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.wizards.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Wizards</B></td><td></td><td></td></tr>";

					foreach (dynamic _j in Lang13.Enumerate( GlobalVars.ticker.mode.wizards, typeof(Mind) )) {
						wizard = _j;
						
						M9 = wizard.current;

						if ( Lang13.Bool( M9 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M9 ).str( "'>" ).item( M9.real_name ).str( "</a>" ).item( ( Lang13.Bool( M9.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M9.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M9.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M9 ).str( "'>FLW</a></td>" ).ToString();
							dat += new Txt( "<td><A HREF='?_src_=holder;traitor=" ).Ref( M9 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( wizard ).str( "'>" ).item( wizard.name ).str( "(" ).item( wizard.key ).str( ")</a><i>Wizard body destroyed!</i></td></tr>" ).ToString();
							dat += "<td><A href='?priv_msg=" + wizard.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.apprentices.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Apprentice</B></td><td></td><td></td></tr>";

					foreach (dynamic _k in Lang13.Enumerate( GlobalVars.ticker.mode.apprentices, typeof(Mind) )) {
						apprentice = _k;
						
						M10 = apprentice.current;

						if ( Lang13.Bool( M10 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M10 ).str( "'>" ).item( M10.real_name ).str( "</a>" ).item( ( Lang13.Bool( M10.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M10.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M10.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M10 ).str( "'>FLW</a></td>" ).ToString();
							dat += new Txt( "<td><A HREF='?_src_=holder;traitor=" ).Ref( M10 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( apprentice ).str( "'>" ).item( apprentice.name ).str( "(" ).item( apprentice.key ).str( ")</a><i>Apprentice body destroyed!!</i></td></tr>" ).ToString();
							dat += "<td><A href='?priv_msg=" + apprentice.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.cult.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Cultists</B></td><td></td></tr>";

					foreach (dynamic _l in Lang13.Enumerate( GlobalVars.ticker.mode.cult, typeof(Mind) )) {
						N8 = _l;
						
						M11 = N8.current;

						if ( Lang13.Bool( M11 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M11 ).str( "'>" ).item( M11.real_name ).str( "</a>" ).item( ( Lang13.Bool( M11.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M11.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M11.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M11 ).str( "'>FLW</a></td></tr>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.red_deities.len != 0 || GlobalVars.ticker.mode.red_deity_prophets.len != 0 || GlobalVars.ticker.mode.blue_deity_prophets.len != 0 || GlobalVars.ticker.mode.red_deity_followers.len != 0 || GlobalVars.ticker.mode.blue_deity_followers.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Red Deity</B></td><td></td></tr>";

					foreach (dynamic _m in Lang13.Enumerate( GlobalVars.ticker.mode.red_deities, typeof(Mind) )) {
						N9 = _m;
						
						M12 = N9.current;

						if ( Lang13.Bool( M12 ) ) {
							dat += new Txt( "<tr><td>Red Deity: <a href='?_src_=holder;adminplayeropts=" ).Ref( M12 ).str( "'>" ).item( M12.real_name ).str( "</a>" ).item( ( Lang13.Bool( M12.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M12.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.blue_deities.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Blue Deity</B></td><td></td></tr>";

					foreach (dynamic _n in Lang13.Enumerate( GlobalVars.ticker.mode.blue_deities, typeof(Mind) )) {
						N10 = _n;
						
						M13 = N10.current;

						if ( Lang13.Bool( M13 ) ) {
							dat += new Txt( "<tr><td>Blue Deity: <a href='?_src_=holder;adminplayeropts=" ).Ref( M13 ).str( "'>" ).item( M13.real_name ).str( "</a>" ).item( ( Lang13.Bool( M13.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M13.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.red_deity_prophets.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Red Deity Prophets</B></td><td></td></tr>";

					foreach (dynamic _o in Lang13.Enumerate( GlobalVars.ticker.mode.red_deity_prophets, typeof(Mind) )) {
						N11 = _o;
						
						M14 = N11.current;

						if ( Lang13.Bool( M14 ) ) {
							dat += new Txt( "<tr><td>Red Deity Prophet: <a href='?_src_=holder;adminplayeropts=" ).Ref( M14 ).str( "'>" ).item( M14.real_name ).str( "</a>" ).item( ( Lang13.Bool( M14.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M14.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.blue_deity_prophets.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Blue Deity Prophets</B></td><td></td></tr>";

					foreach (dynamic _p in Lang13.Enumerate( GlobalVars.ticker.mode.blue_deity_prophets, typeof(Mind) )) {
						N12 = _p;
						
						M15 = N12.current;

						if ( Lang13.Bool( M15 ) ) {
							dat += new Txt( "<tr><td>Blue Deity Prophet: <a href='?_src_=holder;adminplayeropts=" ).Ref( M15 ).str( "'>" ).item( M15.real_name ).str( "</a>" ).item( ( Lang13.Bool( M15.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M15.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.red_deity_followers.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Red Deity Followers</B></td><td></td></tr>";

					foreach (dynamic _q in Lang13.Enumerate( GlobalVars.ticker.mode.red_deity_followers, typeof(Mind) )) {
						N13 = _q;
						
						M16 = N13.current;

						if ( Lang13.Bool( M16 ) ) {
							dat += new Txt( "<tr><td>Red Deity Followers: <a href='?_src_=holder;adminplayeropts=" ).Ref( M16 ).str( "'>" ).item( M16.real_name ).str( "</a>" ).item( ( Lang13.Bool( M16.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M16.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.blue_deity_followers.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Blue Deity Followers</B></td><td></td></tr>";

					foreach (dynamic _r in Lang13.Enumerate( GlobalVars.ticker.mode.blue_deity_followers, typeof(Mind) )) {
						N14 = _r;
						
						M17 = N14.current;

						if ( Lang13.Bool( M17 ) ) {
							dat += new Txt( "<tr><td>Blue Deity Followers: <a href='?_src_=holder;adminplayeropts=" ).Ref( M17 ).str( "'>" ).item( M17.real_name ).str( "</a>" ).item( ( Lang13.Bool( M17.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M17.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.traitors.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Traitors</B></td><td></td><td></td></tr>";

					foreach (dynamic _s in Lang13.Enumerate( GlobalVars.ticker.mode.traitors, typeof(Mind) )) {
						traitor = _s;
						
						M18 = traitor.current;

						if ( Lang13.Bool( M18 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M18 ).str( "'>" ).item( M18.real_name ).str( "</a>" ).item( ( Lang13.Bool( M18.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M18.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M18.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M18 ).str( "'>FLW</a></td>" ).ToString();
							dat += new Txt( "<td><A HREF='?_src_=holder;traitor=" ).Ref( M18 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( traitor ).str( "'>" ).item( traitor.name ).str( "(" ).item( traitor.key ).str( ")</a><i>Traitor body destroyed!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + traitor.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.shadows.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Shadowlings</B></td><td></td></tr>";

					foreach (dynamic _t in Lang13.Enumerate( GlobalVars.ticker.mode.shadows, typeof(Mind) )) {
						N15 = _t;
						
						M19 = N15.current;

						if ( Lang13.Bool( M19 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M19 ).str( "'>" ).item( M19.real_name ).str( "</a>" ).item( ( Lang13.Bool( M19.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M19.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M19.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M19 ).str( "'>FLW</a></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( N15 ).str( "'>" ).item( N15.name ).str( "(" ).item( N15.key ).str( ")</a><i>Shadowling body destroyed!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + N15.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.thralls.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Shadowling Thralls</B></td><td></td></tr>";

					foreach (dynamic _u in Lang13.Enumerate( GlobalVars.ticker.mode.thralls, typeof(Mind) )) {
						N16 = _u;
						
						M20 = N16.current;

						if ( Lang13.Bool( M20 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M20 ).str( "'>" ).item( M20.real_name ).str( "</a>" ).item( ( Lang13.Bool( M20.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M20.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M20.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M20 ).str( "'>FLW</a></td></tr>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.abductors.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Abductors</B></td><td></td><td></td></tr>";

					foreach (dynamic _v in Lang13.Enumerate( GlobalVars.ticker.mode.abductors, typeof(Mind) )) {
						abductor = _v;
						
						M21 = abductor.current;

						if ( Lang13.Bool( M21 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M21 ).str( "'>" ).item( M21.real_name ).str( "</a>" ).item( ( Lang13.Bool( M21.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M21.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M21.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M21 ).str( "'>FLW</a></td>" ).ToString();
							dat += new Txt( "<td><A HREF='?_src_=holder;traitor=" ).Ref( M21 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( abductor ).str( "'>" ).item( abductor.name ).str( "(" ).item( abductor.key ).str( ")</a><i>Abductor body destroyed!</i></td></tr>" ).ToString();
							dat += "<td><A href='?priv_msg=" + abductor.key + "'>PM</A></td>";
						}
					}
					dat += "</table>";
					dat += "<br><table cellspacing=5><tr><td><B>Abductees</B></td><td></td><td></td></tr>";

					foreach (dynamic _x in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Abductor_Experiment) )) {
						E = _x;
						

						foreach (dynamic _w in Lang13.Enumerate( E.abductee_minds, typeof(Mind) )) {
							abductee = _w;
							
							M22 = abductee.current;

							if ( Lang13.Bool( M22 ) ) {
								dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M22 ).str( "'>" ).item( M22.real_name ).str( "</a>" ).item( ( Lang13.Bool( M22.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M22.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
								dat += "<td><A href='?priv_msg=" + M22.ckey + "'>PM</A></td>";
								dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M22 ).str( "'>FLW</a></td>" ).ToString();
								dat += new Txt( "<td><A HREF='?_src_=holder;traitor=" ).Ref( M22 ).str( "'>Show Objective</A></td></tr>" ).ToString();
							} else {
								dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( abductee ).str( "'>" ).item( abductee.name ).str( "(" ).item( abductee.key ).str( ")</a><i>Abductee body destroyed!</i></td>" ).ToString();
								dat += "<td><A href='?priv_msg=" + abductee.key + "'>PM</A></td></tr>";
							}
						}
					}
					dat += "</table>";
				}
				blob_minds = new ByTable();

				foreach (dynamic _y in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Camera_Blob) )) {
					B = _y;
					
					blob_minds.Or( B.mind );
				}

				if ( GlobalVars.ticker.mode is GameMode_Blob || blob_minds.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Blob</B></td><td></td><td></td></tr>";

					if ( GlobalVars.ticker.mode is GameMode_Blob ) {
						mode = GlobalVars.ticker.mode;
						blob_minds.Or( mode.infected_crew );
						dat += "<tr><td><i>Progress: " + GlobalVars.blobs_legit.len + "/" + mode.blobwincount + "</i></td></tr>";
					}

					foreach (dynamic _z in Lang13.Enumerate( blob_minds, typeof(Mind) )) {
						blob = _z;
						
						M23 = blob.current;

						if ( Lang13.Bool( M23 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M23 ).str( "'>" ).item( M23.real_name ).str( "</a>" ).item( ( Lang13.Bool( M23.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M23.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M23.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M23 ).str( "'>FLW</a></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( blob ).str( "'>" ).item( blob.name ).str( "(" ).item( blob.key ).str( ")</a><i>Blob not found!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + blob.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode is GameMode_Monkey ) {
					mode2 = GlobalVars.ticker.mode;
					dat += "<br><table cellspacing=5><tr><td><B>Monkey</B></td><td></td><td></td></tr>";

					foreach (dynamic _ba in Lang13.Enumerate( mode2.ape_infectees, typeof(Mind) )) {
						eek = _ba;
						
						M24 = eek.current;

						if ( Lang13.Bool( M24 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M24 ).str( "'>" ).item( M24.real_name ).str( "</a>" ).item( ( Lang13.Bool( M24.client ) ? "" : " <i>(ghost)</i>" ) ).item( ( Convert.ToInt32( M24.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + M24.ckey + "'>PM</A></td>";
							dat += new Txt( "<td><A href='?_src_=holder;adminplayerobservefollow=" ).Ref( M24 ).str( "'>FLW</a></td></tr>" ).ToString();
						} else {
							dat += new Txt( "<tr><td><a href='?_src_=vars;Vars=" ).Ref( eek ).str( "'>" ).item( eek.name ).str( "(" ).item( eek.key ).str( ")</a><i>Monkey not found!</i></td>" ).ToString();
							dat += "<td><A href='?priv_msg=" + eek.key + "'>PM</A></td></tr>";
						}
					}
					dat += "</table>";
				}
				dat += "</body></html>";
				Interface13.Browse( Task13.User, dat, "window=roundstatus;size=420x500" );
			} else {
				Interface13.Alert( "The game hasn't started yet!" );
			}
			return;
		}

		// Function from file: player_panel.dm
		public void player_panel_new(  ) {
			string dat = null;
			ByTable mobs = null;
			int i = 0;
			dynamic M = null;
			string color = null;
			int is_antagonist = 0;
			string M_job = null;
			dynamic O = null;
			string M_name = null;
			string M_rname = null;
			string M_key = null;

			
			if ( !GlobalFuncs.check_rights() ) {
				return;
			}
			dat = "<html><head><title>Player Panel</title></head>";
			dat += @"

		<head>
			<script type='text/javascript'>

				var locked_tabs = new Array();

				function updateSearch(){


					var filter_text = document.getElementById('filter');
					var filter = filter_text.value.toLowerCase();

					if(complete_list != null && complete_list != """"){
						var mtbl = document.getElementById(""maintable_data_archive"");
						mtbl.innerHTML = complete_list;
					}

					if(filter.value == """"){
						return;
					}else{

						var maintable_data = document.getElementById('maintable_data');
						var ltr = maintable_data.getElementsByTagName(""tr"");
						for ( var i = 0; i < ltr.length; ++i )
						{
							try{
								var tr = ltr[i];
								if(tr.getAttribute(""id"").indexOf(""data"") != 0){
									continue;
								}
								var ltd = tr.getElementsByTagName(""td"");
								var td = ltd[0];
								var lsearch = td.getElementsByTagName(""b"");
								var search = lsearch[0];
								//var inner_span = li.getElementsByTagName(""span"")[1] //Should only ever contain one element.
								//document.write(""<p>""+search.innerText+""<br>""+filter+""<br>""+search.innerText.indexOf(filter))
								if ( search.innerText.toLowerCase().indexOf(filter) == -1 )
								{
									//document.write(""a"");
									//ltr.removeChild(tr);
									td.innerHTML = """";
									i--;
								}
							}catch(err) {   }
						}
					}

					var count = 0;
					var index = -1;
					var debug = document.getElementById(""debug"");

					locked_tabs = new Array();

				}

				function expand(id,job,name,real_name,image,key,ip,antagonist,ref){

					clearAll();

					var span = document.getElementById(id);
					var ckey = key.toLowerCase().replace(/[^a-z@0-9]+/g,"""");

					body = ""<table><tr><td>"";

					body += ""</td><td align='center'>"";

					body += ""<font size='2'><b>""+job+"" ""+name+""</b><br><b>Real name ""+real_name+""</b><br><b>Played by ""+key+"" (""+ip+"")</b></font>""

					body += ""</td><td align='center'>"";

					body += ""<a href='?_src_=holder;adminplayeropts=""+ref+""'>PP</a> - ""
					body += ""<a href='?_src_=holder;shownoteckey=""+ckey+""'>N</a> - ""
					body += ""<a href='?_src_=vars;Vars=""+ref+""'>VV</a> - ""
					body += ""<a href='?_src_=holder;traitor=""+ref+""'>TP</a> - ""
					body += ""<a href='?priv_msg=""+ckey+""'>PM</a> - ""
					body += ""<a href='?_src_=holder;subtlemessage=""+ref+""'>SM</a> - ""
					body += ""<a href='?_src_=holder;adminplayerobservefollow=""+ref+""'>FLW</a><br>""
					if(antagonist > 0)
						body += ""<font size='2'><a href='?_src_=holder;secrets=check_antagonist'><font color='red'><b>Antagonist</b></font></a></font>"";

					body += ""</td></tr></table>"";


					span.innerHTML = body
				}

				function clearAll(){
					var spans = document.getElementsByTagName('span');
					for(var i = 0; i < spans.length; i++){
						var span = spans[i];

						var id = span.getAttribute(""id"");

						if(!(id.indexOf(""item"")==0))
							continue;

						var pass = 1;

						for(var j = 0; j < locked_tabs.length; j++){
							if(locked_tabs[j]==id){
								pass = 0;
								break;
							}
						}

						if(pass != 1)
							continue;




						span.innerHTML = """";
					}
				}

				function addToLocked(id,link_id,notice_span_id){
					var link = document.getElementById(link_id);
					var decision = link.getAttribute(""name"");
					if(decision == ""1""){
						link.setAttribute(""name"",""2"");
					}else{
						link.setAttribute(""name"",""1"");
						removeFromLocked(id,link_id,notice_span_id);
						return;
					}

					var pass = 1;
					for(var j = 0; j < locked_tabs.length; j++){
						if(locked_tabs[j]==id){
							pass = 0;
							break;
						}
					}
					if(!pass)
						return;
					locked_tabs.push(id);
					var notice_span = document.getElementById(notice_span_id);
					notice_span.innerHTML = ""<font color='red'>Locked</font> "";
					//link.setAttribute(""onClick"",""attempt('""+id+""','""+link_id+""','""+notice_span_id+""');"");
					//document.write(""removeFromLocked('""+id+""','""+link_id+""','""+notice_span_id+""')"");
					//document.write(""aa - ""+link.getAttribute(""onClick""));
				}

				function attempt(ab){
					return ab;
				}

				function removeFromLocked(id,link_id,notice_span_id){
					//document.write(""a"");
					var index = 0;
					var pass = 0;
					for(var j = 0; j < locked_tabs.length; j++){
						if(locked_tabs[j]==id){
							pass = 1;
							index = j;
							break;
						}
					}
					if(!pass)
						return;
					locked_tabs[index] = """";
					var notice_span = document.getElementById(notice_span_id);
					notice_span.innerHTML = """";
					//var link = document.getElementById(link_id);
					//link.setAttribute(""onClick"",""addToLocked('""+id+""','""+link_id+""','""+notice_span_id+""')"");
				}

				function selectTextField(){
					var filter_text = document.getElementById('filter');
					filter_text.focus();
					filter_text.select();
				}

			</script>
		</head>


	";
			dat += "<body onload='selectTextField(); updateSearch();' onkeyup='updateSearch();'>";
			dat += @"

		<table width='560' align='center' cellspacing='0' cellpadding='5' id='maintable'>
			<tr id='title_tr'>
				<td align='center'>
					<font size='5'><b>Player panel</b></font><br>
					Hover over a line to see more information - <a href='?_src_=holder;check_antagonist=1'>Check antagonists</a> - Kick <a href='?_src_=holder;kick_all_from_lobby=1;afkonly=0'>everyone</a>/<a href='?_src_=holder;kick_all_from_lobby=1;afkonly=1'>AFKers</a> in lobby
					<p>
				</td>
			</tr>
			<tr id='search_tr'>
				<td align='center'>
					<b>Search:</b> <input type='text' id='filter' value='' style='width:300px;'>
				</td>
			</tr>
	</table>

	";
			dat += "\n		<span id='maintable_data_archive'>\n		<table width='560' align='center' cellspacing='0' cellpadding='5' id='maintable_data'>";
			mobs = GlobalFuncs.sortmobs();
			i = 1;

			foreach (dynamic _a in Lang13.Enumerate( mobs )) {
				M = _a;
				

				if ( Lang13.Bool( M.ckey ) ) {
					color = "#e6e6e6";

					if ( i % 2 == 0 ) {
						color = "#f2f2f2";
					}
					is_antagonist = GlobalFuncs.is_special_character( M );
					M_job = "";

					if ( M is Mob_Living ) {
						
						if ( M is Mob_Living_Carbon ) {
							
							if ( M is Mob_Living_Carbon_Human ) {
								M_job = M.job;
							} else if ( M is Mob_Living_Carbon_Monkey ) {
								M_job = "Monkey";
							} else if ( M is Mob_Living_Carbon_Alien ) {
								
								if ( M is Mob_Living_Carbon_Alien_Larva ) {
									M_job = "Alien larva";
								} else {
									M_job = "Alien";
								}
							} else {
								M_job = "Carbon-based";
							}
						} else if ( M is Mob_Living_Silicon ) {
							
							if ( M is Mob_Living_Silicon_Ai ) {
								M_job = "AI";
							} else if ( M is Mob_Living_Silicon_Pai ) {
								M_job = "pAI";
							} else if ( M is Mob_Living_Silicon_Robot ) {
								M_job = "Cyborg";
							} else {
								M_job = "Silicon-based";
							}
						} else if ( M is Mob_Living_SimpleAnimal ) {
							
							if ( M is Mob_Living_SimpleAnimal_Pet_Dog_Corgi ) {
								M_job = "Corgi";
							} else if ( M is Mob_Living_SimpleAnimal_Slime ) {
								M_job = "slime";
							} else {
								M_job = "Animal";
							}
						} else {
							M_job = "Living";
						}
					} else if ( M is Mob_NewPlayer ) {
						M_job = "New player";
					} else if ( M is Mob_Dead_Observer ) {
						O = M;

						if ( O.started_as_observer ) {
							M_job = "Observer";
						} else {
							M_job = "Ghost";
						}
					}
					M_name = String13.HtmlEncode( M.name );
					M_rname = String13.HtmlEncode( M.real_name );
					M_key = String13.HtmlEncode( M.key );
					dat += new Txt( "\n\n				<tr id='data" ).item( i ).str( "' name='" ).item( i ).str( "' onClick=\"addToLocked('item" ).item( i ).str( "','data" ).item( i ).str( "','notice_span" ).item( i ).str( "')\">\n					<td align='center' bgcolor='" ).item( color ).str( "'>\n						<span id='notice_span" ).item( i ).str( "'></span>\n						<a id='link" ).item( i ).str( "'\n						onmouseover='expand(\"item" ).item( i ).str( "\",\"" ).item( M_job ).str( "\",\"" ).item( M_name ).str( "\",\"" ).item( M_rname ).str( "\",\"--unused--\",\"" ).item( M_key ).str( "\",\"" ).item( M.lastKnownIP ).str( "\"," ).item( is_antagonist ).str( ",\"" ).Ref( M ).str( "\")'\n						>\n						<b id='search" ).item( i ).str( "'>" ).item( M_name ).str( " - " ).item( M_rname ).str( " - " ).item( M_key ).str( " (" ).item( M_job ).str( ")</b>\n						</a>\n						<br><span id='item" ).item( i ).str( @"'></span>
					</td>
				</tr>

			" ).ToString();
					i++;
				}
			}
			dat += @"
		</table>
		</span>

		<script type='text/javascript'>
			var maintable = document.getElementById(""maintable_data_archive"");
			var complete_list = maintable.innerHTML;
		</script>
	</body></html>
	";
			Interface13.Browse( Task13.User, dat, "window=players;size=600x480" );
			return;
		}

		// Function from file: NewBan.dm
		public void unbanpanel(  ) {
			int count = 0;
			string dat = null;
			dynamic A = null;
			string _ref = null;
			dynamic key = null;
			dynamic id = null;
			dynamic ip = null;
			dynamic reason = null;
			dynamic by = null;
			dynamic expiry = null;

			count = 0;
			GlobalVars.Banlist.cd = "/base";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlist.dir )) {
				A = _a;
				
				count++;
				GlobalVars.Banlist.cd = "/base/" + A;
				_ref = new Txt().Ref( this ).ToString();
				key = GlobalVars.Banlist["key"];
				id = GlobalVars.Banlist["id"];
				ip = GlobalVars.Banlist["ip"];
				reason = GlobalVars.Banlist["reason"];
				by = GlobalVars.Banlist["bannedby"];
				expiry = null;

				if ( Lang13.Bool( GlobalVars.Banlist["temp"] ) ) {
					expiry = GlobalFuncs.GetExp( Convert.ToDouble( GlobalVars.Banlist["minutes"] ) );

					if ( !Lang13.Bool( expiry ) ) {
						expiry = "Removal Pending";
					}
				} else {
					expiry = "Permaban";
				}
				dat += "<tr><td><A href='?src=" + _ref + ";unbanf=" + key + id + "'>(U)</A><A href='?src=" + _ref + ";unbane=" + key + id + "'>(E)</A> Key: <B>" + key + "</B></td><td>ComputerID: <B>" + id + "</B></td><td>IP: <B>" + ip + "</B></td><td> " + expiry + "</td><td>(By: " + by + ")</td><td>(Reason: " + reason + ")</td></tr>";
			}
			dat += "</table>";
			dat = "<HR><B>Bans:</B> <FONT COLOR=blue>(U) = Unban , (E) = Edit Ban</FONT> - <FONT COLOR=green>(" + count + " Bans)</FONT><HR><table border=1 rules=all frame=void cellspacing=0 cellpadding=3 >" + dat;
			Interface13.Browse( Task13.User, dat, "window=unbanp;size=875x400" );
			return;
		}

		// Function from file: holder2.dm
		public bool check_if_greater_rights_than_holder( Admins other = null ) {
			
			if ( !( other != null ) ) {
				return true;
			}

			if ( this.rank.rights == 65535 ) {
				return true;
			}

			if ( this == other ) {
				return true;
			}

			if ( this.rank.rights != other.rank.rights ) {
				
				if ( ( this.rank.rights & other.rank.rights ) == other.rank.rights ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: holder2.dm
		public void disassociate(  ) {
			
			if ( this.owner != null ) {
				GlobalVars.admins.Remove( this.owner );
				this.owner.remove_admin_verbs();
				this.owner.holder = null;
				this.owner = null;
			}
			return;
		}

		// Function from file: holder2.dm
		public void associate( dynamic C = null ) {
			
			if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
				this.owner = C;
				this.owner.holder = this;
				this.owner.add_admin_verbs();
				this.owner.verbs.Remove( typeof(Client).GetMethod( "readmin" ) );
				GlobalVars.admins.Or( C );
			}
			return;
		}

		// Function from file: create_turf.dm
		public void create_turf( Mob user = null ) {
			string turfjs = null;

			
			if ( !Lang13.Bool( GlobalVars.create_turf_html ) ) {
				turfjs = null;
				turfjs = GlobalFuncs.jointext( Lang13.GetTypes( typeof(Tile) ), ";" );
				GlobalVars.create_turf_html = File13.Read( "html/create_object.html" );
				GlobalVars.create_turf_html = GlobalFuncs.replacetext( GlobalVars.create_turf_html, "null /* object types */", "\"" + turfjs + "\"" );
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( GlobalVars.create_turf_html, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=create_turf;size=425x475" );
			return;
		}

		// Function from file: create_object.dm
		public void quick_create_object( Mob user = null ) {
			dynamic path = null;
			dynamic html_form = null;
			string objectjs = null;

			path = Interface13.Input( "Select the path of the object you wish to create.", "Path", typeof(Obj), null, GlobalVars.create_object_forms, InputType.Any );
			html_form = GlobalVars.create_object_forms[path];

			if ( !Lang13.Bool( html_form ) ) {
				objectjs = GlobalFuncs.jointext( Lang13.GetTypes( path ), ";" );
				html_form = File13.Read( "html/create_object.html" );
				html_form = GlobalFuncs.replacetext( html_form, "null /* object types */", "\"" + objectjs + "\"" );
				GlobalVars.create_object_forms[path] = html_form;
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( html_form, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=qco" + path + ";size=425x475" );
			return;
		}

		// Function from file: create_object.dm
		public void create_object( Mob user = null ) {
			string objectjs = null;

			
			if ( !Lang13.Bool( GlobalVars.create_object_html ) ) {
				objectjs = null;
				objectjs = GlobalFuncs.jointext( Lang13.GetTypes( typeof(Obj) ), ";" );
				GlobalVars.create_object_html = File13.Read( "html/create_object.html" );
				GlobalVars.create_object_html = GlobalFuncs.replacetext( GlobalVars.create_object_html, "null /* object types */", "\"" + objectjs + "\"" );
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( GlobalVars.create_object_html, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=create_object;size=425x475" );
			return;
		}

		// Function from file: create_mob.dm
		public void create_mob( Mob user = null ) {
			string mobjs = null;

			
			if ( !Lang13.Bool( GlobalVars.create_mob_html ) ) {
				mobjs = null;
				mobjs = GlobalFuncs.jointext( Lang13.GetTypes( typeof(Mob) ), ";" );
				GlobalVars.create_mob_html = File13.Read( "html/create_object.html" );
				GlobalVars.create_mob_html = GlobalFuncs.replacetext( GlobalVars.create_mob_html, "null /* object types */", "\"" + mobjs + "\"" );
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( GlobalVars.create_mob_html, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=create_mob;size=425x475" );
			return;
		}

		// Function from file: admin_ranks.dm
		public void updateranktodb( string ckey = null, dynamic newrank = null ) {
			string sql_ckey = null;
			string sql_admin_rank = null;
			DBQuery query_update = null;

			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			sql_ckey = GlobalFuncs.sanitizeSQL( ckey );
			sql_admin_rank = GlobalFuncs.sanitizeSQL( newrank );
			query_update = GlobalVars.dbcon.NewQuery( "UPDATE " + GlobalFuncs.format_table_name( "player" ) + " SET lastadminrank = '" + sql_admin_rank + "' WHERE ckey = '" + sql_ckey + "'" );
			query_update.Execute();
			return;
		}

		// Function from file: admin_ranks.dm
		public void edit_rights_topic( ByTable href_list = null ) {
			string adm_ckey = null;
			string task = null;
			string new_ckey = null;
			Admins D = null;
			AdminRank R = null;
			ByTable rank_names = null;
			dynamic new_rank = null;
			dynamic C = null;
			dynamic keyword = null;
			dynamic C2 = null;

			
			if ( !GlobalFuncs.check_rights( 128 ) ) {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted to edit the admin permissions without sufficient rights." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempted to edit the admin permissions without sufficient rights." );
				return;
			}
			task = href_list["editrights"];

			switch ((string)( task )) {
				case "add":
					new_ckey = String13.CKey( Interface13.Input( Task13.User, "New admin's ckey", "Admin ckey", null, null, InputType.Str | InputType.Null ) );

					if ( !Lang13.Bool( new_ckey ) ) {
						return;
					}

					if ( GlobalVars.admin_datums.Contains( new_ckey ) ) {
						Task13.User.WriteMsg( "<font color='red'>Error: Topic 'editrights': " + new_ckey + " is already an admin</font>" );
						return;
					}
					adm_ckey = new_ckey;
					task = "rank";
					break;
				default:
					adm_ckey = String13.CKey( href_list["ckey"] );

					if ( !Lang13.Bool( adm_ckey ) ) {
						Task13.User.WriteMsg( "<font color='red'>Error: Topic 'editrights': No valid ckey</font>" );
						return;
					}
					break;
			}
			D = GlobalVars.admin_datums[adm_ckey];

			switch ((string)( task )) {
				case "remove":
					
					if ( Interface13.Alert( "Are you sure you want to remove " + adm_ckey + "?", "Message", "Yes", "Cancel" ) == "Yes" ) {
						
						if ( !( D != null ) ) {
							return;
						}

						if ( !this.check_if_greater_rights_than_holder( D ) ) {
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted to remove " + adm_ckey + " from the admins list without sufficient rights." );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempted to remove " + adm_ckey + " from the admins list without sufficient rights." );
							return;
						}
						GlobalVars.admin_datums.Remove( adm_ckey );
						D.disassociate();
						this.updateranktodb( adm_ckey, "player" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " removed " + adm_ckey + " from the admins list" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + adm_ckey + " from the admins list" );
						this.log_admin_rank_modification( adm_ckey, "Removed" );
					}
					break;
				case "rank":
					R = null;
					rank_names = new ByTable(new object [] { "*New Rank*" });

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.admin_ranks, typeof(AdminRank) )) {
						R = _b;
						
						rank_names[R.name] = R;
					}
					new_rank = Interface13.Input( "Please select a rank", "New rank", null, null, rank_names, InputType.Null | InputType.Any );

					dynamic _c = new_rank; // Was a switch-case, sorry for the mess.
					if ( _c==null ) {
						return;
					} else if ( _c=="*New Rank*" ) {
						new_rank = String13.CKeyPreserveCase( Interface13.Input( "Please input a new rank", "New custom rank", null, null, null, InputType.Str | InputType.Null ) );

						if ( !Lang13.Bool( new_rank ) ) {
							return;
						}
					}

					if ( D != null ) {
						
						if ( !this.check_if_greater_rights_than_holder( D ) ) {
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted to change the rank of " + adm_ckey + " to " + new_rank + " without sufficient rights." );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempted to change the rank of " + adm_ckey + " to " + new_rank + " without sufficient rights." );
							return;
						}
					}
					R = rank_names[new_rank];

					if ( !( R != null ) ) {
						
						if ( D != null ) {
							R = new AdminRank( new_rank, D.rank.rights, D.rank.adds, D.rank.subs );
						} else {
							R = new AdminRank( new_rank );
						}
						GlobalVars.admin_ranks.Add( R );
					}

					if ( D != null ) {
						D.disassociate();
						D.rank = R;
					} else {
						D = new Admins( R, adm_ckey );
					}
					C = GlobalVars.directory[adm_ckey];
					D.associate( C );
					this.updateranktodb( adm_ckey, new_rank );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " edited the admin rank of " + adm_ckey + " to " + new_rank );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " edited the admin rank of " + adm_ckey + " to " + new_rank );
					this.log_admin_rank_modification( adm_ckey, new_rank );
					break;
				case "permissions":
					
					if ( !( D != null ) ) {
						return;
					}
					keyword = Interface13.Input( "Input permission keyword (one at a time):\ne.g. +BAN or -FUN or +/client/proc/someverb", "Permission toggle", null, null, null, InputType.Str | InputType.Null );

					if ( !Lang13.Bool( keyword ) ) {
						return;
					}

					if ( !this.check_keyword( keyword ) || !this.check_if_greater_rights_than_holder( D ) ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted to give " + adm_ckey + " the keyword " + keyword + " without sufficient rights." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempted to give " + adm_ckey + " the keyword " + keyword + " without sufficient rights." );
						return;
					}
					D.disassociate();

					if ( !( String13.FindIgnoreCase( D.rank.name, "(" + adm_ckey + ")", 1, 0 ) != 0 ) ) {
						D.rank = new AdminRank( "" + D.rank.name + "(" + adm_ckey + ")", D.rank.rights, D.rank.adds, D.rank.subs );
					}
					D.rank.process_keyword( keyword );
					C2 = GlobalVars.directory[adm_ckey];
					D.associate( C2 );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " added keyword " + keyword + " to permission of " + adm_ckey );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " added keyword " + keyword + " to permission of " + adm_ckey );
					this.log_admin_permission_modification( adm_ckey, D.rank.rights );
					break;
			}
			this.edit_admin_permissions();
			return;
		}

		// Function from file: admin_ranks.dm
		public bool check_keyword( dynamic word = null ) {
			dynamic flag = null;
			Type path = null;
			dynamic i = null;

			flag = GlobalFuncs.admin_keyword_to_flag( word );

			if ( Lang13.Bool( flag ) ) {
				return ( this.rank.rights & flag ) == flag;
			} else {
				path = GlobalFuncs.admin_keyword_to_path( word );

				foreach (dynamic _a in Lang13.Enumerate( this.owner.verbs )) {
					i = _a;
					

					if ( i == path ) {
						return true;
					}
				}
				return false;
			}
		}

		// Function from file: admin.dm
		public bool cmd_ghost_drag( Mob_Dead_Observer frommob = null, dynamic tomob = null ) {
			string question = null;
			string ask = null;

			
			if ( !GlobalFuncs.check_rights( 1024, false ) || !GlobalFuncs.check_rights( 4128, false ) ) {
				return false;
			}

			if ( !Lang13.Bool( frommob.ckey ) ) {
				return false;
			}
			question = "";

			if ( Lang13.Bool( tomob.ckey ) ) {
				question = "This mob already has a user (" + tomob.key + ") in control of it! ";
			}
			question += "Are you sure you want to place " + frommob.name + "(" + frommob.key + ") in control of " + tomob.name + "?";
			ask = Interface13.Alert( question, "Place ghost in control of mob?", "Yes", "No" );

			if ( ask != "Yes" ) {
				return true;
			}

			if ( !( frommob != null ) || !Lang13.Bool( tomob ) ) {
				return true;
			}
			((Mob)tomob).ghostize( false );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has put " + frommob.ckey + " in control of " + tomob.name + ".</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " stuffed " + frommob.ckey + " into " + tomob.name + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "CGD" );
			tomob.ckey = frommob.ckey;
			GlobalFuncs.qdel( frommob );
			return true;
		}

		// Function from file: admin.dm
		public void manage_free_slots(  ) {
			string dat = null;
			int count = 0;
			Job job = null;
			string J_title = null;
			string J_opPos = null;
			string J_totPos = null;
			int winheight = 0;

			
			if ( !GlobalFuncs.check_rights() ) {
				return;
			}
			dat = "<html><head><title>Manage Free Slots</title></head><body>";
			count = 0;

			if ( GlobalVars.ticker != null && !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( Task13.User, "You cannot manage jobs before the round starts!" );
				return;
			}

			if ( GlobalVars.SSjob != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job = _a;
					
					count++;
					J_title = String13.HtmlEncode( job.title );
					J_opPos = String13.HtmlEncode( job.total_positions - ( job.total_positions - job.current_positions ) );
					J_totPos = String13.HtmlEncode( job.total_positions );

					if ( Convert.ToDouble( job.total_positions ) < 0 ) {
						dat += "" + J_title + ": " + J_opPos + "   (unlimited)";
					} else {
						dat += "" + J_title + ": " + J_opPos + "/" + J_totPos;
					}

					if ( job.title == "AI" || job.title == "Cyborg" ) {
						dat += "   (Cannot Late Join)<br>";
						continue;
					}

					if ( Convert.ToDouble( job.total_positions ) >= 0 ) {
						dat += new Txt( "   <A href='?src=" ).Ref( this ).str( ";addjobslot=" ).item( job.title ).str( "'>Add</A>  |  " ).ToString();

						if ( Convert.ToDouble( job.total_positions ) > ( job.current_positions ??0) ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";removejobslot=" ).item( job.title ).str( "'>Remove</A>  |  " ).ToString();
						} else {
							dat += "Remove  |  ";
						}
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";unlimitjobslot=" ).item( job.title ).str( "'>Unlimit</A>" ).ToString();
					} else {
						dat += new Txt( "   <A href='?src=" ).Ref( this ).str( ";limitjobslot=" ).item( job.title ).str( "'>Limit</A>" ).ToString();
					}
					dat += "<br>";
				}
			}
			dat += "</body>";
			winheight = count * 20 + 100;
			winheight = Num13.MinInt( winheight, 690 );
			Interface13.Browse( Task13.User, dat, "window=players;size=375x" + winheight );
			return;
		}

		// Function from file: admin.dm
		public void output_ai_laws(  ) {
			int ai_number = 0;
			Mob_Living_Silicon S = null;
			Mob_Living_Silicon R = null;

			ai_number = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon) )) {
				S = _a;
				
				ai_number++;

				if ( S is Mob_Living_Silicon_Ai ) {
					Task13.User.WriteMsg( "<b>AI " + GlobalFuncs.key_name( S, Task13.User ) + "'s laws:</b>" );
				} else if ( S is Mob_Living_Silicon_Robot ) {
					R = S;
					Task13.User.WriteMsg( "<b>CYBORG " + GlobalFuncs.key_name( S, Task13.User ) + " " + ( Lang13.Bool( ((dynamic)R).connected_ai ) ? "(Slaved to: " + ((dynamic)R).connected_ai + ")" : "(Independant)" ) + ": laws:</b>" );
				} else if ( S is Mob_Living_Silicon_Pai ) {
					Task13.User.WriteMsg( "<b>pAI " + GlobalFuncs.key_name( S, Task13.User ) + "'s laws:</b>" );
				} else {
					Task13.User.WriteMsg( "<b>SOMETHING SILICON " + GlobalFuncs.key_name( S, Task13.User ) + "'s laws:</b>" );
				}

				if ( S.laws == null ) {
					Task13.User.WriteMsg( "" + GlobalFuncs.key_name( S, Task13.User ) + "'s laws are null?? Contact a coder." );
				} else {
					((AiLaws)S.laws).show_laws( Task13.User );
				}
			}

			if ( !( ai_number != 0 ) ) {
				Task13.User.WriteMsg( "<b>No AIs located</b>" );
			}
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle guests", desc: "Guests can't enter", group: "Server" )]
		public void toggleguests(  ) {
			GlobalVars.guests_allowed = !GlobalVars.guests_allowed;

			if ( !GlobalVars.guests_allowed ) {
				Game13.WriteMsg( "<B>Guests may no longer enter the game.</B>" );
			} else {
				Game13.WriteMsg( "<B>Guests may now enter the game.</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled guests game entering " + ( GlobalVars.guests_allowed ? "" : "dis" ) + "allowed." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled guests game entering " + ( GlobalVars.guests_allowed ? "" : "dis" ) + "allowed.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TGU" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle tinted welding helmes", desc: "Reduces view range when wearing welding helmets", group: "Debug" )]
		public void toggletintedweldhelmets(  ) {
			GlobalVars.tinted_weldhelh = !GlobalVars.tinted_weldhelh;

			if ( GlobalVars.tinted_weldhelh ) {
				Game13.WriteMsg( "<B>The tinted_weldhelh has been enabled!</B>" );
			} else {
				Game13.WriteMsg( "<B>The tinted_weldhelh has been disabled!</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled tinted_weldhelh." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled tinted_weldhelh." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TTWH" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Traitor Panel", desc: "Edit mobs's memory and role", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void show_traitor_panel( dynamic M = null ) {
			
			if ( !( M is Mob ) ) {
				Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
				return;
			}

			if ( !Lang13.Bool( M.mind ) ) {
				Task13.User.WriteMsg( "This mob has no mind!" );
				return;
			}
			((Mind)M.mind).edit_memory();
			GlobalFuncs.feedback_add_details( "admin_verb", "STP" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Spawn", desc: "(atom path) Spawn an atom", group: "Debug" )]
		[VerbArg( 1, InputType.Str )]
		public void spawn_atom( string _object = null ) {
			dynamic chosen = null;
			dynamic T = null;

			
			if ( !GlobalFuncs.check_rights( 4096 ) ) {
				return;
			}
			chosen = GlobalFuncs.pick_closest_path( _object );

			if ( !Lang13.Bool( chosen ) ) {
				return;
			}

			if ( Lang13.Bool( chosen.IsSubclassOf( typeof(Tile) ) ) ) {
				T = GlobalFuncs.get_turf( Task13.User.loc );
				((Tile)T).ChangeTurf( chosen );
			} else {
				Lang13.Call( chosen, Task13.User.loc );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned " + chosen + " at (" + Task13.User.x + "," + Task13.User.y + "," + Task13.User.z + ")" );
			GlobalFuncs.feedback_add_details( "admin_verb", "SA" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Unprison", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void unprison( Ent_Static M = null ) {
			
			if ( M.z == 2 ) {
				M.loc = Rand13.PickFromTable( GlobalVars.latejoin );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has unprisoned " + GlobalFuncs.key_name_admin( M ) );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has unprisoned " + GlobalFuncs.key_name( M ) );
			} else {
				Interface13.Alert( "" + M.name + " is not prisoned." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "UP" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Delay pre-game", desc: "Delay the game start", group: "Server" )]
		public string delay(  ) {
			dynamic newtime = null;

			newtime = Interface13.Input( "Set a new time in seconds. Set -1 for indefinite delay.", "Set Delay", Num13.Floor( Convert.ToDouble( GlobalVars.ticker.timeLeft / 10 ) ), null, null, InputType.Num | InputType.Null );

			if ( GlobalVars.ticker.current_state > 1 ) {
				return Interface13.Alert( "Too late... The game has already started!" );
			}

			if ( Lang13.Bool( newtime ) ) {
				GlobalVars.ticker.timeLeft = newtime * 10;

				if ( Convert.ToDouble( newtime ) < 0 ) {
					Game13.WriteMsg( "<b>The game start has been delayed.</b>" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " delayed the round start." );
				} else {
					Game13.WriteMsg( "<b>The game will start in " + newtime + " seconds.</b>" );
					Game13.WriteMsg( "sound/ai/attention.ogg" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the pre-game delay to " + newtime + " seconds." );
				}
				GlobalFuncs.feedback_add_details( "admin_verb", "DELAY" );
			}
			return null;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Respawn", desc: "Respawn basically", group: "Server" )]
		public void toggleaban(  ) {
			GlobalVars.abandon_allowed = !GlobalVars.abandon_allowed;

			if ( GlobalVars.abandon_allowed ) {
				Game13.WriteMsg( "<B>You may now respawn.</B>" );
			} else {
				Game13.WriteMsg( "<B>You may no longer respawn :(</B>" );
			}
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled respawn to " + ( GlobalVars.abandon_allowed ? "On" : "Off" ) + ".</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled respawn to " + ( GlobalVars.abandon_allowed ? "On" : "Off" ) + "." );
			Game13.update_status();
			GlobalFuncs.feedback_add_details( "admin_verb", "TR" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle AI", desc: "People can't be AI", group: "Server" )]
		public void toggleAI(  ) {
			GlobalVars.config.allow_ai = !GlobalVars.config.allow_ai;

			if ( !GlobalVars.config.allow_ai ) {
				Game13.WriteMsg( "<B>The AI job is no longer chooseable.</B>" );
			} else {
				Game13.WriteMsg( "<B>The AI job is chooseable now.</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled AI allowed." );
			Game13.update_status();
			GlobalFuncs.feedback_add_details( "admin_verb", "TAI" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Entering", desc: "People can't enter", group: "Server" )]
		public void toggleenter(  ) {
			GlobalVars.enter_allowed = !GlobalVars.enter_allowed;

			if ( !GlobalVars.enter_allowed ) {
				Game13.WriteMsg( "<B>New players may no longer enter the game.</B>" );
			} else {
				Game13.WriteMsg( "<B>New players may now enter the game.</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled new player game entering." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled new player game entering.</span>" );
			Game13.update_status();
			GlobalFuncs.feedback_add_details( "admin_verb", "TE" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Start Now", desc: "Start the round RIGHT NOW", group: "Server" )]
		public bool startnow(  ) {
			
			if ( GlobalVars.ticker.current_state == 1 ) {
				GlobalVars.ticker.can_fire = true;
				GlobalVars.ticker.timeLeft = 0;
				GlobalFuncs.log_admin( "" + Task13.User.key + " has started the game." );
				GlobalFuncs.message_admins( "<font color='blue'>" + Task13.User.key + " has started the game.</font>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "SN" );
				return true;
			} else if ( GlobalVars.ticker.current_state == 0 ) {
				Task13.User.WriteMsg( "<font color='red'>Error: Start Now: Game is in startup, please wait until it has finished.</font>" );
			} else {
				Task13.User.WriteMsg( "<font color='red'>Error: Start Now: Game has already started.</font>" );
			}
			return false;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Dead OOC", desc: "Toggle dis bitch", group: "Server" )]
		public void toggleoocdead(  ) {
			GlobalVars.dooc_allowed = !GlobalVars.dooc_allowed;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled OOC." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled Dead OOC." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TDOOC" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle OOC", desc: "Toggle dis bitch", group: "Server" )]
		public void toggleooc(  ) {
			GlobalFuncs.toggle_ooc();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled OOC." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled OOC." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TOOC" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Set Admin Notice", desc: "Set an announcement that appears to everyone who joins the server. Only lasts this round", group: "Special Verbs" )]
		public void set_admin_notice(  ) {
			dynamic new_admin_notice = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			new_admin_notice = Interface13.Input( this, "Set a public notice for this round. Everyone who joins the server will see it.\n(Leaving it blank will delete the current notice):", "Set Notice", GlobalVars.admin_notice, null, InputType.Null | InputType.StrMultiline );

			if ( new_admin_notice == null ) {
				return;
			}

			if ( new_admin_notice == GlobalVars.admin_notice ) {
				return;
			}

			if ( new_admin_notice == "" ) {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " removed the admin notice." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed the admin notice:\n" + GlobalVars.admin_notice );
			} else {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " set the admin notice." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the admin notice:\n" + new_admin_notice );
				Game13.WriteMsg( "<span class ='adminnotice'><b>Admin Notice:</b>\n 	 " + new_admin_notice + "</span>" );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SAN" );
			GlobalVars.admin_notice = new_admin_notice;
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Announce", desc: "Announce your desires to the world", group: "Special Verbs" )]
		public void announce(  ) {
			dynamic message = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			message = Interface13.Input( "Global message to send:", "Admin Announce", null, null, null, InputType.StrMultiline );

			if ( Lang13.Bool( message ) ) {
				
				if ( !GlobalFuncs.check_rights( 16, false ) ) {
					message = GlobalFuncs.adminscrub( message, 500 );
				}
				Game13.WriteMsg( "<span class='adminnotice'><b>" + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "Administrator" : Task13.User.key ) + " Announces:</b></span>\n 	 " + message );
				GlobalFuncs.log_admin( "Announce: " + GlobalFuncs.key_name( Task13.User ) + " : " + message );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "A" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "End Round", desc: "Attempts to produce a round end report and then restart the server organically.", group: "Server" )]
		public void end_round(  ) {
			string confirm = null;

			
			if ( !( Task13.User.client.holder != null ) ) {
				return;
			}
			confirm = Interface13.Alert( "End the round and  restart the game world?", "End Round", "Yes", "Cancel" );

			if ( confirm == "Cancel" ) {
				return;
			}

			if ( confirm == "Yes" ) {
				GlobalVars.ticker.force_ending = 1;
				GlobalFuncs.feedback_add_details( "admin_verb", "ER" );
			}
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Hard Restart", desc: "Restarts the world immediately", group: "Server" )]
		public void restart(  ) {
			string confirm = null;

			
			if ( !( Task13.User.client.holder != null ) ) {
				return;
			}
			confirm = Interface13.Alert( "Restart the game world?", "Restart", "Yes", "Cancel" );

			if ( confirm == "Cancel" ) {
				return;
			}

			if ( confirm == "Yes" ) {
				GlobalVars.ticker.delay_end = false;
				GlobalFuncs.feedback_add_details( "admin_verb", "R" );
				Game13.Reboot( "Initiated by " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "Admin" : Task13.User.key ) + ".", "end_error", "admin reboot - by " + Task13.User.key + " " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "(stealth)" : "" ), 10 );
			}
			return;
		}

		// Function from file: admin.dm
		public void Game(  ) {
			string dat = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			dat = new Txt( "\n		<center><B>Game Panel</B></center><hr>\n\n		<A href='?src=" ).Ref( this ).str( ";c_mode=1'>Change Game Mode</A><br>\n		" ).ToString();

			if ( GlobalVars.master_mode == "secret" ) {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";f_secret=1'>(Force Secret Mode)</A><br>" ).ToString();
			}
			dat += new Txt( "\n		<BR>\n		<A href='?src=" ).Ref( this ).str( ";create_object=1'>Create Object</A><br>\n		<A href='?src=" ).Ref( this ).str( ";quick_create_object=1'>Quick Create Object</A><br>\n		<A href='?src=" ).Ref( this ).str( ";create_turf=1'>Create Turf</A><br>\n		<A href='?src=" ).Ref( this ).str( ";create_mob=1'>Create Mob</A><br>\n		" ).ToString();

			if ( Lang13.Bool( this.marked_datum ) && this.marked_datum is Ent_Static ) {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dupe_marked_datum=1'>Duplicate Marked Datum</A><br>" ).ToString();
			}
			Interface13.Browse( Task13.User, dat, "window=admin2;size=210x200" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Access Newscaster Network", desc: "Allows you to view, add and edit news feeds.", group: "Fun" )]
		public void access_news_network(  ) {
			string dat = null;
			bool wanted_already = false;
			Newscaster_FeedChannel CHANNEL = null;
			bool check = false;
			Newscaster_FeedChannel FC = null;
			int i = 0;
			Newscaster_FeedMessage MESSAGE = null;
			Newscaster_FeedComment comment = null;
			Newscaster_FeedChannel CHANNEL2 = null;
			Newscaster_FeedChannel CHANNEL3 = null;
			Newscaster_FeedMessage MESSAGE2 = null;
			Newscaster_FeedComment comment2 = null;
			Newscaster_FeedMessage MESSAGE3 = null;
			bool wanted_already2 = false;
			int end_param = 0;

			
			if ( !( this is Admins ) ) {
				Task13.Source = Task13.User.client.holder;
			}

			if ( !( this is Admins ) ) {
				Task13.User.WriteMsg( "Error: you are not an admin!" );
				return;
			}
			dat = "<HEAD><TITLE>Admin Newscaster</TITLE></HEAD><H3>Admin Newscaster Unit</H3>";

			switch ((int?)( this.admincaster_screen )) {
				case 0:
					dat += "Welcome to the admin newscaster.<BR> Here you can add, edit and censor every newspiece on the network.";
					dat += "<BR>Feed channels and stories entered through here will be uneditable and handled as official news by the rest of the units.";
					dat += "<BR>Note that this panel allows full freedom over the news network, there are no constrictions except the few basic ones. Don't break things!</FONT>";

					if ( GlobalVars.news_network.wanted_issue.active ) {
						dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";ac_view_wanted=1'>Read Wanted Issue</A>" ).ToString();
					}
					dat += new Txt( "<HR><BR><A href='?src=" ).Ref( this ).str( ";ac_create_channel=1'>Create Feed Channel</A>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_view=1'>View Feed Channels</A>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_create_feed_story=1'>Submit new Feed story</A>" ).ToString();
					dat += new Txt( "<BR><BR><A href='?src=" ).Ref( Task13.User ).str( ";mach_close=newscaster_main'>Exit</A>" ).ToString();
					wanted_already = false;

					if ( GlobalVars.news_network.wanted_issue.active ) {
						wanted_already = true;
					}
					dat += "<HR><B>Feed Security functions:</B><BR>";
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_menu_wanted=1'>" ).item( ( wanted_already ? "Manage" : "Publish" ) ).str( " \"Wanted\" Issue</A>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_menu_censor_story=1'>Censor Feed Stories</A>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_menu_censor_channel=1'>Mark Feed Channel with Nanotrasen D-Notice (disables and locks the channel.</A>" ).ToString();
					dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";ac_set_signature=1'>The newscaster recognises you as:<BR> <FONT COLOR='green'>" ).item( this.admin_signature ).str( "</FONT></A>" ).ToString();
					break;
				case 1:
					dat += "Station Feed Channels<HR>";

					if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
						dat += "<I>No active channels found...</I>";
					} else {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
							CHANNEL = _a;
							

							if ( CHANNEL.is_admin_channel == true ) {
								dat += new Txt( "<B><FONT style='BACKGROUND-COLOR: LightGreen'><A href='?src=" ).Ref( this ).str( ";ac_show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A></FONT></B><BR>" ).ToString();
							} else {
								dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";ac_show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A> " ).item( ( CHANNEL.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR></B>" ).ToString();
							}
						}
					}
					dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";ac_refresh=1'>Refresh</A>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Back</A>" ).ToString();
					break;
				case 2:
					dat += "Creating new Feed Channel...";
					dat += new Txt( "<HR><B><A href='?src=" ).Ref( this ).str( ";ac_set_channel_name=1'>Channel Name</A>:</B> " ).item( this.admincaster_feed_channel.channel_name ).str( "<BR>" ).ToString();
					dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";ac_set_signature=1'>Channel Author</A>:</B> <FONT COLOR='green'>" ).item( this.admin_signature ).str( "</FONT><BR>" ).ToString();
					dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";ac_set_channel_lock=1'>Will Accept Public Feeds</A>:</B> " ).item( ( Lang13.Bool( this.admincaster_feed_channel.locked ) ? "NO" : "YES" ) ).str( "<BR><BR>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_submit_new_channel=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>" ).ToString();
					break;
				case 3:
					dat += "Creating new Feed Message...";
					dat += new Txt( "<HR><B><A href='?src=" ).Ref( this ).str( ";ac_set_channel_receiving=1'>Receiving Channel</A>:</B> " ).item( this.admincaster_feed_channel.channel_name ).str( "<BR>" ).ToString();
					dat += "<B>Message Author:</B> <FONT COLOR='green'>" + this.admin_signature + "</FONT><BR>";
					dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";ac_set_new_message=1'>Message Body</A>:</B> " ).item( this.admincaster_feed_message.returnBody( -1 ) ).str( " <BR>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_submit_new_message=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>" ).ToString();
					break;
				case 4:
					dat += "Feed story successfully submitted to " + this.admincaster_feed_channel.channel_name + ".<BR><BR>";
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 5:
					dat += "Feed Channel " + this.admincaster_feed_channel.channel_name + " created successfully.<BR><BR>";
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 6:
					dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed story to Network.</B></FONT><HR><BR>";

					if ( this.admincaster_feed_channel.channel_name == "" ) {
						dat += "<FONT COLOR='maroon'>ÂInvalid receiving channel name.</FONT><BR>";
					}

					if ( this.admincaster_feed_message.returnBody( -1 ) == "" || this.admincaster_feed_message.returnBody( -1 ) == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ÂInvalid message body.</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 3 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 7:
					dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed Channel to Network.</B></FONT><HR><BR>";

					if ( this.admincaster_feed_channel.channel_name == "" || this.admincaster_feed_channel.channel_name == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ÂInvalid channel name.</FONT><BR>";
					}
					check = false;

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
						FC = _b;
						

						if ( FC.channel_name == this.admincaster_feed_channel.channel_name ) {
							check = true;
							break;
						}
					}

					if ( check ) {
						dat += "<FONT COLOR='maroon'>ÂChannel name already in use.</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 2 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 9:
					dat += "<B>" + this.admincaster_feed_channel.channel_name + ": </B><FONT SIZE=1>[created by: <FONT COLOR='maroon'>" + this.admincaster_feed_channel.returnAuthor( -1 ) + "</FONT>]</FONT><HR>";

					if ( this.admincaster_feed_channel.censored ) {
						dat += "<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>";
						dat += "No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>";
					} else if ( GlobalFuncs.isemptylist( this.admincaster_feed_channel.messages ) ) {
						dat += "<I>No feed messages found in channel...</I><BR>";
					} else {
						i = 0;

						foreach (dynamic _d in Lang13.Enumerate( this.admincaster_feed_channel.messages, typeof(Newscaster_FeedMessage) )) {
							MESSAGE = _d;
							
							i++;
							dat += "-" + MESSAGE.returnBody( -1 ) + " <BR>";

							if ( MESSAGE.img != null ) {
								Interface13.CacheBrowseResource( Task13.User, MESSAGE.img, "tmp_photo" + i + ".png" );
								dat += "<img src='tmp_photo" + i + ".png' width = '180'><BR><BR>";
							}
							dat += "<FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE.returnAuthor( -1 ) + "</FONT>]</FONT><BR>";
							dat += "" + MESSAGE.comments.len + " comment" + ( MESSAGE.comments.len > 1 ? "s" : "" ) + ":<br>";

							foreach (dynamic _c in Lang13.Enumerate( MESSAGE.comments, typeof(Newscaster_FeedComment) )) {
								comment = _c;
								
								dat += "" + comment.body + "<br><font size=1>" + comment.author + " " + comment.time_stamp + "</font><br>";
							}
							dat += "<br>";
						}
					}
					dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";ac_refresh=1'>Refresh</A>" ).ToString();
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 1 ).str( "'>Back</A>" ).ToString();
					break;
				case 10:
					dat += "<B>Nanotrasen Feed Censorship Tool</B><BR>";
					dat += "<FONT SIZE=1>NOTE: Due to the nature of news Feeds, total deletion of a Feed Story is not possible.<BR>";
					dat += "Keep in mind that users attempting to view a censored feed will instead see the [REDACTED] tag above it.</FONT>";
					dat += "<HR>Select Feed channel to get Stories from:<BR>";

					if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
						dat += "<I>No feed channels found active...</I><BR>";
					} else {
						
						foreach (dynamic _e in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
							CHANNEL2 = _e;
							
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ac_pick_censor_channel=" ).Ref( CHANNEL2 ).str( "'>" ).item( CHANNEL2.channel_name ).str( "</A> " ).item( ( CHANNEL2.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
					break;
				case 11:
					dat += "<B>Nanotrasen D-Notice Handler</B><HR>";
					dat += "<FONT SIZE=1>A D-Notice is to be bestowed upon the channel if the handling Authority deems it as harmful for the station's";
					dat += "morale, integrity or disciplinary behaviour. A D-Notice will render a channel unable to be updated by anyone, without deleting any feed";
					dat += "stories it might contain at the time. You can lift a D-Notice if you have the required access at any time.</FONT><HR>";

					if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
						dat += "<I>No feed channels found active...</I><BR>";
					} else {
						
						foreach (dynamic _f in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
							CHANNEL3 = _f;
							
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ac_pick_d_notice=" ).Ref( CHANNEL3 ).str( "'>" ).item( CHANNEL3.channel_name ).str( "</A> " ).item( ( CHANNEL3.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Back</A>" ).ToString();
					break;
				case 12:
					dat += "<B>" + this.admincaster_feed_channel.channel_name + ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" + this.admincaster_feed_channel.returnAuthor( -1 ) + "</FONT> ]</FONT><BR>";
					dat += new Txt( "<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";ac_censor_channel_author=" ).Ref( this.admincaster_feed_channel ).str( "'>" ).item( ( Lang13.Bool( this.admincaster_feed_channel.authorCensor ) ? "Undo Author censorship" : "Censor channel Author" ) ).str( "</A></FONT><HR>" ).ToString();

					if ( GlobalFuncs.isemptylist( this.admincaster_feed_channel.messages ) ) {
						dat += "<I>No feed messages found in channel...</I><BR>";
					} else {
						
						foreach (dynamic _h in Lang13.Enumerate( this.admincaster_feed_channel.messages, typeof(Newscaster_FeedMessage) )) {
							MESSAGE2 = _h;
							
							dat += "-" + MESSAGE2.returnBody( -1 ) + " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE2.returnAuthor( -1 ) + "</FONT>]</FONT><BR>";
							dat += new Txt( "<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";ac_censor_channel_story_body=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.bodyCensor ? "Undo story censorship" : "Censor story" ) ).str( "</A>  -  <A href='?src=" ).Ref( this ).str( ";ac_censor_channel_story_author=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.authorCensor ? "Undo Author Censorship" : "Censor message Author" ) ).str( "</A></FONT><BR>" ).ToString();
							dat += new Txt().item( MESSAGE2.comments.len ).str( " comment" ).item( ( MESSAGE2.comments.len > 1 ? "s" : "" ) ).str( ": <a href='?src=" ).Ref( this ).str( ";ac_lock_comment=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.locked ? "Unlock" : "Lock" ) ).str( "</a><br>" ).ToString();

							foreach (dynamic _g in Lang13.Enumerate( MESSAGE2.comments, typeof(Newscaster_FeedComment) )) {
								comment2 = _g;
								
								dat += new Txt().item( comment2.body ).str( " <a href='?src=" ).Ref( this ).str( ";ac_del_comment=" ).Ref( comment2 ).str( ";ac_del_comment_msg=" ).Ref( MESSAGE2 ).str( "'>X</a><br><font size=1>" ).item( comment2.author ).str( " " ).item( comment2.time_stamp ).str( "</font><br>" ).ToString();
							}
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 10 ).str( "'>Back</A>" ).ToString();
					break;
				case 13:
					dat += "<B>" + this.admincaster_feed_channel.channel_name + ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" + this.admincaster_feed_channel.returnAuthor( -1 ) + "</FONT> ]</FONT><BR>";
					dat += new Txt( "Channel messages listed below. If you deem them dangerous to the station, you can <A href='?src=" ).Ref( this ).str( ";ac_toggle_d_notice=" ).Ref( this.admincaster_feed_channel ).str( "'>Bestow a D-Notice upon the channel</A>.<HR>" ).ToString();

					if ( this.admincaster_feed_channel.censored ) {
						dat += "<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>";
						dat += "No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>";
					} else if ( GlobalFuncs.isemptylist( this.admincaster_feed_channel.messages ) ) {
						dat += "<I>No feed messages found in channel...</I><BR>";
					} else {
						
						foreach (dynamic _i in Lang13.Enumerate( this.admincaster_feed_channel.messages, typeof(Newscaster_FeedMessage) )) {
							MESSAGE3 = _i;
							
							dat += "-" + MESSAGE3.returnBody( -1 ) + " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE3.returnAuthor( -1 ) + "</FONT>]</FONT><BR>";
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 11 ).str( "'>Back</A>" ).ToString();
					break;
				case 14:
					dat += "<B>Wanted Issue Handler:</B>";
					wanted_already2 = false;
					end_param = 1;

					if ( GlobalVars.news_network.wanted_issue.active ) {
						wanted_already2 = true;
						end_param = 2;
					}

					if ( wanted_already2 ) {
						dat += "<FONT SIZE=2><BR><I>A wanted issue is already in Feed Circulation. You can edit or cancel it below.</FONT></I>";
					}
					dat += "<HR>";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ac_set_wanted_name=1'>Criminal Name</A>: " ).item( this.admincaster_wanted_message.criminal ).str( " <BR>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ac_set_wanted_desc=1'>Description</A>: " ).item( this.admincaster_wanted_message.body ).str( " <BR>" ).ToString();

					if ( wanted_already2 ) {
						dat += "<B>Wanted Issue created by:</B><FONT COLOR='green'>" + GlobalVars.news_network.wanted_issue.scannedUser + "</FONT><BR>";
					} else {
						dat += "<B>Wanted Issue will be created under prosecutor:</B><FONT COLOR='green'>" + this.admin_signature + "</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_submit_wanted=" ).item( end_param ).str( "'>" ).item( ( wanted_already2 ? "Edit Issue" : "Submit" ) ).str( "</A>" ).ToString();

					if ( wanted_already2 ) {
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_cancel_wanted=1'>Take down Issue</A>" ).ToString();
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
					break;
				case 15:
					dat += "<FONT COLOR='green'>Wanted issue for " + this.admincaster_wanted_message.criminal + " is now in Network Circulation.</FONT><BR><BR>";
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 16:
					dat += "<B><FONT COLOR='maroon'>ERROR: Wanted Issue rejected by Network.</B></FONT><HR><BR>";

					if ( this.admincaster_wanted_message.criminal == "" || this.admincaster_wanted_message.criminal == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ÂInvalid name for person wanted.</FONT><BR>";
					}

					if ( this.admincaster_wanted_message.body == "" || this.admincaster_wanted_message.body == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ÂInvalid description.</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 17:
					dat += "<B>Wanted Issue successfully deleted from Circulation</B><BR>";
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 18:
					dat += "<B><FONT COLOR ='maroon'>-- STATIONWIDE WANTED ISSUE --</B></FONT><BR><FONT SIZE=2>[Submitted by: <FONT COLOR='green'>" + GlobalVars.news_network.wanted_issue.scannedUser + "</FONT>]</FONT><HR>";
					dat += "<B>Criminal</B>: " + GlobalVars.news_network.wanted_issue.criminal + "<BR>";
					dat += "<B>Description</B>: " + GlobalVars.news_network.wanted_issue.body + "<BR>";
					dat += "<B>Photo:</B>: ";

					if ( GlobalVars.news_network.wanted_issue.img != null ) {
						Interface13.CacheBrowseResource( Task13.User, GlobalVars.news_network.wanted_issue.img, "tmp_photow.png" );
						dat += "<BR><img src='tmp_photow.png' width = '180'>";
					} else {
						dat += "None";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Back</A><BR>" ).ToString();
					break;
				case 19:
					dat += "<FONT COLOR='green'>Wanted issue for " + this.admincaster_wanted_message.criminal + " successfully edited.</FONT><BR><BR>";
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
					break;
				default:
					dat += "I'm sorry to break your immersion. This shit's bugged. Report this bug to Agouri, polyxenitopalidou@gmail.com";
					break;
			}
			Interface13.Browse( Task13.User, dat, "window=admincaster_main;size=400x600" );
			GlobalFuncs.onclose( Task13.User, "admincaster_main" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Player Panel", desc: "Edit player (respawn, ban, heal, etc)", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void show_player_panel( dynamic M = null ) {
			string body = null;
			int muted = 0;

			
			if ( !GlobalFuncs.check_rights() ) {
				return;
			}

			if ( !Lang13.Bool( M ) ) {
				Task13.User.WriteMsg( "You seem to be selecting a mob that doesn't exist anymore." );
				return;
			}
			body = "<html><head><title>Options for " + M.key + "</title></head>";
			body += "<body>Options panel for <b>" + M + "</b>";

			if ( Lang13.Bool( M.client ) ) {
				body += " played by <b>" + M.client + "</b> ";
				body += "[<A href='?_src_=holder;editrights=rank;ckey=" + M.ckey + "'>" + ( Lang13.Bool( M.client.holder ) ? M.client.holder.rank : "Player" ) + "</A>]";
			}

			if ( M is Mob_NewPlayer ) {
				body += " <B>Hasn't Entered Game</B> ";
			} else {
				body += new Txt( " [<A href='?_src_=holder;revive=" ).Ref( M ).str( "'>Heal</A>] " ).ToString();
			}
			body += "<br><br>[ ";
			body += new Txt( "<a href='?_src_=vars;Vars=" ).Ref( M ).str( "'>VV</a> - " ).ToString();
			body += new Txt( "<a href='?_src_=holder;traitor=" ).Ref( M ).str( "'>TP</a> - " ).ToString();
			body += "<a href='?priv_msg=" + M.ckey + "'>PM</a> - ";
			body += new Txt( "<a href='?_src_=holder;subtlemessage=" ).Ref( M ).str( "'>SM</a> - " ).ToString();
			body += new Txt( "<a href='?_src_=holder;adminplayerobservefollow=" ).Ref( M ).str( "'>FLW</a>] </b><br>" ).ToString();
			body += "<b>Mob type</b> = " + M.type + "<br><br>";
			body += new Txt( "<A href='?_src_=holder;boot2=" ).Ref( M ).str( "'>Kick</A> | " ).ToString();
			body += new Txt( "<A href='?_src_=holder;newban=" ).Ref( M ).str( "'>Ban</A> | " ).ToString();
			body += new Txt( "<A href='?_src_=holder;jobban2=" ).Ref( M ).str( "'>Jobban</A> | " ).ToString();
			body += new Txt( "<A href='?_src_=holder;appearanceban=" ).Ref( M ).str( "'>Identity Ban</A> | " ).ToString();

			if ( GlobalFuncs.jobban_isbanned( M, "OOC" ) ) {
				body += new Txt( "<A href='?_src_=holder;jobban3=OOC;jobban4=" ).Ref( M ).str( "'><font color=red>OOCBan</font></A> | " ).ToString();
			} else {
				body += new Txt( "<A href='?_src_=holder;jobban3=OOC;jobban4=" ).Ref( M ).str( "'>OOCBan</A> | " ).ToString();
			}

			if ( GlobalFuncs.jobban_isbanned( M, "emote" ) ) {
				body += new Txt( "<A href='?_src_=holder;jobban3=emote;jobban4=" ).Ref( M ).str( "'><font color=red>EmoteBan</font></A> | " ).ToString();
			} else {
				body += new Txt( "<A href='?_src_=holder;jobban3=emote;jobban4=" ).Ref( M ).str( "'>Emoteban</A> | " ).ToString();
			}
			body += "<A href='?_src_=holder;shownoteckey=" + M.ckey + "'>Notes</A> | ";

			if ( Lang13.Bool( M.client ) ) {
				
				if ( ((Client)M.client).check_watchlist( M.client.ckey ) ) {
					body += "<A href='?_src_=holder;watchremove=" + M.ckey + "'>Remove from Watchlist</A> | ";
					body += "<A href='?_src_=holder;watchedit=" + M.ckey + "'>Edit Watchlist reason</A> ";
				} else {
					body += new Txt( "<A href='?_src_=holder;watchadd=" ).Ref( M.ckey ).str( "'>Add to Watchlist</A> " ).ToString();
				}
				body += new Txt( "| <A href='?_src_=holder;sendtoprison=" ).Ref( M ).str( "'>Prison</A> | " ).ToString();
				body += new Txt( "<A href='?_src_=holder;sendbacktolobby=" ).Ref( M ).str( "'>Send back to Lobby</A> | " ).ToString();
				muted = M.client.prefs.muted;
				body += "<br><b>Mute: </b> ";
				body += "[<A href='?_src_=holder;mute=" + M.ckey + ";mute_type=" + 1 + "'><font color='" + ( ( muted & 1 ) != 0 ? "red" : "blue" ) + "'>IC</font></a> | ";
				body += "<A href='?_src_=holder;mute=" + M.ckey + ";mute_type=" + 2 + "'><font color='" + ( ( muted & 2 ) != 0 ? "red" : "blue" ) + "'>OOC</font></a> | ";
				body += "<A href='?_src_=holder;mute=" + M.ckey + ";mute_type=" + 4 + "'><font color='" + ( ( muted & 4 ) != 0 ? "red" : "blue" ) + "'>PRAY</font></a> | ";
				body += "<A href='?_src_=holder;mute=" + M.ckey + ";mute_type=" + 8 + "'><font color='" + ( ( muted & 8 ) != 0 ? "red" : "blue" ) + "'>ADMINHELP</font></a> | ";
				body += "<A href='?_src_=holder;mute=" + M.ckey + ";mute_type=" + 16 + "'><font color='" + ( ( muted & 16 ) != 0 ? "red" : "blue" ) + "'>DEADCHAT</font></a>]";
				body += "(<A href='?_src_=holder;mute=" + M.ckey + ";mute_type=" + 31 + "'><font color='" + ( ( muted & 31 ) != 0 ? "red" : "blue" ) + "'>toggle all</font></a>)";
			}
			body += "<br><br>";
			body += new Txt( "<A href='?_src_=holder;jumpto=" ).Ref( M ).str( "'><b>Jump to</b></A> | " ).ToString();
			body += new Txt( "<A href='?_src_=holder;getmob=" ).Ref( M ).str( "'>Get</A> | " ).ToString();
			body += new Txt( "<A href='?_src_=holder;sendmob=" ).Ref( M ).str( "'>Send To</A>" ).ToString();
			body += "<br><br>";
			body += new Txt( "<A href='?_src_=holder;traitor=" ).Ref( M ).str( "'>Traitor panel</A> | " ).ToString();
			body += new Txt( "<A href='?_src_=holder;narrateto=" ).Ref( M ).str( "'>Narrate to</A> | " ).ToString();
			body += new Txt( "<A href='?_src_=holder;subtlemessage=" ).Ref( M ).str( "'>Subtle message</A>" ).ToString();

			if ( Lang13.Bool( M.client ) ) {
				
				if ( !( M is Mob_NewPlayer ) ) {
					body += "<br><br>";
					body += "<b>Transformation:</b>";
					body += "<br>";

					if ( M is Mob_Living_Carbon_Human ) {
						body += "<B>Human</B> | ";
					} else {
						body += new Txt( "<A href='?_src_=holder;humanone=" ).Ref( M ).str( "'>Humanize</A> | " ).ToString();
					}

					if ( M is Mob_Living_Carbon_Monkey ) {
						body += "<B>Monkeyized</B> | ";
					} else {
						body += new Txt( "<A href='?_src_=holder;monkeyone=" ).Ref( M ).str( "'>Monkeyize</A> | " ).ToString();
					}

					if ( M is Mob_Living_SimpleAnimal_Pet_Dog_Corgi ) {
						body += "<B>Corgized</B> | ";
					} else {
						body += new Txt( "<A href='?_src_=holder;corgione=" ).Ref( M ).str( "'>Corgize</A> | " ).ToString();
					}

					if ( M is Mob_Living_Silicon_Ai ) {
						body += "<B>Is an AI</B> ";
					} else if ( M is Mob_Living_Carbon_Human ) {
						body += new Txt( "<A href='?_src_=holder;makeai=" ).Ref( M ).str( "'>Make AI</A> | " ).ToString();
						body += new Txt( "<A href='?_src_=holder;makerobot=" ).Ref( M ).str( "'>Make Robot</A> | " ).ToString();
						body += new Txt( "<A href='?_src_=holder;makealien=" ).Ref( M ).str( "'>Make Alien</A> | " ).ToString();
						body += new Txt( "<A href='?_src_=holder;makeslime=" ).Ref( M ).str( "'>Make Slime</A> | " ).ToString();
						body += new Txt( "<A href='?_src_=holder;makeblob=" ).Ref( M ).str( "'>Make Blob</A> | " ).ToString();
					}

					if ( M is Mob_Living_SimpleAnimal ) {
						body += new Txt( "<A href='?_src_=holder;makeanimal=" ).Ref( M ).str( "'>Re-Animalize</A> | " ).ToString();
					} else {
						body += new Txt( "<A href='?_src_=holder;makeanimal=" ).Ref( M ).str( "'>Animalize</A> | " ).ToString();
					}
					body += "<br><br>";
					body += "<b>Rudimentary transformation:</b><font size=2><br>These transformations only create a new mob type and copy stuff over. They do not take into account MMIs and similar mob-specific things. The buttons in 'Transformations' are preferred, when possible.</font><br>";
					body += new Txt( "<A href='?_src_=holder;simplemake=observer;mob=" ).Ref( M ).str( "'>Observer</A> | " ).ToString();
					body += new Txt( "[ Alien: <A href='?_src_=holder;simplemake=drone;mob=" ).Ref( M ).str( "'>Drone</A>, " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=hunter;mob=" ).Ref( M ).str( "'>Hunter</A>, " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=sentinel;mob=" ).Ref( M ).str( "'>Sentinel</A>, " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=praetorian;mob=" ).Ref( M ).str( "'>Praetorian</A>, " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=queen;mob=" ).Ref( M ).str( "'>Queen</A>, " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=larva;mob=" ).Ref( M ).str( "'>Larva</A> ] " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=human;mob=" ).Ref( M ).str( "'>Human</A> " ).ToString();
					body += new Txt( "[ slime: <A href='?_src_=holder;simplemake=slime;mob=" ).Ref( M ).str( "'>Baby</A>, " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=adultslime;mob=" ).Ref( M ).str( "'>Adult</A> ] " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=monkey;mob=" ).Ref( M ).str( "'>Monkey</A> | " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=robot;mob=" ).Ref( M ).str( "'>Cyborg</A> | " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=cat;mob=" ).Ref( M ).str( "'>Cat</A> | " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=runtime;mob=" ).Ref( M ).str( "'>Runtime</A> | " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=corgi;mob=" ).Ref( M ).str( "'>Corgi</A> | " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=ian;mob=" ).Ref( M ).str( "'>Ian</A> | " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=crab;mob=" ).Ref( M ).str( "'>Crab</A> | " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=coffee;mob=" ).Ref( M ).str( "'>Coffee</A> | " ).ToString();
					body += new Txt( "[ Construct: <A href='?_src_=holder;simplemake=constructarmored;mob=" ).Ref( M ).str( "'>Juggernaut</A> , " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=constructbuilder;mob=" ).Ref( M ).str( "'>Artificer</A> , " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=constructwraith;mob=" ).Ref( M ).str( "'>Wraith</A> ] " ).ToString();
					body += new Txt( "<A href='?_src_=holder;simplemake=shade;mob=" ).Ref( M ).str( "'>Shade</A>" ).ToString();
					body += "<br>";
				}
			}

			if ( Lang13.Bool( M.client ) ) {
				body += "<br><br>";
				body += "<b>Other actions:</b>";
				body += "<br>";
				body += new Txt( "<A href='?_src_=holder;forcespeech=" ).Ref( M ).str( "'>Forcesay</A> | " ).ToString();
				body += new Txt( "<A href='?_src_=holder;tdome1=" ).Ref( M ).str( "'>Thunderdome 1</A> | " ).ToString();
				body += new Txt( "<A href='?_src_=holder;tdome2=" ).Ref( M ).str( "'>Thunderdome 2</A> | " ).ToString();
				body += new Txt( "<A href='?_src_=holder;tdomeadmin=" ).Ref( M ).str( "'>Thunderdome Admin</A> | " ).ToString();
				body += new Txt( "<A href='?_src_=holder;tdomeobserve=" ).Ref( M ).str( "'>Thunderdome Observer</A> | " ).ToString();
			}
			body += "<br>";
			body += "</body></html>";
			Interface13.Browse( Task13.User, body, new Txt( "window=adminplayeropts-" ).Ref( M ).str( ";size=550x515" ).ToString() );
			GlobalFuncs.feedback_add_details( "admin_verb", "SPP" );
			return;
		}

		// Function from file: events.dm
		public void forceEvent(  ) {
			string dat = null;
			string normal = null;
			string magic = null;
			string holiday = null;
			RoundEventControl E = null;
			Browser popup = null;

			dat = "";
			normal = "";
			magic = "";
			holiday = "";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSevent.control, typeof(RoundEventControl) )) {
				E = _a;
				
				dat = new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";forceevent=" ).Ref( E ).str( "'>" ).item( E ).str( "</A>" ).ToString();

				if ( Lang13.Bool( E.holidayID ) ) {
					holiday += dat;
				} else if ( E.wizardevent ) {
					magic += dat;
				} else {
					normal += dat;
				}
			}
			dat = normal + "<BR>" + magic + "<BR>" + holiday;
			popup = new Browser( Task13.User, "forceevent", "Force Random Event", 300, 750 );
			popup.set_content( dat );
			popup.open();
			return;
		}

	}

}