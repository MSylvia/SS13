// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Revolution : GameMode {

		public int finished = 0;
		public int check_counter = 0;
		public int max_headrevs = 3;
		public ByTable heads_to_kill = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "revolution";
			this.config_tag = "revolution";
			this.antag_flag = "revolutionary";
			this.restricted_jobs = new ByTable(new object [] { 
				"Security Officer", 
				"Warden", 
				"Detective", 
				"AI", 
				"Cyborg", 
				"Captain", 
				"Head of Personnel", 
				"Head of Security", 
				"Chief Engineer", 
				"Research Director", 
				"Chief Medical Officer"
			 });
			this.required_players = 20;
			this.required_enemies = 1;
			this.recommended_enemies = 3;
			this.enemy_minimum_age = 14;
		}

		// Function from file: revolution.dm
		public override bool declare_completion(  ) {
			
			if ( this.finished == 1 ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "win - heads killed" );
				Game13.WriteMsg( "<span class='redtext'>The heads of staff were killed or exiled! The revolutionaries win!</span>" );
			} else if ( this.finished == 2 ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "loss - rev heads killed" );
				Game13.WriteMsg( "<span class='redtext'>The heads of staff managed to stop the revolution!</span>" );
			}
			base.declare_completion();
			return true;
		}

		// Function from file: revolution.dm
		public override bool check_finished(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.continuous["revolution"] ) ) {
				
				if ( this.finished != 0 ) {
					GlobalVars.SSshuttle.emergencyNoEscape = false;

					if ( GlobalVars.SSshuttle.emergency.mode == 4 ) {
						GlobalVars.SSshuttle.emergency.mode = 3;
						GlobalVars.SSshuttle.emergency.timer = Game13.time;
						GlobalFuncs.priority_announce( "Hostile enviroment resolved. You have 3 minutes to board the Emergency Shuttle.", null, "sound/AI/shuttledock.ogg", "Priority" );
					}
				}
				return base.check_finished();
			}

			if ( this.finished != 0 ) {
				return true;
			} else {
				return base.check_finished();
			}
		}

		// Function from file: revolution.dm
		public override bool check_win(  ) {
			
			if ( this.check_rev_victory() ) {
				this.finished = 1;
			} else if ( this.check_heads_victory() ) {
				this.finished = 2;
			}
			return false;
		}

		// Function from file: revolution.dm
		public bool check_heads_victory(  ) {
			Mind rev_mind = null;
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind = _a;
				
				T = GlobalFuncs.get_turf( rev_mind.current );

				if ( rev_mind != null && Lang13.Bool( rev_mind.current ) && Convert.ToInt32( rev_mind.current.stat ) != 2 && Lang13.Bool( rev_mind.current.client ) && Lang13.Bool( T ) && Lang13.Bool( T.z ) == true ) {
					
					if ( rev_mind.current is Mob_Living_Carbon_Human ) {
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: revolution.dm
		public bool check_rev_victory(  ) {
			Mind rev_mind = null;
			Objective_Mutiny objective = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( rev_mind.objectives, typeof(Objective_Mutiny) )) {
					objective = _a;
					

					if ( !( objective.check_completion() != 0 ) ) {
						return false;
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: revolution.dm
		public void latejoin_headrev(  ) {
			ByTable promotable_revs = null;
			Mind khrushchev = null;
			dynamic stalin = null;

			
			if ( this.revolutionaries != null ) {
				promotable_revs = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
					khrushchev = _a;
					

					if ( Lang13.Bool( khrushchev.current ) && Lang13.Bool( khrushchev.current.client ) && Convert.ToInt32( khrushchev.current.stat ) != 2 ) {
						
						if ( khrushchev.current.client.prefs.be_special.Contains( "revolutionary" ) ) {
							promotable_revs.Add( khrushchev );
						}
					}
				}

				if ( promotable_revs.len != 0 ) {
					stalin = Rand13.PickFromTable( promotable_revs );
					this.revolutionaries.Remove( stalin );
					this.head_revolutionaries.Add( stalin );
					GlobalFuncs.log_game( "" + stalin.key + " (ckey) has been promoted to a head rev" );
					this.equip_revolutionary( stalin.current );
					this.forge_revolutionary_objectives( stalin );
					this.greet_revolutionary( stalin );
				}
			}
			return;
		}

		// Function from file: revolution.dm
		public void check_heads(  ) {
			ByTable heads = null;
			ByTable sec = null;
			ByTable new_heads = null;
			Mind head_mind = null;
			Mind rev_mind = null;

			heads = this.get_all_heads();
			sec = this.get_all_sec();

			if ( this.heads_to_kill.len < heads.len ) {
				new_heads = heads - this.heads_to_kill;

				foreach (dynamic _b in Lang13.Enumerate( new_heads, typeof(Mind) )) {
					head_mind = _b;
					

					foreach (dynamic _a in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
						rev_mind = _a;
						
						this.mark_for_death( rev_mind, head_mind );
					}
				}
			}

			if ( this.head_revolutionaries.len < this.max_headrevs && this.head_revolutionaries.len < Num13.Floor( heads.len - ( 8 - sec.len ) / 3 ) ) {
				this.latejoin_headrev();
			}
			return;
		}

		// Function from file: revolution.dm
		public void mark_for_death( Mind rev_mind = null, Mind head_mind = null ) {
			Objective_Mutiny rev_obj = null;

			rev_obj = new Objective_Mutiny();
			rev_obj.owner = rev_mind;
			rev_obj.target = head_mind;
			rev_obj.explanation_text = "Assassinate " + head_mind.name + ", the " + head_mind.assigned_role + ".";
			rev_mind.objectives.Add( rev_obj );
			this.heads_to_kill.Add( head_mind );
			return;
		}

		// Function from file: revolution.dm
		public override int? process( dynamic seconds = null ) {
			this.check_counter++;

			if ( this.check_counter >= 5 ) {
				
				if ( !( this.finished != 0 ) ) {
					this.check_heads();
					((GameMode)GlobalVars.ticker.mode).check_win();
				}
				this.check_counter = 0;
			}
			return 0;
		}

		// Function from file: revolution.dm
		public override bool post_setup( bool? report = null ) {
			ByTable heads = null;
			ByTable sec = null;
			int weighted_score = 0;
			dynamic trotsky = null;
			Mind rev_mind = null;
			Mind head_mind = null;
			Mind rev_mind2 = null;

			heads = this.get_living_heads();
			sec = this.get_living_sec();
			weighted_score = Num13.MinInt( Num13.MaxInt( Num13.Floor( heads.len - ( 8 - sec.len ) / 3 ), 1 ), this.max_headrevs );

			while (weighted_score < this.head_revolutionaries.len) {
				trotsky = Rand13.PickFromTable( this.head_revolutionaries );
				this.antag_candidates.Add( trotsky );
				this.head_revolutionaries.Remove( trotsky );
				this.update_rev_icons_removed( trotsky );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind = _b;
				
				GlobalFuncs.log_game( "" + rev_mind.key + " (ckey) has been selected as a head rev" );

				foreach (dynamic _a in Lang13.Enumerate( heads, typeof(Mind) )) {
					head_mind = _a;
					
					this.mark_for_death( rev_mind, head_mind );
				}
				Task13.Schedule( Rand13.Int( 10, 100 ), (Task13.Closure)(() => {
					this.equip_revolutionary( rev_mind.current );
					return;
				}));
			}

			foreach (dynamic _c in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind2 = _c;
				
				this.greet_revolutionary( rev_mind2 );
			}
			this.modePlayer.Add( this.head_revolutionaries );
			GlobalVars.SSshuttle.emergencyNoEscape = true;
			base.post_setup( report );
			return false;
		}

		// Function from file: revolution.dm
		public override bool pre_setup(  ) {
			double i = 0;
			dynamic lenin = null;

			
			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				this.restricted_jobs.Add( "Assistant" );
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, this.max_headrevs )) {
				i = _a;
				

				if ( this.antag_candidates.len == 0 ) {
					break;
				}
				lenin = Rand13.PickFromTable( this.antag_candidates );
				this.antag_candidates.Remove( lenin );
				this.head_revolutionaries.Add( lenin );
				lenin.restricted_roles = this.restricted_jobs;
			}

			if ( this.head_revolutionaries.len < this.required_enemies ) {
				return false;
			}
			return true;
		}

		// Function from file: revolution.dm
		public override void announce(  ) {
			Game13.WriteMsg( "<B>The current game mode is - Revolution!</B>" );
			Game13.WriteMsg( "<B>Some crewmembers are attempting to start a revolution!<BR>\nRevolutionaries - Kill the Captain, HoP, HoS, CE, RD and CMO. Convert other crewmembers (excluding the heads of staff, and security officers) to your cause by flashing them. Protect your leaders.<BR>\nPersonnel - Protect the heads of staff. Kill the leaders of the revolution, and brainwash the other revolutionaries (by beating them in the head).</B>" );
			return;
		}

	}

}