// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Research : Game_Data {

		public ByTable possible_tech = new ByTable();
		public ByTable known_tech = new ByTable();
		public ByTable possible_designs = new ByTable();
		public ByTable known_designs = new ByTable();

		// Function from file: research.dm
		public Research (  ) {
			dynamic T = null;
			dynamic D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Tech) ) - typeof(Tech) )) {
				T = _a;
				
				this.possible_tech.Add( Lang13.Call( T, this ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( Lang13.GetTypes( typeof(Design) ) - typeof(Design) )) {
				D = _b;
				
				this.possible_designs.Add( Lang13.Call( D, this ) );
			}
			this.RefreshResearch();
			return;
		}

		// Function from file: research.dm
		public dynamic FindDesignByID( dynamic id = null ) {
			return this.known_designs[id];
		}

		// Function from file: research.dm
		public void UpdateDesigns( dynamic I = null, dynamic temp_tech = null ) {
			dynamic v = null;
			dynamic D = null;
			int shared_tech = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_designs )) {
				v = _a;
				
				D = this.known_designs[v];
				shared_tech = Lang13.Length( temp_tech & D.req_tech );

				if ( shared_tech != 0 ) {
					D.reliability = Num13.MinInt( 100, Convert.ToInt32( D.reliability + shared_tech ) );

					if ( D.build_path == I.type ) {
						D.reliability = Num13.MinInt( 100, Convert.ToInt32( D.reliability + shared_tech * Rand13.Int( 1, 3 ) ) );

						if ( I.crit_fail ) {
							D.reliability = Num13.MinInt( 100, Convert.ToInt32( D.reliability + shared_tech * Rand13.Int( 3, 5 ) ) );
						}
					}
				}
			}
			return;
		}

		// Function from file: research.dm
		public void UpdateTech( dynamic ID = null, dynamic level = null ) {
			dynamic KT = null;

			KT = this.known_tech[ID];

			if ( Lang13.Bool( KT ) ) {
				
				if ( Convert.ToDouble( KT.level ) <= Convert.ToDouble( level ) ) {
					KT.level = Num13.MaxInt( Convert.ToInt32( KT.level + 1 ), Convert.ToInt32( level - 1 ) );
				}
			}
			return;
		}

		// Function from file: research.dm
		public void RefreshResearch(  ) {
			Tech PT = null;
			Design PD = null;
			dynamic v = null;
			dynamic T = null;
			dynamic v2 = null;
			Design D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.possible_tech, typeof(Tech) )) {
				PT = _a;
				

				if ( Lang13.Bool( this.TechHasReqs( PT ) ) ) {
					this.AddTech2Known( PT );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.possible_designs, typeof(Design) )) {
				PD = _b;
				

				if ( Lang13.Bool( this.DesignHasReqs( PD ) ) ) {
					this.AddDesign2Known( PD );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.known_tech )) {
				v = _c;
				
				T = this.known_tech[v];
				T.level = Num13.MaxInt( 1, Num13.MinInt( Convert.ToInt32( T.level ), 20 ) );
			}

			foreach (dynamic _d in Lang13.Enumerate( this.known_designs )) {
				v2 = _d;
				
				D = this.known_designs[v2];
				D.CalcReliability( this.known_tech );
			}
			return;
		}

		// Function from file: research.dm
		public virtual void AddDesign2Known( dynamic D = null ) {
			dynamic known = null;

			
			if ( Lang13.Bool( this.known_designs[D.id] ) ) {
				known = this.known_designs[D.id];

				if ( Convert.ToDouble( D.reliability ) > Convert.ToDouble( known.reliability ) ) {
					known.reliability = D.reliability;
				}
				return;
			}
			this.known_designs[D.id] = D;
			return;
		}

		// Function from file: research.dm
		public void AddTech2Known( Tech T = null ) {
			dynamic known = null;

			
			if ( Lang13.Bool( this.known_tech[T.id] ) ) {
				known = this.known_tech[T.id];

				if ( ( (T.level != 0) ?1:0) > Convert.ToDouble( known.level ) ) { //Originally just *.level, not (*.level != 0) -Pdan
					known.level = T.level;
				}
				return;
			}
			this.known_tech[T.id] = T;
			return;
		}

		// Function from file: research.dm
		public int? DesignHasReqs( Design D = null ) {
			dynamic req = null;
			dynamic known = null;

			
			if ( D.req_tech.len == 0 ) {
				return GlobalVars.TRUE;
			}

			foreach (dynamic _a in Lang13.Enumerate( D.req_tech )) {
				req = _a;
				
				known = this.known_tech[req];

				if ( !Lang13.Bool( known ) || Convert.ToDouble( known.level ) < Convert.ToDouble( D.req_tech[req] ) ) {
					return GlobalVars.FALSE;
				}
			}
			return GlobalVars.TRUE;
		}

		// Function from file: research.dm
		public int? TechHasReqs( Tech T = null ) {
			dynamic req = null;
			dynamic known = null;

			
			if ( T.req_tech.len == 0 ) {
				return GlobalVars.TRUE;
			}

			foreach (dynamic _a in Lang13.Enumerate( T.req_tech )) {
				req = _a;
				
				known = this.known_tech[req];

				if ( !Lang13.Bool( known ) || Convert.ToDouble( known.level ) < Convert.ToDouble( T.req_tech[req] ) ) {
					return GlobalVars.FALSE;
				}
			}
			return GlobalVars.TRUE;
		}

	}

}