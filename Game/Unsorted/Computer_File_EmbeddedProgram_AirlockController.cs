// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Computer_File_EmbeddedProgram_AirlockController : Computer_File_EmbeddedProgram {

		public dynamic id_tag = null;
		public dynamic exterior_door_tag = null;
		public dynamic interior_door_tag = null;
		public dynamic airpump_tag = null;
		public dynamic sensor_tag = null;
		public dynamic sanitize_external = null;
		public int target_state = 0;
		public double? sensor_pressure = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.state = 0;
		}

		// Function from file: airlock_controller.dm
		public override int? process( dynamic seconds = null ) {
			bool process_again = false;
			Signal signal = null;
			Signal signal2 = null;
			Signal signal3 = null;
			Signal signal4 = null;
			Signal signal5 = null;
			Signal signal6 = null;
			Signal signal7 = null;
			double? target_pressure = null;
			Signal signal8 = null;
			Signal signal9 = null;
			Signal signal10 = null;
			Signal signal11 = null;

			process_again = true;

			while (process_again) {
				process_again = false;

				switch ((int)( this.state )) {
					case -2:
						
						if ( this.target_state > this.state ) {
							
							if ( this.memory["interior_status"] == "closed" ) {
								this.state = 0;
								process_again = true;
							} else {
								signal = new Signal();
								signal.data["tag"] = this.interior_door_tag;
								signal.data["command"] = "secure_close";
								this.post_signal( signal );
							}
						} else if ( this.memory["pump_status"] != "off" ) {
							signal2 = new Signal();
							signal2.data = new ByTable().Set( "tag", this.airpump_tag ).Set( "power", 0 ).Set( "sigtype", "command" );
							this.post_signal( signal2 );
						}
						break;
					case -1:
						
						if ( this.target_state < this.state ) {
							
							if ( ( this.sensor_pressure ??0) >= 96.25874328613281 ) {
								
								if ( this.memory["interior_status"] == "open" ) {
									this.state = -2;
									process_again = true;
								} else {
									signal3 = new Signal();
									signal3.data["tag"] = this.interior_door_tag;
									signal3.data["command"] = "secure_open";
									this.post_signal( signal3 );
								}
							} else {
								signal4 = new Signal();
								signal4.data = new ByTable().Set( "tag", this.airpump_tag ).Set( "sigtype", "command" );

								if ( this.memory["pump_status"] == "siphon" ) {
									signal4.data["stabalize"] = 1;
								} else if ( this.memory["pump_status"] != "release" ) {
									signal4.data["power"] = 1;
								}
								this.post_signal( signal4 );
							}
						} else if ( this.target_state > this.state ) {
							this.state = 0;
							process_again = true;
						}
						break;
					case 0:
						
						if ( this.target_state > this.state ) {
							
							if ( this.memory["interior_status"] == "closed" ) {
								this.state = 1;
								process_again = true;
							} else {
								signal5 = new Signal();
								signal5.data["tag"] = this.interior_door_tag;
								signal5.data["command"] = "secure_close";
								this.post_signal( signal5 );
							}
						} else if ( this.target_state < this.state ) {
							
							if ( this.memory["exterior_status"] == "closed" ) {
								this.state = -1;
								process_again = true;
							} else {
								signal6 = new Signal();
								signal6.data["tag"] = this.exterior_door_tag;
								signal6.data["command"] = "secure_close";
								this.post_signal( signal6 );
							}
						} else if ( this.memory["pump_status"] != "off" ) {
							signal7 = new Signal();
							signal7.data = new ByTable().Set( "tag", this.airpump_tag ).Set( "power", 0 ).Set( "sigtype", "command" );
							this.post_signal( signal7 );
						}
						break;
					case 1:
						target_pressure = 5.066249847412109;

						if ( Lang13.Bool( this.sanitize_external ) ) {
							target_pressure = 1.01341;
						}

						if ( ( this.sensor_pressure ??0) <= ( target_pressure ??0) ) {
							
							if ( this.target_state > this.state ) {
								
								if ( this.memory["exterior_status"] == "open" ) {
									this.state = 2;
								} else {
									signal8 = new Signal();
									signal8.data["tag"] = this.exterior_door_tag;
									signal8.data["command"] = "secure_open";
									this.post_signal( signal8 );
								}
							} else if ( this.target_state < this.state ) {
								this.state = 0;
								process_again = true;
							}
						} else if ( this.target_state < this.state && !Lang13.Bool( this.sanitize_external ) ) {
							this.state = 0;
							process_again = true;
						} else {
							signal9 = new Signal();
							signal9.transmission_method = 1;
							signal9.data = new ByTable().Set( "tag", this.airpump_tag ).Set( "sigtype", "command" );

							if ( this.memory["pump_status"] == "release" ) {
								signal9.data["purge"] = 1;
							} else if ( this.memory["pump_status"] != "siphon" ) {
								signal9.data["power"] = 1;
							}
							this.post_signal( signal9 );
						}
						break;
					case 2:
						
						if ( this.target_state < this.state ) {
							
							if ( this.memory["exterior_status"] == "closed" ) {
								
								if ( Lang13.Bool( this.sanitize_external ) ) {
									this.state = 1;
									process_again = true;
								} else {
									this.state = 0;
									process_again = true;
								}
							} else {
								signal10 = new Signal();
								signal10.data["tag"] = this.exterior_door_tag;
								signal10.data["command"] = "secure_close";
								this.post_signal( signal10 );
							}
						} else if ( this.memory["pump_status"] != "off" ) {
							signal11 = new Signal();
							signal11.data = new ByTable().Set( "tag", this.airpump_tag ).Set( "power", 0 ).Set( "sigtype", "command" );
							this.post_signal( signal11 );
						}
						break;
				}
			}
			this.memory["sensor_pressure"] = this.sensor_pressure;
			this.memory["processing"] = this.state != this.target_state;
			return 1;
		}

		// Function from file: airlock_controller.dm
		public override void receive_user_command( dynamic command = null ) {
			
			dynamic _a = command; // Was a switch-case, sorry for the mess.
			if ( _a=="cycle_closed" ) {
				this.target_state = 0;
			} else if ( _a=="cycle_exterior" ) {
				this.target_state = 2;
			} else if ( _a=="cycle_interior" ) {
				this.target_state = -2;
			} else if ( _a=="abort" ) {
				this.target_state = 0;
			}
			return;
		}

		// Function from file: airlock_controller.dm
		public override dynamic receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic receive_tag = null;

			receive_tag = signal.data["tag"];

			if ( !Lang13.Bool( receive_tag ) ) {
				return null;
			}

			if ( receive_tag == this.sensor_tag ) {
				
				if ( Lang13.Bool( signal.data["pressure"] ) ) {
					this.sensor_pressure = String13.ParseNumber( signal.data["pressure"] );
				}
			} else if ( receive_tag == this.exterior_door_tag ) {
				this.memory["exterior_status"] = signal.data["door_status"];
			} else if ( receive_tag == this.interior_door_tag ) {
				this.memory["interior_status"] = signal.data["door_status"];
			} else if ( receive_tag == this.airpump_tag ) {
				
				if ( Lang13.Bool( signal.data["power"] ) ) {
					this.memory["pump_status"] = signal.data["direction"];
				} else {
					this.memory["pump_status"] = "off";
				}
			} else if ( receive_tag == this.id_tag ) {
				
				dynamic _a = signal.data["command"]; // Was a switch-case, sorry for the mess.
				if ( _a=="cycle" ) {
					
					if ( this.state < 0 ) {
						this.target_state = 2;
					} else {
						this.target_state = -2;
					}
				}
			}
			return null;
		}

	}

}