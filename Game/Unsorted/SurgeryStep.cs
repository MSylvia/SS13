// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep : Game_Data {

		public ByTable implements = new ByTable();
		public dynamic implement_type = null;
		public bool accept_hand = false;
		public bool accept_any_item = false;
		public double time = 10;
		public string name = null;

		// Function from file: surgery_step.dm
		public virtual bool tool_check( dynamic user = null, dynamic tool = null ) {
			return true;
		}

		// Function from file: surgery_step.dm
		public virtual bool failure( dynamic user = null, Mob target = null, string target_zone = null, dynamic tool = null, Surgery surgery = null ) {
			((Ent_Static)user).visible_message( "<span class='warning'>" + user + " screws up!</span>", "<span class='warning'>You screw up!</span>" );
			return false;
		}

		// Function from file: surgery_step.dm
		public virtual bool success( dynamic user = null, Mob target = null, string target_zone = null, dynamic tool = null, Surgery surgery = null ) {
			((Ent_Static)user).visible_message( "" + user + " succeeds!", "<span class='notice'>You succeed.</span>" );
			return true;
		}

		// Function from file: surgery_step.dm
		public virtual int preop( dynamic user = null, Mob target = null, string target_zone = null, dynamic tool = null, Surgery surgery = null ) {
			((Ent_Static)user).visible_message( "" + user + " begins to perform surgery on " + target + ".", "<span class='notice'>You begin to perform surgery on " + target + "...</span>" );
			return 0;
		}

		// Function from file: surgery_step.dm
		public void initiate( dynamic user = null, Mob target = null, string target_zone = null, dynamic tool = null, Surgery surgery = null ) {
			bool advance = false;
			double prob_chance = 0;

			surgery.step_in_progress = true;

			if ( this.preop( user, target, target_zone, tool, surgery ) == -1 ) {
				surgery.step_in_progress = false;
				return;
			}

			if ( GlobalFuncs.do_after( user, this.time, null, target ) ) {
				advance = false;
				prob_chance = 100;

				if ( Lang13.Bool( this.implement_type ) ) {
					prob_chance = Convert.ToDouble( this.implements[this.implement_type] );
				}
				prob_chance *= GlobalFuncs.get_location_modifier( target );

				if ( Rand13.PercentChance( ((int)( prob_chance )) ) || user is Mob_Living_Silicon_Robot ) {
					
					if ( this.success( user, target, target_zone, tool, surgery ) ) {
						advance = true;
					}
				} else if ( this.failure( user, target, target_zone, tool, surgery ) ) {
					advance = true;
				}

				if ( advance ) {
					surgery.status++;

					if ( surgery.status > surgery.steps.len ) {
						surgery.complete( target );
					}
				}
			}
			surgery.step_in_progress = false;
			return;
		}

		// Function from file: surgery_step.dm
		public bool try_op( dynamic user = null, Mob_Living target = null, string target_zone = null, dynamic tool = null, Surgery surgery = null ) {
			bool success = false;
			dynamic path = null;

			success = false;

			if ( this.accept_hand ) {
				
				if ( !Lang13.Bool( tool ) ) {
					success = true;
				}
			}

			if ( this.accept_any_item ) {
				
				if ( Lang13.Bool( tool ) && this.tool_check( user, tool ) ) {
					success = true;
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( this.implements )) {
					path = _a;
					

					if ( Lang13.Bool( path.IsInstanceOfType( tool ) ) ) {
						this.implement_type = path;

						if ( this.tool_check( user, tool ) ) {
							success = true;
						}
					}
				}
			}

			if ( success ) {
				
				if ( target_zone == surgery.location ) {
					
					if ( GlobalFuncs.get_location_accessible( target, target_zone ) || surgery.ignore_clothes ) {
						this.initiate( user, target, target_zone, tool, surgery );
						return true;
					} else {
						user.WriteMsg( "<span class='warning'>You need to expose " + target + "'s " + GlobalFuncs.parse_zone( target_zone ) + " to perform surgery on it!</span>" );
						return true;
					}
				}
			}

			if ( user is Mob_Living_Silicon_Robot && user.a_intent != "harm" ) {
				return true;
			}
			return false;
		}

	}

}