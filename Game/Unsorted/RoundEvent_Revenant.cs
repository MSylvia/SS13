// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_Revenant : RoundEvent {

		public string key_of_revenant = null;

		// Function from file: revenant_spawn_event.dm
		public override bool start(  ) {
			this.get_revenant();
			return false;
		}

		// Function from file: revenant_spawn_event.dm
		public void find_revenant(  ) {
			GlobalFuncs.message_admins( "An event failed to spawn a revenant. Retrying momentarily..." );
			Task13.Schedule( 50, (Task13.Closure)(() => {
				
				if ( this.get_revenant( true ) ) {
					GlobalFuncs.message_admins( "" + this.key_of_revenant + " has been spawned as a revenant." );
					GlobalFuncs.log_game( "" + this.key_of_revenant + " was spawned as a revenant by an event." );
					return;
				}
				GlobalFuncs.message_admins( "No candidates were available for becoming a revenant." );
				return;
			}));
			this.kill(); return;
		}

		// Function from file: revenant_spawn_event.dm
		public bool get_revenant( bool? end_if_fail = null ) {
			end_if_fail = end_if_fail ?? false;

			int deadMobs = 0;
			dynamic M = null;
			ByTable candidates = null;
			dynamic C = null;
			Mind player_mind = null;
			ByTable spawn_locs = null;
			Obj_Effect_Landmark L = null;
			Obj_Effect_Landmark L2 = null;
			Mob_Living_SimpleAnimal_Revenant revvie = null;

			deadMobs = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
				M = _a;
				
				deadMobs++;
			}

			if ( deadMobs < 10 ) {
				GlobalFuncs.message_admins( "Random event attempted to spawn a revenant, but there were only " + deadMobs + "/" + 10 + " dead mobs." );
				return false;
			}
			this.key_of_revenant = null;

			if ( !Lang13.Bool( this.key_of_revenant ) ) {
				candidates = GlobalFuncs.get_candidates( "revenant" );

				if ( !( candidates.len != 0 ) ) {
					
					if ( end_if_fail == true ) {
						return false;
					}
					this.find_revenant(); return false;
				}
				C = Rand13.PickFromTable( candidates );
				this.key_of_revenant = C.key;
			}

			if ( !Lang13.Bool( this.key_of_revenant ) ) {
				
				if ( end_if_fail == true ) {
					return false;
				}
				this.find_revenant(); return false;
			}
			player_mind = new Mind( this.key_of_revenant );
			player_mind.active = true;
			spawn_locs = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
				L = _c;
				

				if ( L.loc is Tile ) {
					
					switch ((string)( L.name )) {
						case "revenantspawn":
							spawn_locs.Add( L.loc );
							break;
					}
				}
			}

			if ( !( spawn_locs != null ) ) {
				
				foreach (dynamic _e in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					L2 = _e;
					

					if ( L2.loc is Tile ) {
						
						switch ((string)( L2.name )) {
							case "carpspawn":
								spawn_locs.Add( L2.loc );
								break;
						}
					}
				}
			}

			if ( !( spawn_locs != null ) ) {
				spawn_locs.Add( GlobalFuncs.get_turf( player_mind.current ) );
			}

			if ( !( spawn_locs != null ) ) {
				this.find_revenant(); return false;
			}
			revvie = new Mob_Living_SimpleAnimal_Revenant( Rand13.PickFromTable( spawn_locs ) );
			player_mind.transfer_to( revvie );
			player_mind.assigned_role = "revenant";
			player_mind.special_role = "Revenant";
			GlobalVars.ticker.mode.traitors.Or( player_mind );
			GlobalFuncs.message_admins( "" + this.key_of_revenant + " has been made into a revenant by an event." );
			GlobalFuncs.log_game( "" + this.key_of_revenant + " was spawned as a revenant by an event." );
			return true;
		}

	}

}