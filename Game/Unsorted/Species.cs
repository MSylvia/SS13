// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Species : Game_Data {

		public string id = null;
		public dynamic name = null;
		public bool roundstart = false;
		public string default_color = "#FFF";
		public string eyes = "eyes";
		public bool sexes = true;
		public string hair_color = null;
		public int hair_alpha = 255;
		public bool use_skintones = false;
		public bool need_nutrition = true;
		public Type exotic_blood = null;
		public dynamic meat = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Human);
		public Type skinned_type = typeof(Obj_Item_Stack_Sheet_Animalhide_Generic);
		public ByTable no_equip = new ByTable();
		public dynamic nojumpsuit = 0;
		public bool blacklisted = false;
		public bool dangerous_existence = false;
		public dynamic say_mod = "says";
		public ByTable default_features = new ByTable();
		public ByTable mutant_bodyparts = new ByTable();
		public int speedmod = 0;
		public int armor = 0;
		public double brutemod = 1;
		public double burnmod = 1;
		public double coldmod = 1;
		public double heatmod = 1;
		public int punchdamagelow = 0;
		public int punchdamagehigh = 9;
		public double punchstunthreshold = 9;
		public bool siemens_coeff = true;
		public dynamic invis_sight = 25;
		public int darksight = 2;
		public ByTable specflags = new ByTable();
		public dynamic attack_verb = "punch";
		public dynamic attack_sound = "sound/weapons/punch1.ogg";
		public dynamic miss_sound = "sound/weapons/punchmiss.ogg";
		public ByTable ignored_by = new ByTable();
		public double? safe_oxygen_min = 16;
		public double? safe_oxygen_max = 0;
		public double? safe_co2_min = 0;
		public double? safe_co2_max = 10;
		public double? safe_toxins_min = 0;
		public double? safe_toxins_max = 0.041;
		public double SA_para_min = 1;
		public double SA_sleep_min = 5;
		public bool oxy_breath_dam_min = true;
		public int oxy_breath_dam_max = 10;
		public bool co2_breath_dam_min = true;
		public int co2_breath_dam_max = 10;
		public bool tox_breath_dam_min = true;
		public int tox_breath_dam_max = 10;

		// Function from file: species.dm
		public dynamic ExtinguishMob( Mob_Living_Carbon_Human H = null ) {
			return null;
		}

		// Function from file: species.dm
		public bool IgniteMob( Mob_Living_Carbon_Human H = null ) {
			
			if ( this.specflags.Contains( 64 ) || this.specflags.Contains( 2048 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: species.dm
		public bool handle_fire( Mob_Living_Carbon_Human H = null ) {
			
			if ( this.specflags.Contains( 64 ) || this.specflags.Contains( 2048 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: species.dm
		public void handle_environment( GasMixture environment = null, Mob_Living H = null ) {
			dynamic loc_temp = null;
			int thermal_protection = 0;
			dynamic thermal_protection2 = null;
			dynamic pressure = null;
			dynamic adjusted_pressure = null;

			
			if ( !( environment != null ) ) {
				return;
			}

			if ( H.loc is Obj_Machinery_Atmospherics_Components_Unary_CryoCell ) {
				return;
			}
			loc_temp = H.get_temperature( environment );

			if ( H.stat != 2 ) {
				((Mob_Living_Carbon)H).natural_bodytemperature_stabilization();
			}

			if ( !H.on_fire ) {
				
				if ( Convert.ToDouble( loc_temp ) < Convert.ToDouble( H.bodytemperature ) ) {
					thermal_protection = ((Mob_Living_Carbon_Human)H).get_cold_protection( loc_temp );

					if ( thermal_protection < 1 ) {
						H.bodytemperature += Num13.MinInt( ((int)( ( 1 - thermal_protection ) * Convert.ToDouble( ( loc_temp - H.bodytemperature ) / 6 ) )), 30 );
					}
				} else {
					thermal_protection2 = ((dynamic)H).get_heat_protection( loc_temp );

					if ( Convert.ToDouble( thermal_protection2 ) < 1 ) {
						H.bodytemperature += Num13.MinInt( ((int)( ( 1 - Convert.ToDouble( thermal_protection2 ) ) * Convert.ToDouble( ( loc_temp - H.bodytemperature ) / 6 ) )), 30 );
					}
				}
			}

			if ( Convert.ToDouble( H.bodytemperature ) > 360.41 && !this.specflags.Contains( 64 ) ) {
				
				dynamic _a = H.bodytemperature; // Was a switch-case, sorry for the mess.
				if ( 360<=_a&&_a<=400 ) {
					H.throw_alert( "temp", typeof(Obj_Screen_Alert_Hot), 1 );
					H.apply_damage( this.heatmod * 2, "fire" );
				} else if ( 400<=_a&&_a<=460 ) {
					H.throw_alert( "temp", typeof(Obj_Screen_Alert_Hot), 2 );
					H.apply_damage( this.heatmod * 3, "fire" );
				} else if ( 460<=_a&&_a<=Double.PositiveInfinity ) {
					H.throw_alert( "temp", typeof(Obj_Screen_Alert_Hot), 3 );

					if ( H.on_fire ) {
						H.apply_damage( this.heatmod * 8, "fire" );
					} else {
						H.apply_damage( this.heatmod * 3, "fire" );
					}
				}
			} else if ( Convert.ToDouble( H.bodytemperature ) < 260.41 && !Lang13.Bool( ((dynamic)H).dna.mutations.Contains( GlobalVars.mutations_list["Cold Resistance"] ) ) ) {
				
				dynamic _b = H.bodytemperature; // Was a switch-case, sorry for the mess.
				if ( 200<=_b&&_b<=260 ) {
					H.throw_alert( "temp", typeof(Obj_Screen_Alert_Cold), 1 );
					H.apply_damage( this.coldmod * 0.5, "fire" );
				} else if ( 120<=_b&&_b<=200 ) {
					H.throw_alert( "temp", typeof(Obj_Screen_Alert_Cold), 2 );
					H.apply_damage( this.coldmod * 1.5, "fire" );
				} else if ( Double.NegativeInfinity<=_b&&_b<=120 ) {
					H.throw_alert( "temp", typeof(Obj_Screen_Alert_Cold), 3 );
					H.apply_damage( this.coldmod * 3, "fire" );
				} else {
					H.clear_alert( "temp" );
				}
			} else {
				H.clear_alert( "temp" );
			}
			pressure = environment.return_pressure();
			adjusted_pressure = H.calculate_affecting_pressure( pressure );

			dynamic _c = adjusted_pressure; // Was a switch-case, sorry for the mess.
			if ( 550<=_c&&_c<=Double.PositiveInfinity ) {
				
				if ( !this.specflags.Contains( 64 ) ) {
					H.adjustBruteLoss( Num13.MinInt( Convert.ToInt32( ( adjusted_pressure / 550 - 1 ) * 4 ), 4 ) );
					H.throw_alert( "pressure", typeof(Obj_Screen_Alert_Highpressure), 2 );
				} else {
					H.clear_alert( "pressure" );
				}
			} else if ( 325<=_c&&_c<=550 ) {
				H.throw_alert( "pressure", typeof(Obj_Screen_Alert_Highpressure), 1 );
			} else if ( 50<=_c&&_c<=325 ) {
				H.clear_alert( "pressure" );
			} else if ( 20<=_c&&_c<=50 ) {
				H.throw_alert( "pressure", typeof(Obj_Screen_Alert_Lowpressure), 1 );
			} else {
				
				if ( ((Dna)((dynamic)H).dna).check_mutation( "Cold Resistance" ) != 0 || this.specflags.Contains( "Cold Resistance" ) ) {
					H.clear_alert( "pressure" );
				} else {
					H.adjustBruteLoss( 2 );
					H.throw_alert( "pressure", typeof(Obj_Screen_Alert_Lowpressure), 2 );
				}
			}
			return;
		}

		// Function from file: species.dm
		public void handle_breath_temperature( GasMixture breath = null, Mob_Living H = null ) {
			
			if ( Math.Abs( 310.41 - Convert.ToDouble( breath.temperature ) ) > 50 ) {
				
				if ( !Lang13.Bool( ((dynamic)H).dna.mutations.Contains( GlobalVars.mutations_list["Cold Resistance"] ) ) ) {
					
					dynamic _a = breath.temperature; // Was a switch-case, sorry for the mess.
					if ( Double.NegativeInfinity<=_a&&_a<=120 ) {
						H.apply_damage( 3, "fire", "head" );
					} else if ( 120<=_a&&_a<=200 ) {
						H.apply_damage( 1.5, "fire", "head" );
					} else if ( 200<=_a&&_a<=260 ) {
						H.apply_damage( 0.5, "fire", "head" );
					}
				}

				if ( !this.specflags.Contains( 64 ) ) {
					
					dynamic _b = breath.temperature; // Was a switch-case, sorry for the mess.
					if ( 360<=_b&&_b<=400 ) {
						H.apply_damage( 2, "fire", "head" );
					} else if ( 400<=_b&&_b<=1000 ) {
						H.apply_damage( 4, "fire", "head" );
					} else if ( 1000<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 8, "fire", "head" );
					}
				}
			}
			return;
		}

		// Function from file: species.dm
		public double handle_too_little_breath( Mob_Living H = null, double? breath_pp = null, double? safe_breath_min = null, bool? true_pp = null ) {
			breath_pp = breath_pp ?? 0;
			safe_breath_min = safe_breath_min ?? 0;
			true_pp = true_pp ?? false;

			double _default = 0;

			double ratio = 0;

			_default = 0;

			if ( !( H != null ) || !Lang13.Bool( safe_breath_min ) ) {
				return 0;
			}

			if ( !this.specflags.Contains( 256 ) || Convert.ToDouble( H.health ) <= ( GlobalVars.config.health_threshold_crit ??0) ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					H.emote( "gasp" );
				}

				if ( ( breath_pp ??0) > 0 ) {
					ratio = ( safe_breath_min ??0) / ( breath_pp ??0);
					H.adjustOxyLoss( Num13.MinInt( ((int)( ratio * 5 )), 3 ) );
					((dynamic)H).failed_last_breath = 1;
					_default = ( true_pp == true ?1:0) * ratio / 6;
				} else {
					H.adjustOxyLoss( 3 );
					((dynamic)H).failed_last_breath = 1;
				}
			}
			return _default;
		}

		// Function from file: species.dm
		public bool check_breath( GasMixture breath = null, Mob_Living H = null ) {
			double gas_breathed = 0;
			ByTable breath_gases = null;
			double? O2_pp = null;
			double? Toxins_pp = null;
			double? CO2_pp = null;
			dynamic ratio = null;
			dynamic ratio2 = null;
			double SA_pp = 0;

			
			if ( ( H.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( !( breath != null ) || breath.total_moles() == 0 ) {
				
				if ( Lang13.Bool( H.reagents.has_reagent( "epinephrine" ) ) ) {
					return false;
				}

				if ( Convert.ToDouble( H.health ) >= ( GlobalVars.config.health_threshold_crit ??0) ) {
					
					if ( this.specflags.Contains( 256 ) ) {
						return true;
					}
					H.adjustOxyLoss( 3 );
					((dynamic)H).failed_last_breath = 1;
				} else {
					H.adjustOxyLoss( GlobalVars.SSmob.wait / 30 );
					((dynamic)H).failed_last_breath = 1;
				}
				H.throw_alert( "oxy", typeof(Obj_Screen_Alert_Oxy) );
				return false;
			}
			gas_breathed = 0;
			breath_gases = breath.gases;
			breath.assert_gases( "o2", "plasma", "co2", "n2o" );
			O2_pp = Lang13.DoubleNullable( breath.get_breath_partial_pressure( breath_gases["o2"][1] ) );
			Toxins_pp = Lang13.DoubleNullable( breath.get_breath_partial_pressure( breath_gases["plasma"][1] ) );
			CO2_pp = Lang13.DoubleNullable( breath.get_breath_partial_pressure( breath_gases["co2"][1] ) );

			if ( Lang13.Bool( this.safe_oxygen_max ) ) {
				
				if ( ( O2_pp ??0) > ( this.safe_oxygen_max ??0) && !this.specflags.Contains( 256 ) ) {
					ratio = breath_gases["o2"][1] / this.safe_oxygen_max * 10;
					H.adjustOxyLoss( Num13.MaxInt( this.oxy_breath_dam_min ?1:0, Num13.MinInt( Convert.ToInt32( ratio ), this.oxy_breath_dam_max ) ) );
					H.throw_alert( "too_much_oxy", typeof(Obj_Screen_Alert_TooMuchOxy) );
				} else {
					H.clear_alert( "too_much_oxy" );
				}
			}

			if ( Lang13.Bool( this.safe_oxygen_min ) ) {
				
				if ( ( O2_pp ??0) < ( this.safe_oxygen_min ??0) ) {
					gas_breathed = this.handle_too_little_breath( H, O2_pp, this.safe_oxygen_min, Lang13.BoolNullable( breath_gases["o2"][1] ) );
					H.throw_alert( "oxy", typeof(Obj_Screen_Alert_Oxy) );
				} else {
					((dynamic)H).failed_last_breath = 0;

					if ( Lang13.Bool( H.getOxyLoss() ) ) {
						H.adjustOxyLoss( -5 );
					}
					gas_breathed = Convert.ToDouble( breath_gases["o2"][1] / 6 );
					H.clear_alert( "oxy" );
				}
			}
			breath_gases["o2"][1] -= gas_breathed;
			breath_gases["co2"][1] += gas_breathed;
			gas_breathed = 0;

			if ( Lang13.Bool( this.safe_co2_max ) ) {
				
				if ( ( CO2_pp ??0) > ( this.safe_co2_max ??0) && !this.specflags.Contains( 256 ) ) {
					
					if ( !Lang13.Bool( ((dynamic)H).co2overloadtime ) ) {
						((dynamic)H).co2overloadtime = Game13.time;
					} else if ( Game13.time - Convert.ToDouble( ((dynamic)H).co2overloadtime ) > 120 ) {
						H.Paralyse( 3 );
						H.adjustOxyLoss( 3 );

						if ( Game13.time - Convert.ToDouble( ((dynamic)H).co2overloadtime ) > 300 ) {
							H.adjustOxyLoss( 8 );
						}
						H.throw_alert( "too_much_co2", typeof(Obj_Screen_Alert_TooMuchCo2) );
					}

					if ( Rand13.PercentChance( 20 ) ) {
						H.emote( "cough" );
					}
				} else {
					((dynamic)H).co2overloadtime = 0;
					H.clear_alert( "too_much_co2" );
				}
			}

			if ( Lang13.Bool( this.safe_co2_min ) ) {
				
				if ( ( CO2_pp ??0) < ( this.safe_co2_min ??0) ) {
					gas_breathed = this.handle_too_little_breath( H, CO2_pp, this.safe_co2_min, Lang13.BoolNullable( breath_gases["co2"][1] ) );
					H.throw_alert( "not_enough_co2", typeof(Obj_Screen_Alert_NotEnoughCo2) );
				} else {
					((dynamic)H).failed_last_breath = 0;
					H.adjustOxyLoss( -5 );
					gas_breathed = Convert.ToDouble( breath_gases["co2"][1] / 6 );
					H.clear_alert( "not_enough_co2" );
				}
			}
			breath_gases["co2"][1] -= gas_breathed;
			breath_gases["o2"][1] += gas_breathed;
			gas_breathed = 0;

			if ( Lang13.Bool( this.safe_toxins_max ) ) {
				
				if ( ( Toxins_pp ??0) > ( this.safe_toxins_max ??0) && !this.specflags.Contains( 256 ) ) {
					ratio2 = breath_gases["plasma"][1] / this.safe_toxins_max * 10;

					if ( H.reagents != null ) {
						H.reagents.add_reagent( "plasma", Num13.MaxInt( this.tox_breath_dam_min ?1:0, Num13.MinInt( Convert.ToInt32( ratio2 ), this.tox_breath_dam_max ) ) );
					}
					H.throw_alert( "tox_in_air", typeof(Obj_Screen_Alert_ToxInAir) );
				} else {
					H.clear_alert( "tox_in_air" );
				}
			}

			if ( Lang13.Bool( this.safe_toxins_min ) ) {
				
				if ( ( Toxins_pp ??0) < ( this.safe_toxins_min ??0) && !this.specflags.Contains( 256 ) ) {
					gas_breathed = this.handle_too_little_breath( H, Toxins_pp, this.safe_toxins_min, Lang13.BoolNullable( breath_gases["plasma"][1] ) );
					H.throw_alert( "not_enough_tox", typeof(Obj_Screen_Alert_NotEnoughTox) );
				} else {
					((dynamic)H).failed_last_breath = 0;
					H.adjustOxyLoss( -5 );
					gas_breathed = Convert.ToDouble( breath_gases["plasma"][1] / 6 );
					H.clear_alert( "not_enough_tox" );
				}
			}
			breath_gases["plasma"][1] -= gas_breathed;
			breath_gases["co2"][1] += gas_breathed;
			gas_breathed = 0;

			if ( breath != null && !this.specflags.Contains( 256 ) ) {
				SA_pp = Convert.ToDouble( breath.get_breath_partial_pressure( breath_gases["n2o"][1] ) );

				if ( SA_pp > this.SA_para_min ) {
					H.Paralyse( 3 );

					if ( SA_pp > this.SA_sleep_min ) {
						H.Sleeping( Num13.MaxInt( H.sleeping + 2, 10 ) );
					}
				} else if ( SA_pp > 0.01 ) {
					
					if ( Rand13.PercentChance( 20 ) ) {
						H.emote( Rand13.Pick(new object [] { "giggle", "laugh" }) );
					}
				}
				this.handle_breath_temperature( breath, H );
				breath.garbage_collect();
			}
			return true;
		}

		// Function from file: species.dm
		public dynamic breathe( Mob_Living_Carbon_Human H = null ) {
			return null;
		}

		// Function from file: species.dm
		public virtual void on_hit( dynamic proj_type = null, Mob H = null ) {
			
			dynamic _a = proj_type; // Was a switch-case, sorry for the mess.
			if ( _a==typeof(Obj_Item_Projectile_Energy_Floramut) ) {
				H.show_message( "<span class='notice'>The radiation beam dissipates harmlessly through your body.</span>" );
			} else if ( _a==typeof(Obj_Item_Projectile_Energy_Florayield) ) {
				H.show_message( "<span class='notice'>The radiation beam dissipates harmlessly through your body.</span>" );
			}
			return;
		}

		// Function from file: species.dm
		public virtual bool apply_damage( dynamic damage = null, dynamic damagetype = null, dynamic def_zone = null, double? blocked = null, Mob_Living_Carbon_Human H = null ) {
			damagetype = damagetype ?? "brute";

			dynamic organ = null;

			blocked = ( 100 - ( ( blocked ??0) + this.armor ) ) / 100;

			if ( !Lang13.Bool( damage ) || ( blocked ??0) <= 0 ) {
				return false;
			}
			organ = null;

			if ( def_zone is Obj_Item_Organ_Limb ) {
				organ = def_zone;
			} else {
				
				if ( !Lang13.Bool( def_zone ) ) {
					def_zone = GlobalFuncs.ran_zone( def_zone );
				}
				organ = H.get_organ( GlobalFuncs.check_zone( def_zone ) );
			}

			if ( !Lang13.Bool( organ ) ) {
				return false;
			}
			damage = damage * blocked;

			dynamic _a = damagetype; // Was a switch-case, sorry for the mess.
			if ( _a=="brute" ) {
				H.damageoverlaytemp = 20;

				if ( ((Obj_Item_Organ_Limb)organ).take_damage( damage * this.brutemod, 0 ) ) {
					H.update_damage_overlays(  );
				}
			} else if ( _a=="fire" ) {
				H.damageoverlaytemp = 20;

				if ( ((Obj_Item_Organ_Limb)organ).take_damage( 0, damage * this.burnmod ) ) {
					H.update_damage_overlays(  );
				}
			} else if ( _a=="tox" ) {
				H.adjustToxLoss( damage * blocked );
			} else if ( _a=="oxy" ) {
				H.adjustOxyLoss( damage * blocked );
			} else if ( _a=="clone" ) {
				H.adjustCloneLoss( damage * blocked );
			} else if ( _a=="stamina" ) {
				H.adjustStaminaLoss( damage * blocked );
			}
			return true;
		}

		// Function from file: species.dm
		public bool spec_attacked_by( Obj_Item I = null, dynamic user = null, bool? def_zone = null, dynamic affecting = null, dynamic hit_area = null, dynamic intent = null, Obj_Item_Organ_Limb target_limb = null, dynamic target_area = null, Mob_Living_Carbon_Human H = null ) {
			double? armor_block = null;
			dynamic Iforce = null;
			bool bloody = false;
			Ent_Static location = null;
			dynamic M = null;
			Ent_Static G = null;

			
			if ( user != H ) {
				((Ent_Dynamic)user).do_attack_animation( H );

				if ( H.check_shields( I.force, "the " + I.name, I, 1, I.armour_penetration ) ) {
					return false;
				}
			}

			if ( I.attack_verb != null && I.attack_verb.len != 0 ) {
				H.visible_message( "<span class='danger'>" + user + " has " + Rand13.PickFromTable( I.attack_verb ) + " " + H + " in the " + hit_area + " with " + I + "!</span>", "<span class='userdanger'>" + user + " has " + Rand13.PickFromTable( I.attack_verb ) + " " + H + " in the " + hit_area + " with " + I + "!</span>" );
			} else if ( Lang13.Bool( I.force ) ) {
				H.visible_message( "<span class='danger'>" + user + " has attacked " + H + " in the " + hit_area + " with " + I + "!</span>", "<span class='userdanger'>" + user + " has attacked " + H + " in the " + hit_area + " with " + I + "!</span>" );
			} else {
				return false;
			}
			armor_block = H.run_armor_check( affecting, "melee", "<span class='notice'>Your armor has protected your " + hit_area + ".</span>", "<span class='notice'>Your armor has softened a hit to your " + hit_area + ".</span>", I.armour_penetration );
			armor_block = Num13.MinInt( 90, ((int)( armor_block ??0 )) );
			Iforce = I.force;
			this.apply_damage( I.force, I.damtype, affecting, armor_block, H );
			bloody = false;

			if ( I.damtype == "brute" && Lang13.Bool( I.force ) && Rand13.PercentChance( Convert.ToInt32( I.force * 2 + 25 ) ) ) {
				
				if ( Lang13.Bool( affecting.status ) == true ) {
					I.add_blood( H );

					if ( Rand13.PercentChance( Convert.ToInt32( I.force * 2 ) ) ) {
						bloody = true;
						location = H.loc;

						if ( location is Tile_Simulated ) {
							location.add_blood( H );
						}

						if ( user is Mob_Living_Carbon_Human ) {
							M = user;

							if ( Map13.GetDistance( M, H ) <= 1 ) {
								
								if ( Lang13.Bool( M.wear_suit ) ) {
									((Ent_Static)M.wear_suit).add_blood( H );
									((Mob)M).update_inv_wear_suit();
								} else if ( Lang13.Bool( M.w_uniform ) ) {
									((Ent_Static)M.w_uniform).add_blood( H );
									((Mob)M).update_inv_w_uniform();
								}

								if ( Lang13.Bool( M.gloves ) ) {
									G = M.gloves;
									G.add_blood( H );
								} else {
									((Ent_Static)M).add_blood( H );
									((Mob)M).update_inv_gloves();
								}
							}
						}
					}
				}

				dynamic _a = hit_area; // Was a switch-case, sorry for the mess.
				if ( _a=="head" ) {
					
					if ( H.stat == 0 && ( armor_block ??0) < 50 ) {
						
						if ( Rand13.PercentChance( Convert.ToInt32( I.force ) ) ) {
							H.visible_message( "<span class='danger'>" + H + " has been knocked unconscious!</span>", "<span class='userdanger'>" + H + " has been knocked unconscious!</span>" );
							H.apply_effect( 20, "paralize", armor_block );
						}

						if ( Rand13.PercentChance( Convert.ToInt32( I.force + ( 100 - Convert.ToDouble( H.health ) ) / 2 ) ) && H != user && I.damtype == "brute" ) {
							((GameMode)GlobalVars.ticker.mode).remove_revolutionary( H.mind );
						}
					}

					if ( bloody ) {
						
						if ( Lang13.Bool( H.wear_mask ) ) {
							((Ent_Static)H.wear_mask).add_blood( H );
							H.update_inv_wear_mask();
						}

						if ( Lang13.Bool( H.head ) ) {
							((Ent_Static)H.head).add_blood( H );
							H.update_inv_head();
						}

						if ( Lang13.Bool( H.glasses ) && Rand13.PercentChance( 33 ) ) {
							((Ent_Static)H.glasses).add_blood( H );
							H.update_inv_glasses();
						}
					}
				} else if ( _a=="chest" ) {
					
					if ( H.stat == 0 && Lang13.Bool( I.force ) && Rand13.PercentChance( Convert.ToInt32( I.force + 10 ) ) ) {
						H.visible_message( "<span class='danger'>" + H + " has been knocked down!</span>", "<span class='userdanger'>" + H + " has been knocked down!</span>" );
						H.apply_effect( 5, "weaken", armor_block );
					}

					if ( bloody ) {
						
						if ( Lang13.Bool( H.wear_suit ) ) {
							((Ent_Static)H.wear_suit).add_blood( H );
							H.update_inv_wear_suit();
						}

						if ( Lang13.Bool( H.w_uniform ) ) {
							((Ent_Static)H.w_uniform).add_blood( H );
							H.update_inv_w_uniform();
						}
					}
				}

				if ( Convert.ToDouble( Iforce ) > 10 || Convert.ToDouble( Iforce ) >= 5 && Rand13.PercentChance( 33 ) ) {
					H.forcesay( GlobalVars.hit_appends );
				}
				return false;
			}
			return false;
		}

		// Function from file: species.dm
		public bool spec_attack_hand( dynamic M = null, Mob_Living_Carbon_Human H = null ) {
			MartialArt attacker_style = null;
			dynamic atk_verb = null;
			double damage = 0;
			dynamic affecting = null;
			double armor_block = 0;
			Obj_Item_Organ_Limb affecting2 = null;
			int randn = 0;
			bool talked = false;
			dynamic lgrab = null;
			dynamic rgrab = null;

			
			if ( !( M is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( M != H && M.a_intent != "help" && H.check_shields( 0, M.name ) ) {
				GlobalFuncs.add_logs( M, H, "attempted to touch" );
				H.visible_message( "<span class='warning'>" + M + " attempted to touch " + H + "!</span>" );
				return false;
			}
			attacker_style = M.martial_art;

			dynamic _a = M.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				
				if ( Convert.ToDouble( H.health ) >= 0 ) {
					H.help_shake_act( M );

					if ( H != M ) {
						GlobalFuncs.add_logs( M, H, "shaked" );
					}
					return true;
				} else {
					((Mob_Living_Carbon_Human)M).do_cpr( H );
				}
			} else if ( _a=="grab" ) {
				
				if ( attacker_style != null && attacker_style.grab_act( M, H ) ) {
					return true;
				} else {
					H.grabbedby( M );
					return true;
				}
			} else if ( _a=="harm" ) {
				
				if ( attacker_style != null && attacker_style.harm_act( M, H ) ) {
					return true;
				} else {
					((Ent_Dynamic)M).do_attack_animation( H );
					atk_verb = M.dna.species.attack_verb;

					if ( Lang13.Bool( H.lying ) ) {
						atk_verb = "kick";
					}
					damage = Rand13.Int( M.dna.species.punchdamagelow, M.dna.species.punchdamagehigh );

					if ( !( damage != 0 ) ) {
						GlobalFuncs.playsound( H.loc, M.dna.species.miss_sound, 25, 1, -1 );
						H.visible_message( "<span class='warning'>" + M + " has attempted to " + atk_verb + " " + H + "!</span>" );
						return false;
					}
					affecting = H.get_organ( GlobalFuncs.ran_zone( M.zone_selected ) );
					armor_block = H.run_armor_check( affecting, "melee" );
					GlobalFuncs.playsound( H.loc, M.dna.species.attack_sound, 25, 1, -1 );
					H.visible_message( "<span class='danger'>" + M + " has " + atk_verb + "ed " + H + "!</span>", "<span class='userdanger'>" + M + " has " + atk_verb + "ed " + H + "!</span>" );
					H.apply_damage( damage, "brute", affecting, armor_block );
					GlobalFuncs.add_logs( M, H, "punched" );

					if ( H.stat != 2 && damage >= M.dna.species.punchstunthreshold ) {
						H.visible_message( "<span class='danger'>" + M + " has weakened " + H + "!</span>", "<span class='userdanger'>" + M + " has weakened " + H + "!</span>" );
						H.apply_effect( 4, "weaken", armor_block );
						H.forcesay( GlobalVars.hit_appends );
					} else if ( Lang13.Bool( H.lying ) ) {
						H.forcesay( GlobalVars.hit_appends );
					}
				}
			} else if ( _a=="disarm" ) {
				
				if ( attacker_style != null && attacker_style.disarm_act( M, H ) ) {
					return true;
				} else {
					((Ent_Dynamic)M).do_attack_animation( H );
					GlobalFuncs.add_logs( M, H, "disarmed" );

					if ( Lang13.Bool( H.w_uniform ) ) {
						((Ent_Static)H.w_uniform).add_fingerprint( M );
					}
					affecting2 = H.get_organ( GlobalFuncs.ran_zone( M.zone_selected ) );
					randn = Rand13.Int( 1, 100 );

					if ( randn <= 25 ) {
						GlobalFuncs.playsound( H, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						H.visible_message( "<span class='danger'>" + M + " has pushed " + H + "!</span>", "<span class='userdanger'>" + M + " has pushed " + H + "!</span>" );
						H.apply_effect( 2, "weaken", H.run_armor_check( affecting2, "melee", "Your armor prevents your fall!", "Your armor softens your fall!" ) );
						H.forcesay( GlobalVars.hit_appends );
						return false;
					}
					talked = false;

					if ( randn <= 60 ) {
						
						if ( Lang13.Bool( H.pulling ) ) {
							H.visible_message( "<span class='warning'>" + M + " has broken " + H + "'s grip on " + H.pulling + "!</span>" );
							talked = true;
							H.__CallVerb("Stop Pulling" );
						}

						if ( H.l_hand is Obj_Item_Weapon_Grab ) {
							lgrab = H.l_hand;

							if ( Lang13.Bool( lgrab.affecting ) ) {
								H.visible_message( "<span class='warning'>" + M + " has broken " + H + "'s grip on " + lgrab.affecting + "!</span>" );
								talked = true;
							}
							Task13.Schedule( 1, (Task13.Closure)(() => {
								GlobalFuncs.qdel( lgrab );
								return;
							}));
						}

						if ( H.r_hand is Obj_Item_Weapon_Grab ) {
							rgrab = H.r_hand;

							if ( Lang13.Bool( rgrab.affecting ) ) {
								H.visible_message( "<span class='warning'>" + M + " has broken " + H + "'s grip on " + rgrab.affecting + "!</span>" );
								talked = true;
							}
							Task13.Schedule( 1, (Task13.Closure)(() => {
								GlobalFuncs.qdel( rgrab );
								return;
							}));
						}

						if ( !talked ) {
							
							if ( H.drop_item() ) {
								H.visible_message( "<span class='danger'>" + M + " has disarmed " + H + "!</span>", "<span class='userdanger'>" + M + " has disarmed " + H + "!</span>" );
							}
						}
						GlobalFuncs.playsound( H, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						return false;
					}
					GlobalFuncs.playsound( H, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					H.visible_message( "<span class='danger'>" + M + " attempted to disarm " + H + "!</span>", "<span class='userdanger'>" + M + " attemped to disarm " + H + "!</span>" );
				}
			}
			return false;
		}

		// Function from file: species.dm
		public double movement_delay( Mob_Living_Carbon_Human H = null ) {
			double _default = 0;

			dynamic J = null;
			dynamic C = null;
			double health_deficiency = 0;
			double hungry = 0;

			_default = 0;

			if ( ( H.status_flags & 32 ) != 0 ) {
				_default -= 1;
			}

			if ( ( H.status_flags & 64 ) != 0 ) {
				_default -= 2;
			}

			if ( !( ( H.status_flags & 16 ) != 0 ) ) {
				
				if ( !GlobalFuncs.has_gravity( H ) ) {
					J = H.back;
					C = H.wear_suit;

					if ( !( J is Obj_Item_Weapon_Tank_Jetpack ) && C is Obj_Item_Clothing_Suit_Space_Hardsuit ) {
						J = C.jetpack;
					}

					if ( J is Obj_Item_Weapon_Tank_Jetpack && Lang13.Bool( J.turbo ) && ((Obj_Item_Weapon_Tank_Jetpack)J).allow_thrust( 0.01, H ) ) {
						_default -= 2;
					}
				} else {
					health_deficiency = 100 - Convert.ToDouble( H.health ) + Convert.ToDouble( H.staminaloss );

					if ( health_deficiency >= 40 ) {
						_default += health_deficiency / 25;
					}
					hungry = ( 500 - H.nutrition ) / 5;

					if ( hungry >= 70 ) {
						_default += hungry / 50;
					}

					if ( Lang13.Bool( H.wear_suit ) ) {
						_default += Convert.ToDouble( H.wear_suit.slowdown );
					}

					if ( Lang13.Bool( H.shoes ) ) {
						_default += Convert.ToDouble( H.shoes.slowdown );
					}

					if ( Lang13.Bool( H.back ) ) {
						_default += Convert.ToDouble( H.back.slowdown );
					}

					if ( Lang13.Bool( H.l_hand ) && Lang13.Bool( H.l_hand.flags & 32 ) ) {
						_default += Convert.ToDouble( H.l_hand.slowdown );
					}

					if ( Lang13.Bool( H.r_hand ) && Lang13.Bool( H.r_hand.flags & 32 ) ) {
						_default += Convert.ToDouble( H.r_hand.slowdown );
					}

					if ( Lang13.Bool( H.disabilities & 32 ) ) {
						_default += 1.5;
					}

					if ( Convert.ToDouble( H.bodytemperature ) < 260.41 ) {
						_default += ( 260.41 - Convert.ToDouble( H.bodytemperature ) ) / 20;
					}
					_default += this.speedmod;
				}
			}
			return _default;
		}

		// Function from file: species.dm
		public bool handle_mutations_and_radiation( Mob_Living_Carbon_Human H = null ) {
			
			if ( !this.specflags.Contains( 128 ) ) {
				
				if ( H.radiation != 0 ) {
					
					if ( H.radiation > 100 ) {
						H.Weaken( 10 );
						H.WriteMsg( "<span class='danger'>You feel weak.</span>" );
						H.emote( "collapse" );
					}

					dynamic _a = H.radiation; // Was a switch-case, sorry for the mess.
					if ( 50<=_a&&_a<=75 ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							H.Weaken( 3 );
							H.WriteMsg( "<span class='danger'>You feel weak.</span>" );
							H.emote( "collapse" );
						}

						if ( Rand13.PercentChance( 15 ) ) {
							
							if ( this.specflags.Contains( !( H.hair_style == "Shaved" ) || !( H.hair_style == "Bald" ) || 2 != 0 ) ) {
								H.WriteMsg( "<span class='danger'>Your hair starts to fall out in clumps...<span>" );
								Task13.Schedule( 50, (Task13.Closure)(() => {
									H.facial_hair_style = "Shaved";
									H.hair_style = "Bald";
									H.update_hair();
									return;
								}));
							}
						}
					} else if ( 75<=_a&&_a<=100 ) {
						
						if ( Rand13.PercentChance( 1 ) ) {
							H.WriteMsg( "<span class='danger'>You mutate!</span>" );
							GlobalFuncs.randmutb( H );
							H.emote( "gasp" );
							H.domutcheck();
						}
					}
				}
				return false;
			}
			return true;
		}

		// Function from file: species.dm
		public bool update_health_hud( dynamic H = null ) {
			return false;
		}

		// Function from file: species.dm
		public void update_sight( Mob_Living_Carbon_Human H = null ) {
			dynamic A = null;
			Obj_Item_Organ_Internal_Cyberimp_Eyes E = null;
			dynamic G = null;
			dynamic X = null;
			dynamic M = null;

			H.sight = Convert.ToInt32( Lang13.Initial( H, "sight" ) );
			H.see_in_dark = this.darksight;
			H.see_invisible = Convert.ToInt32( this.invis_sight );

			if ( H.client.eye != H ) {
				A = H.client.eye;

				if ( ((Ent_Static)A).update_remote_sight( H ) ) {
					return;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( H.internal_organs, typeof(Obj_Item_Organ_Internal_Cyberimp_Eyes) )) {
				E = _a;
				
				H.sight |= E.sight_flags;

				if ( E.dark_view != 0 ) {
					H.see_in_dark = E.dark_view;
				}

				if ( E.see_invisible != 0 ) {
					H.see_invisible = Num13.MinInt( H.see_invisible, E.see_invisible );
				}
			}

			if ( Lang13.Bool( H.glasses ) ) {
				G = H.glasses;
				H.sight |= G.vision_flags;
				H.see_in_dark = Num13.MaxInt( Convert.ToInt32( G.darkness_view ), H.see_in_dark );

				if ( G.invis_override ) {
					H.see_invisible = G.invis_override ?1:0;
				} else {
					H.see_invisible = Num13.MinInt( G.invis_view, H.see_invisible );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( H.dna.mutations )) {
				X = _b;
				
				M = X;

				if ( M.name == "X Ray Vision" ) {
					H.sight |= 28;
					H.see_in_dark = Num13.MaxInt( H.see_in_dark, 8 );
				}
			}

			if ( H.see_override != 0 ) {
				H.see_invisible = H.see_override;
			}
			return;
		}

		// Function from file: species.dm
		public void handle_chemicals_in_body( Mob_Living_Carbon_Human H = null ) {
			double hunger_rate = 0;

			
			if ( Lang13.Bool( H.disabilities & 32 ) ) {
				
				if ( H.overeatduration < 100 ) {
					H.WriteMsg( "<span class='notice'>You feel fit again!</span>" );
					H.disabilities &= 65503;
					H.update_inv_w_uniform();
					H.update_inv_wear_suit();
				}
			} else if ( H.overeatduration > 500 ) {
				H.WriteMsg( "<span class='danger'>You suddenly feel blubbery!</span>" );
				H.disabilities |= 32;
				H.update_inv_w_uniform();
				H.update_inv_wear_suit();
			}

			if ( H.nutrition > 0 && H.stat != 2 && !H.dna.species.need_nutrition ) {
				hunger_rate = 0.1;

				if ( H.satiety > 0 ) {
					H.satiety--;
				}

				if ( H.satiety < 0 ) {
					H.satiety++;

					if ( Rand13.PercentChance( Num13.Floor( -H.satiety / 40 ) ) ) {
						H.Jitter( 5 );
					}
					hunger_rate = 0.3;
				}
				H.nutrition = Num13.MaxInt( 0, ((int)( H.nutrition - hunger_rate )) );
			}

			if ( H.nutrition > 550 ) {
				
				if ( H.overeatduration < 600 ) {
					H.overeatduration++;
				}
			} else if ( H.overeatduration > 1 ) {
				H.overeatduration -= 2;
			}

			if ( H.nutrition > 600 ) {
				H.metabolism_efficiency = 1;
			} else if ( H.nutrition > 350 && H.satiety > 80 ) {
				
				if ( H.metabolism_efficiency != 1.25 ) {
					H.WriteMsg( "<span class='notice'>You feel vigorous.</span>" );
					H.metabolism_efficiency = 1.25;
				}
			} else if ( H.nutrition < 200 ) {
				
				if ( H.metabolism_efficiency != 0.8 ) {
					H.WriteMsg( "<span class='notice'>You feel sluggish.</span>" );
				}
				H.metabolism_efficiency = 0.8;
			} else {
				
				if ( H.metabolism_efficiency == 1.25 ) {
					H.WriteMsg( "<span class='notice'>You no longer feel vigorous.</span>" );
				}
				H.metabolism_efficiency = 1;
			}

			dynamic _a = H.nutrition; // Was a switch-case, sorry for the mess.
			if ( 550<=_a&&_a<=Double.PositiveInfinity ) {
				H.throw_alert( "nutrition", typeof(Obj_Screen_Alert_Fat) );
			} else if ( 250<=_a&&_a<=550 ) {
				H.clear_alert( "nutrition" );
			} else if ( 150<=_a&&_a<=250 ) {
				H.throw_alert( "nutrition", typeof(Obj_Screen_Alert_Hungry) );
			} else {
				H.throw_alert( "nutrition", typeof(Obj_Screen_Alert_Starving) );
			}
			return;
		}

		// Function from file: species.dm
		public virtual dynamic get_spans(  ) {
			return new ByTable();
		}

		// Function from file: species.dm
		public virtual dynamic handle_speech( dynamic message = null, Mob_Living_Carbon_Human H = null ) {
			return message;
		}

		// Function from file: species.dm
		public virtual bool handle_chemicals( dynamic chem = null, Mob_Living H = null ) {
			return false;
		}

		// Function from file: species.dm
		public void after_equip_job( Job J = null, dynamic H = null ) {
			return;
		}

		// Function from file: species.dm
		public virtual bool before_equip_job( Job J = null, dynamic H = null, int? visualsOnly = null ) {
			return false;
		}

		// Function from file: species.dm
		public bool can_equip( Obj_Item I = null, dynamic slot = null, bool? disable_warning = null, Mob_Living_Carbon_Human H = null ) {
			dynamic B = null;

			
			if ( this.no_equip.Contains( slot ) ) {
				
				if ( !I.species_exception.Contains( this.type ) ) {
					return false;
				}
			}

			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==4 ) {
				
				if ( Lang13.Bool( H.l_hand ) ) {
					return false;
				}
				return true;
			} else if ( _a==5 ) {
				
				if ( Lang13.Bool( H.r_hand ) ) {
					return false;
				}
				return true;
			} else if ( _a==2 ) {
				
				if ( Lang13.Bool( H.wear_mask ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 32 ) ) {
					return false;
				}
				return true;
			} else if ( _a==1 ) {
				
				if ( Lang13.Bool( H.back ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 1024 ) ) {
					return false;
				}
				return true;
			} else if ( _a==13 ) {
				
				if ( Lang13.Bool( H.wear_suit ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 1 ) ) {
					return false;
				}
				return true;
			} else if ( _a==10 ) {
				
				if ( Lang13.Bool( H.gloves ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 4 ) ) {
					return false;
				}
				return true;
			} else if ( _a==12 ) {
				
				if ( Lang13.Bool( H.shoes ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 128 ) ) {
					return false;
				}
				return true;
			} else if ( _a==6 ) {
				
				if ( Lang13.Bool( H.belt ) ) {
					return false;
				}

				if ( !Lang13.Bool( H.w_uniform ) && !Lang13.Bool( this.nojumpsuit ) ) {
					
					if ( !( disable_warning == true ) ) {
						H.WriteMsg( "<span class='warning'>You need a jumpsuit before you can attach this " + I.name + "!</span>" );
					}
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 512 ) ) {
					return false;
				}
				return true;
			} else if ( _a==9 ) {
				
				if ( Lang13.Bool( H.glasses ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 8 ) ) {
					return false;
				}
				return true;
			} else if ( _a==11 ) {
				
				if ( Lang13.Bool( H.head ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 64 ) ) {
					return false;
				}
				return true;
			} else if ( _a==8 ) {
				
				if ( Lang13.Bool( H.ears ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 16 ) ) {
					return false;
				}
				return true;
			} else if ( _a==14 ) {
				
				if ( Lang13.Bool( H.w_uniform ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 2 ) ) {
					return false;
				}
				return true;
			} else if ( _a==7 ) {
				
				if ( Lang13.Bool( H.wear_id ) ) {
					return false;
				}

				if ( !Lang13.Bool( H.w_uniform ) && !Lang13.Bool( this.nojumpsuit ) ) {
					
					if ( !( disable_warning == true ) ) {
						H.WriteMsg( "<span class='warning'>You need a jumpsuit before you can attach this " + I.name + "!</span>" );
					}
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 256 ) ) {
					return false;
				}
				return true;
			} else if ( _a==15 ) {
				
				if ( Lang13.Bool( I.flags & 2 ) ) {
					return false;
				}

				if ( Lang13.Bool( H.l_store ) ) {
					return false;
				}

				if ( !Lang13.Bool( H.w_uniform ) && !Lang13.Bool( this.nojumpsuit ) ) {
					
					if ( !( disable_warning == true ) ) {
						H.WriteMsg( "<span class='warning'>You need a jumpsuit before you can attach this " + I.name + "!</span>" );
					}
					return false;
				}

				if ( Lang13.Bool( I.slot_flags & 4096 ) ) {
					return false;
				}

				if ( Convert.ToDouble( I.w_class ) <= 2 || Lang13.Bool( I.slot_flags & 2048 ) ) {
					return true;
				}
			} else if ( _a==16 ) {
				
				if ( Lang13.Bool( I.flags & 2 ) ) {
					return false;
				}

				if ( Lang13.Bool( H.r_store ) ) {
					return false;
				}

				if ( !Lang13.Bool( H.w_uniform ) && !Lang13.Bool( this.nojumpsuit ) ) {
					
					if ( !( disable_warning == true ) ) {
						H.WriteMsg( "<span class='warning'>You need a jumpsuit before you can attach this " + I.name + "!</span>" );
					}
					return false;
				}

				if ( Lang13.Bool( I.slot_flags & 4096 ) ) {
					return false;
				}

				if ( Convert.ToDouble( I.w_class ) <= 2 || Lang13.Bool( I.slot_flags & 2048 ) ) {
					return true;
				}
				return false;
			} else if ( _a==17 ) {
				
				if ( Lang13.Bool( I.flags & 2 ) ) {
					return false;
				}

				if ( Lang13.Bool( H.s_store ) ) {
					return false;
				}

				if ( !Lang13.Bool( H.wear_suit ) ) {
					
					if ( !( disable_warning == true ) ) {
						H.WriteMsg( "<span class='warning'>You need a suit before you can attach this " + I.name + "!</span>" );
					}
					return false;
				}

				if ( !( H.wear_suit.v_allowed != null ) ) {
					
					if ( !( disable_warning == true ) ) {
						H.WriteMsg( "You somehow have a suit with no defined allowed items for suit storage, stop that." );
					}
					return false;
				}

				if ( Convert.ToDouble( I.w_class ) > 4 ) {
					
					if ( !( disable_warning == true ) ) {
						H.WriteMsg( "The " + I.name + " is too big to attach." );
					}
					return false;
				}

				if ( I is Obj_Item_Device_Pda || I is Obj_Item_Weapon_Pen || GlobalFuncs.is_type_in_list( I, H.wear_suit.v_allowed ) ) {
					return true;
				}
				return false;
			} else if ( _a==3 ) {
				
				if ( Lang13.Bool( H.handcuffed ) ) {
					return false;
				}

				if ( !( I is Obj_Item_Weapon_Restraints_Handcuffs ) ) {
					return false;
				}
				return true;
			} else if ( _a==19 ) {
				
				if ( Lang13.Bool( H.legcuffed ) ) {
					return false;
				}

				if ( !( I is Obj_Item_Weapon_Restraints_Legcuffs ) ) {
					return false;
				}
				return true;
			} else if ( _a==18 ) {
				
				if ( Lang13.Bool( H.back ) && H.back is Obj_Item_Weapon_Storage_Backpack ) {
					B = H.back;

					if ( B.contents.len < ( B.storage_slots ??0) && Convert.ToDouble( I.w_class ) <= B.max_w_class ) {
						return true;
					}
				}
				return false;
			}
			return false;
		}

		// Function from file: species.dm
		public void auto_equip( Mob_Living_Carbon_Human H = null ) {
			return;
		}

		// Function from file: species.dm
		public virtual void spec_death( bool? gibbed = null, Mob_Living_Carbon_Human H = null ) {
			return;
		}

		// Function from file: species.dm
		public virtual void spec_life( Mob_Living H = null ) {
			return;
		}

		// Function from file: species.dm
		public virtual void handle_mutant_bodyparts( dynamic H = null, string forced_colour = null ) {
			ByTable bodyparts_to_add = null;
			ByTable relevent_layers = null;
			ByTable standing = null;
			string g = null;
			Image I = null;
			dynamic layer = null;
			dynamic bodypart = null;
			SpriteAccessory S = null;
			string icon_string = null;

			bodyparts_to_add = this.mutant_bodyparts.Copy();
			relevent_layers = new ByTable(new object [] { 25, 23, 2 });
			standing = new ByTable();
			H.remove_overlay( 25 );
			H.remove_overlay( 23 );
			H.remove_overlay( 2 );

			if ( !( this.mutant_bodyparts != null ) ) {
				return;
			}

			if ( this.mutant_bodyparts.Contains( "tail_lizard" ) ) {
				
				if ( Lang13.Bool( H.wear_suit ) && ( ( H.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					bodyparts_to_add.Remove( "tail_lizard" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "waggingtail_lizard" ) ) {
				
				if ( Lang13.Bool( H.wear_suit ) && ( ( H.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					bodyparts_to_add.Remove( "waggingtail_lizard" );
				} else if ( this.mutant_bodyparts.Contains( "tail_lizard" ) ) {
					bodyparts_to_add.Remove( "waggingtail_lizard" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "tail_human" ) ) {
				
				if ( Lang13.Bool( H.wear_suit ) && ( ( H.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					bodyparts_to_add.Remove( "tail_human" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "waggingtail_human" ) ) {
				
				if ( Lang13.Bool( H.wear_suit ) && ( ( H.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					bodyparts_to_add.Remove( "waggingtail_human" );
				} else if ( this.mutant_bodyparts.Contains( "tail_human" ) ) {
					bodyparts_to_add.Remove( "waggingtail_human" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "spines" ) ) {
				
				if ( !Lang13.Bool( H.dna.features["spines"] ) || H.dna.features["spines"] == "None" || Lang13.Bool( H.wear_suit ) && ( ( H.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					bodyparts_to_add.Remove( "spines" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "waggingspines" ) ) {
				
				if ( !Lang13.Bool( H.dna.features["spines"] ) || H.dna.features["spines"] == "None" || Lang13.Bool( H.wear_suit ) && ( ( H.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					bodyparts_to_add.Remove( "waggingspines" );
				} else if ( this.mutant_bodyparts.Contains( "tail" ) ) {
					bodyparts_to_add.Remove( "waggingspines" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "snout" ) ) {
				
				if ( Lang13.Bool( H.wear_mask ) && ( ( H.wear_mask.flags_inv ??0) & 8 ) != 0 || Lang13.Bool( H.head ) && ( ( H.head.flags_inv ??0) & 8 ) != 0 ) {
					bodyparts_to_add.Remove( "snout" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "frills" ) ) {
				
				if ( !Lang13.Bool( H.dna.features["frills"] ) || H.dna.features["frills"] == "None" || Lang13.Bool( H.head ) && ( ( H.head.flags_inv ??0) & 2 ) != 0 ) {
					bodyparts_to_add.Remove( "frills" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "horns" ) ) {
				
				if ( !Lang13.Bool( H.dna.features["horns"] ) || H.dna.features["horns"] == "None" || Lang13.Bool( H.head ) && Lang13.Bool( H.head.flags & 32768 ) || Lang13.Bool( H.wear_mask ) && Lang13.Bool( H.wear_mask.flags & 32768 ) ) {
					bodyparts_to_add.Remove( "horns" );
				}
			}

			if ( this.mutant_bodyparts.Contains( "ears" ) ) {
				
				if ( !Lang13.Bool( H.dna.features["ears"] ) || H.dna.features["ears"] == "None" || Lang13.Bool( H.head ) && Lang13.Bool( H.head.flags & 32768 ) || Lang13.Bool( H.wear_mask ) && Lang13.Bool( H.wear_mask.flags & 32768 ) ) {
					bodyparts_to_add.Remove( "ears" );
				}
			}

			if ( !( bodyparts_to_add != null ) ) {
				return;
			}
			g = ( H.gender == GlobalVars.FEMALE ? "f" : "m" );

			foreach (dynamic _d in Lang13.Enumerate( relevent_layers )) {
				layer = _d;
				

				foreach (dynamic _c in Lang13.Enumerate( bodyparts_to_add )) {
					bodypart = _c;
					
					S = null;

					dynamic _a = bodypart; // Was a switch-case, sorry for the mess.
					if ( _a=="tail_lizard" ) {
						S = GlobalVars.tails_list_lizard[H.dna.features["tail_lizard"]];
					} else if ( _a=="waggingtail_lizard" ) {
						S = GlobalVars.animated_tails_list_lizard[H.dna.features["tail_lizard"]];
					} else if ( _a=="tail_human" ) {
						S = GlobalVars.tails_list_human[H.dna.features["tail_human"]];
					} else if ( _a=="waggingtail_human" ) {
						S = GlobalVars.animated_tails_list_human[H.dna.features["tail_human"]];
					} else if ( _a=="spines" ) {
						S = GlobalVars.spines_list[H.dna.features["spines"]];
					} else if ( _a=="waggingspines" ) {
						S = GlobalVars.animated_spines_list[H.dna.features["spines"]];
					} else if ( _a=="snout" ) {
						S = GlobalVars.snouts_list[H.dna.features["snout"]];
					} else if ( _a=="frills" ) {
						S = GlobalVars.frills_list[H.dna.features["frills"]];
					} else if ( _a=="horns" ) {
						S = GlobalVars.horns_list[H.dna.features["horns"]];
					} else if ( _a=="ears" ) {
						S = GlobalVars.ears_list[H.dna.features["ears"]];
					} else if ( _a=="body_markings" ) {
						S = GlobalVars.body_markings_list[H.dna.features["body_markings"]];
					}

					if ( !( S != null ) || S.icon_state == "none" ) {
						continue;
					}

					if ( bodypart == "tail_lizard" || bodypart == "tail_human" ) {
						bodypart = "tail";
					} else if ( bodypart == "waggingtail_lizard" || bodypart == "waggingtail_human" ) {
						bodypart = "waggingtail";
					}
					icon_string = null;

					if ( S.gender_specific ) {
						icon_string = "" + g + "_" + bodypart + "_" + S.icon_state + "_" + layer;
					} else {
						icon_string = "m_" + bodypart + "_" + S.icon_state + "_" + layer;
					}
					I = new Image( "icons/mob/mutant_bodyparts.dmi", null, icon_string, -layer );

					if ( !Lang13.Bool( H.disabilities & 64 ) ) {
						
						if ( !Lang13.Bool( forced_colour ) ) {
							
							switch ((int)( S.color_src )) {
								case 1:
									I.color = "#" + H.dna.features["mcolor"];
									break;
								case 2:
									
									if ( this.hair_color == "mutcolor" ) {
										I.color = "#" + H.dna.features["mcolor"];
									} else {
										I.color = "#" + H.hair_color;
									}
									break;
								case 4:
									I.color = "#" + H.facial_hair_color;
									break;
								case 8:
									I.color = "#" + H.eye_color;
									break;
							}
						} else {
							I.color = forced_colour;
						}
					}
					standing.Add( I );

					if ( S.hasinner ) {
						
						if ( S.gender_specific ) {
							icon_string = "" + g + "_" + bodypart + "inner_" + S.icon_state + "_" + layer;
						} else {
							icon_string = "m_" + bodypart + "inner_" + S.icon_state + "_" + layer;
						}
						I = new Image( "icons/mob/mutant_bodyparts.dmi", null, icon_string, -layer );
						standing.Add( I );
					}
				}
				H.overlays_standing[layer] = standing.Copy();
				standing = new ByTable();
			}
			H.apply_overlay( 25 );
			H.apply_overlay( 23 );
			H.apply_overlay( 2 );
			return;
		}

		// Function from file: species.dm
		public virtual void handle_body( dynamic H = null ) {
			ByTable standing = null;
			Image lips = null;
			Image img_eyes_s = null;
			dynamic U = null;
			dynamic U2 = null;
			dynamic U3 = null;

			((Mob_Living_Carbon)H).remove_overlay( 24 );
			standing = new ByTable();
			this.handle_mutant_bodyparts( H );

			if ( this.specflags.Contains( Lang13.Bool( H.lip_style ) && 16 != 0 ) ) {
				lips = new Image( "icons/mob/human_face.dmi", null, "lips_" + H.lip_style + "_s", -24 );
				lips.color = H.lip_color;
				standing.Add( lips );
			}

			if ( this.specflags.Contains( 8 ) ) {
				img_eyes_s = new Image( "icons/mob/human_face.dmi", null, "" + this.eyes + "_s", -24 );
				img_eyes_s.color = "#" + H.eye_color;
				standing.Add( img_eyes_s );
			}

			if ( Lang13.Bool( H.underwear ) ) {
				U = GlobalVars.underwear_list[H.underwear];

				if ( Lang13.Bool( U ) ) {
					standing.Add( new Image( U.icon, null, "" + U.icon_state + "_s", -24 ) );
				}
			}

			if ( Lang13.Bool( H.undershirt ) ) {
				U2 = GlobalVars.undershirt_list[H.undershirt];

				if ( Lang13.Bool( U2 ) ) {
					
					if ( H.dna.species.sexes && H.gender == GlobalVars.FEMALE ) {
						standing.Add( GlobalFuncs.wear_female_version( "" + U2.icon_state + "_s", U2.icon, 24 ) );
					} else {
						standing.Add( new Image( U2.icon, null, "" + U2.icon_state + "_s", -24 ) );
					}
				}
			}

			if ( Lang13.Bool( H.socks ) ) {
				U3 = GlobalVars.socks_list[H.socks];

				if ( Lang13.Bool( U3 ) ) {
					standing.Add( new Image( U3.icon, null, "" + U3.icon_state + "_s", -24 ) );
				}
			}

			if ( standing.len != 0 ) {
				H.overlays_standing[24] = standing;
			}
			((Mob_Living_Carbon)H).apply_overlay( 24 );
			return;
		}

		// Function from file: species.dm
		public virtual void handle_hair( dynamic H = null, string forced_colour = null ) {
			dynamic S = null;
			ByTable standing = null;
			Image img_facial_s = null;
			Image img_hair_s = null;

			H.remove_overlay( 9 );
			standing = new ByTable();

			if ( this.specflags.Contains( Lang13.Bool( H.facial_hair_style ) && 4 != 0 ) ) {
				S = GlobalVars.facial_hair_styles_list[H.facial_hair_style];

				if ( Lang13.Bool( S ) ) {
					img_facial_s = new Image( S.icon, null, "" + S.icon_state + "_s", -9 );

					if ( !Lang13.Bool( forced_colour ) ) {
						
						if ( Lang13.Bool( this.hair_color ) ) {
							
							if ( this.hair_color == "mutcolor" ) {
								img_facial_s.color = "#" + H.dna.features["mcolor"];
							} else {
								img_facial_s.color = "#" + this.hair_color;
							}
						} else {
							img_facial_s.color = "#" + H.facial_hair_color;
						}
					} else {
						img_facial_s.color = forced_colour;
					}
					img_facial_s.alpha = this.hair_alpha;
					standing.Add( img_facial_s );
				}
			}

			if ( !Lang13.Bool( ((Mob)H).getorgan( typeof(Obj_Item_Organ_Internal_Brain) ) ) ) {
				standing.Add( new Image( "icons/mob/human_face.dmi", null, "debrained_s", -9 ) );
			}

			if ( Lang13.Bool( H.wear_suit ) && H.wear_suit.hooded && H.wear_suit.suittoggled ) {
				
				if ( standing.len != 0 ) {
					H.overlays_standing[9] = standing;
				}
				H.apply_overlay( 9 );
				return;
			} else if ( this.specflags.Contains( Lang13.Bool( H.hair_style ) && 2 != 0 ) ) {
				S = GlobalVars.hair_styles_list[H.hair_style];

				if ( Lang13.Bool( S ) ) {
					img_hair_s = new Image( S.icon, null, "" + S.icon_state + "_s", -9 );
					img_hair_s = new Image( S.icon, null, "" + S.icon_state + "_s", -9 );

					if ( !Lang13.Bool( forced_colour ) ) {
						
						if ( Lang13.Bool( this.hair_color ) ) {
							
							if ( this.hair_color == "mutcolor" ) {
								img_hair_s.color = "#" + H.dna.features["mcolor"];
							} else {
								img_hair_s.color = "#" + this.hair_color;
							}
						} else {
							img_hair_s.color = "#" + H.hair_color;
						}
					} else {
						img_hair_s.color = forced_colour;
					}
					img_hair_s.alpha = this.hair_alpha;
					standing.Add( img_hair_s );
				}
			}

			if ( standing.len != 0 ) {
				H.overlays_standing[9] = standing;
			}
			H.apply_overlay( 9 );
			return;
		}

		// Function from file: species.dm
		public virtual void update_color( dynamic H = null, string forced_colour = null ) {
			Image standing = null;
			string g = null;
			Image spec_base = null;
			string icon_state_string = null;

			((Mob_Living_Carbon)H).remove_overlay( 27 );
			g = ( H.gender == GlobalVars.FEMALE ? "f" : "m" );

			if ( this.specflags.Contains( 1 ) || this.use_skintones ) {
				icon_state_string = "" + this.id + "_";

				if ( this.use_skintones ) {
					
					if ( this.sexes ) {
						icon_state_string = "" + H.skin_tone + "_" + g + "_s";
					} else {
						icon_state_string = "" + H.skin_tone + "_s";
					}
				} else if ( this.sexes ) {
					icon_state_string += "" + g + "_s";
				} else {
					icon_state_string += "_s";
				}
				spec_base = new Image( "icons/mob/human.dmi", null, icon_state_string, -27 );

				if ( !Lang13.Bool( forced_colour ) && !this.use_skintones ) {
					spec_base.color = "#" + H.dna.features["mcolor"];
				} else {
					spec_base.color = forced_colour;
				}
				standing = spec_base;
			}

			if ( standing != null ) {
				H.overlays_standing[27] += standing;
			}
			((Mob_Living_Carbon)H).apply_overlay( 27 );
			return;
		}

		// Function from file: species.dm
		public virtual dynamic update_base_icon_state( Mob_Living_Carbon H = null ) {
			
			if ( Lang13.Bool( H.disabilities & 64 ) ) {
				H.remove_overlay( 27 );
				return "husk";
			} else if ( this.sexes ) {
				
				if ( this.use_skintones ) {
					return "" + ((dynamic)H).skin_tone + "_" + ( H.gender == GlobalVars.FEMALE ? "f" : "m" );
				} else {
					return "" + this.id + "_" + ( H.gender == GlobalVars.FEMALE ? "f" : "m" );
				}
			} else {
				return "" + this.id;
			}
			return null;
		}

		// Function from file: species.dm
		public virtual bool qualifies_for_rank( string rank = null, ByTable features = null ) {
			
			if ( GlobalVars.command_positions.Contains( rank ) ) {
				return false;
			}
			return true;
		}

		// Function from file: species.dm
		public virtual dynamic random_name( string gender = null, bool? unique = null, string lastname = null ) {
			dynamic randname = null;

			
			if ( unique == true ) {
				return GlobalFuncs.random_unique_name( gender );
			}

			if ( gender == GlobalVars.MALE ) {
				randname = Rand13.PickFromTable( GlobalVars.first_names_male );
			} else {
				randname = Rand13.PickFromTable( GlobalVars.first_names_female );
			}

			if ( Lang13.Bool( lastname ) ) {
				randname += " " + lastname;
			} else {
				randname += " " + Rand13.PickFromTable( GlobalVars.last_names );
			}
			return randname;
		}

		// Function from file: species.dm
		public virtual void admin_set_species( dynamic H = null, Species old_species = null ) {
			return;
		}

	}

}