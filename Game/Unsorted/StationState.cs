// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class StationState : Game_Data {

		public int floor = 0;
		public int wall = 0;
		public int r_wall = 0;
		public int window = 0;
		public int door = 0;
		public int grille = 0;
		public int mach = 0;
		public int num_territories = 1;

		// Function from file: blob_report.dm
		public double score( StationState result = null ) {
			double output = 0;

			
			if ( !( result != null ) ) {
				return 0;
			}
			output = 0;
			output += result.floor / Num13.MaxInt( this.floor, 1 );
			output += result.r_wall / Num13.MaxInt( this.r_wall, 1 );
			output += result.wall / Num13.MaxInt( this.wall, 1 );
			output += result.window / Num13.MaxInt( this.window, 1 );
			output += result.door / Num13.MaxInt( this.door, 1 );
			output += result.grille / Num13.MaxInt( this.grille, 1 );
			output += result.mach / Num13.MaxInt( this.mach, 1 );
			return output / 7;
		}

		// Function from file: blob_report.dm
		public void count( bool? count_territories = null ) {
			dynamic T = null;
			Obj O = null;
			ByTable valid_territories = null;
			dynamic A = null;

			
			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInBlock( Map13.GetTile( 1, 1, 1 ), Map13.GetTile( Game13.map_size_x, Game13.map_size_y, 1 ) ) )) {
				T = _b;
				

				if ( T is Tile_Simulated_Floor ) {
					
					if ( !T.burnt ) {
						this.floor += 12;
					} else {
						this.floor += 1;
					}
				}

				if ( T is Tile_Simulated_Wall ) {
					
					if ( T.intact ) {
						this.wall += 2;
					} else {
						this.wall += 1;
					}
				}

				if ( T is Tile_Simulated_Wall_RWall ) {
					
					if ( T.intact ) {
						this.r_wall += 2;
					} else {
						this.r_wall += 1;
					}
				}

				foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Obj) )) {
					O = _a;
					

					if ( O is Obj_Structure_Window ) {
						this.window += 1;
					} else if ( O is Obj_Structure_Grille && !Lang13.Bool( ((dynamic)O).destroyed ) ) {
						this.grille += 1;
					} else if ( O is Obj_Machinery_Door ) {
						this.door += 1;
					} else if ( O is Obj_Machinery ) {
						this.mach += 1;
					}
				}
			}

			if ( count_territories == true ) {
				valid_territories = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( typeof(Game13) )) {
					A = _c;
					

					if ( Lang13.Bool( A.z ) == true ) {
						
						if ( !valid_territories.Contains( A.type ) && A.valid_territory ) {
							valid_territories.Or( A.type );
						}
					}
				}

				if ( valid_territories.len != 0 ) {
					this.num_territories = valid_territories.len;
				} else {
					Game13.WriteMsg( "ERROR: NO VALID TERRITORIES" );
				}
			}
			return;
		}

	}

}