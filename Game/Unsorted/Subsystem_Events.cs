// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Events : Subsystem {

		public ByTable control = new ByTable();
		public ByTable running = new ByTable();
		public int scheduled = 0;
		public dynamic frequency_lower = 1800;
		public dynamic frequency_upper = 6000;
		public dynamic holidays = null;
		public bool wizardmode = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Events";
			this.priority = 6;
		}

		// Function from file: events.dm
		public Subsystem_Events (  ) {
			
			if ( GlobalVars.SSevent != this ) {
				
				if ( GlobalVars.SSevent is Subsystem_Events ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSevent );
				}
				GlobalVars.SSevent = this;
			}
			return;
		}

		// Function from file: events.dm
		public void resetFrequency(  ) {
			this.frequency_lower = Lang13.Initial( this, "frequency_lower" );
			this.frequency_upper = Lang13.Initial( this, "frequency_upper" );
			return;
		}

		// Function from file: events.dm
		public void toggleWizardmode(  ) {
			RoundEventControl E = null;

			this.wizardmode = !this.wizardmode;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSevent.control, typeof(RoundEventControl) )) {
				E = _a;
				
				E.weight = Lang13.Initial( E, "weight" );

				if ( E.wizardevent && !this.wizardmode || !E.wizardevent && this.wizardmode ) {
					E.weight = 0;
				}
			}
			GlobalFuncs.message_admins( "Summon Events has been " + ( this.wizardmode ? "enabled, events will occur every " + GlobalVars.SSevent.frequency_lower / 600 + " to " + GlobalVars.SSevent.frequency_upper / 600 + " minutes" : "disabled" ) + "!" );
			GlobalFuncs.log_game( "Summon Events was " + ( this.wizardmode ? "enabled" : "disabled" ) + "!" );
			return;
		}

		// Function from file: events.dm
		public void getHoliday(  ) {
			double? YY = null;
			double? MM = null;
			double? DD = null;
			dynamic H = null;
			dynamic holiday = null;

			
			if ( !GlobalVars.config.allow_holidays ) {
				return;
			}
			YY = String13.ParseNumber( String13.FormatTime( Game13.timeofday, "YY" ) );
			MM = String13.ParseNumber( String13.FormatTime( Game13.timeofday, "MM" ) );
			DD = String13.ParseNumber( String13.FormatTime( Game13.timeofday, "DD" ) );

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Holiday) ) - typeof(Holiday) )) {
				H = _a;
				
				holiday = Lang13.Call( H );

				if ( ((Holiday)holiday).shouldCelebrate( DD, MM, YY ) ) {
					((Holiday)holiday).celebrate();

					if ( !Lang13.Bool( this.holidays ) ) {
						this.holidays = new ByTable();
					}
					this.holidays[holiday.name] = holiday;
				}
			}

			if ( Lang13.Bool( this.holidays ) ) {
				this.holidays = GlobalFuncs.shuffle( this.holidays );
				Game13.update_status();
			}
			return;
		}

		// Function from file: events.dm
		public void spawnEvent(  ) {
			double sum_of_weights = 0;
			RoundEventControl E = null;
			RoundEventControl E2 = null;

			
			if ( !GlobalVars.config.allow_random_events ) {
				return;
			}
			sum_of_weights = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.control, typeof(RoundEventControl) )) {
				E = _a;
				

				if ( E.occurrences >= E.max_occurrences ) {
					continue;
				}

				if ( E.earliest_start >= Game13.time ) {
					continue;
				}

				if ( E.gamemode_blacklist.len != 0 && E.gamemode_blacklist.Contains( GlobalVars.ticker.mode.config_tag ) ) {
					continue;
				}

				if ( E.gamemode_whitelist.len != 0 && !E.gamemode_whitelist.Contains( GlobalVars.ticker.mode.config_tag ) ) {
					continue;
				}

				if ( Lang13.Bool( E.holidayID ) ) {
					
					if ( !Lang13.Bool( this.holidays ) || !Lang13.Bool( this.holidays[E.holidayID] ) ) {
						continue;
					}
				}

				if ( Convert.ToDouble( E.weight ) < 0 ) {
					
					if ( E.runEvent() == 26 ) {
						E.max_occurrences = 0;
						continue;
					}

					if ( E.alertadmins ) {
						GlobalFuncs.message_admins( "Random Event triggering: " + E.name + " (" + E.typepath + ")" );
					}
					GlobalFuncs.log_game( "Random Event triggering: " + E.name + " (" + E.typepath + ")" );
					return;
				}
				sum_of_weights += Convert.ToDouble( E.weight );
			}
			sum_of_weights = Rand13.Int( 0, ((int)( sum_of_weights )) );

			foreach (dynamic _b in Lang13.Enumerate( this.control, typeof(RoundEventControl) )) {
				E2 = _b;
				

				if ( E2.occurrences >= E2.max_occurrences ) {
					continue;
				}

				if ( E2.earliest_start >= Game13.time ) {
					continue;
				}

				if ( E2.gamemode_blacklist.len != 0 && E2.gamemode_blacklist.Contains( GlobalVars.ticker.mode.config_tag ) ) {
					continue;
				}

				if ( E2.gamemode_whitelist.len != 0 && !E2.gamemode_whitelist.Contains( GlobalVars.ticker.mode.config_tag ) ) {
					continue;
				}

				if ( Lang13.Bool( E2.holidayID ) ) {
					
					if ( !Lang13.Bool( this.holidays ) || !Lang13.Bool( this.holidays[E2.holidayID] ) ) {
						continue;
					}
				}
				sum_of_weights -= Convert.ToDouble( E2.weight );

				if ( sum_of_weights <= 0 ) {
					
					if ( E2.runEvent() == 26 ) {
						E2.max_occurrences = 0;
						continue;
					}

					if ( E2.alertadmins ) {
						GlobalFuncs.message_admins( "Random Event triggering: " + E2.name + " (" + E2.typepath + ")" );
					}
					GlobalFuncs.log_game( "Random Event triggering: " + E2.name + " (" + E2.typepath + ")" );
					return;
				}
			}
			return;
		}

		// Function from file: events.dm
		public void reschedule(  ) {
			this.scheduled = Game13.time + Rand13.Int( Convert.ToInt32( this.frequency_lower ), Num13.MaxInt( Convert.ToInt32( this.frequency_lower ), Convert.ToInt32( this.frequency_upper ) ) );
			return;
		}

		// Function from file: events.dm
		public void checkEvent(  ) {
			
			if ( this.scheduled <= Game13.time ) {
				this.spawnEvent();
				this.reschedule();
			}
			return;
		}

		// Function from file: events.dm
		public override void fire(  ) {
			dynamic thing = null;

			this.checkEvent();

			foreach (dynamic _a in Lang13.Enumerate( this.running )) {
				thing = _a;
				

				if ( Lang13.Bool( thing ) ) {
					((Game_Data)thing).process();
					continue;
				}
				this.running.Remove( thing );
			}
			return;
		}

		// Function from file: events.dm
		public override double Initialize( int start_timeofday = 0, double? zlevel = null ) {
			dynamic type = null;
			dynamic E = null;

			
			if ( Lang13.Bool( zlevel ) ) {
				return base.Initialize( start_timeofday, zlevel );
			}

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(RoundEventControl) ) )) {
				type = _a;
				
				E = Lang13.Call( type );

				if ( !( E.typepath != null ) ) {
					continue;
				}

				if ( E.wizardevent && !this.wizardmode ) {
					E.weight = 0;
				}
				this.control.Add( E );
			}
			this.reschedule();
			this.getHoliday();
			base.Initialize( start_timeofday, zlevel );
			return 0;
		}

	}

}