// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Apc : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Power_Apc);
		}

		// Function from file: apc.dm
		public Wires_Apc ( Obj_Machinery_Power_Apc holder = null ) : base( holder ) {
			this.wires = new ByTable(new object [] { "power1", "power2", "idscan", "ai" });
			this.add_duds( 6 );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: apc.dm
		public override void on_cut( dynamic wire = null, int? mend = null ) {
			Obj A = null;

			A = this.holder;

			dynamic _a = wire; // Was a switch-case, sorry for the mess.
			if ( _a=="power1" || _a=="power2" ) {
				
				if ( Lang13.Bool( mend ) && !this.is_cut( "power1" ) && !this.is_cut( "power2" ) ) {
					((dynamic)A).shorted = GlobalVars.FALSE;
					((dynamic)A).shock( Task13.User, 50 );
				} else {
					((dynamic)A).shorted = GlobalVars.TRUE;
					((dynamic)A).shock( Task13.User, 50 );
				}
			} else if ( _a=="ai" ) {
				
				if ( Lang13.Bool( mend ) ) {
					((dynamic)A).aidisabled = GlobalVars.FALSE;
				} else {
					((dynamic)A).aidisabled = GlobalVars.TRUE;
				}
			}
			return;
		}

		// Function from file: apc.dm
		public override void on_pulse( string wire = null ) {
			Obj A = null;

			A = this.holder;

			switch ((string)( wire )) {
				case "power1":
				case "power2":
					
					if ( !Lang13.Bool( ((dynamic)A).shorted ) ) {
						((dynamic)A).shorted = GlobalVars.TRUE;
						GlobalFuncs.addtimer( A, "reset", 1200, GlobalVars.FALSE, wire );
					}
					break;
				case "idscan":
					((dynamic)A).locked = GlobalVars.FALSE;
					GlobalFuncs.addtimer( A, "reset", 300, GlobalVars.FALSE, wire );
					break;
				case "ai":
					
					if ( !Lang13.Bool( ((dynamic)A).aidisabled ) ) {
						((dynamic)A).aidisabled = GlobalVars.TRUE;
						GlobalFuncs.addtimer( A, "reset", 10, GlobalVars.FALSE, wire );
					}
					break;
			}
			return;
		}

		// Function from file: apc.dm
		public override ByTable get_status(  ) {
			Obj A = null;
			ByTable status = null;

			A = this.holder;
			status = new ByTable();
			status.Add( "The interface light is " + ( Lang13.Bool( ((dynamic)A).locked ) ? "red" : "green" ) + "." );
			status.Add( "The short indicator is " + ( Lang13.Bool( ((dynamic)A).shorted ) ? "lit" : "off" ) + "." );
			status.Add( "The AI connection light is " + ( !Lang13.Bool( ((dynamic)A).aidisabled ) ? "on" : "off" ) + "." );
			return status;
		}

		// Function from file: apc.dm
		public override int? interactable( dynamic user = null ) {
			Obj A = null;

			A = this.holder;

			if ( Lang13.Bool( ((dynamic)A).panel_open ) && !Lang13.Bool( ((dynamic)A).opened ) ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

	}

}