// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Reagents : Game_Data {

		public ByTable reagent_list = new ByTable();
		public double? total_volume = 0;
		public dynamic maximum_volume = 100;
		public dynamic my_atom = null;
		public dynamic chem_temp = 150;
		public bool last_tick = true;
		public int addiction_tick = 1;
		public ByTable addiction_list = new ByTable();

		// Function from file: holder.dm
		// Stalls for a huge amount of time on first call since it needs to init some kind of global list.
		public Reagents ( dynamic maximum = null ) {
			maximum = maximum ?? 100;

			dynamic paths = null;
			dynamic path = null;
			dynamic D = null;
			dynamic paths2 = null;
			dynamic path2 = null;
			dynamic D2 = null;
			ByTable reaction_ids = null;
			dynamic reaction = null;
			dynamic id = null;

			this.maximum_volume = maximum;
			GlobalVars.SSobj.processing.Or( this );

			if ( !( GlobalVars.chemical_reagents_list != null ) ) {
				paths = Lang13.GetTypes( typeof(Reagent) ) - typeof(Reagent);
				GlobalVars.chemical_reagents_list = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( paths )) {
					path = _a;
					
					D = Lang13.Call( path );
					GlobalVars.chemical_reagents_list[D.id] = D;
				}
			}

			if ( !( GlobalVars.chemical_reactions_list != null ) ) {
				paths2 = Lang13.GetTypes( typeof(ChemicalReaction) ) - typeof(ChemicalReaction);
				GlobalVars.chemical_reactions_list = new ByTable();

				foreach (dynamic _d in Lang13.Enumerate( paths2 )) {
					path2 = _d;
					
					D2 = Lang13.Call( path2 );
					reaction_ids = new ByTable();

					if ( D2.required_reagents != null && D2.required_reagents.len != 0 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( D2.required_reagents )) {
							reaction = _b;
							
							reaction_ids.Add( reaction );
						}
					}

					foreach (dynamic _c in Lang13.Enumerate( reaction_ids )) {
						id = _c;
						

						if ( !Lang13.Bool( GlobalVars.chemical_reactions_list[id] ) ) {
							GlobalVars.chemical_reactions_list[id] = new ByTable();
						}
						GlobalVars.chemical_reactions_list[id] += D2;
						break;
					}
				}
			}
			return;
		}

		// Function from file: holder.dm
		public override int? process( dynamic seconds = null ) {
			dynamic reagent = null;
			dynamic R = null;

			
			if ( Lang13.Bool( this.my_atom ) && Lang13.Bool( this.my_atom.flags & 16384 ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;
				((Reagent)R).on_tick();
			}
			return null;
		}

		// Function from file: holder.dm
		public dynamic copy_data( dynamic current_reagent = null ) {
			dynamic trans_data = null;
			dynamic v = null;

			
			if ( !Lang13.Bool( current_reagent ) || !Lang13.Bool( current_reagent.data ) ) {
				return null;
			}

			if ( !( current_reagent.data is ByTable ) ) {
				return current_reagent.data;
			}
			trans_data = current_reagent.data.Copy();

			if ( Lang13.Bool( trans_data["viruses"] ) ) {
				v = trans_data["viruses"];
				trans_data["viruses"] = v.Copy();
			}
			return trans_data;
		}

		// Function from file: holder.dm
		public void set_data( dynamic reagent_id = null, dynamic new_data = null ) {
			dynamic reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;

				if ( R.id == reagent_id ) {
					R.data = new_data;
				}
			}
			return;
		}

		// Function from file: holder.dm
		public dynamic get_data( dynamic reagent_id = null ) {
			dynamic reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;

				if ( R.id == reagent_id ) {
					return R.data;
				}
			}
			return null;
		}

		// Function from file: holder.dm
		public bool remove_all_type( Type reagent_type = null, double amount = 0, bool? strict = null, bool? safety = null ) {
			strict = strict ?? false;
			safety = safety ?? true;

			bool has_removed_reagent = false;
			dynamic reagent = null;
			dynamic R = null;
			bool matches = false;

			
			if ( !Lang13.Bool( Lang13.IsNumber( amount ) ) ) {
				return true;
			}
			has_removed_reagent = false;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;
				matches = false;

				if ( strict == true ) {
					
					if ( R.type == reagent_type ) {
						matches = true;
					}
				} else if ( Lang13.Bool( ((dynamic)reagent_type).IsInstanceOfType( R ) ) ) {
					matches = true;
				}

				if ( matches ) {
					has_removed_reagent = this.remove_reagent( R.id, amount, safety );
				}
			}
			return has_removed_reagent;
		}

		// Function from file: holder.dm
		public string get_reagents(  ) {
			ByTable names = null;
			dynamic reagent = null;
			dynamic R = null;

			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;
				names.Add( R.name );
			}
			return GlobalFuncs.jointext( names, "," );
		}

		// Function from file: holder.dm
		public bool get_reagent_amount( dynamic reagent = null ) {
			dynamic _reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				_reagent = _a;
				
				R = _reagent;

				if ( R.id == reagent ) {
					return Lang13.Bool( R.volume );
				}
			}
			return false;
		}

		// Function from file: holder.dm
		public dynamic has_reagent( dynamic reagent = null, double? amount = null ) {
			amount = amount ?? -1;

			dynamic _reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				_reagent = _a;
				
				R = _reagent;

				if ( R.id == reagent ) {
					
					if ( !Lang13.Bool( amount ) ) {
						return R;
					} else if ( Convert.ToDouble( R.volume ) >= ( amount ??0) ) {
						return R;
					} else {
						return 0;
					}
				}
			}
			return 0;
		}

		// Function from file: holder.dm
		public bool remove_reagent( dynamic reagent = null, dynamic amount = null, bool? safety = null ) {
			dynamic A = null;
			dynamic R = null;

			
			if ( !Lang13.Bool( Lang13.IsNumber( amount ) ) ) {
				return true;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( R.id == reagent ) {
					R.volume -= amount;
					this.update_total();

					if ( !( safety == true ) ) {
						this.handle_reactions();
					}
					((Ent_Static)this.my_atom).on_reagent_change();
					return false;
				}
			}
			return true;
		}

		// Function from file: holder.dm
		public void add_reagent_list( ByTable list_reagents = null, dynamic data = null ) {
			dynamic r_id = null;
			double? amt = null;

			
			foreach (dynamic _a in Lang13.Enumerate( list_reagents )) {
				r_id = _a;
				
				amt = Lang13.DoubleNullable( list_reagents[r_id] );
				this.add_reagent( r_id, amt, data );
			}
			return;
		}

		// Function from file: holder.dm
		public bool add_reagent( dynamic reagent = null, dynamic amount = null, dynamic data = null, dynamic reagtemp = null, bool? no_react = null ) {
			reagtemp = reagtemp ?? 300;
			no_react = no_react ?? false;

			dynamic A = null;
			dynamic R = null;
			Base_Data D = null;
			dynamic R2 = null;

			
			if ( !Lang13.Bool( Lang13.IsNumber( amount ) ) || !Lang13.Bool( amount ) ) {
				return true;
			}
			this.update_total();

			if ( ( this.total_volume ??0) + Convert.ToDouble( amount ) > Convert.ToDouble( this.maximum_volume ) ) {
				amount = this.maximum_volume - this.total_volume;
			}
			this.chem_temp = Num13.Floor( Convert.ToDouble( ( amount * reagtemp + ( this.total_volume ??0) * Convert.ToDouble( this.chem_temp ) ) / ( ( this.total_volume ??0) + Convert.ToDouble( amount ) ) ) );

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( R.id == reagent ) {
					R.volume += amount;
					this.update_total();
					((Ent_Static)this.my_atom).on_reagent_change();
					((Reagent)R).on_merge( data );

					if ( !( no_react == true ) ) {
						this.handle_reactions();
					}
					return false;
				}
			}
			D = GlobalVars.chemical_reagents_list[reagent];

			if ( D != null ) {
				R2 = Lang13.Call( D.type, data );
				this.reagent_list.Add( R2 );
				R2.holder = this;
				R2.volume = amount;

				if ( Lang13.Bool( data ) ) {
					R2.data = data;
					((Reagent)R2).on_new( data );
				}
				this.update_total();
				((Ent_Static)this.my_atom).on_reagent_change();

				if ( !( no_react == true ) ) {
					this.handle_reactions();
				}
				return false;
			} else {
				GlobalFuncs.warning( "" + ( "" + this.my_atom + " attempted to add a reagent called ' " + reagent + " ' which doesn't exist. (" + Task13.User + ")" ) + " in " + "code/modules/reagents/chemistry/holder.dm" + " at line " + 518 + " src: " + this + " usr: " + Task13.User + "." );
			}

			if ( !( no_react == true ) ) {
				this.handle_reactions();
			}
			return true;
		}

		// Function from file: holder.dm
		public void reaction( dynamic A = null, int? method = null, double? volume_modifier = null, bool? show_message = null ) {
			method = method ?? GlobalVars.TOUCH;
			volume_modifier = volume_modifier ?? 1;
			show_message = show_message ?? true;

			dynamic touch_protection = null;
			dynamic L = null;
			dynamic reagent = null;
			dynamic R = null;
			dynamic reagent2 = null;
			dynamic R2 = null;
			dynamic reagent3 = null;
			dynamic R3 = null;

			
			if ( A is Mob_Living ) {
				touch_protection = 0;

				if ( method == GlobalVars.VAPOR ) {
					L = A;
					touch_protection = ((Mob_Living)L).get_permeability_protection();
				}

				foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
					reagent = _a;
					
					R = reagent;
					((Reagent)R).reaction_mob( A, method, Lang13.DoubleNullable( R.volume * volume_modifier ), show_message, touch_protection );
				}
			} else if ( A is Tile ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.reagent_list )) {
					reagent2 = _b;
					
					R2 = reagent2;
					((Reagent)R2).reaction_turf( A, Lang13.DoubleNullable( R2.volume * volume_modifier ) );
				}
			} else if ( A is Obj ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.reagent_list )) {
					reagent3 = _c;
					
					R3 = reagent3;
					((Reagent)R3).reaction_obj( A, Lang13.DoubleNullable( R3.volume * volume_modifier ) );
				}
			}
			return;
		}

		// Function from file: holder.dm
		public bool clear_reagents(  ) {
			dynamic reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;
				this.del_reagent( R.id );
			}
			return false;
		}

		// Function from file: holder.dm
		public bool update_total(  ) {
			dynamic reagent = null;
			dynamic R = null;

			this.total_volume = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;

				if ( Convert.ToDouble( R.volume ) < 0.1 ) {
					this.del_reagent( R.id );
				} else {
					this.total_volume += Convert.ToDouble( R.volume );
				}
			}
			return false;
		}

		// Function from file: holder.dm
		public bool check_goreallyfast( dynamic M = null ) {
			
			if ( M is Mob ) {
				
				if ( Lang13.Bool( ((Reagents)M.reagents).has_reagent( "methamphetamine" ) ) ) {
					return true;
				} else {
					M.status_flags &= 65471;
				}
			}
			return false;
		}

		// Function from file: holder.dm
		public bool check_gofast( dynamic M = null ) {
			
			if ( M is Mob ) {
				
				if ( Lang13.Bool( ((Reagents)M.reagents).has_reagent( "unholywater" ) ) || Lang13.Bool( ((Reagents)M.reagents).has_reagent( "nuka_cola" ) ) || Lang13.Bool( ((Reagents)M.reagents).has_reagent( "stimulants" ) ) ) {
					return true;
				} else {
					M.status_flags &= 65503;
				}
			}
			return false;
		}

		// Function from file: holder.dm
		public bool check_ignoreslow( dynamic M = null ) {
			
			if ( M is Mob ) {
				
				if ( Lang13.Bool( ((Reagents)M.reagents).has_reagent( "morphine" ) ) || Lang13.Bool( ((Reagents)M.reagents).has_reagent( "ephedrine" ) ) ) {
					return true;
				} else {
					M.status_flags &= 65519;
				}
			}
			return false;
		}

		// Function from file: holder.dm
		public bool del_reagent( dynamic reagent = null ) {
			dynamic _reagent = null;
			dynamic R = null;
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				_reagent = _a;
				
				R = _reagent;

				if ( R.id == reagent ) {
					
					if ( this.my_atom is Mob_Living ) {
						M = this.my_atom;
						((Reagent)R).on_mob_delete( M );
					}
					GlobalFuncs.qdel( R );
					this.reagent_list.Remove( R );
					this.update_total();
					((Ent_Static)this.my_atom).on_reagent_change();
					this.check_ignoreslow( this.my_atom );
					this.check_gofast( this.my_atom );
					this.check_goreallyfast( this.my_atom );
				}
			}
			return true;
		}

		// Function from file: holder.dm
		public void isolate_reagent( dynamic reagent = null ) {
			dynamic _reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				_reagent = _a;
				
				R = _reagent;

				if ( R.id != reagent ) {
					this.del_reagent( R.id );
					this.update_total();
				}
			}
			return;
		}

		// Function from file: holder.dm
		public bool handle_reactions(  ) {
			bool reaction_occured = false;
			dynamic reagent = null;
			dynamic R = null;
			dynamic reaction = null;
			dynamic C = null;
			int total_required_reagents = 0;
			int total_matching_reagents = 0;
			int total_required_catalysts = 0;
			int total_matching_catalysts = 0;
			bool matching_container = false;
			bool matching_other = false;
			ByTable multipliers = null;
			dynamic required_temp = null;
			dynamic B = null;
			dynamic B2 = null;
			dynamic M = null;
			dynamic multiplier = null;
			dynamic B3 = null;
			double? created_volume = null;
			ByTable seen = null;
			dynamic M2 = null;
			dynamic ME2 = null;
			dynamic M3 = null;

			
			if ( Lang13.Bool( this.my_atom.flags & 16384 ) ) {
				return false;
			}
			reaction_occured = false;

			do {
				reaction_occured = false;

				foreach (dynamic _g in Lang13.Enumerate( this.reagent_list )) {
					reagent = _g;
					
					R = reagent;

					foreach (dynamic _f in Lang13.Enumerate( GlobalVars.chemical_reactions_list[R.id] )) {
						reaction = _f;
						

						if ( !Lang13.Bool( reaction ) ) {
							continue;
						}
						C = reaction;
						total_required_reagents = C.required_reagents.len;
						total_matching_reagents = 0;
						total_required_catalysts = C.required_catalysts.len;
						total_matching_catalysts = 0;
						matching_container = false;
						matching_other = false;
						multipliers = new ByTable();
						required_temp = C.required_temp;

						foreach (dynamic _a in Lang13.Enumerate( C.required_reagents )) {
							B = _a;
							

							if ( !Lang13.Bool( this.has_reagent( B, Lang13.DoubleNullable( C.required_reagents[B] ) ) ) ) {
								break;
							}
							total_matching_reagents++;
							multipliers.Add( Num13.Floor( ( this.get_reagent_amount( B ) ?1:0) / Convert.ToDouble( C.required_reagents[B] ) ) );
						}

						foreach (dynamic _b in Lang13.Enumerate( C.required_catalysts )) {
							B2 = _b;
							

							if ( !Lang13.Bool( this.has_reagent( B2, Lang13.DoubleNullable( C.required_catalysts[B2] ) ) ) ) {
								break;
							}
							total_matching_catalysts++;
						}

						if ( !( C.required_container != null ) ) {
							matching_container = true;
						} else if ( this.my_atom.type == C.required_container ) {
							matching_container = true;
						}

						if ( this.my_atom is Mob_Living ) {
							
							if ( C.mob_react ) {
								return false;
							}
						}

						if ( !C.required_other ) {
							matching_other = true;
						} else if ( this.my_atom is Obj_Item_SlimeExtract ) {
							M = this.my_atom;

							if ( M.Uses > 0 ) {
								matching_other = true;
							}
						}

						if ( required_temp == 0 ) {
							required_temp = this.chem_temp;
						}

						if ( total_matching_reagents == total_required_reagents && total_matching_catalysts == total_required_catalysts && matching_container && matching_other && Convert.ToDouble( this.chem_temp ) >= Convert.ToDouble( required_temp ) ) {
							multiplier = Num13.Min( multipliers );

							foreach (dynamic _c in Lang13.Enumerate( C.required_reagents )) {
								B3 = _c;
								
								this.remove_reagent( B3, multiplier * C.required_reagents[B3], true );
							}
							created_volume = C.result_amount * Convert.ToDouble( multiplier );

							if ( Lang13.Bool( C.result ) ) {
								GlobalFuncs.feedback_add_details( "chemical_reaction", "" + C.result + "|" + C.result_amount * Convert.ToDouble( multiplier ) );
								multiplier = Num13.MaxInt( Convert.ToInt32( multiplier ), 1 );
								this.add_reagent( C.result, C.result_amount * Convert.ToDouble( multiplier ), null, this.chem_temp );
							}
							seen = Map13.FetchViewers( GlobalFuncs.get_turf( this.my_atom ), 4 );

							if ( !( this.my_atom is Mob ) ) {
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this.my_atom ), "sound/effects/bubbles.ogg", 80, 1 );

								foreach (dynamic _d in Lang13.Enumerate( seen )) {
									M2 = _d;
									
									M2.WriteMsg( new Txt( "<span class='notice'>" ).icon( this.my_atom ).str( " " ).item( C.mix_message ).str( "</span>" ).ToString() );
								}
							}

							if ( this.my_atom is Obj_Item_SlimeExtract ) {
								ME2 = this.my_atom;
								ME2.Uses--;

								if ( ME2.Uses <= 0 ) {
									
									foreach (dynamic _e in Lang13.Enumerate( seen )) {
										M3 = _e;
										
										M3.WriteMsg( new Txt( "<span class='notice'>" ).icon( this.my_atom ).str( " " ).The( this.my_atom ).item().str( "'s power is consumed in the reaction.</span>" ).ToString() );
										ME2.name = "used slime extract";
										ME2.desc = "This extract has been used up.";
									}
								}
							}
							((ChemicalReaction)C).on_reaction( this, created_volume );
							reaction_occured = true;
							break;
						}
					}
				}
			} while ( reaction_occured );
			this.update_total();
			return false;
		}

		// Function from file: holder.dm
		public void conditional_update( dynamic A = null ) {
			dynamic reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;
				((Reagent)R).on_update( A );
			}
			this.update_total();
			return;
		}

		// Function from file: holder.dm
		public void conditional_update_move( dynamic A = null, bool? Running = null ) {
			Running = Running ?? false;

			dynamic reagent = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;
				R.on_move( A, Running );
			}
			this.update_total();
			return;
		}

		// Function from file: holder.dm
		public void metabolize( dynamic M = null, bool? can_overdose = null ) {
			can_overdose = can_overdose ?? false;

			dynamic reagent = null;
			dynamic R = null;
			dynamic new_reagent = null;
			dynamic addiction = null;
			dynamic A = null;
			dynamic addiction2 = null;
			dynamic R2 = null;

			
			if ( Lang13.Bool( M ) ) {
				this.chem_temp = M.bodytemperature;
				this.handle_reactions();
			}

			foreach (dynamic _b in Lang13.Enumerate( this.reagent_list )) {
				reagent = _b;
				
				R = reagent;

				if ( !Lang13.Bool( R.holder ) ) {
					continue;
				}

				if ( !Lang13.Bool( M ) ) {
					M = R.holder.my_atom;
				}

				if ( Lang13.Bool( M ) && Lang13.Bool( R ) ) {
					
					if ( !((Mob)M).reagent_check( R ) ) {
						
						if ( can_overdose == true ) {
							
							if ( R.overdose_threshold != 0 ) {
								
								if ( Convert.ToDouble( R.volume ) >= R.overdose_threshold && !R.overdosed ) {
									R.overdosed = true;
									((Reagent)R).overdose_start( M );
								}
							}

							if ( R.addiction_threshold != 0 ) {
								
								if ( Convert.ToDouble( R.volume ) >= R.addiction_threshold && !GlobalFuncs.is_type_in_list( R, this.addiction_list ) ) {
									new_reagent = Lang13.Call( R.type );
									this.addiction_list.Add( new_reagent );
								}
							}

							if ( R.overdosed ) {
								((Reagent)R).overdose_process( M );
							}

							if ( GlobalFuncs.is_type_in_list( R, this.addiction_list ) ) {
								
								foreach (dynamic _a in Lang13.Enumerate( this.addiction_list )) {
									addiction = _a;
									
									A = addiction;

									if ( Lang13.Bool( A.IsInstanceOfType( R ) ) ) {
										A.addiction_stage = -15;
									}
								}
							}
						}
						((Reagent)R).on_mob_life( M );
					}
				}
			}

			if ( can_overdose == true ) {
				
				if ( this.addiction_tick == 6 ) {
					this.addiction_tick = 1;

					foreach (dynamic _c in Lang13.Enumerate( this.addiction_list )) {
						addiction2 = _c;
						
						R2 = addiction2;

						if ( Lang13.Bool( M ) && Lang13.Bool( R2 ) ) {
							
							if ( R2.addiction_stage <= 0 ) {
								R2.addiction_stage++;
							}

							if ( R2.addiction_stage > 0 && R2.addiction_stage <= 10 ) {
								((Reagent)R2).addiction_act_stage1( M );
								R2.addiction_stage++;
							}

							if ( R2.addiction_stage > 10 && R2.addiction_stage <= 20 ) {
								((Reagent)R2).addiction_act_stage2( M );
								R2.addiction_stage++;
							}

							if ( R2.addiction_stage > 20 && R2.addiction_stage <= 30 ) {
								((Reagent)R2).addiction_act_stage3( M );
								R2.addiction_stage++;
							}

							if ( R2.addiction_stage > 30 && R2.addiction_stage <= 40 ) {
								((Reagent)R2).addiction_act_stage4( M );
								R2.addiction_stage++;
							}

							if ( R2.addiction_stage > 40 ) {
								M.WriteMsg( "<span class='notice'>You feel like you've gotten over your need for " + R2.name + ".</span>" );
								this.addiction_list.Remove( R2 );
							}
						}
					}
				}
				this.addiction_tick++;
			}
			this.update_total();
			return;
		}

		// Function from file: holder.dm
		public double? trans_id_to( dynamic target = null, dynamic reagent = null, double? amount = null, bool? preserve_data = null ) {
			amount = amount ?? 1;
			preserve_data = preserve_data ?? true;

			Reagents R = null;
			dynamic trans_data = null;
			Reagent current_reagent = null;

			
			if ( !Lang13.Bool( target ) ) {
				return null;
			}

			if ( !Lang13.Bool( target.reagents ) || ( this.total_volume ??0) <= 0 || !this.get_reagent_amount( reagent ) ) {
				return null;
			}
			R = target.reagents;

			if ( ( this.get_reagent_amount( reagent ) ?1:0) < ( amount ??0) ) {
				amount = this.get_reagent_amount( reagent ) ?1:0;
			}
			amount = Num13.MinInt( ((int)( amount ??0 )), Convert.ToInt32( R.maximum_volume - R.total_volume ) );
			trans_data = null;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				current_reagent = _a;
				

				if ( current_reagent.id == reagent ) {
					
					if ( preserve_data == true ) {
						trans_data = current_reagent.data;
					}
					R.add_reagent( current_reagent.id, amount, trans_data, this.chem_temp );
					this.remove_reagent( current_reagent.id, amount, true );
					break;
				}
			}
			this.update_total();
			R.update_total();
			R.handle_reactions();
			return amount;
		}

		// Function from file: holder.dm
		public double? copy_to( dynamic target = null, double? amount = null, bool? multiplier = null, bool? preserve_data = null ) {
			amount = amount ?? 1;
			multiplier = multiplier ?? true;
			preserve_data = preserve_data ?? true;

			Reagents R = null;
			double part = 0;
			dynamic trans_data = null;
			dynamic reagent = null;
			dynamic T = null;
			dynamic copy_amount = null;

			
			if ( !Lang13.Bool( target ) ) {
				return null;
			}

			if ( !Lang13.Bool( target.reagents ) || ( this.total_volume ??0) <= 0 ) {
				return null;
			}
			R = target.reagents;
			amount = Num13.MinInt( Num13.MinInt( ((int)( amount ??0 )), ((int)( this.total_volume ??0 )) ), Convert.ToInt32( R.maximum_volume - R.total_volume ) );
			part = ( amount ??0) / ( this.total_volume ??0);
			trans_data = null;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				T = reagent;
				copy_amount = T.volume * part;

				if ( preserve_data == true ) {
					trans_data = T.data;
				}
				R.add_reagent( T.id, copy_amount * multiplier, trans_data );
			}
			this.update_total();
			R.update_total();
			R.handle_reactions();
			this.handle_reactions();
			return amount;
		}

		// Function from file: holder.dm
		public dynamic trans_to( dynamic target = null, dynamic amount = null, dynamic multiplier = null, bool? preserve_data = null ) {
			amount = amount ?? 1;
			multiplier = multiplier ?? 1;
			preserve_data = preserve_data ?? true;

			dynamic R = null;
			dynamic part = null;
			dynamic trans_data = null;
			dynamic reagent = null;
			dynamic T = null;
			dynamic H = null;
			dynamic transfer_amount = null;

			
			if ( !Lang13.Bool( target ) ) {
				return null;
			}

			if ( target is Reagents ) {
				R = target;
			} else {
				
				if ( !Lang13.Bool( target.reagents ) || ( this.total_volume ??0) <= 0 ) {
					return null;
				}
				R = target.reagents;
			}
			amount = Num13.MinInt( Num13.MinInt( Convert.ToInt32( amount ), ((int)( this.total_volume ??0 )) ), Convert.ToInt32( R.maximum_volume - R.total_volume ) );
			part = amount / this.total_volume;
			trans_data = null;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				T = reagent;

				if ( T.id == "blood" && target is Mob_Living_Carbon_Human ) {
					H = target;
					((Mob_Living_Carbon)H).inject_blood( this.my_atom, amount );
					continue;
				}
				transfer_amount = T.volume * part;

				if ( preserve_data == true ) {
					trans_data = this.copy_data( T );
				}
				((Reagents)R).add_reagent( T.id, transfer_amount * multiplier, trans_data, this.chem_temp, true );
				this.remove_reagent( T.id, transfer_amount );
			}
			this.update_total();
			((Reagents)R).update_total();
			((Reagents)R).handle_reactions();
			this.handle_reactions();
			return amount;
		}

		// Function from file: holder.dm
		public dynamic get_master_reagent_id(  ) {
			dynamic id = null;
			bool max_volume = false;
			dynamic reagent = null;
			dynamic R = null;

			max_volume = false;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;

				if ( Convert.ToDouble( R.volume ) > ( max_volume ?1:0) ) {
					max_volume = Lang13.Bool( R.volume );
					id = R.id;
				}
			}
			return id;
		}

		// Function from file: holder.dm
		public dynamic get_master_reagent_name(  ) {
			dynamic name = null;
			bool max_volume = false;
			dynamic reagent = null;
			dynamic R = null;

			max_volume = false;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;

				if ( Convert.ToDouble( R.volume ) > ( max_volume ?1:0) ) {
					max_volume = Lang13.Bool( R.volume );
					name = R.name;
				}
			}
			return name;
		}

		// Function from file: holder.dm
		public double? remove_all( double? amount = null ) {
			amount = amount ?? 1;

			double part = 0;
			dynamic reagent = null;
			dynamic R = null;

			
			if ( ( this.total_volume ??0) > 0 ) {
				part = ( amount ??0) / ( this.total_volume ??0);

				foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
					reagent = _a;
					
					R = reagent;
					this.remove_reagent( R.id, R.volume * part );
				}
				this.update_total();
				this.handle_reactions();
				return amount;
			}
			return null;
		}

		// Function from file: holder.dm
		public double? remove_any( double? amount = null ) {
			amount = amount ?? 1;

			double? total_transfered = null;
			int current_list_element = 0;
			dynamic R = null;

			total_transfered = 0;
			current_list_element = 1;
			current_list_element = Rand13.Int( 1, this.reagent_list.len );

			while (total_transfered != amount) {
				
				if ( ( total_transfered ??0) >= ( amount ??0) ) {
					break;
				}

				if ( ( this.total_volume ??0) <= 0 || !( this.reagent_list.len != 0 ) ) {
					break;
				}

				if ( current_list_element > this.reagent_list.len ) {
					current_list_element = 1;
				}
				R = this.reagent_list[current_list_element];
				this.remove_reagent( R.id, 1 );
				current_list_element++;
				total_transfered++;
				this.update_total();
			}
			this.handle_reactions();
			return total_transfered;
		}

		// Function from file: holder.dm
		public override dynamic Destroy(  ) {
			dynamic _default = null;

			dynamic reagent = null;
			dynamic R = null;

			_default = base.Destroy();
			GlobalVars.SSobj.processing.Remove( this );

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				reagent = _a;
				
				R = reagent;
				GlobalFuncs.qdel( R );
			}
			this.reagent_list.Cut();
			this.reagent_list = null;

			if ( Lang13.Bool( this.my_atom ) && this.my_atom.reagents == this ) {
				this.my_atom.reagents = null;
			}
			return _default;
		}

	}

}