// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Mulebot : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Mob_Living_SimpleAnimal_Bot_Mulebot);
			this.randomize = true;
		}

		// Function from file: mulebot.dm
		public Wires_Mulebot ( Mob_Living_SimpleAnimal_Bot_Mulebot holder = null ) : base( holder ) {
			this.wires = new ByTable(new object [] { "power1", "power2", "avoidance", "loadcheck", "motor1", "motor2", "recieve", "transmit", "beacon" });
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: mulebot.dm
		public override void on_pulse( string wire = null ) {
			Obj M = null;

			M = this.holder;

			switch ((string)( wire )) {
				case "power1":
				case "power2":
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( M ).str( " The charge light flickers.</span>" ).ToString() );
					break;
				case "avoidance":
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( M ).str( " The external warning lights flash briefly.</span>" ).ToString() );
					break;
				case "loadcheck":
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( M ).str( " The load platform clunks.</span>" ).ToString() );
					break;
				case "motor1":
				case "motor2":
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( M ).str( " The drive motor whines briefly.</span>" ).ToString() );
					break;
				default:
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( M ).str( " You hear a radio crackle.</span>" ).ToString() );
					break;
			}
			return;
		}

		// Function from file: mulebot.dm
		public override int? interactable( dynamic user = null ) {
			Obj M = null;

			M = this.holder;

			if ( Lang13.Bool( ((dynamic)M).open ) ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

	}

}