// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_VentClog : RoundEvent {

		public int interval = 2;
		public ByTable vents = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.announceWhen = 1;
			this.startWhen = 5;
			this.endWhen = 35;
		}

		// Function from file: vent_clog.dm
		public override void tick(  ) {
			Ent_Static vent = null;
			ByTable gunk = null;
			Reagents R = null;
			EffectSystem_SmokeSpread_Chem smoke = null;

			
			if ( this.activeFor % this.interval == 0 ) {
				vent = GlobalFuncs.pick_n_take( this.vents );

				if ( vent != null && vent.loc != null ) {
					gunk = new ByTable(new object [] { 
						"water", 
						"carbon", 
						"flour", 
						"radium", 
						"toxin", 
						"cleaner", 
						"nutriment", 
						"condensedcapsaicin", 
						"mushroomhallucinogen", 
						"lube", 
						"plantbgone", 
						"banana", 
						"charcoal", 
						"space_drugs", 
						"morphine", 
						"holywater", 
						"ethanol", 
						"hot_coco", 
						"facid"
					 });
					R = new Reagents( 50 );
					R.my_atom = vent;
					R.add_reagent( Rand13.PickFromTable( gunk ), 50 );
					smoke = new EffectSystem_SmokeSpread_Chem();
					smoke.set_up( R, 1, vent );
					GlobalFuncs.playsound( vent.loc, "sound/effects/smoke.ogg", 50, 1, -3 );
					smoke.start();
					GlobalFuncs.qdel( R );
				}
			}
			return;
		}

		// Function from file: vent_clog.dm
		public override void setup( int? loop = null ) {
			Obj_Machinery_Atmospherics_Components_Unary_VentScrubber temp_vent = null;
			Pipeline temp_vent_parent = null;

			this.endWhen = Rand13.Int( 25, 100 );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentScrubber) )) {
				temp_vent = _a;
				

				if ( temp_vent.loc.z == 1 && !( temp_vent.welded == true ) ) {
					temp_vent_parent = temp_vent.parents[1];

					if ( temp_vent_parent.other_atmosmch.len > 20 ) {
						this.vents.Add( temp_vent );
					}
				}
			}

			if ( !( this.vents.len != 0 ) ) {
				this.kill(); return;
			}
			return;
		}

		// Function from file: vent_clog.dm
		public override void announce(  ) {
			GlobalFuncs.priority_announce( "The scrubbers network is experiencing a backpressure surge. Some ejection of contents may occur.", "Atmospherics alert" );
			return;
		}

	}

}