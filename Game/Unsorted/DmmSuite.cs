// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class DmmSuite : Game_Data {

		public string quote = "\"";
		public ByTable letter_digits = new ByTable(new object [] { 
											"a", 
											"b", 
											"c", 
											"d", 
											"e", 
											"f", 
											"g", 
											"h", 
											"i", 
											"j", 
											"k", 
											"l", 
											"m", 
											"n", 
											"o", 
											"p", 
											"q", 
											"r", 
											"s", 
											"t", 
											"u", 
											"v", 
											"w", 
											"x", 
											"y", 
											"z", 
											"A", 
											"B", 
											"C", 
											"D", 
											"E", 
											"F", 
											"G", 
											"H", 
											"I", 
											"J", 
											"K", 
											"L", 
											"M", 
											"N", 
											"O", 
											"P", 
											"Q", 
											"R", 
											"S", 
											"T", 
											"U", 
											"V", 
											"W", 
											"X", 
											"Y", 
											"Z"
										 });

		// Function from file: reader.dm
		public override dynamic Destroy(  ) {
			base.Destroy();
			return 4;
		}

		// Function from file: writer.dm
		public string get_model_key( double which = 0, int key_length = 0 ) {
			string key = null;
			double working_digit = 0;
			double digit_pos = 0;
			int place_value = 0;

			key = "";
			working_digit = which - 1;

			foreach (dynamic _a in Lang13.IterateRange( key_length, 1, -1 )) {
				digit_pos = _a;
				
				place_value = Num13.Floor( working_digit / Math.Pow( this.letter_digits.len, digit_pos - 1 ) );
				working_digit -= place_value * Math.Pow( this.letter_digits.len, digit_pos - 1 );
				key = "" + key + this.letter_digits[place_value + 1];
			}
			return key;
		}

		// Function from file: writer.dm
		public string check_attributes( dynamic A = null ) {
			string attributes_text = null;
			dynamic V = null;

			attributes_text = "{";

			foreach (dynamic _a in Lang13.Enumerate( A.vars )) {
				V = _a;
				
				Task13.Sleep( -1 );

				if ( !Lang13.Bool( Lang13.IsSaved( A, V ) ) || A.vars[V] == Lang13.Initial( A, V ) ) {
					continue;
				}

				if ( A.vars[V] is string ) {
					attributes_text += "" + V + " = \"" + A.vars[V] + "\"";
				} else if ( Lang13.Bool( Lang13.IsNumber( A.vars[V] ) ) || A.vars[V] is Type ) {
					attributes_text += "" + V + " = " + A.vars[V];
				} else if ( A.vars[V] is Icon || A.vars[V] is File ) {
					attributes_text += "" + V + " = '" + A.vars[V] + "'";
				} else {
					continue;
				}

				if ( attributes_text != "{" ) {
					attributes_text += "; ";
				}
			}

			if ( attributes_text == "{" ) {
				return null;
			}

			if ( String13.SubStr( attributes_text, Lang13.Length( attributes_text ) - 1, 0 ) == "; " ) {
				attributes_text = String13.SubStr( attributes_text, 1, Lang13.Length( attributes_text ) - 1 );
			}
			attributes_text += "}";
			return attributes_text;
		}

		// Function from file: writer.dm
		public string make_template( Tile model = null, dynamic flags = null ) {
			string template = null;
			string obj_template = null;
			string mob_template = null;
			string turf_template = null;
			string area_template = null;
			Obj O = null;
			dynamic M = null;
			Ent_Static m_area = null;

			template = "";
			obj_template = "";
			mob_template = "";
			turf_template = "";

			if ( !Lang13.Bool( flags & 2 ) ) {
				turf_template = "" + model.type + this.check_attributes( model ) + ",";
			} else {
				turf_template = "" + Game13.default_tile + ",";
			}
			area_template = "";

			if ( !Lang13.Bool( flags & 4 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( model.contents, typeof(Obj) )) {
					O = _a;
					
					obj_template += "" + O.type + this.check_attributes( O ) + ",";
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( model.contents )) {
				M = _b;
				

				if ( Lang13.Bool( M.client ) ) {
					
					if ( !Lang13.Bool( flags & 16 ) ) {
						mob_template += "" + M.type + this.check_attributes( M ) + ",";
					}
				} else if ( !Lang13.Bool( flags & 8 ) ) {
					mob_template += "" + M.type + this.check_attributes( M ) + ",";
				}
			}

			if ( !Lang13.Bool( flags & 1 ) ) {
				m_area = model.loc;
				area_template = "" + m_area.type + this.check_attributes( m_area );
			} else {
				area_template = "" + Game13.default_zone;
			}
			template = "" + obj_template + mob_template + turf_template + area_template;
			return template;
		}

		// Function from file: reader.dm
		public void add_underlying_turf( dynamic placed = null, dynamic underturf = null, ByTable turfs_underlays = null ) {
			
			if ( underturf.density ) {
				placed.density = true;
			}

			if ( Lang13.Bool( underturf.opacity ) ) {
				placed.opacity = 1;
			}
			placed.underlays += turfs_underlays;
			return;
		}

		// Function from file: reader.dm
		public ByTable readlist( string text = null, string delimiter = null ) {
			delimiter = delimiter ?? ",";

			ByTable to_return = null;
			int position = 0;
			int old_position = 0;
			int equal_position = 0;
			string trim_left = null;
			dynamic trim_right = null;

			to_return = new ByTable();
			old_position = 1;

			do {
				position = this.find_next_delimiter_position( text, old_position, delimiter );
				equal_position = String13.FindIgnoreCase( text, "=", old_position, position );
				trim_left = this.trim_text( String13.SubStr( text, old_position, ( equal_position != 0 ? equal_position : position ) ), true );
				old_position = position + 1;

				if ( equal_position != 0 ) {
					trim_right = this.trim_text( String13.SubStr( text, equal_position + 1, position ) );

					if ( String13.FindIgnoreCase( trim_right, this.quote, 1, 2 ) != 0 ) {
						trim_right = String13.SubStr( trim_right, 2, String13.FindIgnoreCase( trim_right, this.quote, 3, 0 ) );
					} else if ( Lang13.Bool( Lang13.IsNumber( String13.ParseNumber( trim_right ) ) ) ) {
						trim_right = String13.ParseNumber( trim_right );
					} else if ( trim_right == "null" ) {
						trim_right = null;
					} else if ( String13.SubStr( trim_right, 1, 5 ) == "list" ) {
						trim_right = this.readlist( String13.SubStr( trim_right, 6, Lang13.Length( trim_right ) ) );
					} else if ( String13.SubStr( trim_right, 1, 2 ) == "'" ) {
						trim_right = new File( String13.SubStr( trim_right, 2, Lang13.Length( trim_right ) ) );
					} else if ( Lang13.FindClass( trim_right ) is Type ) {
						trim_right = Lang13.FindClass( trim_right );
					}
					to_return[trim_left] = trim_right;
				} else {
					to_return[trim_left] = null;
				}
			} while ( position != 0 );
			return to_return;
		}

		// Function from file: reader.dm
		public int find_next_delimiter_position( string text = null, int initial_position = 0, string delimiter = null, string opening_escape = null, string closing_escape = null ) {
			delimiter = delimiter ?? ",";
			opening_escape = opening_escape ?? this.quote;
			closing_escape = closing_escape ?? this.quote;

			int position = 0;
			int next_delimiter = 0;
			int next_opening = 0;

			position = initial_position;
			next_delimiter = String13.FindIgnoreCase( text, delimiter, position, 0 );
			next_opening = String13.FindIgnoreCase( text, opening_escape, position, 0 );

			while (next_opening != 0 && next_opening < next_delimiter) {
				position = String13.FindIgnoreCase( text, closing_escape, next_opening + 1, 0 ) + 1;
				next_delimiter = String13.FindIgnoreCase( text, delimiter, position, 0 );
				next_opening = String13.FindIgnoreCase( text, opening_escape, position, 0 );
			}
			return next_delimiter;
		}

		// Function from file: reader.dm
		public string trim_text( string what = null, bool? trim_quotes = null ) {
			trim_quotes = trim_quotes ?? false;

			
			while (Lang13.Length( what ) != 0 && String13.FindIgnoreCase( what, " ", 1, 2 ) != 0) {
				what = String13.SubStr( what, 2, 0 );
			}

			while (Lang13.Length( what ) != 0 && String13.FindIgnoreCase( what, " ", Lang13.Length( what ), 0 ) != 0) {
				what = String13.SubStr( what, 1, Lang13.Length( what ) );
			}

			if ( trim_quotes == true ) {
				
				while (Lang13.Length( what ) != 0 && String13.FindIgnoreCase( what, this.quote, 1, 2 ) != 0) {
					what = String13.SubStr( what, 2, 0 );
				}

				while (Lang13.Length( what ) != 0 && String13.FindIgnoreCase( what, this.quote, Lang13.Length( what ), 0 ) != 0) {
					what = String13.SubStr( what, 1, Lang13.Length( what ) );
				}
			}
			return what;
		}

		// Function from file: reader.dm
		public dynamic instance_atom( dynamic path = null, ByTable attributes = null, int x = 0, double y = 0, int z = 0 ) {
			dynamic instance = null;
			Tile T = null;

			GlobalVars._preloader.setup( attributes, path );
			T = Map13.GetTile( x, ((int)( y )), z );

			if ( T != null ) {
				instance = Lang13.Call( path, T );
			}

			if ( Lang13.Bool( GlobalVars.use_preloader ) && Lang13.Bool( instance ) ) {
				GlobalVars._preloader.load( instance );
			}
			return instance;
		}

		// Function from file: reader.dm
		public void parse_grid( string model = null, int xcrd = 0, double ycrd = 0, int zcrd = 0 ) {
			ByTable members = null;
			ByTable members_attributes = null;
			double index = 0;
			int old_position = 0;
			int dpos = 0;
			string full_def = null;
			Type atom_def = null;
			ByTable fields = null;
			int variables_start = 0;
			ByTable turfs_underlays = null;
			dynamic instance = null;
			Tile crds = null;
			int first_turf_index = 0;
			dynamic T = null;
			dynamic UT = null;

			members = new ByTable();
			members_attributes = new ByTable();
			index = 1;
			old_position = 1;

			do {
				dpos = this.find_next_delimiter_position( model, old_position, ",", "{", "}" );
				full_def = String13.SubStr( model, old_position, dpos );
				atom_def = Lang13.FindClass( String13.SubStr( full_def, 1, String13.FindIgnoreCase( full_def, "{", 1, 0 ) ) );
				members.Add( atom_def );
				old_position = dpos + 1;
				fields = new ByTable();
				variables_start = String13.FindIgnoreCase( full_def, "{", 1, 0 );

				if ( variables_start != 0 ) {
					full_def = String13.SubStr( full_def, variables_start + 1, Lang13.Length( full_def ) );
					fields = this.readlist( full_def, ";" );
				}
				members_attributes.len++;
				members_attributes[index++] = fields;
				Task13.Sleep( -1 );
			} while ( dpos != 0 );
			turfs_underlays = new ByTable();
			index = members.len;
			GlobalVars._preloader.setup( members_attributes[index] );
			instance = Lang13.FindObj( members[index] );
			crds = Map13.GetTile( xcrd, ((int)( ycrd )), zcrd );

			if ( crds != null ) {
				instance.contents.Add( crds );
			}

			if ( Lang13.Bool( GlobalVars.use_preloader ) && Lang13.Bool( instance ) ) {
				GlobalVars._preloader.load( instance );
			}
			members.Remove( members[index] );
			first_turf_index = 1;

			while (!Lang13.Bool( members[first_turf_index].IsSubclassOf( typeof(Tile) ) )) {
				first_turf_index++;
			}
			T = this.instance_atom( members[first_turf_index], members_attributes[first_turf_index], xcrd, ycrd, zcrd );

			if ( Lang13.Bool( T ) ) {
				index = first_turf_index + 1;

				while (index <= members.len) {
					turfs_underlays.Insert( 1, new Image( T.icon, null, T.icon_state, T.layer, T.dir ) );
					UT = this.instance_atom( members[index], members_attributes[index], xcrd, ycrd, zcrd );
					this.add_underlying_turf( UT, T, turfs_underlays );
					T = UT;
					index++;
				}
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, first_turf_index - 1 )) {
				index = _a;
				
				this.instance_atom( members[index], members_attributes[index], xcrd, ycrd, zcrd );
			}
			return;
		}

		// Function from file: writer.dm
		[Verb]
		[VerbInfo(  )]
		[VerbArg( 1, InputType.Tile )]
		[VerbArg( 2, InputType.Tile )]
		[VerbArg( 3, InputType.Num )]
		public string write_map( dynamic t1 = null, dynamic t2 = null, dynamic flags = null ) {
			Tile nw = null;
			Tile se = null;
			ByTable templates = null;
			string template_buffer = null;
			string dmm_text = null;
			double pos_z = 0;
			double pos_y = 0;
			double pos_x = 0;
			Tile test_turf = null;
			string test_template = null;
			int template_number = 0;
			int key_length = 0;
			ByTable keys = null;
			double key_pos = 0;
			int z_level = 0;
			int? z_pos = null;
			string z_block = null;
			int? y_pos = null;
			string y_block = null;
			int? x_pos = null;
			string x_block = null;
			double? key_number = null;
			dynamic temp_key = null;

			
			if ( !( t1 is Tile ) || !( t2 is Tile ) ) {
				Task13.Crash( "Invalid arguments supplied to proc write_map, arguments were not turfs." );
			}
			nw = Map13.GetTile( Num13.MinInt( Convert.ToInt32( t1.x ), Convert.ToInt32( t2.x ) ), Num13.MaxInt( Convert.ToInt32( t1.y ), Convert.ToInt32( t2.y ) ), Num13.MinInt( Convert.ToInt32( t1.z ), Convert.ToInt32( t2.z ) ) );
			se = Map13.GetTile( Num13.MaxInt( Convert.ToInt32( t1.x ), Convert.ToInt32( t2.x ) ), Num13.MinInt( Convert.ToInt32( t1.y ), Convert.ToInt32( t2.y ) ), Num13.MaxInt( Convert.ToInt32( t1.z ), Convert.ToInt32( t2.z ) ) );
			templates = new ByTable( 0 );
			template_buffer = "";
			dmm_text = "";

			foreach (dynamic _c in Lang13.IterateRange( nw.z, se.z )) {
				pos_z = _c;
				

				foreach (dynamic _b in Lang13.IterateRange( nw.y, se.y )) {
					pos_y = _b;
					

					foreach (dynamic _a in Lang13.IterateRange( nw.x, se.x )) {
						pos_x = _a;
						
						test_turf = Map13.GetTile( ((int)( pos_x )), ((int)( pos_y )), ((int)( pos_z )) );
						test_template = this.make_template( test_turf, flags );
						template_number = templates.Find( test_template );

						if ( !( template_number != 0 ) ) {
							templates.Add( test_template );
							template_number = templates.len;
						}
						template_buffer += "" + template_number + ",";
					}
					template_buffer += ";";
				}
				template_buffer += ".";
			}
			key_length = Num13.Floor( Math.Log( this.letter_digits.len, templates.len - 1 ) + 1 );
			keys = null;
			keys = new ByTable( templates.len );

			foreach (dynamic _d in Lang13.IterateRange( 1, templates.len )) {
				key_pos = _d;
				
				keys[key_pos] = this.get_model_key( key_pos, key_length );
				dmm_text += "\"" + keys[key_pos] + "\" = (" + templates[key_pos] + ")\n";
			}
			z_level = 0;
			z_pos = null;
			z_pos = 1;

			while (GlobalVars.TRUE != 0) {
				
				if ( ( z_pos ??0) >= Lang13.Length( template_buffer ) ) {
					break;
				}

				if ( z_level != 0 ) {
					dmm_text += "\n";
				}
				dmm_text += "\n(1,1," + ++z_level + ") = {\"\n";
				z_block = String13.SubStr( template_buffer, z_pos ??0, String13.FindIgnoreCase( template_buffer, ".", z_pos ??0, 0 ) );
				y_pos = null;
				y_pos = 1;

				while (GlobalVars.TRUE != 0) {
					
					if ( ( y_pos ??0) >= Lang13.Length( z_block ) ) {
						break;
					}
					y_block = String13.SubStr( z_block, y_pos ??0, String13.FindIgnoreCase( z_block, ";", y_pos ??0, 0 ) );
					x_pos = null;
					x_pos = 1;

					while (GlobalVars.TRUE != 0) {
						
						if ( ( x_pos ??0) >= Lang13.Length( y_block ) ) {
							break;
						}
						x_block = String13.SubStr( y_block, x_pos ??0, String13.FindIgnoreCase( y_block, ",", x_pos ??0, 0 ) );
						key_number = String13.ParseNumber( x_block );
						temp_key = keys[key_number];
						dmm_text += temp_key;
						Task13.Sleep( -1 );
						x_pos = String13.FindIgnoreCase( y_block, ",", x_pos ??0, 0 ) + 1;
					}
					dmm_text += "\n";
					Task13.Sleep( -1 );
					y_pos = String13.FindIgnoreCase( z_block, ";", y_pos ??0, 0 ) + 1;
				}
				dmm_text += "\"}";
				Task13.Sleep( -1 );
				z_pos = String13.FindIgnoreCase( template_buffer, ".", z_pos ??0, 0 ) + 1;
			}
			return dmm_text;
		}

		// Function from file: writer.dm
		[Verb]
		[VerbInfo(  )]
		[VerbArg( 1, InputType.Tile )]
		[VerbArg( 2, InputType.Tile )]
		[VerbArg( 3, InputType.Str )]
		[VerbArg( 4, InputType.Num )]
		public File save_map( dynamic t1 = null, dynamic t2 = null, string map_name = null, dynamic flags = null ) {
			dynamic file_text = null;
			File saved_map = null;

			
			if ( !( String13.CKeyPreserveCase( map_name ) == map_name && Lang13.Bool( String13.CKeyPreserveCase( map_name ) ) ) ) {
				Task13.Crash( "Invalid text supplied to proc save_map, invalid characters or empty string." );
			}

			if ( !( t1 is Tile ) || !( t2 is Tile ) ) {
				Task13.Crash( "Invalid arguments supplied to proc save_map, arguments were not turfs." );
			}
			file_text = this.__CallVerb("write map", t1, t2, flags );

			if ( File13.Exists( "" + map_name + ".dmm" ) ) {
				File13.Delete( "" + map_name + ".dmm" );
			}
			saved_map = new File( "" + map_name + ".dmm" );
			saved_map.WriteMsg( file_text );
			return saved_map;
		}

		// Function from file: reader.dm
		[Verb]
		[VerbInfo(  )]
		[VerbArg( 1, InputType.File )]
		[VerbArg( 2, InputType.Num )]
		[VerbArg( 3, InputType.Num )]
		[VerbArg( 4, InputType.Num )]
		public void load_map( string dmm_file = null, bool x_offset = false, bool y_offset = false, int z_offset = 0 ) {
			string quote = null;
			string tfile = null;
			int tfile_len = 0;
			int lpos = 0;
			ByTable grid_models = null;
			int key_len = 0;
			string tline = null;
			string model_key = null;
			string model_contents = null;
			int zcrd = 0;
			double ycrd = 0;
			int xcrd = 0;
			int? zpos = null;
			string zgrid = null;
			int z_depth = 0;
			int x_depth = 0;
			double x_tilecount = 0;
			double y_depth = 0;
			int? gpos = null;
			string grid_line = null;
			double mpos = 0;
			string model_key2 = null;

			
			if ( !( z_offset != 0 ) ) {
				z_offset = Game13.map_size_z + 1;
			}

			if ( !x_offset ) {
				x_offset = false;
			}

			if ( !y_offset ) {
				y_offset = false;
			}
			quote = String13.GetCharFromCode( 34 );
			tfile = File13.Read( dmm_file );
			tfile_len = Lang13.Length( tfile );
			lpos = 1;
			grid_models = new ByTable();
			key_len = Lang13.Length( String13.SubStr( tfile, 2, String13.FindIgnoreCase( tfile, quote, 2, 0 ) ) );
			lpos = 1;

			while (lpos < tfile_len) {
				tline = String13.SubStr( tfile, lpos, String13.FindIgnoreCase( tfile, "\n", lpos, 0 ) );

				if ( String13.SubStr( tline, 1, 2 ) != quote ) {
					break;
				}
				model_key = String13.SubStr( tline, 2, key_len + 2 );
				model_contents = String13.SubStr( tline, String13.FindIgnoreCase( tfile, "=", 1, 0 ) + 3, Lang13.Length( tline ) );
				grid_models[model_key] = model_contents;
				Task13.Sleep( -1 );
				lpos = String13.FindIgnoreCase( tfile, "\n", lpos, 0 ) + 1;
			}
			zcrd = -1;
			ycrd = y_offset ?1:0;
			xcrd = x_offset ?1:0;
			zpos = null;
			zpos = String13.FindIgnoreCase( tfile, "\n(1,1,", lpos, 0 );

			while (zpos != 0) {
				zcrd++;
				Game13.map_size_z = Num13.MaxInt( Game13.map_size_z, zcrd + z_offset );
				zgrid = String13.SubStr( tfile, String13.FindIgnoreCase( tfile, quote + "\n", zpos ??0, 0 ) + 2, String13.FindIgnoreCase( tfile, "\n" + quote, zpos ??0, 0 ) + 1 );
				z_depth = Lang13.Length( zgrid );
				x_depth = Lang13.Length( String13.SubStr( zgrid, 1, String13.FindIgnoreCase( zgrid, "\n", 2, 0 ) ) );
				x_tilecount = x_depth / key_len;

				if ( Game13.map_size_x < x_tilecount ) {
					Game13.map_size_x = ((int)( x_tilecount ));
				}
				y_depth = z_depth / ( x_depth + 1 );

				if ( Game13.map_size_y < y_depth ) {
					Game13.map_size_y = ((int)( y_depth ));
				}
				ycrd = y_depth;
				gpos = null;
				gpos = 1;

				while (gpos != 0) {
					grid_line = String13.SubStr( zgrid, gpos ??0, String13.FindIgnoreCase( zgrid, "\n", gpos ??0, 0 ) );
					xcrd = 0;

					foreach (dynamic _a in Lang13.IterateRange( 1, x_depth, key_len )) {
						mpos = _a;
						
						xcrd++;
						model_key2 = String13.SubStr( grid_line, ((int)( mpos )), ((int)( mpos + key_len )) );
						this.parse_grid( grid_models[model_key2], xcrd + ( x_offset ?1:0), ycrd + ( y_offset ?1:0), zcrd + z_offset );
					}

					if ( ( gpos ??0) + x_depth + 1 > z_depth ) {
						break;
					}
					ycrd--;
					Task13.Sleep( -1 );
					gpos = String13.FindIgnoreCase( zgrid, "\n", gpos ??0, 0 ) + 1;
				}

				if ( String13.FindIgnoreCase( tfile, quote + "}", zpos ??0, 0 ) + 2 == tfile_len ) {
					break;
				}
				Task13.Sleep( -1 );
				zpos = String13.FindIgnoreCase( tfile, "\n(1,1,", ( zpos ??0) + 1, 0 );
			}
			return;
		}

		// Function from file: dmm_suite.dm
		[Verb]
		[VerbInfo( name: "save map" )]
		[VerbArg( 1, InputType.Tile )]
		[VerbArg( 2, InputType.Tile )]
		[VerbArg( 3, InputType.Str )]
		[VerbArg( 4, InputType.Num )]
		public void f_save_map( dynamic t1 = null, dynamic t2 = null, dynamic map_name = null, dynamic flags = null ) {
			return;
		}

		// Function from file: dmm_suite.dm
		[Verb]
		[VerbInfo( name: "write map" )]
		[VerbArg( 1, InputType.Tile )]
		[VerbArg( 2, InputType.Tile )]
		[VerbArg( 3, InputType.Num )]
		public void f_write_map( dynamic t1 = null, dynamic t2 = null, dynamic flags = null ) {
			return;
		}

		// Function from file: dmm_suite.dm
		[Verb]
		[VerbInfo( name: "load map" )]
		[VerbArg( 1, InputType.File )]
		[VerbArg( 2, InputType.Num )]
		[VerbArg( 3, InputType.Num )]
		[VerbArg( 4, InputType.Num )]
		public void f_load_map( dynamic dmm_file = null, dynamic x_offset = null, dynamic y_offset = null, dynamic z_offset = null ) {
			return;
		}

	}

}