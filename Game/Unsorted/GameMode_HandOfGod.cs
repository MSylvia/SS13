// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_HandOfGod : GameMode {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "hand of god";
			this.config_tag = "handofgod";
			this.antag_flag = "hand of god: cultist";
			this.required_players = 25;
			this.required_enemies = 8;
			this.recommended_enemies = 8;
			this.restricted_jobs = new ByTable(new object [] { "Chaplain", "AI", "Cyborg", "Security Officer", "Warden", "Detective", "Head of Security", "Captain", "Head of Personnel" });
		}

		// Function from file: _handofgod.dm
		public override bool declare_completion(  ) {
			string text = null;
			Mind red_god = null;
			bool godwin = false;
			Mind red_prophet = null;
			Mind player = null;
			string objectives = null;
			int count = 0;
			Objective O = null;
			string text2 = null;
			Mind blue_god = null;
			bool godwin2 = false;
			Mind blue_prophet = null;
			Mind player2 = null;
			string objectives2 = null;
			int count2 = 0;
			Objective O2 = null;

			
			if ( this.red_deities.len != 0 ) {
				text = "<BR><font size=3 color='red'><B>The red cult:</b></font>";

				foreach (dynamic _d in Lang13.Enumerate( this.red_deities, typeof(Mind) )) {
					red_god = _d;
					
					godwin = true;
					text += "<BR><B>" + red_god.key + "</B> was the red deity, <B>" + red_god.name + "</B> (";

					if ( Lang13.Bool( red_god.current ) ) {
						
						if ( Convert.ToInt32( red_god.current.stat ) == 2 ) {
							text += "died";
						} else {
							text += "survived";
						}
					} else {
						text += "ceased existing";
					}
					text += ")";

					if ( this.red_deity_prophets.len != 0 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.red_deity_prophets, typeof(Mind) )) {
							red_prophet = _a;
							
							text += "<BR>The red prophet was <B>" + red_prophet.name + "</B> (<B>" + red_prophet.key + "</B>)";
						}
					} else {
						text += "<BR>the red prophet was killed for their beliefs.";
					}
					text += "<BR><B>Red follower count: </B> " + this.red_deity_followers.len;
					text += "<BR><B>Red followers:</B> ";

					foreach (dynamic _b in Lang13.Enumerate( this.red_deity_followers, typeof(Mind) )) {
						player = _b;
						
						text += "" + player.name + " (" + player.key + ")";
					}
					objectives = "";

					if ( red_god.objectives.len != 0 ) {
						count = 1;

						foreach (dynamic _c in Lang13.Enumerate( red_god.objectives, typeof(Objective) )) {
							O = _c;
							

							if ( O.check_completion() != 0 ) {
								objectives += "<BR><B>Objective #" + count + "</B>: " + O.explanation_text + " <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "god_objective", "" + O.type + "|SUCCESS" );
							} else {
								objectives += "<BR><B>Objective #" + count + "</B>: " + O.explanation_text + " <font color='red'><B>Fail.</B></font>";
								GlobalFuncs.feedback_add_details( "god_objective", "" + O.type + "|FAIL" );
								godwin = false;
							}
							count++;
						}
					}
					text += objectives;

					if ( godwin ) {
						text += "<BR><font color='green'><B>The red cult and deity were successful!</B></font>";
						GlobalFuncs.feedback_add_details( "god_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The red cult and deity have failed!</B></font>";
						GlobalFuncs.feedback_add_details( "god_success", "FAIL" );
					}
					text += "<BR>";
				}
				Game13.WriteMsg( text );
			}

			if ( this.blue_deities.len != 0 ) {
				text2 = "<BR><font size=3 color='red'><B>The blue cult:</b></font>";

				foreach (dynamic _h in Lang13.Enumerate( this.blue_deities, typeof(Mind) )) {
					blue_god = _h;
					
					godwin2 = true;
					text2 += "<BR><B>" + blue_god.key + "</B> was the blue deity, <B>" + blue_god.name + "</B> (";

					if ( Lang13.Bool( blue_god.current ) ) {
						
						if ( Convert.ToInt32( blue_god.current.stat ) == 2 ) {
							text2 += "died";
						} else {
							text2 += "survived";
						}
					} else {
						text2 += "ceased existing";
					}
					text2 += ")";

					if ( this.blue_deity_prophets.len != 0 ) {
						
						foreach (dynamic _e in Lang13.Enumerate( this.blue_deity_prophets, typeof(Mind) )) {
							blue_prophet = _e;
							
							text2 += "<BR>The blue prophet was <B>" + blue_prophet.name + "</B> (<B>" + blue_prophet.key + "</B>)";
						}
					} else {
						text2 += "<BR>the blue prophet was killed for their beliefs.";
					}
					text2 += "<BR><B>Blue follower count: </B> " + this.blue_deity_followers.len;
					text2 += "<BR><B>Blue followers:</B> ";

					foreach (dynamic _f in Lang13.Enumerate( this.blue_deity_followers, typeof(Mind) )) {
						player2 = _f;
						
						text2 += "" + player2.name + " (" + player2.key + ")";
					}
					objectives2 = "";

					if ( blue_god.objectives.len != 0 ) {
						count2 = 1;

						foreach (dynamic _g in Lang13.Enumerate( blue_god.objectives, typeof(Objective) )) {
							O2 = _g;
							

							if ( O2.check_completion() != 0 ) {
								objectives2 += "<BR><B>Objective #" + count2 + "</B>: " + O2.explanation_text + " <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "god_objective", "" + O2.type + "|SUCCESS" );
							} else {
								objectives2 += "<BR><B>Objective #" + count2 + "</B>: " + O2.explanation_text + " <font color='red'><B>Fail.</B></font>";
								GlobalFuncs.feedback_add_details( "god_objective", "" + O2.type + "|FAIL" );
								godwin2 = false;
							}
							count2++;
						}
					}
					text2 += objectives2;

					if ( godwin2 ) {
						text2 += "<BR><font color='green'><B>The blue cult and deity were successful!</B></font>";
						GlobalFuncs.feedback_add_details( "god_success", "SUCCESS" );
					} else {
						text2 += "<BR><font color='red'><B>The blue cult and deity have failed!</B></font>";
						GlobalFuncs.feedback_add_details( "god_success", "FAIL" );
					}
					text2 += "<BR>";
				}
				Game13.WriteMsg( text2 );
			}
			base.declare_completion();
			return true;
		}

		// Function from file: _handofgod.dm
		public override bool post_setup( bool? report = null ) {
			ByTable red_god_possibilities = null;
			Mind red_god = null;
			ByTable blue_god_possibilities = null;
			Mind blue_god = null;

			red_god_possibilities = this.get_players_for_role( "hand of god: god" );
			red_god_possibilities.And( this.red_deity_followers );

			if ( !( red_god_possibilities.len != 0 ) ) {
				red_god_possibilities = this.red_deity_followers;
			}
			red_god = GlobalFuncs.pick_n_take( red_god_possibilities );

			if ( red_god != null ) {
				((Mob)red_god.current).become_god( "red" );
				this.remove_hog_follower( red_god, false );
				this.add_god( red_god, "red" );
			}
			blue_god_possibilities = this.get_players_for_role( "hand of god: god" );
			blue_god_possibilities.And( this.blue_deity_followers );

			if ( !( blue_god_possibilities.len != 0 ) ) {
				blue_god_possibilities = this.blue_deity_followers;
			}
			blue_god = GlobalFuncs.pick_n_take( blue_god_possibilities );

			if ( blue_god != null ) {
				((Mob)blue_god.current).become_god( "blue" );
				this.remove_hog_follower( blue_god, false );
				this.add_god( blue_god, "blue" );
			}

			if ( red_god != null ) {
				((GameMode)GlobalVars.ticker.mode).forge_deity_objectives( red_god );
			}

			if ( blue_god != null ) {
				((GameMode)GlobalVars.ticker.mode).forge_deity_objectives( blue_god );
			}
			base.post_setup( report );
			return false;
		}

		// Function from file: _handofgod.dm
		public override bool pre_setup(  ) {
			double F = 0;
			Mind follower = null;
			Mind chosen = null;
			Mind chosen2 = null;

			
			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				this.restricted_jobs.Add( "Assistant" );
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, this.recommended_enemies )) {
				F = _a;
				

				if ( !( this.antag_candidates.len != 0 ) ) {
					break;
				}
				follower = GlobalFuncs.pick_n_take( this.antag_candidates );
				this.unassigned_followers.Add( follower );
				follower.restricted_roles = this.restricted_jobs;
				GlobalFuncs.log_game( "" + follower.key + " (ckey) has been selected as a follower, however teams have not been decided yet." );
			}

			while (this.unassigned_followers.len > this.required_enemies / 2) {
				chosen = GlobalFuncs.pick_n_take( this.unassigned_followers );
				this.add_hog_follower( chosen, "red" );
			}

			while (this.unassigned_followers.len != 0) {
				chosen2 = GlobalFuncs.pick_n_take( this.unassigned_followers );
				this.add_hog_follower( chosen2, "blue" );
			}
			return true;
		}

		// Function from file: _handofgod.dm
		public override void announce(  ) {
			Game13.WriteMsg( "<B>The current game mode is - Hand of God!</B>" );
			Game13.WriteMsg( "<B>Two cults are onboard the station, seeking to overthrow the other, and anyone who stands in their way.</B>" );
			Game13.WriteMsg( "<B>Followers</B> - Complete your deity's objectives. Convert crewmembers to your cause by using your deity's nexus. Remember - there is no you, there is only the cult." );
			Game13.WriteMsg( "<B>Prophets</B> - Command your cult by the will of your deity.  You are a high-value target, so be careful!" );
			Game13.WriteMsg( "<B>Personnel</B> - Do not let any cult succeed in its mission. Loyalty implants and holy water will revert them to neutral, hopefully nonviolent crew." );
			return;
		}

	}

}