// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Airalarm : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Airalarm);
		}

		// Function from file: airalarm.dm
		public Wires_Airalarm ( Obj_Machinery_Airalarm holder = null ) : base( holder ) {
			this.wires = new ByTable(new object [] { "power", "idscan", "ai", "panic", "alarm" });
			this.add_duds( 3 );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: airalarm.dm
		public override void on_cut( dynamic wire = null, int? mend = null ) {
			Ent_Static A = null;
			dynamic AA = null;

			A = this.holder;

			dynamic _a = wire; // Was a switch-case, sorry for the mess.
			if ( _a=="power" ) {
				((dynamic)A).shock( Task13.User, 50 );
				((dynamic)A).shorted = !Lang13.Bool( mend );
				((dynamic)A).update_icon();
			} else if ( _a=="idscan" ) {
				
				if ( !Lang13.Bool( mend ) ) {
					((dynamic)A).locked = GlobalVars.TRUE;
				}
			} else if ( _a=="ai" ) {
				((dynamic)A).aidisabled = mend;
			} else if ( _a=="panic" ) {
				
				if ( !Lang13.Bool( mend ) && !Lang13.Bool( ((dynamic)A).shorted ) ) {
					((dynamic)A).mode = 3;
					((dynamic)A).apply_mode();
				}
			} else if ( _a=="alarm" ) {
				AA = GlobalFuncs.get_area_master( A );

				if ( ((Zone)AA).atmosalert( 2, this.holder ) ) {
					((dynamic)A).post_alert( 2 );
				}
				((dynamic)A).update_icon();
			}
			return;
		}

		// Function from file: airalarm.dm
		public override void on_pulse( string wire = null ) {
			Ent_Static A = null;
			dynamic AA = null;

			A = this.holder;

			switch ((string)( wire )) {
				case "power":
					
					if ( !Lang13.Bool( ((dynamic)A).shorted ) ) {
						((dynamic)A).shorted = GlobalVars.TRUE;
						((dynamic)A).update_icon();
					}
					GlobalFuncs.addtimer( A, "reset", 1200, GlobalVars.FALSE, wire );
					break;
				case "idscan":
					((dynamic)A).locked = !Lang13.Bool( ((dynamic)A).locked );
					break;
				case "ai":
					
					if ( !Lang13.Bool( ((dynamic)A).aidisabled ) ) {
						((dynamic)A).aidisabled = GlobalVars.TRUE;
					}
					GlobalFuncs.addtimer( A, "reset", 100, GlobalVars.FALSE, wire );
					break;
				case "panic":
					
					if ( !Lang13.Bool( ((dynamic)A).shorted ) ) {
						
						if ( Lang13.Bool( ((dynamic)A).mode ) == true ) {
							((dynamic)A).mode = 3;
						} else {
							((dynamic)A).mode = 1;
						}
						((dynamic)A).apply_mode();
					}
					break;
				case "alarm":
					AA = GlobalFuncs.get_area_master( A );

					if ( ((Zone)AA).atmosalert( 0, this.holder ) ) {
						((dynamic)A).post_alert( 0 );
					}
					((dynamic)A).update_icon();
					break;
			}
			return;
		}

		// Function from file: airalarm.dm
		public override ByTable get_status(  ) {
			Obj A = null;
			ByTable status = null;

			A = this.holder;
			status = new ByTable();
			status.Add( "The interface light is " + ( Lang13.Bool( ((dynamic)A).locked ) ? "red" : "green" ) + "." );
			status.Add( "The short indicator is " + ( Lang13.Bool( ((dynamic)A).shorted ) ? "lit" : "off" ) + "." );
			status.Add( "The AI connection light is " + ( !Lang13.Bool( ((dynamic)A).aidisabled ) ? "on" : "off" ) + "." );
			return status;
		}

		// Function from file: airalarm.dm
		public override int? interactable( dynamic user = null ) {
			Obj A = null;

			A = this.holder;

			if ( Lang13.Bool( ((dynamic)A).panel_open ) && Convert.ToInt32( ((dynamic)A).buildstage ) == 2 ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

	}

}