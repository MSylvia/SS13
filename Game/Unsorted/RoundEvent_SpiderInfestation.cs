// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_SpiderInfestation : RoundEvent {

		public int spawncount = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.announceWhen = 400;
		}

		// Function from file: spider_infestation.dm
		public override bool start(  ) {
			ByTable vents = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump temp_vent = null;
			Pipeline temp_vent_parent = null;
			dynamic vent = null;
			Obj_Effect_Spider_Spiderling S = null;

			vents = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
				temp_vent = _a;
				

				if ( temp_vent.loc.z == 1 && !( temp_vent.welded == true ) ) {
					temp_vent_parent = temp_vent.parents[1];

					if ( temp_vent_parent.other_atmosmch.len > 20 ) {
						vents.Add( temp_vent );
					}
				}
			}

			while (this.spawncount >= 1 && vents.len != 0) {
				vent = Rand13.PickFromTable( vents );
				S = new Obj_Effect_Spider_Spiderling( vent.loc );

				if ( Rand13.PercentChance( 66 ) ) {
					S.grow_as = typeof(Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider_Nurse);
				}
				vents.Remove( vent );
				this.spawncount--;
			}
			return false;
		}

		// Function from file: spider_infestation.dm
		public override void announce(  ) {
			GlobalFuncs.priority_announce( "Unidentified lifesigns detected coming aboard " + GlobalFuncs.station_name() + ". Secure any exterior access, including ducting and ventilation.", "Lifesign Alert", "sound/AI/aliens.ogg" );
			return;
		}

		// Function from file: spider_infestation.dm
		public override void setup( int? loop = null ) {
			this.announceWhen = Rand13.Int( ((int)( this.announceWhen )), ((int)( this.announceWhen + 50 )) );
			this.spawncount = Rand13.Int( 5, 8 );
			return;
		}

	}

}