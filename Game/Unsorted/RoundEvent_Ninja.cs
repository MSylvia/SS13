// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_Ninja : RoundEvent {

		public bool success_spawn = false;
		public int helping_station = 0;
		public string key = null;
		public dynamic spawn_loc = null;
		public Mob_Living_Carbon_Human Ninja = null;

		// Function from file: ninja_event.dm
		public override bool start(  ) {
			ByTable spawn_locs = null;
			Obj_Effect_Landmark L = null;
			ByTable candidates = null;
			dynamic C = null;
			Mind Mind = null;
			ByTable possible_targets = null;
			Mind M = null;
			ByTable objectives = null;
			Objective_Download O = null;
			Objective_Steal_Special O2 = null;
			int? selected = null;
			Mind M2 = null;
			dynamic is_bad_guy = null;
			Objective_Assassinate O3 = null;
			Objective_Protect O4 = null;
			int? selected2 = null;
			dynamic M3 = null;
			dynamic is_bad_guy2 = null;
			Objective_Debrain O5 = null;
			Objective_Capture O6 = null;
			Objective_Survive O7 = null;
			dynamic N = null;

			
			if ( !Lang13.Bool( this.spawn_loc ) ) {
				spawn_locs = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					L = _b;
					

					if ( L.loc is Tile ) {
						
						switch ((string)( L.name )) {
							case "ninjaspawn":
							case "carpspawn":
								spawn_locs.Add( L.loc );
								break;
						}
					}
				}

				if ( !( spawn_locs.len != 0 ) ) {
					this.kill(); return false;
				}
				this.spawn_loc = Rand13.PickFromTable( spawn_locs );
			}

			if ( !Lang13.Bool( this.spawn_loc ) ) {
				this.kill(); return false;
			}

			if ( !Lang13.Bool( this.key ) ) {
				candidates = GlobalFuncs.get_candidates( "space ninja" );

				if ( !( candidates.len != 0 ) ) {
					this.kill(); return false;
				}
				C = Rand13.PickFromTable( candidates );
				this.key = C.key;
			}

			if ( !Lang13.Bool( this.key ) ) {
				this.kill(); return false;
			}
			Mind = GlobalFuncs.create_ninja_mind( this.key );
			Mind.active = true;
			possible_targets = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				M = _c;
				

				if ( Lang13.Bool( M.current ) && Convert.ToInt32( M.current.stat ) != 2 ) {
					
					if ( M.current is Mob_Living_Carbon_Human ) {
						
						if ( Lang13.Bool( M.special_role ) ) {
							possible_targets[M] = 0;
						} else if ( GlobalVars.command_positions.Contains( M.assigned_role ) ) {
							possible_targets[M] = 1;
						}
					}
				}
			}
			objectives = new ByTable(new object [] { 1, 2, 3, 4 });

			while (Mind.objectives.len < 6) {
				
				dynamic _d = GlobalFuncs.pick_n_take( objectives ); // Was a switch-case, sorry for the mess.
				if ( _d==1 ) {
					O = new Objective_Download();
					O.owner = Mind;
					O.gen_amount_goal();
					Mind.objectives.Add( O );
				} else if ( _d==2 ) {
					O2 = new Objective_Steal_Special();
					O2.owner = Mind;
					Mind.objectives.Add( O2 );
				} else if ( _d==3 ) {
					
					if ( !( possible_targets.len != 0 ) ) {
						continue;
					}
					selected = Rand13.Int( 1, possible_targets.len );
					M2 = possible_targets[selected];
					is_bad_guy = possible_targets[M2];
					possible_targets.Cut( selected, ( selected ??0) + 1 );

					if ( Lang13.Bool( is_bad_guy ^ this.helping_station ) ) {
						O3 = new Objective_Assassinate();
						O3.owner = Mind;
						O3.target = M2;
						O3.explanation_text = new Txt( "Slay " ).the( M2.current.real_name ).item().str( ", the " ).item( M2.assigned_role ).str( "." ).ToString();
						Mind.objectives.Add( O3 );
					} else {
						O4 = new Objective_Protect();
						O4.owner = Mind;
						O4.target = M2;
						O4.explanation_text = new Txt( "Protect " ).the( M2.current.real_name ).item().str( ", the " ).item( M2.assigned_role ).str( ", from harm." ).ToString();
						Mind.objectives.Add( O4 );
					}
				} else if ( _d==4 ) {
					
					if ( !( possible_targets.len != 0 ) ) {
						continue;
					}
					selected2 = Rand13.Int( 1, possible_targets.len );
					M3 = possible_targets[selected2];
					is_bad_guy2 = possible_targets[M3];
					possible_targets.Cut( selected2, ( selected2 ??0) + 1 );

					if ( Lang13.Bool( is_bad_guy2 ^ this.helping_station ) ) {
						O5 = new Objective_Debrain();
						O5.owner = Mind;
						O5.target = M3;
						O5.explanation_text = "Steal the brain of " + M3.current.real_name + ".";
						Mind.objectives.Add( O5 );
					} else {
						O6 = new Objective_Capture();
						O6.owner = Mind;
						O6.gen_amount_goal();
						Mind.objectives.Add( O6 );
					}
				} else {
					break;
				}
			}
			O7 = new Objective_Survive();
			O7.owner = Mind;
			Mind.objectives.Add( O7 );
			Mind.store_memory( "I am an elite mercenary assassin of the mighty Spider Clan. A <font color='red'><B>SPACE NINJA</B></font>!" );
			Mind.store_memory( "Suprise is my weapon. Shadows are my armor. Without them, I am nothing. (//initialize your suit by right clicking on it, to use abilities like stealth)!" );
			Mind.store_memory( "Officially, " + ( this.helping_station != 0 ? "Nanotrasen" : "The Syndicate" ) + " are my employer." );
			this.Ninja = GlobalFuncs.create_space_ninja( this.spawn_loc );
			Mind.transfer_to( this.Ninja );

			if ( this.Ninja.wear_suit is Obj_Item_Clothing_Suit_Space_SpaceNinja ) {
				N = this.Ninja.wear_suit;
				((Obj_Item_Clothing_Suit_Space_SpaceNinja)N).randomize_param();
			}
			this.Ninja.v_internal = this.Ninja.s_store;
			this.Ninja.update_internals_hud_icon( true );

			if ( this.Ninja.mind != Mind ) {
				throw new Exception( "Ninja created with incorrect mind" );
				return false;
			}
			this.Ninja.WriteMsg( new Sound( "sound/effects/ninja_greeting.ogg" ) );
			this.success_spawn = true;
			return false;
		}

		// Function from file: ninja_event.dm
		public override void kill(  ) {
			
			if ( !this.success_spawn && this.control != null ) {
				this.control.occurrences--;
			}
			base.kill(); return;
		}

		// Function from file: ninja_event.dm
		public override void setup( int? loop = null ) {
			this.helping_station = Rand13.Int( 0, 1 );
			return;
		}

	}

}