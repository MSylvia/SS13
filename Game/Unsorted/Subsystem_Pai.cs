// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Pai : Subsystem {

		public int? askDelay = 600;
		public int NEVER_FOR_THIS_ROUND = -1;
		public ByTable candidates = new ByTable();
		public ByTable asked = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "pAI";
			this.priority = 20;
		}

		// Function from file: pai.dm
		public Subsystem_Pai (  ) {
			
			if ( GlobalVars.SSpai != this ) {
				
				if ( GlobalVars.SSpai is Subsystem_Pai ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSpai );
				}
				GlobalVars.SSpai = this;
			}
			return;
		}

		// Function from file: pai.dm
		public void question( dynamic C = null ) {
			string response = null;

			
			if ( !Lang13.Bool( C ) ) {
				return;
			}
			this.asked[C.ckey] = Game13.time;
			response = GlobalFuncs.tgalert( C, "Someone is requesting a pAI personality. Would you like to play as a personal AI?", "pAI Request", "Yes", "No", "Never for this round", false, this.askDelay );

			if ( !Lang13.Bool( C ) ) {
				return;
			}

			if ( response == "Yes" ) {
				this.recruitWindow( C.mob );
			} else if ( response == "Never for this round" ) {
				this.asked[C.ckey] = GlobalVars.NEVER_FOR_THIS_ROUND;
			}
			return;
		}

		// Function from file: pai.dm
		public void requestRecruits(  ) {
			Mob_Dead_Observer O = null;
			bool hasSubmitted = false;
			PaiCandidate c = null;

			
			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
				O = _b;
				

				if ( GlobalFuncs.jobban_isbanned( O, "pAI" ) ) {
					continue;
				}

				if ( Lang13.Bool( this.asked[O.ckey] ) ) {
					
					if ( Game13.time < Convert.ToDouble( this.asked[O.ckey] + this.askDelay ) || Convert.ToInt32( this.asked[O.ckey] ) == GlobalVars.NEVER_FOR_THIS_ROUND ) {
						continue;
					} else {
						this.asked.Remove( O.ckey );
					}
				}

				if ( O.client != null ) {
					hasSubmitted = false;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSpai.candidates, typeof(PaiCandidate) )) {
						c = _a;
						

						if ( c.key == O.key ) {
							hasSubmitted = true;
						}
					}

					if ( !hasSubmitted && O.client.prefs.be_special.Contains( "pAI" ) ) {
						this.question( O.client );
					}
				}
			}
			return;
		}

		// Function from file: pai.dm
		public void findPAI( Obj_Item_Device_Paicard p = null, Mob user = null ) {
			ByTable available = null;
			PaiCandidate c = null;
			bool found = false;
			Mob_Dead_Observer o = null;
			string dat = null;
			PaiCandidate c2 = null;

			this.requestRecruits();
			available = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSpai.candidates, typeof(PaiCandidate) )) {
				c = _b;
				

				if ( c.ready ) {
					found = false;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
						o = _a;
						

						if ( o.key == c.key ) {
							found = true;
						}
					}

					if ( found ) {
						available.Add( c );
					}
				}
			}
			dat = "";
			dat += @"
			<style type=""text/css"">

			p.top {
				background-color: #AAAAAA; color: black;
			}

			tr.d0 td {
				background-color: #CC9999; color: black;
			}
			tr.d1 td {
				background-color: #9999CC; color: black;
			}
			tr.d2 td {
				background-color: #99CC99; color: black;
			}
			</style>
			";
			dat += "<p class=\"top\">Requesting AI personalities from central database... If there are no entries, or if a suitable entry is not listed, check again later as more personalities may be added.</p>";
			dat += "<table>";

			foreach (dynamic _c in Lang13.Enumerate( available, typeof(PaiCandidate) )) {
				c2 = _c;
				
				dat += "<tr class=\"d0\"><td>Name:</td><td>" + c2.name + "</td></tr>";
				dat += "<tr class=\"d1\"><td>Description:</td><td>" + c2.description + "</td></tr>";
				dat += "<tr class=\"d0\"><td>Preferred Role:</td><td>" + c2.role + "</td></tr>";
				dat += "<tr class=\"d1\"><td>OOC Comments:</td><td>" + c2.comments + "</td></tr>";
				dat += new Txt( "<tr class=\"d2\"><td><a href='byond://?src=" ).Ref( this ).str( ";download=1;candidate=" ).Ref( c2 ).str( ";device=" ).Ref( p ).str( "'>[Download " ).item( c2.name ).str( "]</a></td><td></td></tr>" ).ToString();
			}
			dat += "</table>";
			Interface13.Browse( user, dat, "window=findPai" );
			return;
		}

		// Function from file: pai.dm
		public void recruitWindow( Mob M = null ) {
			PaiCandidate candidate = null;
			PaiCandidate c = null;
			string dat = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.candidates, typeof(PaiCandidate) )) {
				c = _a;
				

				if ( c.key == M.key ) {
					candidate = c;
				}
			}

			if ( !( candidate != null ) ) {
				candidate = new PaiCandidate();
				candidate.key = M.key;
				this.candidates.Add( candidate );
			}
			dat = "";
			dat += @"
			<style type=""text/css"">

			p.top {
				background-color: #AAAAAA; color: black;
			}

			tr.d0 td {
				background-color: #CC9999; color: black;
			}
			tr.d1 td {
				background-color: #9999CC; color: black;
			}
			</style>
			";
			dat += "<p class=\"top\">Please configure your pAI personality's options. Remember, what you enter here could determine whether or not the user requesting a personality chooses you!</p>";
			dat += "<table>";
			dat += "<tr class=\"d0\"><td>Name:</td><td>" + candidate.name + "</td></tr>";
			dat += new Txt( "<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=name;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>What you plan to call yourself. Suggestions: Any character name you would choose for a station character OR an AI.</td></tr>" ).ToString();
			dat += "<tr class=\"d0\"><td>Description:</td><td>" + candidate.description + "</td></tr>";
			dat += new Txt( "<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=desc;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>What sort of pAI you typically play; your mannerisms, your quirks, etc. This can be as sparse or as detailed as you like.</td></tr>" ).ToString();
			dat += "<tr class=\"d0\"><td>Preferred Role:</td><td>" + candidate.role + "</td></tr>";
			dat += new Txt( "<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=role;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>Do you like to partner with sneaky social ninjas? Like to help security hunt down thugs? Enjoy watching an engineer's back while he saves the station yet again? This doesn't have to be limited to just station jobs. Pretty much any general descriptor for what you'd like to be doing works here.</td></tr>" ).ToString();
			dat += "<tr class=\"d0\"><td>OOC Comments:</td><td>" + candidate.comments + "</td></tr>";
			dat += new Txt( "<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=ooc;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>Anything you'd like to address specifically to the player reading this in an OOC manner. \"I prefer more serious RP.\", \"I'm still learning the interface!\", etc. Feel free to leave this blank if you want.</td></tr>" ).ToString();
			dat += "</table>";
			dat += "<br>";
			dat += new Txt( "<h3><a href='byond://?src=" ).Ref( this ).str( ";option=submit;new=1;candidate=" ).Ref( candidate ).str( "'>Submit Personality</a></h3><br>" ).ToString();
			dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";option=save;new=1;candidate=" ).Ref( candidate ).str( "'>Save Personality</a><br>" ).ToString();
			dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";option=load;new=1;candidate=" ).Ref( candidate ).str( "'>Load Personality</a><br>" ).ToString();
			Interface13.Browse( M, dat, "window=paiRecruit" );
			return;
		}

		// Function from file: pai.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic candidate = null;
			dynamic card = null;
			Mob_Living_Silicon_Pai pai = null;
			dynamic candidate2 = null;
			dynamic option = null;
			dynamic t = null;
			Obj_Item_Device_Paicard p = null;

			
			if ( Lang13.Bool( href_list["download"] ) ) {
				candidate = Lang13.FindObj( href_list["candidate"] );
				card = Lang13.FindObj( href_list["device"] );

				if ( Lang13.Bool( card.pai ) ) {
					return null;
				}

				if ( card is Obj_Item_Device_Paicard && candidate is PaiCandidate ) {
					pai = new Mob_Living_Silicon_Pai( card );

					if ( !Lang13.Bool( candidate.name ) ) {
						pai.name = Rand13.PickFromTable( GlobalVars.ninja_names );
					} else {
						pai.name = candidate.name;
					}
					pai.real_name = pai.name;
					pai.key = candidate.key;
					((Obj_Item_Device_Paicard)card).setPersonality( pai );
					card.looking_for_personality = false;
					((GameMode)GlobalVars.ticker.mode).update_cult_icons_removed( card.pai.mind );
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( card.pai.mind );
					this.candidates.Remove( candidate );
					Interface13.Browse( Task13.User, null, "window=findPai" );
				}
			}

			if ( Lang13.Bool( href_list["new"] ) ) {
				candidate2 = Lang13.FindObj( href_list["candidate"] );
				option = href_list["option"];
				t = "";

				dynamic _b = option; // Was a switch-case, sorry for the mess.
				if ( _b=="name" ) {
					t = Interface13.Input( "Enter a name for your pAI", "pAI Name", candidate2.name, null, null, InputType.Str );

					if ( Lang13.Bool( t ) ) {
						candidate2.name = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 26 );
					}
				} else if ( _b=="desc" ) {
					t = Interface13.Input( "Enter a description for your pAI", "pAI Description", candidate2.description, null, null, InputType.StrMultiline );

					if ( Lang13.Bool( t ) ) {
						candidate2.description = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );
					}
				} else if ( _b=="role" ) {
					t = Interface13.Input( "Enter a role for your pAI", "pAI Role", candidate2.role, null, null, InputType.Str );

					if ( Lang13.Bool( t ) ) {
						candidate2.role = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );
					}
				} else if ( _b=="ooc" ) {
					t = Interface13.Input( "Enter any OOC comments", "pAI OOC Comments", candidate2.comments, null, null, InputType.StrMultiline );

					if ( Lang13.Bool( t ) ) {
						candidate2.comments = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );
					}
				} else if ( _b=="save" ) {
					((PaiCandidate)candidate2).savefile_save( Task13.User );
				} else if ( _b=="load" ) {
					((PaiCandidate)candidate2).savefile_load( Task13.User );

					if ( Lang13.Bool( candidate2.name ) ) {
						candidate2.name = String13.SubStr( GlobalFuncs.sanitize( candidate2.name ), 1, 26 );
					}

					if ( Lang13.Bool( candidate2.description ) ) {
						candidate2.description = String13.SubStr( GlobalFuncs.sanitize( candidate2.description ), 1, 1024 );
					}

					if ( Lang13.Bool( candidate2.role ) ) {
						candidate2.role = String13.SubStr( GlobalFuncs.sanitize( candidate2.role ), 1, 1024 );
					}

					if ( Lang13.Bool( candidate2.comments ) ) {
						candidate2.comments = String13.SubStr( GlobalFuncs.sanitize( candidate2.comments ), 1, 1024 );
					}
				} else if ( _b=="submit" ) {
					
					if ( Lang13.Bool( candidate2 ) ) {
						candidate2.ready = 1;

						foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Paicard) )) {
							p = _a;
							

							if ( p.looking_for_personality ) {
								p.alertUpdate();
							}
						}
					}
					Interface13.Browse( Task13.User, null, "window=paiRecruit" );
					return null;
				}
				this.recruitWindow( Task13.User );
			}
			return null;
		}

	}

}