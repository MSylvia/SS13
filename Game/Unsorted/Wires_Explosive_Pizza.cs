// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Explosive_Pizza : Wires_Explosive {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Item_Pizzabox);
			this.randomize = true;
		}

		// Function from file: explosive.dm
		public Wires_Explosive_Pizza ( Obj_Item_Pizzabox holder = null ) : base( holder ) {
			this.wires = new ByTable(new object [] { "disarm" });
			this.add_duds( 3 );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: explosive.dm
		public override void explode(  ) {
			Ent_Static P = null;

			P = this.holder;
			((dynamic)P).bomb.detonate();
			return;
		}

		// Function from file: explosive.dm
		public override void on_cut( dynamic wire = null, int? mend = null ) {
			Ent_Static P = null;

			P = this.holder;

			dynamic _a = wire; // Was a switch-case, sorry for the mess.
			if ( _a=="disarm" ) {
				
				if ( !Lang13.Bool( mend ) ) {
					((dynamic)P).bomb_defused = GlobalVars.TRUE;
				}
			} else {
				
				if ( !Lang13.Bool( mend ) && !Lang13.Bool( ((dynamic)P).bomb_defused ) ) {
					this.explode();
				}
			}
			return;
		}

		// Function from file: explosive.dm
		public override void on_pulse( string wire = null ) {
			Ent_Static P = null;

			P = this.holder;

			switch ((string)( wire )) {
				case "disarm":
					((dynamic)P).bomb_defused = !Lang13.Bool( ((dynamic)P).bomb_defused );
					break;
				default:
					this.explode();
					break;
			}
			return;
		}

		// Function from file: explosive.dm
		public override ByTable get_status(  ) {
			Ent_Static P = null;
			ByTable status = null;

			P = this.holder;
			status = new ByTable();
			status.Add( "The red light is " + ( Lang13.Bool( ((dynamic)P).bomb_active ) ? "on" : "off" ) + "." );
			status.Add( "The green light is " + ( Lang13.Bool( ((dynamic)P).bomb_defused ) ? "on" : "off" ) + "." );
			return status;
		}

		// Function from file: explosive.dm
		public override int? interactable( dynamic user = null ) {
			Ent_Static P = null;

			P = this.holder;

			if ( Lang13.Bool( ((dynamic)P).open ) && Lang13.Bool( ((dynamic)P).bomb ) ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

	}

}