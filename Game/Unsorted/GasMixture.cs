// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GasMixture : Game_Data {

		public ByTable gases = null;
		public dynamic temperature = null;
		public dynamic temperature_archived = null;
		public double? volume = null;
		public double last_share = 0;
		public double fuel_burnt = 0;

		// Function from file: gas_mixture.dm
		public GasMixture ( int? volume = null ) {
			volume = volume ?? 2500;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.gases = new ByTable();
			this.temperature = 0;
			this.temperature_archived = 0;
			this.volume = volume;
			this.last_share = 0;
			this.fuel_burnt = 0;
			return;
		}

		// Function from file: gas_mixture.dm
		public dynamic compare( GasMixture sample = null, int? datatype = null, int? adjacents = null ) {
			datatype = datatype ?? 1;
			adjacents = adjacents ?? 0;

			ByTable sample_gases = null;
			ByTable cached_gases = null;
			dynamic id = null;
			bool gas_moles = false;
			bool sample_moles = false;
			double delta = 0;
			dynamic temp = null;
			dynamic sample_temp = null;
			double temperature_delta = 0;

			sample_gases = sample.gases;
			cached_gases = this.gases;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases | sample_gases )) {
				id = _a;
				
				gas_moles = ( Lang13.Bool( cached_gases[id] ) ? Lang13.Bool( cached_gases[id][datatype] ) : false );
				sample_moles = ( Lang13.Bool( sample_gases[id] ) ? Lang13.Bool( sample_gases[id][datatype] ) : false );
				delta = Math.Abs( ( gas_moles ?1:0) - ( sample_moles ?1:0) ) / ( ( adjacents ??0) + 1 );

				if ( delta > 0.5199189782142639 && delta > ( gas_moles ?1:0) * 0.041 ) {
					return id;
				}
			}

			if ( this.total_moles() > 0.5199189782142639 ) {
				temp = null;
				sample_temp = null;

				switch ((int?)( datatype )) {
					case 1:
						temp = this.temperature;
						sample_temp = sample.temperature;
						break;
					case 2:
						temp = this.temperature_archived;
						sample_temp = sample.temperature_archived;
						break;
				}
				temperature_delta = Math.Abs( Convert.ToDouble( temp - sample_temp ) );

				if ( temperature_delta > 4 && temperature_delta > Convert.ToDouble( temp * 4 ) ) {
					return "temp";
				}
			}
			return "";
		}

		// Function from file: gas_mixture.dm
		public void temperature_turf_share( Tile sharer = null, double conduction_coefficient = 0 ) {
			dynamic temperature_delta = null;
			double self_heat_capacity = 0;
			double heat = 0;

			temperature_delta = this.temperature_archived - sharer.temperature;

			if ( Math.Abs( Convert.ToDouble( temperature_delta ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();

				if ( sharer.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * Convert.ToDouble( temperature_delta ) * ( self_heat_capacity * sharer.heat_capacity / ( self_heat_capacity + sharer.heat_capacity ) );
					this.temperature = Num13.MaxInt( Convert.ToInt32( this.temperature - heat / self_heat_capacity ), ((int)( 2.7 )) );
					sharer.temperature = Num13.MaxInt( ((int)( sharer.temperature + heat / sharer.heat_capacity )), ((int)( 2.7 )) );
				}
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public void temperature_mimic( Tile model = null, double conduction_coefficient = 0 ) {
			dynamic temperature_delta = null;
			double self_heat_capacity = 0;
			double heat = 0;

			temperature_delta = this.temperature - model.temperature;

			if ( Math.Abs( Convert.ToDouble( temperature_delta ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();

				if ( model.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * Convert.ToDouble( temperature_delta ) * ( self_heat_capacity * model.heat_capacity / ( self_heat_capacity + model.heat_capacity ) );
					this.temperature = Num13.MaxInt( Convert.ToInt32( this.temperature - heat / self_heat_capacity ), ((int)( 2.7 )) );
				}
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public void temperature_share( GasMixture sharer = null, double conduction_coefficient = 0 ) {
			dynamic temperature_delta = null;
			double self_heat_capacity = 0;
			double sharer_heat_capacity = 0;
			double heat = 0;

			temperature_delta = this.temperature_archived - sharer.temperature_archived;

			if ( Math.Abs( Convert.ToDouble( temperature_delta ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity_archived();
				sharer_heat_capacity = sharer.heat_capacity_archived();

				if ( sharer_heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * Convert.ToDouble( temperature_delta ) * ( self_heat_capacity * sharer_heat_capacity / ( self_heat_capacity + sharer_heat_capacity ) );
					this.temperature = Num13.MaxInt( Convert.ToInt32( this.temperature - heat / self_heat_capacity ), ((int)( 2.7 )) );
					sharer.temperature = Num13.MaxInt( Convert.ToInt32( sharer.temperature + heat / sharer_heat_capacity ), ((int)( 2.7 )) );
				}
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public dynamic mimic( dynamic model = null, int? atmos_adjacent_turfs = null ) {
			atmos_adjacent_turfs = atmos_adjacent_turfs ?? 4;

			GasMixture copied = null;

			copied = new GasMixture();
			copied.copy_from_turf( model );
			return this.share( copied, atmos_adjacent_turfs );
		}

		// Function from file: gas_mixture.dm
		public dynamic share( GasMixture sharer = null, int? atmos_adjacent_turfs = null ) {
			atmos_adjacent_turfs = atmos_adjacent_turfs ?? 4;

			ByTable cached_gases = null;
			ByTable sharer_gases = null;
			dynamic temperature_delta = null;
			double abs_temperature_delta = 0;
			double old_self_heat_capacity = 0;
			double old_sharer_heat_capacity = 0;
			double heat_capacity_self_to_sharer = 0;
			double heat_capacity_sharer_to_self = 0;
			double moved_moles = 0;
			double abs_moved_moles = 0;
			dynamic id = null;
			dynamic id2 = null;
			dynamic gas = null;
			dynamic sharergas = null;
			double delta = 0;
			double gas_heat_capacity = 0;
			double new_self_heat_capacity = 0;
			double new_sharer_heat_capacity = 0;
			ByTable unique_gases = null;
			dynamic delta_pressure = null;

			
			if ( !( sharer != null ) ) {
				return 0;
			}
			cached_gases = this.gases;
			sharer_gases = sharer.gases;
			temperature_delta = this.temperature_archived - sharer.temperature_archived;
			abs_temperature_delta = Math.Abs( Convert.ToDouble( temperature_delta ) );
			old_self_heat_capacity = 0;
			old_sharer_heat_capacity = 0;

			if ( abs_temperature_delta > 0.5 ) {
				old_self_heat_capacity = this.heat_capacity();
				old_sharer_heat_capacity = sharer.heat_capacity();
			}
			heat_capacity_self_to_sharer = 0;
			heat_capacity_sharer_to_self = 0;
			moved_moles = 0;
			abs_moved_moles = 0;

			foreach (dynamic _a in Lang13.Enumerate( sharer_gases - cached_gases )) {
				id = _a;
				
				this.add_gas( id );
			}

			foreach (dynamic _b in Lang13.Enumerate( cached_gases )) {
				id2 = _b;
				

				if ( !Lang13.Bool( sharer_gases[id2] ) ) {
					sharer.add_gas( id2 );
				}
				gas = cached_gases[id2];
				sharergas = sharer_gases[id2];
				delta = Num13.Round( Convert.ToDouble( gas[2] - sharergas[2] ), 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );

				if ( delta != 0 && abs_temperature_delta > 0.5 ) {
					gas_heat_capacity = delta * Convert.ToDouble( gas[3][1] );

					if ( delta > 0 ) {
						heat_capacity_self_to_sharer += gas_heat_capacity;
					} else {
						heat_capacity_sharer_to_self -= gas_heat_capacity;
					}
				}
				gas[1] -= delta;
				sharergas[1] += delta;
				moved_moles += delta;
				abs_moved_moles += Math.Abs( delta );
			}
			this.last_share = abs_moved_moles;

			if ( abs_temperature_delta > 0.5 ) {
				new_self_heat_capacity = old_self_heat_capacity + heat_capacity_sharer_to_self - heat_capacity_self_to_sharer;
				new_sharer_heat_capacity = old_sharer_heat_capacity + heat_capacity_self_to_sharer - heat_capacity_sharer_to_self;

				if ( new_self_heat_capacity > 0.0003 ) {
					this.temperature = ( old_self_heat_capacity * Convert.ToDouble( this.temperature ) - heat_capacity_self_to_sharer * Convert.ToDouble( this.temperature_archived ) + heat_capacity_sharer_to_self * Convert.ToDouble( sharer.temperature_archived ) ) / new_self_heat_capacity;
				}

				if ( new_sharer_heat_capacity > 0.0003 ) {
					sharer.temperature = ( old_sharer_heat_capacity * Convert.ToDouble( sharer.temperature ) - heat_capacity_sharer_to_self * Convert.ToDouble( sharer.temperature_archived ) + heat_capacity_self_to_sharer * Convert.ToDouble( this.temperature_archived ) ) / new_sharer_heat_capacity;

					if ( Math.Abs( old_sharer_heat_capacity ) > 0.0003 ) {
						
						if ( Math.Abs( new_sharer_heat_capacity / old_sharer_heat_capacity - 1 ) < 0.1 ) {
							this.temperature_share( sharer, 0.4 );
						}
					}
				}
			}
			unique_gases = cached_gases ^ sharer_gases;

			if ( unique_gases.len != 0 ) {
				this.garbage_collect( cached_gases - sharer_gases );
				sharer.garbage_collect( sharer_gases - cached_gases );
			}

			if ( Convert.ToDouble( temperature_delta ) > 393.41 || Math.Abs( moved_moles ) > 0.5199189782142639 ) {
				delta_pressure = this.temperature_archived * ( this.total_moles() + moved_moles ) - sharer.temperature_archived * ( sharer.total_moles() - moved_moles );
				return delta_pressure * 8.31 / this.volume;
			}
			return null;
		}

		// Function from file: gas_mixture.dm
		public dynamic check_turf( dynamic model = null, int? atmos_adjacent_turfs = null ) {
			atmos_adjacent_turfs = atmos_adjacent_turfs ?? 4;

			GasMixture copied = null;

			copied = new GasMixture();
			copied.copy_from_turf( model );
			return this.compare( copied, 2, atmos_adjacent_turfs );
		}

		// Function from file: gas_mixture.dm
		public bool copy_from_turf( dynamic model = null ) {
			ByTable cached_gases = null;

			cached_gases = this.gases;
			this.temperature = model.temperature;

			if ( Lang13.Bool( model.oxygen ) ) {
				this.assert_gas( "o2" );
				cached_gases["o2"][1] = model.oxygen;
			}

			if ( model.nitrogen != 0 ) {
				this.assert_gas( "n2" );
				cached_gases["n2"][1] = model.nitrogen;
			}

			if ( model.toxins ) {
				this.assert_gas( "plasma" );
				cached_gases["plasma"][1] = model.toxins;
			}

			if ( model.carbon_dioxide ) {
				this.assert_gas( "co2" );
				cached_gases["co2"][1] = model.carbon_dioxide;
			}
			cached_gases.And( GlobalVars.hardcoded_gases );
			return true;
		}

		// Function from file: gas_mixture.dm
		public bool copy_from( GasMixture sample = null ) {
			ByTable cached_gases = null;
			ByTable sample_gases = null;
			dynamic id = null;

			cached_gases = this.gases;
			sample_gases = sample.gases;
			this.temperature = sample.temperature;

			foreach (dynamic _a in Lang13.Enumerate( sample_gases )) {
				id = _a;
				
				this.assert_gas( id );
				cached_gases[id][1] = sample_gases[id][1];
			}
			cached_gases.And( sample_gases );
			return true;
		}

		// Function from file: gas_mixture.dm
		public GasMixture copy(  ) {
			ByTable cached_gases = null;
			GasMixture copy = null;
			ByTable copy_gases = null;
			dynamic id = null;

			cached_gases = this.gases;
			copy = new GasMixture();
			copy_gases = copy.gases;
			copy.temperature = this.temperature;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases )) {
				id = _a;
				
				this.add_gas( id );
				copy_gases[id][1] = cached_gases[id][1];
			}
			return copy;
		}

		// Function from file: gas_mixture.dm
		public GasMixture remove_ratio( double? ratio = null ) {
			ByTable cached_gases = null;
			GasMixture removed = null;
			ByTable removed_gases = null;
			dynamic id = null;

			
			if ( ( ratio ??0) <= 0 ) {
				return null;
			}
			ratio = Num13.MinInt( ((int)( ratio ??0 )), 1 );
			cached_gases = this.gases;
			removed = new GasMixture();
			removed_gases = removed.gases;
			removed.temperature = this.temperature;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases )) {
				id = _a;
				
				removed.add_gas( id );
				removed_gases[id][1] = Num13.Round( Convert.ToDouble( cached_gases[id][1] * ratio ), 1.0000000116860974e-7 );
				cached_gases[id][1] -= removed_gases[id][1];
			}
			this.garbage_collect();
			return removed;
		}

		// Function from file: gas_mixture.dm
		public GasMixture remove( double amount = 0 ) {
			double sum = 0;
			ByTable cached_gases = null;
			GasMixture removed = null;
			ByTable removed_gases = null;
			dynamic id = null;

			sum = this.total_moles();
			amount = Num13.MinInt( ((int)( amount )), ((int)( sum )) );

			if ( amount <= 0 ) {
				return null;
			}
			cached_gases = this.gases;
			removed = new GasMixture();
			removed_gases = removed.gases;
			removed.temperature = this.temperature;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases )) {
				id = _a;
				
				removed.add_gas( id );
				removed_gases[id][1] = Num13.Round( Convert.ToDouble( cached_gases[id][1] / sum * amount ), 1.0000000116860974e-7 );
				cached_gases[id][1] -= removed_gases[id][1];
			}
			this.garbage_collect();
			return removed;
		}

		// Function from file: gas_mixture.dm
		public bool merge( dynamic giver = null ) {
			double self_heat_capacity = 0;
			double giver_heat_capacity = 0;
			double combined_heat_capacity = 0;
			ByTable cached_gases = null;
			ByTable giver_gases = null;
			dynamic giver_id = null;

			
			if ( !Lang13.Bool( giver ) ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( this.temperature - giver.temperature ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();
				giver_heat_capacity = ((GasMixture)giver).heat_capacity();
				combined_heat_capacity = giver_heat_capacity + self_heat_capacity;

				if ( combined_heat_capacity != 0 ) {
					this.temperature = ( giver.temperature * giver_heat_capacity + this.temperature * self_heat_capacity ) / combined_heat_capacity;
				}
			}
			cached_gases = this.gases;
			giver_gases = giver.gases;

			foreach (dynamic _a in Lang13.Enumerate( giver_gases )) {
				giver_id = _a;
				
				this.assert_gas( giver_id );
				cached_gases[giver_id][1] += giver_gases[giver_id][1];
			}
			return true;
		}

		// Function from file: gas_mixture.dm
		public bool archive(  ) {
			ByTable cached_gases = null;
			dynamic id = null;

			cached_gases = this.gases;
			this.temperature_archived = this.temperature;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases )) {
				id = _a;
				
				cached_gases[id][2] = cached_gases[id][1];
			}
			return true;
		}

		// Function from file: gas_mixture.dm
		public dynamic get_true_breath_pressure( dynamic partial_pressure = null ) {
			return partial_pressure * 0.5 / ( this.temperature * 8.31 );
		}

		// Function from file: gas_mixture.dm
		public dynamic get_breath_partial_pressure( dynamic gas_pressure = null ) {
			return gas_pressure * this.temperature * 8.31 / 0.5;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "compare" )]
		public void _internal_compare( dynamic sample = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "temperature turf share" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_temperature_turf_share( dynamic sharer = null, dynamic conduction_coefficient = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "temperature mimic" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_temperature_mimic( dynamic model = null, dynamic conduction_coefficient = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "temperature share" )]
		public void _internal_temperature_share( dynamic sharer = null, dynamic conduction_coefficient = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "check turf" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_check_turf( dynamic model = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "mimic" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_mimic( dynamic model = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "share" )]
		public void _internal_share( dynamic sharer = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "copy from turf" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_copy_from_turf( dynamic model = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "copy from" )]
		public void _internal_copy_from( dynamic sample = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "copy" )]
		public void _internal_copy(  ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "remove ratio" )]
		public void _internal_remove_ratio( dynamic ratio = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "remove" )]
		public void _internal_remove( dynamic amount = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "merge" )]
		public void _internal_merge( dynamic giver = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "archive" )]
		public void _internal_archive(  ) {
			return;
		}

		// Function from file: gas_mixture.dm
		public double fire(  ) {
			double energy_released = 0;
			double old_heat_capacity = 0;
			ByTable cached_gases = null;
			bool burned_fuel = false;
			dynamic plasma_burn_rate = null;
			double oxygen_burn_rate = 0;
			dynamic temperature_scale = null;
			double new_heat_capacity = 0;

			energy_released = 0;
			old_heat_capacity = this.heat_capacity();
			cached_gases = this.gases;

			if ( Lang13.Bool( cached_gases["v_fuel"] ) && Lang13.Bool( cached_gases["v_fuel"][1] ) ) {
				
				if ( !Lang13.Bool( cached_gases["o2"] ) ) {
					burned_fuel = false;
				} else if ( Convert.ToDouble( cached_gases["o2"][1] ) < Convert.ToDouble( cached_gases["v_fuel"][1] ) ) {
					burned_fuel = Lang13.Bool( cached_gases["o2"][1] );
					cached_gases["v_fuel"][1] -= burned_fuel ?1:0;
					cached_gases["o2"][1] = 0;
				} else {
					burned_fuel = Lang13.Bool( cached_gases["v_fuel"][1] );
					cached_gases["o2"][1] -= cached_gases["v_fuel"][1];
				}

				if ( burned_fuel ) {
					energy_released += ( burned_fuel ?1:0) * 500000;
					this.assert_gas( "co2" );
					cached_gases["co2"][1] += burned_fuel ?1:0;
					this.fuel_burnt += burned_fuel ?1:0;
				}
			}

			if ( Lang13.Bool( cached_gases["plasma"] ) && Convert.ToDouble( cached_gases["plasma"][1] ) > 0.0003 ) {
				plasma_burn_rate = 0;
				oxygen_burn_rate = 0;

				if ( Convert.ToDouble( this.temperature ) > 1643.1500244140625 ) {
					temperature_scale = 1;
				} else {
					temperature_scale = ( this.temperature - 100 + 273.41 ) / 1816.3;
				}

				if ( Convert.ToDouble( temperature_scale ) > 0 ) {
					this.assert_gas( "o2" );
					oxygen_burn_rate = 131 - Convert.ToDouble( temperature_scale );

					if ( Convert.ToDouble( cached_gases["o2"][1] ) > Convert.ToDouble( cached_gases["plasma"][1] * 10 ) ) {
						plasma_burn_rate = cached_gases["plasma"][1] * temperature_scale / 8;
					} else {
						plasma_burn_rate = temperature_scale * ( cached_gases["o2"][1] / 10 ) / 8;
					}

					if ( Convert.ToDouble( plasma_burn_rate ) > 0.0003 ) {
						this.assert_gas( "co2" );
						cached_gases["plasma"][1] = Num13.Round( Convert.ToDouble( cached_gases["plasma"][1] - plasma_burn_rate ), 1.0000000116860974e-7 );
						cached_gases["o2"][1] = Num13.Round( Convert.ToDouble( cached_gases["o2"][1] - plasma_burn_rate * oxygen_burn_rate ), 1.0000000116860974e-7 );
						cached_gases["co2"][1] += plasma_burn_rate;
						energy_released += Convert.ToDouble( plasma_burn_rate * 3000000 );
						this.fuel_burnt += Convert.ToDouble( plasma_burn_rate * ( oxygen_burn_rate + 1 ) );
						this.garbage_collect();
					}
				}
			}

			if ( energy_released > 0 ) {
				new_heat_capacity = this.heat_capacity();

				if ( new_heat_capacity > 0.0003 ) {
					this.temperature = ( this.temperature * old_heat_capacity + energy_released ) / new_heat_capacity;
				}
			}
			return this.fuel_burnt;
		}

		// Function from file: gas_mixture.dm
		public bool react( dynamic dump_location = null ) {
			ByTable cached_gases = null;
			bool reacting = false;
			int reaction_rate = 0;

			cached_gases = this.gases;
			reacting = false;

			if ( Convert.ToDouble( this.temperature ) < 2.7 ) {
				this.temperature = 2.7;
			}

			if ( Lang13.Bool( cached_gases["agent_b"] ) && Convert.ToDouble( this.temperature ) > 900 && Lang13.Bool( cached_gases["plasma"] ) && Lang13.Bool( cached_gases["co2"] ) ) {
				
				if ( Convert.ToDouble( cached_gases["plasma"][1] ) > 0.0003 && Convert.ToDouble( cached_gases["co2"][1] ) > 0.0003 ) {
					reaction_rate = Num13.MinInt( Convert.ToInt32( cached_gases["co2"][1] * 0.75 ), Convert.ToInt32( cached_gases["plasma"][1] * 0.25 ), Convert.ToInt32( cached_gases["agent_b"][1] * 0.05 ) );
					cached_gases["co2"][1] -= reaction_rate;
					this.assert_gas( "o2" );
					cached_gases["o2"][1] += reaction_rate;
					cached_gases["agent_b"][1] -= reaction_rate * 0.05;
					this.temperature -= reaction_rate * 20000 / this.heat_capacity();
					this.garbage_collect();
					reacting = true;
				}
			}
			this.fuel_burnt = 0;

			if ( Convert.ToDouble( this.temperature ) > 373.41 ) {
				
				if ( this.fire() != 0 ) {
					reacting = true;
				}
			}
			return reacting;
		}

		// Function from file: gas_mixture.dm
		public dynamic thermal_energy(  ) {
			return this.temperature * this.heat_capacity();
		}

		// Function from file: gas_mixture.dm
		public int return_volume(  ) {
			return Num13.MaxInt( 0, ((int)( this.volume ??0 )) );
		}

		// Function from file: gas_mixture.dm
		public dynamic return_temperature(  ) {
			return this.temperature;
		}

		// Function from file: gas_mixture.dm
		public double return_pressure(  ) {
			
			if ( ( this.volume ??0) > 0 ) {
				return this.total_moles() * Convert.ToDouble( this.temperature ) * 8.31 / ( this.volume ??0);
			}
			return 0;
		}

		// Function from file: gas_mixture.dm
		public double total_moles(  ) {
			double _default = 0;

			ByTable cached_gases = null;
			dynamic id = null;

			cached_gases = this.gases;
			_default = 0;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases )) {
				id = _a;
				
				_default += Convert.ToDouble( cached_gases[id][1] );
			}
			return _default;
		}

		// Function from file: gas_mixture.dm
		public double heat_capacity_archived(  ) {
			double _default = 0;

			ByTable cached_gases = null;
			dynamic id = null;

			cached_gases = this.gases;
			_default = 0;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases )) {
				id = _a;
				
				_default += Convert.ToDouble( cached_gases[id][2] * cached_gases[id][3][1] );
			}
			return _default;
		}

		// Function from file: gas_mixture.dm
		public double heat_capacity(  ) {
			double _default = 0;

			ByTable cached_gases = null;
			dynamic id = null;

			cached_gases = this.gases;
			_default = 0;

			foreach (dynamic _a in Lang13.Enumerate( cached_gases )) {
				id = _a;
				
				_default += Convert.ToDouble( cached_gases[id][1] * cached_gases[id][3][1] );
			}
			return _default;
		}

		// Function from file: gas_mixture.dm
		public void garbage_collect( ByTable tocheck = null ) {
			ByTable cached_gases = null;
			dynamic id = null;

			cached_gases = this.gases;

			foreach (dynamic _a in Lang13.Enumerate( tocheck ?? cached_gases )) {
				id = _a;
				

				if ( Convert.ToDouble( cached_gases[id][1] ) <= 0 && Convert.ToDouble( cached_gases[id][2] ) <= 0 ) {
					cached_gases.Remove( id );
				}
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public void add_gases( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			dynamic id = null;

			
			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				id = _a;
				
				this.add_gas( id );
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public void add_gas( dynamic gas_id = null ) {
			this.gases[gas_id] = GlobalFuncs.gaslist( gas_id );
			return;
		}

		// Function from file: gas_mixture.dm
		public void assert_gases( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			dynamic id = null;

			
			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				id = _a;
				
				this.assert_gas( id );
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public void assert_gas( dynamic gas_id = null ) {
			ByTable cached_gases = null;

			cached_gases = this.gases;

			if ( Lang13.Bool( cached_gases[gas_id] ) ) {
				return;
			}
			cached_gases[gas_id] = GlobalFuncs.gaslist( gas_id );
			return;
		}

	}

}