// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Autolathe : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Autolathe);
		}

		// Function from file: autolathe.dm
		public Wires_Autolathe ( Obj_Machinery_Autolathe holder = null ) : base( holder ) {
			this.wires = new ByTable(new object [] { "hack", "disable", "shock", "zap" });
			this.add_duds( 6 );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: autolathe.dm
		public override void on_cut( dynamic wire = null, int? mend = null ) {
			Ent_Static A = null;

			A = this.holder;

			dynamic _a = wire; // Was a switch-case, sorry for the mess.
			if ( _a=="hack" ) {
				((dynamic)A).adjust_hacked( !Lang13.Bool( mend ) );
			} else if ( _a=="hack" ) {
				((dynamic)A).shocked = !Lang13.Bool( mend );
			} else if ( _a=="disable" ) {
				((dynamic)A).disabled = !Lang13.Bool( mend );
			} else if ( _a=="zap" ) {
				((dynamic)A).shock( Task13.User, 50 );
			}
			return;
		}

		// Function from file: autolathe.dm
		public override void on_pulse( string wire = null ) {
			Ent_Static A = null;

			A = this.holder;

			switch ((string)( wire )) {
				case "hack":
					((dynamic)A).adjust_hacked( !Lang13.Bool( ((dynamic)A).hacked ) );
					GlobalFuncs.addtimer( A, "reset", 60, GlobalVars.FALSE, wire );
					break;
				case "shock":
					((dynamic)A).shocked = !Lang13.Bool( ((dynamic)A).shocked );
					GlobalFuncs.addtimer( A, "reset", 60, GlobalVars.FALSE, wire );
					break;
				case "disable":
					((dynamic)A).disabled = !Lang13.Bool( ((dynamic)A).disabled );
					GlobalFuncs.addtimer( A, "reset", 60, GlobalVars.FALSE, wire );
					break;
			}
			return;
		}

		// Function from file: autolathe.dm
		public override ByTable get_status(  ) {
			Obj A = null;
			ByTable status = null;

			A = this.holder;
			status = new ByTable();
			status.Add( "The red light is " + ( Lang13.Bool( ((dynamic)A).disabled ) ? "on" : "off" ) + "." );
			status.Add( "The blue light is " + ( Lang13.Bool( ((dynamic)A).hacked ) ? "on" : "off" ) + "." );
			return status;
		}

		// Function from file: autolathe.dm
		public override int? interactable( dynamic user = null ) {
			Obj A = null;

			A = this.holder;

			if ( Lang13.Bool( ((dynamic)A).panel_open ) ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

	}

}