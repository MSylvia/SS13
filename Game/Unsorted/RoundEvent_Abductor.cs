// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_Abductor : RoundEvent {

		// Function from file: abductor.dm
		public bool makeAbductorTeam(  ) {
			ByTable candidates = null;
			int? number = null;
			dynamic temp = null;
			dynamic agent_mind = null;
			dynamic scientist_mind = null;
			Mob_Living_Carbon_Human agent = null;
			Mob_Living_Carbon_Human scientist = null;

			candidates = GlobalFuncs.pollCandidates( "Do you wish to be considered for an Abductor Team?", "abductor", null, "abductor" );

			if ( candidates.len >= 2 ) {
				number = ( GlobalVars.ticker.mode.abductor_teams ??0) + 1;

				if ( GlobalVars.ticker.mode.config_tag == "abduction" ) {
					temp = GlobalVars.ticker.mode;
				} else {
					temp = new GameMode_Abduction();
				}
				agent_mind = Rand13.PickFromTable( candidates );
				candidates.Remove( agent_mind );
				scientist_mind = Rand13.PickFromTable( candidates );
				agent = GlobalFuncs.makeBody( agent_mind );
				scientist = GlobalFuncs.makeBody( scientist_mind );
				agent_mind = agent.mind;
				scientist_mind = scientist.mind;
				temp.scientists.len = number ??0;
				temp.agents.len = number ??0;
				temp.abductors.len = ( number ??0) * 2;
				temp.team_objectives.len = number ??0;
				temp.team_names.len = number ??0;
				temp.scientists[number] = scientist_mind;
				temp.agents[number] = agent_mind;
				temp.abductors.Or( new ByTable(new object [] { agent_mind, scientist_mind }) );
				((GameMode_Abduction)temp).make_abductor_team( number, agent_mind, scientist_mind );
				((GameMode_Abduction)temp).post_setup_team( number );
				GlobalVars.ticker.mode.abductor_teams++;

				if ( GlobalVars.ticker.mode.config_tag != "abduction" ) {
					GlobalVars.ticker.mode.abductors.Or( temp.abductors );
				}
				this.processing = true;
				return true;
			} else {
				return false;
			}
		}

		// Function from file: abductor.dm
		public override bool start(  ) {
			this.processing = false;

			if ( !this.makeAbductorTeam() ) {
				GlobalFuncs.message_admins( "Abductor event failed to find players. Retrying in 30s." );
				Task13.Schedule( 300, (Task13.Closure)(() => {
					this.makeAbductorTeam();
					return;
				}));
			}
			return false;
		}

	}

}