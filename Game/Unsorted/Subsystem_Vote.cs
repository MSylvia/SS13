// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Vote : Subsystem {

		public string initiator = null;
		public int? started_time = null;
		public int time_remaining = 0;
		public string mode = null;
		public string question = null;
		public ByTable choices = new ByTable();
		public ByTable voted = new ByTable();
		public ByTable voting = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Vote";
			this.can_fire = true;
			this.wait = 10;
			this.priority = -1;
		}

		// Function from file: voting.dm
		public Subsystem_Vote (  ) {
			
			if ( GlobalVars.SSvote != this ) {
				
				if ( GlobalVars.SSvote is Subsystem_Vote ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSvote );
				}
				GlobalVars.SSvote = this;
			}
			return;
		}

		// Function from file: voting.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( !( Task13.User != null ) || !( Task13.User.client != null ) ) {
				return null;
			}

			dynamic _a = href_list["vote"]; // Was a switch-case, sorry for the mess.
			if ( _a=="close" ) {
				this.voting.Remove( Task13.User.client );
				Interface13.Browse( Task13.User, null, "window=vote" );
				return null;
			} else if ( _a=="cancel" ) {
				
				if ( Task13.User.client.holder != null ) {
					this.reset();
				}
			} else if ( _a=="toggle_restart" ) {
				
				if ( Task13.User.client.holder != null ) {
					GlobalVars.config.allow_vote_restart = !GlobalVars.config.allow_vote_restart;
				}
			} else if ( _a=="toggle_gamemode" ) {
				
				if ( Task13.User.client.holder != null ) {
					GlobalVars.config.allow_vote_mode = !GlobalVars.config.allow_vote_mode;
				}
			} else if ( _a=="restart" ) {
				
				if ( GlobalVars.config.allow_vote_restart || Task13.User.client.holder != null ) {
					this.initiate_vote( "restart", Task13.User.key );
				}
			} else if ( _a=="gamemode" ) {
				
				if ( GlobalVars.config.allow_vote_mode || Task13.User.client.holder != null ) {
					this.initiate_vote( "gamemode", Task13.User.key );
				}
			} else if ( _a=="custom" ) {
				
				if ( Task13.User.client.holder != null ) {
					this.initiate_vote( "custom", Task13.User.key );
				}
			} else {
				this.submit_vote( Num13.Floor( String13.ParseNumber( href_list["vote"] ) ??0 ) );
			}
			Task13.User.vote();
			return null;
		}

		// Function from file: voting.dm
		[VerbInfo( name: "interface" )]
		public dynamic f_interface( dynamic C = null ) {
			dynamic _default = null;

			bool admin = false;
			bool trialmin = false;
			int? i = null;
			bool votes = false;

			
			if ( !Lang13.Bool( C ) ) {
				return _default;
			}
			admin = false;
			trialmin = false;

			if ( Lang13.Bool( C.holder ) ) {
				admin = true;

				if ( GlobalFuncs.check_rights_for( C, 2 ) ) {
					trialmin = true;
				}
			}
			this.voting.Or( C );

			if ( Lang13.Bool( this.mode ) ) {
				
				if ( Lang13.Bool( this.question ) ) {
					_default += "<h2>Vote: '" + this.question + "'</h2>";
				} else {
					_default += "<h2>Vote: " + GlobalFuncs.capitalize( this.mode ) + "</h2>";
				}
				_default += "Time Left: " + this.time_remaining + " s<hr><ul>";
				i = null;
				i = 1;

				while (( i ??0) <= this.choices.len) {
					votes = Lang13.Bool( this.choices[this.choices[i]] );

					if ( !votes ) {
						votes = false;
					}
					_default += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";vote=" ).item( i ).str( "'>" ).item( this.choices[i] ).str( "</a> (" ).item( votes ).str( " votes)</li>" ).ToString();
					i++;
				}
				_default += "</ul><hr>";

				if ( admin ) {
					_default += new Txt( "(<a href='?src=" ).Ref( this ).str( ";vote=cancel'>Cancel Vote</a>) " ).ToString();
				}
			} else {
				_default += "<h2>Start a vote:</h2><hr><ul><li>";

				if ( trialmin || GlobalVars.config.allow_vote_restart ) {
					_default += new Txt( "<a href='?src=" ).Ref( this ).str( ";vote=restart'>Restart</a>" ).ToString();
				} else {
					_default += "<font color='grey'>Restart (Disallowed)</font>";
				}

				if ( trialmin ) {
					_default += new Txt( "	(<a href='?src=" ).Ref( this ).str( ";vote=toggle_restart'>" ).item( ( GlobalVars.config.allow_vote_restart ? "Allowed" : "Disallowed" ) ).str( "</a>)" ).ToString();
				}
				_default += "</li><li>";

				if ( trialmin || GlobalVars.config.allow_vote_mode ) {
					_default += new Txt( "<a href='?src=" ).Ref( this ).str( ";vote=gamemode'>GameMode</a>" ).ToString();
				} else {
					_default += "<font color='grey'>GameMode (Disallowed)</font>";
				}

				if ( trialmin ) {
					_default += new Txt( "	(<a href='?src=" ).Ref( this ).str( ";vote=toggle_gamemode'>" ).item( ( GlobalVars.config.allow_vote_mode ? "Allowed" : "Disallowed" ) ).str( "</a>)" ).ToString();
				}
				_default += "</li>";

				if ( trialmin ) {
					_default += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";vote=custom'>Custom</a></li>" ).ToString();
				}
				_default += "</ul><hr>";
			}
			_default += new Txt( "<a href='?src=" ).Ref( this ).str( ";vote=close' style='position:absolute;right:50px'>Close</a>" ).ToString();
			return _default;
		}

		// Function from file: voting.dm
		public bool initiate_vote( string vote_type = null, string initiator_key = null ) {
			double next_allowed_time = 0;
			int? i = null;
			string option = null;
			string text = null;

			
			if ( !Lang13.Bool( this.mode ) ) {
				
				if ( this.started_time != null ) {
					next_allowed_time = ( this.started_time ??0) + ( GlobalVars.config.vote_delay ??0);

					if ( next_allowed_time > Game13.time ) {
						return false;
					}
				}
				this.reset();

				switch ((string)( vote_type )) {
					case "restart":
						this.choices.Add( "Restart Round", "Continue Playing" );
						break;
					case "gamemode":
						this.choices.Add( GlobalVars.config.votable_modes );
						break;
					case "custom":
						this.question = GlobalFuncs.stripped_input( Task13.User, "What is the vote for?" );

						if ( !Lang13.Bool( this.question ) ) {
							return false;
						}
						i = null;
						i = 1;

						while (( i ??0) <= 10) {
							option = GlobalFuncs.capitalize( GlobalFuncs.stripped_input( Task13.User, "Please enter an option or hit cancel to finish" ) );

							if ( !Lang13.Bool( option ) || Lang13.Bool( this.mode ) || !( Task13.User.client != null ) ) {
								break;
							}
							this.choices.Add( option );
							i++;
						}
						break;
					default:
						return false;
						break;
				}
				this.mode = vote_type;
				this.initiator = initiator_key;
				this.started_time = Game13.time;
				text = "" + GlobalFuncs.capitalize( this.mode ) + " vote started by " + this.initiator + ".";

				if ( this.mode == "custom" ) {
					text += "\n" + this.question;
				}
				GlobalFuncs.log_vote( text );
				Game13.WriteMsg( new Txt( "\n<font color='purple'><b>" ).item( text ).str( "</b>\nType <b>vote</b> or click <a href='?src=" ).Ref( this ).str( "'>here</a> to place your votes.\nYou have " ).item( ( GlobalVars.config.vote_period ??0) / 10 ).str( " seconds to vote.</font>" ).ToString() );
				this.time_remaining = Num13.Floor( ( GlobalVars.config.vote_period ??0) / 10 );
				return true;
			}
			return false;
		}

		// Function from file: voting.dm
		public int submit_vote( int vote = 0 ) {
			
			if ( Lang13.Bool( this.mode ) ) {
				
				if ( GlobalVars.config.vote_no_dead && Task13.User.stat == 2 && !( Task13.User.client.holder != null ) ) {
					return 0;
				}

				if ( !this.voted.Contains( Task13.User.ckey ) ) {
					
					if ( vote != 0 && 1 <= vote && vote <= this.choices.len ) {
						this.voted.Add( Task13.User.ckey );
						this.choices[this.choices[vote]]++;
						return vote;
					}
				}
			}
			return 0;
		}

		// Function from file: voting.dm
		public dynamic result(  ) {
			dynamic _default = null;

			bool restart = false;
			bool active_admins = false;
			dynamic C = null;

			_default = this.announce_result();
			restart = false;

			if ( Lang13.Bool( _default ) ) {
				
				switch ((string)( this.mode )) {
					case "restart":
						
						if ( _default == "Restart Round" ) {
							restart = true;
						}
						break;
					case "gamemode":
						
						if ( GlobalVars.master_mode != _default ) {
							Game13.save_mode( _default );

							if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
								restart = true;
							} else {
								GlobalVars.master_mode = _default;
							}
						}
						break;
				}
			}

			if ( restart ) {
				active_admins = false;

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.admins )) {
					C = _b;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
						continue;
					}

					if ( !( ((Client)C).is_afk() != 0 ) && GlobalFuncs.check_rights_for( C, 16 ) ) {
						active_admins = true;
						break;
					}
				}

				if ( !active_admins ) {
					Game13.Reboot( "Restart vote successful.", "end_error", "restart vote" );
				} else {
					Game13.WriteMsg( "<span style='boldannounce'>Notice:Restart vote will not restart the server automatically because there are active admins on.</span>" );
					GlobalFuncs.message_admins( "A restart vote has passed, but there are active admins on with +server, so it has been canceled. If you wish, you may restart the server." );
				}
			}
			return _default;
		}

		// Function from file: voting.dm
		public dynamic announce_result(  ) {
			dynamic _default = null;

			ByTable winners = null;
			string text = null;
			int? i = null;
			bool votes = false;
			dynamic option = null;

			winners = this.get_result();

			if ( winners.len > 0 ) {
				
				if ( Lang13.Bool( this.question ) ) {
					text += "<b>" + this.question + "</b>";
				} else {
					text += "<b>" + GlobalFuncs.capitalize( this.mode ) + " Vote</b>";
				}
				i = null;
				i = 1;

				while (( i ??0) <= this.choices.len) {
					votes = Lang13.Bool( this.choices[this.choices[i]] );

					if ( !votes ) {
						votes = false;
					}
					text += "\n<b>" + this.choices[i] + ":</b> " + votes;
					i++;
				}

				if ( this.mode != "custom" ) {
					
					if ( winners.len > 1 ) {
						text = "\n<b>Vote Tied Between:</b>";

						foreach (dynamic _a in Lang13.Enumerate( winners )) {
							option = _a;
							
							text += "\n	" + option;
						}
					}
					_default = Rand13.PickFromTable( winners );
					text += "\n<b>Vote Result: " + _default + "</b>";
				} else {
					text += "\n<b>Did not vote:</b> " + ( GlobalVars.clients.len - this.voted.len );
				}
			} else {
				text += "<b>Vote Result: Inconclusive - No Votes!</b>";
			}
			GlobalFuncs.log_vote( text );
			Game13.WriteMsg( "\n<font color='purple'>" + text + "</font>" );
			return _default;
		}

		// Function from file: voting.dm
		public ByTable get_result(  ) {
			ByTable _default = null;

			bool greatest_votes = false;
			double total_votes = 0;
			dynamic option = null;
			bool votes = false;
			double non_voters = 0;
			dynamic option2 = null;

			greatest_votes = false;
			total_votes = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.choices )) {
				option = _a;
				
				votes = Lang13.Bool( this.choices[option] );
				total_votes += votes ?1:0;

				if ( ( votes ?1:0) > ( greatest_votes ?1:0) ) {
					greatest_votes = votes;
				}
			}

			if ( !GlobalVars.config.vote_no_default && this.choices.len != 0 ) {
				non_voters = GlobalVars.clients.len - total_votes;

				if ( non_voters > 0 ) {
					
					if ( this.mode == "restart" ) {
						this.choices["Continue Playing"] += non_voters;

						if ( Convert.ToDouble( this.choices["Continue Playing"] ) >= ( greatest_votes ?1:0) ) {
							greatest_votes = Lang13.Bool( this.choices["Continue Playing"] );
						}
					} else if ( this.mode == "gamemode" ) {
						
						if ( this.choices.Contains( GlobalVars.master_mode ) ) {
							this.choices[GlobalVars.master_mode] += non_voters;

							if ( Convert.ToDouble( this.choices[GlobalVars.master_mode] ) >= ( greatest_votes ?1:0) ) {
								greatest_votes = Lang13.Bool( this.choices[GlobalVars.master_mode] );
							}
						}
					}
				}
			}
			_default = new ByTable();

			if ( greatest_votes ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.choices )) {
					option2 = _b;
					

					if ( Lang13.Bool( this.choices[option2] ) == greatest_votes ) {
						_default.Add( option2 );
					}
				}
			}
			return _default;
		}

		// Function from file: voting.dm
		public void reset(  ) {
			this.initiator = null;
			this.time_remaining = 0;
			this.mode = null;
			this.question = null;
			this.choices.Cut();
			this.voted.Cut();
			this.voting.Cut();
			return;
		}

		// Function from file: voting.dm
		public override void fire(  ) {
			dynamic C = null;
			Browser client_popup = null;
			dynamic C2 = null;

			
			if ( Lang13.Bool( this.mode ) ) {
				this.time_remaining = Num13.Floor( ( ( this.started_time ??0) + ( GlobalVars.config.vote_period ??0) - Game13.time ) / 10 );

				if ( this.time_remaining < 0 ) {
					this.result();

					foreach (dynamic _a in Lang13.Enumerate( this.voting )) {
						C = _a;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
							continue;
						}
						Interface13.Browse( C, null, "window=vote;can_close=0" );
					}
					this.reset();
				} else {
					client_popup = null;

					foreach (dynamic _b in Lang13.Enumerate( this.voting )) {
						C2 = _b;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
							continue;
						}
						client_popup = new Browser( C2, "vote", "Voting Panel" );
						client_popup.set_window_options( "can_close=0" );
						client_popup.set_content( this.f_interface( C2 ) );
						client_popup.open( false );
					}
				}
			}
			return;
		}

	}

}