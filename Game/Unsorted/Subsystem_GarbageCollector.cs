// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_GarbageCollector : Subsystem {

		public int collection_timeout = 300;
		public bool max_run_time = true;
		public int delslasttick = 0;
		public int gcedlasttick = 0;
		public int totaldels = 0;
		public int totalgcs = 0;
		public ByTable queue = new ByTable();
		public ByTable tobequeued = new ByTable();
		public ByTable didntgc = new ByTable();
		public ByTable noqdelhint = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Garbage";
			this.priority = -1;
			this.wait = 5;
			this.dynamic_wait = true;
			this.dwait_upper = 50;
			this.dwait_delta = 10;
			this.dwait_buffer = 0;
			this.display = 2;
			this.can_fire = true;
		}

		// Function from file: garbage.dm
		public Subsystem_GarbageCollector (  ) {
			
			if ( GlobalVars.SSgarbage != this ) {
				
				if ( GlobalVars.SSgarbage is Subsystem_GarbageCollector ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSgarbage );
				}
				GlobalVars.SSgarbage = this;
			}
			return;
		}

		// Function from file: garbage.dm
		public void HardQueue( dynamic A = null ) {
			
			if ( !( A is Game_Data ) || !( A.gc_destroyed == null ) ) {
				return;
			}
			A.gc_destroyed = Game13.time;
			this.queue.Remove( A );
			this.queue[A] = Game13.time;
			return;
		}

		// Function from file: garbage.dm
		public void Queue( Game_Data A = null ) {
			int gctime = 0;
			string refid = null;

			
			if ( !( A is Game_Data ) || !( A.gc_destroyed == null ) ) {
				return;
			}
			gctime = Game13.time;
			refid = new Txt().Ref( A ).ToString();
			A.gc_destroyed = gctime;

			if ( Lang13.Bool( this.queue[refid] ) ) {
				this.queue.Remove( new Txt().Ref( A ).ToString() );
			}
			this.queue[refid] = gctime;
			return;
		}

		// Function from file: garbage.dm
		public void QueueForQueuing( dynamic A = null ) {
			
			if ( A is Game_Data && A.gc_destroyed == null ) {
				this.tobequeued.Add( A );
			}
			return;
		}

		// Function from file: garbage.dm
		public void HandleQueue( int time_to_stop = 0 ) {
			int? time_to_kill = null;
			dynamic refID = null;
			int? GCd_at_time = null;
			dynamic A = null;

			this.delslasttick = 0;
			this.gcedlasttick = 0;
			time_to_kill = Game13.time - this.collection_timeout;

			while (this.queue.len != 0 && Game13.timeofday < time_to_stop) {
				refID = this.queue[1];

				if ( !Lang13.Bool( refID ) ) {
					this.queue.Cut( 1, 2 );
					continue;
				}
				GCd_at_time = Lang13.IntNullable( this.queue[refID] );

				if ( ( GCd_at_time ??0) > ( time_to_kill ??0) ) {
					break;
				}
				A = null;

				if ( !( refID is string ) ) {
					Lang13.Delete( A );
					A = null;
				} else {
					A = Lang13.FindObj( refID );

					if ( Lang13.Bool( A ) && A.gc_destroyed == GCd_at_time ) {
						GlobalFuncs.testing( new Txt( "GC: -- " ).Ref( A ).str( " | " ).item( A.type ).str( " was unable to be GC'd and was deleted --" ).ToString() );
						this.didntgc["" + A.type]++;
						Lang13.Delete( A );
						A = null;
						this.delslasttick++;
						this.totaldels++;
					} else {
						this.gcedlasttick++;
						this.totalgcs++;
					}
				}
				this.queue.Cut( 1, 2 );
			}
			return;
		}

		// Function from file: garbage.dm
		public void HandleToBeQueued( int time_to_stop = 0 ) {
			Game_Data _ref = null;

			
			while (this.tobequeued.len != 0 && Game13.timeofday < time_to_stop) {
				_ref = this.tobequeued[1];
				this.Queue( _ref );
				this.tobequeued.Cut( 1, 2 );
			}
			return;
		}

		// Function from file: garbage.dm
		public override void fire(  ) {
			int time_to_stop = 0;

			time_to_stop = Game13.timeofday + ( this.max_run_time ?1:0);
			this.HandleToBeQueued( time_to_stop );
			this.HandleQueue( time_to_stop );
			return;
		}

		// Function from file: garbage.dm
		public override void stat_entry( string msg = null ) {
			msg += "Q:" + this.queue.len + "|D:" + this.delslasttick + "|G:" + this.gcedlasttick + "|";
			msg += "GR:";

			if ( !( this.delslasttick + this.gcedlasttick != 0 ) ) {
				msg += "n/a|";
			} else {
				msg += "" + Num13.Round( this.gcedlasttick / ( this.delslasttick + this.gcedlasttick ) * 100, 0.01 ) + "%|";
			}
			msg += "TD:" + this.totaldels + "|TG:" + this.totalgcs + "|";

			if ( !( this.totaldels + this.totalgcs != 0 ) ) {
				msg += "n/a|";
			} else {
				msg += "TGR:" + Num13.Round( this.totalgcs / ( this.totaldels + this.totalgcs ) * 100, 0.01 ) + "%";
			}
			base.stat_entry( msg );
			return;
		}

	}

}