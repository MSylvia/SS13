// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Hud : Game_Data {

		public Mob mymob = null;
		public bool hud_shown = true;
		public int? hud_version = 1;
		public bool inventory_shown = true;
		public bool show_intent_icons = false;
		public bool hotkey_ui_hidden = false;
		public Obj_Screen_Ling_Chems lingchemdisplay = null;
		public Obj_Screen_Ling_Sting lingstingdisplay = null;
		public Obj_Screen blobpwrdisplay = null;
		public Obj_Screen_Alien_PlasmaDisplay alien_plasma_display = null;
		public Obj_Screen_DeityPowerDisplay deity_power_display = null;
		public Obj_Screen_DeityFollowerDisplay deity_follower_display = null;
		public Obj_Screen_Alien_Nightvision nightvisionicon = null;
		public Obj_Screen_Inventory r_hand_hud_object = null;
		public Obj_Screen_Inventory l_hand_hud_object = null;
		public Obj_Screen action_intent = null;
		public Obj_Screen_ZoneSel zone_select = null;
		public Obj_Screen_Pull pull_icon = null;
		public Obj_Screen_ThrowCatch throw_icon = null;
		public Obj_Screen_Robot_Store module_store_icon = null;
		public ByTable static_inventory = new ByTable();
		public ByTable toggleable_inventory = new ByTable();
		public ByTable hotkeybuttons = new ByTable();
		public ByTable infodisplay = new ByTable();
		public ByTable screenoverlays = new ByTable();
		public Obj_Screen_Movable_ActionButton_HideToggle hide_actions_toggle = null;
		public bool action_buttons_hidden = false;
		public Obj_Screen_Healths healths = null;
		public Obj_Screen_Healthdoll healthdoll = null;
		public Obj_Screen_Internals internals = null;

		// Function from file: hud.dm
		public Hud ( Mob owner = null ) {
			this.mymob = owner;
			return;
		}

		// Function from file: hud.dm
		public override dynamic Destroy(  ) {
			dynamic thing = null;
			dynamic thing2 = null;
			dynamic thing3 = null;
			dynamic thing4 = null;
			dynamic thing5 = null;

			
			if ( this.mymob.hud_used == this ) {
				this.mymob.hud_used = null;
			}
			GlobalFuncs.qdel( this.hide_actions_toggle );
			this.hide_actions_toggle = null;
			GlobalFuncs.qdel( this.module_store_icon );
			this.module_store_icon = null;

			if ( this.static_inventory.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.static_inventory )) {
					thing = _a;
					
					GlobalFuncs.qdel( thing );
				}
				this.static_inventory.Cut();
			}
			this.r_hand_hud_object = null;
			this.l_hand_hud_object = null;
			this.action_intent = null;
			this.zone_select = null;
			this.pull_icon = null;

			if ( this.toggleable_inventory.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.toggleable_inventory )) {
					thing2 = _b;
					
					GlobalFuncs.qdel( thing2 );
				}
				this.toggleable_inventory.Cut();
			}

			if ( this.hotkeybuttons.len != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.hotkeybuttons )) {
					thing3 = _c;
					
					GlobalFuncs.qdel( thing3 );
				}
				this.hotkeybuttons.Cut();
			}
			this.throw_icon = null;

			if ( this.infodisplay.len != 0 ) {
				
				foreach (dynamic _d in Lang13.Enumerate( this.infodisplay )) {
					thing4 = _d;
					
					GlobalFuncs.qdel( thing4 );
				}
				this.infodisplay.Cut();
			}
			this.healths = null;
			this.healthdoll = null;
			this.internals = null;
			this.lingchemdisplay = null;
			this.lingstingdisplay = null;
			this.blobpwrdisplay = null;
			this.alien_plasma_display = null;
			this.deity_power_display = null;
			this.deity_follower_display = null;
			this.nightvisionicon = null;

			if ( this.screenoverlays.len != 0 ) {
				
				foreach (dynamic _e in Lang13.Enumerate( this.screenoverlays )) {
					thing5 = _e;
					
					GlobalFuncs.qdel( thing5 );
				}
				this.screenoverlays.Cut();
			}
			this.mymob = null;
			return base.Destroy();
		}

		// Function from file: robot.dm
		public void update_robot_modules_display(  ) {
			Mob r = null;
			int display_rows = 0;
			int x = 0;
			int y = 0;
			Ent_Dynamic A = null;
			Ent_Static A2 = null;

			
			if ( !( this.mymob is Mob_Living_Silicon_Robot ) ) {
				return;
			}
			r = this.mymob;

			if ( !( r.client != null ) ) {
				return;
			}

			if ( !Lang13.Bool( ((dynamic)r).module ) ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)r).shown_robot_modules ) && this.hud_shown ) {
				r.client.screen.Add( this.module_store_icon );

				if ( !Lang13.Bool( ((dynamic)r).module.modules ) ) {
					Task13.User.WriteMsg( "<span class='danger'>Selected module has no modules to select</span>" );
					return;
				}

				if ( !Lang13.Bool( ((dynamic)r).robot_modules_background ) ) {
					return;
				}
				display_rows = GlobalFuncs.Ceiling( Lang13.Length( ((Obj_Item_Weapon_RobotModule)((dynamic)r).module).get_inactive_modules() ) / 8 );
				((dynamic)r).robot_modules_background.screen_loc = "CENTER-4:16,SOUTH+1:7 to CENTER+3:16,SOUTH+" + display_rows + ":7";
				r.client.screen.Add( ((dynamic)r).robot_modules_background );
				x = -4;
				y = 1;

				foreach (dynamic _a in Lang13.Enumerate( ((Obj_Item_Weapon_RobotModule)((dynamic)r).module).get_inactive_modules(), typeof(Ent_Dynamic) )) {
					A = _a;
					
					r.client.screen.Add( A );

					if ( x < 0 ) {
						A.screen_loc = "CENTER" + x + ":16,SOUTH+" + y + ":7";
					} else {
						A.screen_loc = "CENTER+" + x + ":16,SOUTH+" + y + ":7";
					}
					A.layer = 20;
					x++;

					if ( x == 4 ) {
						x = -4;
						y++;
					}
				}
			} else {
				r.client.screen.Remove( this.module_store_icon );

				foreach (dynamic _b in Lang13.Enumerate( ((Obj_Item_Weapon_RobotModule)((dynamic)r).module).get_inactive_modules(), typeof(Ent_Static) )) {
					A2 = _b;
					
					r.client.screen.Remove( A2 );
				}
				((dynamic)r).shown_robot_modules = 0;
				r.client.screen.Remove( ((dynamic)r).robot_modules_background );
			}
			return;
		}

		// Function from file: robot.dm
		public void toggle_show_robot_modules(  ) {
			Mob r = null;

			
			if ( !( this.mymob is Mob_Living_Silicon_Robot ) ) {
				return;
			}
			r = this.mymob;
			((dynamic)r).shown_robot_modules = !Lang13.Bool( ((dynamic)r).shown_robot_modules );
			this.update_robot_modules_display();
			return;
		}

		// Function from file: hud.dm
		public virtual void persistant_inventory_update(  ) {
			return;
		}

		// Function from file: hud.dm
		public virtual void hidden_inventory_update(  ) {
			return;
		}

		// Function from file: hud.dm
		public virtual bool show_hud( int? version = null ) {
			version = version ?? 0;

			int? display_hud_version = null;

			
			if ( !( this.mymob is Mob ) ) {
				return false;
			}

			if ( !( this.mymob.client != null ) ) {
				return false;
			}
			this.mymob.client.screen = new ByTable();
			display_hud_version = version;

			if ( !Lang13.Bool( display_hud_version ) ) {
				display_hud_version = ( this.hud_version ??0) + 1;
			}

			if ( ( display_hud_version ??0) > 3 ) {
				display_hud_version = 1;
			}

			switch ((int?)( display_hud_version )) {
				case 1:
					this.hud_shown = true;

					if ( this.static_inventory.len != 0 ) {
						this.mymob.client.screen.Add( this.static_inventory );
					}

					if ( this.toggleable_inventory.len != 0 && this.inventory_shown ) {
						this.mymob.client.screen.Add( this.toggleable_inventory );
					}

					if ( this.hotkeybuttons.len != 0 && !this.hotkey_ui_hidden ) {
						this.mymob.client.screen.Add( this.hotkeybuttons );
					}

					if ( this.infodisplay.len != 0 ) {
						this.mymob.client.screen.Add( this.infodisplay );
					}

					if ( this.action_intent != null ) {
						this.action_intent.screen_loc = Lang13.Initial( this.action_intent, "screen_loc" );
					}
					break;
				case 2:
					this.hud_shown = false;

					if ( this.static_inventory.len != 0 ) {
						this.mymob.client.screen.Remove( this.static_inventory );
					}

					if ( this.toggleable_inventory.len != 0 ) {
						this.mymob.client.screen.Remove( this.toggleable_inventory );
					}

					if ( this.hotkeybuttons.len != 0 ) {
						this.mymob.client.screen.Remove( this.hotkeybuttons );
					}

					if ( this.infodisplay.len != 0 ) {
						this.mymob.client.screen.Add( this.infodisplay );
					}

					if ( this.l_hand_hud_object != null ) {
						this.mymob.client.screen.Add( this.l_hand_hud_object );
					}

					if ( this.r_hand_hud_object != null ) {
						this.mymob.client.screen.Add( this.r_hand_hud_object );
					}

					if ( this.action_intent != null ) {
						this.mymob.client.screen.Add( this.action_intent );
						this.action_intent.screen_loc = "EAST-1:28,SOUTH:5";
					}
					break;
				case 3:
					this.hud_shown = false;

					if ( this.static_inventory.len != 0 ) {
						this.mymob.client.screen.Remove( this.static_inventory );
					}

					if ( this.toggleable_inventory.len != 0 ) {
						this.mymob.client.screen.Remove( this.toggleable_inventory );
					}

					if ( this.hotkeybuttons.len != 0 ) {
						this.mymob.client.screen.Remove( this.hotkeybuttons );
					}

					if ( this.infodisplay.len != 0 ) {
						this.mymob.client.screen.Remove( this.infodisplay );
					}
					break;
			}
			this.hud_version = display_hud_version;
			this.persistant_inventory_update();
			this.mymob.update_action_buttons();
			this.reorganize_alerts();
			this.mymob.reload_fullscreen();
			return false;
		}

		// Function from file: alert.dm
		public dynamic reorganize_alerts(  ) {
			dynamic _default = null;

			ByTable alerts = null;
			string icon_pref = null;
			int? i = null;
			int? i2 = null;
			Base_Dynamic alert = null;

			alerts = this.mymob.alerts;

			if ( !this.hud_shown ) {
				i = null;
				i = 1;

				while (( i ??0) <= alerts.len) {
					this.mymob.client.screen.Remove( alerts[alerts[i]] );
					i++;
				}
				return 1;
			}
			i2 = null;
			i2 = 1;

			while (( i2 ??0) <= alerts.len) {
				alert = alerts[alerts[i2]];

				if ( alert.icon_state == "template" ) {
					
					if ( !Lang13.Bool( icon_pref ) ) {
						icon_pref = GlobalFuncs.ui_style2icon( this.mymob.client.prefs.UI_style );
					}
					alert.icon = icon_pref;
				}

				switch ((int?)( i2 )) {
					case 1:
						_default = "EAST-1:28,CENTER+5:27";
						break;
					case 2:
						_default = "EAST-1:28,CENTER+4:25";
						break;
					case 3:
						_default = "EAST-1:28,CENTER+3:23";
						break;
					case 4:
						_default = "EAST-1:28,CENTER+2:21";
						break;
					case 5:
						_default = "EAST-1:28,CENTER+1:19";
						break;
					default:
						_default = "";
						break;
				}
				alert.screen_loc = _default;
				this.mymob.client.screen.Or( alert );
				i2++;
			}
			return 1;
		}

		// Function from file: action.dm
		public void SetButtonCoords( dynamic button = null, dynamic number = null ) {
			int row = 0;
			dynamic col = null;
			bool x_offset = false;
			double? y_offset = null;
			Matrix M = null;

			row = Num13.Floor( Convert.ToDouble( ( number - 1 ) / 10 ) );
			col = ( number - 1 ) % 10 + 1;
			x_offset = Lang13.Bool( ( col - 1 ) * 32 + col * 2 + 4 );
			y_offset = ( row + 1 ) * -32 + 26;
			M = Num13.Matrix();
			M.Translate( x_offset, y_offset );
			button.transform = M;
			return;
		}

		// Function from file: action.dm
		public string ButtonNumberToScreenCoords( int number = 0 ) {
			int row = 0;
			int col = 0;
			string coord_col = null;
			int coord_col_offset = 0;
			string coord_row = null;

			row = Num13.Floor( ( number - 1 ) / 10 );
			col = ( number - 1 ) % 10 + 1;
			coord_col = "+" + ( col - 1 );
			coord_col_offset = col * 2 + 4;
			coord_row = "" + ( row != 0 ? ((dynamic)( -row )) : ((dynamic)( "+0" )) );
			return "WEST" + coord_col + ":" + coord_col_offset + ",NORTH" + coord_row + ":-6";
		}

	}

}