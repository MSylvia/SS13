// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Buildmode : Game_Data {

		public int mode = 1;
		public Client holder = null;
		public ByTable buttons = new ByTable();
		public double? build_dir = 2;
		public Base_Data throw_atom = null;
		public dynamic cornerA = null;
		public dynamic cornerB = null;
		public dynamic generator_path = null;
		public dynamic varholder = "name";
		public dynamic valueholder = "derp";
		public dynamic objholder = typeof(Obj_Structure_Closet);
		public Base_Data stored = null;

		// Function from file: buildmode.dm
		public Buildmode ( dynamic c = null ) {
			this.create_buttons();
			this.holder = c;
			this.holder.click_intercept = this;
			this.holder.show_popup_menus = false;
			this.holder.screen.Add( this.buttons );
			return;
		}

		// Function from file: buildmode.dm
		public override dynamic Destroy(  ) {
			dynamic button = null;

			this.stored = null;

			foreach (dynamic _a in Lang13.Enumerate( this.buttons )) {
				button = _a;
				
				GlobalFuncs.qdel( button );
			}
			return null;
		}

		// Function from file: buildmode.dm
		public bool ClickOn( Ent_Static user = null, string _params = null, Base_Data _object = null ) {
			bool _default = false;

			ByTable pa = null;
			int right_click = 0;
			int left_click = 0;
			int alt_click = 0;
			int ctrl_click = 0;
			Base_Data T = null;
			Base_Data T2 = null;
			Base_Data T3 = null;
			Base_Data T4 = null;
			Obj_Structure_Window_Reinforced WIN = null;
			Obj_Structure_Window_Reinforced WIN2 = null;
			Obj_Structure_Window_Reinforced WIN3 = null;
			Obj_Structure_Window_Reinforced WIN4 = null;
			Obj_Structure_Window_Reinforced WIN5 = null;
			dynamic T5 = null;
			dynamic A = null;
			dynamic G = null;
			dynamic T6 = null;

			pa = String13.ParseUrlParams( _params );
			right_click = pa.Find( "right" );
			left_click = pa.Find( "left" );
			alt_click = pa.Find( "alt" );
			ctrl_click = pa.Find( "ctrl" );
			_default = true;

			switch ((int)( this.mode )) {
				case 1:
					
					if ( _object is Tile && left_click != 0 && !( alt_click != 0 ) && !( ctrl_click != 0 ) ) {
						T = _object;

						if ( _object is Tile_Space ) {
							((Tile)T).ChangeTurf( typeof(Tile_Simulated_Floor_Plasteel) );
						} else if ( _object is Tile_Simulated_Floor ) {
							((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall) );
						} else if ( _object is Tile_Simulated_Wall ) {
							((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall_RWall) );
						}
						GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " built " + T + " at (" + ((dynamic)T).x + "," + ((dynamic)T).y + "," + ((dynamic)T).z + ")" );
						return _default;
					} else if ( right_click != 0 ) {
						GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " deleted " + _object + " at (" + ((dynamic)_object).x + "," + ((dynamic)_object).y + "," + ((dynamic)_object).z + ")" );

						if ( _object is Tile_Simulated_Wall ) {
							T2 = _object;
							((Tile)T2).ChangeTurf( typeof(Tile_Simulated_Floor_Plasteel) );
						} else if ( _object is Tile_Simulated_Floor ) {
							T3 = _object;
							((Tile)T3).ChangeTurf( typeof(Tile_Space) );
						} else if ( _object is Tile_Simulated_Wall_RWall ) {
							T4 = _object;
							((Tile)T4).ChangeTurf( typeof(Tile_Simulated_Wall) );
						} else if ( _object is Obj ) {
							GlobalFuncs.qdel( _object );
						}
						return _default;
					} else if ( _object is Tile && alt_click != 0 && left_click != 0 ) {
						GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " built an airlock at (" + ((dynamic)_object).x + "," + ((dynamic)_object).y + "," + ((dynamic)_object).z + ")" );
						new Obj_Machinery_Door_Airlock( GlobalFuncs.get_turf( _object ) );
					} else if ( _object is Tile && ctrl_click != 0 && left_click != 0 ) {
						
						switch ((int?)( this.build_dir )) {
							case 1:
								WIN = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
								WIN.dir = ((int)( GlobalVars.NORTH ));
								break;
							case 2:
								WIN2 = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
								WIN2.dir = ((int)( GlobalVars.SOUTH ));
								break;
							case 4:
								WIN3 = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
								WIN3.dir = ((int)( GlobalVars.EAST ));
								break;
							case 8:
								WIN4 = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
								WIN4.dir = ((int)( GlobalVars.WEST ));
								break;
							case 9:
								WIN5 = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
								WIN5.dir = ((int)( GlobalVars.NORTHWEST ));
								break;
						}
						GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " built a window at (" + ((dynamic)_object).x + "," + ((dynamic)_object).y + "," + ((dynamic)_object).z + ")" );
					}
					break;
				case 2:
					
					if ( left_click != 0 ) {
						
						if ( Lang13.Bool( this.objholder.IsSubclassOf( typeof(Tile) ) ) ) {
							T5 = GlobalFuncs.get_turf( _object );
							GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " modified " + T5 + " (" + T5.x + "," + T5.y + "," + T5.z + ") to " + this.objholder );
							((Tile)T5).ChangeTurf( this.objholder );
						} else {
							A = Lang13.Call( this.objholder, GlobalFuncs.get_turf( _object ) );
							A.dir = this.build_dir;
							GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " modified " + A + "'s (" + A.x + "," + A.y + "," + A.z + ") dir to " + this.build_dir );
						}
					} else if ( right_click != 0 ) {
						
						if ( _object is Obj ) {
							GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " deleted " + _object + " at (" + ((dynamic)_object).x + "," + ((dynamic)_object).y + "," + ((dynamic)_object).z + ")" );
							GlobalFuncs.qdel( _object );
						}
					}
					break;
				case 3:
					
					if ( left_click != 0 ) {
						
						if ( _object.vars.Find( this.varholder ) != 0 ) {
							GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " modified " + ((dynamic)_object).name + "'s " + this.varholder + " to " + this.valueholder );
							_object.vars[this.varholder] = this.valueholder;
						} else {
							((dynamic)user).WriteMsg( "<span class='warning'>" + Lang13.Initial( _object, "name" ) + " does not have a var called '" + this.varholder + "'</span>" );
						}
					}

					if ( right_click != 0 ) {
						
						if ( _object.vars.Find( this.varholder ) != 0 ) {
							GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " modified " + ((dynamic)_object).name + "'s " + this.varholder + " to " + this.valueholder );
							_object.vars[this.varholder] = Lang13.Initial( _object, this.varholder );
						} else {
							((dynamic)user).WriteMsg( "<span class='warning'>" + Lang13.Initial( _object, "name" ) + " does not have a var called '" + this.varholder + "'</span>" );
						}
					}
					break;
				case 4:
					
					if ( left_click != 0 ) {
						
						if ( _object is Tile ) {
							return _default;
						}
						this.throw_atom = _object;
					}

					if ( right_click != 0 ) {
						
						if ( this.throw_atom != null ) {
							((Ent_Dynamic)this.throw_atom).throw_at( _object, 10, 1, user );
							GlobalFuncs.log_admin( "Build Mode: " + GlobalFuncs.key_name( user ) + " threw " + this.throw_atom + " at " + _object + " (" + ((dynamic)_object).x + "," + ((dynamic)_object).y + "," + ((dynamic)_object).z + ")" );
						}
					}
					break;
				case 5:
					
					if ( !Lang13.Bool( this.cornerA ) ) {
						this.cornerA = GlobalFuncs.get_turf( _object );
						return _default;
					}

					if ( Lang13.Bool( this.cornerA ) && !Lang13.Bool( this.cornerB ) ) {
						this.cornerB = GlobalFuncs.get_turf( _object );
					}

					if ( left_click != 0 ) {
						
						if ( Lang13.Bool( this.cornerA ) && Lang13.Bool( this.cornerB ) ) {
							
							if ( !Lang13.Bool( this.generator_path ) ) {
								((dynamic)user).WriteMsg( "<span class='warning'>Select generator type first.</span>" );
							}
							G = Lang13.Call( this.generator_path );
							((MapGenerator)G).defineRegion( this.cornerA, this.cornerB, true );
							((MapGenerator)G).generate();
							this.cornerA = null;
							this.cornerB = null;
							return _default;
						}
					}
					this.cornerA = null;
					this.cornerB = null;
					break;
				case 6:
					
					if ( left_click != 0 ) {
						T6 = GlobalFuncs.get_turf( _object );

						if ( this.stored != null ) {
							GlobalFuncs.DuplicateObject( this.stored, true, null, T6 );
						}
					} else if ( right_click != 0 ) {
						
						if ( _object is Ent_Dynamic ) {
							this.stored = _object;
						}
					}
					break;
			}
			return _default;
		}

		// Function from file: buildmode.dm
		public void Reset(  ) {
			this.cornerA = null;
			this.cornerB = null;
			return;
		}

		// Function from file: buildmode.dm
		public bool change_dir(  ) {
			
			switch ((int?)( this.build_dir )) {
				case 1:
					this.build_dir = GlobalVars.EAST;
					break;
				case 4:
					this.build_dir = GlobalVars.SOUTH;
					break;
				case 2:
					this.build_dir = GlobalVars.WEST;
					break;
				case 8:
					this.build_dir = GlobalVars.NORTHWEST;
					break;
				case 9:
					this.build_dir = GlobalVars.NORTH;
					break;
			}
			return true;
		}

		// Function from file: buildmode.dm
		public bool change_settings( Mob user = null ) {
			dynamic target_path = null;
			ByTable locked = null;
			dynamic thetype = null;
			dynamic gen_paths = null;
			dynamic type = null;

			
			switch ((int)( this.mode )) {
				case 1:
					return true;
					break;
				case 2:
					target_path = Interface13.Input( user, "Enter typepath:", "Typepath", "/obj/structure/closet", null, InputType.Any );
					this.objholder = Lang13.FindClass( target_path );

					if ( !( this.objholder is Type ) ) {
						this.objholder = GlobalFuncs.pick_closest_path( target_path );

						if ( !Lang13.Bool( this.objholder ) ) {
							this.objholder = typeof(Obj_Structure_Closet);
							Interface13.Alert( "That path is not allowed." );
						}
					} else if ( Lang13.Bool( this.objholder.IsSubclassOf( typeof(Mob) ) ) && !GlobalFuncs.check_rights( 32, false ) ) {
						this.objholder = typeof(Obj_Structure_Closet);
					}
					break;
				case 3:
					locked = new ByTable(new object [] { "vars", "key", "ckey", "client", "firemut", "ishulk", "telekinesis", "xray", "virus", "viruses", "cuffed", "ka", "last_eaten", "urine" });
					this.varholder = Interface13.Input( user, "Enter variable name:", "Name", "name", null, InputType.Any );

					if ( Lang13.Bool( ((dynamic)( locked != null && !GlobalFuncs.check_rights( 32, false ) )).Contains( this.varholder ) ) ) {
						return true;
					}
					thetype = Interface13.Input( user, "Select variable type:", "Type", null, new ByTable(new object [] { "text", "number", "mob-reference", "obj-reference", "turf-reference" }), InputType.Any );

					if ( !Lang13.Bool( thetype ) ) {
						return true;
					}

					dynamic _a = thetype; // Was a switch-case, sorry for the mess.
					if ( _a=="text" ) {
						this.valueholder = Interface13.Input( user, "Enter variable value:", "Value", "value", null, InputType.Str );
					} else if ( _a=="number" ) {
						this.valueholder = Interface13.Input( user, "Enter variable value:", "Value", 123, null, InputType.Num );
					} else if ( _a=="mob-reference" ) {
						this.valueholder = Interface13.Input( user, "Enter variable value:", "Value", null, GlobalVars.mob_list, InputType.Mob );
					} else if ( _a=="obj-reference" ) {
						this.valueholder = Interface13.Input( user, "Enter variable value:", "Value", null, Game13.contents, InputType.Obj );
					} else if ( _a=="turf-reference" ) {
						this.valueholder = Interface13.Input( user, "Enter variable value:", "Value", null, Game13.contents, InputType.Tile );
					}
					break;
				case 5:
					gen_paths = Lang13.GetTypes( typeof(MapGenerator) ) - typeof(MapGenerator);
					type = Interface13.Input( user, "Select Generator Type", "Type", null, gen_paths, InputType.Null | InputType.Any );

					if ( !Lang13.Bool( type ) ) {
						return false;
					}
					this.generator_path = type;
					this.cornerA = null;
					this.cornerB = null;
					break;
			}
			return false;
		}

		// Function from file: buildmode.dm
		public void show_help( Mob user = null ) {
			
			switch ((int)( this.mode )) {
				case 1:
					user.WriteMsg( "ÿ!***********************************************************" );
					user.WriteMsg( "ÿ!Left Mouse Button        = Construct / Upgrade" );
					user.WriteMsg( "ÿ!Right Mouse Button       = Deconstruct / Delete / Downgrade" );
					user.WriteMsg( "ÿ!Left Mouse Button + ctrl = R-Window" );
					user.WriteMsg( "ÿ!Left Mouse Button + alt  = Airlock" );
					user.WriteMsg( "" );
					user.WriteMsg( "ÿ!Use the button in the upper left corner to" );
					user.WriteMsg( "ÿ!change the direction of built objects." );
					user.WriteMsg( "ÿ!***********************************************************" );
					break;
				case 2:
					user.WriteMsg( "ÿ!***********************************************************" );
					user.WriteMsg( "ÿ!Right Mouse Button on buildmode button = Set object type" );
					user.WriteMsg( "ÿ!Left Mouse Button on turf/obj          = Place objects" );
					user.WriteMsg( "ÿ!Right Mouse Button                     = Delete objects" );
					user.WriteMsg( "" );
					user.WriteMsg( "ÿ!Use the button in the upper left corner to" );
					user.WriteMsg( "ÿ!change the direction of built objects." );
					user.WriteMsg( "ÿ!***********************************************************" );
					break;
				case 3:
					user.WriteMsg( "ÿ!***********************************************************" );
					user.WriteMsg( "ÿ!Right Mouse Button on buildmode button = Select var(type) & value" );
					user.WriteMsg( "ÿ!Left Mouse Button on turf/obj/mob      = Set var(type) & value" );
					user.WriteMsg( "ÿ!Right Mouse Button on turf/obj/mob     = Reset var's value" );
					user.WriteMsg( "ÿ!***********************************************************" );
					break;
				case 4:
					user.WriteMsg( "ÿ!***********************************************************" );
					user.WriteMsg( "ÿ!Left Mouse Button on turf/obj/mob      = Select" );
					user.WriteMsg( "ÿ!Right Mouse Button on turf/obj/mob     = Throw" );
					user.WriteMsg( "ÿ!***********************************************************" );
					break;
				case 5:
					user.WriteMsg( "ÿ!***********************************************************" );
					user.WriteMsg( "ÿ!Left Mouse Button on turf/obj/mob      = Select corner" );
					user.WriteMsg( "ÿ!Right Mouse Button on buildmode button = Select generator" );
					user.WriteMsg( "ÿ!***********************************************************" );
					break;
				case 6:
					user.WriteMsg( "ÿ!***********************************************************" );
					user.WriteMsg( "ÿ!Left Mouse Button on obj/turf/mob   = Spawn a Copy of selected target" );
					user.WriteMsg( "ÿ!Right Mouse Button on obj/mob = Select target to copy" );
					user.WriteMsg( "ÿ!***********************************************************" );
					break;
			}
			return;
		}

		// Function from file: buildmode.dm
		public void toggle_modes(  ) {
			this.mode = this.mode % 6 + 1;
			this.Reset();
			return;
		}

		// Function from file: buildmode.dm
		public void create_buttons(  ) {
			this.buttons.Add( new Obj_Screen_Buildmode_Mode( this ) );
			this.buttons.Add( new Obj_Screen_Buildmode_Help( this ) );
			this.buttons.Add( new Obj_Screen_Buildmode_Bdir( this ) );
			this.buttons.Add( new Obj_Screen_Buildmode_Quit( this ) );
			return;
		}

		// Function from file: buildmode.dm
		public void quit(  ) {
			this.holder.screen.Remove( this.buttons );
			this.holder.click_intercept = null;
			this.holder.show_popup_menus = true;
			GlobalFuncs.qdel( this );
			return;
		}

	}

}