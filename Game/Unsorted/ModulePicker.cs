// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ModulePicker : Game_Data {

		public string temp = null;
		public int processing_time = 50;
		public ByTable possible_modules = new ByTable();

		// Function from file: Malf_Modules.dm
		public ModulePicker (  ) {
			dynamic type = null;
			dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(AIModule) ) )) {
				type = _a;
				
				AM = Lang13.Call( type );

				if ( AM.power_type != null ) {
					this.possible_modules.Add( AM );
				}
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob A = null;
			AIModule AM = null;
			dynamic already_AM = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( !( Task13.User is Mob_Living_Silicon_Ai ) ) {
				return null;
			}
			A = Task13.User;

			if ( A.stat == 2 ) {
				A.WriteMsg( "You are already dead!" );
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.possible_modules, typeof(AIModule) )) {
				AM = _a;
				

				if ( Lang13.Bool( href_list[AM.mod_pick_name] ) ) {
					
					if ( AM.cost > this.processing_time ) {
						this.temp = "You cannot afford this module.";
						break;
					}
					already_AM = Lang13.FindIn( AM.type, ((dynamic)A).current_modules );

					if ( Lang13.Bool( already_AM ) ) {
						
						if ( !AM.one_time ) {
							already_AM.uses += AM.uses;
							this.processing_time -= AM.cost;
							this.temp = "Additional use added to " + already_AM.module_name;
							break;
						} else {
							this.temp = "This module is only needed once.";
							break;
						}
					}
					((Mob_Living_Silicon_Ai)A).view_core();
					A.verbs.Add( AM.power_type );
					((dynamic)A).current_modules += Lang13.Call( AM.type );
					this.temp = AM.description;
					this.processing_time -= AM.cost;
				}

				if ( Lang13.Bool( href_list["showdesc"] ) ) {
					
					if ( AM.mod_pick_name == href_list["showdesc"] ) {
						this.temp = AM.description;
					}
				}
			}
			this.use( Task13.User );
			return null;
		}

		// Function from file: Malf_Modules.dm
		public void use( Mob user = null ) {
			string dat = null;
			AIModule_Large module = null;
			AIModule_Small module2 = null;
			Browser popup = null;

			dat = "<B>Select use of processing time: (currently #" + this.processing_time + " left.)</B><BR>";
			dat += "<HR>";
			dat += "<B>Install Module:</B><BR>";
			dat += "<I>The number afterwards is the amount of processing time it consumes.</I><BR>";

			foreach (dynamic _a in Lang13.Enumerate( this.possible_modules, typeof(AIModule_Large) )) {
				module = _a;
				
				dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";" ).item( module.mod_pick_name ).str( "=1'>" ).item( module.module_name ).str( "</A><A href='byond://?src=" ).Ref( this ).str( ";showdesc=" ).item( module.mod_pick_name ).str( "'>[?]</A> (" ).item( module.cost ).str( ")<BR>" ).ToString();
			}

			foreach (dynamic _b in Lang13.Enumerate( this.possible_modules, typeof(AIModule_Small) )) {
				module2 = _b;
				
				dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";" ).item( module2.mod_pick_name ).str( "=1'>" ).item( module2.module_name ).str( "</A><A href='byond://?src=" ).Ref( this ).str( ";showdesc=" ).item( module2.mod_pick_name ).str( "'>[?]</A> (" ).item( module2.cost ).str( ")<BR>" ).ToString();
			}
			dat += "<HR>";

			if ( Lang13.Bool( this.temp ) ) {
				dat += "" + this.temp;
			}
			popup = new Browser( user, "modpicker", "Malf Module Menu" );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: Malf_Modules.dm
		public void remove_verbs( dynamic A = null ) {
			AIModule AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.possible_modules, typeof(AIModule) )) {
				AM = _a;
				
				A.verbs.Remove( AM.power_type );
			}
			return;
		}

	}

}