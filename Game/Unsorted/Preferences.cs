// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Preferences : Game_Data {

		public string path = null;
		public dynamic default_slot = 1;
		public double? max_save_slots = 3;
		public int muted = 0;
		public string last_ip = null;
		public string last_id = null;
		public dynamic lastchangelog = "";
		public dynamic ooccolor = null;
		public ByTable be_special = new ByTable();
		public bool old_be_special = false;
		public dynamic UI_style = "Midnight";
		public dynamic hotkeys = 0;
		public dynamic tgui_fancy = 1;
		public dynamic tgui_lock = 1;
		public dynamic toggles = 3071;
		public int chat_toggles = 1023;
		public dynamic ghost_form = "ghost";
		public dynamic ghost_orbit = "circle";
		public bool ghost_hud = true;
		public bool inquisitive_ghost = true;
		public bool allow_midround_antag = true;
		public dynamic preferred_map = null;
		public dynamic real_name = null;
		public dynamic be_random_name = 0;
		public dynamic be_random_body = 0;
		public string gender = "male";
		public dynamic age = 30;
		public string blood_type = "A+";
		public dynamic underwear = "Nude";
		public dynamic undershirt = "Nude";
		public dynamic socks = "Nude";
		public dynamic backbag = "Grey Backpack";
		public dynamic hair_style = "Bald";
		public dynamic hair_color = "000";
		public dynamic facial_hair_style = "Shaved";
		public dynamic facial_hair_color = "000";
		public dynamic skin_tone = "caucasian1";
		public dynamic eye_color = "000";
		public dynamic pref_species = new Species_Human();
		public ByTable features = new ByTable()
											.Set( "mcolor", "FFF" )
											.Set( "tail_lizard", "Smooth" )
											.Set( "tail_human", "None" )
											.Set( "snout", "Round" )
											.Set( "horns", "None" )
											.Set( "ears", "None" )
											.Set( "frills", "None" )
											.Set( "spines", "None" )
											.Set( "body_markings", "None" )
										;
		public ByTable custom_names = new ByTable(new object [] { "clown", "mime", "ai", "cyborg", "religion", "deity" });
		public Icon preview_icon = null;
		public dynamic job_civilian_high = 0;
		public dynamic job_civilian_med = 0;
		public dynamic job_civilian_low = 0;
		public dynamic job_medsci_high = 0;
		public dynamic job_medsci_med = 0;
		public dynamic job_medsci_low = 0;
		public dynamic job_engsec_high = 0;
		public dynamic job_engsec_med = 0;
		public dynamic job_engsec_low = 0;
		public dynamic userandomjob = 1;
		public double? current_tab = 0;
		public dynamic metadata = "";
		public dynamic unlock_content = 0;
		public ByTable ignoring = new ByTable();

		// Function from file: preferences.dm
		public Preferences ( Client C = null ) {
			bool loaded_preferences_successfully = false;

			this.blood_type = GlobalFuncs.random_blood_type();
			this.custom_names["ai"] = Rand13.PickFromTable( GlobalVars.ai_names );
			this.custom_names["cyborg"] = Rand13.PickFromTable( GlobalVars.ai_names );
			this.custom_names["clown"] = Rand13.PickFromTable( GlobalVars.clown_names );
			this.custom_names["mime"] = Rand13.PickFromTable( GlobalVars.mime_names );

			if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
				
				if ( !GlobalFuncs.IsGuestKey( C.key ) ) {
					this.load_path( C.ckey );
					this.unlock_content = ((dynamic)C).IsByondMember();

					if ( Lang13.Bool( this.unlock_content ) ) {
						this.max_save_slots = 8;
					}
				}
			}
			loaded_preferences_successfully = this.load_preferences();

			if ( loaded_preferences_successfully ) {
				
				if ( this.load_character() ) {
					return;
				}
			}
			this.random_character();
			this.real_name = ((Species)this.pref_species).random_name( this.gender, true );

			if ( !loaded_preferences_successfully ) {
				this.save_preferences();
			}
			this.save_character();
			return;
		}

		// Function from file: preferences_setup.dm
		public void update_preview_icon(  ) {
			Mob_Living_Carbon_Human_Dummy mannequin = null;
			Job previewJob = null;
			dynamic highRankFlag = null;
			int? highDeptFlag = null;
			Job job = null;
			Icon stamp = null;

			
			if ( Lang13.Bool( this.job_engsec_high ) ) {
				
				dynamic _a = this.job_engsec_high; // Was a switch-case, sorry for the mess.
				if ( _a==512 ) {
					this.preview_icon = new Icon( "icons/mob/AI.dmi", "AI", GlobalVars.SOUTH );
					this.preview_icon.Scale( 64, 64 );
					return;
				} else if ( _a==1024 ) {
					this.preview_icon = new Icon( "icons/mob/robots.dmi", "robot", GlobalVars.SOUTH );
					this.preview_icon.Scale( 64, 64 );
					return;
				}
			}
			mannequin = new Mob_Living_Carbon_Human_Dummy();
			this.copy_to( mannequin );
			previewJob = null;
			highRankFlag = this.job_civilian_high | this.job_medsci_high | this.job_engsec_high;

			if ( Lang13.Bool( this.job_civilian_low & 8192 ) ) {
				previewJob = GlobalVars.SSjob.GetJob( "Assistant" );
			} else if ( Lang13.Bool( highRankFlag ) ) {
				highDeptFlag = null;

				if ( Lang13.Bool( this.job_civilian_high ) ) {
					highDeptFlag = GlobalVars.CIVILIAN;
				} else if ( Lang13.Bool( this.job_medsci_high ) ) {
					highDeptFlag = GlobalVars.MEDSCI;
				} else if ( Lang13.Bool( this.job_engsec_high ) ) {
					highDeptFlag = GlobalVars.ENGSEC ?1:0;
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job = _b;
					

					if ( job.flag == highRankFlag && job.department_flag == highDeptFlag ) {
						previewJob = job;
						break;
					}
				}
			}

			if ( previewJob != null ) {
				mannequin.job = previewJob.title;
				previewJob.equip( mannequin, GlobalVars.TRUE );
			}
			this.preview_icon = new Icon( "icons/effects/effects.dmi", "nothing" );
			this.preview_icon.Scale( 80, 48 );
			mannequin.dir = ((int)( GlobalVars.NORTH ));
			stamp = GlobalFuncs.getFlatIcon( mannequin );
			this.preview_icon.Blend( stamp, 3, 25, 17 );
			mannequin.dir = ((int)( GlobalVars.WEST ));
			stamp = GlobalFuncs.getFlatIcon( mannequin );
			this.preview_icon.Blend( stamp, 3, 1, 9 );
			mannequin.dir = ((int)( GlobalVars.SOUTH ));
			stamp = GlobalFuncs.getFlatIcon( mannequin );
			this.preview_icon.Blend( stamp, 3, 49, 1 );
			this.preview_icon.Scale( this.preview_icon.Width() * 2, this.preview_icon.Height() * 2 );
			GlobalFuncs.qdel( mannequin );
			return;
		}

		// Function from file: preferences_setup.dm
		public void random_character( string gender_override = null ) {
			
			if ( Lang13.Bool( gender_override ) ) {
				this.gender = gender_override;
			} else {
				this.gender = Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE });
			}
			this.underwear = GlobalFuncs.random_underwear( this.gender );
			this.undershirt = GlobalFuncs.random_undershirt( this.gender );
			this.socks = GlobalFuncs.random_socks();
			this.skin_tone = GlobalFuncs.random_skin_tone();
			this.hair_style = GlobalFuncs.random_hair_style( this.gender );
			this.facial_hair_style = GlobalFuncs.random_facial_hair_style( this.gender );
			this.hair_color = GlobalFuncs.random_short_color();
			this.facial_hair_color = this.hair_color;
			this.eye_color = GlobalFuncs.random_eye_color();

			if ( !Lang13.Bool( this.pref_species ) ) {
				this.pref_species = new Species_Human();
			}
			this.backbag = 1;
			this.features = GlobalFuncs.random_features();
			this.age = Rand13.Int( 17, 85 );
			return;
		}

		// Function from file: preferences_savefile.dm
		public bool save_character(  ) {
			SaveFile S = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/character" + this.default_slot;
			S["version"] = 13;
			S["OOC_Notes"] = this.metadata;
			S["real_name"] = this.real_name;
			S["name_is_always_random"] = this.be_random_name;
			S["body_is_always_random"] = this.be_random_body;
			S["gender"] = this.gender;
			S["age"] = this.age;
			S["hair_color"] = this.hair_color;
			S["facial_hair_color"] = this.facial_hair_color;
			S["eye_color"] = this.eye_color;
			S["skin_tone"] = this.skin_tone;
			S["hair_style_name"] = this.hair_style;
			S["facial_style_name"] = this.facial_hair_style;
			S["underwear"] = this.underwear;
			S["undershirt"] = this.undershirt;
			S["socks"] = this.socks;
			S["backbag"] = this.backbag;
			S["species"] = this.pref_species.id;
			S["feature_mcolor"] = this.features["mcolor"];
			S["feature_lizard_tail"] = this.features["tail_lizard"];
			S["feature_human_tail"] = this.features["tail_human"];
			S["feature_lizard_snout"] = this.features["snout"];
			S["feature_lizard_horns"] = this.features["horns"];
			S["feature_human_ears"] = this.features["ears"];
			S["feature_lizard_frills"] = this.features["frills"];
			S["feature_lizard_spines"] = this.features["spines"];
			S["feature_lizard_body_markings"] = this.features["body_markings"];
			S["clown_name"] = this.custom_names["clown"];
			S["mime_name"] = this.custom_names["mime"];
			S["ai_name"] = this.custom_names["ai"];
			S["cyborg_name"] = this.custom_names["cyborg"];
			S["religion_name"] = this.custom_names["religion"];
			S["deity_name"] = this.custom_names["deity"];
			S["userandomjob"] = this.userandomjob;
			S["job_civilian_high"] = this.job_civilian_high;
			S["job_civilian_med"] = this.job_civilian_med;
			S["job_civilian_low"] = this.job_civilian_low;
			S["job_medsci_high"] = this.job_medsci_high;
			S["job_medsci_med"] = this.job_medsci_med;
			S["job_medsci_low"] = this.job_medsci_low;
			S["job_engsec_high"] = this.job_engsec_high;
			S["job_engsec_med"] = this.job_engsec_med;
			S["job_engsec_low"] = this.job_engsec_low;
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool load_character( dynamic slot = null ) {
			SaveFile S = null;
			int needs_update = 0;
			dynamic species_id = null;
			dynamic newtype = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}

			if ( !File13.Exists( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/";

			if ( !Lang13.Bool( slot ) ) {
				slot = this.default_slot;
			}
			slot = GlobalFuncs.sanitize_integer( slot, 1, this.max_save_slots, Lang13.Initial( this, "default_slot" ) );

			if ( slot != this.default_slot ) {
				this.default_slot = slot;
				S["default_slot"] = slot;
			}
			S.cd = "/character" + slot;
			needs_update = this.savefile_needs_update( S );

			if ( needs_update == -2 ) {
				return false;
			}
			species_id = S.ReadItem( "species", species_id );

			if ( GlobalVars.config.mutant_races && Lang13.Bool( species_id ) && GlobalVars.roundstart_species.Contains( species_id ) ) {
				newtype = GlobalVars.roundstart_species[species_id];
				this.pref_species = Lang13.Call( newtype );
			} else {
				this.pref_species = new Species_Human();
			}

			if ( !Lang13.Bool( S["features" + "mcolor"] ) || S["features" + "mcolor"] == "#000" ) {
				S["features" + "mcolor"] = "#FFF";
			}
			this.metadata = S.ReadItem( "OOC_Notes", this.metadata );
			this.real_name = S.ReadItem( "real_name", this.real_name );
			this.be_random_name = S.ReadItem( "name_is_always_random", this.be_random_name );
			this.be_random_body = S.ReadItem( "body_is_always_random", this.be_random_body );
			this.gender = S.ReadItem( "gender", this.gender );
			this.age = S.ReadItem( "age", this.age );
			this.hair_color = S.ReadItem( "hair_color", this.hair_color );
			this.facial_hair_color = S.ReadItem( "facial_hair_color", this.facial_hair_color );
			this.eye_color = S.ReadItem( "eye_color", this.eye_color );
			this.skin_tone = S.ReadItem( "skin_tone", this.skin_tone );
			this.hair_style = S.ReadItem( "hair_style_name", this.hair_style );
			this.facial_hair_style = S.ReadItem( "facial_style_name", this.facial_hair_style );
			this.underwear = S.ReadItem( "underwear", this.underwear );
			this.undershirt = S.ReadItem( "undershirt", this.undershirt );
			this.socks = S.ReadItem( "socks", this.socks );
			this.backbag = S.ReadItem( "backbag", this.backbag );
			this.features["mcolor"] = S.ReadItem( "feature_mcolor", this.features["mcolor"] );
			this.features["tail_lizard"] = S.ReadItem( "feature_lizard_tail", this.features["tail_lizard"] );
			this.features["snout"] = S.ReadItem( "feature_lizard_snout", this.features["snout"] );
			this.features["horns"] = S.ReadItem( "feature_lizard_horns", this.features["horns"] );
			this.features["frills"] = S.ReadItem( "feature_lizard_frills", this.features["frills"] );
			this.features["spines"] = S.ReadItem( "feature_lizard_spines", this.features["spines"] );
			this.features["body_markings"] = S.ReadItem( "feature_lizard_body_markings", this.features["body_markings"] );

			if ( !GlobalVars.config.mutant_humans ) {
				this.features["tail_human"] = "none";
				this.features["ears"] = "none";
			} else {
				this.features["tail_human"] = S.ReadItem( "feature_human_tail", this.features["tail_human"] );
				this.features["ears"] = S.ReadItem( "feature_human_ears", this.features["ears"] );
			}
			this.custom_names["clown"] = S.ReadItem( "clown_name", this.custom_names["clown"] );
			this.custom_names["mime"] = S.ReadItem( "mime_name", this.custom_names["mime"] );
			this.custom_names["ai"] = S.ReadItem( "ai_name", this.custom_names["ai"] );
			this.custom_names["cyborg"] = S.ReadItem( "cyborg_name", this.custom_names["cyborg"] );
			this.custom_names["religion"] = S.ReadItem( "religion_name", this.custom_names["religion"] );
			this.custom_names["deity"] = S.ReadItem( "deity_name", this.custom_names["deity"] );
			this.userandomjob = S.ReadItem( "userandomjob", this.userandomjob );
			this.job_civilian_high = S.ReadItem( "job_civilian_high", this.job_civilian_high );
			this.job_civilian_med = S.ReadItem( "job_civilian_med", this.job_civilian_med );
			this.job_civilian_low = S.ReadItem( "job_civilian_low", this.job_civilian_low );
			this.job_medsci_high = S.ReadItem( "job_medsci_high", this.job_medsci_high );
			this.job_medsci_med = S.ReadItem( "job_medsci_med", this.job_medsci_med );
			this.job_medsci_low = S.ReadItem( "job_medsci_low", this.job_medsci_low );
			this.job_engsec_high = S.ReadItem( "job_engsec_high", this.job_engsec_high );
			this.job_engsec_med = S.ReadItem( "job_engsec_med", this.job_engsec_med );
			this.job_engsec_low = S.ReadItem( "job_engsec_low", this.job_engsec_low );

			if ( needs_update >= 0 ) {
				this.update_character( needs_update );
			}
			this.metadata = GlobalFuncs.sanitize_text( this.metadata, Lang13.Initial( this, "metadata" ) );
			this.real_name = GlobalFuncs.reject_bad_name( this.real_name );

			if ( !Lang13.Bool( this.features["mcolor"] ) || this.features["mcolor"] == "#000" ) {
				this.features["mcolor"] = Rand13.Pick(new object [] { "FFFFFF", "7F7F7F", "7FFF7F", "7F7FFF", "FF7F7F", "7FFFFF", "FF7FFF", "FFFF7F" });
			}

			if ( !Lang13.Bool( this.real_name ) ) {
				this.real_name = GlobalFuncs.random_unique_name( this.gender );
			}
			this.be_random_name = GlobalFuncs.sanitize_integer( this.be_random_name, 0, 1, Lang13.Initial( this, "be_random_name" ) );
			this.be_random_body = GlobalFuncs.sanitize_integer( this.be_random_body, 0, 1, Lang13.Initial( this, "be_random_body" ) );
			this.gender = GlobalFuncs.sanitize_gender( this.gender );

			if ( this.gender == GlobalVars.MALE ) {
				this.hair_style = GlobalFuncs.sanitize_inlist( this.hair_style, GlobalVars.hair_styles_male_list );
				this.facial_hair_style = GlobalFuncs.sanitize_inlist( this.facial_hair_style, GlobalVars.facial_hair_styles_male_list );
				this.underwear = GlobalFuncs.sanitize_inlist( this.underwear, GlobalVars.underwear_m );
				this.undershirt = GlobalFuncs.sanitize_inlist( this.undershirt, GlobalVars.undershirt_m );
			} else {
				this.hair_style = GlobalFuncs.sanitize_inlist( this.hair_style, GlobalVars.hair_styles_female_list );
				this.facial_hair_style = GlobalFuncs.sanitize_inlist( this.facial_hair_style, GlobalVars.facial_hair_styles_female_list );
				this.underwear = GlobalFuncs.sanitize_inlist( this.underwear, GlobalVars.underwear_f );
				this.undershirt = GlobalFuncs.sanitize_inlist( this.undershirt, GlobalVars.undershirt_f );
			}
			this.socks = GlobalFuncs.sanitize_inlist( this.socks, GlobalVars.socks_list );
			this.age = GlobalFuncs.sanitize_integer( this.age, 17, 85, Lang13.Initial( this, "age" ) );
			this.hair_color = GlobalFuncs.sanitize_hexcolor( this.hair_color, 3, false );
			this.facial_hair_color = GlobalFuncs.sanitize_hexcolor( this.facial_hair_color, 3, false );
			this.eye_color = GlobalFuncs.sanitize_hexcolor( this.eye_color, 3, false );
			this.skin_tone = GlobalFuncs.sanitize_inlist( this.skin_tone, GlobalVars.skin_tones );
			this.backbag = GlobalFuncs.sanitize_inlist( this.backbag, GlobalVars.backbaglist, Lang13.Initial( this, "backbag" ) );
			this.features["mcolor"] = GlobalFuncs.sanitize_hexcolor( this.features["mcolor"], 3, false );
			this.features["tail_lizard"] = GlobalFuncs.sanitize_inlist( this.features["tail_lizard"], GlobalVars.tails_list_lizard );
			this.features["tail_human"] = GlobalFuncs.sanitize_inlist( this.features["tail_human"], GlobalVars.tails_list_human, "None" );
			this.features["snout"] = GlobalFuncs.sanitize_inlist( this.features["snout"], GlobalVars.snouts_list );
			this.features["horns"] = GlobalFuncs.sanitize_inlist( this.features["horns"], GlobalVars.horns_list );
			this.features["ears"] = GlobalFuncs.sanitize_inlist( this.features["ears"], GlobalVars.ears_list, "None" );
			this.features["frills"] = GlobalFuncs.sanitize_inlist( this.features["frills"], GlobalVars.frills_list );
			this.features["spines"] = GlobalFuncs.sanitize_inlist( this.features["spines"], GlobalVars.spines_list );
			this.features["body_markings"] = GlobalFuncs.sanitize_inlist( this.features["body_markings"], GlobalVars.body_markings_list );
			this.userandomjob = GlobalFuncs.sanitize_integer( this.userandomjob, 0, 1, Lang13.Initial( this, "userandomjob" ) );
			this.job_civilian_high = GlobalFuncs.sanitize_integer( this.job_civilian_high, 0, 65535, Lang13.Initial( this, "job_civilian_high" ) );
			this.job_civilian_med = GlobalFuncs.sanitize_integer( this.job_civilian_med, 0, 65535, Lang13.Initial( this, "job_civilian_med" ) );
			this.job_civilian_low = GlobalFuncs.sanitize_integer( this.job_civilian_low, 0, 65535, Lang13.Initial( this, "job_civilian_low" ) );
			this.job_medsci_high = GlobalFuncs.sanitize_integer( this.job_medsci_high, 0, 65535, Lang13.Initial( this, "job_medsci_high" ) );
			this.job_medsci_med = GlobalFuncs.sanitize_integer( this.job_medsci_med, 0, 65535, Lang13.Initial( this, "job_medsci_med" ) );
			this.job_medsci_low = GlobalFuncs.sanitize_integer( this.job_medsci_low, 0, 65535, Lang13.Initial( this, "job_medsci_low" ) );
			this.job_engsec_high = GlobalFuncs.sanitize_integer( this.job_engsec_high, 0, 65535, Lang13.Initial( this, "job_engsec_high" ) );
			this.job_engsec_med = GlobalFuncs.sanitize_integer( this.job_engsec_med, 0, 65535, Lang13.Initial( this, "job_engsec_med" ) );
			this.job_engsec_low = GlobalFuncs.sanitize_integer( this.job_engsec_low, 0, 65535, Lang13.Initial( this, "job_engsec_low" ) );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool save_preferences(  ) {
			SaveFile S = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/";
			S["version"] = 13;
			S["ooccolor"] = this.ooccolor;
			S["lastchangelog"] = this.lastchangelog;
			S["UI_style"] = this.UI_style;
			S["hotkeys"] = this.hotkeys;
			S["tgui_fancy"] = this.tgui_fancy;
			S["tgui_lock"] = this.tgui_lock;
			S["be_special"] = this.be_special;
			S["default_slot"] = this.default_slot;
			S["toggles"] = this.toggles;
			S["chat_toggles"] = this.chat_toggles;
			S["ghost_form"] = this.ghost_form;
			S["ghost_orbit"] = this.ghost_orbit;
			S["preferred_map"] = this.preferred_map;
			S["ignoring"] = this.ignoring;
			S["ghost_hud"] = this.ghost_hud;
			S["inquisitive_ghost"] = this.inquisitive_ghost;
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool load_preferences(  ) {
			SaveFile S = null;
			int needs_update = 0;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}

			if ( !File13.Exists( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/";
			needs_update = this.savefile_needs_update( S );

			if ( needs_update == -2 ) {
				return false;
			}
			this.ooccolor = S.ReadItem( "ooccolor", this.ooccolor );
			this.lastchangelog = S.ReadItem( "lastchangelog", this.lastchangelog );
			this.UI_style = S.ReadItem( "UI_style", this.UI_style );
			this.hotkeys = S.ReadItem( "hotkeys", this.hotkeys );
			this.tgui_fancy = S.ReadItem( "tgui_fancy", this.tgui_fancy );
			this.tgui_lock = S.ReadItem( "tgui_lock", this.tgui_lock );

			if ( S["be_special"] is ByTable ) {
				this.be_special = S.ReadItem( "be_special", this.be_special );
			} else {
				needs_update = 11;
				this.old_be_special = S.ReadItem( "be_special", this.old_be_special );
			}
			this.default_slot = S.ReadItem( "default_slot", this.default_slot );
			this.chat_toggles = S.ReadItem( "chat_toggles", this.chat_toggles );
			this.toggles = S.ReadItem( "toggles", this.toggles );
			this.ghost_form = S.ReadItem( "ghost_form", this.ghost_form );
			this.ghost_orbit = S.ReadItem( "ghost_orbit", this.ghost_orbit );
			this.preferred_map = S.ReadItem( "preferred_map", this.preferred_map );
			this.ignoring = S.ReadItem( "ignoring", this.ignoring );
			this.ghost_hud = S.ReadItem( "ghost_hud", this.ghost_hud );
			this.inquisitive_ghost = S.ReadItem( "inquisitive_ghost", this.inquisitive_ghost );

			if ( needs_update >= 0 ) {
				this.update_preferences( needs_update );
				this.update_antagchoices( needs_update );
			}
			this.ooccolor = GlobalFuncs.sanitize_ooccolor( GlobalFuncs.sanitize_hexcolor( this.ooccolor, 6, true, Lang13.Initial( this, "ooccolor" ) ) );
			this.lastchangelog = GlobalFuncs.sanitize_text( this.lastchangelog, Lang13.Initial( this, "lastchangelog" ) );
			this.UI_style = GlobalFuncs.sanitize_inlist( this.UI_style, new ByTable(new object [] { "Midnight", "Plasmafire", "Retro", "Slimecore", "Operative" }), Lang13.Initial( this, "UI_style" ) );
			this.hotkeys = GlobalFuncs.sanitize_integer( this.hotkeys, 0, 1, Lang13.Initial( this, "hotkeys" ) );
			this.tgui_fancy = GlobalFuncs.sanitize_integer( this.tgui_fancy, 0, 1, Lang13.Initial( this, "tgui_fancy" ) );
			this.tgui_lock = GlobalFuncs.sanitize_integer( this.tgui_lock, 0, 1, Lang13.Initial( this, "tgui_lock" ) );
			this.default_slot = GlobalFuncs.sanitize_integer( this.default_slot, 1, this.max_save_slots, Lang13.Initial( this, "default_slot" ) );
			this.toggles = GlobalFuncs.sanitize_integer( this.toggles, 0, 65535, Lang13.Initial( this, "toggles" ) );
			this.ghost_form = GlobalFuncs.sanitize_inlist( this.ghost_form, GlobalVars.ghost_forms, Lang13.Initial( this, "ghost_form" ) );
			this.ghost_orbit = GlobalFuncs.sanitize_inlist( this.ghost_orbit, GlobalVars.ghost_orbits, Lang13.Initial( this, "ghost_orbit" ) );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public void load_path( string ckey = null, string filename = null ) {
			filename = filename ?? "preferences.sav";

			
			if ( !Lang13.Bool( ckey ) ) {
				return;
			}
			this.path = "data/player_saves/" + String13.SubStr( ckey, 1, 2 ) + "/" + ckey + "/" + filename;
			return;
		}

		// Function from file: preferences_savefile.dm
		public void update_character( int current_version = 0 ) {
			
			if ( current_version < 9 ) {
				
				if ( this.gender == GlobalVars.MALE ) {
					
					dynamic _a = this.underwear; // Was a switch-case, sorry for the mess.
					if ( _a==1 ) {
						this.underwear = "Mens White";
					} else if ( _a==2 ) {
						this.underwear = "Mens Grey";
					} else if ( _a==3 ) {
						this.underwear = "Mens Green";
					} else if ( _a==4 ) {
						this.underwear = "Mens Blue";
					} else if ( _a==5 ) {
						this.underwear = "Mens Black";
					} else if ( _a==6 ) {
						this.underwear = "Mankini";
					} else if ( _a==7 ) {
						this.underwear = "Mens Hearts Boxer";
					} else if ( _a==8 ) {
						this.underwear = "Mens Black Boxer";
					} else if ( _a==9 ) {
						this.underwear = "Mens Grey Boxer";
					} else if ( _a==10 ) {
						this.underwear = "Mens Striped Boxer";
					} else if ( _a==11 ) {
						this.underwear = "Mens Kinky";
					} else if ( _a==12 ) {
						this.underwear = "Mens Red";
					} else if ( _a==13 ) {
						this.underwear = "Nude";
					}
				} else {
					
					dynamic _b = this.underwear; // Was a switch-case, sorry for the mess.
					if ( _b==1 ) {
						this.underwear = "Ladies Red";
					} else if ( _b==2 ) {
						this.underwear = "Ladies White";
					} else if ( _b==3 ) {
						this.underwear = "Ladies Yellow";
					} else if ( _b==4 ) {
						this.underwear = "Ladies Blue";
					} else if ( _b==5 ) {
						this.underwear = "Ladies Black";
					} else if ( _b==6 ) {
						this.underwear = "Ladies Thong";
					} else if ( _b==7 ) {
						this.underwear = "Babydoll";
					} else if ( _b==8 ) {
						this.underwear = "Ladies Baby-Blue";
					} else if ( _b==9 ) {
						this.underwear = "Ladies Green";
					} else if ( _b==10 ) {
						this.underwear = "Ladies Pink";
					} else if ( _b==11 ) {
						this.underwear = "Ladies Kinky";
					} else if ( _b==12 ) {
						this.underwear = "Tankini";
					} else if ( _b==13 ) {
						this.underwear = "Nude";
					}
				}
			}

			if ( Lang13.Bool( this.pref_species ) && !GlobalVars.roundstart_species.Contains( this.pref_species.id ) ) {
				this.pref_species = new Species_Human();
			}

			if ( current_version < 13 || !( this.backbag is string ) ) {
				
				dynamic _c = this.backbag; // Was a switch-case, sorry for the mess.
				if ( _c==2 ) {
					this.backbag = "Grey Satchel";
				} else {
					this.backbag = "Grey Backpack";
				}
			}
			return;
		}

		// Function from file: preferences_savefile.dm
		public void update_preferences( int current_version = 0 ) {
			
			if ( current_version < 10 ) {
				this.toggles |= 16;
			}

			if ( current_version < 11 ) {
				this.chat_toggles = 1023;
				this.toggles = 3071;
			}

			if ( current_version < 12 ) {
				this.ignoring = new ByTable();
			}
			return;
		}

		// Function from file: preferences_savefile.dm
		public void update_antagchoices( int current_version = 0 ) {
			bool B_traitor = false;
			int B_operative = 0;
			int B_changeling = 0;
			int B_wizard = 0;
			int B_malf = 0;
			int B_rev = 0;
			int B_alien = 0;
			int B_pai = 0;
			int B_cultist = 0;
			int B_blob = 0;
			int B_ninja = 0;
			int B_monkey = 0;
			int B_gang = 0;
			int B_shadowling = 0;
			int B_abductor = 0;
			int B_revenant = 0;
			ByTable archived = null;
			dynamic flag = null;

			
			if ( ( !( this.be_special is ByTable ) || this.old_be_special ) && current_version < 12 ) {
				B_traitor = true;
				B_operative = 2;
				B_changeling = 4;
				B_wizard = 8;
				B_malf = 16;
				B_rev = 32;
				B_alien = 64;
				B_pai = 128;
				B_cultist = 256;
				B_blob = 512;
				B_ninja = 1024;
				B_monkey = 2048;
				B_gang = 4096;
				B_shadowling = 8192;
				B_abductor = 16384;
				B_revenant = 32768;
				archived = new ByTable(new object [] { B_traitor, B_operative, B_changeling, B_wizard, B_malf, B_rev, B_alien, B_pai, B_cultist, B_blob, B_ninja, B_monkey, B_gang, B_shadowling, B_abductor, B_revenant });
				this.be_special = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( archived )) {
					flag = _b;
					

					if ( ( ( this.old_be_special ?1:0) & Convert.ToInt32( flag ) ) != 0 ) {
						
						dynamic _a = flag; // Was a switch-case, sorry for the mess.
						if ( _a==1 ) {
							this.be_special.Add( "traitor" );
						} else if ( _a==2 ) {
							this.be_special.Add( "operative" );
						} else if ( _a==4 ) {
							this.be_special.Add( "changeling" );
						} else if ( _a==8 ) {
							this.be_special.Add( "wizard" );
						} else if ( _a==16 ) {
							this.be_special.Add( "malf AI" );
						} else if ( _a==32 ) {
							this.be_special.Add( "revolutionary" );
						} else if ( _a==64 ) {
							this.be_special.Add( "xenomorph" );
						} else if ( _a==128 ) {
							this.be_special.Add( "pAI" );
						} else if ( _a==256 ) {
							this.be_special.Add( "cultist" );
						} else if ( _a==512 ) {
							this.be_special.Add( "blob" );
						} else if ( _a==1024 ) {
							this.be_special.Add( "space ninja" );
						} else if ( _a==2048 ) {
							this.be_special.Add( "monkey" );
						} else if ( _a==4096 ) {
							this.be_special.Add( "gangster" );
						} else if ( _a==8192 ) {
							this.be_special.Add( "shadowling" );
						} else if ( _a==16384 ) {
							this.be_special.Add( "abductor" );
						} else if ( _a==32768 ) {
							this.be_special.Add( "revenant" );
						}
					}
				}
			}
			return;
		}

		// Function from file: preferences_savefile.dm
		public int savefile_needs_update( SaveFile S = null ) {
			int savefile_version = 0;

			savefile_version = S.ReadItem( "version", savefile_version );

			if ( savefile_version < 8 ) {
				S.dir.Cut();
				return -2;
			}

			if ( savefile_version < 13 ) {
				return savefile_version;
			}
			return -1;
		}

		// Function from file: preferences.dm
		public void copy_to( dynamic character = null, bool? icon_updates = null ) {
			icon_updates = icon_updates ?? true;

			int firstspace = 0;
			int name_length = 0;
			Type chosen_species = null;

			
			if ( Lang13.Bool( this.be_random_name ) ) {
				this.real_name = ((Species)this.pref_species).random_name( this.gender );
			}

			if ( Lang13.Bool( this.be_random_body ) ) {
				this.random_character( this.gender );
			}

			if ( GlobalVars.config.humans_need_surnames ) {
				firstspace = String13.FindIgnoreCase( this.real_name, " ", 1, 0 );
				name_length = Lang13.Length( this.real_name );

				if ( !( firstspace != 0 ) ) {
					this.real_name += " " + Rand13.PickFromTable( GlobalVars.last_names );
				} else if ( firstspace == name_length ) {
					this.real_name += "" + Rand13.PickFromTable( GlobalVars.last_names );
				}
			}
			character.real_name = this.real_name;
			character.name = character.real_name;
			character.gender = this.gender;
			character.age = this.age;
			character.eye_color = this.eye_color;
			character.hair_color = this.hair_color;
			character.facial_hair_color = this.facial_hair_color;
			character.skin_tone = this.skin_tone;
			character.hair_style = this.hair_style;
			character.facial_hair_style = this.facial_hair_style;
			character.underwear = this.underwear;
			character.undershirt = this.undershirt;
			character.socks = this.socks;
			character.backbag = this.backbag;
			character.dna.blood_type = this.blood_type;
			character.dna.features = this.features.Copy();
			character.dna.real_name = character.real_name;

			if ( this.pref_species != typeof(Species_Human) && GlobalVars.config.mutant_races ) {
				chosen_species = this.pref_species.type;
			} else {
				chosen_species = typeof(Species_Human);
			}
			((Mob)character).set_species( chosen_species, false );

			if ( icon_updates == true ) {
				((Mob_Living_Carbon_Human)character).update_body();
				((Mob)character).update_hair();
				((Mob_Living_Carbon_Human)character).update_mutcolor();
			}
			return;
		}

		// Function from file: preferences.dm
		public bool process_link( Mob user = null, ByTable href_list = null ) {
			string job = null;
			string sql_ckey = null;
			DBQuery query_get_jobban = null;
			dynamic err = null;
			dynamic reason = null;
			dynamic bantime = null;
			string duration = null;
			dynamic expiration_time = null;
			dynamic a_ckey = null;
			string text = null;
			dynamic new_form = null;
			dynamic new_orbit = null;
			string new_name = null;
			dynamic new_age = null;
			dynamic new_metadata = null;
			dynamic new_hair = null;
			dynamic new_hair_style = null;
			dynamic new_facial = null;
			dynamic new_facial_hair_style = null;
			dynamic new_underwear = null;
			dynamic new_undershirt = null;
			dynamic new_socks = null;
			dynamic new_eyes = null;
			dynamic result = null;
			dynamic newtype = null;
			string temp_hsv = null;
			dynamic new_mutantcolor = null;
			string temp_hsv2 = null;
			dynamic new_tail = null;
			dynamic new_tail2 = null;
			dynamic new_snout = null;
			dynamic new_horns = null;
			dynamic new_ears = null;
			dynamic new_frills = null;
			dynamic new_spines = null;
			dynamic new_body_markings = null;
			dynamic new_s_tone = null;
			dynamic new_ooccolor = null;
			dynamic new_backbag = null;
			string new_clown_name = null;
			string new_mime_name = null;
			string new_ai_name = null;
			string new_cyborg_name = null;
			string new_religion_name = null;
			string new_deity_name = null;
			ByTable maplist = null;
			string __default = null;
			dynamic M = null;
			Votablemap VM = null;
			string friendlyname = null;
			dynamic pickedmap = null;
			dynamic be_special_type = null;

			
			if ( Lang13.Bool( href_list["jobbancheck"] ) ) {
				job = GlobalFuncs.sanitizeSQL( href_list["jobbancheck"] );
				sql_ckey = GlobalFuncs.sanitizeSQL( user.ckey );
				query_get_jobban = GlobalVars.dbcon.NewQuery( "SELECT reason, bantime, duration, expiration_time, a_ckey FROM " + GlobalFuncs.format_table_name( "ban" ) + " WHERE ckey = '" + sql_ckey + "' AND job = '" + job + "' AND (bantype = 'JOB_PERMABAN'  OR (bantype = 'JOB_TEMPBAN' AND expiration_time > Now())) AND isnull(unbanned)" );

				if ( !query_get_jobban.Execute() ) {
					err = query_get_jobban.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining reason from ban table. Error : [" + err + "]\n" );
					return false;
				}

				if ( query_get_jobban.NextRow() ) {
					reason = query_get_jobban.item[1];
					bantime = query_get_jobban.item[2];
					duration = query_get_jobban.item[3];
					expiration_time = query_get_jobban.item[4];
					a_ckey = query_get_jobban.item[5];
					text = "<span class='redtext'>You, or another user of this computer, (" + user.ckey + ") is banned from playing " + job + ". The ban reason is:<br>" + reason + "<br>This ban was applied by " + a_ckey + " on " + bantime;

					if ( ( String13.ParseNumber( duration ) ??0) > 0 ) {
						text += ". The ban is for " + duration + " minutes and expires on " + expiration_time + " (server time)";
					}
					text += ".</span>";
					user.WriteMsg( text );
				}
				return false;
			}

			if ( href_list["preference"] == "job" ) {
				
				dynamic _a = href_list["task"]; // Was a switch-case, sorry for the mess.
				if ( _a=="close" ) {
					Interface13.Browse( user, null, "window=mob_occupation" );
					this.ShowChoices( user );
				} else if ( _a=="reset" ) {
					this.ResetJobs();
					this.SetChoices( user );
				} else if ( _a=="random" ) {
					
					if ( GlobalFuncs.jobban_isbanned( user, "Assistant" ) ) {
						this.userandomjob = 1;
					} else {
						this.userandomjob = !Lang13.Bool( this.userandomjob );
					}
					this.SetChoices( user );
				} else if ( _a=="setJobLevel" ) {
					this.UpdateJobPreference( user, href_list["text"], String13.ParseNumber( href_list["level"] ) );
				} else {
					this.SetChoices( user );
				}
				return true;
			}

			dynamic _g = href_list["task"]; // Was a switch-case, sorry for the mess.
			if ( _g=="random" ) {
				
				dynamic _b = href_list["preference"]; // Was a switch-case, sorry for the mess.
				if ( _b=="name" ) {
					this.real_name = ((Species)this.pref_species).random_name( this.gender, true );
				} else if ( _b=="age" ) {
					this.age = Rand13.Int( 17, 85 );
				} else if ( _b=="hair" ) {
					this.hair_color = GlobalFuncs.random_short_color();
				} else if ( _b=="hair_style" ) {
					this.hair_style = GlobalFuncs.random_hair_style( this.gender );
				} else if ( _b=="facial" ) {
					this.facial_hair_color = GlobalFuncs.random_short_color();
				} else if ( _b=="facial_hair_style" ) {
					this.facial_hair_style = GlobalFuncs.random_facial_hair_style( this.gender );
				} else if ( _b=="underwear" ) {
					this.underwear = GlobalFuncs.random_underwear( this.gender );
				} else if ( _b=="undershirt" ) {
					this.undershirt = GlobalFuncs.random_undershirt( this.gender );
				} else if ( _b=="socks" ) {
					this.socks = GlobalFuncs.random_socks();
				} else if ( _b=="eyes" ) {
					this.eye_color = GlobalFuncs.random_eye_color();
				} else if ( _b=="s_tone" ) {
					this.skin_tone = GlobalFuncs.random_skin_tone();
				} else if ( _b=="bag" ) {
					this.backbag = Rand13.PickFromTable( GlobalVars.backbaglist );
				} else if ( _b=="all" ) {
					this.random_character();
				}
			} else if ( _g=="input" ) {
				
				dynamic _d = href_list["preference"]; // Was a switch-case, sorry for the mess.
				if ( _d=="ghostform" ) {
					
					if ( Lang13.Bool( this.unlock_content ) ) {
						new_form = Interface13.Input( user, "Thanks for supporting BYOND - Choose your ghostly form:", "Thanks for supporting BYOND", null, GlobalVars.ghost_forms, InputType.Null | InputType.Any );

						if ( Lang13.Bool( new_form ) ) {
							this.ghost_form = new_form;
						}
					}
				} else if ( _d=="ghostorbit" ) {
					
					if ( Lang13.Bool( this.unlock_content ) ) {
						new_orbit = Interface13.Input( user, "Thanks for supporting BYOND - Choose your ghostly orbit:", "Thanks for supporting BYOND", null, GlobalVars.ghost_orbits, InputType.Null | InputType.Any );

						if ( Lang13.Bool( new_orbit ) ) {
							this.ghost_orbit = new_orbit;
						}
					}
				} else if ( _d=="name" ) {
					new_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's name:", "Character Preference", null, null, InputType.Str | InputType.Null ) );

					if ( Lang13.Bool( new_name ) ) {
						this.real_name = new_name;
					} else {
						user.WriteMsg( "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, -, ' and .</font>" );
					}
				} else if ( _d=="age" ) {
					new_age = Interface13.Input( user, "Choose your character's age:\n(" + 17 + "-" + 85 + ")", "Character Preference", null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( new_age ) ) {
						this.age = Num13.MaxInt( Num13.MinInt( Num13.Floor( String13.ParseNumber( new_age ) ??0 ), 85 ), 17 );
					}
				} else if ( _d=="metadata" ) {
					new_metadata = Interface13.Input( user, "Enter any information you'd like others to see, such as Roleplay-preferences:", "Game Preference", this.metadata, null, InputType.Null | InputType.StrMultiline );

					if ( Lang13.Bool( new_metadata ) ) {
						this.metadata = GlobalFuncs.sanitize( String13.SubStr( new_metadata, 1, 1024 ) );
					}
				} else if ( _d=="hair" ) {
					new_hair = Interface13.Input( user, "Choose your character's hair colour:", "Character Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_hair ) ) {
						this.hair_color = GlobalFuncs.sanitize_hexcolor( new_hair );
					}
				} else if ( _d=="hair_style" ) {
					new_hair_style = null;

					if ( this.gender == GlobalVars.MALE ) {
						new_hair_style = Interface13.Input( user, "Choose your character's hair style:", "Character Preference", null, GlobalVars.hair_styles_male_list, InputType.Null | InputType.Any );
					} else {
						new_hair_style = Interface13.Input( user, "Choose your character's hair style:", "Character Preference", null, GlobalVars.hair_styles_female_list, InputType.Null | InputType.Any );
					}

					if ( Lang13.Bool( new_hair_style ) ) {
						this.hair_style = new_hair_style;
					}
				} else if ( _d=="next_hair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.hair_style = GlobalFuncs.next_list_item( this.hair_style, GlobalVars.hair_styles_male_list );
					} else {
						this.hair_style = GlobalFuncs.next_list_item( this.hair_style, GlobalVars.hair_styles_female_list );
					}
				} else if ( _d=="previous_hair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.hair_style = GlobalFuncs.previous_list_item( this.hair_style, GlobalVars.hair_styles_male_list );
					} else {
						this.hair_style = GlobalFuncs.previous_list_item( this.hair_style, GlobalVars.hair_styles_female_list );
					}
				} else if ( _d=="facial" ) {
					new_facial = Interface13.Input( user, "Choose your character's facial-hair colour:", "Character Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_facial ) ) {
						this.facial_hair_color = GlobalFuncs.sanitize_hexcolor( new_facial );
					}
				} else if ( _d=="facial_hair_style" ) {
					new_facial_hair_style = null;

					if ( this.gender == GlobalVars.MALE ) {
						new_facial_hair_style = Interface13.Input( user, "Choose your character's facial-hair style:", "Character Preference", null, GlobalVars.facial_hair_styles_male_list, InputType.Null | InputType.Any );
					} else {
						new_facial_hair_style = Interface13.Input( user, "Choose your character's facial-hair style:", "Character Preference", null, GlobalVars.facial_hair_styles_female_list, InputType.Null | InputType.Any );
					}

					if ( Lang13.Bool( new_facial_hair_style ) ) {
						this.facial_hair_style = new_facial_hair_style;
					}
				} else if ( _d=="next_facehair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.facial_hair_style = GlobalFuncs.next_list_item( this.facial_hair_style, GlobalVars.facial_hair_styles_male_list );
					} else {
						this.facial_hair_style = GlobalFuncs.next_list_item( this.facial_hair_style, GlobalVars.facial_hair_styles_female_list );
					}
				} else if ( _d=="previous_facehair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.facial_hair_style = GlobalFuncs.previous_list_item( this.facial_hair_style, GlobalVars.facial_hair_styles_male_list );
					} else {
						this.facial_hair_style = GlobalFuncs.previous_list_item( this.facial_hair_style, GlobalVars.facial_hair_styles_female_list );
					}
				} else if ( _d=="underwear" ) {
					new_underwear = null;

					if ( this.gender == GlobalVars.MALE ) {
						new_underwear = Interface13.Input( user, "Choose your character's underwear:", "Character Preference", null, GlobalVars.underwear_m, InputType.Null | InputType.Any );
					} else {
						new_underwear = Interface13.Input( user, "Choose your character's underwear:", "Character Preference", null, GlobalVars.underwear_f, InputType.Null | InputType.Any );
					}

					if ( Lang13.Bool( new_underwear ) ) {
						this.underwear = new_underwear;
					}
				} else if ( _d=="undershirt" ) {
					new_undershirt = null;

					if ( this.gender == GlobalVars.MALE ) {
						new_undershirt = Interface13.Input( user, "Choose your character's undershirt:", "Character Preference", null, GlobalVars.undershirt_m, InputType.Null | InputType.Any );
					} else {
						new_undershirt = Interface13.Input( user, "Choose your character's undershirt:", "Character Preference", null, GlobalVars.undershirt_f, InputType.Null | InputType.Any );
					}

					if ( Lang13.Bool( new_undershirt ) ) {
						this.undershirt = new_undershirt;
					}
				} else if ( _d=="socks" ) {
					new_socks = null;
					new_socks = Interface13.Input( user, "Choose your character's socks:", "Character Preference", null, GlobalVars.socks_list, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_socks ) ) {
						this.socks = new_socks;
					}
				} else if ( _d=="eyes" ) {
					new_eyes = Interface13.Input( user, "Choose your character's eye colour:", "Character Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_eyes ) ) {
						this.eye_color = GlobalFuncs.sanitize_hexcolor( new_eyes );
					}
				} else if ( _d=="species" ) {
					result = Interface13.Input( user, "Select a species", "Species Selection", null, GlobalVars.roundstart_species, InputType.Null | InputType.Any );

					if ( Lang13.Bool( result ) ) {
						newtype = GlobalVars.roundstart_species[result];
						this.pref_species = Lang13.Call( newtype );
						temp_hsv = GlobalFuncs.RGBtoHSV( this.features["mcolor"] );

						if ( this.features["mcolor"] == "#000" || !this.pref_species.specflags.Contains( 32768 ) && Convert.ToDouble( GlobalFuncs.ReadHSV( temp_hsv )[3] ) < Convert.ToDouble( GlobalFuncs.ReadHSV( "#7F7F7F" )[3] ) ) {
							this.features["mcolor"] = this.pref_species.default_color;
						}
					}
				} else if ( _d=="mutant_color" ) {
					new_mutantcolor = Interface13.Input( user, "Choose your character's alien/mutant color:", "Character Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_mutantcolor ) ) {
						temp_hsv2 = GlobalFuncs.RGBtoHSV( new_mutantcolor );

						if ( new_mutantcolor == "#000000" ) {
							this.features["mcolor"] = this.pref_species.default_color;
						} else if ( this.pref_species.specflags.Contains( 32768 ) || Convert.ToDouble( GlobalFuncs.ReadHSV( temp_hsv2 )[3] ) >= Convert.ToDouble( GlobalFuncs.ReadHSV( "#7F7F7F" )[3] ) ) {
							this.features["mcolor"] = GlobalFuncs.sanitize_hexcolor( new_mutantcolor );
						} else {
							user.WriteMsg( "<span class='danger'>Invalid color. Your color is not bright enough.</span>" );
						}
					}
				} else if ( _d=="tail_lizard" ) {
					new_tail = null;
					new_tail = Interface13.Input( user, "Choose your character's tail:", "Character Preference", null, GlobalVars.tails_list_lizard, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_tail ) ) {
						this.features["tail_lizard"] = new_tail;
					}
				} else if ( _d=="tail_human" ) {
					new_tail2 = null;
					new_tail2 = Interface13.Input( user, "Choose your character's tail:", "Character Preference", null, GlobalVars.tails_list_human, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_tail2 ) ) {
						this.features["tail_human"] = new_tail2;
					}
				} else if ( _d=="snout" ) {
					new_snout = null;
					new_snout = Interface13.Input( user, "Choose your character's snout:", "Character Preference", null, GlobalVars.snouts_list, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_snout ) ) {
						this.features["snout"] = new_snout;
					}
				} else if ( _d=="horns" ) {
					new_horns = null;
					new_horns = Interface13.Input( user, "Choose your character's horns:", "Character Preference", null, GlobalVars.horns_list, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_horns ) ) {
						this.features["horns"] = new_horns;
					}
				} else if ( _d=="ears" ) {
					new_ears = null;
					new_ears = Interface13.Input( user, "Choose your character's ears:", "Character Preference", null, GlobalVars.ears_list, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_ears ) ) {
						this.features["ears"] = new_ears;
					}
				} else if ( _d=="frills" ) {
					new_frills = null;
					new_frills = Interface13.Input( user, "Choose your character's frills:", "Character Preference", null, GlobalVars.frills_list, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_frills ) ) {
						this.features["frills"] = new_frills;
					}
				} else if ( _d=="spines" ) {
					new_spines = null;
					new_spines = Interface13.Input( user, "Choose your character's spines:", "Character Preference", null, GlobalVars.spines_list, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_spines ) ) {
						this.features["spines"] = new_spines;
					}
				} else if ( _d=="body_markings" ) {
					new_body_markings = null;
					new_body_markings = Interface13.Input( user, "Choose your character's body markings:", "Character Preference", null, GlobalVars.body_markings_list, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_body_markings ) ) {
						this.features["body_markings"] = new_body_markings;
					}
				} else if ( _d=="s_tone" ) {
					new_s_tone = Interface13.Input( user, "Choose your character's skin-tone:", "Character Preference", null, GlobalVars.skin_tones, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_s_tone ) ) {
						this.skin_tone = new_s_tone;
					}
				} else if ( _d=="ooccolor" ) {
					new_ooccolor = Interface13.Input( user, "Choose your OOC colour:", "Game Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_ooccolor ) ) {
						this.ooccolor = GlobalFuncs.sanitize_ooccolor( new_ooccolor );
					}
				} else if ( _d=="bag" ) {
					new_backbag = Interface13.Input( user, "Choose your character's style of bag:", "Character Preference", null, GlobalVars.backbaglist, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_backbag ) ) {
						this.backbag = new_backbag;
					}
				} else if ( _d=="clown_name" ) {
					new_clown_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's clown name:", "Character Preference", null, null, InputType.Str | InputType.Null ) );

					if ( Lang13.Bool( new_clown_name ) ) {
						this.custom_names["clown"] = new_clown_name;
					} else {
						user.WriteMsg( "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, -, ' and .</font>" );
					}
				} else if ( _d=="mime_name" ) {
					new_mime_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's mime name:", "Character Preference", null, null, InputType.Str | InputType.Null ) );

					if ( Lang13.Bool( new_mime_name ) ) {
						this.custom_names["mime"] = new_mime_name;
					} else {
						user.WriteMsg( "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, -, ' and .</font>" );
					}
				} else if ( _d=="ai_name" ) {
					new_ai_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's AI name:", "Character Preference", null, null, InputType.Str | InputType.Null ), true );

					if ( Lang13.Bool( new_ai_name ) ) {
						this.custom_names["ai"] = new_ai_name;
					} else {
						user.WriteMsg( "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, 0-9, -, ' and .</font>" );
					}
				} else if ( _d=="cyborg_name" ) {
					new_cyborg_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's cyborg name:", "Character Preference", null, null, InputType.Str | InputType.Null ), true );

					if ( Lang13.Bool( new_cyborg_name ) ) {
						this.custom_names["cyborg"] = new_cyborg_name;
					} else {
						user.WriteMsg( "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, 0-9, -, ' and .</font>" );
					}
				} else if ( _d=="religion_name" ) {
					new_religion_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's religion:", "Character Preference", null, null, InputType.Str | InputType.Null ) );

					if ( Lang13.Bool( new_religion_name ) ) {
						this.custom_names["religion"] = new_religion_name;
					} else {
						user.WriteMsg( "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, -, ' and .</font>" );
					}
				} else if ( _d=="deity_name" ) {
					new_deity_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's deity:", "Character Preference", null, null, InputType.Str | InputType.Null ) );

					if ( Lang13.Bool( new_deity_name ) ) {
						this.custom_names["deity"] = new_deity_name;
					} else {
						user.WriteMsg( "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, -, ' and .</font>" );
					}
				} else if ( _d=="preferred_map" ) {
					maplist = new ByTable();
					__default = "Default";

					if ( GlobalVars.config.defaultmap != null ) {
						__default += " (" + GlobalVars.config.defaultmap.friendlyname + ")";
					}

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.config.maplist )) {
						M = _c;
						
						VM = GlobalVars.config.maplist[M];
						friendlyname = "" + VM.friendlyname + " ";

						if ( ( VM.voteweight ??0) <= 0 ) {
							friendlyname += " (disabled)";
						}
						maplist[friendlyname] = VM.name;
					}
					maplist[__default] = null;
					pickedmap = Interface13.Input( user, "Choose your preferred map. This will be used to help weight random map selection.", "Character Preference", null, maplist, InputType.Null | InputType.Any );

					if ( Lang13.Bool( pickedmap ) ) {
						this.preferred_map = maplist[pickedmap];
					}
				}
			} else {
				
				dynamic _f = href_list["preference"]; // Was a switch-case, sorry for the mess.
				if ( _f=="publicity" ) {
					
					if ( Lang13.Bool( this.unlock_content ) ) {
						this.toggles ^= 16;
					}
				} else if ( _f=="gender" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.gender = GlobalVars.FEMALE;
					} else {
						this.gender = GlobalVars.MALE;
					}
					this.underwear = GlobalFuncs.random_underwear( this.gender );
					this.undershirt = GlobalFuncs.random_undershirt( this.gender );
					this.socks = GlobalFuncs.random_socks();
					this.facial_hair_style = GlobalFuncs.random_facial_hair_style( this.gender );
					this.hair_style = GlobalFuncs.random_hair_style( this.gender );
				} else if ( _f=="ui" ) {
					
					dynamic _e = this.UI_style; // Was a switch-case, sorry for the mess.
					if ( _e=="Midnight" ) {
						this.UI_style = "Plasmafire";
					} else if ( _e=="Plasmafire" ) {
						this.UI_style = "Retro";
					} else if ( _e=="Retro" ) {
						this.UI_style = "Slimecore";
					} else if ( _e=="Slimecore" ) {
						this.UI_style = "Operative";
					} else {
						this.UI_style = "Midnight";
					}
				} else if ( _f=="hotkeys" ) {
					this.hotkeys = !Lang13.Bool( this.hotkeys );
				} else if ( _f=="tgui_fancy" ) {
					this.tgui_fancy = !Lang13.Bool( this.tgui_fancy );
				} else if ( _f=="tgui_lock" ) {
					this.tgui_lock = !Lang13.Bool( this.tgui_lock );
				} else if ( _f=="hear_adminhelps" ) {
					this.toggles ^= 1;
				} else if ( _f=="announce_login" ) {
					this.toggles ^= 1024;
				} else if ( _f=="be_special" ) {
					be_special_type = href_list["be_special_type"];

					if ( this.be_special.Contains( be_special_type ) ) {
						this.be_special.Remove( be_special_type );
					} else {
						this.be_special.Add( be_special_type );
					}
				} else if ( _f=="name" ) {
					this.be_random_name = !Lang13.Bool( this.be_random_name );
				} else if ( _f=="all" ) {
					this.be_random_body = !Lang13.Bool( this.be_random_body );
				} else if ( _f=="hear_midis" ) {
					this.toggles ^= 2;
				} else if ( _f=="lobby_music" ) {
					this.toggles ^= 8;

					if ( Lang13.Bool( this.toggles & 8 ) ) {
						user.WriteMsg( new Sound( GlobalVars.ticker.login_music, false, false, 1, 85 ) );
					} else {
						user.stopLobbySound();
					}
				} else if ( _f=="ghost_ears" ) {
					this.chat_toggles ^= 4;
				} else if ( _f=="ghost_sight" ) {
					this.chat_toggles ^= 8;
				} else if ( _f=="ghost_whispers" ) {
					this.chat_toggles ^= 128;
				} else if ( _f=="ghost_radio" ) {
					this.chat_toggles ^= 512;
				} else if ( _f=="ghost_pda" ) {
					this.chat_toggles ^= 256;
				} else if ( _f=="pull_requests" ) {
					this.chat_toggles ^= 64;
				} else if ( _f=="allow_midround_antag" ) {
					this.toggles ^= 64;
				} else if ( _f=="save" ) {
					this.save_preferences();
					this.save_character();
				} else if ( _f=="load" ) {
					this.load_preferences();
					this.load_character();
				} else if ( _f=="changeslot" ) {
					
					if ( !this.load_character( String13.ParseNumber( href_list["num"] ) ) ) {
						this.random_character();
						this.real_name = GlobalFuncs.random_unique_name( this.gender );
						this.save_character();
					}
				} else if ( _f=="tab" ) {
					
					if ( Lang13.Bool( href_list["tab"] ) ) {
						this.current_tab = String13.ParseNumber( href_list["tab"] );
					}
				}
			}
			this.ShowChoices( user );
			return true;
		}

		// Function from file: preferences.dm
		public dynamic GetJobDepartment( Job job = null, double level = 0 ) {
			
			if ( !( job != null ) || !( level != 0 ) ) {
				return 0;
			}

			switch ((int?)( job.department_flag )) {
				case 4:
					
					switch ((int)( level )) {
						case 1:
							return this.job_civilian_high;
							break;
						case 2:
							return this.job_civilian_med;
							break;
						case 3:
							return this.job_civilian_low;
							break;
					}
					break;
				case 2:
					
					switch ((int)( level )) {
						case 1:
							return this.job_medsci_high;
							break;
						case 2:
							return this.job_medsci_med;
							break;
						case 3:
							return this.job_medsci_low;
							break;
					}
					break;
				case 1:
					
					switch ((int)( level )) {
						case 1:
							return this.job_engsec_high;
							break;
						case 2:
							return this.job_engsec_med;
							break;
						case 3:
							return this.job_engsec_low;
							break;
					}
					break;
			}
			return 0;
		}

		// Function from file: preferences.dm
		public void ResetJobs(  ) {
			this.job_civilian_high = 0;
			this.job_civilian_med = 0;
			this.job_civilian_low = 0;
			this.job_medsci_high = 0;
			this.job_medsci_med = 0;
			this.job_medsci_low = 0;
			this.job_engsec_high = 0;
			this.job_engsec_med = 0;
			this.job_engsec_low = 0;
			return;
		}

		// Function from file: preferences.dm
		public bool UpdateJobPreference( Mob user = null, string role = null, double? desiredLvl = null ) {
			Job job = null;

			
			if ( !( GlobalVars.SSjob != null ) ) {
				return false;
			}
			job = GlobalVars.SSjob.GetJob( role );

			if ( !( job != null ) ) {
				Interface13.Browse( user, null, "window=mob_occupation" );
				this.ShowChoices( user );
				return false;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( desiredLvl ) ) ) {
				user.WriteMsg( "<span class='danger'>UpdateJobPreference - desired level was not a number. Please notify coders!</span>" );
				this.ShowChoices( user );
				return false;
			}

			if ( role == "Assistant" ) {
				
				if ( Lang13.Bool( this.job_civilian_low & job.flag ) ) {
					this.job_civilian_low &= ~job.flag;
				} else {
					this.job_civilian_low |= job.flag;
				}
				this.SetChoices( user );
				return true;
			}
			this.SetJobPreferenceLevel( job, desiredLvl );
			this.SetChoices( user );
			return true;
		}

		// Function from file: preferences.dm
		public bool SetJobPreferenceLevel( Job job = null, double? level = null ) {
			
			if ( !( job != null ) ) {
				return false;
			}

			if ( level == 1 ) {
				this.job_civilian_med |= this.job_civilian_high;
				this.job_engsec_med |= this.job_engsec_high;
				this.job_medsci_med |= this.job_medsci_high;
				this.job_civilian_high = 0;
				this.job_engsec_high = 0;
				this.job_medsci_high = 0;
			}

			if ( job.department_flag == GlobalVars.CIVILIAN ) {
				this.job_civilian_low &= ~job.flag;
				this.job_civilian_med &= ~job.flag;
				this.job_civilian_high &= ~job.flag;

				switch ((int?)( level )) {
					case 1:
						this.job_civilian_high |= job.flag;
						break;
					case 2:
						this.job_civilian_med |= job.flag;
						break;
					case 3:
						this.job_civilian_low |= job.flag;
						break;
				}
				return true;
			} else if ( job.department_flag == ( GlobalVars.ENGSEC ?1:0) ) {
				this.job_engsec_low &= ~job.flag;
				this.job_engsec_med &= ~job.flag;
				this.job_engsec_high &= ~job.flag;

				switch ((int?)( level )) {
					case 1:
						this.job_engsec_high |= job.flag;
						break;
					case 2:
						this.job_engsec_med |= job.flag;
						break;
					case 3:
						this.job_engsec_low |= job.flag;
						break;
				}
				return true;
			} else if ( job.department_flag == GlobalVars.MEDSCI ) {
				this.job_medsci_low &= ~job.flag;
				this.job_medsci_med &= ~job.flag;
				this.job_medsci_high &= ~job.flag;

				switch ((int?)( level )) {
					case 1:
						this.job_medsci_high |= job.flag;
						break;
					case 2:
						this.job_medsci_med |= job.flag;
						break;
					case 3:
						this.job_medsci_low |= job.flag;
						break;
				}
				return true;
			}
			return false;
		}

		// Function from file: preferences.dm
		public void SetChoices( Mob user = null, int? limit = null, ByTable splitJobs = null, int? widthPerColumn = null, int? height = null ) {
			limit = limit ?? 17;
			splitJobs = splitJobs ?? new ByTable(new object [] { "Chief Engineer" });
			widthPerColumn = widthPerColumn ?? 295;
			height = height ?? 620;

			int? width = null;
			string HTML = null;
			int? index = null;
			Job lastJob = null;
			Job job = null;
			int? i = null;
			string rank = null;
			int available_in_days = 0;
			string prefLevelLabel = null;
			string prefLevelColor = null;
			int prefUpperLevel = 0;
			int prefLowerLevel = 0;
			int? i2 = null;
			Browser popup = null;

			
			if ( !( GlobalVars.SSjob != null ) ) {
				return;
			}
			width = widthPerColumn;
			HTML = "<center>";
			HTML += "<b>Choose occupation chances</b><br>";
			HTML += "<div align='center'>Left-click to raise an occupation preference, right-click to lower it.<br></div>";
			HTML += "<center><a href='?_src_=prefs;preference=job;task=close'>Done</a></center><br>";
			HTML += "<script type='text/javascript'>function setJobPrefRedirect(level, rank) { window.location.href='?_src_=prefs;preference=job;task=setJobLevel;level=' + level + ';text=' + encodeURIComponent(rank); return false; }</script>";
			HTML += "<table width='100%' cellpadding='1' cellspacing='0'><tr><td width='20%'>";
			HTML += "<table width='100%' cellpadding='1' cellspacing='0'>";
			index = -1;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
				job = _a;
				
				index += 1;

				if ( ( index ??0) >= ( limit ??0) || splitJobs.Contains( job.title ) ) {
					width += widthPerColumn ??0;

					if ( ( index ??0) < ( limit ??0) && lastJob != null ) {
						i = null;
						i = 0;

						while (( i ??0) < ( limit ??0) - ( index ??0)) {
							HTML += "<tr bgcolor='" + lastJob.selection_color + "'><td width='60%' align='right'>&nbsp</td><td>&nbsp</td></tr>";
							i += 1;
						}
					}
					HTML += "</table></td><td width='20%'><table width='100%' cellpadding='1' cellspacing='0'>";
					index = 0;
				}
				HTML += "<tr bgcolor='" + job.selection_color + "'><td width='60%' align='right'>";
				rank = job.title;
				lastJob = job;

				if ( GlobalFuncs.jobban_isbanned( user, rank ) ) {
					HTML += "<font color=red>" + rank + "</font></td><td><a href='?_src_=prefs;jobbancheck=" + rank + "'> BANNED</a></td></tr>";
					continue;
				}

				if ( !job.player_old_enough( user.client ) ) {
					available_in_days = job.available_in_days( user.client );
					HTML += "<font color=red>" + rank + "</font></td><td><font color=red> [IN " + available_in_days + " DAYS]</font></td></tr>";
					continue;
				}

				if ( Lang13.Bool( this.job_civilian_low & 8192 ) && rank != "Assistant" && !GlobalFuncs.jobban_isbanned( user, "Assistant" ) ) {
					HTML += "<font color=orange>" + rank + "</font></td><td></td></tr>";
					continue;
				}

				if ( GlobalVars.config.enforce_human_authority && !((Species)user.client.prefs.pref_species).qualifies_for_rank( rank, user.client.prefs.features ) ) {
					
					if ( user.client.prefs.pref_species.id == "human" ) {
						HTML += "<font color=red>" + rank + "</font></td><td><font color=red><b> [MUTANT]</b></font></td></tr>";
					} else {
						HTML += "<font color=red>" + rank + "</font></td><td><font color=red><b> [NON-HUMAN]</b></font></td></tr>";
					}
					continue;
				}

				if ( GlobalVars.command_positions.Contains( rank ) || rank == "AI" ) {
					HTML += "<b><span class='dark'>" + rank + "</span></b>";
				} else {
					HTML += "<span class='dark'>" + rank + "</span>";
				}
				HTML += "</td><td width='40%'>";
				prefLevelLabel = "ERROR";
				prefLevelColor = "pink";
				prefUpperLevel = -1;
				prefLowerLevel = -1;

				if ( Lang13.Bool( this.GetJobDepartment( job, 1 ) & job.flag ) ) {
					prefLevelLabel = "High";
					prefLevelColor = "slateblue";
					prefUpperLevel = 4;
					prefLowerLevel = 2;
				} else if ( Lang13.Bool( this.GetJobDepartment( job, 2 ) & job.flag ) ) {
					prefLevelLabel = "Medium";
					prefLevelColor = "green";
					prefUpperLevel = 1;
					prefLowerLevel = 3;
				} else if ( Lang13.Bool( this.GetJobDepartment( job, 3 ) & job.flag ) ) {
					prefLevelLabel = "Low";
					prefLevelColor = "orange";
					prefUpperLevel = 2;
					prefLowerLevel = 4;
				} else {
					prefLevelLabel = "NEVER";
					prefLevelColor = "red";
					prefUpperLevel = 3;
					prefLowerLevel = 1;
				}
				HTML += "<a class='white' href='?_src_=prefs;preference=job;task=setJobLevel;level=" + prefUpperLevel + ";text=" + rank + "' oncontextmenu='javascript:return setJobPrefRedirect(" + prefLowerLevel + ", \"" + rank + "\");'>";

				if ( rank == "Assistant" ) {
					
					if ( Lang13.Bool( this.job_civilian_low & 8192 ) ) {
						HTML += "<font color=green>Yes</font>";
					} else {
						HTML += "<font color=red>No</font>";
					}
					HTML += "</a></td></tr>";
					continue;
				}
				HTML += "<font color=" + prefLevelColor + ">" + prefLevelLabel + "</font>";
				HTML += "</a></td></tr>";
			}
			i2 = null;
			i2 = 1;

			while (( i2 ??0) < ( limit ??0) - ( index ??0)) {
				HTML += "<tr bgcolor='" + lastJob.selection_color + "'><td width='60%' align='right'>&nbsp</td><td>&nbsp</td></tr>";
				i2 += 1;
			}
			HTML += "</td'></tr></table>";
			HTML += "</center></table>";
			HTML += "<center><br><a href='?_src_=prefs;preference=job;task=random'>" + ( Lang13.Bool( this.userandomjob ) ? "Get random job if preferences unavailable" : "Be an Assistant if preference unavailable" ) + "</a></center>";
			HTML += "<center><a href='?_src_=prefs;preference=job;task=reset'>Reset Preferences</a></center>";
			Interface13.Browse( user, null, "window=preferences" );
			popup = new Browser( user, "mob_occupation", "<div align='center'>Occupation Preferences</div>", width, height );
			popup.set_window_options( "can_close=0" );
			popup.set_content( HTML );
			popup.open( false );
			return;
		}

		// Function from file: preferences.dm
		public void ShowChoices( Mob user = null ) {
			string dat = null;
			SaveFile S = null;
			string name = null;
			double? i = null;
			dynamic i2 = null;
			int? days_remaining = null;
			dynamic mode_path = null;
			dynamic temp_mode = null;
			Browser popup = null;

			
			if ( !( user != null ) || !( user.client != null ) ) {
				return;
			}
			this.update_preview_icon();
			Interface13.CacheBrowseResource( user, this.preview_icon, "previewicon.png" );
			dat = "<center>";
			dat += "<a href='?_src_=prefs;preference=tab;tab=0' " + ( this.current_tab == 0 ? "class='linkOn'" : "" ) + ">Character Settings</a> ";
			dat += "<a href='?_src_=prefs;preference=tab;tab=1' " + ( this.current_tab == 1 ? "class='linkOn'" : "" ) + ">Game Preferences</a>";

			if ( !Lang13.Bool( this.path ) ) {
				dat += "<div class='notice'>Please create an account to save your preferences</div>";
			}
			dat += "</center>";
			dat += "<HR>";

			switch ((int?)( this.current_tab )) {
				case 0:
					
					if ( Lang13.Bool( this.path ) ) {
						S = new SaveFile( this.path );

						if ( S != null ) {
							dat += "<center>";
							name = null;
							i = null;
							i = 1;

							while (( i ??0) <= ( this.max_save_slots ??0)) {
								S.cd = "/character" + i;
								name = S.ReadItem( "real_name", name );

								if ( !Lang13.Bool( name ) ) {
									name = "Character" + i;
								}
								dat += "<a style='white-space:nowrap;' href='?_src_=prefs;preference=changeslot;num=" + i + ";' " + ( i == this.default_slot ? "class='linkOn'" : "" ) + ">" + name + "</a> ";
								i++;
							}
							dat += "</center>";
						}
					}
					dat += "<center><h2>Occupation Choices</h2>";
					dat += "<a href='?_src_=prefs;preference=job;task=menu'>Set Occupation Preferences</a><br></center>";
					dat += "<h2>Identity</h2>";
					dat += "<table width='100%'><tr><td width='75%' valign='top'>";

					if ( Lang13.Bool( GlobalFuncs.appearance_isbanned( user ) ) ) {
						dat += "<b>You are banned from using custom names and appearances. You can continue to adjust your characters, but you will be randomised once you join the game.</b><br>";
					}
					dat += "<a href='?_src_=prefs;preference=name;task=random'>Random Name</A> ";
					dat += "<a href='?_src_=prefs;preference=name'>Always Random Name: " + ( Lang13.Bool( this.be_random_name ) ? "Yes" : "No" ) + "</a><BR>";
					dat += "<b>Name:</b> ";
					dat += "<a href='?_src_=prefs;preference=name;task=input'>" + this.real_name + "</a><BR>";
					dat += "<b>Gender:</b> <a href='?_src_=prefs;preference=gender'>" + ( this.gender == GlobalVars.MALE ? "Male" : "Female" ) + "</a><BR>";
					dat += "<b>Age:</b> <a href='?_src_=prefs;preference=age;task=input'>" + this.age + "</a><BR>";
					dat += "<b>Special Names:</b><BR>";
					dat += "<a href ='?_src_=prefs;preference=clown_name;task=input'><b>Clown:</b> " + this.custom_names["clown"] + "</a> ";
					dat += "<a href ='?_src_=prefs;preference=mime_name;task=input'><b>Mime:</b>" + this.custom_names["mime"] + "</a><BR>";
					dat += "<a href ='?_src_=prefs;preference=ai_name;task=input'><b>AI:</b> " + this.custom_names["ai"] + "</a> ";
					dat += "<a href ='?_src_=prefs;preference=cyborg_name;task=input'><b>Cyborg:</b> " + this.custom_names["cyborg"] + "</a><BR>";
					dat += "<a href ='?_src_=prefs;preference=religion_name;task=input'><b>Chaplain religion:</b> " + this.custom_names["religion"] + " </a>";
					dat += "<a href ='?_src_=prefs;preference=deity_name;task=input'><b>Chaplain deity:</b> " + this.custom_names["deity"] + "</a><BR></td>";
					dat += "<td valign='center'>";
					dat += "<div class='statusDisplay'><center><img src=previewicon.png width=" + this.preview_icon.Width() + " height=" + this.preview_icon.Height() + "></center></div>";
					dat += "</td></tr></table>";
					dat += "<h2>Body</h2>";
					dat += "<a href='?_src_=prefs;preference=all;task=random'>Random Body</A> ";
					dat += "<a href='?_src_=prefs;preference=all'>Always Random Body: " + ( Lang13.Bool( this.be_random_body ) ? "Yes" : "No" ) + "</A><br>";
					dat += "<table width='100%'><tr><td width='24%' valign='top'>";

					if ( GlobalVars.config.mutant_races ) {
						dat += "<b>Species:</b><BR><a href='?_src_=prefs;preference=species;task=input'>" + this.pref_species.name + "</a><BR>";
					} else {
						dat += "<b>Species:</b> Human<BR>";
					}
					dat += "<b>Blood Type:</b> " + this.blood_type + "<BR>";
					dat += "<b>Underwear:</b><BR><a href ='?_src_=prefs;preference=underwear;task=input'>" + this.underwear + "</a><BR>";
					dat += "<b>Undershirt:</b><BR><a href ='?_src_=prefs;preference=undershirt;task=input'>" + this.undershirt + "</a><BR>";
					dat += "<b>Socks:</b><BR><a href ='?_src_=prefs;preference=socks;task=input'>" + this.socks + "</a><BR>";
					dat += "<b>Backpack:</b><BR><a href ='?_src_=prefs;preference=bag;task=input'>" + this.backbag + "</a><BR></td>";

					if ( this.pref_species.use_skintones ) {
						dat += "<td valign='top' width='21%'>";
						dat += "<h3>Skin Tone</h3>";
						dat += "<a href='?_src_=prefs;preference=s_tone;task=input'>" + this.skin_tone + "</a><BR>";
						dat += "</td>";
					}

					if ( this.pref_species.specflags.Contains( 2 ) ) {
						dat += "<td valign='top' width='21%'>";
						dat += "<h3>Hair Style</h3>";
						dat += "<a href='?_src_=prefs;preference=hair_style;task=input'>" + this.hair_style + "</a><BR>";
						dat += "<a href='?_src_=prefs;preference=previous_hair_style;task=input'>&lt;</a> <a href='?_src_=prefs;preference=next_hair_style;task=input'>&gt;</a><BR>";
						dat += "<span style='border:1px solid #161616; background-color: #" + this.hair_color + ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=hair;task=input'>Change</a><BR>";
						dat += "</td><td valign='top' width='21%'>";
						dat += "<h3>Facial Hair Style</h3>";
						dat += "<a href='?_src_=prefs;preference=facial_hair_style;task=input'>" + this.facial_hair_style + "</a><BR>";
						dat += "<a href='?_src_=prefs;preference=previous_facehair_style;task=input'>&lt;</a> <a href='?_src_=prefs;preference=next_facehair_style;task=input'>&gt;</a><BR>";
						dat += "<span style='border: 1px solid #161616; background-color: #" + this.facial_hair_color + ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=facial;task=input'>Change</a><BR>";
						dat += "</td>";
					}

					if ( this.pref_species.specflags.Contains( 8 ) ) {
						dat += "<td valign='top' width='21%'>";
						dat += "<h3>Eye Color</h3>";
						dat += "<span style='border: 1px solid #161616; background-color: #" + this.eye_color + ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=eyes;task=input'>Change</a><BR>";
						dat += "</td>";
					}

					if ( GlobalVars.config.mutant_races ) {
						
						if ( this.pref_species.specflags.Contains( 1 ) || this.pref_species.specflags.Contains( 32768 ) ) {
							dat += "<td valign='top' width='21%'>";
							dat += "<h3>Alien/Mutant Color</h3>";
							dat += "<span style='border: 1px solid #161616; background-color: #" + this.features["mcolor"] + ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=mutant_color;task=input'>Change</a><BR>";
							dat += "</td>";
						}

						if ( this.pref_species.mutant_bodyparts.Contains( "tail_lizard" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Tail</h3>";
							dat += "<a href='?_src_=prefs;preference=tail_lizard;task=input'>" + this.features["tail_lizard"] + "</a><BR>";
							dat += "</td>";
						}

						if ( this.pref_species.mutant_bodyparts.Contains( "snout" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Snout</h3>";
							dat += "<a href='?_src_=prefs;preference=snout;task=input'>" + this.features["snout"] + "</a><BR>";
							dat += "</td>";
						}

						if ( this.pref_species.mutant_bodyparts.Contains( "horns" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Horns</h3>";
							dat += "<a href='?_src_=prefs;preference=horns;task=input'>" + this.features["horns"] + "</a><BR>";
							dat += "</td>";
						}

						if ( this.pref_species.mutant_bodyparts.Contains( "frills" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Frills</h3>";
							dat += "<a href='?_src_=prefs;preference=frills;task=input'>" + this.features["frills"] + "</a><BR>";
							dat += "</td>";
						}

						if ( this.pref_species.mutant_bodyparts.Contains( "spines" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Spines</h3>";
							dat += "<a href='?_src_=prefs;preference=spines;task=input'>" + this.features["spines"] + "</a><BR>";
							dat += "</td>";
						}

						if ( this.pref_species.mutant_bodyparts.Contains( "body_markings" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Body Markings</h3>";
							dat += "<a href='?_src_=prefs;preference=body_markings;task=input'>" + this.features["body_markings"] + "</a><BR>";
							dat += "</td>";
						}
					}

					if ( GlobalVars.config.mutant_humans ) {
						
						if ( this.pref_species.mutant_bodyparts.Contains( "tail_human" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Tail</h3>";
							dat += "<a href='?_src_=prefs;preference=tail_human;task=input'>" + this.features["tail_human"] + "</a><BR>";
							dat += "</td>";
						}

						if ( this.pref_species.mutant_bodyparts.Contains( "ears" ) ) {
							dat += "<td valign='top' width='7%'>";
							dat += "<h3>Ears</h3>";
							dat += "<a href='?_src_=prefs;preference=ears;task=input'>" + this.features["ears"] + "</a><BR>";
							dat += "</td>";
						}
					}
					dat += "</tr></table>";
					break;
				case 1:
					dat += "<table><tr><td width='340px' height='300px' valign='top'>";
					dat += "<h2>General Settings</h2>";
					dat += "<b>UI Style:</b> <a href='?_src_=prefs;preference=ui'>" + this.UI_style + "</a><br>";
					dat += "<b>Keybindings:</b> <a href='?_src_=prefs;preference=hotkeys'>" + ( Lang13.Bool( this.hotkeys ) ? "Hotkeys" : "Default" ) + "</a><br>";
					dat += "<b>tgui Style:</b> <a href='?_src_=prefs;preference=tgui_fancy'>" + ( Lang13.Bool( this.tgui_fancy ) ? "Fancy" : "No Frills" ) + "</a><br>";
					dat += "<b>tgui Monitors:</b> <a href='?_src_=prefs;preference=tgui_lock'>" + ( Lang13.Bool( this.tgui_lock ) ? "Primary" : "All" ) + "</a><br>";
					dat += "<b>Play admin midis:</b> <a href='?_src_=prefs;preference=hear_midis'>" + ( Lang13.Bool( this.toggles & 2 ) ? "Yes" : "No" ) + "</a><br>";
					dat += "<b>Play lobby music:</b> <a href='?_src_=prefs;preference=lobby_music'>" + ( Lang13.Bool( this.toggles & 8 ) ? "Yes" : "No" ) + "</a><br>";
					dat += "<b>Ghost ears:</b> <a href='?_src_=prefs;preference=ghost_ears'>" + ( ( this.chat_toggles & 4 ) != 0 ? "All Speech" : "Nearest Creatures" ) + "</a><br>";
					dat += "<b>Ghost sight:</b> <a href='?_src_=prefs;preference=ghost_sight'>" + ( ( this.chat_toggles & 8 ) != 0 ? "All Emotes" : "Nearest Creatures" ) + "</a><br>";
					dat += "<b>Ghost whispers:</b> <a href='?_src_=prefs;preference=ghost_whispers'>" + ( ( this.chat_toggles & 128 ) != 0 ? "All Speech" : "Nearest Creatures" ) + "</a><br>";
					dat += "<b>Ghost radio:</b> <a href='?_src=prefs;preference=ghost_radio'>" + ( ( this.chat_toggles & 512 ) != 0 ? "Yes" : "No" ) + "</a><br>";
					dat += "<b>Ghost pda:</b> <a href='?_src=prefs;preference=ghost_pda'>" + ( ( this.chat_toggles & 256 ) != 0 ? "All Messages" : "Nearest Creatures" ) + "</a><br>";
					dat += "<b>Pull requests:</b> <a href='?_src_=prefs;preference=pull_requests'>" + ( ( this.chat_toggles & 64 ) != 0 ? "Yes" : "No" ) + "</a><br>";
					dat += "<b>Midround Antagonist:</b> <a href='?_src_=prefs;preference=allow_midround_antag'>" + ( Lang13.Bool( this.toggles & 64 ) ? "Yes" : "No" ) + "</a><br>";

					if ( GlobalVars.config.allow_Metadata ) {
						dat += "<b>OOC Notes:</b> <a href='?_src_=prefs;preference=metadata;task=input'>Edit </a><br>";
					}

					if ( user.client != null ) {
						
						if ( user.client.holder != null ) {
							dat += "<b>Adminhelp Sound:</b> <a href='?_src_=prefs;preference=hear_adminhelps'>" + ( Lang13.Bool( this.toggles & 1 ) ? "On" : "Off" ) + "</a><br>";
							dat += "<b>Announce Login:</b> <a href='?_src_=prefs;preference=announce_login'>" + ( Lang13.Bool( this.toggles & 1024 ) ? "On" : "Off" ) + "</a><br>";
						}

						if ( Lang13.Bool( this.unlock_content ) || GlobalFuncs.check_rights_for( user.client, 2 ) ) {
							dat += "<b>OOC:</b> <span style='border: 1px solid #161616; background-color: " + ( Lang13.Bool( this.ooccolor ) ? this.ooccolor : ((dynamic)( GlobalVars.normal_ooc_colour )) ) + ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=ooccolor;task=input'>Change</a><br>";
						}

						if ( Lang13.Bool( this.unlock_content ) ) {
							dat += "<b>BYOND Membership Publicity:</b> <a href='?_src_=prefs;preference=publicity'>" + ( Lang13.Bool( this.toggles & 16 ) ? "Public" : "Hidden" ) + "</a><br>";
							dat += "<b>Ghost Form:</b> <a href='?_src_=prefs;task=input;preference=ghostform'>" + this.ghost_form + "</a><br>";
							dat += "<B>Ghost Orbit: </B> <a href='?_src_=prefs;task=input;preference=ghostorbit'>" + this.ghost_orbit + "</a><br>";
						}
					}
					dat += "</td><td width='300px' height='300px' valign='top'>";
					dat += "<h2>Special Role Settings</h2>";

					if ( GlobalFuncs.jobban_isbanned( user, "Syndicate" ) ) {
						dat += "<font color=red><b>You are banned from antagonist roles.</b></font>";
						this.be_special = new ByTable();
					}

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.special_roles )) {
						i2 = _a;
						

						if ( GlobalFuncs.jobban_isbanned( user, i2 ) ) {
							dat += "<b>Be " + GlobalFuncs.capitalize( i2 ) + ":</b> <a href='?_src_=prefs;jobbancheck=" + i2 + "'>BANNED</a><br>";
						} else {
							days_remaining = null;

							if ( GlobalVars.config.use_age_restriction_for_jobs && GlobalVars.special_roles[i2] is Type ) {
								mode_path = GlobalVars.special_roles[i2];
								temp_mode = Lang13.Call( mode_path );
								days_remaining = ((GameMode)temp_mode).get_remaining_days( user.client );
							}

							if ( Lang13.Bool( days_remaining ) ) {
								dat += "<b>Be " + GlobalFuncs.capitalize( i2 ) + ":</b> <font color=red> [IN " + days_remaining + " DAYS]</font><br>";
							} else {
								dat += "<b>Be " + GlobalFuncs.capitalize( i2 ) + ":</b> <a href='?_src_=prefs;preference=be_special;be_special_type=" + i2 + "'>" + ( this.be_special.Contains( i2 ) ? "Yes" : "No" ) + "</a><br>";
							}
						}
					}
					dat += "</td></tr></table>";
					break;
			}
			dat += "<hr><center>";

			if ( !GlobalFuncs.IsGuestKey( user.key ) ) {
				dat += "<a href='?_src_=prefs;preference=load'>Undo</a> ";
				dat += "<a href='?_src_=prefs;preference=save'>Save Setup</a> ";
			}
			dat += "<a href='?_src_=prefs;preference=reset_all'>Reset Setup</a>";
			dat += "</center>";
			popup = new Browser( user, "preferences", "<div align='center'>Character Setup</div>", 640, 750 );
			popup.set_content( dat );
			popup.open( false );
			return;
		}

	}

}