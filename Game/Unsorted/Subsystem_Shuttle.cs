// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Shuttle : Subsystem {

		public ByTable mobile = new ByTable();
		public ByTable stationary = new ByTable();
		public ByTable transit = new ByTable();
		public Obj_DockingPort_Mobile_Emergency emergency = null;
		public dynamic emergencyCallTime = 6000;
		public int emergencyDockTime = 1800;
		public int emergencyEscapeTime = 1200;
		public dynamic emergencyLastCallLoc = null;
		public bool emergencyNoEscape = false;
		public Obj_DockingPort_Mobile_Supply supply = null;
		public int ordernum = 1;
		public double points = 50;
		public double points_per_decisecond = 0.041;
		public int points_per_manifest = 2;
		public int points_per_crate = 5;
		public int points_per_intel = 250;
		public int points_per_plasma = 5;
		public int points_per_design = 25;
		public string centcom_message = "";
		public ByTable discoveredPlants = new ByTable();
		public ByTable techLevels = new ByTable();
		public ByTable researchDesigns = new ByTable();
		public ByTable supply_packs = new ByTable();
		public ByTable shoppinglist = new ByTable();
		public ByTable requestlist = new ByTable();
		public ByTable orderhistory = new ByTable();
		public RoundEvent_ShuttleLoan shuttle_loan = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Shuttles";
			this.wait = 10;
			this.priority = 3;
		}

		// Function from file: shuttles.dm
		public Subsystem_Shuttle (  ) {
			
			if ( GlobalVars.SSshuttle != this ) {
				
				if ( GlobalVars.SSshuttle is Subsystem_Shuttle ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSshuttle );
				}
				GlobalVars.SSshuttle = this;
			}
			return;
		}

		// Function from file: shuttles.dm
		public void initial_move(  ) {
			Obj_DockingPort_Mobile M = null;
			Obj_DockingPort_Stationary S = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.mobile, typeof(Obj_DockingPort_Mobile) )) {
				M = _b;
				

				if ( !Lang13.Bool( M.roundstart_move ) ) {
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.stationary, typeof(Obj_DockingPort_Stationary) )) {
					S = _a;
					

					if ( S.z != 1 && String13.FindIgnoreCase( S.id, M.id, 1, 0 ) != 0 ) {
						S.width = M.width;
						S.height = M.height;
						S.dwidth = M.dwidth;
						S.dheight = M.dheight;
					}
				}
				this.moveShuttle( M.id, "" + M.roundstart_move, 0 );
			}
			return;
		}

		// Function from file: shuttles.dm
		public int moveShuttle( string shuttleId = null, string dockId = null, int? timed = null ) {
			Obj_DockingPort_Mobile M = null;

			M = this.getShuttle( shuttleId );

			if ( !( M != null ) ) {
				return 1;
			}

			if ( Lang13.Bool( timed ) ) {
				
				if ( M.request( this.getDock( dockId ) ) != 0 ) {
					return 2;
				}
			} else if ( M.dock( this.getDock( dockId ) ) != 0 ) {
				return 2;
			}
			return 0;
		}

		// Function from file: shuttles.dm
		public int toggleShuttle( string shuttleId = null, string dockHome = null, string dockAway = null, dynamic timed = null ) {
			Obj_DockingPort_Mobile M = null;
			dynamic dockedAt = null;
			string destination = null;

			M = this.getShuttle( shuttleId );

			if ( !( M != null ) ) {
				return 1;
			}
			dockedAt = M.get_docked();
			destination = dockHome;

			if ( Lang13.Bool( dockedAt ) && dockedAt.id == dockHome ) {
				destination = dockAway;
			}

			if ( Lang13.Bool( timed ) ) {
				
				if ( M.request( this.getDock( destination ) ) != 0 ) {
					return 2;
				}
			} else if ( M.dock( this.getDock( destination ) ) != 0 ) {
				return 2;
			}
			return 0;
		}

		// Function from file: shuttles.dm
		public void autoEvac(  ) {
			bool callShuttle = false;
			dynamic thing = null;
			dynamic AI = null;
			dynamic C = null;
			dynamic T = null;

			callShuttle = true;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.shuttle_caller_list )) {
				thing = _a;
				

				if ( thing is Mob_Living_Silicon_Ai ) {
					AI = thing;

					if ( Lang13.Bool( AI.stat ) || !Lang13.Bool( AI.client ) ) {
						continue;
					}
				} else if ( thing is Obj_Machinery_Computer_Communications ) {
					C = thing;

					if ( Lang13.Bool( C.stat & 1 ) ) {
						continue;
					}
				}
				T = GlobalFuncs.get_turf( thing );

				if ( Lang13.Bool( T ) && Lang13.Bool( T.z ) == true ) {
					callShuttle = false;
					break;
				}
			}

			if ( callShuttle ) {
				
				if ( this.emergency.mode < 2 ) {
					this.emergency.request( null, 2.5 );
					GlobalFuncs.log_game( "There is no means of calling the shuttle anymore. Shuttle automatically called." );
					GlobalFuncs.message_admins( "All the communications consoles were destroyed and all AIs are inactive. Shuttle called." );
				}
			}
			return;
		}

		// Function from file: shuttles.dm
		public bool canRecall(  ) {
			
			if ( this.emergency.mode != 2 ) {
				return false;
			}

			if ( GlobalVars.ticker.mode.name == "meteor" ) {
				return false;
			}

			if ( GlobalFuncs.seclevel2num( GlobalFuncs.get_security_level() ) == 2 ) {
				
				if ( this.emergency.timeLeft( 1 ) < Convert.ToDouble( this.emergencyCallTime * 0.25 ) ) {
					return false;
				}
			} else if ( this.emergency.timeLeft( 1 ) < Convert.ToDouble( this.emergencyCallTime * 0.5 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: shuttles.dm
		public bool cancelEvac( Mob user = null ) {
			
			if ( this.canRecall() ) {
				this.emergency.cancel( GlobalFuncs.get_area( user ) );
				GlobalFuncs.log_game( "" + GlobalFuncs.key_name( user ) + " has recalled the shuttle." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " has recalled the shuttle." );
				return true;
			}
			return false;
		}

		// Function from file: shuttles.dm
		public void requestEvac( Mob user = null, dynamic call_reason = null ) {
			dynamic signal_origin = null;
			string emergency_reason = null;

			
			if ( !( this.emergency != null ) ) {
				throw new Exception( "requestEvac(): There is no emergency shuttle! The game will be unresolvable. This is likely due to a mapping error" );
				return;
			}

			if ( Game13.time - GlobalVars.round_start_time < ( GlobalVars.config.shuttle_refuel_delay ??0) ) {
				user.WriteMsg( "The emergency shuttle is refueling. Please wait another " + Math.Abs( Num13.Floor( ( Game13.time - GlobalVars.round_start_time - ( GlobalVars.config.shuttle_refuel_delay ??0) ) / 600 ) ) + " minutes before trying again." );
				return;
			}

			switch ((int)( this.emergency.mode )) {
				case 1:
					user.WriteMsg( "The emergency shuttle may not be called while returning to Centcom." );
					return;
					break;
				case 2:
					user.WriteMsg( "The emergency shuttle is already on its way." );
					return;
					break;
				case 3:
					user.WriteMsg( "The emergency shuttle is already here." );
					return;
					break;
				case 5:
					user.WriteMsg( "The emergency shuttle is moving away to a safe distance." );
					return;
					break;
				case 4:
					user.WriteMsg( "The emergency shuttle has been disabled by Centcom." );
					return;
					break;
			}
			call_reason = GlobalFuncs.trim( String13.HtmlEncode( call_reason ) );

			if ( Lang13.Length( call_reason ) < GlobalVars.CALL_SHUTTLE_REASON_LENGTH ) {
				user.WriteMsg( "You must provide a reason." );
				return;
			}
			signal_origin = GlobalFuncs.get_area( user );
			emergency_reason = "\nNature of emergency:\n\n" + call_reason;

			if ( GlobalFuncs.seclevel2num( GlobalFuncs.get_security_level() ) == 2 ) {
				this.emergency.request( null, 0.5, signal_origin, String13.HtmlDecode( emergency_reason ), true );
			} else {
				this.emergency.request( null, 1, signal_origin, String13.HtmlDecode( emergency_reason ), false );
			}
			GlobalFuncs.log_game( "" + GlobalFuncs.key_name( user ) + " has called the shuttle." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " has called the shuttle." );
			return;
		}

		// Function from file: shuttles.dm
		public Obj_DockingPort_Stationary getDock( string id = null ) {
			Obj_DockingPort_Stationary S = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.stationary, typeof(Obj_DockingPort_Stationary) )) {
				S = _a;
				

				if ( S.id == id ) {
					return S;
				}
			}
			GlobalFuncs.warning( "" + ( "couldn't find dock with id: " + id ) + " in " + "code/controllers/subsystem/shuttles.dm" + " at line " + 84 + " src: " + this + " usr: " + Task13.User + "." );
			return null;
		}

		// Function from file: shuttles.dm
		public Obj_DockingPort_Mobile getShuttle( string id = null ) {
			Obj_DockingPort_Mobile M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.mobile, typeof(Obj_DockingPort_Mobile) )) {
				M = _a;
				

				if ( M.id == id ) {
					return M;
				}
			}
			GlobalFuncs.warning( "" + ( "couldn't find shuttle with id: " + id ) + " in " + "code/controllers/subsystem/shuttles.dm" + " at line " + 78 + " src: " + this + " usr: " + Task13.User + "." );
			return null;
		}

		// Function from file: shuttles.dm
		public override void fire(  ) {
			dynamic thing = null;
			dynamic P = null;

			this.points += this.points_per_decisecond * this.wait;

			foreach (dynamic _a in Lang13.Enumerate( this.mobile )) {
				thing = _a;
				

				if ( Lang13.Bool( thing ) ) {
					P = thing;
					((Obj_DockingPort_Mobile)P).check();
					continue;
				}
				this.mobile.Remove( thing );
			}
			return;
		}

		// Function from file: shuttles.dm
		public override double Initialize( int start_timeofday = 0, double? zlevel = null ) {
			dynamic pack = null;
			dynamic P = null;

			
			if ( Lang13.Bool( zlevel ) ) {
				return base.Initialize( start_timeofday, zlevel );
			}

			if ( !( this.emergency != null ) ) {
				GlobalFuncs.warning( "" + "No /obj/docking_port/mobile/emergency placed on the map!" + " in " + "code/controllers/subsystem/shuttles.dm" + " at line " + 49 + " src: " + this + " usr: " + Task13.User + "." );
			}

			if ( !( this.supply != null ) ) {
				GlobalFuncs.warning( "" + "No /obj/docking_port/mobile/supply placed on the map!" + " in " + "code/controllers/subsystem/shuttles.dm" + " at line " + 51 + " src: " + this + " usr: " + Task13.User + "." );
			}
			this.ordernum = Rand13.Int( 1, 9000 );

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(SupplyPack) ) - typeof(SupplyPack) )) {
				pack = _a;
				
				P = Lang13.Call( pack );

				if ( !( P.contains != null ) ) {
					continue;
				}
				this.supply_packs["" + P.type] = P;
			}
			this.initial_move();
			base.Initialize( start_timeofday, zlevel );
			return 0;
		}

	}

}