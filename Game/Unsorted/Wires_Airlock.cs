// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Airlock : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Door_Airlock);
		}

		// Function from file: airlock.dm
		public Wires_Airlock ( Obj holder = null ) : base( holder ) {
			this.wires = new ByTable(new object [] { "power1", "power2", "backup1", "backup2", "open", "bolts", "idscan", "ai", "shock", "safety", "timing", "light", "zap1", "zap2" });
			this.add_duds( 2 );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: airlock.dm
		public override void on_cut( dynamic wire = null, int? mend = null ) {
			Ent_Static A = null;

			A = this.holder;

			dynamic _a = wire; // Was a switch-case, sorry for the mess.
			if ( _a=="power1" || _a=="power2" ) {
				
				if ( Lang13.Bool( mend ) && !this.is_cut( "power1" ) && !this.is_cut( "power2" ) ) {
					((dynamic)A).regainMainPower();
					((dynamic)A).shock( Task13.User, 50 );
				} else {
					((dynamic)A).loseMainPower();
					((dynamic)A).shock( Task13.User, 50 );
				}
			} else if ( _a=="backup1" || _a=="backup2" ) {
				
				if ( Lang13.Bool( mend ) && !this.is_cut( "backup1" ) && !this.is_cut( "backup2" ) ) {
					((dynamic)A).regainBackupPower();
					((dynamic)A).shock( Task13.User, 50 );
				} else {
					((dynamic)A).loseBackupPower();
					((dynamic)A).shock( Task13.User, 50 );
				}
			} else if ( _a=="bolts" ) {
				
				if ( !Lang13.Bool( mend ) ) {
					((dynamic)A).bolt();
				}
			} else if ( _a=="ai" ) {
				
				if ( Lang13.Bool( mend ) ) {
					
					if ( Lang13.Bool( ((dynamic)A).aiControlDisabled ) == true ) {
						((dynamic)A).aiControlDisabled = 0;
					} else if ( Convert.ToInt32( ((dynamic)A).aiControlDisabled ) == 2 ) {
						((dynamic)A).aiControlDisabled = -1;
					}
				} else if ( Lang13.Bool( ((dynamic)A).aiControlDisabled ) == false ) {
					((dynamic)A).aiControlDisabled = 1;
				} else if ( Convert.ToInt32( ((dynamic)A).aiControlDisabled ) == -1 ) {
					((dynamic)A).aiControlDisabled = 2;
				}
			} else if ( _a=="shock" ) {
				
				if ( Lang13.Bool( mend ) ) {
					
					if ( Lang13.Bool( ((dynamic)A).secondsElectrified ) ) {
						((dynamic)A).secondsElectrified = 0;
					}
				} else if ( Convert.ToInt32( ((dynamic)A).secondsElectrified ) != -1 ) {
					((dynamic)A).secondsElectrified = -1;
					((dynamic)A).shockedby += "[" + GlobalFuncs.time_stamp() + "]" + Task13.User + "(ckey:" + Task13.User.ckey + ")";
					GlobalFuncs.add_logs( Task13.User, A, "electrified", null, "at " + A.x + "," + A.y + "," + A.z );
				}
			} else if ( _a=="safety" ) {
				((dynamic)A).safe = mend;
			} else if ( _a=="timing" ) {
				((dynamic)A).autoclose = mend;

				if ( Lang13.Bool( ((dynamic)A).autoclose ) && !A.density ) {
					((dynamic)A).close();
				}
			} else if ( _a=="light" ) {
				((dynamic)A).lights = mend;
				((dynamic)A).update_icon();
			} else if ( _a=="zap1" || _a=="zap2" ) {
				((dynamic)A).shock( Task13.User, 50 );
			}
			return;
		}

		// Function from file: airlock.dm
		public override void on_pulse( string wire = null ) {
			Ent_Static A = null;

			A = this.holder;

			switch ((string)( wire )) {
				case "power1":
				case "power2":
					((dynamic)A).loseMainPower();
					break;
				case "backup1":
				case "backup2":
					((dynamic)A).loseBackupPower();
					break;
				case "open":
					
					if ( Lang13.Bool( ((dynamic)A).emagged ) ) {
						return;
					}

					if ( !Lang13.Bool( ((dynamic)A).requiresID() ) || Lang13.Bool( ((dynamic)A).check_access( null ) ) ) {
						
						if ( A.density ) {
							((dynamic)A).open();
						} else {
							((dynamic)A).close();
						}
					}
					break;
				case "bolts":
					
					if ( !Lang13.Bool( ((dynamic)A).locked ) ) {
						((dynamic)A).bolt();
						A.audible_message( "<span class='italics'>You hear a click from the bottom of the door.</span>", null, 1 );
					} else if ( Lang13.Bool( ((dynamic)A).hasPower() ) ) {
						((dynamic)A).unbolt();
						A.audible_message( "<span class='italics'>You hear a click from the bottom of the door.</span>", null, 1 );
					}
					((dynamic)A).update_icon();
					break;
				case "idscan":
					
					if ( Lang13.Bool( ((dynamic)A).hasPower() ) && A.density ) {
						((dynamic)A).do_animate( "deny" );

						if ( Lang13.Bool( ((dynamic)A).emergency ) ) {
							((dynamic)A).emergency = GlobalVars.FALSE;
							((dynamic)A).update_icon();
						}
					}
					break;
				case "ai":
					
					if ( Lang13.Bool( ((dynamic)A).aiControlDisabled ) == false ) {
						((dynamic)A).aiControlDisabled = 1;
					} else if ( Convert.ToInt32( ((dynamic)A).aiControlDisabled ) == -1 ) {
						((dynamic)A).aiControlDisabled = 2;
					}
					Task13.Schedule( 10, (Task13.Closure)(() => {
						
						if ( A != null ) {
							
							if ( Lang13.Bool( ((dynamic)A).aiControlDisabled ) == true ) {
								((dynamic)A).aiControlDisabled = 0;
							} else if ( Convert.ToInt32( ((dynamic)A).aiControlDisabled ) == 2 ) {
								((dynamic)A).aiControlDisabled = -1;
							}
						}
						return;
					}));
					break;
				case "shock":
					
					if ( !Lang13.Bool( ((dynamic)A).secondsElectrified ) ) {
						((dynamic)A).secondsElectrified = 30;
						((dynamic)A).shockedby += "[" + GlobalFuncs.time_stamp() + "]" + Task13.User + "(ckey:" + Task13.User.ckey + ")";
						GlobalFuncs.add_logs( Task13.User, A, "electrified", null, "at " + A.x + "," + A.y + "," + A.z );
						Task13.Schedule( 10, (Task13.Closure)(() => {
							
							if ( A != null ) {
								
								while (Convert.ToDouble( ((dynamic)A).secondsElectrified ) > 0) {
									((dynamic)A).secondsElectrified -= 1;

									if ( Convert.ToDouble( ((dynamic)A).secondsElectrified ) < 0 ) {
										((dynamic)A).secondsElectrified = 0;
									}
									Task13.Sleep( 10 );
								}
							}
							return;
						}));
					}
					break;
				case "safety":
					((dynamic)A).safe = !Lang13.Bool( ((dynamic)A).safe );

					if ( !A.density ) {
						((dynamic)A).close();
					}
					break;
				case "timing":
					((dynamic)A).normalspeed = !Lang13.Bool( ((dynamic)A).normalspeed );
					break;
				case "light":
					((dynamic)A).lights = !Lang13.Bool( ((dynamic)A).lights );
					((dynamic)A).update_icon();
					break;
			}
			return;
		}

		// Function from file: airlock.dm
		public override ByTable get_status(  ) {
			Ent_Static A = null;
			ByTable status = null;

			A = this.holder;
			status = new ByTable();
			status.Add( "The door bolts " + ( Lang13.Bool( ((dynamic)A).locked ) ? "have fallen!" : "look up." ) );
			status.Add( "The test light is " + ( Lang13.Bool( ((dynamic)A).hasPower() ) ? "on" : "off" ) + "." );
			status.Add( "The AI connection light is " + ( Lang13.Bool( ((dynamic)A).aiControlDisabled ) || Lang13.Bool( ((dynamic)A).emagged ) ? "off" : "on" ) + "." );
			status.Add( "The check wiring light is " + ( Lang13.Bool( ((dynamic)A).safe ) ? "off" : "on" ) + "." );
			status.Add( "The timer is powered " + ( Lang13.Bool( ((dynamic)A).autoclose ) ? "on" : "off" ) + "." );
			status.Add( "The speed light is " + ( Lang13.Bool( ((dynamic)A).normalspeed ) ? "on" : "off" ) + "." );
			status.Add( "The emergency light is " + ( Lang13.Bool( ((dynamic)A).emergency ) ? "on" : "off" ) + "." );
			return status;
		}

		// Function from file: airlock.dm
		public override int? interactable( dynamic user = null ) {
			Ent_Static A = null;

			A = this.holder;

			if ( !( user is Mob_Living_Silicon ) && Lang13.Bool( ((dynamic)A).isElectrified() ) && Lang13.Bool( ((dynamic)A).shock( user, 100 ) ) ) {
				return GlobalVars.FALSE;
			}

			if ( Lang13.Bool( ((dynamic)A).p_open ) ) {
				return GlobalVars.TRUE;
			}
			return null;
		}

	}

}