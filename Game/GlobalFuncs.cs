// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	static class GlobalFuncs {
		// Function from file: _define.dm
		public static double? __btime__timeofhour(  ) {
			
			if ( !( GlobalVars.__btime__callCount++ % 50 != 0 ) ) {
				
				if ( Game13.time > GlobalVars.__btime__lastTick ) {
					GlobalVars.__btime__callCount = 0;
					GlobalVars.__btime__lastTick = Game13.time;
				}
				GlobalVars.__btime__lastTimeOfHour = String13.ParseNumber( Lang13.Call( Lang13.GetLibFunc( "" + GlobalVars.__btime__dll, "gettime" ) ) );
			}
			return GlobalVars.__btime__lastTimeOfHour;
		}

		// Function from file: _JSON.dm
		public static ByTable json2list( dynamic json = null ) {
			
			if ( GlobalFuncs.dd_hasprefix( json, "[" ) != 0 ) {
				return GlobalVars._jsonr.ReadArray( GlobalVars._jsonr.ScanJson( json ) );
			} else {
				return GlobalVars._jsonr.ReadObject( GlobalVars._jsonr.ScanJson( json ) );
			}
		}

		// Function from file: _JSON.dm
		public static dynamic list2json( ByTable L = null ) {
			
			if ( GlobalVars._jsonw.is_associative( L ) == true ) {
				return GlobalVars._jsonw.WriteObject( L );
			} else {
				return GlobalVars._jsonw.write_array( L );
			}
		}

		// Function from file: _Logic.dm
		public static void delay( int time = 0 ) {
			Task13.Sleep( time );
			return;
		}

		// Function from file: _Logic.dm
		public static string docopytext( string _string = null, int? start = null, int? end = null ) {
			start = start ?? 1;
			end = end ?? 0;

			
			if ( _string is string && Lang13.Bool( Lang13.IsNumber( start ) ) && Lang13.Bool( Lang13.IsNumber( end ) ) ) {
				
				if ( ( start ??0) > 0 ) {
					return String13.SubStr( _string, start ??0, end ??0 );
				}
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static double n_abs( double num = 0 ) {
			
			if ( Lang13.Bool( Lang13.IsNumber( num ) ) ) {
				return Math.Abs( num );
			}
			return 0;
		}

		// Function from file: _Logic.dm
		public static double n_acos( double x = 0 ) {
			return Math.Acos( x );
		}

		// Function from file: _Logic.dm
		public static double n_asin( double x = 0 ) {
			return Math.Asin( x );
		}

		// Function from file: _Logic.dm
		public static int n_ceil( double num = 0 ) {
			
			if ( Lang13.Bool( Lang13.IsNumber( num ) ) ) {
				return Num13.Floor( num ) + 1;
			}
			return 0;
		}

		// Function from file: _Logic.dm
		public static bool? n_clamp( bool? num = null, bool? min = null, bool? max = null ) {
			min = min ?? false;
			max = max ?? true;

			
			if ( Lang13.Bool( Lang13.IsNumber( num ) ) && Lang13.Bool( Lang13.IsNumber( min ) ) && Lang13.Bool( Lang13.IsNumber( max ) ) ) {
				return ( ( num == true ?1:0) <= ( min == true ?1:0) ? min : ( ( num == true ?1:0) >= ( max == true ?1:0) ? max : num ) );
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static double n_cos( double x = 0 ) {
			return Math.Cos( x );
		}

		// Function from file: _Logic.dm
		public static ByTable n_list( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			ByTable returnlist = null;
			dynamic e = null;

			returnlist = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				e = _a;
				
				returnlist.Add( e );
			}
			return returnlist;
		}

		// Function from file: _Logic.dm
		public static void n_listadd( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			dynamic chosenlist = null;
			int i = 0;
			dynamic e = null;

			i = 1;

			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				e = _a;
				

				if ( i == 1 ) {
					
					if ( GlobalFuncs.isobject( e ) ) {
						
						if ( e is ByTable ) {
							chosenlist = e;
						}
					}
					i = 2;
				} else if ( Lang13.Bool( chosenlist ) ) {
					chosenlist.Add( e );
				}
			}
			return;
		}

		// Function from file: _Logic.dm
		public static dynamic n_listcopy( dynamic L = null, dynamic start = null, dynamic end = null ) {
			
			if ( !( L is ByTable ) ) {
				return null;
			}
			return L.Copy( start, end );
		}

		// Function from file: _Logic.dm
		public static void n_listcut( ByTable L = null, int? start = null, int end = 0 ) {
			
			if ( !( L is ByTable ) ) {
				return;
			}
			L.Cut( start, end ); return;
		}

		// Function from file: _Logic.dm
		public static dynamic n_listinsert( dynamic L = null, dynamic index = null, dynamic element = null ) {
			
			if ( !( L is ByTable ) ) {
				return null;
			}
			return L.Insert( index, element );
		}

		// Function from file: _Logic.dm
		public static dynamic n_listpos( ByTable L = null, int pos = 0, dynamic value = null ) {
			
			if ( !( L is ByTable ) ) {
				return null;
			}

			if ( Lang13.Bool( Lang13.IsNumber( pos ) ) ) {
				
				if ( !Lang13.Bool( value ) ) {
					
					if ( L.len >= pos && !( pos > L.len ) ) {
						return L[pos];
					}
				} else if ( L.len >= pos && !( pos > L.len ) ) {
					L[pos] = value;
				}
			} else if ( pos is string ) {
				
				if ( !Lang13.Bool( value ) ) {
					return L[pos];
				} else {
					L[pos] = value;
				}
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static void n_listremove( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			dynamic chosenlist = null;
			int i = 0;
			dynamic e = null;

			i = 1;

			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				e = _a;
				

				if ( i == 1 ) {
					
					if ( GlobalFuncs.isobject( e ) ) {
						
						if ( e is ByTable ) {
							chosenlist = e;
						}
					}
					i = 2;
				} else if ( Lang13.Bool( chosenlist ) ) {
					chosenlist.Remove( e );
				}
			}
			return;
		}

		// Function from file: _Logic.dm
		public static void n_listswap( ByTable L = null, int firstindex = 0, int secondindex = 0 ) {
			
			if ( !( L is ByTable ) ) {
				return;
			}

			if ( L.len >= secondindex && L.len >= firstindex ) {
				L.Swap( firstindex, secondindex ); return;
			}
			return;
		}

		// Function from file: _Logic.dm
		public static string n_lower( string _string = null ) {
			
			if ( _string is string ) {
				return String13.ToLower( _string );
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static dynamic n_max( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			return Num13.Max( _args );
		}

		// Function from file: _Logic.dm
		public static dynamic n_min( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			return Num13.Min( _args );
		}

		// Function from file: _Logic.dm
		public static string n_num2str( double num = 0 ) {
			
			if ( Lang13.Bool( Lang13.IsNumber( num ) ) ) {
				return String13.NumberToString( num );
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static dynamic n_pick( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			ByTable finalpick = null;
			dynamic e = null;
			dynamic sublist = null;
			dynamic sube = null;

			finalpick = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( _args )) {
				e = _b;
				

				if ( GlobalFuncs.isobject( e ) ) {
					
					if ( e is ByTable ) {
						sublist = e;

						foreach (dynamic _a in Lang13.Enumerate( sublist )) {
							sube = _a;
							
							finalpick.Add( sube );
						}
						continue;
					}
				}
				finalpick.Add( e );
			}
			return Rand13.PickFromTable( finalpick );
		}

		// Function from file: _Logic.dm
		public static string n_repeat( dynamic _string = null, int amount = 0 ) {
			int i = 0;
			string newstring = null;

			
			if ( _string is string && Lang13.Bool( Lang13.IsNumber( amount ) ) ) {
				newstring = "";

				if ( Lang13.Length( newstring ) * amount >= 1000 ) {
					return null;
				}
				i = 0;

				while (i <= amount) {
					
					if ( i >= 1000 ) {
						break;
					}
					newstring = newstring + _string;
					i++;
				}
				return newstring;
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static int n_round( double num = 0 ) {
			
			if ( Lang13.Bool( Lang13.IsNumber( num ) ) ) {
				
				if ( num - Num13.Floor( num ) < 0.5 ) {
					return Num13.Floor( num );
				}
				return GlobalFuncs.n_ceil( num );
			}
			return 0;
		}

		// Function from file: _Logic.dm
		public static double n_sin( double x = 0 ) {
			return Math.Sin( x );
		}

		// Function from file: _Logic.dm
		public static double n_sqrt( double num = 0 ) {
			
			if ( Lang13.Bool( Lang13.IsNumber( num ) ) ) {
				return Math.Sqrt( num );
			}
			return 0;
		}

		// Function from file: _Logic.dm
		public static double? n_str2num( string _string = null ) {
			
			if ( _string is string ) {
				return String13.ParseNumber( _string );
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static string n_upper( string _string = null ) {
			
			if ( _string is string ) {
				return String13.ToUpper( _string );
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static bool prob_chance( int chance = 0 ) {
			return Rand13.PercentChance( chance );
		}

		// Function from file: _Logic.dm
		public static int rand_chance( int? low = null, int high = 0 ) {
			low = low ?? 0;

			return Rand13.Int( low ??0, high );
		}

		// Function from file: _Logic.dm
		public static dynamic smartfind( dynamic haystack = null, string needle = null, int? start = null, int? end = null ) {
			start = start ?? 1;
			end = end ?? 0;

			dynamic listhaystack = null;

			
			if ( Lang13.Bool( haystack ) && Lang13.Bool( needle ) ) {
				
				if ( GlobalFuncs.isobject( haystack ) ) {
					
					if ( haystack is ByTable ) {
						
						if ( Lang13.Length( haystack ) >= ( end ??0) && ( start ??0) > 0 ) {
							listhaystack = haystack;
							return listhaystack.Find( needle, start, end );
						}
					}
				} else if ( haystack is string ) {
					
					if ( Lang13.Length( haystack ) >= ( end ??0) && ( start ??0) > 0 ) {
						return String13.FindIgnoreCase( haystack, needle, start ??0, end ??0 );
					}
				}
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static int smartlength( dynamic container = null ) {
			
			if ( Lang13.Bool( container ) ) {
				
				if ( container is ByTable || container is string ) {
					return Lang13.Length( container );
				}
			}
			return 0;
		}

		// Function from file: _Logic.dm
		public static ByTable string_explode( dynamic _string = null, string separator = null ) {
			separator = separator ?? "";

			
			if ( _string is string && ( separator is string || separator == null ) ) {
				return GlobalFuncs.text2list( _string, separator );
			}
			return null;
		}

		// Function from file: _Logic.dm
		public static int time(  ) {
			return Game13.time + 432000;
		}

		// Function from file: _Logic.dm
		public static string timestamp( string format = null ) {
			format = format ?? "hh:mm:ss";

			return String13.FormatTime( Game13.time + 360000, format );
		}

		// Function from file: _map.dm
		public static void change_base_turf( dynamic choice = null, dynamic new_base_path = null, dynamic update_old_base = null ) {
			update_old_base = update_old_base ?? 0;

			int count = 0;
			dynamic T = null;
			ZLevel L = null;
			Obj_Structure_DockingPort_Destination D = null;

			
			if ( Lang13.Bool( update_old_base ) ) {
				count = 0;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.turfs )) {
					T = _a;
					
					count++;

					if ( !( count % 50000 != 0 ) ) {
						Task13.Sleep( ((int)( Game13.tick_lag )) );
					}

					if ( T.type == GlobalFuncs.get_base_turf( choice ) && T.z == choice ) {
						((Tile)T).ChangeTurf( new_base_path );
					}
				}
			}
			L = GlobalVars.map.zLevels[choice];
			L.base_turf = new_base_path;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.all_docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
				D = _b;
				

				if ( D.z == choice ) {
					D.base_turf_type = new_base_path;
				}
			}
			return;
		}

		// Function from file: _map.dm
		public static dynamic get_base_turf( dynamic z = null ) {
			ZLevel L = null;

			L = GlobalVars.map.zLevels[z];
			return L.base_turf;
		}

		// Function from file: _stubs.dm
		public static void logTheThing( string type = null, dynamic source = null, dynamic target = null, string text = null, string diaryType = null ) {
			
			if ( Lang13.Bool( diaryType ) ) {
				GlobalFuncs.to_chat( typeof(Game13), "Diary: [" + diaryType + ":" + type + "] " + text );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "Log: [" + type + "] " + text );
			}
			return;
		}

		// Function from file: access.dm
		public static bool can_access( dynamic L = null, dynamic req_access = null, dynamic req_one_access = null ) {
			dynamic req = null;
			dynamic req2 = null;

			
			if ( !Lang13.Bool( req_access ) && !Lang13.Bool( req_one_access ) ) {
				return true;
			}

			if ( !( req_access is ByTable ) ) {
				return true;
			}

			if ( !( req_access.len != 0 ) && ( !Lang13.Bool( req_one_access ) || !( req_one_access.len != 0 ) ) ) {
				return true;
			}

			if ( !Lang13.Bool( L ) ) {
				return false;
			}

			if ( !( L is ByTable ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( req_access )) {
				req = _a;
				
				Interface13.Stat( null, L.Contains( req ) );

				if ( !false ) {
					return false;
				}
			}

			if ( Lang13.Bool( req_one_access ) && req_one_access.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( req_one_access )) {
					req2 = _b;
					
					Interface13.Stat( null, L.Contains( req2 ) );

					if ( false ) {
						return true;
					}
				}
				return false;
			}
			return true;
		}

		// Function from file: access.dm
		public static dynamic FindNameFromID( dynamic H = null ) {
			dynamic C = null;
			dynamic ID = null;
			dynamic pda = null;
			dynamic ID2 = null;
			dynamic pda2 = null;

			
			if ( !( H is Mob_Living_Carbon_Human ) ) {
				Task13.Crash( "" + "code/game/jobs/access.dm" + ":" + 463 + ":Assertion Failed: " + "istype(H)" );
			}
			C = ((Mob)H).get_active_hand();

			if ( C is Obj_Item_Weapon_Card_Id || C is Obj_Item_Device_Pda ) {
				ID = C;

				if ( C is Obj_Item_Device_Pda ) {
					pda = C;
					ID = pda.id;
				}

				if ( !( ID is Obj_Item_Weapon_Card_Id ) ) {
					ID = null;
				}

				if ( Lang13.Bool( ID ) ) {
					return ID.registered_name;
				}
			}
			C = H.wear_id;

			if ( C is Obj_Item_Weapon_Card_Id || C is Obj_Item_Device_Pda ) {
				ID2 = C;

				if ( C is Obj_Item_Device_Pda ) {
					pda2 = C;
					ID2 = pda2.id;
				}

				if ( !( ID2 is Obj_Item_Weapon_Card_Id ) ) {
					ID2 = null;
				}

				if ( Lang13.Bool( ID2 ) ) {
					return ID2.registered_name;
				}
			}
			return null;
		}

		// Function from file: access.dm
		public static ByTable get_absolutely_all_accesses(  ) {
			return ( GlobalFuncs.get_all_accesses() | GlobalFuncs.get_all_centcom_access() | GlobalFuncs.get_all_syndicate_access() ) + 65;
		}

		// Function from file: access.dm
		public static string get_access_desc( dynamic A = null ) {
			
			dynamic _a = A; // Was a switch-case, sorry for the mess.
			if ( _a==31 ) {
				return "Cargo Bay";
			} else if ( _a==34 ) {
				return "Cargo Bot Delivery";
			} else if ( _a==1 ) {
				return "Security";
			} else if ( _a==2 ) {
				return "Holding Cells";
			} else if ( _a==42 ) {
				return "Courtroom";
			} else if ( _a==4 ) {
				return "Forensics";
			} else if ( _a==5 ) {
				return "Medical";
			} else if ( _a==9 ) {
				return "Genetics Lab";
			} else if ( _a==6 ) {
				return "Morgue";
			} else if ( _a==7 ) {
				return "R&D Lab";
			} else if ( _a==8 ) {
				return "Toxins Lab";
			} else if ( _a==33 ) {
				return "Chemistry Lab";
			} else if ( _a==30 ) {
				return "Research Director";
			} else if ( _a==25 ) {
				return "Bar";
			} else if ( _a==26 ) {
				return "Custodial Closet";
			} else if ( _a==10 ) {
				return "Engineering";
			} else if ( _a==11 ) {
				return "Power Equipment";
			} else if ( _a==12 ) {
				return "Maintenance";
			} else if ( _a==13 ) {
				return "External Airlocks";
			} else if ( _a==14 ) {
				return "Emergency Storage";
			} else if ( _a==15 ) {
				return "ID Computer";
			} else if ( _a==16 ) {
				return "AI Upload";
			} else if ( _a==17 ) {
				return "Teleporter";
			} else if ( _a==18 ) {
				return "EVA";
			} else if ( _a==19 ) {
				return "Bridge";
			} else if ( _a==20 ) {
				return "Captain";
			} else if ( _a==21 ) {
				return "Personal Lockers";
			} else if ( _a==22 ) {
				return "Chapel Office";
			} else if ( _a==23 ) {
				return "Technical Storage";
			} else if ( _a==24 ) {
				return "Atmospherics";
			} else if ( _a==27 ) {
				return "Crematorium";
			} else if ( _a==3 ) {
				return "Armory";
			} else if ( _a==32 ) {
				return "Construction Areas";
			} else if ( _a==28 ) {
				return "Kitchen";
			} else if ( _a==35 ) {
				return "Hydroponics";
			} else if ( _a==37 ) {
				return "Library";
			} else if ( _a==38 ) {
				return "Law Office";
			} else if ( _a==29 ) {
				return "Robotics";
			} else if ( _a==39 ) {
				return "Virology";
			} else if ( _a==64 ) {
				return "Psychiatrist's Office";
			} else if ( _a==40 ) {
				return "Chief Medical Officer";
			} else if ( _a==41 ) {
				return "Quartermaster";
			} else if ( _a==43 ) {
				return "HONK! Access";
			} else if ( _a==44 ) {
				return "Silent Access";
			} else if ( _a==45 ) {
				return "Surgery";
			} else if ( _a==46 ) {
				return "Theatre";
			} else if ( _a==36 ) {
				return "Manufacturing";
			} else if ( _a==47 ) {
				return "Science";
			} else if ( _a==48 ) {
				return "Mining";
			} else if ( _a==49 ) {
				return "Mining Office";
			} else if ( _a==50 ) {
				return "Cargo Office";
			} else if ( _a==51 ) {
				return "Mint";
			} else if ( _a==52 ) {
				return "Mint Vault";
			} else if ( _a==53 ) {
				return "Main Vault";
			} else if ( _a==54 ) {
				return "Mining EVA";
			} else if ( _a==55 ) {
				return "Xenobiology Lab";
			} else if ( _a==57 ) {
				return "Head of Personnel";
			} else if ( _a==58 ) {
				return "Head of Security";
			} else if ( _a==56 ) {
				return "Chief Engineer";
			} else if ( _a==59 ) {
				return "RC Announcements";
			} else if ( _a==60 ) {
				return "Keycode Auth. Device";
			} else if ( _a==61 ) {
				return "Telecommunications";
			} else if ( _a==62 ) {
				return "Gateway";
			} else if ( _a==63 ) {
				return "Brig";
			} else if ( _a==500 ) {
				return "Paramedic Station";
			} else if ( _a==66 ) {
				return "Weapon Permit";
			} else if ( _a==67 ) {
				return "Taxi Shuttle";
			} else if ( _a==501 ) {
				return "Workshop";
			}
			return null;
		}

		// Function from file: access.dm
		public static ByTable get_all_accesses(  ) {
			return new ByTable(new object [] { 
				GlobalVars.access_security, 
				GlobalVars.access_sec_doors, 
				GlobalVars.access_brig, 
				GlobalVars.access_armory, 
				GlobalVars.access_forensics_lockers, 
				GlobalVars.access_court, 
				GlobalVars.access_medical, 
				GlobalVars.access_genetics, 
				GlobalVars.access_morgue, 
				GlobalVars.access_rd, 
				GlobalVars.access_tox, 
				GlobalVars.access_tox_storage, 
				GlobalVars.access_chemistry, 
				GlobalVars.access_engine, 
				GlobalVars.access_engine_equip, 
				GlobalVars.access_maint_tunnels, 
				GlobalVars.access_external_airlocks, 
				GlobalVars.access_change_ids, 
				GlobalVars.access_ai_upload, 
				GlobalVars.access_teleporter, 
				GlobalVars.access_eva, 
				GlobalVars.access_heads, 
				GlobalVars.access_captain, 
				GlobalVars.access_all_personal_lockers, 
				GlobalVars.access_tech_storage, 
				GlobalVars.access_chapel_office, 
				GlobalVars.access_atmospherics, 
				GlobalVars.access_kitchen, 
				GlobalVars.access_bar, 
				GlobalVars.access_janitor, 
				GlobalVars.access_crematorium, 
				GlobalVars.access_robotics, 
				GlobalVars.access_cargo, 
				GlobalVars.access_construction, 
				GlobalVars.access_hydroponics, 
				GlobalVars.access_library, 
				GlobalVars.access_lawyer, 
				GlobalVars.access_virology, 
				GlobalVars.access_psychiatrist, 
				GlobalVars.access_cmo, 
				GlobalVars.access_qm, 
				GlobalVars.access_clown, 
				GlobalVars.access_mime, 
				GlobalVars.access_surgery, 
				GlobalVars.access_theatre, 
				GlobalVars.access_research, 
				GlobalVars.access_mining, 
				GlobalVars.access_mailsorting, 
				GlobalVars.access_weapons, 
				GlobalVars.access_heads_vault, 
				GlobalVars.access_mining_station, 
				GlobalVars.access_xenobiology, 
				GlobalVars.access_ce, 
				GlobalVars.access_hop, 
				GlobalVars.access_hos, 
				GlobalVars.access_RC_announce, 
				GlobalVars.access_keycard_auth, 
				GlobalVars.access_tcomsat, 
				GlobalVars.access_gateway, 
				null, 
				GlobalVars.access_paramedic, 
				GlobalVars.access_mechanic, 
				GlobalVars.access_taxi
			 });
		}

		// Function from file: access.dm
		public static ByTable get_all_centcom_access(  ) {
			return new ByTable(new object [] { 
				GlobalVars.access_cent_general, 
				GlobalVars.access_cent_thunder, 
				GlobalVars.access_cent_specops, 
				GlobalVars.access_cent_medical, 
				GlobalVars.access_cent_living, 
				GlobalVars.access_cent_storage, 
				GlobalVars.access_cent_teleporter, 
				GlobalVars.access_cent_creed, 
				GlobalVars.access_cent_captain
			 });
		}

		// Function from file: access.dm
		public static ByTable get_all_centcom_jobs(  ) {
			return new ByTable(new object [] { "VIP Guest", "Custodian", "Thunderdome Overseer", "Intel Officer", "Medical Officer", "Death Commando", "Research Officer", "BlackOps Commander", "Supreme Commander" });
		}

		// Function from file: access.dm
		public static ByTable get_all_job_icons(  ) {
			return GlobalFuncs.get_all_jobs() + new ByTable(new object [] { "Prisoner" });
		}

		// Function from file: access.dm
		public static ByTable get_all_jobs(  ) {
			dynamic jobtype = null;
			dynamic jobdatum = null;

			
			if ( GlobalVars.all_jobs != null ) {
				return GlobalVars.all_jobs;
			}
			GlobalVars.all_jobs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Job) ) - typeof(Job) )) {
				jobtype = _a;
				
				jobdatum = Lang13.Call( jobtype );

				if ( ( ( jobdatum.info_flag ?1:0) & 1 ) != 0 ) {
					continue;
				}
				GlobalVars.all_jobs.Add( jobdatum.title );
			}
			return GlobalVars.all_jobs;
		}

		// Function from file: access.dm
		public static ByTable get_all_syndicate_access(  ) {
			return new ByTable(new object [] { GlobalVars.access_syndicate });
		}

		// Function from file: access.dm
		public static ByTable get_centcom_access( string job = null ) {
			
			switch ((string)( job )) {
				case "VIP Guest":
					return new ByTable(new object [] { GlobalVars.access_cent_general, GlobalVars.access_cent_living });
					break;
				case "Thunderdome Overseer":
					return new ByTable(new object [] { GlobalVars.access_cent_general, GlobalVars.access_cent_thunder });
					break;
				case "Emergency Responder":
					return GlobalFuncs.get_ert_access() | new ByTable(new object [] { GlobalVars.access_cent_general, GlobalVars.access_cent_ert, GlobalVars.access_cent_specops });
					break;
				case "Emergency Responders Leader":
					return GlobalFuncs.get_ert_access() | new ByTable(new object [] { 
						GlobalVars.access_cent_general, 
						GlobalVars.access_cent_ert, 
						GlobalVars.access_change_ids, 
						GlobalVars.access_heads, 
						GlobalVars.access_captain, 
						GlobalVars.access_cent_specops
					 });
					break;
				case "Death Commando":
					return GlobalFuncs.get_all_accesses() | new ByTable(new object [] { GlobalVars.access_cent_general, GlobalVars.access_cent_specops });
					break;
				case "Creed Commander":
					return GlobalFuncs.get_all_accesses() | new ByTable(new object [] { GlobalVars.access_cent_general, GlobalVars.access_cent_specops, GlobalVars.access_cent_ert, GlobalVars.access_cent_creed });
					break;
				case "Supreme Commander":
					return GlobalFuncs.get_all_accesses() | GlobalFuncs.get_all_centcom_access();
					break;
			}
			return null;
		}

		// Function from file: access.dm
		public static string get_centcom_access_desc( dynamic A = null ) {
			
			dynamic _a = A; // Was a switch-case, sorry for the mess.
			if ( _a==101 ) {
				return "Centcom Common Areas";
			} else if ( _a==102 ) {
				return "Thunderdome";
			} else if ( _a==106 ) {
				return "Centcom Storage";
			} else if ( _a==105 ) {
				return "Centcom Living Areas";
			} else if ( _a==104 ) {
				return "Centcom Medbay";
			} else if ( _a==107 ) {
				return "Centcom Teleporter";
			} else if ( _a==103 ) {
				return "Special Ops";
			} else if ( _a==110 ) {
				return "Emergency Response Team";
			} else if ( _a==108 ) {
				return "Creed Officer";
			} else if ( _a==109 ) {
				return "Centcom Captain";
			}
			return null;
		}

		// Function from file: access.dm
		public static ByTable get_ert_access(  ) {
			return new ByTable(new object [] { 
				GlobalVars.access_security, 
				GlobalVars.access_sec_doors, 
				GlobalVars.access_brig, 
				GlobalVars.access_armory, 
				GlobalVars.access_medical, 
				GlobalVars.access_genetics, 
				GlobalVars.access_surgery, 
				GlobalVars.access_paramedic, 
				GlobalVars.access_atmospherics, 
				GlobalVars.access_engine, 
				GlobalVars.access_tech_storage, 
				GlobalVars.access_robotics, 
				GlobalVars.access_research, 
				GlobalVars.access_external_airlocks, 
				GlobalVars.access_teleporter, 
				GlobalVars.access_eva, 
				GlobalVars.access_maint_tunnels, 
				GlobalVars.access_tcomsat, 
				GlobalVars.access_gateway
			 });
		}

		// Function from file: access.dm
		public static ByTable get_region_accesses( double? code = null ) {
			
			switch ((double?)( code )) {
				case 0:
					return GlobalFuncs.get_all_accesses();
					break;
				case 1:
					return new ByTable(new object [] { 
						GlobalVars.access_sec_doors, 
						GlobalVars.access_weapons, 
						GlobalVars.access_security, 
						GlobalVars.access_brig, 
						GlobalVars.access_armory, 
						GlobalVars.access_forensics_lockers, 
						GlobalVars.access_court, 
						GlobalVars.access_hos
					 });
					break;
				case 2:
					return new ByTable(new object [] { 
						GlobalVars.access_medical, 
						GlobalVars.access_genetics, 
						GlobalVars.access_morgue, 
						GlobalVars.access_chemistry, 
						GlobalVars.access_paramedic, 
						GlobalVars.access_virology, 
						GlobalVars.access_surgery, 
						GlobalVars.access_cmo
					 });
					break;
				case 3:
					return new ByTable(new object [] { 
						GlobalVars.access_research, 
						GlobalVars.access_tox, 
						GlobalVars.access_tox_storage, 
						GlobalVars.access_robotics, 
						GlobalVars.access_mechanic, 
						GlobalVars.access_xenobiology, 
						GlobalVars.access_rd
					 });
					break;
				case 4:
					return new ByTable(new object [] { 
						GlobalVars.access_construction, 
						GlobalVars.access_maint_tunnels, 
						GlobalVars.access_engine, 
						GlobalVars.access_engine_equip, 
						GlobalVars.access_external_airlocks, 
						GlobalVars.access_tech_storage, 
						GlobalVars.access_mechanic, 
						GlobalVars.access_atmospherics, 
						GlobalVars.access_ce
					 });
					break;
				case 5:
					return new ByTable(new object [] { 
						GlobalVars.access_heads, 
						GlobalVars.access_RC_announce, 
						GlobalVars.access_keycard_auth, 
						GlobalVars.access_change_ids, 
						GlobalVars.access_ai_upload, 
						GlobalVars.access_teleporter, 
						GlobalVars.access_eva, 
						GlobalVars.access_tcomsat, 
						GlobalVars.access_gateway, 
						GlobalVars.access_all_personal_lockers, 
						GlobalVars.access_heads_vault, 
						GlobalVars.access_hop, 
						GlobalVars.access_captain
					 });
					break;
				case 6:
					return new ByTable(new object [] { 
						GlobalVars.access_kitchen, 
						GlobalVars.access_bar, 
						GlobalVars.access_hydroponics, 
						GlobalVars.access_janitor, 
						GlobalVars.access_chapel_office, 
						GlobalVars.access_crematorium, 
						GlobalVars.access_library, 
						GlobalVars.access_theatre, 
						GlobalVars.access_lawyer, 
						GlobalVars.access_clown, 
						GlobalVars.access_mime
					 });
					break;
				case 7:
					return new ByTable(new object [] { GlobalVars.access_mailsorting, GlobalVars.access_mining, GlobalVars.access_mining_station, GlobalVars.access_cargo, GlobalVars.access_qm, GlobalVars.access_taxi });
					break;
			}
			return null;
		}

		// Function from file: access.dm
		public static string get_region_accesses_name( double? code = null ) {
			
			switch ((double?)( code )) {
				case 0:
					return "All";
					break;
				case 1:
					return "Security";
					break;
				case 2:
					return "Medbay";
					break;
				case 3:
					return "Research";
					break;
				case 4:
					return "Engineering";
					break;
				case 5:
					return "Command";
					break;
				case 6:
					return "Station General";
					break;
				case 7:
					return "Supply";
					break;
			}
			return null;
		}

		// Function from file: Accounts.dm
		public static MoneyAccount create_account( dynamic new_owner_name = null, int? starting_funds = null, Obj_Machinery_AccountDatabase source_db = null ) {
			new_owner_name = new_owner_name ?? "Default user";
			starting_funds = starting_funds ?? 0;

			MoneyAccount M = null;
			Transaction T = null;
			double? DD = null;
			Obj_Item_Delivery P = null;
			Obj_Item_Weapon_Paper R = null;
			Image stampoverlay = null;

			M = new MoneyAccount();
			M.owner_name = new_owner_name;
			M.remote_access_pin = Rand13.Int( 1111, 9999 );
			M.money = starting_funds;
			T = new Transaction();
			T.target_name = new_owner_name;
			T.purpose = "Account creation";
			T.amount = starting_funds;

			if ( !( source_db != null ) ) {
				DD = String13.ParseNumber( String13.FormatTime( Game13.timeofday, "DD" ) );
				T.date = "" + ( DD == 1 ? "31" : "" + ( ( DD ??0) - 1 ) ) + " " + String13.FormatTime( Game13.timeofday, "Month" ) + ", " + GlobalVars.game_year;
				T.time = "" + Rand13.Int( 0, 24 ) + ":" + Rand13.Int( 11, 59 );
				T.source_terminal = "NTGalaxyNet Terminal #" + GlobalFuncs.multinum_display( Rand13.Int( 111, 1111 ), 4 );
				M.account_number = Rand13.Int( 11111, 99999 );
			} else {
				T.date = GlobalVars.current_date_string;
				T.time = GlobalFuncs.worldtime2text();
				T.source_terminal = source_db.machine_id;
				M.account_number = GlobalVars.next_account_number;
				GlobalVars.next_account_number += Rand13.Int( 1, 25 );
				P = new Obj_Item_Delivery( source_db.loc );
				R = new Obj_Item_Weapon_Paper( P );
				P.wrapped = R;
				R.name = "Account information: " + M.owner_name;
				R.info = "<b>Account details (confidential)</b><br><hr><br>\n			<i>Account holder:</i> " + M.owner_name + "<br>\n			<i>Account number:</i> " + M.account_number + "<br>\n			<i>Account pin:</i> " + M.remote_access_pin + "<br>\n			<i>Starting balance:</i> $" + M.money + "<br>\n			<i>Date and time:</i> " + GlobalFuncs.worldtime2text() + ", " + GlobalVars.current_date_string + "<br><br>\n			<i>Creation terminal ID:</i> " + source_db.machine_id + "<br>\n			<i>Authorised NT officer overseeing creation:</i> " + source_db.held_card.registered_name + "<br>";
				stampoverlay = new Image( "icons/obj/bureaucracy.dmi" );
				stampoverlay.icon_state = "paper_stamp-cent";

				if ( !( R.stamped != null ) ) {
					R.stamped = new ByTable();
				}
				R.stamped.Add( typeof(Obj_Item_Weapon_Stamp) );
				R.overlays.Add( stampoverlay );
				R.stamps += "<HR><i>This paper has been stamped by the Accounts Database.</i>";
			}
			M.transaction_log.Add( T );
			GlobalVars.all_money_accounts.Add( M );
			return M;
		}

		// Function from file: Accounts.dm
		public static void create_department_account( dynamic department = null ) {
			MoneyAccount department_account = null;
			Transaction T = null;

			GlobalVars.next_account_number = Rand13.Int( 111111, 999999 );
			department_account = new MoneyAccount();
			department_account.owner_name = "" + department + " Account";
			department_account.account_number = Rand13.Int( 11111, 99999 );
			department_account.remote_access_pin = Rand13.Int( 1111, 9999 );
			department_account.money = 5000;
			T = new Transaction();
			T.target_name = department_account.owner_name;
			T.purpose = "Account creation";
			T.amount = department_account.money;
			T.date = "2nd April, " + GlobalVars.game_year;
			T.time = "11:24";
			T.source_terminal = "Biesel GalaxyNet Terminal #277";
			department_account.transaction_log.Add( T );
			GlobalVars.all_money_accounts.Add( department_account );
			GlobalVars.department_accounts[department] = department_account;
			return;
		}

		// Function from file: Accounts.dm
		public static void create_station_account(  ) {
			Transaction T = null;

			
			if ( !( GlobalVars.station_account != null ) ) {
				GlobalVars.next_account_number = Rand13.Int( 11111, 99999 );
				GlobalVars.station_account = new MoneyAccount();
				GlobalVars.station_account.owner_name = "" + GlobalFuncs.station_name() + " Station Account";
				GlobalVars.station_account.account_number = Rand13.Int( 11111, 99999 );
				GlobalVars.station_account.remote_access_pin = Rand13.Int( 1111, 9999 );
				GlobalVars.station_account.money = 5000;
				T = new Transaction();
				T.target_name = GlobalVars.station_account.owner_name;
				T.purpose = "Account creation";
				T.amount = 5000;
				T.date = "2nd April, " + GlobalVars.game_year;
				T.time = "11:24";
				T.source_terminal = "Biesel GalaxyNet Terminal #277";
				GlobalVars.station_account.transaction_log.Add( T );
				GlobalVars.all_money_accounts.Add( GlobalVars.station_account );
			}
			return;
		}

		// Function from file: admin_ranks.dm
		public static void load_admin_ranks(  ) {
			int previous_rights = 0;
			ByTable Lines = null;
			dynamic line = null;
			ByTable List = null;
			string rank = null;
			int rights = 0;
			int? i = null;

			GlobalVars.admin_ranks.len = 0;
			previous_rights = 0;
			Lines = GlobalFuncs.file2list( "config/admin_ranks.txt" );

			foreach (dynamic _c in Lang13.Enumerate( Lines )) {
				line = _c;
				

				if ( !( Lang13.Length( line ) != 0 ) ) {
					continue;
				}

				if ( String13.SubStr( line, 1, 2 ) == "#" ) {
					continue;
				}
				List = GlobalFuncs.text2list( line, "+" );

				if ( !( List.len != 0 ) ) {
					continue;
				}
				rank = String13.CKeyPreserveCase( List[1] );

				switch ((string)( rank )) {
					case null:
					case "":
						continue;
						break;
					case "Removed":
						continue;
						break;
				}
				rights = 0;
				i = null;
				i = 2;

				while (( i ??0) <= List.len) {
					
					switch ((string)( String13.CKey( List[i] ) )) {
						case "@":
						case "prev":
							rights |= previous_rights;
							break;
						case "buildmode":
						case "build":
							rights |= 1;
							break;
						case "admin":
							rights |= 2;
							break;
						case "ban":
							rights |= 4;
							break;
						case "fun":
							rights |= 8;
							break;
						case "server":
							rights |= 16;
							break;
						case "debug":
							rights |= 32;
							break;
						case "permissions":
						case "rights":
							rights |= 128;
							break;
						case "possess":
							rights |= 64;
							break;
						case "stealth":
							rights |= 256;
							break;
						case "rejuv":
						case "rejuvinate":
							rights |= 512;
							break;
						case "varedit":
							rights |= 1024;
							break;
						case "everything":
						case "host":
						case "all":
							rights |= 65535;
							break;
						case "sound":
						case "sounds":
							rights |= 2048;
							break;
						case "spawn":
						case "create":
							rights |= 4096;
							break;
						case "mod":
							rights |= 8192;
							break;
						case "adminbus":
						case "bus":
							rights |= 16384;
							break;
					}
					i++;
				}
				GlobalVars.admin_ranks[rank] = rights;
				previous_rights = rights;
			}
			return;
		}

		// Function from file: admin_ranks.dm
		public static void load_admins(  ) {
			dynamic C = null;
			ByTable Lines = null;
			dynamic line = null;
			ByTable List = null;
			string ckey = null;
			string rank = null;
			dynamic rights = null;
			Admins D = null;
			DBQuery query = null;
			string ckey2 = null;
			string rank2 = null;
			dynamic rights2 = null;
			Admins D2 = null;

			GlobalVars.admin_datums.len = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}
				((Client)C).remove_admin_verbs();
				C.holder = null;
			}
			GlobalVars.admins.len = 0;

			if ( GlobalVars.config.admin_legacy_system ) {
				GlobalFuncs.load_admin_ranks();
				Lines = GlobalFuncs.file2list( "config/admins.txt" );

				foreach (dynamic _b in Lang13.Enumerate( Lines )) {
					line = _b;
					

					if ( !( Lang13.Length( line ) != 0 ) ) {
						continue;
					}

					if ( String13.SubStr( line, 1, 2 ) == "#" ) {
						continue;
					}
					List = GlobalFuncs.text2list( line, "-" );

					if ( !( List.len != 0 ) ) {
						continue;
					}
					ckey = String13.CKey( List[1] );

					if ( !Lang13.Bool( ckey ) ) {
						continue;
					}
					rank = "";

					if ( List.len >= 2 ) {
						rank = String13.CKeyPreserveCase( List[2] );
					}
					rights = GlobalVars.admin_ranks[rank];
					D = new Admins( rank, rights, ckey );
					D.associate( GlobalVars.directory[ckey] );
				}
			} else {
				GlobalFuncs.establish_db_connection();

				if ( !GlobalVars.dbcon.IsConnected() ) {
					Game13.log.WriteMsg( "Failed to connect to database in load_admins(). Reverting to legacy system." );
					GlobalVars.diary.WriteMsg( "Failed to connect to database in load_admins(). Reverting to legacy system." );
					GlobalVars.config.admin_legacy_system = true;
					GlobalFuncs.load_admins();
					return;
				}
				query = GlobalVars.dbcon.NewQuery( "SELECT ckey, rank, level, flags FROM erro_admin" );
				query.Execute();

				while (query.NextRow()) {
					ckey2 = query.item[1];
					rank2 = query.item[2];

					if ( rank2 == "Removed" ) {
						continue;
					}
					rights2 = query.item[4];

					if ( rights2 is string ) {
						rights2 = String13.ParseNumber( rights2 );
					}
					D2 = new Admins( rank2, rights2, ckey2 );
					D2.associate( GlobalVars.directory[ckey2] );
				}

				if ( !( GlobalVars.admin_datums != null ) ) {
					Game13.log.WriteMsg( "The database query in load_admins() resulted in no admins being added to the list. Reverting to legacy system." );
					GlobalVars.diary.WriteMsg( "The database query in load_admins() resulted in no admins being added to the list. Reverting to legacy system." );
					GlobalVars.config.admin_legacy_system = true;
					GlobalFuncs.load_admins();
					return;
				}
			}
			return;
		}

		// Function from file: admin.dm
		public static ByTable exportnotes( string key = null ) {
			SaveFile info = null;
			dynamic infos = null;
			ByTable noteslist = null;
			int i = 0;
			PlayerInfo I = null;

			info = new SaveFile( "data/player_saves/" + String13.SubStr( key, 1, 2 ) + "/" + key + "/info.sav" );
			infos = ((dynamic)info).Read();
			noteslist = new ByTable();

			if ( !Lang13.Bool( infos ) ) {
				return new ByTable().Set( "1", "No notes found for " + key );
			} else {
				i = 0;

				foreach (dynamic _a in Lang13.Enumerate( infos, typeof(PlayerInfo) )) {
					I = _a;
					
					i += 1;

					if ( !Lang13.Bool( I.timestamp ) ) {
						I.timestamp = "Pre-4/3/2012";
					}

					if ( !Lang13.Bool( I.rank ) ) {
						I.rank = "N/A";
					}
					noteslist["" + i] = "<font color=#008800>" + I.content + "</font> <i>by " + I.author + " (" + I.rank + ")</i> on <i><font color=blue>" + I.timestamp + "</i></font>";
				}
			}

			if ( !( noteslist.len != 0 ) ) {
				noteslist["1"] = "No notes found for " + key;
			}
			return noteslist;
		}

		// Function from file: admin.dm
		public static string formatJumpTo( dynamic location = null, string where = null ) {
			where = where ?? "";

			dynamic loc = null;

			
			if ( location is Tile ) {
				loc = location;
			} else {
				loc = GlobalFuncs.get_turf( location );
			}

			if ( where == "" ) {
				where = GlobalFuncs.formatLocation( loc );
			}
			return "<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + ( Lang13.Bool( loc ) ? loc.x : "mystery" ) + ";Y=" + ( Lang13.Bool( loc ) ? loc.y : "mystery" ) + ";Z=" + ( Lang13.Bool( loc ) ? loc.z : "mystery" ) + "'>" + where + "</a>";
		}

		// Function from file: admin.dm
		public static string formatLocation( dynamic location = null ) {
			dynamic loc = null;
			dynamic A = null;
			string answer = null;

			
			if ( location is Tile ) {
				loc = location;
			} else {
				loc = GlobalFuncs.get_turf( location );
			}
			A = GlobalFuncs.get_area( location );
			answer = "" + ( A is Zone ? "" + A.name : "UNKNOWN" ) + " - " + ( loc is Tile ? "" + loc.x + "," + loc.y + "," + loc.z : "UNKNOWN" );
			return answer;
		}

		// Function from file: admin.dm
		public static string formatPlayerPanel( dynamic U = null, string text = null ) {
			text = text ?? "PP";

			return new Txt( "<A HREF='?_src_=holder;adminplayeropts=" ).Ref( U ).str( "'>" ).item( text ).str( "</A>" ).ToString();
		}

		// Function from file: admin.dm
		public static int is_special_character( dynamic M = null ) {
			dynamic R = null;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				return 0;
			}

			if ( !( M is Mob ) ) {
				return 0;
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( M.mind ) );

			if ( !( M is Mob ) || false ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "revolution" ) {
					return 2;
				}
				return 1;
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( M.mind ) );

			if ( !( M is Mob ) || false ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "cult" ) {
					return 2;
				}
				return 1;
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.malf_ai.Contains( M.mind ) );

			if ( !( M is Mob ) || false ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "malfunction" ) {
					return 2;
				}
				return 1;
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( M.mind ) );

			if ( !( M is Mob ) || false ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "nuclear" ) {
					return 2;
				}
				return 1;
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( M.mind ) );

			if ( !( M is Mob ) || false ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "wizard" ) {
					return 2;
				}
				return 1;
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.changelings.Contains( M.mind ) );

			if ( !( M is Mob ) || false ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "changeling" ) {
					return 2;
				}
				return 1;
			}

			if ( M is Mob_Living_SimpleAnimal_Borer ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "borer" ) {
					return 2;
				}
				return 1;
			}
			Interface13.Stat( GlobalVars.ticker.mode.infected_monkeys, M.viruses.Contains( typeof(Disease_JungleFever) ) );
			Interface13.Stat( null, null.Contains( M is Mob_Living_SimpleAnimal_Borer || Lang13.Bool( M.mind ) ) );

			if ( M is Mob_Living_SimpleAnimal_Borer ) {
				
				if ( GlobalVars.ticker.mode.config_tag == "monkey" ) {
					return 2;
				}
				return 1;
			}

			if ( M is Mob_Living_Silicon_Robot ) {
				R = M;

				if ( Lang13.Bool( R.emagged ) ) {
					return 1;
				}
			}

			if ( Lang13.Bool( M.mind ) && Lang13.Bool( M.mind.special_role ) ) {
				return 1;
			}
			return 0;
		}

		// Function from file: admin.dm
		public static void message_admins( string msg = null ) {
			dynamic C = null;

			msg = "<span class=\"admin\"><span class=\"prefix\">ADMIN LOG:</span> <span class=\"message\">" + msg + "</span></span>";
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ADMINWARN: " + msg ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C.holder.rights & 2 ) ) {
					GlobalFuncs.to_chat( C, msg );
				}
			}
			return;
		}

		// Function from file: admin.dm
		public static void move_admin_shuttle(  ) {
			dynamic fromArea = null;
			dynamic toArea = null;

			
			if ( GlobalVars.admin_shuttle_location ) {
				fromArea = Lang13.FindObj( typeof(Zone_Shuttle_Administration_Station) );
				toArea = Lang13.FindObj( typeof(Zone_Shuttle_Administration_Centcom) );
			} else {
				fromArea = Lang13.FindObj( typeof(Zone_Shuttle_Administration_Centcom) );
				toArea = Lang13.FindObj( typeof(Zone_Shuttle_Administration_Station) );
			}
			((Zone)fromArea).move_contents_to( toArea );

			if ( GlobalVars.admin_shuttle_location ) {
				GlobalVars.admin_shuttle_location = false;
			} else {
				GlobalVars.admin_shuttle_location = true;
			}
			return;
		}

		// Function from file: admin.dm
		public static void move_alien_ship(  ) {
			dynamic fromArea = null;
			dynamic toArea = null;

			
			if ( GlobalVars.alien_ship_location ) {
				fromArea = Lang13.FindObj( typeof(Zone_Shuttle_Alien_Mine) );
				toArea = Lang13.FindObj( typeof(Zone_Shuttle_Alien_Base) );
			} else {
				fromArea = Lang13.FindObj( typeof(Zone_Shuttle_Alien_Base) );
				toArea = Lang13.FindObj( typeof(Zone_Shuttle_Alien_Mine) );
			}
			((Zone)fromArea).move_contents_to( toArea );

			if ( GlobalVars.alien_ship_location ) {
				GlobalVars.alien_ship_location = false;
			} else {
				GlobalVars.alien_ship_location = true;
			}
			return;
		}

		// Function from file: admin.dm
		public static void msg_admin_attack( string text = null ) {
			string rendered = null;
			dynamic C = null;
			string msg = null;

			rendered = "<span class=\"admin\"><span class=\"prefix\">ADMIN LOG:</span> <span class=\"message\">" + text + "</span></span>";
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ADMINWARN: " + rendered ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C.holder.rights & 2 ) ) {
					
					if ( Lang13.Bool( C.prefs.toggles & 1024 ) ) {
						msg = rendered;
						GlobalFuncs.to_chat( C, msg );
					}
				}
			}
			return;
		}

		// Function from file: advance.dm
		public static dynamic Advance_Mix( ByTable D_list = null ) {
			ByTable diseases = null;
			Disease_Advance A = null;
			int i = 0;
			dynamic D1 = null;
			dynamic D2 = null;
			dynamic to_return = null;

			diseases = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( D_list, typeof(Disease_Advance) )) {
				A = _a;
				
				diseases.Add( A.Copy() );
			}

			if ( !( diseases.len != 0 ) ) {
				return null;
			}

			if ( diseases.len <= 1 ) {
				return Rand13.PickFromTable( diseases );
			}
			i = 0;

			while (i < 20 && diseases.len > 1) {
				i++;
				D1 = Rand13.PickFromTable( diseases );
				diseases.Remove( D1 );
				D2 = Rand13.PickFromTable( diseases );
				((Disease_Advance)D2).Mix( D1 );
			}
			to_return = Rand13.PickFromTable( diseases );
			((Disease_Advance)to_return).Refresh( true );
			return to_return;
		}

		// Function from file: advance.dm
		public static void SetViruses( dynamic R = null, dynamic data = null ) {
			ByTable preserve = null;
			Disease A = null;

			
			if ( Lang13.Bool( data ) ) {
				preserve = new ByTable();

				if ( data is ByTable && Lang13.Bool( data["viruses"] ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( data["viruses"], typeof(Disease) )) {
						A = _a;
						
						preserve.Add( A.Copy() );
					}
					R.data = data.Copy();
				} else {
					R.data = data;
				}

				if ( preserve.len != 0 ) {
					R.data["viruses"] = preserve;
				}
			}
			return;
		}

		// Function from file: ai_laws.dm
		public static dynamic getLawset( Mob_Living_Silicon M = null ) {
			
			if ( !Lang13.Bool( GlobalVars.base_law_type ) ) {
				GlobalVars.base_law_type = Rand13.PickWeighted(new object [] { 26214, typeof(AiLaws_Asimov), 39321, typeof(AiLaws_Corporate), 52428, typeof(AiLaws_Nanotrasen), 58981, typeof(AiLaws_Robocop), 65535, typeof(AiLaws_Paladin) });
			}
			return Lang13.Call( GlobalVars.base_law_type );
		}

		// Function from file: ai.dm
		public static bool AutoUpdateAI( Obj_Machinery_Power_Turbine subject = null ) {
			bool is_in_use = false;
			dynamic A = null;
			dynamic M = null;

			is_in_use = false;

			if ( subject != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ai_list )) {
					A = _a;
					
					M = A;

					if ( Lang13.Bool( M.client ) && M.machine == subject ) {
						is_in_use = true;
						subject.attack_ai( M );
					}
				}
			}
			return is_in_use;
		}

		// Function from file: antag_madness.dm
		public static bool create_madness( dynamic M = null, dynamic choice = null ) {
			Obj_Item_Packobelongings pack = null;
			Obj_Item I = null;
			Obj_Item_Device_Radio_Uplink U = null;
			Obj_Item_Packobelongings pack2 = null;
			Obj_Item I2 = null;
			dynamic cult = null;
			string explanation1 = null;
			string explanation2 = null;
			string explanation3 = null;
			Obj_Item_Packobelongings pack3 = null;
			Obj_Item I3 = null;
			Obj_Item_Weapon_Tome T = null;
			Obj_Item_Weapon_Paper_Talisman_Supply A = null;
			dynamic K = null;
			Obj_Item_Weapon_Storage_Backpack_Cultpack P = null;
			Obj_Item_Clothing_Monkeyclothes_Cultrobes JS = null;
			Obj_Item_Clothing_Head_Culthood_Alt CH = null;
			dynamic olduniform = null;
			Ent_Static oldhat = null;
			dynamic word = null;
			Obj_Item_Packobelongings pack4 = null;
			Obj_Item I4 = null;
			Obj_Item_Packobelongings pack5 = null;
			Obj_Item I5 = null;
			Obj_Item_Device_Radio_Uplink U2 = null;
			string explanation12 = null;
			string explanation22 = null;
			string explanation32 = null;
			Obj_Item_Packobelongings pack6 = null;
			Obj_Item I6 = null;
			Obj_Item_Weapon_Card_Id_Centcom ID = null;
			Obj_Item_Packobelongings pack7 = null;
			Obj_Item I7 = null;
			Obj_Item_Weapon_Spellbook S = null;
			Obj_Item_Weapon_TeleportationScroll T2 = null;
			dynamic H = null;
			dynamic K2 = null;

			
			if ( M.mind.assigned_role == "Clown" ) {
				GlobalFuncs.to_chat( M, "The adminbus has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
				M.mutations.Remove( 5 );
			}

			dynamic _i = choice; // Was a switch-case, sorry for the mess.
			if ( _i=="traitor" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.traitors.Contains( M.mind ) );

				if ( false ) {
					return false;
				}
				GlobalVars.ticker.mode.traitors.Add( M.mind );
				M.mind.special_role = "traitor";
				((GameMode)GlobalVars.ticker.mode).forge_traitor_objectives( M.mind );
				((GameMode)GlobalVars.ticker.mode).greet_traitor( M.mind );
				pack = new Obj_Item_Packobelongings( M );
				pack.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _a in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I = _a;
					
					((Mob)M).u_equip( I, true );

					if ( I != null ) {
						I.loc = M.loc;
						I.layer = Convert.ToDouble( Lang13.Initial( I, "layer" ) );
						I.loc = pack;
					}
				}
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(), 8 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Chameleon(), 14 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Syndigaloshes(), 12 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_Voice(), 2 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack(), 1 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Card_Id_Syndicate(), 7 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Syndicate(), 11 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Syndicate(), 13 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Yellow(), 10 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Utility_Complete(), 6 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Tank_Oxygen(), 17 );
				U = new Obj_Item_Device_Radio_Uplink(  );
				U.hidden_uplink.uses = 40;
				((Mob)M).equip_to_slot_or_del( U, 15 );
				((Mob)M).regenerate_icons();
				((Mob)M).equip_to_slot_or_del( pack, 18 );
				GlobalFuncs.to_chat( M, "Your previous belongings have been stored in your backpack." );
				return true;
			} else if ( _i=="changeling" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.changelings.Contains( M.mind ) );

				if ( false ) {
					return false;
				}
				GlobalVars.ticker.mode.changelings.Add( M.mind );
				((GameMode)GlobalVars.ticker.mode).grant_changeling_powers( M );
				M.mind.special_role = "Changeling";
				((GameMode)GlobalVars.ticker.mode).forge_changeling_objectives( M.mind );
				((GameMode)GlobalVars.ticker.mode).greet_changeling( M.mind );
				M.mind.changeling.geneticpoints = 100;
				GlobalFuncs.to_chat( M, "<span class='danger'>You have been gifted a total of 100 evolution points to spend!</span>" );
				return true;
			} else if ( _i=="vampire" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.vampires.Contains( M.mind ) );

				if ( false || M.mind.vampire != null ) {
					return false;
				}
				GlobalVars.ticker.mode.vampires.Add( M.mind );
				((GameMode)GlobalVars.ticker.mode).grant_vampire_powers( M );
				M.mind.special_role = "Vampire";
				((GameMode)GlobalVars.ticker.mode).forge_vampire_objectives( M.mind );
				((GameMode)GlobalVars.ticker.mode).greet_vampire( M.mind );
				M.mind.vampire.bloodtotal = 666;
				M.mind.vampire.bloodusable = 666;
				((Mob)M).check_vampire_upgrade( M.mind );
				pack2 = new Obj_Item_Packobelongings( M );
				pack2.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _b in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I2 = _b;
					
					((Mob)M).u_equip( I2, true );

					if ( I2 != null ) {
						I2.loc = M.loc;
						I2.layer = Convert.ToDouble( Lang13.Initial( I2, "layer" ) );
						I2.loc = pack2;
					}
				}
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(), 8 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Batmansuit(), 14 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel(), 1 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Jackboots(), 12 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Batmangloves(), 10 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_DeathCommando(), 2 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Storage_Draculacoat(), 13 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_ChaplainHood(), 11 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Tank_EmergencyOxygen_Double(), 17 );
				((Mob)M).equip_to_slot_or_del( pack2, 18 );
				GlobalFuncs.to_chat( M, "Your previous belongings have been stored in your backpack." );
				((Mob)M).regenerate_icons();
				GlobalFuncs.to_chat( M, "<span class='danger'>You have been gifted a total of 666 usable units of blood!</span>" );
				return true;
			} else if ( _i=="cult" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( M.mind ) );

				if ( false ) {
					return false;
				}
				GlobalVars.ticker.mode.cult += M.mind;
				((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( M.mind );
				M.mind.special_role = "Cultist";
				GlobalFuncs.to_chat( M, "<span class='sinister'>You remember the Realm of Nar-Sie, The Geometer of Blood. You now see how flimsy the world is, you see that it should be open to the knowledge of Nar-Sie.</span>" );
				GlobalFuncs.to_chat( M, "<span class='sinister'>Assist your new compatriots in their dark dealings. Their goal is yours, and yours is theirs. You serve the Dark One above all else. Bring It back.</span>" );
				GlobalFuncs.to_chat( M, "<span class='sinister'>You can now speak and understand the forgotten tongue of the occult.</span>" );
				((Mob)M).add_language( "Cult" );
				cult = GlobalVars.ticker.mode;

				if ( cult is GameMode_Cult ) {
					((GameMode_Cult)cult).memoize_cult_objectives( M.mind );
				} else {
					explanation1 = "Check for any fellow cultist, coordinate with them.";
					explanation2 = "Convert, soulstone, or sacrifice your foes.";
					explanation3 = "Summon Nar-Sie.";
					GlobalFuncs.to_chat( M, "<B>Objective #1</B>: " + explanation1 );
					M.memory += "<B>Objective #1</B>: " + explanation1 + "<BR>";
					GlobalFuncs.to_chat( M, "<B>Objective #2</B>: " + explanation2 );
					M.memory += "<B>Objective #2</B>: " + explanation2 + "<BR>";
					GlobalFuncs.to_chat( M, "<B>Objective #3</B>: " + explanation3 );
					M.memory += "<B>Objective #3</B>: " + explanation3 + "<BR>";
					GlobalFuncs.to_chat( M, "The convert rune is join blood self" );
				}
				pack3 = new Obj_Item_Packobelongings( M );
				pack3.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _c in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I3 = _c;
					
					((Mob)M).u_equip( I3, true );

					if ( I3 != null ) {
						I3.loc = M.loc;
						I3.layer = Convert.ToDouble( Lang13.Initial( I3, "layer" ) );
						I3.loc = pack3;
					}
				}
				T = new Obj_Item_Weapon_Tome( M );
				A = new Obj_Item_Weapon_Paper_Talisman_Supply( M );

				if ( M is Mob_Living_Carbon_Human ) {
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(), 8 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Black(), 14 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Cult(), 12 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_DeathCommando(), 2 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Cultpack(), 1 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Cult(), 11 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Cult(), 13 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Tank_EmergencyOxygen_Double(), 17 );
					((Mob)M).equip_to_slot_or_del( pack3, 18 );
					((Mob)M).equip_to_slot_or_del( T, 18 );
					((Mob)M).equip_to_slot_or_del( A, 18 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Cultblade(), 5 );
				} else if ( M is Mob_Living_Carbon_Monkey ) {
					K = M;
					P = new Obj_Item_Weapon_Storage_Backpack_Cultpack( K );
					((Mob)K).equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_DeathCommando( K ), 2 );
					((Mob)K).equip_to_slot_or_del( P, 1 );
					pack3.loc = P;
					T.loc = P;
					A.loc = P;
					((Mob)K).equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Cultblade( K ), 5 );
					JS = new Obj_Item_Clothing_Monkeyclothes_Cultrobes( K );
					CH = new Obj_Item_Clothing_Head_Culthood_Alt( K );
					olduniform = null;
					oldhat = null;

					if ( Lang13.Bool( K.uniform ) ) {
						olduniform = K.uniform;
						K.uniform = null;
						olduniform.loc = pack3;
					}
					K.uniform = JS;
					K.uniform.loc = K;

					if ( Lang13.Bool( K.hat ) ) {
						oldhat = K.hat;
						K.hat = null;
						oldhat.loc = pack3;
					}
					K.hat = CH;
					K.hat.loc = K;
				}
				((Mob)M).regenerate_icons();
				GlobalFuncs.to_chat( M, "Your previous belongings have been stored in your backpack." );

				if ( !Lang13.Bool( GlobalVars.cultwords["travel"] ) ) {
					GlobalFuncs.runerandom();
				}

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.engwords )) {
					word = _d;
					
					M.mind.store_memory( "" + GlobalVars.cultwords[word] + " is " + word + "<BR>" );
				}
				GlobalFuncs.to_chat( M, "<span class='danger'>You suddenly realize that you clearly remember every single rune word! Check your notes.</span>" );
				GlobalFuncs.to_chat( M, "<span class='sinister'>A tome, a message from your new master, appears in your backpack.</span>" );
				GlobalFuncs.to_chat( M, "<span class='sinister'>You have a talisman in your backpack, one that will help you start the cult on this station. Use it well and remember - there are others...or maybe not...</span>" );
				return true;
			} else if ( _i=="rev" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( M.mind ) );

				if ( false ) {
					return false;
				}
				GlobalVars.ticker.mode.head_revolutionaries.Add( M.mind );
				((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( M.mind );
				M.mind.special_role = "Head Revolutionary";
				((GameMode)GlobalVars.ticker.mode).forge_revolutionary_objectives( M.mind );
				((GameMode)GlobalVars.ticker.mode).greet_revolutionary( M.mind, false );
				pack4 = new Obj_Item_Packobelongings( M );
				pack4.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _e in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I4 = _e;
					
					((Mob)M).u_equip( I4, true );

					if ( I4 != null ) {
						I4.loc = M.loc;
						I4.layer = Convert.ToDouble( Lang13.Initial( I4, "layer" ) );
						I4.loc = pack4;
					}
				}
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Syndicate(), 8 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Soviet(), 14 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Jackboots(), 12 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Cigarette_Cigar_Havana(), 2 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel(), 1 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Card_Id_Syndicate(), 7 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Russofurhat(), 11 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Russofurcoat(), 13 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Grey(), 10 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Katana(), 6 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Flash(), 15 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Fancy_Matchbox_StrikeAnywhere(), 16 );
				((Mob)M).regenerate_icons();
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_Laser_LaserAK(), 18 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_Laser_LaserAK(), 18 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Flash(), 18 );
				((Mob)M).equip_to_slot_or_del( pack4, 18 );
				GlobalFuncs.to_chat( M, "Your previous belongings have been stored in your backpack." );
				GlobalFuncs.to_chat( M, "The flash in your pocket will help you to persuade the crew to join your cause." );
				return true;
			} else if ( _i=="nuke" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( M.mind ) );

				if ( false ) {
					return false;
				}
				GlobalVars.ticker.mode.syndicates.Add( M.mind );
				((GameMode)GlobalVars.ticker.mode).update_synd_icons_added( M.mind );
				M.real_name = "" + GlobalFuncs.syndicate_name() + " Operative";
				M.mind.special_role = "Syndicate";
				M.mind.assigned_role = "MODE";
				GlobalFuncs.to_chat( M, "<span class='notice'>You are a " + GlobalFuncs.syndicate_name() + " agent!</span>" );
				((GameMode)GlobalVars.ticker.mode).forge_syndicate_objectives( M.mind );
				((GameMode)GlobalVars.ticker.mode).greet_syndicate( M.mind );
				pack5 = new Obj_Item_Packobelongings( M );
				pack5.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _f in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I5 = _f;
					
					((Mob)M).u_equip( I5, true );

					if ( I5 != null ) {
						I5.loc = M.loc;
						I5.layer = Convert.ToDouble( Lang13.Initial( I5, "layer" ) );
						I5.loc = pack5;
					}
				}
				((GameMode)GlobalVars.ticker.mode).equip_syndicate( M );
				((Mob)M).equip_to_slot_or_del( pack5, 18 );
				GlobalFuncs.to_chat( M, "Your previous belongings have been stored in your backpack." );
				Lang13.Delete( M.wear_suit );
				M.wear_suit = null;
				Lang13.Delete( M.head );
				M.head = null;
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_Syndicate( M ), 2 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Syndi( M ), 13 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Syndi( M ), 11 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Pinpointer_Nukeop( M ), 16 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Tank_Oxygen(), 17 );
				U2 = new Obj_Item_Device_Radio_Uplink(  );
				U2.hidden_uplink.uses = 40;
				((Mob)M).equip_to_slot_or_del( U2, 15 );
				((Mob)M).regenerate_icons();
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Codebreaker(), 18 );
				GlobalFuncs.to_chat( M, "You have been provided with a code breaker to decipher the nuke's code, it has been placed in your backpack." );
				return true;
			} else if ( _i=="deathsquad" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.deathsquads.Contains( M.mind ) );

				if ( false ) {
					return false;
				}
				GlobalVars.ticker.mode.deathsquad.Add( M.mind );
				M.mind.assigned_role = "MODE";
				M.mind.special_role = "Death Commando";
				GlobalVars.ticker.mode.deathsquads.Add( M.mind );
				GlobalFuncs.to_chat( M, "<span class='rose'>You are a rogue Death Squad agent. Your envy for powerful and exotic weapons got you caught by Centcomm when you stole their prototype Colt M1911-Pulse, and you ended up on the station by hiding on the cargo shuttle.</span>" );
				GlobalFuncs.to_chat( M, "<span class='rose'>Now that you're trapped here, free of any supervision, you might as well put the station's chaos to your advantage, and steal as many different types of weapons as you can.</span>" );
				explanation12 = "Disregard centcomm, aquire guns.";
				explanation22 = "Only kill if it helps you get rare guns, or if your life is in danger";
				explanation32 = "You're really not eager to go back to centcomm. Do not let the shuttle get called.";
				GlobalFuncs.to_chat( M, "<B>Objective #1</B>: " + explanation12 );
				M.memory += "<B>Objective #1</B>: " + explanation12 + "<BR>";
				GlobalFuncs.to_chat( M, "<B>Objective #2</B>: " + explanation22 );
				M.memory += "<B>Objective #2</B>: " + explanation22 + "<BR>";
				GlobalFuncs.to_chat( M, "<B>Objective #3</B>: " + explanation32 );
				M.memory += "<B>Objective #3</B>: " + explanation32 + "<BR>";
				pack6 = new Obj_Item_Packobelongings( M );
				pack6.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _g in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I6 = _g;
					
					((Mob)M).u_equip( I6, true );

					if ( I6 != null ) {
						I6.loc = M.loc;
						I6.layer = Convert.ToDouble( Lang13.Initial( I6, "layer" ) );
						I6.loc = pack6;
					}
				}
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Syndicate(), 8 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Green(), 14 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Swat(), 12 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_Swat(), 2 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Security(), 1 );
				ID = new Obj_Item_Weapon_Card_Id_Centcom( M );
				ID.icon_state = "deathsquad";
				((Mob)M).equip_to_slot_or_del( ID, 7 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Deathsquad(), 11 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Deathsquad(), 13 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Swat(), 10 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_PulseRifle_M1911(), 6 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Tank_EmergencyOxygen_Double(), 17 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Shield_Energy(), 15 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Energy_Sword(), 16 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal(), 9 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Firstaid_Adv(), 18 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box_Flashbangs(), 18 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Plastique(), 18 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Plastique(), 18 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_AmmoStorage_Speedloader_A357(), 18 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Projectile_Mateba(), 18 );
				((Mob)M).regenerate_icons();
				((Mob)M).equip_to_slot_or_del( pack6, 18 );
				GlobalFuncs.to_chat( M, "Your previous belongings have been stored in your backpack." );
				return true;
			} else if ( _i=="wizard" ) {
				Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( M.mind ) );

				if ( false ) {
					return false;
				}
				GlobalVars.ticker.mode.wizards.Add( M.mind );
				M.mind.special_role = "Wizard";
				M.mind.assigned_role = "MODE";
				((GameMode)GlobalVars.ticker.mode).update_wizard_icons_added( M.mind );
				((GameMode)GlobalVars.ticker.mode).forge_wizard_objectives( M.mind );
				((GameMode)GlobalVars.ticker.mode).greet_wizard( M.mind );
				pack7 = new Obj_Item_Packobelongings( M );
				pack7.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _h in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I7 = _h;
					
					((Mob)M).u_equip( I7, true );

					if ( I7 != null ) {
						I7.loc = M.loc;
						I7.layer = Convert.ToDouble( Lang13.Initial( I7, "layer" ) );
						I7.loc = pack7;
					}
				}

				if ( M.gender == "male" ) {
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sandal(), 12 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Wizard(), 11 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wizrobe(), 13 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Staff(), 4 );
					M.r_eyes = 102;
					M.g_eyes = 51;
					M.b_eyes = 0;
					M.r_hair = 178;
					M.g_hair = 178;
					M.b_hair = 178;
					M.r_facial = 178;
					M.g_facial = 178;
					M.b_facial = 178;
					M.f_style = "Dwarf Beard";
					M.h_style = "Shoulder-length Hair Alt";
				}

				if ( M.gender == "female" ) {
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sandal_Marisa(), 12 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Wizard_Marisa(), 11 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wizrobe_Marisa(), 13 );
					((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Staff_Broom(), 4 );
					M.r_eyes = 153;
					M.g_eyes = 102;
					M.b_eyes = 0;
					M.r_hair = 255;
					M.g_hair = 255;
					M.b_hair = 153;
					M.r_facial = 255;
					M.g_facial = 255;
					M.b_facial = 153;
					M.f_style = "Shaved";
					M.h_style = "Marisa";
				}
				((Mob_Living_Carbon_Human)M).update_body();
				((Mob_Living_Carbon_Human)M).update_hair();
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(), 8 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Lightpurple(), 14 );
				((Mob)M).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel(), 1 );
				S = new Obj_Item_Weapon_Spellbook( M );
				S.uses = 30;
				S.op = false;
				((Mob)M).equip_to_slot_or_del( S, 5 );
				T2 = new Obj_Item_Weapon_TeleportationScroll( M );
				T2.uses = 10;
				((Mob)M).equip_to_slot_or_del( T2, 15 );
				GlobalFuncs.to_chat( M, "You will find a list of available spells in your spell book. It has many more spells than normal spellbooks." );
				GlobalFuncs.to_chat( M, "In your pockets you will find a teleport scroll.It has twice as many uses as normal teleport scrolls." );
				((Mob)M).regenerate_icons();
				((GameMode)GlobalVars.ticker.mode).update_all_wizard_icons();
				((Mob)M).equip_to_slot_or_del( pack7, 18 );
				GlobalFuncs.to_chat( M, "Your previous belongings have been stored in your backpack." );
				return true;
			} else if ( _i=="monkey" ) {
				
				if ( M.monkeyizing ) {
					return false;
				}
				Interface13.Stat( GlobalVars.ticker.mode.infected_monkeys, M.viruses.Contains( typeof(Disease_JungleFever) ) );
				Interface13.Stat( null, null.Contains( M.monkeyizing || Lang13.Bool( M.mind ) ) );

				if ( M.monkeyizing ) {
					return false;
				}
				GlobalVars.ticker.mode.infected_monkeys.Add( M.mind );
				H = M;
				K2 = M;
				GlobalFuncs.to_chat( M, "<span class='danger'>YOU WERE A MONKEY ALL ALONG! JUNGLE NAITO FEEVAH!</span>" );

				if ( H is Mob_Living_Carbon_Human ) {
					K2 = ((Mob_Living_Carbon_Human)H).monkeyize();
					((Mob)K2).contract_disease( new Disease_JungleFever(), true, false );
				} else if ( K2 is Mob_Living_Carbon_Monkey ) {
					((Mob)M).contract_disease( new Disease_JungleFever(), true, false );
				}
				return true;
			}
			return false;
		}

		// Function from file: antibodies.dm
		public static string antigens2string( double? antigens = null ) {
			string code = null;
			dynamic V = null;

			code = "";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ANTIGENS )) {
				V = _a;
				

				if ( ( ((int)( String13.ParseNumber( V ) ??0 )) & ((int)( antigens ??0 )) ) != 0 ) {
					code += GlobalVars.ANTIGENS[V];
				}
			}
			return code;
		}

		// Function from file: AStar.dm
		public static dynamic AStar( dynamic start = null, dynamic end = null, System.Reflection.MethodInfo adjacent = null, System.Reflection.MethodInfo dist = null, int? maxnodes = null, int? maxnodedepth = null, dynamic mintargetdist = null, dynamic minnodedist = null, Obj_Item_Weapon_Card_Id id = null, Ent_Static exclude = null ) {
			maxnodedepth = maxnodedepth ?? 30;

			PriorityQueue open = null;
			ByTable closed = null;
			ByTable path = null;
			dynamic cur = null;
			bool? closeenough = null;
			dynamic L = null;
			dynamic T = null;
			double newg = 0;
			PathNode PN = null;
			dynamic T2 = null;
			double? i = null;

			
			if ( !( !( end is Zone ) ) ) {
				Task13.Crash( "" + "code/defines/procs/AStar.dm" + ":" + 159 + ":Assertion Failed: " + "!istype(end,/area)" );
			}
			open = new PriorityQueue( typeof(GlobalFuncs).GetMethod( "PathWeightCompare" ) );
			closed = new ByTable();
			path = null;
			start = GlobalFuncs.get_turf( start );

			if ( !Lang13.Bool( start ) ) {
				return 0;
			}
			open.Enqueue( new PathNode( start, null, 0, Lang13.Call( Lang13.BindFunc( start, dist ), end ), 0 ) );

			while (!open.IsEmpty() && !( path != null )) {
				cur = open.Dequeue();
				closed.Add( cur.source );
				closeenough = null;

				if ( Lang13.Bool( mintargetdist ) ) {
					closeenough = Convert.ToDouble( Lang13.Call( Lang13.BindFunc( cur.source, dist ), end ) ) <= Convert.ToDouble( mintargetdist );
				}

				if ( Lang13.Bool( maxnodedepth ) && ( cur.nt ??0) > ( maxnodedepth ??0) ) {
					continue;
				}

				if ( cur.source == end || closeenough == true ) {
					path = new ByTable();
					path.Add( cur.source );

					while (Lang13.Bool( cur.prevNode )) {
						cur = cur.prevNode;
						path.Add( cur.source );
					}
					break;
				}
				L = Lang13.Call( Lang13.BindFunc( cur.source, adjacent ), id, closed );

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					T = _a;
					

					if ( T == exclude ) {
						continue;
					}
					newg = cur.g + Convert.ToDouble( Lang13.Call( Lang13.BindFunc( cur.source, dist ), T ) );

					if ( !( T.PNode != null ) ) {
						open.Enqueue( new PathNode( T, cur, newg, Lang13.Call( Lang13.BindFunc( T, dist ), end ), ( cur.nt ??0) + 1 ) );
					} else if ( newg < T.PNode.g ) {
						T.PNode.prevNode = cur;
						T.PNode.g = newg;
						T.PNode.calc_f();
						open.ReSort( T.PNode );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( open.L, typeof(PathNode) )) {
				PN = _b;
				
				PN.source.PNode = null;
			}

			foreach (dynamic _c in Lang13.Enumerate( closed )) {
				T2 = _c;
				
				T2.PNode = null;
			}

			if ( path != null && Lang13.Bool( maxnodes ) && path.len > ( maxnodes ??0) + 1 ) {
				return 0;
			}

			if ( path != null ) {
				i = null;
				i = 1;

				while (( i ??0) <= path.len / 2) {
					path.Swap( ((int)( i ??0 )), ((int)( path.len - ( i ??0) + 1 )) );
					i++;
				}
			}
			return path;
		}

		// Function from file: AStar.dm
		public static bool DirBlocked( dynamic loc = null, int dir = 0 ) {
			Obj_Structure_Window D = null;
			Obj_Machinery_Door D2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( loc, typeof(Obj_Structure_Window) )) {
				D = _a;
				

				if ( !D.density ) {
					continue;
				}

				if ( D.dir == GlobalVars.SOUTHWEST ) {
					return true;
				}

				if ( D.dir == dir ) {
					return true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( loc, typeof(Obj_Machinery_Door) )) {
				D2 = _b;
				

				if ( !D2.density ) {
					continue;
				} else {
					return true;
				}
			}
			return false;
		}

		// Function from file: AStar.dm
		public static bool DirBlockedWithAccess( Tile loc = null, int dir = 0, Ent_Dynamic ID = null ) {
			Obj_Structure_Window D = null;
			Obj_Machinery_Door D2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( loc, typeof(Obj_Structure_Window) )) {
				D = _a;
				

				if ( !D.density ) {
					continue;
				}

				if ( D.dir == GlobalVars.SOUTHWEST ) {
					return true;
				}

				if ( D.dir == dir ) {
					return true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( loc, typeof(Obj_Machinery_Door) )) {
				D2 = _b;
				

				if ( !D2.CanAStarPass( ID, dir ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: AStar.dm
		public static bool LinkBlocked( dynamic A = null, dynamic B = null ) {
			int adir = 0;
			int rdir = 0;
			Tile iStep = null;
			Tile pStep = null;
			Obj O = null;

			
			if ( A == null || B == null ) {
				return true;
			}
			adir = Map13.GetDistance( A, B );
			rdir = Map13.GetDistance( B, A );

			if ( ( adir & adir - 1 ) != 0 ) {
				iStep = Map13.GetStep( A, adir & 3 );

				if ( !iStep.density && !GlobalFuncs.LinkBlocked( A, iStep ) && !GlobalFuncs.LinkBlocked( iStep, B ) ) {
					return false;
				}
				pStep = Map13.GetStep( A, adir & 12 );

				if ( !pStep.density && !GlobalFuncs.LinkBlocked( A, pStep ) && !GlobalFuncs.LinkBlocked( pStep, B ) ) {
					return false;
				}
				return true;
			}

			if ( GlobalFuncs.DirBlocked( A, adir ) ) {
				return true;
			}

			if ( GlobalFuncs.DirBlocked( B, rdir ) ) {
				return true;
			}

			foreach (dynamic _a in Lang13.Enumerate( B, typeof(Obj) )) {
				O = _a;
				

				if ( O.density && !( O is Obj_Machinery_Door ) && !Lang13.Bool( O.flags & 512 ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: AStar.dm
		public static bool LinkBlockedWithAccess( Tile A = null, Tile B = null, Ent_Dynamic ID = null ) {
			int adir = 0;
			int rdir = 0;
			Tile iStep = null;
			Tile pStep = null;
			Obj O = null;

			
			if ( A == null || B == null ) {
				return true;
			}
			adir = Map13.GetDistance( A, B );
			rdir = Map13.GetDistance( B, A );

			if ( ( adir & adir - 1 ) != 0 ) {
				iStep = Map13.GetStep( A, adir & 3 );

				if ( !iStep.density && !GlobalFuncs.LinkBlockedWithAccess( A, iStep, ID ) && !GlobalFuncs.LinkBlockedWithAccess( iStep, B, ID ) ) {
					return false;
				}
				pStep = Map13.GetStep( A, adir & 12 );

				if ( !pStep.density && !GlobalFuncs.LinkBlockedWithAccess( A, pStep, ID ) && !GlobalFuncs.LinkBlockedWithAccess( pStep, B, ID ) ) {
					return false;
				}
				return true;
			}

			if ( GlobalFuncs.DirBlockedWithAccess( A, adir, ID ) ) {
				return true;
			}

			if ( GlobalFuncs.DirBlockedWithAccess( B, rdir, ID ) ) {
				return true;
			}

			foreach (dynamic _a in Lang13.Enumerate( B, typeof(Obj) )) {
				O = _a;
				

				if ( O.density && !( O is Obj_Machinery_Door ) && !Lang13.Bool( O.flags & 512 ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: AStar.dm
		public static dynamic PathWeightCompare( dynamic a = null, dynamic b = null ) {
			return a.f - b.f;
		}

		// Function from file: asteroid.dm
		public static bool check_complex_placement( Tile T = null, int? size_x = null, int? size_y = null, bool? ignore_walls = null ) {
			ignore_walls = ignore_walls ?? false;

			ByTable surroundings = null;

			surroundings = new ByTable();
			surroundings.Or( Map13.FetchInRange( Map13.GetTile( T.x, T.y, T.z ), 7 ) );
			surroundings.Or( Map13.FetchInRange( Map13.GetTile( T.x + ( size_x ??0), T.y, T.z ), 7 ) );
			surroundings.Or( Map13.FetchInRange( Map13.GetTile( T.x, T.y + ( size_y ??0), T.z ), 7 ) );
			surroundings.Or( Map13.FetchInRange( Map13.GetTile( T.x + ( size_x ??0), T.y + ( size_y ??0), T.z ), 7 ) );

			if ( Lang13.Bool( Lang13.FindIn( typeof(Zone_Mine_Explored), surroundings ) ) ) {
				return false;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Tile_Space), surroundings ) ) ) {
				return false;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Tile_Simulated_Wall), surroundings != null && !( ignore_walls == true ) ) ) ) {
				return false;
			}
			return true;
		}

		// Function from file: asteroid.dm
		public static bool make_mining_asteroid_secret(  ) {
			dynamic T = null;
			int sanity = 0;
			ByTable turfs = null;
			dynamic complex_type = null;
			dynamic complex = null;

			T = null;
			sanity = 0;
			turfs = null;
			turfs = GlobalFuncs.get_area_turfs( typeof(Zone_Mine_Unexplored) );

			if ( !( turfs.len != 0 ) ) {
				return false;
			}

			while (true) {
				sanity++;

				if ( sanity > 100 ) {
					Game13.log.WriteMsg( "## TESTING: " + "Tried to place complex too many times.  Aborting." );
					return false;
				}
				T = Rand13.PickFromTable( turfs );
				complex_type = Rand13.PickFromTable( GlobalVars.mining_surprises );
				complex = Lang13.Call( complex_type );

				if ( ((MiningSurprise)complex).spawn_complex( T ) ) {
					GlobalVars.spawned_surprises.Add( complex );
					return true;
				}
			}
			return false;
		}

		// Function from file: atoms_movable.dm
		public static void delete_profile( string type = null, int? code = null ) {
			code = code ?? 0;

			
			if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state < 3 ) {
				return;
			}

			if ( code == 0 ) {
				Interface13.Stat( null, GlobalVars.del_profiling.Contains( "" + type ) );

				if ( !false ) {
					GlobalVars.del_profiling["" + type] = 0;
				}
				GlobalVars.del_profiling["" + type] += 1;
			} else if ( code == 1 ) {
				Interface13.Stat( null, GlobalVars.ghdel_profiling.Contains( "" + type ) );

				if ( !false ) {
					GlobalVars.ghdel_profiling["" + type] = 0;
				}
				GlobalVars.ghdel_profiling["" + type] += 1;
			} else {
				Interface13.Stat( null, GlobalVars.gdel_profiling.Contains( "" + type ) );

				if ( !( code == 1 ) ) {
					GlobalVars.gdel_profiling["" + type] = 0;
				}
				GlobalVars.gdel_profiling["" + type] += 1;
				GlobalVars.soft_dels += 1;
			}
			return;
		}

		// Function from file: banappearance.dm
		public static void appearance_fullban( dynamic M = null, string reason = null ) {
			
			if ( !Lang13.Bool( M ) || !Lang13.Bool( M.key ) ) {
				return;
			}
			GlobalVars.appearance_keylist.Add( "" + M.ckey + " ## " + reason );
			GlobalFuncs.appearance_savebanfile();
			return;
		}

		// Function from file: banappearance.dm
		public static dynamic appearance_isbanned( dynamic M = null ) {
			dynamic s = null;
			int startpos = 0;
			string text = null;

			
			if ( Lang13.Bool( M ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.appearance_keylist )) {
					s = _a;
					

					if ( String13.FindIgnoreCase( s, M.ckey, 1, 0 ) == 1 ) {
						startpos = String13.FindIgnoreCase( s, "## ", 1, 0 ) + 3;

						if ( startpos != 0 && startpos < Lang13.Length( s ) ) {
							text = String13.SubStr( s, startpos, 0 );

							if ( Lang13.Bool( text ) ) {
								return text;
							}
						}
						return "Reason Unspecified";
					}
				}
			}
			return 0;
		}

		// Function from file: banappearance.dm
		public static void appearance_loadbanfile(  ) {
			SaveFile S = null;
			DBQuery query = null;
			dynamic ckey = null;

			
			if ( GlobalVars.config.ban_legacy_system ) {
				S = new SaveFile( "data/appearance_full.ban" );
				GlobalVars.appearance_keylist = S.ReadItem( "keys" + 0, GlobalVars.appearance_keylist );
				Game13.log.WriteMsg( S["keys" + 0] );
				GlobalFuncs.log_admin( "Loading appearance_rank" );
				GlobalVars.appearanceban_runonce = S.ReadItem( "runonce", GlobalVars.appearanceban_runonce );

				if ( !( Lang13.Length( GlobalVars.appearance_keylist ) != 0 ) ) {
					GlobalVars.appearance_keylist = new ByTable();
					GlobalFuncs.log_admin( "appearance_keylist was empty" );
				}
			} else {
				
				if ( !GlobalFuncs.establish_db_connection() ) {
					Game13.log.WriteMsg( "Database connection failed. Reverting to the legacy ban system." );
					GlobalVars.diary.WriteMsg( "Database connection failed. Reverting to the legacy ban system." );
					GlobalVars.config.ban_legacy_system = true;
					GlobalFuncs.appearance_loadbanfile();
					return;
				}
				query = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM erro_ban WHERE bantype = 'APPEARANCE_PERMABAN' AND isnull(unbanned)" );
				query.Execute();

				while (query.NextRow()) {
					ckey = query.item[1];
					GlobalVars.appearance_keylist.Add( "" + ckey );
				}
			}
			return;
		}

		// Function from file: banappearance.dm
		public static bool appearance_remove( string X = null ) {
			int? i = null;

			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( GlobalVars.appearance_keylist )) {
				
				if ( String13.FindIgnoreCase( GlobalVars.appearance_keylist[i], "" + X, 1, 0 ) != 0 ) {
					GlobalVars.appearance_keylist.Remove( GlobalVars.appearance_keylist[i] );
					GlobalFuncs.appearance_savebanfile();
					return true;
				}
				i++;
			}
			return false;
		}

		// Function from file: banappearance.dm
		public static void appearance_savebanfile(  ) {
			SaveFile S = null;

			S = new SaveFile( "data/appearance_full.ban" );
			S["keys" + 0] = GlobalVars.appearance_keylist;
			return;
		}

		// Function from file: banappearance.dm
		public static void appearance_unban( dynamic M = null ) {
			GlobalFuncs.appearance_remove( "" + M.ckey );
			GlobalFuncs.appearance_savebanfile();
			return;
		}

		// Function from file: banjob.dm
		public static void ban_unban_log_save( string formatted_log = null ) {
			File13.Write( "data/ban_unban_log.txt", formatted_log );
			return;
		}

		// Function from file: banjob.dm
		public static void jobban_fullban( dynamic M = null, dynamic rank = null, string reason = null ) {
			
			if ( !Lang13.Bool( M ) || !Lang13.Bool( M.key ) ) {
				return;
			}
			GlobalVars.jobban_keylist.Add( "" + M.ckey + " - " + rank + " ## " + reason );
			GlobalFuncs.jobban_savebanfile();
			return;
		}

		// Function from file: banjob.dm
		public static dynamic jobban_isbanned( dynamic M = null, dynamic rank = null ) {
			dynamic s = null;
			int startpos = 0;
			string text = null;

			
			if ( Lang13.Bool( M ) && Lang13.Bool( rank ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.jobban_keylist )) {
					s = _a;
					

					if ( String13.FindIgnoreCase( s, "" + M.ckey + " - " + rank, 1, 0 ) == 1 ) {
						startpos = String13.FindIgnoreCase( s, "## ", 1, 0 ) + 3;

						if ( startpos != 0 && startpos < Lang13.Length( s ) ) {
							text = String13.SubStr( s, startpos, 0 );

							if ( Lang13.Bool( text ) ) {
								return text;
							}
						}
						return "Reason Unspecified";
					}
				}
			}
			return 0;
		}

		// Function from file: banjob.dm
		public static void jobban_loadbanfile(  ) {
			SaveFile S = null;
			DBQuery query = null;
			dynamic ckey = null;
			dynamic job = null;
			DBQuery query1 = null;
			dynamic ckey2 = null;
			dynamic job2 = null;

			
			if ( GlobalVars.config.ban_legacy_system ) {
				S = new SaveFile( "data/job_full.ban" );
				GlobalVars.jobban_keylist = S.ReadItem( "keys" + 0, GlobalVars.jobban_keylist );
				GlobalFuncs.log_admin( "Loading jobban_rank" );
				GlobalVars.jobban_runonce = S.ReadItem( "runonce", GlobalVars.jobban_runonce );

				if ( !( Lang13.Length( GlobalVars.jobban_keylist ) != 0 ) ) {
					GlobalVars.jobban_keylist = new ByTable();
					GlobalFuncs.log_admin( "jobban_keylist was empty" );
				}
			} else {
				
				if ( !GlobalFuncs.establish_db_connection() ) {
					Game13.log.WriteMsg( "Database connection failed. Reverting to the legacy ban system." );
					GlobalVars.diary.WriteMsg( "Database connection failed. Reverting to the legacy ban system." );
					GlobalVars.config.ban_legacy_system = true;
					GlobalFuncs.jobban_loadbanfile();
					return;
				}
				query = GlobalVars.dbcon.NewQuery( "SELECT ckey, job FROM erro_ban WHERE bantype = 'JOB_PERMABAN' AND isnull(unbanned)" );
				query.Execute();

				while (query.NextRow()) {
					ckey = query.item[1];
					job = query.item[2];
					GlobalVars.jobban_keylist.Add( "" + ckey + " - " + job );
				}
				query1 = GlobalVars.dbcon.NewQuery( "SELECT ckey, job FROM erro_ban WHERE bantype = 'JOB_TEMPBAN' AND isnull(unbanned) AND expiration_time > Now()" );
				query1.Execute();

				while (query1.NextRow()) {
					ckey2 = query1.item[1];
					job2 = query1.item[2];
					GlobalVars.jobban_keylist.Add( "" + ckey2 + " - " + job2 );
				}
			}
			return;
		}

		// Function from file: banjob.dm
		public static bool jobban_remove( string X = null ) {
			int? i = null;

			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( GlobalVars.jobban_keylist )) {
				
				if ( String13.FindIgnoreCase( GlobalVars.jobban_keylist[i], "" + X, 1, 0 ) != 0 ) {
					GlobalVars.jobban_keylist.Remove( GlobalVars.jobban_keylist[i] );
					GlobalFuncs.jobban_savebanfile();
					return true;
				}
				i++;
			}
			return false;
		}

		// Function from file: banjob.dm
		public static void jobban_savebanfile(  ) {
			SaveFile S = null;

			S = new SaveFile( "data/job_full.ban" );
			S["keys" + 0] = GlobalVars.jobban_keylist;
			return;
		}

		// Function from file: banjob.dm
		public static void jobban_unban( dynamic M = null, dynamic rank = null ) {
			GlobalFuncs.jobban_remove( "" + M.ckey + " - " + rank );
			GlobalFuncs.jobban_savebanfile();
			return;
		}

		// Function from file: banjob.dm
		public static void jobban_updatelegacybans(  ) {
			dynamic T = null;

			
			if ( !( GlobalVars.jobban_runonce != 0 ) ) {
				GlobalFuncs.log_admin( "Updating jobbanfile!" );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.jobban_keylist )) {
					T = _a;
					

					if ( !Lang13.Bool( T ) ) {
						continue;
					}
				}
				GlobalVars.jobban_runonce++;
			}
			return;
		}

		// Function from file: banooc.dm
		public static bool ooc_ban( dynamic M = null ) {
			
			if ( !Lang13.Bool( M ) ) {
				return false;
			}
			GlobalVars.oocban_keylist.Add( "" + M.ckey ); return false;
		}

		// Function from file: banooc.dm
		public static bool ooc_unban( dynamic M = null ) {
			
			if ( !Lang13.Bool( M ) ) {
				return false;
			}
			return GlobalVars.oocban_keylist.Remove( "" + M.ckey );
		}

		// Function from file: battery.dm
		public static string rate_control( Obj_Machinery_Power_Solar_Control S = null, string V = null, string C = null, bool? Min = null, int? Max = null, int? Limit = null ) {
			Min = Min ?? true;
			Max = Max ?? 5;

			string href = null;
			string rate = null;

			href = new Txt( "<A href='?src=" ).Ref( S ).str( ";rate control=1;" ).item( V ).ToString();
			rate = "" + href + "=-" + Max + "'>-</A>" + href + "=-" + Min + "'>-</A> " + ( Lang13.Bool( C ) ? ((dynamic)( C )) : ((dynamic)( 0 )) ) + " " + href + "=" + Min + "'>+</A>" + href + "=" + Max + "'>+</A>";

			if ( Lang13.Bool( Limit ) ) {
				return "" + href + "=-" + Limit + "'>-</A>" + rate + ( "" + href + "=" + Limit + "'>+</A>" );
			}
			return rate;
		}

		// Function from file: biohazard_alert.dm
		public static void biohazard_alert( dynamic level = null ) {
			level = level ?? 0;

			ByTable vox_sentence = null;
			dynamic word = null;

			
			if ( !Lang13.Bool( level ) ) {
				level = Rand13.Int( 4, 7 );
			}
			GlobalFuncs.command_alert( "Confirmed outbreak of level " + level + " biohazard aboard " + GlobalFuncs.station_name() + ". All personnel must contain the outbreak.", "Biohazard Alert" );
			vox_sentence = new ByTable(new object [] { "sound/AI/outbreak_before.ogg", GlobalVars.outbreak_level_words[level], "sound/AI/outbreak_after.ogg" });

			foreach (dynamic _a in Lang13.Enumerate( vox_sentence )) {
				word = _a;
				
				GlobalFuncs.play_vox_sound( word, 1, null );
			}
			return;
		}

		// Function from file: biomass.dm
		public static void biomass_infestation(  ) {
			ByTable Floors = null;
			dynamic type = null;
			dynamic Hallway = null;
			Tile_Simulated_Floor Floor = null;
			dynamic Floor2 = null;

			Floors = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( Lang13.GetTypes( typeof(Zone_Hallway) ) )) {
				type = _b;
				
				Hallway = Lang13.FindObj( type );

				foreach (dynamic _a in Lang13.Enumerate( Hallway.contents, typeof(Tile_Simulated_Floor) )) {
					Floor = _a;
					

					if ( !GlobalFuncs.is_blocked_turf( Floor ) ) {
						Floors.Add( Floor );
					}
				}
			}

			if ( Floors.len != 0 ) {
				Floor2 = Rand13.PickFromTable( Floors );
				new Obj_Effect_BiomassController( Floor2 );
				GlobalFuncs.log_admin( "Event: Biomass spawned at " + Floor2.loc + " (" + Floor2.x + "," + Floor2.y + "," + Floor2.z + ")." );
				GlobalFuncs.message_admins( "<span class='notice'>Event: Biomass spawned at " + Floor2.loc + " <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + Floor2.x + ";Y=" + Floor2.y + ";Z=" + Floor2.z + "'>(JMP)</a></span>" );
			}
			return;
		}

		// Function from file: blob.dm
		public static ByTable get_minds_in_role( bool roletype = false ) {
			ByTable antagonist_list = null;
			ByTable protagonist_list = null;
			Mind current_mind = null;
			ByTable possible_bad_dudes = null;
			dynamic list = null;

			antagonist_list = new ByTable();
			protagonist_list = ((GameMode)GlobalVars.ticker.mode).get_living_heads();
			possible_bad_dudes = new ByTable(new object [] { 
				GlobalVars.ticker.mode.traitors, 
				GlobalVars.ticker.mode.head_revolutionaries, 
				GlobalVars.ticker.mode.head_revolutionaries, 
				GlobalVars.ticker.mode.cult, 
				GlobalVars.ticker.mode.wizards, 
				GlobalVars.ticker.mode.changelings, 
				GlobalVars.ticker.mode.syndicates
			 });

			foreach (dynamic _b in Lang13.Enumerate( possible_bad_dudes )) {
				list = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( list, typeof(Mind) )) {
					current_mind = _a;
					

					if ( Lang13.Bool( current_mind.current ) && Convert.ToInt32( current_mind.current.stat ) != 2 && Lang13.Bool( current_mind.current.client ) && !( ((Client)current_mind.current.client).is_afk() != 0 ) ) {
						antagonist_list.Add( current_mind );
					}
				}
			}

			if ( protagonist_list.len != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( protagonist_list, typeof(Mind) )) {
					current_mind = _c;
					
					Interface13.Stat( null, antagonist_list.Contains( current_mind ) );

					if ( current_mind is Mind ) {
						protagonist_list.Remove( current_mind );
					}
				}
			}

			if ( !roletype ) {
				return protagonist_list;
			} else {
				return antagonist_list;
			}
		}

		// Function from file: blood.dm
		public static bool blood_incompatible( string donor = null, dynamic receiver = null ) {
			string donor_antigen = null;
			string receiver_antigen = null;
			bool donor_rh = false;
			bool receiver_rh = false;

			
			if ( !Lang13.Bool( donor ) || !Lang13.Bool( receiver ) ) {
				return false;
			}
			donor_antigen = String13.SubStr( donor, 1, Lang13.Length( donor ) );
			receiver_antigen = String13.SubStr( receiver, 1, Lang13.Length( receiver ) );
			donor_rh = String13.FindIgnoreCase( donor, "+", 1, 0 ) > 0;
			receiver_rh = String13.FindIgnoreCase( receiver, "+", 1, 0 ) > 0;

			if ( donor_rh && !receiver_rh ) {
				return true;
			}

			switch ((string)( receiver_antigen )) {
				case "A":
					
					if ( donor_antigen != "A" && donor_antigen != "O" ) {
						return true;
					}
					break;
				case "B":
					
					if ( donor_antigen != "B" && donor_antigen != "O" ) {
						return true;
					}
					break;
				case "O":
					
					if ( donor_antigen != "O" ) {
						return true;
					}
					break;
			}
			return false;
		}

		// Function from file: blood.dm
		public static dynamic blood_splatter( dynamic target = null, dynamic source = null, bool? large = null ) {
			dynamic B = null;
			Type decal_type = null;
			dynamic T = null;
			ByTable drip_icons = null;
			dynamic M = null;
			dynamic is_there_blood = null;
			dynamic donor = null;
			ByTable drips = null;
			Obj_Effect_Decal_Cleanable_Blood_Drip drop = null;
			Obj_Effect_Decal_Cleanable_Blood_Drip drop2 = null;

			decal_type = typeof(Obj_Effect_Decal_Cleanable_Blood_Splatter);
			T = GlobalFuncs.get_turf( target );
			drip_icons = new ByTable(new object [] { "1", "2", "3", "4", "5" });

			if ( source is Mob_Living_Carbon_Human ) {
				M = source;
				is_there_blood = ((Mob_Living_Carbon)M).get_blood( M.vessel );

				if ( !Lang13.Bool( is_there_blood ) && Lang13.Bool( M.dna ) && Lang13.Bool( M.species ) ) {
					is_there_blood = new Reagent_Blood();
					is_there_blood.data["blood_DNA"] = M.dna.unique_enzymes;
					is_there_blood.data["blood_type"] = M.dna.b_type;
					is_there_blood.data["blood_colour"] = M.species.blood_color;

					if ( !Lang13.Bool( is_there_blood.data["virus2"] ) ) {
						is_there_blood.data["virus2"] = new ByTable();
					}
					is_there_blood.data["virus2"] |= GlobalFuncs.virus_copylist( M.virus2 );
				}
				source = is_there_blood;
			}

			if ( source is Mob_Living_Carbon_Monkey ) {
				donor = source;

				if ( Lang13.Bool( donor.dna ) ) {
					source = new Reagent_Blood();
					source.data["blood_DNA"] = donor.dna.unique_enzymes;
					source.data["blood_type"] = donor.dna.b_type;
				}
			}

			if ( !( large == true ) ) {
				drips = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Effect_Decal_Cleanable_Blood_Drip) )) {
					drop = _a;
					
					drips.Add( drop );
					drip_icons.Remove( drop.icon_state );
				}

				if ( drips.len >= 5 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( drips, typeof(Obj_Effect_Decal_Cleanable_Blood_Drip) )) {
						drop2 = _b;
						
						GlobalFuncs.returnToPool( drop2 );
					}
				} else {
					decal_type = typeof(Obj_Effect_Decal_Cleanable_Blood_Drip);
				}
			}
			B = Lang13.FindIn( decal_type, T );

			if ( !Lang13.Bool( B ) || decal_type == typeof(Obj_Effect_Decal_Cleanable_Blood_Drip) ) {
				B = GlobalFuncs.getFromPool( decal_type, T );
				B.New( T );

				if ( decal_type == typeof(Obj_Effect_Decal_Cleanable_Blood_Drip) ) {
					B.icon_state = Rand13.PickFromTable( drip_icons );
				}
			}

			if ( !Lang13.Bool( source ) ) {
				return B;
			}

			if ( Lang13.Bool( source.data["blood_colour"] ) ) {
				B.basecolor = source.data["blood_colour"];
				B.update_icon();
			}

			if ( Lang13.Bool( source.data["blood_DNA"] ) ) {
				B.blood_DNA = new ByTable();

				if ( Lang13.Bool( source.data["blood_type"] ) ) {
					B.blood_DNA[source.data["blood_DNA"]] = source.data["blood_type"];
				} else {
					B.blood_DNA[source.data["blood_DNA"]] = "O+";
				}
			}

			if ( Lang13.Bool( source.data["virus2"] ) ) {
				B.virus2 = GlobalFuncs.virus_copylist( source.data["virus2"] );
			}
			return B;
		}

		// Function from file: broadcaster.dm
		public static void Broadcast_Message( dynamic speech = null, bool? vmask = null, int? data = null, dynamic compression = null, dynamic level = null ) {
			ByTable radios = null;
			Game_Data virt = null;
			Obj_Item_Device_Radio_Intercom R = null;
			Obj_Item_Device_Radio R2 = null;
			Obj_Item_Device_Radio R3 = null;
			Obj_Item_Device_Radio R4 = null;
			ByTable listeners = null;
			dynamic rendered = null;
			Ent_Dynamic listener = null;
			string enc_message = null;
			string blackbox_msg = null;

			speech.message = String13.SubStr( speech.message, 1, 512 );

			if ( !Lang13.Bool( speech.message ) ) {
				return;
			}
			radios = new ByTable();
			virt = GlobalFuncs.getFromPool( typeof(Dynamic_Virtualspeaker), null );
			((dynamic)virt).name = speech.name;
			((dynamic)virt).job = speech.job;
			((dynamic)virt).source = speech.speaker;
			((dynamic)virt).faketrack = ( data == 4 ? true : false );
			((dynamic)virt).radio = speech.radio;

			if ( Convert.ToDouble( compression ) > 0 ) {
				speech.message = GlobalFuncs.Gibberish( speech.message, compression + 40 );
			}

			switch ((int?)( data )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_radios["" + speech.frequency], typeof(Obj_Item_Device_Radio_Intercom) )) {
						R = _a;
						

						if ( R != null && ( R.receive_range( speech.frequency, level ) ??0) > -1 ) {
							radios.Add( R );
						}
					}
					break;
				case 2:
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.all_radios["" + speech.frequency], typeof(Obj_Item_Device_Radio) )) {
						R2 = _b;
						

						if ( R2 is Obj_Item_Device_Radio_Headset ) {
							continue;
						}

						if ( R2 != null && ( R2.receive_range( speech.frequency, level ) ??0) > -1 ) {
							radios.Add( R2 );
						}
					}
					break;
				default:
					
					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.all_radios["" + speech.frequency], typeof(Obj_Item_Device_Radio) )) {
						R3 = _c;
						

						if ( R3 != null && ( R3.receive_range( speech.frequency, level ) ??0) > -1 ) {
							radios.Add( R3 );
						}
					}
					Interface13.Stat( null, GlobalVars.radiochannelsreverse.Contains( String13.NumberToString( Convert.ToDouble( speech.frequency ) ) ) );

					if ( false ) {
						
						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.all_radios["" + GlobalVars.SYND_FREQ], typeof(Obj_Item_Device_Radio) )) {
							R4 = _d;
							

							if ( R4 != null && ( R4.receive_range( GlobalVars.SYND_FREQ, new ByTable(new object [] { R4.z }) ) ??0) > -1 ) {
								radios.Or( R4 );
							}
						}
					}
					break;
			}
			listeners = GlobalFuncs.get_mobs_in_radio_ranges( radios ) | GlobalVars.observers;
			radios = null;
			rendered = ((dynamic)virt).render_speech( speech );

			foreach (dynamic _f in Lang13.Enumerate( listeners, typeof(Ent_Dynamic) )) {
				listener = _f;
				

				if ( listener != null ) {
					listener.Hear( speech, rendered );
				}
			}

			if ( Lang13.Length( listeners ) != 0 ) {
				listeners = null;
				enc_message = speech.speaker.say_quote( "\"" + speech.message + "\"" );
				blackbox_msg = "" + speech.speaker + " " + enc_message;

				if ( GlobalVars.blackbox is Obj_Machinery_BlackboxRecorder ) {
					
					dynamic _g = speech.frequency; // Was a switch-case, sorry for the mess.
					if ( _g==1459 ) {
						GlobalVars.blackbox.msg_common.Add( blackbox_msg );
					} else if ( _g==1351 ) {
						GlobalVars.blackbox.msg_science.Add( blackbox_msg );
					} else if ( _g==1353 ) {
						GlobalVars.blackbox.msg_command.Add( blackbox_msg );
					} else if ( _g==1355 ) {
						GlobalVars.blackbox.msg_medical.Add( blackbox_msg );
					} else if ( _g==1357 ) {
						GlobalVars.blackbox.msg_engineering.Add( blackbox_msg );
					} else if ( _g==1359 ) {
						GlobalVars.blackbox.msg_security.Add( blackbox_msg );
					} else if ( _g==1441 ) {
						GlobalVars.blackbox.msg_deathsquad.Add( blackbox_msg );
					} else if ( _g==1345 ) {
						GlobalVars.blackbox.msg_ert.Add( blackbox_msg );
					} else if ( _g==1213 ) {
						GlobalVars.blackbox.msg_syndicate.Add( blackbox_msg );
					} else if ( _g==1349 ) {
						GlobalVars.blackbox.msg_service.Add( blackbox_msg );
					} else if ( _g==1347 ) {
						GlobalVars.blackbox.msg_cargo.Add( blackbox_msg );
					} else {
						GlobalVars.blackbox.messages.Add( blackbox_msg );
					}
				}
			}
			Task13.Schedule( 50, (Task13.Closure)(() => {
				GlobalFuncs.returnToPool( virt );
				return;
			}));
			return;
		}

		// Function from file: BrokenInhands.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Broken Sprite List", group: "Debug" )]
		public static void getbrokeninhands(  ) {
			Icon IL = null;
			ByTable Lstates = null;
			Icon IR = null;
			ByTable Rstates = null;
			string text = null;
			dynamic A = null;
			dynamic O = null;
			Icon J = null;
			ByTable istates = null;
			dynamic F = null;

			
			if ( !Lang13.Bool( Interface13.Alert( "Are you sure you want to get the broken sprites list?", null, "Yes", "No" ) ) == "Yes" ) {
				return;
			}
			IL = new Icon( "icons/mob/in-hand/left/items_lefthand.dmi" );
			Lstates = IL.IconStates();
			IR = new Icon( "icons/mob/in-hand/right/items_righthand.dmi" );
			Rstates = IR.IconStates();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item) ) )) {
				A = _a;
				
				O = Lang13.Call( A, Map13.GetTile( 1, 1, 1 ) );

				if ( !Lang13.Bool( O ) ) {
					continue;
				}
				J = new Icon( O.icon );
				istates = J.IconStates();

				if ( !( Lstates.Find( O.icon_state ) != 0 ) && !( Lstates.Find( O.item_state ) != 0 ) ) {
					
					if ( Lang13.Bool( O.icon_state ) ) {
						text += "" + O.type + " is missing left hand icon called \"" + O.icon_state + "\".\n";
					}
				}

				if ( !( Rstates.Find( O.icon_state ) != 0 ) && !( Rstates.Find( O.item_state ) != 0 ) ) {
					
					if ( Lang13.Bool( O.icon_state ) ) {
						text += "" + O.type + " is missing right hand icon called \"" + O.icon_state + "\".\n";
					}
				}

				if ( Lang13.Bool( O.icon_state ) ) {
					
					if ( !( istates.Find( O.icon_state ) != 0 ) ) {
						text += "" + O.type + " is missing normal icon called \"" + O.icon_state + "\" in \"" + O.icon + "\".\n";
					}
				}
				Lang13.Delete( O );
				O = null;
			}

			if ( Lang13.Bool( text ) ) {
				F = new File( "broken_hand_icons.txt" );
				File13.Delete( F );
				GlobalFuncs.to_chat( F, text );
				GlobalFuncs.to_chat( typeof(Game13), "Completed and written to " + F );
			}
			return;
		}

		// Function from file: browser.dm
		public static string format_text( dynamic text = null ) {
			return GlobalFuncs.replacetext( GlobalFuncs.replacetext( text, "ÿ", "" ), "ÿ", "" );
		}

		// Function from file: buildmode.dm
		public static void build_click( Mob user = null, int buildmode = 0, string _params = null, Ent_Static _object = null ) {
			Obj_Effect_Bmode_Buildholder holder = null;
			Obj_Effect_Bmode_Buildholder H = null;
			ByTable pa = null;
			dynamic RT = null;
			Ent_Static T = null;
			Ent_Static T2 = null;
			Ent_Static T3 = null;
			Ent_Static T4 = null;
			Ent_Static T5 = null;
			Ent_Static T6 = null;
			Obj_Structure_Window_Reinforced WIN = null;
			Obj_Structure_Window_Reinforced WIN2 = null;
			Obj_Structure_Window_Reinforced WIN3 = null;
			Obj_Structure_Window_Reinforced WIN4 = null;
			dynamic start = null;
			dynamic end = null;
			ByTable fillturfs = null;
			int areaAction = 0;
			string msglog = null;
			bool strict = false;
			dynamic chosen = null;
			dynamic turf_op = null;
			int deletions = 0;
			dynamic T7 = null;
			Ent_Static thing = null;
			Ent_Static thing2 = null;
			dynamic A = null;
			dynamic A2 = null;
			dynamic T8 = null;
			int? i = null;
			dynamic thing3 = null;
			int? i2 = null;
			dynamic thing4 = null;
			dynamic A3 = null;
			int? i3 = null;
			dynamic thing5 = null;
			int? i4 = null;
			dynamic thing6 = null;
			dynamic T9 = null;
			dynamic A4 = null;

			holder = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.buildmodeholders, typeof(Obj_Effect_Bmode_Buildholder) )) {
				H = _a;
				

				if ( H.cl == user.client ) {
					holder = H;
					break;
				}
			}

			if ( !( holder != null ) ) {
				return;
			}
			pa = String13.ParseUrlParams( _params );
			RT = GlobalFuncs.get_turf( _object );

			switch ((int)( buildmode )) {
				case 1:
					
					if ( _object is Tile && pa.Find( "left" ) != 0 && !( pa.Find( "alt" ) != 0 ) && !( pa.Find( "ctrl" ) != 0 ) ) {
						
						if ( _object is Tile_Space ) {
							T = _object;
							((dynamic)T).ChangeTurf( typeof(Tile_Simulated_Floor) );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made a floor at " + GlobalFuncs.formatJumpTo( T ) );
							return;
						} else if ( _object is Tile_Simulated_Floor ) {
							T2 = _object;
							((dynamic)T2).ChangeTurf( typeof(Tile_Simulated_Wall) );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made a wall at " + GlobalFuncs.formatJumpTo( T2 ) );
							return;
						} else if ( _object is Tile_Simulated_Wall ) {
							T3 = _object;
							((dynamic)T3).ChangeTurf( typeof(Tile_Simulated_Wall_RWall) );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made a rwall at " + GlobalFuncs.formatJumpTo( T3 ) );
							return;
						}
					} else if ( pa.Find( "right" ) != 0 ) {
						
						if ( _object is Tile_Simulated_Wall ) {
							T4 = _object;
							((dynamic)T4).ChangeTurf( typeof(Tile_Simulated_Floor) );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed a wall at " + GlobalFuncs.formatJumpTo( T4 ) );
							return;
						} else if ( _object is Tile_Simulated_Floor ) {
							T5 = _object;
							((dynamic)T5).ChangeTurf( typeof(Tile_Space) );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed flooring at " + GlobalFuncs.formatJumpTo( T5 ) );
							return;
						} else if ( _object is Tile_Simulated_Wall_RWall ) {
							T6 = _object;
							((dynamic)T6).ChangeTurf( typeof(Tile_Simulated_Wall) );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " downgraded an rwall at " + GlobalFuncs.formatJumpTo( T6 ) );
							return;
						} else if ( _object is Obj ) {
							Lang13.Delete( _object );
							_object = null;
							return;
						}
					} else if ( _object is Tile && pa.Find( "alt" ) != 0 && pa.Find( "left" ) != 0 ) {
						new Obj_Machinery_Door_Airlock( GlobalFuncs.get_turf( _object ) );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made an airlock at " + GlobalFuncs.formatJumpTo( RT ) );
					} else if ( _object is Tile && pa.Find( "ctrl" ) != 0 && pa.Find( "left" ) != 0 ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made a window at " + GlobalFuncs.formatJumpTo( RT ) );

						dynamic _b = holder.builddir.dir; // Was a switch-case, sorry for the mess.
						if ( _b==1 ) {
							WIN = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
							WIN.dir = ((int)( GlobalVars.NORTH ));
						} else if ( _b==2 ) {
							WIN2 = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
							WIN2.dir = ((int)( GlobalVars.SOUTH ));
						} else if ( _b==4 ) {
							WIN3 = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
							WIN3.dir = ((int)( GlobalVars.EAST ));
						} else if ( _b==8 ) {
							WIN4 = new Obj_Structure_Window_Reinforced( GlobalFuncs.get_turf( _object ) );
							WIN4.dir = ((int)( GlobalVars.WEST ));
						} else if ( _b==10 ) {
							new Obj_Structure_Window_Full_Reinforced( GlobalFuncs.get_turf( _object ) );
						}
					}
					break;
				case 2:
					
					if ( pa.Find( "ctrl" ) != 0 && pa.Find( "shift" ) != 0 ) {
						
						if ( !( holder != null ) ) {
							return;
						}

						if ( pa.Find( "left" ) != 0 ) {
							holder.fill_left = RT;
							GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Set bottom left fill corner to (" + GlobalFuncs.formatJumpTo( RT ) + ")</span>" );
						} else if ( pa.Find( "right" ) != 0 ) {
							holder.fill_right = RT;
							GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Set top right fill corner to (" + GlobalFuncs.formatJumpTo( RT ) + ")</span>" );
						}

						if ( Lang13.Bool( holder.fill_left ) && Lang13.Bool( holder.fill_right ) ) {
							start = holder.fill_left;
							end = holder.fill_right;

							if ( start.z != end.z ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do a fill across zlevels you silly person.</span>" );
								holder.fill_left = null;
								holder.fill_right = null;
								return;
							}
							fillturfs = Map13.FetchInBlock( start, end );

							if ( fillturfs.len != 0 ) {
								
								if ( Interface13.Alert( "You're about to do a fill operation spanning " + fillturfs.len + " tiles, are you sure?", "Panic", "Yes", "No" ) == "Yes" ) {
									
									if ( fillturfs.len > 150 ) {
										
										if ( Interface13.Alert( "Are you completely sure about filling " + fillturfs.len + " tiles?", "Panic!!!!", "Yes", "No" ) != "Yes" ) {
											holder.fill_left = null;
											holder.fill_right = null;
											GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Cleared filling corners.</span>" );
											return;
										}
									}
									areaAction = Interface13.Alert( "FILL tiles or DELETE them? areaAction will destroy EVERYTHING IN THE SELECTED AREA", "Create or destroy, your chance to be a GOD", "FILL", "DELETE" ) == "DELETE" ?1:0;

									if ( areaAction != 0 ) {
										areaAction = ( Interface13.Alert( "Selective(TYPE) Delete or MASS Delete?", "Scorched Earth or selective destruction?", "Selective", "MASS" ) == "Selective" ? 2 : 1 );
									} else {
										areaAction = ( Interface13.Alert( "Mass FILL or Selective(Type => Type) FILL?", "Do they really need " + fillturfs.len + " of closets?", "Selective", "Mass" ) == "Selective" ? 3 : 0 );
									}
									msglog = "<span class='danger'>" + GlobalFuncs.key_name_admin( Task13.User ) + " just buildmode";
									strict = true;
									chosen = null;

									switch ((int)( areaAction )) {
										case 1:
											msglog += new Txt( " <big>DELETED EVERYTHING</big> in " ).item( fillturfs.len ).str( " tile" ).s().str( " " ).ToString();
											break;
										case 2:
											chosen = GlobalFuncs.easyTypeSelector();

											if ( !Lang13.Bool( chosen ) ) {
												return;
											}
											strict = Interface13.Alert( "Delete all children of " + chosen + "?", "Children being all types and subtypes of " + chosen, "Yes", "No" ) == "No";
											msglog += new Txt( " <big>DELETED " ).item( ( !strict ? "ALL TYPES OF " : "" ) ).item( chosen ).str( "</big> in " ).item( fillturfs.len ).str( " tile" ).s().str( " " ).ToString();
											break;
										case 3:
											chosen = GlobalFuncs.easyTypeSelector();

											if ( !Lang13.Bool( chosen ) ) {
												return;
											}
											strict = Interface13.Alert( "Change all children of " + chosen + "?", "Children being all types and subtypes of " + chosen, "Yes", "No" ) == "No";
											msglog += new Txt( " Changed all " ).item( chosen ).str( " in " ).item( fillturfs.len ).str( " tile" ).s().str( " to " ).item( holder.buildmode.objholder ).str( " " ).ToString();
											break;
										default:
											msglog += new Txt( " FILLED " ).item( fillturfs.len ).str( " tile" ).s().str( " with " ).item( holder.buildmode.objholder ).str( " " ).ToString();
											break;
									}
									msglog += "at (" + GlobalFuncs.formatJumpTo( start ) + " to " + GlobalFuncs.formatJumpTo( end ) + ")</span>";
									GlobalFuncs.message_admins( msglog );
									GlobalFuncs.log_admin( msglog );
									GlobalFuncs.to_chat( Task13.User, "<span class='notice'>If the server is lagging the operation will periodically sleep so the fill may take longer than typical.</span>" );
									turf_op = ((dynamic)holder.buildmode.objholder).IsSubclassOf( typeof(Tile) );
									deletions = 0;

									foreach (dynamic _f in Lang13.Enumerate( fillturfs )) {
										T7 = _f;
										

										if ( areaAction == 1 || areaAction == 2 ) {
											
											if ( Lang13.Bool( chosen.IsSubclassOf( typeof(Tile) ) ) ) {
												((Tile)T7).ChangeTurf( chosen );
												deletions++;
											} else {
												
												foreach (dynamic _d in Lang13.Enumerate( T7.contents, typeof(Ent_Static) )) {
													thing = _d;
													

													if ( thing == Task13.User ) {
														continue;
													}

													if ( areaAction == 1 || strict && thing.type == chosen || Lang13.Bool( chosen.IsInstanceOfType( thing ) ) ) {
														GlobalFuncs.qdel( thing );
													}
													deletions++;

													if ( Game13.cpu > 80 ) {
														Task13.Sleep( ((int)( Game13.tick_lag )) );
													}
												}

												if ( areaAction == 1 ) {
													((Tile)T7).ChangeTurf( GlobalFuncs.get_base_turf( T7.z ) );
												}
											}
										} else if ( Lang13.Bool( turf_op ) ) {
											
											if ( areaAction == 3 ) {
												
												if ( strict ) {
													
													if ( T7.type != chosen ) {
														continue;
													}
												} else if ( !Lang13.Bool( chosen.IsInstanceOfType( T7 ) ) ) {
													continue;
												}
											}
											((Tile)T7).ChangeTurf( holder.buildmode.objholder );
										} else if ( areaAction == 3 ) {
											
											foreach (dynamic _e in Lang13.Enumerate( T7.contents, typeof(Ent_Static) )) {
												thing2 = _e;
												

												if ( strict ) {
													
													if ( thing2.type != chosen ) {
														continue;
													}
												} else if ( !Lang13.Bool( chosen.IsInstanceOfType( thing2 ) ) ) {
													continue;
												}
												A = Lang13.Call( holder.buildmode.objholder, T7 );
												A.dir = thing2.dir;
												GlobalFuncs.qdel( thing2 );

												if ( Game13.cpu > 80 ) {
													Task13.Sleep( ((int)( Game13.tick_lag )) );
												}
											}
										} else {
											A2 = Lang13.Call( holder.buildmode.objholder, T7 );

											if ( A2 is Obj ) {
												A2.dir = holder.builddir.dir;
											}
										}

										if ( Game13.cpu > 80 ) {
											Task13.Sleep( ((int)( Game13.tick_lag )) );
										}
									}
									holder.fill_left = null;
									holder.fill_right = null;

									if ( deletions != 0 ) {
										GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>Successfully deleted " ).item( deletions ).str( " " ).item( chosen ).str( "'" ).s().str( "</span>" ).ToString() );
									}
								}
							}
						}
						return;
					}

					if ( pa.Find( "left" ) != 0 ) {
						
						if ( holder.buildmode.copycat != null ) {
							
							if ( holder.buildmode.copycat is Tile ) {
								T8 = GlobalFuncs.get_turf( _object );
								((Tile)T8).ChangeTurf( holder.buildmode.copycat.type );
								Task13.Schedule( 1, (Task13.Closure)(() => {
									T8.icon = holder.buildmode.copycat.icon;
									T8.icon_state = holder.buildmode.copycat.icon_state;
									T8.dir = holder.builddir.dir;

									if ( holder.buildmode.copycat.overlays.len != 0 ) {
										T8.overlays.len = 0;
										i = null;
										i = 1;

										while (( i ??0) <= holder.buildmode.copycat.overlays.len) {
											thing3 = holder.buildmode.copycat.overlays[i];
											T8.overlays += thing3;
											i++;
										}
									}

									if ( holder.buildmode.copycat.underlays.len != 0 ) {
										T8.underlays.len = 0;
										i2 = null;
										i2 = 1;

										while (( i2 ??0) <= holder.buildmode.copycat.underlays.len) {
											thing4 = holder.buildmode.copycat.underlays[i2];
											T8.underlays += thing4;
											i2++;
										}
									}
									return;
								}));
							} else {
								A3 = Lang13.Call( holder.buildmode.copycat.type, GlobalFuncs.get_turf( _object ) );

								if ( A3 is Ent_Dynamic ) {
									A3.dir = holder.builddir.dir;
									A3.icon = holder.buildmode.copycat.icon;
									A3.gender = holder.buildmode.copycat.gender;
									A3.name = holder.buildmode.copycat.name;
									A3.icon_state = holder.buildmode.copycat.icon_state;
									A3.alpha = holder.buildmode.copycat.alpha;
									A3.color = holder.buildmode.copycat.color;
									A3.maptext = holder.buildmode.copycat.maptext;
									A3.maptext_height = holder.buildmode.copycat.maptext_height;
									A3.maptext_width = holder.buildmode.copycat.maptext_width;
									A3.light_color = holder.buildmode.copycat.light_color;
									A3.luminosity = holder.buildmode.copycat.luminosity;
									A3.molten = holder.buildmode.copycat.molten;
									A3.pixel_x = holder.buildmode.copycat.pixel_x;
									A3.pixel_y = holder.buildmode.copycat.pixel_y;
									A3.invisibility = holder.buildmode.copycat.invisibility;

									if ( holder.buildmode.copycat.overlays.len != 0 ) {
										A3.overlays.len = 0;
										i3 = null;
										i3 = 1;

										while (( i3 ??0) <= holder.buildmode.copycat.overlays.len) {
											thing5 = holder.buildmode.copycat.overlays[i3];
											A3.overlays += thing5;
											i3++;
										}
									}

									if ( holder.buildmode.copycat.underlays.len != 0 ) {
										A3.underlays.len = 0;
										i4 = null;
										i4 = 1;

										while (( i4 ??0) <= holder.buildmode.copycat.underlays.len) {
											thing6 = holder.buildmode.copycat.underlays[i4];
											A3.underlays += thing6;
											i4++;
										}
									}
								}
							}
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made a " + holder.buildmode.copycat.type + " at " + GlobalFuncs.formatJumpTo( RT ) );
						} else {
							
							if ( Lang13.Bool( ((dynamic)holder.buildmode.objholder).IsSubclassOf( typeof(Tile) ) ) ) {
								T9 = GlobalFuncs.get_turf( _object );
								((Tile)T9).ChangeTurf( holder.buildmode.objholder );
							} else {
								A4 = Lang13.Call( holder.buildmode.objholder, GlobalFuncs.get_turf( _object ) );

								if ( A4 is Obj ) {
									A4.dir = holder.builddir.dir;
								}
							}
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made a " + holder.buildmode.objholder + " at " + GlobalFuncs.formatJumpTo( RT ) );
						}
					} else if ( pa.Find( "right" ) != 0 ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted a " + _object + " at " + GlobalFuncs.formatJumpTo( RT ) );

						if ( _object is Obj ) {
							Lang13.Delete( _object );
							_object = null;
						}
					} else if ( pa.Find( "middle" ) != 0 ) {
						
						if ( _object is Mob && !GlobalFuncs.check_rights( 32, false ) ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You don't have sufficient rights to clone " + _object.type + "</span>" );
						} else if ( _object is Mob ) {
							holder.buildmode.objholder = _object.type;
							GlobalFuncs.to_chat( Task13.User, "<span class='info'>You will now build " + _object.type + " when clicking.</span>" );
						} else {
							holder.buildmode.copycat = _object;
							GlobalFuncs.to_chat( Task13.User, "<span class='info'>You will now build a lookalike of " + _object + " when clicking.</span>" );
						}
					}
					break;
				case 3:
					
					if ( pa.Find( "left" ) != 0 ) {
						
						if ( _object.vars.Find( holder.buildmode.varholder ) != 0 ) {
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " modified " + _object.name + "'s " + holder.buildmode.varholder + " to " + holder.buildmode.valueholder );
							_object.vars[holder.buildmode.varholder] = holder.buildmode.valueholder;
						} else {
							GlobalFuncs.to_chat( Task13.User, "<span class='warning'>" + Lang13.Initial( _object, "name" ) + " does not have a var called '" + holder.buildmode.varholder + "'</span>" );
						}
					}

					if ( pa.Find( "right" ) != 0 ) {
						
						if ( _object.vars.Find( holder.buildmode.varholder ) != 0 ) {
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " modified " + _object.name + "'s " + holder.buildmode.varholder + " to " + holder.buildmode.valueholder );
							_object.vars[holder.buildmode.varholder] = Lang13.Initial( _object, holder.buildmode.varholder );
						} else {
							GlobalFuncs.to_chat( Task13.User, "<span class='warning'>" + Lang13.Initial( _object, "name" ) + " does not have a var called '" + holder.buildmode.varholder + "'</span>" );
						}
					}
					break;
				case 4:
					
					if ( pa.Find( "left" ) != 0 ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " is selecting " + _object + " for throwing at " + GlobalFuncs.formatJumpTo( RT ) );
						holder.throw_atom = _object;
					}

					if ( pa.Find( "right" ) != 0 ) {
						
						if ( holder.throw_atom != null ) {
							((dynamic)holder.throw_atom).throw_at( _object, 10, 1 );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " is throwing a " + holder.throw_atom + " at " + _object + " - " + GlobalFuncs.formatJumpTo( RT ) );
						}
					}
					break;
			}
			return;
		}

		// Function from file: buildmode.dm
		public static dynamic easyTypeSelector(  ) {
			dynamic chosen = null;
			ByTable matches = null;
			dynamic O = null;
			dynamic path = null;

			chosen = null;
			matches = new ByTable();
			O = Interface13.Input( "What type? Leave as /atom to choose from a global list of types.", "Gibs me dat", "/atom", null, null, InputType.Str );

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Ent_Static) ) )) {
				path = _a;
				

				if ( String13.FindIgnoreCase( "" + path, O, 1, 0 ) != 0 ) {
					matches.Add( path );
				}
			}

			if ( matches.len == 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>No types of " + O + " found.</span>" );
				return null;
			}

			if ( matches.len == 1 ) {
				chosen = matches[1];
			} else {
				chosen = Interface13.Input( "Select an atom type", "Selected Atom", matches[1], null, matches, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( chosen ) ) {
					return null;
				}
			}
			return chosen;
		}

		// Function from file: buildmode.dm
		public static void setvar( dynamic varname = null, dynamic varvalue = null, dynamic A = null, bool? reset = null ) {
			reset = reset ?? false;

			
			if ( !( reset == true ) ) {
				
				if ( A.vars.Find( varname ) != 0 ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " modified " + A.name + "'s " + varname + " to " + varvalue );
					A.vars[varname] = varvalue;
				}
			} else if ( A.vars.Find( varname ) != 0 ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " modified " + A.name + "'s " + varname + " to initial" );
				A.vars[varname] = Lang13.Initial( A, varname );
			}
			return;
		}

		// Function from file: buildmode.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Build Mode", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "player_list" )]
		public static void togglebuildmode( dynamic M = null ) {
			Obj_Effect_Bmode_Buildholder holder = null;
			Obj_Effect_Bmode_Buildholder H = null;
			dynamic BM = null;
			Game_Data hold = null;

			
			if ( Lang13.Bool( M.client ) ) {
				
				if ( Lang13.Bool( M.client.buildmode ) ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has left build mode." );
					M.client.buildmode = 0;
					M.client.show_popup_menus = true;
					holder = null;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.buildmodeholders, typeof(Obj_Effect_Bmode_Buildholder) )) {
						H = _a;
						

						if ( H.cl == M.client ) {
							holder = H;
							break;
						}
					}

					if ( holder != null ) {
						holder.buildmode.copycat = null;
					}

					if ( M.client.buildmode_objs != null && M.client.buildmode_objs.len != 0 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( M.client.buildmode_objs )) {
							BM = _b;
							
							GlobalFuncs.returnToPool( BM );
						}
					}
				} else {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has entered build mode." );
					M.client.buildmode = 1;
					M.client.show_popup_menus = false;
					hold = GlobalFuncs.getFromPool( typeof(Obj_Effect_Bmode_Buildholder) );
					((dynamic)hold).builddir = GlobalFuncs.getFromPool( typeof(Obj_Effect_Bmode_Builddir), hold );
					((dynamic)hold).buildhelp = GlobalFuncs.getFromPool( typeof(Obj_Effect_Bmode_Buildhelp), hold );
					((dynamic)hold).buildmode = GlobalFuncs.getFromPool( typeof(Obj_Effect_Bmode_Buildmode), hold );
					((dynamic)hold).buildquit = GlobalFuncs.getFromPool( typeof(Obj_Effect_Bmode_Buildquit), hold );
					M.client.screen += new ByTable(new object [] { ((dynamic)hold).builddir, ((dynamic)hold).buildhelp, ((dynamic)hold).buildmode, ((dynamic)hold).buildquit });
					((dynamic)hold).cl = M.client;
					M.client.buildmode_objs.Or( new ByTable(new object [] { hold, ((dynamic)hold).builddir, ((dynamic)hold).buildhelp, ((dynamic)hold).buildmode, ((dynamic)hold).buildquit }) );
				}
			}
			return;
		}

		// Function from file: byjax.dm
		public static void send_byjax( Ent_Static receiver = null, string control_id = null, string target_element = null, dynamic new_content = null, string callback = null, dynamic callback_args = null ) {
			dynamic argums = null;

			
			if ( receiver != null && Lang13.Bool( target_element ) && Lang13.Bool( control_id ) ) {
				argums = new ByTable(new object [] { target_element, new_content });

				if ( Lang13.Bool( callback ) ) {
					argums += callback;

					if ( Lang13.Bool( callback_args ) ) {
						argums += callback_args;
					}
				}
				argums = String13.MakeUrlParams( argums );
				Interface13.Output( receiver, argums, "" + control_id + ":replaceContent" );
			}
			return;
		}

		// Function from file: captain_announce.dm
		public static void captain_announce( dynamic text = null ) {
			GlobalFuncs.to_chat( typeof(Game13), "<h1 class='alert'>Priority Announcement</h1>" );
			GlobalFuncs.to_chat( typeof(Game13), "<span class='alert'>" + String13.HtmlEncode( text ) + "</span>" );
			GlobalFuncs.to_chat( typeof(Game13), "<br>" );
			return;
		}

		// Function from file: cash.dm
		public static int count_cash( ByTable cash = null ) {
			int _default = 0;

			Obj_Item_Weapon_Spacecash C = null;

			_default = 0;

			foreach (dynamic _a in Lang13.Enumerate( cash, typeof(Obj_Item_Weapon_Spacecash) )) {
				C = _a;
				
				_default += ( C.amount ??0) * C.worth;
			}
			return _default;
		}

		// Function from file: cash.dm
		public static void dispense_cash( dynamic amount = null, dynamic loc = null ) {
			dynamic cashtype = null;
			dynamic slice = null;
			dynamic dispense_count = null;
			int dispense_this_time = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.moneytypes )) {
				cashtype = _a;
				
				slice = GlobalVars.moneytypes[cashtype];
				dispense_count = GlobalFuncs.Floor( amount / slice );
				amount = amount % slice;

				while (Convert.ToDouble( dispense_count ) > 0) {
					dispense_this_time = Num13.MinInt( Convert.ToInt32( dispense_count ), 10 );

					if ( dispense_this_time > 0 ) {
						Lang13.Call( cashtype, loc, dispense_this_time );
						dispense_count -= dispense_this_time;
					}
				}
			}
			return;
		}

		// Function from file: check_customitem_activity.dm
		public static void populate_inactive_customitems_list( Client C = null ) {
			ByTable ckeys_with_customitems = null;
			string file = null;
			ByTable lines = null;
			dynamic line = null;
			ByTable Entry = null;
			double i = 0;
			dynamic cur_key = null;
			ByTable inactive_ckeys = null;
			DBQuery query_inactive = null;
			dynamic cur_ckey = null;
			dynamic cur_ckey2 = null;
			DBQuery query_inactive2 = null;
			dynamic cur_key2 = null;

			
			if ( GlobalVars.checked_for_inactives ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			ckeys_with_customitems = new ByTable();
			file = File13.Read( "config/custom_items.txt" );
			lines = GlobalFuncs.text2list( file, "\n" );

			foreach (dynamic _b in Lang13.Enumerate( lines )) {
				line = _b;
				
				Entry = GlobalFuncs.text2list( line, ":" );

				foreach (dynamic _a in Lang13.IterateRange( 1, Entry.len )) {
					i = _a;
					
					Entry[i] = GlobalFuncs.trim( Entry[i] );
				}

				if ( Entry.len < 1 ) {
					continue;
				}
				cur_key = Entry[1];

				if ( !( ckeys_with_customitems.Find( cur_key ) != 0 ) ) {
					ckeys_with_customitems.Add( cur_key );
				}
			}
			inactive_ckeys = new ByTable();

			if ( ckeys_with_customitems.len != 0 ) {
				query_inactive = GlobalVars.dbcon.NewQuery( "SELECT ckey, lastseen FROM erro_player WHERE datediff(Now(), lastseen) > 60" );
				query_inactive.Execute();

				while (query_inactive.NextRow()) {
					cur_ckey = query_inactive.item[1];

					if ( ckeys_with_customitems.Find( cur_ckey ) != 0 ) {
						ckeys_with_customitems.Remove( cur_ckey );
						inactive_ckeys[cur_ckey] = "last seen on " + query_inactive.item[2];
					}
				}
			}

			if ( ckeys_with_customitems.len != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( ckeys_with_customitems )) {
					cur_ckey2 = _c;
					
					query_inactive2 = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM erro_player WHERE ckey = '" + cur_ckey2 + "'" );
					query_inactive2.Execute();

					if ( !( query_inactive2.RowCount() != 0 ) ) {
						inactive_ckeys.Add( cur_ckey2 );
					}
				}
			}

			if ( inactive_ckeys.len != 0 ) {
				GlobalVars.inactive_keys = "";

				foreach (dynamic _d in Lang13.Enumerate( inactive_ckeys )) {
					cur_key2 = _d;
					

					if ( Lang13.Bool( inactive_ckeys[cur_key2] ) ) {
						GlobalVars.inactive_keys += "<b>" + cur_key2 + "</b> - " + inactive_ckeys[cur_key2] + "<br>";
					} else {
						GlobalVars.inactive_keys += "" + cur_key2 + " - no database entry<br>";
					}
				}
			}
			GlobalVars.checked_for_inactives = true;

			if ( C != null ) {
				C.check_customitem_activity();
			}
			return;
		}

		// Function from file: Chemistry-Colours.dm
		public static void get_reagent_name( Obj_Item_Weapon_ReagentContainers_Food_Drinks_Drinkingglass DG = null ) {
			ByTable reagent_list = null;
			bool highest_quantity = false;
			Reagent reagent = null;
			bool new_reag = false;

			
			if ( !( DG != null ) ) {
				return;
			}
			reagent_list = DG.reagents.reagent_list;

			if ( !( reagent_list.len != 0 ) ) {
				DG.name = "glass of...nothing?";
				DG.desc = "You can't see anything inside that glass, odd";
			} else if ( reagent_list.len > 4 ) {
				DG.name = "mixture of chemicals";
				DG.desc = "There's too many different chemicals in the glass, you cannot tell them apart.";
				DG.viewcontents = false;
			} else {
				highest_quantity = false;

				foreach (dynamic _a in Lang13.Enumerate( reagent_list, typeof(Reagent) )) {
					reagent = _a;
					
					new_reag = ((Reagents)DG.reagents).get_reagent_amount( reagent.id );

					if ( ( new_reag ?1:0) > ( highest_quantity ?1:0) ) {
						highest_quantity = new_reag;
						DG.name = "glass of " + reagent.name;
						DG.desc = reagent.description;
					}
				}
			}
			return;
		}

		// Function from file: Chemistry-Colours.dm
		public static dynamic mix_alpha_from_reagents( ByTable reagent_list = null ) {
			dynamic alpha = null;
			dynamic total_alpha = null;
			Reagent reagent = null;

			
			if ( !( reagent_list is ByTable ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( reagent_list, typeof(Reagent) )) {
				reagent = _a;
				
				total_alpha += reagent.alpha;
			}
			alpha = total_alpha / reagent_list.len;
			return alpha;
		}

		// Function from file: Chemistry-Colours.dm
		public static string mix_color_from_reagents( ByTable reagent_list = null ) {
			string color = null;
			string reagent_color = null;
			double vol_counter = 0;
			double? vol_temp = null;
			Reagent reagent = null;

			
			if ( !( reagent_list is ByTable ) ) {
				return null;
			}
			vol_counter = 0;

			foreach (dynamic _a in Lang13.Enumerate( reagent_list, typeof(Reagent) )) {
				reagent = _a;
				

				if ( reagent.id == "blood" && Lang13.Bool( reagent.data["blood_colour"] ) ) {
					reagent_color = reagent.data["blood_colour"];
				} else {
					reagent_color = reagent.color;
				}
				vol_temp = reagent.volume;
				vol_counter += vol_temp ??0;

				if ( color == null ) {
					color = reagent.color;
				} else if ( Lang13.Length( color ) >= Lang13.Length( reagent_color ) ) {
					color = GlobalFuncs.BlendRGB( color, reagent_color, ( vol_temp ??0) / vol_counter );
				} else {
					color = GlobalFuncs.BlendRGB( reagent_color, color, ( vol_temp ??0) / vol_counter );
				}
			}
			return color;
		}

		// Function from file: Christmas.dm
		public static void Christmas_Game_Start(  ) {
			Obj_Structure_Flora_Tree_Pine xmas = null;
			Tile_Simulated_Floor T = null;
			int? i = null;
			Mob_Living_SimpleAnimal_Corgi_Ian Ian = null;

			
			foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Structure_Flora_Tree_Pine) )) {
				xmas = _b;
				

				if ( xmas.z != 1 ) {
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( xmas, 1 ), typeof(Tile_Simulated_Floor) )) {
					T = _a;
					
					i = null;
					i = 1;

					while (( i ??0) <= Rand13.Int( 1, 5 )) {
						new Obj_Item_Weapon_WinterGift_Regular( T );
						i++;
					}
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_SimpleAnimal_Corgi_Ian) )) {
				Ian = _c;
				
				Ian.place_on_head( new Obj_Item_Clothing_Head_Helmet_Space_Santahat( Ian ) );
			}
			return;
		}

		// Function from file: client procs.dm
		public static string get_role_desire_str( dynamic rolepref = null ) {
			
			dynamic _a = rolepref & 3; // Was a switch-case, sorry for the mess.
			if ( _a==2 ) {
				return "Never";
			} else if ( _a==0 ) {
				return "No";
			} else if ( _a==1 ) {
				return "Yes";
			} else if ( _a==3 ) {
				return "Always";
			}
			return "???";
		}

		// Function from file: cloning.dm
		public static Mob_Living find_dead_player( string find_key = null ) {
			Mob_Living selected = null;
			Mob_Living M = null;

			
			if ( find_key == null ) {
				return null;
			}
			selected = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
				M = _a;
				

				if ( M.stat != 2 || !( M.client != null ) ) {
					continue;
				}

				if ( M is Mob_Living_Carbon_Human && !M.has_brain() ) {
					continue;
				}

				if ( M.ckey == find_key ) {
					selected = M;
					break;
				}
			}
			return selected;
		}

		// Function from file: cmp.dm
		public static int cmp_ckey_asc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( b.ckey, a.ckey );
		}

		// Function from file: cmp.dm
		public static int cmp_ckey_dsc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( a.ckey, b.ckey );
		}

		// Function from file: cmp.dm
		public static int cmp_name_asc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( b.name, a.name );
		}

		// Function from file: cmp.dm
		public static int cmp_name_dsc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( a.name, b.name );
		}

		// Function from file: cmp.dm
		public static dynamic cmp_numeric_asc( dynamic a = null, dynamic b = null ) {
			return a - b;
		}

		// Function from file: cmp.dm
		public static int cmp_records_asc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( ( Lang13.Bool( b ) ? b.fields[GlobalVars.cmp_field] : "" ), ( Lang13.Bool( a ) ? a.fields[GlobalVars.cmp_field] : a ) );
		}

		// Function from file: cmp.dm
		public static int cmp_records_dsc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( a.fields[GlobalVars.cmp_field], b.fields[GlobalVars.cmp_field] );
		}

		// Function from file: cmp.dm
		public static int cmp_text_asc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( b, a );
		}

		// Function from file: cmp.dm
		public static int cmp_text_dsc( dynamic a = null, dynamic b = null ) {
			return String13.GetOrder( a, b );
		}

		// Function from file: command_alert.dm
		public static void command_alert( dynamic text = null, dynamic title = null ) {
			title = title ?? "";

			dynamic command = null;
			dynamic M = null;

			command += "<h1 class='alert'>" + GlobalFuncs.command_name() + " Update</h1>";

			if ( Lang13.Bool( title ) && Lang13.Length( title ) > 0 ) {
				command += "<br><h2 class='alert'>" + String13.HtmlEncode( title ) + "</h2>";
			}
			command += "<br><span class='alert'>" + String13.HtmlEncode( text ) + "</span><br>\n		<br>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( !( M is Mob_NewPlayer ) && Lang13.Bool( M.client ) ) {
					GlobalFuncs.to_chat( M, command );
				}
			}
			return;
		}

		// Function from file: comms_blackout.dm
		public static void communications_blackout( bool? silent = null ) {
			silent = silent ?? true;

			Mob_Living_Silicon_Ai A = null;
			Obj_Machinery_Telecomms T = null;

			
			if ( !( silent == true ) ) {
				GlobalFuncs.command_alert( "Ionospheric anomalies detected. Temporary telecommunication failure imminent. Please contact you-BZZT" );
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
					A = _a;
					
					GlobalFuncs.to_chat( A, "<br>" );
					GlobalFuncs.to_chat( A, "<span class='danger'><b>Ionospheric anomalies detected. Temporary telecommunication failure imminent. Please contact you-BZZT</span>" );
					GlobalFuncs.to_chat( A, "<br>" );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms) )) {
				T = _b;
				
				T.emp_act( 1 );
			}
			return;
		}

		// Function from file: communications.dm
		public static dynamic add_radio( Obj_Item_Device_Radio radio = null, dynamic freq = null ) {
			
			if ( !Lang13.Bool( freq ) || !( radio != null ) ) {
				return null;
			}

			if ( !Lang13.Bool( GlobalVars.all_radios["" + freq] ) ) {
				GlobalVars.all_radios["" + freq] = new ByTable(new object [] { radio });
				return freq;
			}
			GlobalVars.all_radios["" + freq] |= radio;
			return freq;
		}

		// Function from file: communications.dm
		public static void call_shuttle_proc( Mob user = null, dynamic justification = null ) {
			
			if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 ) {
				return;
			}

			if ( !((UniversalState)GlobalVars.universe).OnShuttleCall( user ) ) {
				return;
			}

			if ( GlobalVars.sent_strike_team ) {
				GlobalFuncs.to_chat( user, "Centcom will not allow the shuttle to be called. Consider all contracts terminated." );
				return;
			}

			if ( Game13.time < 6000 ) {
				GlobalFuncs.to_chat( user, new Txt( "The emergency shuttle is refueling. Please wait another " ).item( Num13.Floor( ( 6000 - Game13.time ) / 600 ) ).str( " minute" ).s().str( " before trying again." ).ToString() );
				return;
			}

			if ( GlobalVars.emergency_shuttle.direction == -1 ) {
				GlobalFuncs.to_chat( user, "The emergency shuttle may not be called while returning to CentCom." );
				return;
			}

			if ( GlobalVars.emergency_shuttle.online ) {
				GlobalFuncs.to_chat( user, "The emergency shuttle is already on its way." );
				return;
			}

			if ( GlobalVars.ticker.mode.name == "blob" ) {
				GlobalFuncs.to_chat( user, "Under directive 7-10, " + GlobalFuncs.station_name() + " is quarantined until further notice." );
				return;
			}
			GlobalVars.emergency_shuttle.incall();

			if ( !Lang13.Bool( justification ) ) {
				justification = "#??!7E/_1$*/ARR-CON²FAIL!!*$^?";
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( user ) + " has called the shuttle. Justification given : '" + justification + "'" ) ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " has called the shuttle. Justification given : '" + justification + "'. You are encouraged to act if that justification is shit" );
			GlobalFuncs.captain_announce( "The emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes. Justification : '" + justification + "'" );
			GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/shuttlecalled.ogg" ) );
			return;
		}

		// Function from file: communications.dm
		public static void init_shift_change( Mob user = null, bool? force = null ) {
			force = force ?? false;

			
			if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 ) {
				return;
			}

			if ( GlobalVars.emergency_shuttle.direction == -1 ) {
				GlobalFuncs.to_chat( user, "The shuttle may not be called while returning to CentCom." );
				return;
			}

			if ( GlobalVars.emergency_shuttle.online ) {
				GlobalFuncs.to_chat( user, "The shuttle is already on its way." );
				return;
			}

			if ( !( force == true ) ) {
				
				if ( !((UniversalState)GlobalVars.universe).OnShuttleCall( user ) ) {
					return;
				}

				if ( GlobalVars.emergency_shuttle.deny_shuttle ) {
					GlobalFuncs.to_chat( user, "Centcom does not currently have a shuttle available in your sector. Please try again later." );
					return;
				}

				if ( GlobalVars.sent_strike_team ) {
					GlobalFuncs.to_chat( user, "Centcom will not allow the shuttle to be called. Consider all contracts terminated." );
					return;
				}

				if ( Game13.time < 54000 ) {
					GlobalFuncs.to_chat( user, "The shuttle is refueling. Please wait another " + Num13.Floor( ( 54000 - Game13.time ) / 600 ) + " minutes before trying again." );
					return;
				}

				if ( GlobalVars.ticker.mode.name == "revolution" || GlobalVars.ticker.mode.name == "AI malfunction" || GlobalVars.ticker.mode.name == "sandbox" ) {
					GlobalVars.emergency_shuttle.fake_recall = Rand13.Int( 300, 500 );
				}

				if ( GlobalVars.ticker.mode.name == "blob" || GlobalVars.ticker.mode.name == "epidemic" ) {
					GlobalFuncs.to_chat( user, "Under directive 7-10, " + GlobalFuncs.station_name() + " is quarantined until further notice." );
					return;
				}
			}
			GlobalVars.emergency_shuttle.shuttlealert( true );
			GlobalVars.emergency_shuttle.incall();
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( user ) + " has called the shuttle." ) ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " has called the shuttle - " + GlobalFuncs.formatJumpTo( user ) + "." );
			GlobalFuncs.captain_announce( "A crew transfer has been initiated. The shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes." );
			return;
		}

		// Function from file: communications.dm
		public static void recall_shuttle( Mob user = null ) {
			
			if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 || GlobalVars.emergency_shuttle.direction == 0 || GlobalVars.emergency_shuttle.timeleft() < 300 ) {
				return;
			}

			if ( GlobalVars.ticker.mode.name == "blob" || GlobalVars.ticker.mode.name == "meteor" ) {
				return;
			}

			if ( GlobalVars.emergency_shuttle.direction != -1 && GlobalVars.emergency_shuttle.online ) {
				GlobalVars.emergency_shuttle.recall();
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( user ) + " has recalled the shuttle." ) ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " has recalled the shuttle - " + GlobalFuncs.formatJumpTo( user ) + "." );
			}
			return;
		}

		// Function from file: communications.dm
		public static void remove_radio( Obj_Item_Device_Radio radio = null, dynamic freq = null ) {
			
			if ( !Lang13.Bool( freq ) || !( radio != null ) ) {
				return;
			}

			if ( !Lang13.Bool( GlobalVars.all_radios["" + freq] ) ) {
				return;
			}
			GlobalVars.all_radios["" + freq] -= radio;
			return;
		}

		// Function from file: communications.dm
		public static void remove_radio_all( Obj_Item_Device_Radio radio = null ) {
			dynamic freq = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_radios )) {
				freq = _a;
				
				GlobalVars.all_radios["" + freq] -= radio;
			}
			return;
		}

		// Function from file: ConnectionGroup.dm
		public static bool ShareRatio( GasMixture A = null, GasMixture B = null, int connecting_tiles = 0 ) {
			dynamic ratio = null;
			int size = 0;
			int share_size = 0;
			dynamic full_oxy = null;
			dynamic full_nitro = null;
			dynamic full_co2 = null;
			dynamic full_plasma = null;
			int full_heat_capacity = 0;
			dynamic s_full_oxy = null;
			dynamic s_full_nitro = null;
			dynamic s_full_co2 = null;
			dynamic s_full_plasma = null;
			int s_full_heat_capacity = 0;
			dynamic oxy_avg = null;
			dynamic nit_avg = null;
			dynamic co2_avg = null;
			dynamic plasma_avg = null;
			double temp_avg = 0;
			Gas G = null;
			dynamic H = null;
			double G_avg = 0;
			double G_avg2 = 0;
			Gas G2 = null;
			dynamic H2 = null;
			double G_avg3 = 0;

			ratio = GlobalVars.sharing_lookup_table[6];
			size = Num13.MaxInt( 1, A.group_multiplier );
			share_size = Num13.MaxInt( 1, B.group_multiplier );
			full_oxy = A.oxygen * size;
			full_nitro = A.nitrogen * size;
			full_co2 = A.carbon_dioxide * size;
			full_plasma = A.toxins * size;
			full_heat_capacity = A.heat_capacity() * size;
			s_full_oxy = B.oxygen * share_size;
			s_full_nitro = B.nitrogen * share_size;
			s_full_co2 = B.carbon_dioxide * share_size;
			s_full_plasma = B.toxins * share_size;
			s_full_heat_capacity = B.heat_capacity() * share_size;
			oxy_avg = ( full_oxy + s_full_oxy ) / ( size + share_size );
			nit_avg = ( full_nitro + s_full_nitro ) / ( size + share_size );
			co2_avg = ( full_co2 + s_full_co2 ) / ( size + share_size );
			plasma_avg = ( full_plasma + s_full_plasma ) / ( size + share_size );
			temp_avg = ( ( A.temperature ??0) * full_heat_capacity + ( B.temperature ??0) * s_full_heat_capacity ) / ( full_heat_capacity + s_full_heat_capacity );

			if ( connecting_tiles != 0 && GlobalVars.sharing_lookup_table.len >= connecting_tiles ) {
				ratio = GlobalVars.sharing_lookup_table[connecting_tiles];
			}
			A.oxygen = Num13.MaxInt( 0, Convert.ToInt32( ( A.oxygen - oxy_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + oxy_avg ) );
			A.nitrogen = Num13.MaxInt( 0, Convert.ToInt32( ( A.nitrogen - nit_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + nit_avg ) );
			A.carbon_dioxide = Num13.MaxInt( 0, Convert.ToInt32( ( A.carbon_dioxide - co2_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + co2_avg ) );
			A.toxins = Num13.MaxInt( 0, Convert.ToInt32( ( A.toxins - plasma_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + plasma_avg ) );
			A.temperature = Num13.MaxInt( 0, ((int)( ( ( A.temperature ??0) - temp_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + temp_avg )) );
			B.oxygen = Num13.MaxInt( 0, Convert.ToInt32( ( B.oxygen - oxy_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + oxy_avg ) );
			B.nitrogen = Num13.MaxInt( 0, Convert.ToInt32( ( B.nitrogen - nit_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + nit_avg ) );
			B.carbon_dioxide = Num13.MaxInt( 0, Convert.ToInt32( ( B.carbon_dioxide - co2_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + co2_avg ) );
			B.toxins = Num13.MaxInt( 0, Convert.ToInt32( ( B.toxins - plasma_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + plasma_avg ) );
			B.temperature = Num13.MaxInt( 0, ((int)( ( ( B.temperature ??0) - temp_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + temp_avg )) );

			foreach (dynamic _a in Lang13.Enumerate( A.trace_gases, typeof(Gas) )) {
				G = _a;
				
				H = Lang13.FindIn( G.type, B.trace_gases );

				if ( Lang13.Bool( H ) ) {
					G_avg = ( ( G.moles ??0) * size + ( H.moles ??0) * share_size ) / ( size + share_size );
					G.moles = ( ( G.moles ??0) - G_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + G_avg;
					H.moles = ( ( H.moles ??0) - G_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + G_avg;
				} else {
					H = Lang13.Call( G.type );
					B.trace_gases.Add( H );
					G_avg2 = ( G.moles ??0) * size / ( size + share_size );
					G.moles = ( ( G.moles ??0) - G_avg2 ) * ( 1 - Convert.ToDouble( ratio ) ) + G_avg2;
					H.moles = ( ( H.moles ??0) - G_avg2 ) * ( 1 - Convert.ToDouble( ratio ) ) + G_avg2;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( B.trace_gases, typeof(Gas) )) {
				G2 = _b;
				
				H2 = Lang13.FindIn( G2.type, A.trace_gases );

				if ( !Lang13.Bool( H2 ) ) {
					H2 = Lang13.Call( G2.type );
					A.trace_gases.Add( H2 );
					G_avg3 = ( G2.moles ??0) * size / ( size + share_size );
					G2.moles = ( ( G2.moles ??0) - G_avg3 ) * ( 1 - Convert.ToDouble( ratio ) ) + G_avg3;
					H2.moles = ( ( H2.moles ??0) - G_avg3 ) * ( 1 - Convert.ToDouble( ratio ) ) + G_avg3;
				}
			}
			A.update_values();
			B.update_values();

			if ( A.compare( B ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: ConnectionGroup.dm
		public static double ShareSpace( GasMixture A = null, dynamic unsimulated_tiles = null, bool dbg_output = false ) {
			double unsim_oxygen = 0;
			double unsim_nitrogen = 0;
			double unsim_co2 = 0;
			double unsim_plasma = 0;
			int unsim_heat_capacity = 0;
			double unsim_temperature = 0;
			int size = 0;
			int tileslen = 0;
			int share_size = 0;
			dynamic avg_unsim = null;
			double correction_ratio = 0;
			dynamic T = null;
			dynamic ratio = null;
			dynamic old_pressure = null;
			dynamic full_oxy = null;
			dynamic full_nitro = null;
			dynamic full_co2 = null;
			dynamic full_plasma = null;
			int full_heat_capacity = 0;
			dynamic oxy_avg = null;
			dynamic nit_avg = null;
			dynamic co2_avg = null;
			dynamic plasma_avg = null;
			double temp_avg = 0;
			Gas G = null;
			double G_avg = 0;

			
			if ( !Lang13.Bool( unsimulated_tiles ) ) {
				return 0;
			}
			unsim_oxygen = 0;
			unsim_nitrogen = 0;
			unsim_co2 = 0;
			unsim_plasma = 0;
			unsim_heat_capacity = 0;
			unsim_temperature = 0;
			size = Num13.MaxInt( 1, A.group_multiplier );

			if ( unsimulated_tiles is GasMixture ) {
				avg_unsim = unsimulated_tiles;
				unsim_oxygen = Convert.ToDouble( avg_unsim.oxygen );
				unsim_co2 = Convert.ToDouble( avg_unsim.carbon_dioxide );
				unsim_nitrogen = Convert.ToDouble( avg_unsim.nitrogen );
				unsim_plasma = Convert.ToDouble( avg_unsim.toxins );
				unsim_temperature = Convert.ToDouble( avg_unsim.temperature );
				share_size = Num13.MaxInt( 1, Num13.MaxInt( size + 3, 1 ) + avg_unsim.group_multiplier );
				tileslen = avg_unsim.group_multiplier;

				if ( dbg_output ) {
					GlobalFuncs.to_chat( typeof(Game13), "O2: " + unsim_oxygen + " N2: " + unsim_nitrogen + " Size: " + share_size + " Tiles: " + tileslen );
				}
			} else if ( unsimulated_tiles is ByTable ) {
				
				if ( !( unsimulated_tiles.len != 0 ) ) {
					return 0;
				}
				share_size = Num13.MaxInt( 1, Num13.MaxInt( size + 3, 1 ) + unsimulated_tiles.len );
				correction_ratio = share_size / unsimulated_tiles.len;

				foreach (dynamic _a in Lang13.Enumerate( unsimulated_tiles )) {
					T = _a;
					
					unsim_oxygen += Convert.ToDouble( T.oxygen );
					unsim_co2 += Convert.ToDouble( T.carbon_dioxide );
					unsim_nitrogen += Convert.ToDouble( T.nitrogen );
					unsim_plasma += Convert.ToDouble( T.toxins );
					unsim_temperature += Convert.ToDouble( T.temperature / unsimulated_tiles.len );
				}
				unsim_oxygen *= correction_ratio;
				unsim_co2 *= correction_ratio;
				unsim_nitrogen *= correction_ratio;
				unsim_plasma *= correction_ratio;
				tileslen = unsimulated_tiles.len;
			} else {
				return 0;
			}
			unsim_heat_capacity = Num13.MaxInt( 0, ((int)( unsim_co2 * 30 + ( unsim_oxygen + unsim_nitrogen ) * 20 + unsim_plasma * 200 )) );
			ratio = GlobalVars.sharing_lookup_table[6];
			old_pressure = A.return_pressure();
			full_oxy = A.oxygen * size;
			full_nitro = A.nitrogen * size;
			full_co2 = A.carbon_dioxide * size;
			full_plasma = A.toxins * size;
			full_heat_capacity = A.heat_capacity() * size;
			oxy_avg = ( full_oxy + unsim_oxygen * share_size ) / ( size + share_size );
			nit_avg = ( full_nitro + unsim_nitrogen * share_size ) / ( size + share_size );
			co2_avg = ( full_co2 + unsim_co2 * share_size ) / ( size + share_size );
			plasma_avg = ( full_plasma + unsim_plasma * share_size ) / ( size + share_size );
			temp_avg = 0;

			if ( full_heat_capacity + unsim_heat_capacity > 0 ) {
				temp_avg = ( ( A.temperature ??0) * full_heat_capacity + unsim_temperature * unsim_heat_capacity ) / ( full_heat_capacity + unsim_heat_capacity );
			}

			if ( GlobalVars.sharing_lookup_table.len >= tileslen ) {
				ratio = GlobalVars.sharing_lookup_table[tileslen];
			}

			if ( dbg_output ) {
				GlobalFuncs.to_chat( typeof(Game13), "Ratio: " + ratio );
				GlobalFuncs.to_chat( typeof(Game13), "Avg O2: " + oxy_avg + " N2: " + nit_avg );
			}
			A.oxygen = Num13.MaxInt( 0, Convert.ToInt32( ( A.oxygen - oxy_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + oxy_avg ) );
			A.nitrogen = Num13.MaxInt( 0, Convert.ToInt32( ( A.nitrogen - nit_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + nit_avg ) );
			A.carbon_dioxide = Num13.MaxInt( 0, Convert.ToInt32( ( A.carbon_dioxide - co2_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + co2_avg ) );
			A.toxins = Num13.MaxInt( 0, Convert.ToInt32( ( A.toxins - plasma_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + plasma_avg ) );
			A.temperature = Num13.MaxInt( ((int)( 2.73 )), ((int)( ( ( A.temperature ??0) - temp_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + temp_avg )) );

			foreach (dynamic _b in Lang13.Enumerate( A.trace_gases, typeof(Gas) )) {
				G = _b;
				
				G_avg = ( G.moles ??0) * size / ( size + share_size );
				G.moles = ( ( G.moles ??0) - G_avg ) * ( 1 - Convert.ToDouble( ratio ) ) + G_avg;
			}
			A.update_values();

			if ( dbg_output ) {
				GlobalFuncs.to_chat( typeof(Game13), "Result: " + Math.Abs( Convert.ToDouble( old_pressure - A.return_pressure() ) ) + " kPa" );
			}
			return Math.Abs( Convert.ToDouble( old_pressure - A.return_pressure() ) );
		}

		// Function from file: construct_spells.dm
		public static bool findNullRod( dynamic target = null ) {
			dynamic T = null;
			Ent_Static A = null;

			
			if ( target is Obj_Item_Weapon_Nullrod ) {
				T = GlobalFuncs.get_turf( target );
				((Tile)T).turf_animation( "icons/effects/96x96.dmi", "nullding", -32, -32, 5, "sound/piano/Ab7.ogg" );
				return true;
			} else if ( Lang13.Bool( target.contents ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( target.contents, typeof(Ent_Static) )) {
					A = _a;
					

					if ( GlobalFuncs.findNullRod( A ) ) {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: copylogs.dm
		public static void copy_logs(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.copy_logs ) ) {
				GlobalFuncs.ext_python( "copy_logs.py", "data/logs \"" + GlobalVars.config.copy_logs + "\"" );
			}
			return;
		}

		// Function from file: cult.dm
		public static bool is_convertable_to_cult( dynamic mind = null ) {
			Obj_Item_Weapon_Implant_Loyalty L = null;

			
			if ( !( mind is Mind ) ) {
				return false;
			}

			if ( mind.current is Mob_Living_Carbon_Human && mind.assigned_role == "Chaplain" ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( mind.current, typeof(Obj_Item_Weapon_Implant_Loyalty) )) {
				L = _a;
				

				if ( L != null && L.imp_in == mind.current ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: cult.dm
		public static bool iscultist( dynamic M = null ) {
			return M is Mob_Living && Lang13.Bool( M.mind ) && GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && false;
		}

		// Function from file: data_huds.dm
		public static void process_med_hud( Mob_Living M = null, dynamic eye = null ) {
			Client C = null;
			dynamic holder = null;
			dynamic T = null;
			Mob_Living_Carbon_Human patient = null;
			int foundVirus = 0;
			Disease D = null;

			
			if ( !( M != null ) ) {
				return;
			}

			if ( !( M.client != null ) ) {
				return;
			}
			Interface13.Stat( null, GlobalVars.med_hud_users.Contains( M ) );

			if ( !( !( M.client != null ) ) ) {
				GlobalVars.med_hud_users.Add( M );
			}
			C = M.client;

			if ( Lang13.Bool( eye ) ) {
				T = GlobalFuncs.get_turf( eye );
			} else {
				T = GlobalFuncs.get_turf( M );
			}

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( null, T ), typeof(Mob_Living_Carbon_Human) )) {
				patient = _b;
				

				if ( Lang13.Bool( patient.head ) && patient.head is Obj_Item_Clothing_Head_Tinfoil ) {
					continue;
				}

				if ( M.see_invisible < patient.invisibility ) {
					continue;
				}
				foundVirus = 0;

				foreach (dynamic _a in Lang13.Enumerate( patient.viruses, typeof(Disease) )) {
					D = _a;
					

					if ( !Lang13.Bool( D.hidden[1] ) ) {
						foundVirus++;
					}
				}

				if ( !( C != null ) ) {
					continue;
				}
				holder = patient.hud_list[1];

				if ( Lang13.Bool( holder ) ) {
					
					if ( patient.stat == 2 ) {
						holder.icon_state = "hudhealth-100";
					} else {
						holder.icon_state = "hud" + GlobalFuncs.RoundHealth( patient.health );
					}
					C.images.Add( holder );
				}
				holder = patient.hud_list[2];

				if ( Lang13.Bool( holder ) ) {
					
					if ( patient.stat == 2 ) {
						holder.icon_state = "huddead";
					} else if ( ( patient.status_flags & 32768 ) != 0 ) {
						holder.icon_state = "hudxeno";
					} else if ( foundVirus != 0 ) {
						holder.icon_state = "hudill";
					} else {
						holder.icon_state = "hudhealthy";
					}
					C.images.Add( holder );
				}
			}
			return;
		}

		// Function from file: data_huds.dm
		public static void process_sec_hud( Mob_Living M = null, bool? advanced_mode = null, dynamic eye = null ) {
			Client C = null;
			dynamic holder = null;
			dynamic T = null;
			Mob_Living_Carbon_Human perp = null;
			dynamic card = null;
			Obj_Item_Weapon_Implant I = null;
			dynamic perpname = null;
			Data_Record R = null;

			
			if ( !( M != null ) ) {
				return;
			}

			if ( !( M.client != null ) ) {
				return;
			}
			Interface13.Stat( null, GlobalVars.sec_hud_users.Contains( M ) );

			if ( !( !( M.client != null ) ) ) {
				GlobalVars.sec_hud_users.Add( M );
			}
			C = M.client;

			if ( Lang13.Bool( eye ) ) {
				T = GlobalFuncs.get_turf( eye );
			} else {
				T = GlobalFuncs.get_turf( M );
			}

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInRange( null, T ), typeof(Mob_Living_Carbon_Human) )) {
				perp = _c;
				

				if ( M.see_invisible < perp.invisibility ) {
					continue;
				}
				holder = perp.hud_list[3];

				if ( !Lang13.Bool( holder ) ) {
					continue;
				}
				holder.icon_state = "hudno_id";

				if ( Lang13.Bool( perp.head ) && perp.head is Obj_Item_Clothing_Head_Tinfoil ) {
					C.images.Add( holder );
					continue;
				}
				card = perp.get_id_card();

				if ( Lang13.Bool( card ) ) {
					holder.icon_state = "hud" + String13.CKey( ((Obj_Item_Weapon_Card_Id)card).GetJobName() );
				}
				C.images.Add( holder );

				if ( advanced_mode == true ) {
					
					foreach (dynamic _a in Lang13.Enumerate( perp, typeof(Obj_Item_Weapon_Implant) )) {
						I = _a;
						

						if ( I.implanted ) {
							
							if ( I is Obj_Item_Weapon_Implant_Tracking ) {
								holder = perp.hud_list[7];
								holder.icon_state = "hud_imp_tracking";
							} else if ( I is Obj_Item_Weapon_Implant_Loyalty ) {
								holder = perp.hud_list[5];
								holder.icon_state = "hud_imp_loyal";
							} else if ( I is Obj_Item_Weapon_Implant_Chem ) {
								holder = perp.hud_list[6];
								holder.icon_state = "hud_imp_chem";
							} else {
								continue;
							}
							C.images.Add( holder );
							break;
						}
					}
				}
				perpname = perp.get_face_name(  );

				if ( Lang13.Bool( perpname ) ) {
					R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.security );

					if ( R != null ) {
						holder = perp.hud_list[4];

						dynamic _b = R.fields["criminal"]; // Was a switch-case, sorry for the mess.
						if ( _b=="*Arrest*" ) {
							holder.icon_state = "hudwanted";
						} else if ( _b=="Incarcerated" ) {
							holder.icon_state = "hudprisoner";
						} else if ( _b=="Parolled" ) {
							holder.icon_state = "hudparolled";
						} else if ( _b=="Released" ) {
							holder.icon_state = "hudreleased";
						} else {
							continue;
						}
						C.images.Add( holder );
					}
				}
			}
			return;
		}

		// Function from file: datacore.dm
		public static Icon get_id_photo( dynamic H = null ) {
			Icon preview_icon = null;
			string g = null;
			string icobase = null;
			Icon temp = null;
			Organ_External E = null;
			string o_icobase = null;
			Icon eyes_s = null;
			dynamic hair_style = null;
			Icon hair_s = null;
			dynamic facial_hair_style = null;
			Icon facial_s = null;
			Icon clothes_s = null;

			preview_icon = null;
			g = "m";

			if ( H.gender == GlobalVars.FEMALE ) {
				g = "f";
			}
			icobase = H.species.icobase;
			preview_icon = new Icon( icobase, "torso_" + g );
			temp = new Icon( icobase, "groin_" + g );
			preview_icon.Blend( temp, 3 );
			temp = new Icon( icobase, "head_" + g );
			preview_icon.Blend( temp, 3 );

			foreach (dynamic _a in Lang13.Enumerate( H.organs, typeof(Organ_External) )) {
				E = _a;
				

				if ( ( E.status & 1 ) != 0 || ( E.status & 64 ) != 0 ) {
					continue;
				}
				o_icobase = icobase;

				if ( ( E.status & 4096 ) != 0 ) {
					o_icobase = "icons/mob/human_races/o_peg.dmi";
				} else if ( ( E.status & 128 ) != 0 ) {
					o_icobase = "icons/mob/human_races/o_robot.dmi";
				}
				temp = new Icon( o_icobase, "" + E.name );
				preview_icon.Blend( temp, 3 );
			}

			if ( Lang13.Bool( H.species.flags & 16 ) ) {
				
				if ( Convert.ToDouble( H.s_tone ) >= 0 ) {
					preview_icon.Blend( String13.ColorCode( Convert.ToInt32( H.s_tone ), Convert.ToInt32( H.s_tone ), Convert.ToInt32( H.s_tone ) ), 0 );
				} else {
					preview_icon.Blend( String13.ColorCode( Convert.ToInt32( -H.s_tone ), Convert.ToInt32( -H.s_tone ), Convert.ToInt32( -H.s_tone ) ), 1 );
				}
			}
			eyes_s = new Icon( "icons/mob/human_face.dmi", ( Lang13.Bool( H.species ) ? H.species.eyes : "eyes_s" ) );
			eyes_s.Blend( String13.ColorCode( Convert.ToInt32( H.r_eyes ), Convert.ToInt32( H.g_eyes ), Convert.ToInt32( H.b_eyes ) ), 0 );
			hair_style = GlobalVars.hair_styles_list[H.h_style];

			if ( Lang13.Bool( hair_style ) ) {
				hair_s = new Icon( hair_style.icon, "" + hair_style.icon_state + "_s" );
				hair_s.Blend( String13.ColorCode( Convert.ToInt32( H.r_hair ), Convert.ToInt32( H.g_hair ), Convert.ToInt32( H.b_hair ) ), 0 );
				eyes_s.Blend( hair_s, 3 );
			}
			facial_hair_style = GlobalVars.facial_hair_styles_list[H.f_style];

			if ( Lang13.Bool( facial_hair_style ) ) {
				facial_s = new Icon( facial_hair_style.icon, "" + facial_hair_style.icon_state + "_s" );
				facial_s.Blend( String13.ColorCode( Convert.ToInt32( H.r_facial ), Convert.ToInt32( H.g_facial ), Convert.ToInt32( H.b_facial ) ), 0 );
				eyes_s.Blend( facial_s, 3 );
			}
			clothes_s = null;

			dynamic _b = H.mind.assigned_role; // Was a switch-case, sorry for the mess.
			if ( _b=="Head of Personnel" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "hop_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
			} else if ( _b=="Bartender" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "ba_suit_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Botanist" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "hydroponics_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Chef" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "chef_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Janitor" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "janitor_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Librarian" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "red_suit_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Quartermaster" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "qm_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
			} else if ( _b=="Cargo Technician" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "cargotech_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Shaft Miner" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "miner_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Lawyer" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "internalaffairs_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
			} else if ( _b=="Chaplain" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "chapblack_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			} else if ( _b=="Research Director" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "director_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_open" ), 3 );
			} else if ( _b=="Scientist" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "toxinswhite_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "white" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_tox_open" ), 3 );
			} else if ( _b=="Chemist" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "chemistrywhite_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "white" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_chem_open" ), 3 );
			} else if ( _b=="Chief Medical Officer" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "cmo_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_cmo_open" ), 3 );
			} else if ( _b=="Medical Doctor" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "medical_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "white" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_open" ), 3 );
			} else if ( _b=="Geneticist" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "geneticswhite_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "white" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_gen_open" ), 3 );
			} else if ( _b=="Virologist" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "virologywhite_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "white" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_vir_open" ), 3 );
			} else if ( _b=="Captain" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "captain_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
			} else if ( _b=="Head of Security" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "hosred_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "jackboots" ), 6 );
			} else if ( _b=="Warden" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "warden_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "jackboots" ), 6 );
			} else if ( _b=="Detective" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "detective_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "detective" ), 3 );
			} else if ( _b=="Security Officer" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "secred_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "jackboots" ), 6 );
			} else if ( _b=="Chief Engineer" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "chief_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "brown" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/belt.dmi", "utility" ), 3 );
			} else if ( _b=="Station Engineer" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "engine_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "orange" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/belt.dmi", "utility" ), 3 );
			} else if ( _b=="Atmospheric Technician" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "atmos_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/belt.dmi", "utility" ), 3 );
			} else if ( _b=="Roboticist" ) {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "robotics_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
				clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_open" ), 3 );
			} else {
				clothes_s = new Icon( "icons/mob/uniform.dmi", "grey_s" );
				clothes_s.Blend( new Icon( "icons/mob/feet.dmi", "black" ), 6 );
			}
			preview_icon.Blend( eyes_s, 3 );

			if ( clothes_s != null ) {
				preview_icon.Blend( clothes_s, 3 );
			}
			Lang13.Delete( eyes_s );
			eyes_s = null;
			Lang13.Delete( clothes_s );
			clothes_s = null;
			return preview_icon;
		}

		// Function from file: datum_pipe_network.dm
		public static bool equalize_gases( ByTable gases = null ) {
			double total_volume = 0;
			double total_thermal_energy = 0;
			double total_heat_capacity = 0;
			double total_oxygen = 0;
			double total_nitrogen = 0;
			double total_toxins = 0;
			double total_carbon_dioxide = 0;
			ByTable total_trace_gases = null;
			GasMixture gas = null;
			int temp_heatcap = 0;
			Gas trace_gas = null;
			dynamic corresponding = null;
			double temperature = 0;
			GasMixture gas2 = null;
			Gas trace_gas2 = null;
			dynamic corresponding2 = null;

			total_volume = 0;
			total_thermal_energy = 0;
			total_heat_capacity = 0;
			total_oxygen = 0;
			total_nitrogen = 0;
			total_toxins = 0;
			total_carbon_dioxide = 0;
			total_trace_gases = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( gases, typeof(GasMixture) )) {
				gas = _b;
				
				total_volume += gas.volume ??0;
				temp_heatcap = gas.heat_capacity();
				total_thermal_energy += ( gas.temperature ??0) * temp_heatcap;
				total_heat_capacity += temp_heatcap;
				total_oxygen += Convert.ToDouble( gas.oxygen );
				total_nitrogen += Convert.ToDouble( gas.nitrogen );
				total_toxins += Convert.ToDouble( gas.toxins );
				total_carbon_dioxide += Convert.ToDouble( gas.carbon_dioxide );

				if ( gas.trace_gases.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( gas.trace_gases, typeof(Gas) )) {
						trace_gas = _a;
						
						corresponding = Lang13.FindIn( trace_gas.type, total_trace_gases );

						if ( !Lang13.Bool( corresponding ) ) {
							corresponding = Lang13.Call( trace_gas.type );
							total_trace_gases.Add( corresponding );
						}
						corresponding.moles += trace_gas.moles ??0;
					}
				}
			}

			if ( total_volume > 0 ) {
				temperature = 0;

				if ( total_heat_capacity > 0 ) {
					temperature = total_thermal_energy / total_heat_capacity;
				}

				foreach (dynamic _d in Lang13.Enumerate( gases, typeof(GasMixture) )) {
					gas2 = _d;
					
					gas2.oxygen = total_oxygen * ( gas2.volume ??0) / total_volume;
					gas2.nitrogen = total_nitrogen * ( gas2.volume ??0) / total_volume;
					gas2.toxins = total_toxins * ( gas2.volume ??0) / total_volume;
					gas2.carbon_dioxide = total_carbon_dioxide * ( gas2.volume ??0) / total_volume;
					gas2.temperature = temperature;

					if ( total_trace_gases.len != 0 ) {
						
						foreach (dynamic _c in Lang13.Enumerate( total_trace_gases, typeof(Gas) )) {
							trace_gas2 = _c;
							
							corresponding2 = Lang13.FindIn( trace_gas2.type, gas2.trace_gases );

							if ( !Lang13.Bool( corresponding2 ) ) {
								corresponding2 = Lang13.Call( trace_gas2.type );
								gas2.trace_gases.Add( corresponding2 );
							}
							corresponding2.moles = ( trace_gas2.moles ??0) * ( gas2.volume ??0) / total_volume;
						}
					}
					gas2.update_values();
				}
			}
			return true;
		}

		// Function from file: datumpool.dm
		public static Game_Data getFromPool( dynamic type = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { type } ).Extend(_);

			dynamic B = null;
			Game_Data O = null;
			Game_Data AM = null;

			B = _args - _args[1];

			if ( Lang13.Length( GlobalVars.masterdatumPool[_args[1]] ) <= 0 ) {
				
				if ( GlobalVars.masterdatumPool[_args[1]] == null ) {
					GlobalVars.masterdatumPool[_args[1]] = new ByTable();
				}

				if ( Lang13.Bool( B ) && B.len != 0 ) {
					return B.Apply( _args[1] );
				} else {
					return Lang13.Call( _args[1] );
				}
			}
			O = GlobalVars.masterdatumPool[_args[1]][1];
			GlobalVars.masterdatumPool[_args[1]] -= O;

			if ( !( O != null ) || !( O is Game_Data ) ) {
				O = B.Apply( _args[1] );
			} else {
				
				if ( O is Ent_Dynamic && B.len != 0 ) {
					AM = O;
					((dynamic)AM).loc = B[1];
				}

				if ( Lang13.Bool( B ) && B.len != 0 ) {
					B.Apply( Lang13.BindFunc( O, "New" ) );
				} else {
					((dynamic)O).New();
				}
				O.disposed = null;
			}
			return O;
		}

		// Function from file: datumpool.dm
		public static bool isInTypes( Ent_Static Object = null, string types = null ) {
			Type prototype = null;
			dynamic type = null;

			
			if ( !( Object != null ) ) {
				return false;
			}
			prototype = Object.type;
			Object = null;

			foreach (dynamic _a in Lang13.Enumerate( String13.ParseUrlParams( types ) )) {
				type = _a;
				

				if ( Lang13.Bool( ((dynamic)prototype).IsSubclassOf( Lang13.FindClass( type ) ) ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: datumpool.dm
		public static void returnToPool( dynamic D = null ) {
			
			if ( !Lang13.Bool( D ) ) {
				Task13.Crash( "" + "code/__HELPERS/datumpool.dm" + ":" + 68 + ":Assertion Failed: " + "D" );
			}

			if ( D is Ent_Dynamic && Lang13.Length( GlobalVars.masterdatumPool[D.type] ) > 500 ) {
				GlobalFuncs.qdel( D );
				return;
			}

			if ( GlobalVars.masterdatumPool[D.type] == null ) {
				GlobalVars.masterdatumPool[D.type] = new ByTable();
			}
			((Game_Data)D).Destroy();
			((Game_Data)D).resetVariables();
			D.disposed = true;
			GlobalVars.masterdatumPool[D.type] |= D;
			return;
		}

		// Function from file: designs.dm
		public static Design FindDesign( dynamic part = null, int? material_strict = null ) {
			material_strict = material_strict ?? 0;

			Design D = null;
			bool all_correct = false;
			dynamic matID = null;

			
			if ( part is Type ) {
				return GlobalFuncs.FindTypeDesign( part );
			}

			if ( !( part is Ent_Static ) ) {
				return null;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.design_list, typeof(Design) )) {
				D = _b;
				

				if ( D.build_path == part.type ) {
					
					if ( Lang13.Bool( material_strict ) && ( part is Obj_Machinery && material_strict == 2 || !( part is Obj_Machinery ) && Lang13.Bool( material_strict ) ) && part.materials is ByTable ) {
						all_correct = true;

						foreach (dynamic _a in Lang13.Enumerate( D.materials )) {
							matID = _a;
							

							if ( String13.SubStr( matID, 1, 2 ) == "$" && part.materials.storage[matID] != D.materials[matID] ) {
								all_correct = false;
								break;
							}
						}

						if ( all_correct ) {
							return D;
						}
					} else {
						return D;
					}
				}
			}
			return null;
		}

		// Function from file: designs.dm
		public static Design FindTypeDesign( dynamic part_path = null ) {
			Design D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.design_list, typeof(Design) )) {
				D = _a;
				

				if ( D.build_path == part_path ) {
					return D;
				}
			}
			return null;
		}

		// Function from file: designs.dm
		public static Design getScanDesign( dynamic O = null ) {
			Design D = null;

			
			if ( Lang13.Bool( O.materials ) ) {
				D = GlobalFuncs.FindDesign( O, 1 );
			} else {
				D = GlobalFuncs.FindDesign( O );
			}

			if ( D != null ) {
				return D;
			} else {
				return new Design_MechanicDesign( O );
			}
		}

		// Function from file: detective_scanner.dm
		public static string get_timestamp(  ) {
			return String13.FormatTime( Game13.time + 432000, "hh:mm:ss" );
		}

		// Function from file: disease2.dm
		public static ByTable virus_copylist( ByTable viruses = null ) {
			ByTable res = null;
			dynamic ID = null;
			Disease2_Disease V = null;

			res = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( viruses )) {
				ID = _a;
				
				V = viruses[ID];

				if ( V is Disease2_Disease ) {
					res["" + V.uniqueID] = V.getcopy();
				} else {
					Game13.log.WriteMsg( "## TESTING: " + ( "Got a NULL disease2 in virus_copylist (" + V + " is " + V.type + ")!" ) );
				}
			}
			return res;
		}

		// Function from file: disease2.dm
		public static void virus2_greater_infection(  ) {
			dynamic candidates = null;
			Mob_Living_Carbon_Human G = null;

			candidates = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				G = _a;
				

				if ( G.client != null && G.stat != 2 ) {
					candidates += G;
				}
			}

			if ( !( candidates.len != 0 ) ) {
				return;
			}
			candidates = GlobalFuncs.shuffle( candidates );
			GlobalFuncs.infect_mob_random_greater( candidates[1] );
			return;
		}

		// Function from file: disease2.dm
		public static void virus2_lesser_infection(  ) {
			dynamic candidates = null;
			Mob_Living_Carbon_Human G = null;

			candidates = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				G = _a;
				

				if ( G.client != null && G.stat != 2 ) {
					candidates += G;
				}
			}

			if ( !( candidates.len != 0 ) ) {
				return;
			}
			candidates = GlobalFuncs.shuffle( candidates );
			GlobalFuncs.infect_mob_random_lesser( candidates[1] );
			return;
		}

		// Function from file: disease2.dm
		public static bool virus2_make_custom( Client C = null ) {
			dynamic infectedMob = null;
			Disease2_Disease D = null;
			int? i = null;
			dynamic symptom = null;
			Disease2_Effectholder holder = null;
			dynamic f = null;

			
			if ( !( C.holder != null ) || !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
				return false;
			}

			if ( !Lang13.Bool( C.holder.rights & 32 ) ) {
				return false;
			}
			infectedMob = Interface13.Input( C, "Select person to infect", "Infect Person", null, GlobalVars.player_list, InputType.Any );

			if ( !( infectedMob is Mob_Living_Carbon ) ) {
				return false;
			}
			D = new Disease2_Disease( "custom_disease" );
			i = null;
			i = 1;

			while (( i ??0) <= ( D.max_stage ??0)) {
				symptom = Interface13.Input( C, "Choose a symptom to add (" + ( 5 - ( i ??0) ) + " remaining)", "Choose a Symptom", null, Lang13.GetTypes( typeof(Disease2_Effect) ) - typeof(Disease2_Effect), InputType.Any );
				holder = new Disease2_Effectholder( infectedMob );
				holder.stage = i;
				f = Lang13.Call( symptom );
				holder.effect = f;
				holder.chance = Interface13.Input( C, "Choose chance", "Chance", null, null, InputType.Num );

				if ( Convert.ToDouble( holder.chance ) > 100 || Convert.ToDouble( holder.chance ) < 0 ) {
					return false;
				}
				D.log += "" + f.name + " " + holder.chance + "%<br>";
				D.effects.Add( holder );
				i++;
			}
			GlobalVars.disease2_list.Remove( D.uniqueID );
			D.uniqueID = Rand13.Int( 0, 10000 );
			GlobalVars.disease2_list["" + D.uniqueID] = D;
			D.infectionchance = Interface13.Input( C, "Choose an infection rate percent", "Infection Rate", null, null, InputType.Num );

			if ( Convert.ToDouble( D.infectionchance ) > 100 || Convert.ToDouble( D.infectionchance ) < 0 ) {
				return false;
			}
			D.antigen = ((int)( D.antigen )) | ( ((int)( String13.ParseNumber( Rand13.PickFromTable( GlobalVars.ANTIGENS ) ) ??0 )) );
			D.antigen = ((int)( D.antigen )) | ( ((int)( String13.ParseNumber( Rand13.PickFromTable( GlobalVars.ANTIGENS ) ) ??0 )) );
			D.spreadtype = Interface13.Input( C, "Select spread type", "Spread Type", null, new ByTable(new object [] { "Airborne", "Contact", "Blood" }), InputType.Any );
			infectedMob.virus2["" + D.uniqueID] = D;
			GlobalFuncs.log_admin( "" + infectedMob + " was infected with a virus with uniqueID : " + D.uniqueID + " by " + C.ckey );
			GlobalFuncs.message_admins( "" + infectedMob + " was infected with a virus with uniqueID : " + D.uniqueID + " by " + C.ckey );
			return true;
		}

		// Function from file: dna2_domutcheck.dm
		public static bool domutation( Dna_Gene gene = null, dynamic M = null, dynamic connected = null, bool? flags = null ) {
			flags = flags ?? false;

			int gene_active = 0;
			int gene_prior_status = 0;
			bool changed = false;
			int? tempflag = null;

			
			if ( !( gene != null ) || !( gene is Dna_Gene ) ) {
				return false;
			}
			gene_active = gene.flags & 1;

			if ( !( gene_active != 0 ) ) {
				gene_active = ((Dna)M.dna).GetSEState( gene.block ) ?1:0;
			}
			Interface13.Stat( null, M.active_genes.Contains( gene.type ) );
			gene_prior_status = !( gene_active != 0 ) ?1:0;
			changed = gene_active != gene_prior_status || ( gene.flags & 1 ) != 0;

			if ( changed ) {
				
				if ( gene_active != 0 || ( gene.flags & 1 ) != 0 ) {
					
					if ( !gene.can_activate( M, flags ) ) {
						return false;
					}
					gene.activate( M, connected, flags );

					if ( Lang13.Bool( M ) ) {
						M.active_genes.Or( gene.type );
						M.v_update_icon = true;
					}
				} else {
					tempflag = Lang13.IntNullable( flags );

					if ( M is Mob_Living_Carbon_Human ) {
						Interface13.Stat( null, M.species.default_blocks.Contains( M is Mob_Living_Carbon_Human && Lang13.Bool( M.species ) && Lang13.Bool( gene.block ) ) );
						tempflag |= ( false ? 4 : 0 );
					}
					gene.deactivate( M, connected, tempflag );

					if ( Lang13.Bool( M ) ) {
						
						if ( !( ( ( tempflag ??0) & 4 ) != 0 ) ) {
							M.active_genes.Remove( gene.type );
							M.v_update_icon = true;
						}
					}
				}
			}
			return false;
		}

		// Function from file: dna2_domutcheck.dm
		public static void domutcheck( dynamic M = null, dynamic connected = null, bool? flags = null ) {
			flags = flags ?? false;

			dynamic gene_type = null;
			Dna_Gene gene = null;
			Dna chicken_dna = null;

			
			if ( !Lang13.Bool( M ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.dna_genes )) {
				gene_type = _a;
				
				gene = GlobalVars.dna_genes[gene_type];

				if ( !Lang13.Bool( gene.block ) ) {
					continue;
				}

				if ( M is Mob_Living_SimpleAnimal_Chicken && Lang13.Bool( M.dna ) ) {
					chicken_dna = M.dna;

					if ( Convert.ToDouble( chicken_dna.SE[54] ) < 800 ) {
						chicken_dna.chicken2vox( M, chicken_dna );
					}
				}
				GlobalFuncs.domutation( gene, M, connected, flags );
			}
			return;
		}

		// Function from file: dna2_domutcheck.dm
		public static void genemutcheck( dynamic M = null, dynamic block = null, Obj_Machinery_DnaScannernew connected = null, bool? flags = null ) {
			flags = flags ?? false;

			Dna_Gene gene = null;

			
			if ( !Lang13.Bool( M ) ) {
				return;
			}

			if ( Convert.ToDouble( block ) < 0 ) {
				return;
			}
			gene = GlobalVars.assigned_gene_blocks[block];
			GlobalFuncs.domutation( gene, M, connected, flags );
			return;
		}

		// Function from file: dna2_helpers.dm
		public static string add_zero2( string t = null, int u = 0 ) {
			string temp1 = null;

			
			while (Lang13.Length( t ) < u) {
				t = "0" + t;
			}
			temp1 = t;

			if ( Lang13.Length( t ) > u ) {
				temp1 = String13.SubStr( t, 2, u + 1 );
			}
			return temp1;
		}

		// Function from file: dna2_helpers.dm
		public static ByTable GetDNABounds( dynamic block = null ) {
			dynamic BOUNDS = null;

			BOUNDS = GlobalVars.dna_activity_bounds[block];

			if ( !( BOUNDS is ByTable ) ) {
				return new ByTable(new object [] { 1, 2049, 2050, 4095 });
			}
			return BOUNDS;
		}

		// Function from file: dna2_helpers.dm
		public static string miniscramble( string input = null, int rs = 0, int rd = 0 ) {
			string output = null;

			output = null;

			if ( input == "C" || input == "D" || input == "E" || input == "F" ) {
				output = Rand13.PickWeightedDynamic(new object [] { rs * 10, "4", rs * 10, "5", rs * 10, "6", rs * 10, "7", rs * 5 + rd, "0", rs * 5 + rd, "1", rs * 10 - rd, "2", }, "3" );
			}

			if ( input == "8" || input == "9" || input == "A" || input == "B" ) {
				output = Rand13.PickWeightedDynamic(new object [] { rs * 10, "4", rs * 10, "5", rs * 10, "A", rs * 10, "B", rs * 5 + rd, "C", rs * 5 + rd, "D", rs * 5 + rd, "2", }, "3" );
			}

			if ( input == "4" || input == "5" || input == "6" || input == "7" ) {
				output = Rand13.PickWeightedDynamic(new object [] { rs * 10, "4", rs * 10, "5", rs * 10, "A", rs * 10, "B", rs * 5 + rd, "C", rs * 5 + rd, "D", rs * 5 + rd, "2", }, "3" );
			}

			if ( input == "0" || input == "1" || input == "2" || input == "3" ) {
				output = Rand13.PickWeightedDynamic(new object [] { rs * 10, "8", rs * 10, "9", rs * 10, "A", rs * 10, "B", rs * 10 - rd, "C", rs * 10 - rd, "D", rs * 5 + rd, "E", }, "F" );
			}

			if ( !Lang13.Bool( output ) ) {
				output = "5";
			}
			return output;
		}

		// Function from file: dna2_helpers.dm
		public static string miniscrambletarget( string input = null, int rs = 0, int rd = 0 ) {
			string output = null;

			output = null;

			switch ((string)( input )) {
				case "0":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 + rd, "0", rs * 10 + rd, "1", rs * 10, "2", }, "3" );
					break;
				case "1":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 + rd, "0", rs * 10 + rd, "1", rs * 10 + rd, "2", rs * 10, "3", }, "4" );
					break;
				case "2":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10, "0", rs * 10 + rd, "1", rs * 10 + rd, "2", rs * 10 + rd, "3", rs * 10, "4", }, "5" );
					break;
				case "3":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "0", rs * 10, "1", rs * 10 + rd, "2", rs * 10 + rd, "3", rs * 10 + rd, "4", rs * 10, "5", }, "6" );
					break;
				case "4":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "1", rs * 10, "2", rs * 10 + rd, "3", rs * 10 + rd, "4", rs * 10 + rd, "5", rs * 10, "6", }, "7" );
					break;
				case "5":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "2", rs * 10, "3", rs * 10 + rd, "4", rs * 10 + rd, "5", rs * 10 + rd, "6", rs * 10, "7", }, "8" );
					break;
				case "6":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "3", rs * 10, "4", rs * 10 + rd, "5", rs * 10 + rd, "6", rs * 10 + rd, "7", rs * 10, "8", }, "9" );
					break;
				case "7":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "4", rs * 10, "5", rs * 10 + rd, "6", rs * 10 + rd, "7", rs * 10 + rd, "8", rs * 10, "9", }, "A" );
					break;
				case "8":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "5", rs * 10, "6", rs * 10 + rd, "7", rs * 10 + rd, "8", rs * 10 + rd, "9", rs * 10, "A", }, "B" );
					break;
				case "9":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "6", rs * 10, "7", rs * 10 + rd, "8", rs * 10 + rd, "9", rs * 10 + rd, "A", rs * 10, "B", }, "C" );
					break;
				case "10":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "7", rs * 10, "8", rs * 10 + rd, "9", rs * 10 + rd, "A", rs * 10 + rd, "B", rs * 10, "C", }, "D" );
					break;
				case "11":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "8", rs * 10, "9", rs * 10 + rd, "A", rs * 10 + rd, "B", rs * 10 + rd, "C", rs * 10, "D", }, "E" );
					break;
				case "12":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "9", rs * 10, "A", rs * 10 + rd, "B", rs * 10 + rd, "C", rs * 10 + rd, "D", rs * 10, "E", }, "F" );
					break;
				case "13":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "A", rs * 10, "B", rs * 10 + rd, "C", rs * 10 + rd, "D", rs * 10 + rd, "E", }, "F" );
					break;
				case "14":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "B", rs * 10, "C", rs * 10 + rd, "D", rs * 10 + rd, "E", }, "F" );
					break;
				case "15":
					output = Rand13.PickWeightedDynamic(new object [] { rs * 10 - rd, "C", rs * 10, "D", rs * 10 + rd, "E", }, "F" );
					break;
			}

			if ( !Lang13.Bool( input ) || !Lang13.Bool( output ) ) {
				output = "8";
			}
			return output;
		}

		// Function from file: dna2_helpers.dm
		public static bool probinj( int pr = 0, int inj = 0 ) {
			return Rand13.PercentChance( pr + inj * pr );
		}

		// Function from file: dna2_helpers.dm
		public static ByTable query_genes( int? notflags = null, bool? flags = null, int? genetype = null ) {
			notflags = notflags ?? 0;
			flags = flags ?? false;
			genetype = genetype ?? -1;

			ByTable _default = null;

			dynamic gene_type = null;
			dynamic gene = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.dna_genes )) {
				gene_type = _a;
				
				gene = GlobalVars.dna_genes[gene_type];

				if ( !Lang13.Bool( gene.block ) ) {
					continue;
				}

				if ( ( genetype ??0) > -1 && Lang13.IntNullable( gene.genetype ) != genetype ) {
					continue;
				}

				if ( flags != false && !Lang13.Bool( gene.flags & flags ) ) {
					continue;
				}

				if ( notflags != 0 && Lang13.Bool( gene.flags & notflags ) ) {
					continue;
				}
				_default.Add( gene.block );
			}
			return _default;
		}

		// Function from file: dna2_helpers.dm
		public static void randmutb( dynamic M = null ) {
			dynamic block = null;

			
			if ( !Lang13.Bool( M ) ) {
				return;
			}
			((Dna)M.dna).check_integrity();
			block = Rand13.PickFromTable( GlobalVars.bad_blocks );
			((Dna)M.dna).SetSEState( block, true );
			return;
		}

		// Function from file: dna2_helpers.dm
		public static void randmutg( dynamic M = null ) {
			dynamic block = null;

			
			if ( !Lang13.Bool( M ) ) {
				return;
			}
			((Dna)M.dna).check_integrity();
			block = Rand13.PickFromTable( GlobalVars.good_blocks );
			((Dna)M.dna).SetSEState( block, true );
			return;
		}

		// Function from file: dna2_helpers.dm
		public static void randmuti( dynamic M = null ) {
			
			if ( !Lang13.Bool( M ) ) {
				return;
			}
			((Dna)M.dna).check_integrity();
			((Dna)M.dna).SetUIValue( Rand13.Int( 1, 13 ), Rand13.Int( 1, 4095 ) );
			return;
		}

		// Function from file: dna2_helpers.dm
		public static void scramble( bool? UI = null, dynamic M = null, double prob = 0 ) {
			double? i = null;
			int? i2 = null;

			
			if ( !Lang13.Bool( M ) ) {
				return;
			}
			((Dna)M.dna).check_integrity();

			if ( UI == true ) {
				i = null;
				i = 1;

				while (( i ??0) <= 12) {
					
					if ( Rand13.PercentChance( ((int)( prob )) ) ) {
						((Dna)M.dna).SetUIValue( i, Rand13.Int( 1, 4095 ), true );
					}
					i++;
				}
				((Dna)M.dna).UpdateUI();
				((Mob)M).UpdateAppearance();
			} else {
				i2 = null;
				i2 = 1;

				while (( i2 ??0) <= 53) {
					
					if ( Rand13.PercentChance( ((int)( prob )) ) ) {
						((Dna)M.dna).SetSEValue( i2, Rand13.Int( 1, 4095 ), true );
					}
					i2++;
				}
				((Dna)M.dna).UpdateSE();
				GlobalFuncs.domutcheck( M, null );
			}
			return;
		}

		// Function from file: dna2.dm
		public static dynamic buildHairLists(  ) {
			dynamic _default = null;

			dynamic paths = null;
			dynamic H = null;

			paths = Lang13.GetTypes( typeof(SpriteAccessory_Hair) ) - typeof(SpriteAccessory_Hair);

			foreach (dynamic _b in Lang13.Enumerate( paths )) {
				_default = _b;
				
				H = Lang13.Call( _default );
				GlobalVars.hair_styles_list[H.name] = H;

				dynamic _a = H.gender; // Was a switch-case, sorry for the mess.
				if ( _a=="male" ) {
					GlobalVars.hair_styles_male_list.Add( H.name );
				} else if ( _a=="female" ) {
					GlobalVars.hair_styles_female_list.Add( H.name );
				} else {
					GlobalVars.hair_styles_male_list.Add( H.name );
					GlobalVars.hair_styles_female_list.Add( H.name );
				}
			}
			paths = Lang13.GetTypes( typeof(SpriteAccessory_FacialHair) ) - typeof(SpriteAccessory_FacialHair);

			foreach (dynamic _d in Lang13.Enumerate( paths )) {
				_default = _d;
				
				H = Lang13.Call( _default );
				GlobalVars.facial_hair_styles_list[H.name] = H;

				dynamic _c = H.gender; // Was a switch-case, sorry for the mess.
				if ( _c=="male" ) {
					GlobalVars.facial_hair_styles_male_list.Add( H.name );
				} else if ( _c=="female" ) {
					GlobalVars.facial_hair_styles_female_list.Add( H.name );
				} else {
					GlobalVars.facial_hair_styles_male_list.Add( H.name );
					GlobalVars.facial_hair_styles_female_list.Add( H.name );
				}
			}
			return _default;
		}

		// Function from file: dna2.dm
		public static dynamic EncodeDNABlock( dynamic value = null ) {
			
			if ( !Lang13.Bool( Lang13.IsNumber( value ) ) ) {
				Game13.log.WriteMsg( "##WARNING: " + ( "Expected a number, got " + value ) + " in " + "code/game/dna/dna2.dm" + " at line " + 370 + " src: " + Task13.Source + " usr: " + Task13.User + "." );
				return 0;
			}
			return GlobalFuncs.add_zero2( GlobalFuncs.num2hex( value, 1 ), 3 );
		}

		// Function from file: docking_port.dm
		public static bool select_port_from_list( Mob user = null, string message = null, string title = null, ByTable list = null ) {
			message = message ?? "Select a docking port";
			title = title ?? "Admin abuse";

			ByTable choices = null;
			Obj_Structure_DockingPort_Destination D = null;
			string name = null;
			dynamic choice = null;
			dynamic D2 = null;

			
			if ( !( list != null ) || !( user != null ) ) {
				return false;
			}
			choices = new ByTable(new object [] { "Cancel" });

			foreach (dynamic _a in Lang13.Enumerate( list, typeof(Obj_Structure_DockingPort_Destination) )) {
				D = _a;
				
				name = "" + D.name + " (" + D.areaname + ")";
				choices.Add( name );
				choices[name] = D;
			}
			choice = Interface13.Input( user, message, title, null, choices, InputType.Any );
			D2 = choices[choice];

			if ( D2 is Obj_Structure_DockingPort_Destination ) {
				return Lang13.Bool( D2 );
			}
			return false;
		}

		// Function from file: Economy.dm
		public static void setup_economy(  ) {
			FeedChannel newChannel = null;
			dynamic loc_type = null;
			dynamic D = null;

			
			if ( GlobalVars.setup_economy ) {
				return;
			}
			newChannel = new FeedChannel();
			newChannel.channel_name = "Tau Ceti Daily";
			newChannel.author = "CentComm Minister of Information";
			newChannel.locked = true;
			newChannel.is_admin_channel = true;
			GlobalVars.news_network.network_channels.Add( newChannel );
			newChannel = new FeedChannel();
			newChannel.channel_name = "The Gibson Gazette";
			newChannel.author = "Editor Mike Hammers";
			newChannel.locked = true;
			newChannel.is_admin_channel = true;
			GlobalVars.news_network.network_channels.Add( newChannel );

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(TradeDestination) ) - typeof(TradeDestination) )) {
				loc_type = _a;
				
				D = Lang13.Call( loc_type );
				GlobalVars.weighted_randomevent_locations[D] = D.viable_random_events.len;
				GlobalVars.weighted_mundaneevent_locations[D] = D.viable_mundane_events.len;
			}
			GlobalVars.setup_economy = true;
			return;
		}

		// Function from file: effect.dm
		public static double GetAnomalySusceptibility( dynamic H = null ) {
			double _protected = 0;

			
			if ( !Lang13.Bool( H ) || !( H is Mob_Living_Carbon_Human ) ) {
				return 1;
			}
			_protected = 0;

			if ( H.wear_suit is Obj_Item_Clothing_Suit_BioSuit_Anomaly ) {
				_protected += 0.6;
			} else if ( H.wear_suit is Obj_Item_Clothing_Suit_Space_Anomaly ) {
				_protected += 0.5;
			}

			if ( H.head is Obj_Item_Clothing_Head_BioHood_Anomaly ) {
				_protected += 0.3;
			} else if ( H.head is Obj_Item_Clothing_Head_Helmet_Space_Anomaly ) {
				_protected += 0.2;
			}

			if ( H.gloves is Obj_Item_Clothing_Gloves_Latex ) {
				_protected += 0.1;
			}

			if ( H.glasses is Obj_Item_Clothing_Glasses_Science ) {
				_protected += 0.1;
			}
			return 1 - _protected;
		}

		// Function from file: endgame.dm
		public static void SetUniversalState( Type newstate = null, bool? on_exit = null, bool? on_enter = null ) {
			on_exit = on_exit ?? true;
			on_enter = on_enter ?? true;

			
			if ( on_exit == true ) {
				((UniversalState)GlobalVars.universe).OnExit();
			}
			GlobalVars.universe = Lang13.Call( newstate );

			if ( on_enter == true ) {
				((UniversalState)GlobalVars.universe).OnEnter();
			}
			return;
		}

		// Function from file: ethereal_jaunt.dm
		public static void ethereal_jaunt( dynamic target = null, int? duration = null, string enteranim = null, string exitanim = null, bool? mist = null ) {
			enteranim = enteranim ?? "liquify";
			exitanim = exitanim ?? "reappear";
			mist = mist ?? true;

			dynamic mobloc = null;
			int previncorp = 0;
			Effect_Effect_System_SteamSpread steam = null;
			bool old_density = false;
			Obj_Screen_Movable_SpellMaster SM = null;
			Effect_Effect_System_SteamSpread steam2 = null;
			Obj_Screen_Movable_SpellMaster SM2 = null;

			mobloc = GlobalFuncs.get_turf( target );
			previncorp = target.incorporeal_move;

			if ( target.incorporeal_move == 3 ) {
				return;
			}
			((Ent_Dynamic)target).unlock_from();
			GlobalFuncs.anim( mobloc, target, "icons/mob/mob.dmi", null, enteranim, null, Lang13.IntNullable( target.dir ), "water" );

			if ( mist == true ) {
				((Mob_Living)target).ExtinguishMob();
				steam = new Effect_Effect_System_SteamSpread();
				steam.set_up( 10, 0, mobloc );
				steam.start();
			}
			target.incorporeal_move = 3;
			target.invisibility = 100;
			target.flags |= 128;
			old_density = target.density;
			target.density = false;
			target.candrop = false;
			target.alphas["etheral_jaunt"] = 125;
			((Mob)target).handle_alpha();

			foreach (dynamic _a in Lang13.Enumerate( target.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
				SM = _a;
				
				SM.silence_spells( ( duration ??0) + 25 );
			}
			((Mob)target).delayNextAttack( ( duration ??0) + 25 );
			target.click_delayer.setDelay( ( duration ??0) + 25 );
			Task13.Sleep( duration ??0 );
			mobloc = GlobalFuncs.get_turf( target );

			if ( mist == true ) {
				steam2 = new Effect_Effect_System_SteamSpread();
				steam2.set_up( 10, 0, mobloc );
				steam2.start();
			}
			target.delayNextMove( 25 );
			target.dir = GlobalVars.SOUTH;
			Task13.Sleep( 20 );
			GlobalFuncs.anim( mobloc, target, "icons/mob/mob.dmi", null, exitanim, null, Lang13.IntNullable( target.dir ), "water" );
			Task13.Sleep( 5 );
			((Ent_Dynamic)target).forceMove( mobloc );
			target.invisibility = 0;

			foreach (dynamic _b in Lang13.Enumerate( target.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
				SM2 = _b;
				
				SM2.silence_spells( 0 );
			}
			target.flags &= 65407;
			target.density = old_density;
			target.candrop = true;
			target.incorporeal_move = previncorp;
			target.alphas.Remove( "etheral_jaunt" );
			((Mob)target).handle_alpha();
			return;
		}

		// Function from file: Evaluation.dm
		public static bool isobject( dynamic x = null ) {
			return x is Game_Data || x is ByTable || Lang13.Bool( ((dynamic)"SaveFile").IsInstanceOfType( x ) ) || Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( x ) ) || x == typeof(Game13);
		}

		// Function from file: event_dynamic.dm
		public static ByTable number_active_with_role( dynamic role = null ) {
			ByTable active_with_role = null;
			dynamic M = null;

			active_with_role = new ByTable();
			active_with_role["Engineer"] = 0;
			active_with_role["Medical"] = 0;
			active_with_role["Security"] = 0;
			active_with_role["Scientist"] = 0;
			active_with_role["AI"] = 0;
			active_with_role["Cyborg"] = 0;
			active_with_role["Janitor"] = 0;
			active_with_role["Botanist"] = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( !Lang13.Bool( M.mind ) || !Lang13.Bool( M.client ) || M.client.inactivity > 6000 ) {
					continue;
				}

				if ( M is Mob_Living_Silicon_Robot && M.module != null && M.module.name == "engineering robot module" ) {
					active_with_role["Engineer"]++;
				}
				Interface13.Stat( null, GlobalVars.engineering_positions.Contains( M.mind.assigned_role ) );

				if ( M is Mob_Living_Silicon_Robot && M.module != null && M.module.name == "engineering robot module" ) {
					active_with_role["Engineer"]++;
				}

				if ( M is Mob_Living_Silicon_Robot && M.module != null && M.module.name == "medical robot module" ) {
					active_with_role["Medical"]++;
				}
				Interface13.Stat( null, GlobalVars.medical_positions.Contains( M.mind.assigned_role ) );

				if ( M is Mob_Living_Silicon_Robot && M.module != null && M.module.name == "medical robot module" ) {
					active_with_role["Medical"]++;
				}

				if ( M is Mob_Living_Silicon_Robot && M.module != null && M.module.name == "security robot module" ) {
					active_with_role["Security"]++;
				}
				Interface13.Stat( null, GlobalVars.security_positions.Contains( M.mind.assigned_role ) );

				if ( M is Mob_Living_Silicon_Robot && M.module != null && M.module.name == "security robot module" ) {
					active_with_role["Security"]++;
				}
				Interface13.Stat( null, GlobalVars.science_positions.Contains( M.mind.assigned_role ) );

				if ( M is Mob_Living_Silicon_Robot && M.module != null && M.module.name == "security robot module" ) {
					active_with_role["Scientist"]++;
				}

				if ( M.mind.assigned_role == "AI" ) {
					active_with_role["AI"]++;
				}

				if ( M.mind.assigned_role == "Cyborg" ) {
					active_with_role["Cyborg"]++;
				}

				if ( M.mind.assigned_role == "Janitor" ) {
					active_with_role["Janitor"]++;
				}

				if ( M.mind.assigned_role == "Botanist" ) {
					active_with_role["Botanist"]++;
				}
			}
			return active_with_role;
		}

		// Function from file: event_dynamic.dm
		public static bool spawn_dynamic_event(  ) {
			double minutes_passed = 0;
			double roundstart_delay = 0;
			ByTable active_with_role = null;
			ByTable possibleEvents = null;
			dynamic event_type = null;
			double time_passed = 0;
			int full_recharge_after = 0;
			int weight_modifier = 0;
			dynamic picked_event = null;
			string debug_message = null;
			dynamic V = null;
			dynamic V2 = null;

			
			if ( !GlobalVars.config.allow_random_events || GlobalVars.map != null && GlobalVars.map.dorf ) {
				return false;
			}
			minutes_passed = Game13.time / 600;
			roundstart_delay = 50;

			if ( minutes_passed < roundstart_delay ) {
				GlobalFuncs.message_admins( "Too early to trigger random event, aborting." );
				return false;
			}

			if ( GlobalVars.universe.name != "Normal" ) {
				GlobalFuncs.message_admins( "Universe isn't normal, aborting random event spawn." );
				return false;
			}
			active_with_role = GlobalFuncs.number_active_with_role();
			possibleEvents = new ByTable();
			possibleEvents[typeof(Event_PdaSpam)] = 50;
			possibleEvents[typeof(Event_MoneyLotto)] = 20;

			if ( GlobalVars.account_hack_attempted ) {
				possibleEvents[typeof(Event_MoneyHacker)] = 30;
			}
			possibleEvents[typeof(Event_CarpMigration)] = 40;
			possibleEvents[typeof(Event_BrandIntelligence)] = 30;
			possibleEvents[typeof(Event_RogueDrone)] = 25;
			possibleEvents[typeof(Event_Infestation)] = 50;
			possibleEvents[typeof(Event_CommunicationsBlackout)] = 25;

			if ( Convert.ToDouble( active_with_role["AI"] ) > 0 || Convert.ToDouble( active_with_role["Cyborg"] ) > 0 ) {
				possibleEvents[typeof(Event_Ionstorm)] = 30;
			}
			possibleEvents[typeof(Event_GridCheck)] = 20;
			possibleEvents[typeof(Event_ElectricalStorm)] = 10;
			possibleEvents[typeof(Event_Wallrot)] = 30;

			if ( !GlobalVars.spacevines_spawned ) {
				possibleEvents[typeof(Event_Spacevine)] = 15;
			}

			if ( minutes_passed >= 30 && Convert.ToDouble( active_with_role["Engineer"] ) > 1 ) {
				possibleEvents[typeof(Event_MeteorWave)] = 15;
				possibleEvents[typeof(Event_MeteorShower)] = 40;
				possibleEvents[typeof(Event_Blob)] = 10;
				possibleEvents[typeof(Event_ImmovableRod)] = 15;
			}
			possibleEvents[typeof(Event_RadiationStorm)] = 50;

			if ( Convert.ToDouble( active_with_role["Medical"] ) > 1 ) {
				possibleEvents[typeof(Event_ViralInfection)] = 30;
				possibleEvents[typeof(Event_SpontaneousAppendicitis)] = 50;
				possibleEvents[typeof(Event_ViralOutbreak)] = 20;
				possibleEvents[typeof(Event_OrganFailure)] = 30;
			}
			possibleEvents[typeof(Event_PrisonBreak)] = 25;

			if ( Convert.ToDouble( active_with_role["Security"] ) > 1 ) {
				
				if ( !GlobalVars.sent_spiders_to_station ) {
					possibleEvents[typeof(Event_SpiderInfestation)] = 15;
				}

				if ( GlobalVars.aliens_allowed && !GlobalVars.sent_aliens_to_station ) {
					possibleEvents[typeof(Event_AlienInfestation)] = 10;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.event_last_fired )) {
				event_type = _a;
				

				if ( Lang13.Bool( possibleEvents[event_type] ) ) {
					time_passed = Game13.time - Convert.ToDouble( GlobalVars.event_last_fired[event_type] );
					full_recharge_after = 36000;
					weight_modifier = Num13.MaxInt( 0, ((int)( ( full_recharge_after - time_passed ) / 300 )) );
					possibleEvents[event_type] = Num13.MaxInt( Convert.ToInt32( possibleEvents[event_type] - weight_modifier ), 0 );
				}
			}
			picked_event = GlobalFuncs.pickweight( possibleEvents );
			GlobalVars.event_last_fired[picked_event] = Game13.time;
			debug_message = "Firing random event. ";

			foreach (dynamic _b in Lang13.Enumerate( active_with_role )) {
				V = _b;
				
				debug_message += "#" + V + ":" + active_with_role[V] + " ";
			}
			debug_message += "||| ";

			foreach (dynamic _c in Lang13.Enumerate( possibleEvents )) {
				V2 = _c;
				
				debug_message += "" + V2 + ":" + possibleEvents[V2];
			}
			debug_message += "|||Picked:" + picked_event;
			GlobalFuncs.log_debug( debug_message );

			if ( !Lang13.Bool( picked_event ) ) {
				return false;
			}
			Lang13.Call( picked_event );
			GlobalVars.score["eventsendured"]++;
			GlobalFuncs.message_admins( "" + picked_event + " firing. Time to have fun." );
			return true;
		}

		// Function from file: event_manager.dm
		public static void checkEvent(  ) {
			double playercount_modifier = 0;
			double roundlength_modifier = 0;
			double next_event_delay = 0;

			
			if ( !Lang13.Bool( GlobalVars.scheduledEvent ) ) {
				playercount_modifier = 1;

				dynamic _a = GlobalVars.player_list.len; // Was a switch-case, sorry for the mess.
				if ( 0<=_a&&_a<=10 ) {
					playercount_modifier = 1.25;
				} else if ( 11<=_a&&_a<=20 ) {
					playercount_modifier = 1.41;
				} else if ( 21<=_a&&_a<=30 ) {
					playercount_modifier = 1.41;
				} else if ( 31<=_a&&_a<=40 ) {
					playercount_modifier = 1;
				} else if ( 41<=_a&&_a<=50 ) {
					playercount_modifier = 0.41;
				} else if ( 51<=_a&&_a<=60 ) {
					playercount_modifier = 081;
				} else if ( 61<=_a&&_a<=70 ) {
					playercount_modifier = 0.85;
				} else if ( 71<=_a&&_a<=80 ) {
					playercount_modifier = 0.8;
				} else if ( 81<=_a&&_a<=Double.PositiveInfinity ) {
					playercount_modifier = 0.75;
				}
				roundlength_modifier = 1;

				dynamic _b = Game13.time; // Was a switch-case, sorry for the mess.
				if ( 0<=_b&&_b<=18000 ) {
					roundlength_modifier = 1;
				} else if ( 18000<=_b&&_b<=36000 ) {
					roundlength_modifier = 0.41;
				} else if ( 36000<=_b&&_b<=54000 ) {
					roundlength_modifier = 081;
				} else if ( 54000<=_b&&_b<=Double.PositiveInfinity ) {
					roundlength_modifier = 0.85;
				}
				next_event_delay = Rand13.Int( GlobalVars.eventTimeLower, GlobalVars.eventTimeUpper ) * playercount_modifier * roundlength_modifier;
				GlobalVars.scheduledEvent = Game13.timeofday + next_event_delay;
				GlobalFuncs.message_admins( "Random event call. Next event call in " + next_event_delay / 600 + " minutes." );
			} else if ( Game13.timeofday > ( GlobalVars.scheduledEvent ??0) ) {
				GlobalFuncs.spawn_dynamic_event();
				GlobalVars.scheduledEvent = null;
				GlobalFuncs.checkEvent();
			}
			return;
		}

		// Function from file: events.dm
		public static void alien_infestation( int? spawncount = null ) {
			spawncount = spawncount ?? 1;

			ByTable vents = null;
			Obj_Machinery_Atmospherics_Unary_VentPump temp_vent = null;
			ByTable candidates = null;
			dynamic vent = null;
			dynamic candidate = null;
			Mob_Living_Carbon_Alien_Larva new_xeno = null;
			dynamic M = null;

			vents = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary_VentPump) )) {
				temp_vent = _a;
				

				if ( temp_vent.loc.z == 1 && !temp_vent.welded && temp_vent.network != null && temp_vent.canSpawnMice ) {
					
					if ( ((dynamic)temp_vent.network).normal_members.len > 50 ) {
						vents.Add( temp_vent );
					}
				}
			}
			candidates = GlobalFuncs.get_active_candidates( "alien", true, 1 );

			if ( Rand13.PercentChance( 40 ) ) {
				spawncount++;
			}

			while (( spawncount ??0) >= 1 && vents.len != 0 && candidates.len != 0) {
				vent = Rand13.PickFromTable( vents );
				candidate = Rand13.PickFromTable( candidates );
				new_xeno = new Mob_Living_Carbon_Alien_Larva( vent.loc );
				new_xeno.key = candidate;
				candidates.Remove( candidate );
				vents.Remove( vent );
				spawncount--;
			}
			Task13.Schedule( Rand13.Int( 5000, 6000 ), (Task13.Closure)(() => {
				GlobalFuncs.command_alert( "Unidentified lifesigns detected coming aboard " + GlobalFuncs.station_name() + ". Secure any exterior access, including ducting and ventilation.", "Lifesign Alert" );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _b;
					

					if ( Lang13.Bool( M.client ) ) {
						M.WriteMsg( new Sound( "sound/AI/aliens.ogg" ) );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: events.dm
		public static void lightsout( bool? isEvent = null, int? lightsoutAmount = null, int? lightsoutRange = null ) {
			isEvent = isEvent ?? false;
			lightsoutAmount = lightsoutAmount ?? 1;
			lightsoutRange = lightsoutRange ?? 25;

			ByTable epicentreList = null;
			int? i = null;
			ByTable possibleEpicentres = null;
			Obj_Effect_Landmark newEpicentre = null;
			Obj_Effect_Landmark epicentre = null;
			Obj_Machinery_Power_Apc apc = null;
			Obj_Machinery_Power_Apc apc2 = null;

			
			if ( isEvent == true ) {
				GlobalFuncs.command_alert( "An Electrical storm has been detected in your area, please repair potential electronic overloads.", "Electrical Storm Alert" );
			}

			if ( Lang13.Bool( lightsoutAmount ) ) {
				epicentreList = new ByTable();
				i = null;
				i = 1;

				while (( i ??0) <= ( lightsoutAmount ??0)) {
					possibleEpicentres = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
						newEpicentre = _a;
						

						if ( newEpicentre.name == "lightsout" && !false ) {
							possibleEpicentres.Add( newEpicentre );
						}
					}

					if ( possibleEpicentres.len != 0 ) {
						epicentreList.Add( Rand13.PickFromTable( possibleEpicentres ) );
					} else {
						break;
					}
					i++;
				}

				if ( !( epicentreList.len != 0 ) ) {
					return;
				}

				foreach (dynamic _c in Lang13.Enumerate( epicentreList, typeof(Obj_Effect_Landmark) )) {
					epicentre = _c;
					

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( lightsoutRange, epicentre ), typeof(Obj_Machinery_Power_Apc) )) {
						apc = _b;
						
						apc.overload_lighting();
					}
				}
			} else {
				
				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Apc) )) {
					apc2 = _d;
					
					apc2.overload_lighting();
				}
			}
			return;
		}

		// Function from file: events.dm
		public static void prison_break(  ) {
			ByTable theareas = null;
			dynamic A = null;
			dynamic A2 = null;
			Obj_Machinery_Light L = null;
			dynamic A3 = null;
			Obj_Machinery_Power_Apc temp_apc = null;
			Obj_Structure_Closet_SecureCloset_Brig temp_closet = null;
			Obj_Machinery_Door_Airlock_Security temp_airlock = null;
			Obj_Machinery_Door_Airlock_GlassSecurity temp_glassairlock = null;
			Obj_Machinery_DoorTimer temp_timer = null;

			theareas = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
				A = _a;
				

				if ( A is Zone_Security_Prison || A is Zone_Security_Brig ) {
					theareas.Add( A );
				}
			}

			if ( theareas != null && theareas.len > 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( theareas )) {
					A2 = _c;
					

					foreach (dynamic _b in Lang13.Enumerate( A2, typeof(Obj_Machinery_Light) )) {
						L = _b;
						
						L.flicker( 10 );
					}
				}
				Task13.Sleep( 100 );

				foreach (dynamic _i in Lang13.Enumerate( theareas )) {
					A3 = _i;
					

					foreach (dynamic _d in Lang13.Enumerate( A3, typeof(Obj_Machinery_Power_Apc) )) {
						temp_apc = _d;
						
						temp_apc.overload_lighting();
					}

					foreach (dynamic _e in Lang13.Enumerate( A3, typeof(Obj_Structure_Closet_SecureCloset_Brig) )) {
						temp_closet = _e;
						
						temp_closet.locked = false;
						temp_closet.icon_state = temp_closet.icon_closed;
					}

					foreach (dynamic _f in Lang13.Enumerate( A3, typeof(Obj_Machinery_Door_Airlock_Security) )) {
						temp_airlock = _f;
						
						Task13.Schedule( 0, (Task13.Closure)(() => {
							temp_airlock.prison_open();
							return;
						}));
					}

					foreach (dynamic _g in Lang13.Enumerate( A3, typeof(Obj_Machinery_Door_Airlock_GlassSecurity) )) {
						temp_glassairlock = _g;
						
						Task13.Schedule( 0, (Task13.Closure)(() => {
							temp_glassairlock.prison_open();
							return;
						}));
					}

					foreach (dynamic _h in Lang13.Enumerate( A3, typeof(Obj_Machinery_DoorTimer) )) {
						temp_timer = _h;
						
						temp_timer.releasetime = 1;
					}
				}
				Task13.Sleep( 150 );
				GlobalFuncs.command_alert( "Gr3y.T1d3 virus detected in " + GlobalFuncs.station_name() + " imprisonment subroutines. Recommend station AI involvement.", "Security Alert" );
			} else {
				Game13.log.WriteMsg( "ERROR: Could not initate grey-tide. Unable find prison or brig area." );
			}
			return;
		}

		// Function from file: examine.dm
		public static bool hasHUD( dynamic M = null, string hudtype = null ) {
			dynamic H = null;
			dynamic R = null;
			dynamic P = null;

			
			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				switch ((string)( hudtype )) {
					case "security":
						return H.glasses is Obj_Item_Clothing_Glasses_Hud_Security || H.glasses is Obj_Item_Clothing_Glasses_Sunglasses_Sechud;
						break;
					case "medical":
						return H.glasses is Obj_Item_Clothing_Glasses_Hud_Health;
						break;
					default:
						return false;
						break;
				}
			} else if ( M is Mob_Living_Silicon_Robot ) {
				R = M;

				switch ((string)( hudtype )) {
					case "security":
						return Lang13.Bool( R.sensor_mode ) == true;
						break;
					case "medical":
						return Convert.ToInt32( R.sensor_mode ) == 2;
						break;
					default:
						return false;
						break;
				}
			} else if ( M is Mob_Living_Silicon_Pai ) {
				P = M;

				switch ((string)( hudtype )) {
					case "security":
						return P.secHUD;
						break;
					case "medical":
						return Lang13.Bool( P.medHUD );
						break;
				}
			} else {
				return false;
			}
			return false;
		}

		// Function from file: explosion_recursive.dm
		public static void explosion_rec( dynamic epicenter = null, dynamic power = null ) {
			int loopbreak = 0;
			ExplosionTurf ETE = null;
			dynamic direction = null;
			Tile T = null;
			ExplosionTurf ET = null;
			double? severity = null;
			int x = 0;
			int y = 0;
			int z = 0;
			Ent_Static A = null;

			loopbreak = 0;

			while (GlobalVars.explosion_in_progress) {
				
				if ( loopbreak >= 15 ) {
					return;
				}
				Task13.Sleep( 10 );
				loopbreak++;
			}

			if ( Convert.ToDouble( power ) <= 0 ) {
				return;
			}
			epicenter = GlobalFuncs.get_turf( epicenter );

			if ( !Lang13.Bool( epicenter ) ) {
				return;
			}
			GlobalFuncs.message_admins( "Explosion with size (" + power + ") in area " + epicenter.loc.name + " (" + epicenter.x + "," + epicenter.y + "," + epicenter.z + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + epicenter.x + ";Y=" + epicenter.y + ";Z=" + epicenter.z + "'>JMP</A>)" );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Explosion with size (" + power + ") in area " + epicenter.loc.name + " " ) ) );
			GlobalFuncs.playsound( epicenter, "sound/effects/explosionfar.ogg", 100, 1, Num13.Round( Convert.ToDouble( power * 2 ), 1 ) );
			GlobalFuncs.playsound( epicenter, "explosion", 100, 1, Num13.Round( Convert.ToDouble( power ), 1 ) );
			GlobalVars.explosion_in_progress = true;
			GlobalVars.explosion_turfs = new ByTable();
			ETE = GlobalFuncs.get_explosion_turf();
			ETE.turf = epicenter;
			ETE.max_power = power;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				
				T = Map13.GetStep( epicenter, Convert.ToInt32( direction ) );
				T.explosion_spread( power - epicenter.explosion_resistance, direction );
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.explosion_turfs, typeof(ExplosionTurf) )) {
				ET = _c;
				

				if ( Convert.ToDouble( ET.max_power ) <= 0 ) {
					continue;
				}

				if ( !Lang13.Bool( ET.turf ) ) {
					continue;
				}
				severity = 4 - Num13.Round( Num13.MaxInt( Num13.MinInt( 3, Convert.ToInt32( ( ET.max_power - ET.turf.explosion_resistance ) / Num13.MaxInt( 3, Convert.ToInt32( power / 3 ) ) ) ), 1 ), 1 );
				x = Convert.ToInt32( ET.turf.x );
				y = Convert.ToInt32( ET.turf.y );
				z = Convert.ToInt32( ET.turf.z );
				((Ent_Static)ET.turf).ex_act( severity );

				if ( !Lang13.Bool( ET.turf ) ) {
					ET.turf = Map13.GetTile( x, y, z );
				}

				foreach (dynamic _b in Lang13.Enumerate( ET.turf, typeof(Ent_Static) )) {
					A = _b;
					
					A.ex_act( severity );
				}
			}
			GlobalVars.explosion_in_progress = false;
			return;
		}

		// Function from file: explosion_recursive.dm
		public static ExplosionTurf get_explosion_turf( Tile T = null ) {
			ExplosionTurf ET = null;
			ExplosionTurf ET2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.explosion_turfs, typeof(ExplosionTurf) )) {
				ET = _a;
				

				if ( T == ET.turf ) {
					return ET;
				}
			}
			ET2 = new ExplosionTurf();
			ET2.turf = T;
			GlobalVars.explosion_turfs.Add( ET2 );
			return ET2;
		}

		// Function from file: explosion.dm
		public static bool explosion( dynamic epicenter = null, dynamic devastation_range = null, dynamic heavy_impact_range = null, dynamic light_impact_range = null, dynamic flash_range = null, int? adminlog = null, bool? ignored = null, bool? verbose = null ) {
			adminlog = adminlog ?? 1;
			ignored = ignored ?? false;
			verbose = verbose ?? true;

			dynamic power = null;
			int start = 0;
			int max_range = 0;
			dynamic far_dist = null;
			int? frequency = null;
			bool skip_shake = false;
			dynamic M = null;
			dynamic M_turf = null;
			double dist = 0;
			dynamic far_volume = null;
			ByTable close = null;
			dynamic M2 = null;
			Controller_Process lighting = null;
			Effect_System_Explosion E = null;
			int x0 = 0;
			int y0 = 0;
			int z0 = 0;
			dynamic T = null;
			double? dist2 = null;
			dynamic Trajectory = null;
			Obj_Machinery_Door D = null;
			Ent_Dynamic A = null;
			double took = 0;
			Obj_Machinery_Computer_Bhangmeter bhangmeter = null;

			Task13.Source = null;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( GlobalVars.config.use_recursive_explosions ) {
					power = devastation_range * 2 + heavy_impact_range + light_impact_range;
					GlobalFuncs.explosion_rec( epicenter, power );
					return;
				}
				start = Game13.timeofday;
				epicenter = GlobalFuncs.get_turf( epicenter );

				if ( !Lang13.Bool( epicenter ) ) {
					return;
				}
				GlobalVars.score["explosions"]++;
				max_range = Num13.MaxInt( Convert.ToInt32( devastation_range ), Convert.ToInt32( heavy_impact_range ), Convert.ToInt32( light_impact_range ) );
				GlobalVars.stat_collection.add_explosion_stat( epicenter, devastation_range, heavy_impact_range, light_impact_range, max_range );
				far_dist = devastation_range * 20 + heavy_impact_range * 5;
				frequency = GlobalFuncs.get_rand_frequency();
				skip_shake = false;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M ) && Lang13.Bool( M.client ) ) {
						M_turf = GlobalFuncs.get_turf( M );

						if ( Lang13.Bool( M_turf ) && M_turf.z == epicenter.z ) {
							dist = Map13.GetDistance( M_turf, epicenter );

							if ( dist <= Num13.Round( max_range + Convert.ToDouble( Game13.view ) - 2, 1 ) ) {
								
								if ( Convert.ToDouble( devastation_range ) > 0 ) {
									((Mob)M).playsound_local( epicenter, GlobalFuncs.get_sfx( "explosion" ), 100, 1, frequency, 5 );
									GlobalFuncs.shake_camera( M, ( Convert.ToDouble( devastation_range ) <= 3 ? ((dynamic)( 3 )) : ( Convert.ToDouble( devastation_range ) >= 10 ? ((dynamic)( 10 )) : devastation_range ) ), 2 );
								} else {
									((Mob)M).playsound_local( epicenter, GlobalFuncs.get_sfx( "explosion_small" ), 100, 1, frequency, 5 );
									GlobalFuncs.shake_camera( M, 3, 1 );
								}
							} else if ( dist <= Convert.ToDouble( far_dist ) ) {
								far_volume = ( Convert.ToDouble( far_dist ) <= 30 ? ((dynamic)( 30 )) : ( Convert.ToDouble( far_dist ) >= 50 ? ((dynamic)( 50 )) : far_dist ) );
								far_volume += ( dist <= Convert.ToDouble( far_dist * 0.5 ) ? 50 : 0 );

								if ( Convert.ToDouble( devastation_range ) > 0 ) {
									((Mob)M).playsound_local( epicenter, "sound/effects/explosionfar.ogg", far_volume, 1, frequency, 5 );
									GlobalFuncs.shake_camera( M, 3, 1 );
								} else {
									((Mob)M).playsound_local( epicenter, "sound/effects/explosionsmallfar.ogg", far_volume, 1, frequency, 5 );
									skip_shake = true;
								}
							}

							if ( !GlobalVars.explosion_shake_message_cooldown && !skip_shake ) {
								GlobalFuncs.to_chat( M, "<span class='danger'>You feel the station's structure shaking all around you.</span>" );
								GlobalVars.explosion_shake_message_cooldown = true;
								Task13.Schedule( 50, (Task13.Closure)(() => {
									GlobalVars.explosion_shake_message_cooldown = false;
									return;
								}));
							}
						}
					}
				}
				close = GlobalFuncs.trange( Game13.view + Num13.Round( Convert.ToDouble( devastation_range ), 1 ), epicenter );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list )) {
					M2 = _b;
					

					if ( M2.z == epicenter.z ) {
						Interface13.Stat( null, close.Contains( M2 ) );

						if ( !false ) {
							
							if ( M2.ear_deaf <= 0 || !( M2.ear_deaf != 0 ) ) {
								
								if ( !( M2.loc is Tile_Space ) ) {
									GlobalFuncs.to_chat( M2, "sound/effects/explosionfar.ogg" );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( adminlog ) ) {
					GlobalFuncs.message_admins( "Explosion with size (" + devastation_range + ", " + heavy_impact_range + ", " + light_impact_range + ") in area " + epicenter.loc.name + " (" + epicenter.x + "," + epicenter.y + "," + epicenter.z + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + epicenter.x + ";Y=" + epicenter.y + ";Z=" + epicenter.z + "'>JMP</A>)" );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Explosion with size (" + devastation_range + ", " + heavy_impact_range + ", " + light_impact_range + ") in area " + epicenter.loc.name + " " ) ) );
				}
				lighting = GlobalVars.processScheduler.getProcess( "lighting" );
				lighting.disable();

				if ( Convert.ToDouble( heavy_impact_range ) > 1 ) {
					E = new Effect_System_Explosion();
					E.set_up( epicenter );
					E.start();
				} else {
					((Tile)epicenter).turf_animation( "icons/effects/96x96.dmi", "explosion_small", -32, -32, 13 );
				}
				x0 = Convert.ToInt32( epicenter.x );
				y0 = Convert.ToInt32( epicenter.y );
				z0 = Convert.ToInt32( epicenter.z );

				foreach (dynamic _e in Lang13.Enumerate( GlobalFuncs.spiral_block( epicenter, max_range, true ) )) {
					T = _e;
					
					dist2 = GlobalFuncs.cheap_pythag( Convert.ToDouble( T.x - x0 ), Convert.ToDouble( T.y - y0 ) );

					if ( GlobalVars.explosion_newmethod ) {
						Trajectory = T;

						while (Trajectory != epicenter) {
							Trajectory = Map13.GetStepTowardsSimple( Trajectory, epicenter );

							if ( Trajectory.density && Lang13.Bool( Trajectory.explosion_block ) ) {
								dist2 += Convert.ToDouble( Trajectory.explosion_block );
							}

							foreach (dynamic _c in Lang13.Enumerate( Trajectory.contents, typeof(Obj_Machinery_Door) )) {
								D = _c;
								

								if ( D.density && D.explosion_block != 0 ) {
									dist2 += D.explosion_block;
								}
							}
						}
					}

					if ( ( dist2 ??0) < Convert.ToDouble( devastation_range ) ) {
						dist2 = 1;
					} else if ( ( dist2 ??0) < Convert.ToDouble( heavy_impact_range ) ) {
						dist2 = 2;
					} else if ( ( dist2 ??0) < Convert.ToDouble( light_impact_range ) ) {
						dist2 = 3;
					} else {
						continue;
					}

					foreach (dynamic _d in Lang13.Enumerate( T.contents, typeof(Ent_Dynamic) )) {
						A = _d;
						
						A.ex_act( dist2 );
					}
					((Ent_Static)T).ex_act( dist2 );
				}
				took = ( Game13.timeofday - start ) / 10;

				if ( GlobalVars.Debug2 ) {
					Game13.log.WriteMsg( "## DEBUG: Explosion(" + x0 + "," + y0 + "," + z0 + ")(d" + devastation_range + ",h" + heavy_impact_range + ",l" + light_impact_range + "): Took " + took + " seconds." );
				}

				if ( !( ignored == true ) ) {
					
					foreach (dynamic _f in Lang13.Enumerate( GlobalVars.doppler_arrays, typeof(Obj_Machinery_Computer_Bhangmeter) )) {
						bhangmeter = _f;
						

						if ( bhangmeter != null && !( bhangmeter.stat != 0 ) ) {
							bhangmeter.sense_explosion( x0, y0, z0, devastation_range, heavy_impact_range, light_impact_range, took, false, verbose );
						}
					}
				}
				Task13.Sleep( 8 );
				lighting.enable();
				return;
			}));
			return true;
		}

		// Function from file: explosion.dm
		public static ByTable trange( dynamic Dist = null, dynamic Center = null ) {
			Dist = Dist ?? 0;

			Tile x1y1 = null;
			Tile x2y2 = null;

			
			if ( Center == null ) {
				return null;
			}
			x1y1 = Map13.GetTile( ( Convert.ToDouble( Center.x - Dist ) < 1 ? true : Lang13.Bool( Center.x - Dist ) ) ?1:0, ( Convert.ToDouble( Center.y - Dist ) < 1 ? true : Lang13.Bool( Center.y - Dist ) ) ?1:0, Convert.ToInt32( Center.z ) );
			x2y2 = Map13.GetTile( ( Convert.ToDouble( Center.x + Dist ) > Game13.map_size_x ? Game13.map_size_x : Convert.ToInt32( Center.x + Dist ) ), ( Convert.ToDouble( Center.y + Dist ) > Game13.map_size_y ? Game13.map_size_y : Convert.ToInt32( Center.y + Dist ) ), Convert.ToInt32( Center.z ) );
			return Map13.FetchInBlock( x1y1, x2y2 );
		}

		// Function from file: extinguisher.dm
		public static int pack_check( dynamic user = null, Obj_Item_Weapon_Extinguisher E = null ) {
			dynamic M = null;
			Obj_Item_Weapon_ReagentContainers P = null;

			M = user;

			if ( Lang13.Bool( M ) && Lang13.Bool( M.back ) && M.back is Obj_Item_Weapon_ReagentContainers_Chempack ) {
				P = M.back;

				if ( !Lang13.Bool( ((dynamic)P).safety ) ) {
					
					if ( !P.is_empty() ) {
						GlobalFuncs.transfer_sub( P, E, 5, user );
						return 2;
					} else {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( P ).item().str( " is empty!</span>" ).ToString() );
						return 1;
					}
				} else {
					return 0;
				}
			}
			return 0;
		}

		// Function from file: facehugger.dm
		public static bool CanHug( dynamic M = null ) {
			dynamic C = null;

			
			if ( M is Mob_Living_SimpleAnimal_Corgi ) {
				return true;
			}

			if ( !( M is Mob_Living_Carbon ) || M is Mob_Living_Carbon_Alien || M is Mob_Living_Carbon_Slime ) {
				return false;
			}
			C = M;

			if ( Lang13.Bool( C ) && ( C.wear_mask is Obj_Item_Clothing_Mask_Facehugger || ( C.status_flags & 32768 ) != 0 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: fall.dm
		public static void invertcolor( dynamic A = null ) {
			
			if ( Lang13.Bool( A.ignoreinvert ) ) {
				return;
			}
			A.tempoverlay = A.appearance;
			A.color = new ByTable(new object [] { -1, 0, 0, 0, -1, 0, 0, 0, -1, 1, 1, 1 });
			return;
		}

		// Function from file: false_walls.dm
		public static double getOPressureDifferential( Ent_Static loc = null ) {
			dynamic minp = null;
			dynamic maxp = null;
			dynamic dir = null;
			dynamic T = null;
			dynamic cp = null;
			GasMixture environment = null;

			minp = 16777216;
			maxp = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				T = GlobalFuncs.get_turf( Map13.GetStep( loc, Convert.ToInt32( dir ) ) );
				cp = 0;

				if ( Lang13.Bool( T ) && T is Tile_Simulated && Lang13.Bool( T.zone ) ) {
					environment = ((Ent_Static)T).return_air();
					cp = environment.return_pressure();
				} else if ( T is Tile_Simulated ) {
					continue;
				}

				if ( Convert.ToDouble( cp ) < Convert.ToDouble( minp ) ) {
					minp = cp;
				}

				if ( Convert.ToDouble( cp ) > Convert.ToDouble( maxp ) ) {
					maxp = cp;
				}
			}
			return Math.Abs( Convert.ToDouble( minp - maxp ) );
		}

		// Function from file: false_walls.dm
		public static double performFalseWallPressureCheck( Ent_Static loc = null ) {
			Ent_Static lT = null;
			GasMixture myenv = null;
			dynamic pressure = null;
			dynamic dir = null;
			dynamic T = null;
			GasMixture environment = null;
			double pdiff = 0;

			lT = loc;

			if ( !( lT is Tile_Simulated ) || !Lang13.Bool( ((dynamic)lT).zone ) ) {
				return 0;
			}
			myenv = lT.return_air();
			pressure = myenv.return_pressure();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				T = GlobalFuncs.get_turf( Map13.GetStep( loc, Convert.ToInt32( dir ) ) );

				if ( Lang13.Bool( T ) && T is Tile_Simulated && Lang13.Bool( T.zone ) ) {
					environment = ((Ent_Static)T).return_air();
					pdiff = Math.Abs( Convert.ToDouble( pressure - environment.return_pressure() ) );

					if ( pdiff > 25 ) {
						return pdiff;
					}
				}
			}
			return 0;
		}

		// Function from file: false_walls.dm
		public static double performWallPressureCheck( Ent_Static loc = null ) {
			double pdiff = 0;

			pdiff = GlobalFuncs.getOPressureDifferential( loc );

			if ( pdiff > 25 ) {
				return pdiff;
			}
			return 0;
		}

		// Function from file: fax.dm
		public static void Centcomm_fax( dynamic sent = null, dynamic sentname = null, Mob Sender = null ) {
			string msg = null;
			dynamic C = null;

			msg = new Txt( "<span class='notice'><b><font color='orange'>CENTCOMM FAX: </font>" ).item( GlobalFuncs.key_name( Sender, 1 ) ).str( " (<A HREF='?_src_=holder;adminplayeropts=" ).Ref( Sender ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( Sender ).str( "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" ).Ref( Sender ).str( "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservejump=" ).Ref( Sender ).str( "'>JMP</A>) (<A HREF='?_src_=holder;secretsadmin=check_antagonist'>CA</A>) (<a href='?_src_=holder;CentcommFaxReply=" ).Ref( Sender ).str( "'>RPLY</a>)</b>: Receiving '" ).item( sentname ).str( "' via secure connection ... <a href='?_src_=holder;CentcommFaxView=" ).Ref( sent ).str( "'>view message</a></span>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C.prefs.special_popup ) ) {
					Interface13.Output( C, msg, "window1.msay_output" );
				} else {
					GlobalFuncs.to_chat( C, msg );
				}
				GlobalFuncs.to_chat( C, "sound/effects/fax.ogg" );
			}
			return;
		}

		// Function from file: fax.dm
		public static void SendFax( dynamic sent = null, dynamic sentname = null, Mob Sender = null, dynamic dpt = null, bool? centcomm = null ) {
			Obj_Machinery_Faxmachine F = null;
			Obj_Item_Weapon_Paper P = null;
			Image stampoverlay = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.allfaxes, typeof(Obj_Machinery_Faxmachine) )) {
				F = _a;
				

				if ( centcomm == true || F.department == dpt ) {
					
					if ( !( ( F.stat & 3 ) != 0 ) ) {
						Icon13.Flick( "faxreceive", F );
						Task13.Schedule( 20, (Task13.Closure)(() => {
							P = new Obj_Item_Weapon_Paper( F.loc );

							if ( centcomm == true ) {
								P.name = "" + GlobalFuncs.command_name() + "- " + sentname;
							} else {
								P.name = "" + sentname;
							}
							P.info = "" + sent;
							P.update_icon();
							GlobalFuncs.playsound( F.loc, "sound/effects/fax.ogg", 50, 1 );

							if ( centcomm == true ) {
								stampoverlay = new Image( "icons/obj/bureaucracy.dmi" );
								stampoverlay.icon_state = "paper_stamp-cent";

								if ( !( P.stamped != null ) ) {
									P.stamped = new ByTable();
								}
								P.stamped.Add( typeof(Obj_Item_Weapon_Stamp) );
								P.overlays.Add( stampoverlay );
								P.stamps += "<HR><i>This paper has been stamped by the Central Command Quantum Relay.</i>";
							}
							return;
						}));
					}
				}
			}
			return;
		}

		// Function from file: files.dm
		public static ByTable get_maps( string root = null ) {
			root = root ?? "maps/voting/";

			ByTable maps = null;
			int recursion_limit = 0;
			dynamic potential = null;
			string path = null;
			dynamic binary = null;
			double? min = null;
			double? max = null;
			int skipping = 0;
			dynamic binaries = null;
			ByTable lines = null;
			dynamic line = null;

			maps = new ByTable();
			recursion_limit = 20;

			foreach (dynamic _c in Lang13.Enumerate( File13.List( root ) )) {
				potential = _c;
				

				if ( Lang13.Bool( String13.SubStr( potential, -1, 0 != "/" ?1:0 ) ) ) {
					continue;
				}

				if ( !( recursion_limit != 0 ) ) {
					break;
				}
				path = root + potential;
				binary = null;
				min = -1;
				max = -1;
				skipping = 0;

				foreach (dynamic _b in Lang13.Enumerate( File13.List( path ) )) {
					binaries = _b;
					

					if ( Lang13.Bool( String13.SubStr( binaries, -15, 0 == "playercount.txt" ?1:0 ) ) ) {
						lines = GlobalFuncs.file2list( path + binaries );

						foreach (dynamic _a in Lang13.Enumerate( lines )) {
							line = _a;
							

							if ( String13.FindIgnoreCase( line, "max", 1, 0 ) != 0 ) {
								max = String13.ParseNumber( String13.SubStr( line, 5, 0 ) );
							} else if ( String13.FindIgnoreCase( line, "min", 1, 0 ) != 0 ) {
								min = String13.ParseNumber( String13.SubStr( line, 5, 0 ) );
							} else {
								Game13.log.WriteMsg( "## WARNING: " + "Our file had excessive lines, skipping." );
							}
						}

						if ( !( min == null ) && !( max == null ) ) {
							
							if ( min != -1 && GlobalVars.clients.len < ( min ??0) ) {
								skipping = 1;
							} else if ( max != -1 && GlobalVars.clients.len > ( max ??0) ) {
								skipping = 2;
							}
						}
					}

					if ( String13.SubStr( binaries, -4, 0 ) == ".dmb" ) {
						
						if ( Lang13.Bool( binary ) ) {
							Game13.log.WriteMsg( "## WARNING: " + ( "Extra DMB " + binary + " in map folder, skipping." ) );
							continue;
						}
						binary = binaries;
						continue;
					}
				}

				if ( skipping != 0 ) {
					GlobalFuncs.message_admins( "Skipping map " + binary + " due to " + ( skipping == 1 ? "not enough players." : "too many players." ) );
					Game13.log.WriteMsg( "## WARNING: " + ( "Skipping map " + binary + " due to " + ( skipping == 1 ? "not enough players." : "too many players." ) ) );
					binary = null;
					continue;
				}

				if ( !Lang13.Bool( binary ) ) {
					Game13.log.WriteMsg( "## WARNING: " + ( "Map folder " + path + " does not contain a valid byond binary, skipping." ) );
				} else {
					maps[potential] = path + binary;
					binary = null;
				}
				recursion_limit--;
			}
			return maps;
		}

		// Function from file: files.dm
		public static string return_file_text( string filename = null ) {
			string text = null;

			
			if ( !File13.Exists( filename ) ) {
				GlobalFuncs.error( "File not found (" + filename + ")" );
				return null;
			}
			text = File13.Read( filename );

			if ( !Lang13.Bool( text ) ) {
				GlobalFuncs.error( "File empty (" + filename + ")" );
				return null;
			}
			return text;
		}

		// Function from file: finds_defines.dm
		public static dynamic get_random_digsite_type(  ) {
			return Rand13.PickWeighted(new object [] { 12482, 1, 24340, 2, 35574, 3, 46184, 4, 56170, 5, 65535, 6 });
		}

		// Function from file: finds_defines.dm
		public static bool get_random_find_type( int digsite = 0 ) {
			bool find_type = false;

			find_type = false;

			switch ((int)( digsite )) {
				case 1:
					find_type = Lang13.Bool( Rand13.PickWeighted(new object [] { 42280, 31, 52850, 30, 63420, 29, 65535, 9 }) );
					break;
				case 2:
					find_type = Lang13.Bool( Rand13.PickWeighted(new object [] { 29126, 29, 43689, 30, 58252, 31, 65535, 9 }) );
					break;
				case 3:
					find_type = Lang13.Bool( Rand13.PickWeighted(new object [] { 5698, 1, 11396, 2, 17094, 3, 22792, 4, 28490, 5, 34188, 15, 39886, 10, 45584, 11, 49858, 36, 54132, 7, 58406, 28, 61255, 22, 64104, 23, 65535, 14 }) );
					break;
				case 4:
					find_type = Lang13.Bool( Rand13.PickWeighted(new object [] { 7943, 14, 15886, 12, 23829, 18, 31772, 13, 39715, 24, 45672, 22, 51629, 23, 57586, 28, 61557, 8, 65535, 9 }) );
					break;
				case 5:
					find_type = Lang13.Bool( Rand13.PickWeighted(new object [] { 13796, 20, 20694, 2, 27592, 1, 34490, 6, 41388, 16, 46561, 35, 51734, 17, 55183, 21, 58632, 28, 60356, 8, 62080, 9, 62769, 25, 63458, 19, 64147, 22, 64836, 23, 65535, 14 }) );
					break;
				case 6:
					find_type = Lang13.Bool( Rand13.PickWeighted(new object [] { 10082, 27, 20164, 6, 27725, 26, 35286, 25, 42847, 19, 47888, 28, 52929, 20, 57970, 17, 60490, 8, 63010, 9, 65535, 13 }) );
					break;
			}
			return find_type;
		}

		// Function from file: finds_defines.dm
		public static string get_responsive_reagent( bool? find_type = null ) {
			
			switch ((bool?)( find_type )) {
				case 1:
					return "mercury";
					break;
				case 2:
					return "mercury";
					break;
				case 3:
					return "mercury";
					break;
				case 4:
					return "mercury";
					break;
				case 5:
					return "mercury";
					break;
				case 7:
					return "iron";
					break;
				case 6:
					return "iron";
					break;
				case 8:
					return "mercury";
					break;
				case 9:
					return "mercury";
					break;
				case 10:
					return "mercury";
					break;
				case 11:
					return "mercury";
					break;
				case 12:
					return "mercury";
					break;
				case 13:
					return "iron";
					break;
				case 14:
					return "iron";
					break;
				case 15:
					return "mercury";
					break;
				case 16:
					return "nitrogen";
					break;
				case 17:
					return "potassium";
					break;
				case 18:
					return "potassium";
					break;
				case 19:
					return "iron";
					break;
				case 20:
					return "potassium";
					break;
				case 21:
					return "nitrogen";
					break;
				case 22:
					return "nitrogen";
					break;
				case 23:
					return "iron";
					break;
				case 24:
					return "potassium";
					break;
				case 25:
					return "iron";
					break;
				case 26:
					return "iron";
					break;
				case 27:
					return "iron";
					break;
				case 28:
					return "mercury";
					break;
				case 29:
					return "carbon";
					break;
				case 30:
					return "carbon";
					break;
				case 31:
					return "carbon";
					break;
				case 32:
					return "carbon";
					break;
				case 33:
					return "carbon";
					break;
				case 34:
					return "carbon";
					break;
				case 35:
					return "mercury";
					break;
				case 36:
					return "mercury";
					break;
			}
			return "plasma";
		}

		// Function from file: firedoor.dm
		public static dynamic convert_k2c( dynamic temp = null ) {
			return temp - 273.41;
		}

		// Function from file: firedoor.dm
		public static ByTable getCardinalAirInfo( Obj_Machinery_Door_Firedoor source = null, Ent_Static loc = null, ByTable stats = null ) {
			stats = stats ?? new ByTable(new object [] { "temperature" });

			ByTable temps = null;
			dynamic dir = null;
			int? direction = null;
			dynamic T = null;
			ByTable rstats = null;
			GasMixture environment = null;
			int? i = null;
			GasMixture environment2 = null;
			int? i2 = null;

			temps = new ByTable( 4 );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _b;
				
				direction = null;

				dynamic _a = dir; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					direction = 1;
				} else if ( _a==2 ) {
					direction = 2;
				} else if ( _a==4 ) {
					direction = 3;
				} else if ( _a==8 ) {
					direction = 4;
				}
				T = GlobalFuncs.get_turf( Map13.GetStep( loc, Convert.ToInt32( dir ) ) );

				if ( dir == Num13.Rotate( source.dir, 180 ) && Lang13.Bool( source.flags & 512 ) ) {
					
					if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Door_Airlock), GlobalFuncs.get_turf( source ) ) ) ) {
						T = GlobalFuncs.get_turf( source );
					}
				}
				rstats = new ByTable( stats.len );

				if ( Lang13.Bool( T ) && T is Tile_Simulated && Lang13.Bool( T.zone ) ) {
					environment = ((Ent_Static)T).return_air();
					i = null;
					i = 1;

					while (( i ??0) <= stats.len) {
						rstats[i] = environment.vars[stats[i]];
						i++;
					}
				} else if ( T is Tile_Simulated ) {
					rstats = null;
				} else if ( T is Tile ) {
					environment2 = ((Ent_Static)T).return_air();
					i2 = null;
					i2 = 1;

					while (( i2 ??0) <= stats.len) {
						rstats[i2] = environment2.vars[stats[i2]];
						i2++;
					}
				}
				temps[direction] = rstats;
			}
			return temps;
		}

		// Function from file: fusion_reactions.dm
		public static dynamic get_fusion_reaction( dynamic primary_reactant = null, dynamic secondary_reactant = null ) {
			dynamic secondary_reactions = null;

			
			if ( !( GlobalVars.master_controller.fusion_reactions != null ) ) {
				GlobalFuncs.populate_fusion_reactions();
			}

			if ( GlobalVars.master_controller.fusion_reactions.Find( primary_reactant ) != 0 ) {
				secondary_reactions = GlobalVars.master_controller.fusion_reactions[primary_reactant];

				if ( Lang13.Bool( secondary_reactions.Find( secondary_reactant ) ) ) {
					return GlobalVars.master_controller.fusion_reactions[primary_reactant][secondary_reactant];
				}
			}
			return null;
		}

		// Function from file: fusion_reactions.dm
		public static void populate_fusion_reactions(  ) {
			dynamic cur_reaction_type = null;
			dynamic cur_reaction = null;

			
			if ( !( GlobalVars.master_controller.fusion_reactions != null ) ) {
				GlobalVars.master_controller.fusion_reactions = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(FusionReaction) ) - typeof(FusionReaction) )) {
					cur_reaction_type = _a;
					
					cur_reaction = Lang13.Call( cur_reaction_type );

					if ( !Lang13.Bool( GlobalVars.master_controller.fusion_reactions[cur_reaction.primary_reactant] ) ) {
						GlobalVars.master_controller.fusion_reactions[cur_reaction.primary_reactant] = new ByTable();
					}
					GlobalVars.master_controller.fusion_reactions[cur_reaction.primary_reactant][cur_reaction.secondary_reactant] = cur_reaction;

					if ( !Lang13.Bool( GlobalVars.master_controller.fusion_reactions[cur_reaction.secondary_reactant] ) ) {
						GlobalVars.master_controller.fusion_reactions[cur_reaction.secondary_reactant] = new ByTable();
					}
					GlobalVars.master_controller.fusion_reactions[cur_reaction.secondary_reactant][cur_reaction.primary_reactant] = cur_reaction;
				}
			}
			return;
		}

		// Function from file: game_mode.dm
		public static void display_roundstart_logout_report(  ) {
			string msg = null;
			Mob_Living L = null;
			bool found = false;
			dynamic C = null;
			Mob_Dead_Observer D = null;
			dynamic M = null;

			msg = "<span class='notice'><b>Roundstart logout report\n\n</span>";

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living) )) {
				L = _c;
				

				if ( Lang13.Bool( L.ckey ) ) {
					found = false;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.clients )) {
						C = _a;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
							continue;
						}

						if ( C.ckey == L.ckey ) {
							found = true;
							break;
						}
					}

					if ( !found ) {
						msg += "<b>" + L.name + "</b> (" + L.ckey + "), the " + L.job + " (<font color='#ffcc00'><b>Disconnected</b></font>)\n";
					}
				}

				if ( Lang13.Bool( L.ckey ) && L.client != null ) {
					
					if ( L.client.inactivity >= 3000 ) {
						msg += "<b>" + L.name + "</b> (" + L.ckey + "), the " + L.job + " (<font color='#ffcc00'><b>Connected, Inactive</b></font>)\n";
						continue;
					}

					if ( Lang13.Bool( L.stat ) ) {
						
						if ( L.suiciding == true ) {
							msg += "<b>" + L.name + "</b> (" + L.ckey + "), the " + L.job + " (<font color='red'><b>Suicide</b></font>)\n";
							continue;
						}

						if ( L.stat == 1 ) {
							msg += "<b>" + L.name + "</b> (" + L.ckey + "), the " + L.job + " (Dying)\n";
							continue;
						}

						if ( L.stat == 2 ) {
							msg += "<b>" + L.name + "</b> (" + L.ckey + "), the " + L.job + " (Dead)\n";
							continue;
						}
					}
					continue;
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Dead_Observer) )) {
					D = _b;
					

					if ( D.mind != null && ( D.mind.original == L || D.mind.current == L ) ) {
						
						if ( L.stat == 2 ) {
							
							if ( L.suiciding == true ) {
								msg += "<b>" + L.name + "</b> (" + String13.CKey( D.mind.key ) + "), the " + L.job + " (<font color='red'><b>Suicide</b></font>)\n";
								continue;
							} else {
								msg += "<b>" + L.name + "</b> (" + String13.CKey( D.mind.key ) + "), the " + L.job + " (Dead)\n";
								continue;
							}
						} else if ( D.can_reenter_corpse != 0 ) {
							msg += "<b>" + L.name + "</b> (" + String13.CKey( D.mind.key ) + "), the " + L.job + " (<font color='red'><b>This shouldn't appear.</b></font>)\n";
							continue;
						} else {
							msg += "<b>" + L.name + "</b> (" + String13.CKey( D.mind.key ) + "), the " + L.job + " (<font color='red'><b>Ghosted</b></font>)\n";
							continue;
						}
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _d;
				

				if ( Lang13.Bool( M.client ) && Lang13.Bool( M.client.holder ) ) {
					GlobalFuncs.to_chat( M, msg );
				}
			}
			return;
		}

		// Function from file: game_mode.dm
		public static dynamic get_nt_opposed(  ) {
			ByTable dudes = null;
			Mob_Living_Carbon_Human man = null;

			dudes = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				man = _a;
				

				if ( man.client != null ) {
					
					if ( man.client.prefs.nanotrasen_relation == "Opposed" ) {
						dudes.Add( man );
					} else if ( man.client.prefs.nanotrasen_relation == "Skeptical" && Rand13.PercentChance( 50 ) ) {
						dudes.Add( man );
					}
				}
			}

			if ( dudes.len == 0 ) {
				return null;
			}
			return Rand13.PickFromTable( dudes );
		}

		// Function from file: game.dm
		public static ByTable circlerange( dynamic center = null, double? radius = null ) {
			center = center ?? Task13.User;
			radius = radius ?? 3;

			dynamic centerturf = null;
			ByTable turfs = null;
			double rsq = 0;
			Ent_Static T = null;
			double dx = 0;
			double dy = 0;

			centerturf = GlobalFuncs.get_turf( center );
			turfs = new ByTable();
			rsq = ( radius ??0) * ( ( radius ??0) + 0.5 );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( centerturf, radius ), typeof(Ent_Static) )) {
				T = _a;
				
				dx = T.x - Convert.ToDouble( centerturf.x );
				dy = T.y - Convert.ToDouble( centerturf.y );

				if ( dx * dx + dy * dy <= rsq ) {
					turfs.Add( T );
				}
			}
			return turfs;
		}

		// Function from file: game.dm
		public static ByTable circlerangeturfs( Ent_Static center = null, int? radius = null ) {
			center = center ?? Task13.User;
			radius = radius ?? 3;

			dynamic centerturf = null;
			ByTable turfs = null;
			double rsq = 0;
			dynamic T = null;
			dynamic dx = null;
			dynamic dy = null;

			centerturf = GlobalFuncs.get_turf( center );

			if ( !Lang13.Bool( centerturf ) ) {
				GlobalFuncs.to_chat( Task13.User, "cant get a center turf?" );
				return null;
			}
			turfs = new ByTable();
			rsq = ( radius ??0) * ( ( radius ??0) + 0.5 );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( centerturf, radius ) )) {
				T = _a;
				

				if ( !Lang13.Bool( T ) ) {
					continue;
				}
				dx = T.x - centerturf.x;
				dy = T.y - centerturf.y;

				if ( Convert.ToDouble( dx * dx + dy * dy ) <= rsq ) {
					turfs.Add( T );
				}
			}
			return turfs;
		}

		// Function from file: game.dm
		public static void flick_overlay( Image I = null, ByTable show_to = null, int duration = 0 ) {
			dynamic C = null;
			dynamic C2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( show_to )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}
				C.images.Add( I );
			}
			Task13.Sleep( duration );

			foreach (dynamic _b in Lang13.Enumerate( show_to )) {
				C2 = _b;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
					continue;
				}
				C2.images.Remove( I );
			}
			return;
		}

		// Function from file: game.dm
		public static ByTable get_active_candidates( string role_id = null, bool? buffer = null, dynamic poll = null ) {
			buffer = buffer ?? true;
			poll = poll ?? 0;

			ByTable candidates = null;
			int i = 0;
			Mob_Dead_Observer G = null;

			candidates = new ByTable();
			i = 0;

			while (candidates.len <= 0 && i < 5) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
					G = _a;
					

					if ( G.mind != null && Lang13.Bool( G.mind.current ) && Convert.ToInt32( G.mind.current.stat ) != 2 ) {
						continue;
					}

					if ( !Lang13.Bool( G.client.desires_role( role_id, ( poll != 0 && i == 0 ? poll : ((dynamic)( 0 )) ) ) ) ) {
						continue;
					}

					if ( G.client.inactivity / 10 / 60 > ( buffer == true ?1:0) + i ) {
						continue;
					}
					candidates.Add( G );
				}
				i++;
			}
			return candidates;
		}

		// Function from file: game.dm
		public static int get_active_player_count(  ) {
			int active_players = 0;
			int? i = null;
			dynamic M = null;
			Mob_Dead_Observer O = null;

			active_players = 0;
			i = null;
			i = 1;

			while (( i ??0) <= GlobalVars.player_list.len) {
				M = GlobalVars.player_list[i];

				if ( Lang13.Bool( M ) && Lang13.Bool( M.client ) ) {
					
					if ( M is Mob_NewPlayer ) {
						i++;
						continue;
					} else if ( M is Mob_Dead_Observer ) {
						O = M;

						if ( O.started_as_observer != 0 ) {
							i++;
							continue;
						}
					}
					active_players++;
				}
				i++;
			}
			return active_players;
		}

		// Function from file: game.dm
		public static dynamic get_area( dynamic O = null ) {
			dynamic A = null;
			int? i = null;

			
			if ( O == null ) {
				return null;
			}
			A = O;
			i = null;
			i = 0;

			while (( ++i ??0) <= 16) {
				
				if ( A is Zone ) {
					return A;
				}

				if ( A is Ent_Static ) {
					A = A.loc;
				} else {
					return null;
				}
			}
			return null;
		}

		// Function from file: game.dm
		public static dynamic get_area_master( dynamic O = null ) {
			dynamic A = null;

			A = GlobalFuncs.get_area( O );

			if ( A is Zone ) {
				return A;
			}
			return null;
		}

		// Function from file: game.dm
		public static dynamic get_area_name( Obj_Item_Weapon_CameraAssembly N = null ) {
			dynamic A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
				A = _a;
				

				if ( A.name == N ) {
					return A;
				}
			}
			return 0;
		}

		// Function from file: game.dm
		public static ByTable get_candidates( string role_id = null ) {
			ByTable _default = null;

			Mob_Dead_Observer G = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
				G = _a;
				

				if ( !( G.mind != null && Lang13.Bool( G.mind.current ) && Convert.ToInt32( G.mind.current.stat ) != 2 ) ) {
					
					if ( !( G.client.is_afk() != 0 ) && ( role_id == null || Lang13.Bool( G.client.desires_role( role_id ) ) ) ) {
						_default.Add( G.client );
					}
				}
			}
			return _default;
		}

		// Function from file: game.dm
		public static ByTable get_contents_in_object( dynamic O = null, Type type_path = null ) {
			type_path = type_path ?? typeof(Ent_Dynamic);

			
			if ( Lang13.Bool( O ) ) {
				return GlobalFuncs.recursive_type_check( O, type_path ) - O;
			} else {
				return new ByTable();
			}
		}

		// Function from file: game.dm
		public static double get_dist_euclidian( Obj_Effect_Overlay_Gravitywell Loc1 = null, Ent_Static Loc2 = null ) {
			double dx = 0;
			double dy = 0;
			double dist = 0;

			dx = Loc1.x - Loc2.x;
			dy = Loc1.y - Loc2.y;
			dist = Math.Sqrt( Math.Pow( dx, 2 ) + Math.Pow( dy, 2 ) );
			return dist;
		}

		// Function from file: game.dm
		public static ByTable get_hear( dynamic range = null, dynamic source = null ) {
			dynamic lum = null;
			ByTable heard = null;

			lum = source.luminosity;
			source.luminosity = 6;
			heard = Map13.FetchInView( source, range );
			source.luminosity = lum;
			return heard;
		}

		// Function from file: game.dm
		public static dynamic get_mob_by_key( string key = null ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( M.ckey == String13.ToLower( key ) ) {
					return M;
				}
			}
			return null;
		}

		// Function from file: game.dm
		public static double GetBluePart( dynamic hexa = null ) {
			return GlobalFuncs.hex2num( String13.SubStr( hexa, 6, 8 ) );
		}

		// Function from file: game.dm
		public static double GetGreenPart( dynamic hexa = null ) {
			return GlobalFuncs.hex2num( String13.SubStr( hexa, 4, 6 ) );
		}

		// Function from file: game.dm
		public static ByTable GetHexColors( dynamic hexa = null ) {
			return new ByTable(new object [] { GlobalFuncs.GetRedPart( hexa ), GlobalFuncs.GetGreenPart( hexa ), GlobalFuncs.GetBluePart( hexa ) });
		}

		// Function from file: game.dm
		public static double GetRedPart( dynamic hexa = null ) {
			return GlobalFuncs.hex2num( String13.SubStr( hexa, 2, 4 ) );
		}

		// Function from file: game.dm
		public static bool in_range( dynamic source = null, dynamic user = null ) {
			
			if ( ((Ent_Static)source).Adjacent( user ) ) {
				return true;
			} else if ( user is Mob && Lang13.Bool( user.mutations ) && user.mutations.len != 0 ) {
				Interface13.Stat( null, user.mutations.Contains( 1 ) );

				if ( false && Map13.GetDistance( user, source ) < GlobalVars.tk_maxrange ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: game.dm
		public static ByTable mobs_in_area( dynamic the_area = null, bool? client_needed = null, ByTable moblist = null ) {
			client_needed = client_needed ?? false;
			moblist = moblist ?? GlobalVars.mob_list;

			ByTable mobs_found = null;
			dynamic our_area = null;
			dynamic M = null;

			mobs_found = new ByTable( 0 );
			our_area = GlobalFuncs.get_area_master( the_area );

			foreach (dynamic _a in Lang13.Enumerate( moblist )) {
				M = _a;
				

				if ( client_needed == true && !Lang13.Bool( M.client ) ) {
					continue;
				}

				if ( our_area != GlobalFuncs.get_area_master( M ) ) {
					continue;
				}
				mobs_found.Add( M );
			}
			return mobs_found;
		}

		// Function from file: game.dm
		public static ByTable recursive_type_check( dynamic O = null, dynamic type = null ) {
			type = type ?? typeof(Ent_Static);

			ByTable processing_list = null;
			ByTable processed_list = null;
			ByTable found_atoms = null;
			dynamic A = null;
			Ent_Static B = null;

			processing_list = new ByTable(new object [] { O });
			processed_list = new ByTable();
			found_atoms = new ByTable();

			while (processing_list.len != 0) {
				A = processing_list[1];

				if ( Lang13.Bool( type.IsInstanceOfType( A ) ) ) {
					found_atoms.Or( A );
				}

				foreach (dynamic _a in Lang13.Enumerate( A, typeof(Ent_Static) )) {
					B = _a;
					

					if ( !Lang13.Bool( processed_list[B] ) ) {
						processing_list.Or( B );
					}
				}
				processing_list.Cut( 1, 2 );
				processed_list[A] = A;
			}
			return found_atoms;
		}

		// Function from file: game.dm
		public static void try_move_adjacent( Obj_Effect_Portal_JauntTunnel AM = null ) {
			dynamic T = null;
			dynamic direction = null;

			T = GlobalFuncs.get_turf( AM );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				

				if ( AM.Move( Map13.GetStep( T, Convert.ToInt32( direction ) ) ) ) {
					break;
				}
			}
			return;
		}

		// Function from file: garbage.dm
		public static void qdel( dynamic D = null, bool? ignore_pooling = null, bool? ignore_destroy = null ) {
			ignore_pooling = ignore_pooling ?? false;
			ignore_destroy = ignore_destroy ?? false;

			
			if ( D == null ) {
				return;
			}

			if ( GlobalVars.garbageCollector == null ) {
				Lang13.Delete( D );
				
				return;
			}

			if ( D is Ent_Static && !( D is Ent_Dynamic ) ) {
				Lang13.Delete( D );
				Game13.log.WriteMsg( "##WARNING: " + ( "qdel() passed object of type " + D.type + ". qdel() cannot handle unmovable atoms." ) + " in " + "code/controllers/garbage.dm" + " at line " + 108 + " src: " + Task13.Source + " usr: " + Task13.User + "." );
				GlobalVars.garbageCollector.hard_dels++;
				GlobalVars.garbageCollector.dels_count++;
				return;
			}
			Interface13.Stat( null, GlobalVars.masterdatumPool.Contains( "" + D.type ) );

			if ( D is Ent_Static && !( D is Ent_Dynamic ) && !( ignore_pooling == true ) ) {
				GlobalFuncs.returnToPool( D );
				return;
			}

			if ( D.gcDestroyed == null ) {
				
				if ( !( ignore_destroy == true ) ) {
					((Game_Data)D).Destroy();
				}
				GlobalVars.garbageCollector.addTrash( D );
			}
			return;
		}

		// Function from file: Get Flat Icon.dm
		public static Icon getFlatIcon( dynamic A = null, double? dir = null, int? cache = null, bool? exact = null ) {
			cache = cache ?? 1;
			exact = exact ?? false;

			ByTable layers = null;
			string hash = null;
			int c = 0;
			Image copy = null;
			ByTable process = null;
			bool processSubset = false;
			int currentIndex = 0;
			dynamic currentOverlay = null;
			int currentLayer = 0;
			dynamic compareOverlay = null;
			int compareIndex = 0;
			dynamic I = null;
			Icon flat = null;
			Icon add = null;
			int? flatX1 = null;
			int? flatX2 = null;
			int? flatY1 = null;
			int? flatY2 = null;
			int? addX1 = null;
			int? addX2 = null;
			int? addY1 = null;
			int? addY2 = null;
			dynamic I2 = null;
			dynamic H = null;
			Organ_External O = null;
			Icon DI = null;
			dynamic C = null;
			double rgba = 0;

			layers = new ByTable();
			hash = "";

			if ( GlobalFuncs.is_type_in_list( A, GlobalVars.directional ) && !GlobalFuncs.is_type_in_list( A, GlobalVars.exception ) ) {
				dir = Lang13.DoubleNullable( A.dir );
			} else if ( A is Tile ) {
				c = GlobalVars.directional_turfs.len;
				GlobalVars.directional_turfs.Remove( A.icon_state );

				if ( c != GlobalVars.directional_turfs.len ) {
					dir = Lang13.DoubleNullable( A.dir );
					GlobalVars.directional_turfs.Add( A.icon_state );
				} else {
					dir = 2;
				}
			} else {
				dir = 2;
			}

			if ( Lang13.Bool( A.icon ) ) {
				copy = new Image( A.icon, null, A.icon_state, Lang13.DoubleNullable( A.layer ), dir );
				layers[copy] = A.layer;
			}
			process = A.underlays;
			processSubset = false;
			currentIndex = 1;

			while (GlobalVars.TRUE) {
				
				if ( currentIndex <= process.len ) {
					currentOverlay = process[currentIndex];
					currentLayer = Convert.ToInt32( currentOverlay.layer );

					if ( currentLayer < 0 ) {
						
						if ( !( currentLayer > -1000 ) ) {
							Task13.Crash( "" + "code/libs/Get Flat Icon/Get Flat Icon.dm" + ":" + 91 + ":Assertion Failed: " + "currentLayer > -1000" );
						}

						if ( !processSubset ) {
							currentLayer = Convert.ToInt32( A.layer + currentLayer / 1000 );
						} else {
							currentLayer = Convert.ToInt32( A.layer + ( currentLayer + 1000 ) / 1000 );
						}
					}
					compareIndex = 1;

					while (compareIndex <= layers.len) {
						compareOverlay = layers[compareIndex];

						if ( currentLayer < Convert.ToDouble( layers[compareOverlay] ) ) {
							layers.Insert( compareIndex, currentOverlay );
							layers[currentOverlay] = currentLayer;
							break;
						}
						compareIndex++;
					}

					if ( compareIndex > layers.len ) {
						layers[currentOverlay] = currentLayer;
					}
					currentIndex++;
				}

				if ( currentIndex > process.len ) {
					
					if ( !processSubset ) {
						currentIndex = 1;
						processSubset = true;
						process = A.overlays;
					} else {
						break;
					}
				}
			}

			if ( cache != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( layers )) {
					I = _a;
					
					hash += new Txt().Ref( I.icon ).str( "," ).item( I.icon_state ).str( "," ).item( ( Convert.ToDouble( I.dir ) != GlobalVars.SOUTH ? Lang13.DoubleNullable( I.dir ) : dir ) ).str( "," ).item( I.pixel_x ).str( "," ).item( I.pixel_y ).str( ";_;" ).ToString();
				}
				hash = Num13.Md5( hash );

				if ( cache != 2 ) {
					Interface13.Stat( null, GlobalVars._flatIcons.Contains( hash ) );

					if ( false && Lang13.Bool( GlobalVars._flatIcons[hash] ) ) {
						return GlobalVars._flatIcons[hash];
					}
				}
			}
			flat = new Icon( "_flat_Blank.dmi" );
			add = null;
			flatX1 = 1;
			flatX2 = flat.Width();
			flatY1 = 1;
			flatY2 = flat.Height();
			addX1 = null;
			addX2 = null;
			addY1 = null;
			addY2 = null;

			foreach (dynamic _c in Lang13.Enumerate( layers )) {
				I2 = _c;
				
				add = new Icon( Lang13.Bool( I2.icon ) || Lang13.Bool( A.icon ), Lang13.Bool( I2.icon_state ) || Lang13.Bool( I2.icon ) && false && Lang13.Bool( A.icon_state ), dir, 1, false );

				if ( I2.name == "damage layer" ) {
					H = A;

					if ( H is Mob_Living_Carbon_Human ) {
						
						foreach (dynamic _b in Lang13.Enumerate( H.organs, typeof(Organ_External) )) {
							O = _b;
							

							if ( !( ( O.status & 64 ) != 0 ) ) {
								
								if ( O.damage_state == "00" ) {
									continue;
								}
								DI = null;
								DI = ((Mob_Living_Carbon_Human)H).get_damage_icon_part( O.damage_state, O.icon_name, ( H.species.blood_color == "#A10808" ? "" : H.species.blood_color ) );
								add.Blend( DI, 3 );
							}
						}
					}
				}

				if ( !( exact == true ) && A is Mob_Living_Carbon ) {
					C = A;

					if ( C.lying == true && !( C is Mob_Living_Carbon_Alien_Humanoid ) ) {
						add.Turn( 90 );
					}
				}

				if ( A is Mob_Dead_Observer ) {
					add.ChangeOpacity( 0.5 );
				}

				if ( Lang13.Bool( I2.color ) || Convert.ToInt32( I2.alpha ) != 255 ) {
					rgba = ( Lang13.Bool( I2.color ) || Lang13.Bool( "#FFFFFF" ) ?1:0) + /*[I CANNOT CONVERT SOME RANDOM SHIT TO A DOUBLE: string]*/ 0;
					add.Blend( rgba, 2 );
				}
				addX1 = Num13.MinInt( flatX1 ??0, Convert.ToInt32( I2.pixel_x + 1 ) );
				addX2 = Num13.MaxInt( flatX2 ??0, Convert.ToInt32( I2.pixel_x + add.Width() ) );
				addY1 = Num13.MinInt( flatY1 ??0, Convert.ToInt32( I2.pixel_y + 1 ) );
				addY2 = Num13.MaxInt( flatY2 ??0, Convert.ToInt32( I2.pixel_y + add.Height() ) );

				if ( addX1 != flatX1 || addX2 != flatX2 || addY1 != flatY1 || addY2 != flatY2 ) {
					flat.Crop( ( addX1 ??0) - ( flatX1 ??0) + 1, ( addY1 ??0) - ( flatY1 ??0) + 1, ( addX2 ??0) - ( flatX1 ??0) + 1, ( addY2 ??0) - ( flatY1 ??0) + 1 );
					flatX1 = addX1;
					flatX2 = addX2;
					flatY1 = addY1;
					flatY2 = addY2;
				}
				flat.Blend( add, 3, Lang13.DoubleNullable( I2.pixel_x + 2 - flatX1 ), Lang13.DoubleNullable( I2.pixel_y + 2 - flatY1 ) );
			}

			if ( Lang13.Bool( A.color ) ) {
				flat.Blend( A.color, 2 );
			}

			if ( cache != 0 ) {
				GlobalVars._flatIcons[hash] = flat;
			}
			return flat;
		}

		// Function from file: getrev.dm
		public static string return_revision(  ) {
			string output = null;

			output = "Sorry, the revision info is unavailable.";
			output = File13.Read( ".git/refs/heads/Bleeding-Edge" );

			if ( !Lang13.Bool( output ) || output == "" ) {
				output = "Unable to load revision info from HEAD";
			}
			return output;
		}

		// Function from file: gibs.dm
		public static void gibs( dynamic location = null, ByTable viruses = null, Dna MobDNA = null ) {
			new Obj_Effect_Gibspawner_Generic( GlobalFuncs.get_turf( location ), viruses, MobDNA );
			return;
		}

		// Function from file: gibs.dm
		public static void hgibs( Ent_Static location = null, ByTable viruses = null, Dna MobDNA = null, string fleshcolor = null, string bloodcolor = null ) {
			new Obj_Effect_Gibspawner_Human( GlobalFuncs.get_turf( location ), viruses, MobDNA, fleshcolor, bloodcolor );
			return;
		}

		// Function from file: gibs.dm
		public static void robogibs( Ent_Static location = null, ByTable viruses = null ) {
			new Obj_Effect_Gibspawner_Robot( GlobalFuncs.get_turf( location ), viruses );
			return;
		}

		// Function from file: gibs.dm
		public static void xgibs( Ent_Static location = null, ByTable viruses = null ) {
			new Obj_Effect_Gibspawner_Xeno( GlobalFuncs.get_turf( location ), viruses );
			return;
		}

		// Function from file: global cache.dm
		public static void populate_asset_cache(  ) {
			dynamic type = null;
			dynamic A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Asset) ) - new ByTable(new object [] { typeof(Asset), typeof(Asset_Simple) }) )) {
				type = _a;
				
				A = Lang13.Call( type );
				((Asset)A).register();
			}
			return;
		}

		// Function from file: global cache.dm
		public static void register_asset( dynamic asset_name = null, dynamic asset = null ) {
			GlobalVars.asset_cache.Or( asset_name );
			GlobalVars.asset_cache[asset_name] = asset;
			return;
		}

		// Function from file: global cache.dm
		public static bool send_asset( dynamic client = null, string asset_name = null, bool? verify = null ) {
			verify = verify ?? GlobalVars.TRUE;

			dynamic M = null;
			int job = 0;
			int t = 0;
			int timeout_time = 0;

			
			if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( client ) ) ) {
				
				if ( client is Mob ) {
					M = client;

					if ( Lang13.Bool( M.client ) ) {
						client = M.client;
					} else {
						return false;
					}
				} else {
					return false;
				}
			}

			if ( Lang13.Bool( client.cache.Find( asset_name ) ) || Lang13.Bool( client.sending.Find( asset_name ) ) ) {
				return false;
			}
			Interface13.CacheBrowseResource( client, GlobalVars.asset_cache[asset_name], asset_name );

			if ( !( verify == true ) || !Interface13.WindowExists( client, "asset_cache_browser" ) ) {
				
				if ( !Lang13.Bool( client ) ) {
					return false;
				}
				client.cache += asset_name;
				return true;
			}

			if ( !Lang13.Bool( client ) ) {
				return false;
			}
			client.sending |= asset_name;
			job = ++client.last_asset_job;
			Interface13.Browse( client, "\n	<script>\n		window.location.href=\"?asset_cache_confirm_arrival=" + job + "\"\n	</script>\n	", "window=asset_cache_browser" );
			t = 0;
			timeout_time = client.sending.len * 25;

			while (Lang13.Bool( client ) && !( client.completed_asset_jobs.Find( job ) != 0 ) && t < timeout_time) {
				Task13.Sleep( 1 );
				t++;
			}

			if ( Lang13.Bool( client ) ) {
				client.sending -= asset_name;
				client.cache |= asset_name;
				client.completed_asset_jobs.Remove( job );
			}
			return true;
		}

		// Function from file: global cache.dm
		public static bool send_asset_list( Client client = null, ByTable asset_list = null, bool? verify = null ) {
			verify = verify ?? GlobalVars.TRUE;

			Client M = null;
			ByTable unreceived = null;
			dynamic asset = null;
			int job = 0;
			int t = 0;
			int timeout_time = 0;

			
			if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( client ) ) ) {
				
				if ( client is Mob ) {
					M = client;

					if ( Lang13.Bool( ((dynamic)M).client ) ) {
						client = ((dynamic)M).client;
					} else {
						return false;
					}
				} else {
					return false;
				}
			}
			unreceived = asset_list - ( client.cache + client.sending );

			if ( !( unreceived != null ) || !( unreceived.len != 0 ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( unreceived )) {
				asset = _a;
				
				Interface13.CacheBrowseResource( client, GlobalVars.asset_cache[asset], asset );
			}

			if ( !( verify == true ) || !Interface13.WindowExists( client, "asset_cache_browser" ) ) {
				
				if ( !( client != null ) ) {
					return false;
				}
				client.cache.Add( unreceived );
				return true;
			}

			if ( !( client != null ) ) {
				return false;
			}
			client.sending.Or( unreceived );
			job = ++client.last_asset_job;
			Interface13.Browse( client, "\n	<script>\n		window.location.href=\"?asset_cache_confirm_arrival=" + job + "\"\n	</script>\n	", "window=asset_cache_browser" );
			t = 0;
			timeout_time = client.sending.len * 25;

			while (client != null && !( client.completed_asset_jobs.Find( job ) != 0 ) && t < timeout_time) {
				Task13.Sleep( 1 );
				t++;
			}

			if ( client != null ) {
				client.sending.Remove( unreceived );
				client.cache.Or( unreceived );
				client.completed_asset_jobs.Remove( job );
			}
			return true;
		}

		// Function from file: global_lists.dm
		public static void make_datum_references_lists(  ) {
			dynamic paths = null;
			dynamic T = null;
			dynamic S = null;

			paths = Lang13.GetTypes( typeof(SurgeryStep) ) - typeof(SurgeryStep);

			foreach (dynamic _a in Lang13.Enumerate( paths )) {
				T = _a;
				
				S = Lang13.Call( T );
				GlobalVars.surgery_steps.Add( S );
			}
			GlobalFuncs.sort_surgeries();
			return;
		}

		// Function from file: h_sandbox.dm
		public static bool is_banned_type( dynamic typepath = null ) {
			dynamic btype = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.banned_sandbox_types )) {
				btype = _a;
				

				if ( String13.FindIgnoreCase( "" + typepath, "" + btype, 1, 0 ) != 0 ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: Hallucination.dm
		public static void fake_attack( Mob_Living_Carbon_Human target = null ) {
			Mob_Living_Carbon_Human clone = null;
			dynamic clone_weapon = null;
			Mob_Living_Carbon_Human H = null;
			Game_Data F = null;

			clone = null;
			clone_weapon = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.living_mob_list, typeof(Mob_Living_Carbon_Human) )) {
				H = _a;
				

				if ( Lang13.Bool( H.stat ) || H.lying == true ) {
					continue;
				}
				clone = H;
				break;
			}

			if ( !( clone != null ) ) {
				return;
			}
			F = GlobalFuncs.getFromPool( typeof(Obj_Effect_FakeAttacker), target.loc );

			if ( Lang13.Bool( clone.l_hand ) ) {
				
				if ( !Lang13.Bool( Lang13.FindIn( clone.l_hand, GlobalVars.non_fakeattack_weapons ) ) ) {
					clone_weapon = clone.l_hand.name;
					((dynamic)F).weap = clone.l_hand;
				}
			} else if ( Lang13.Bool( clone.r_hand ) ) {
				
				if ( !Lang13.Bool( Lang13.FindIn( clone.r_hand, GlobalVars.non_fakeattack_weapons ) ) ) {
					clone_weapon = clone.r_hand.name;
					((dynamic)F).weap = clone.r_hand;
				}
			}
			((dynamic)F).name = clone.name;
			((dynamic)F).my_target = target;
			((dynamic)F).weapon_name = clone_weapon;
			target.hallucinations.Add( F );
			((dynamic)F).left = new Image( clone, null, null, null, GlobalVars.WEST );
			((dynamic)F).right = new Image( clone, null, null, null, GlobalVars.EAST );
			((dynamic)F).up = new Image( clone, null, null, null, GlobalVars.NORTH );
			((dynamic)F).down = new Image( clone, null, null, null, GlobalVars.SOUTH );
			((dynamic)F).updateimage();
			return;
		}

		// Function from file: Hallucination.dm
		public static void fake_blood( Ent_Dynamic target = null ) {
			Game_Data O = null;
			Image I = null;

			O = GlobalFuncs.getFromPool( typeof(Obj_Effect_Overlay), target.loc );
			((dynamic)O).name = "blood";
			I = new Image( "icons/effects/blood.dmi", O, "floor" + Rand13.Int( 1, 7 ), Lang13.DoubleNullable( ((dynamic)O).dir ), 1 );
			GlobalFuncs.to_chat( target, I );
			Task13.Schedule( 300, (Task13.Closure)(() => {
				GlobalFuncs.returnToPool( O );
				return;
			}));
			return;
		}

		// Function from file: helpers.dm
		public static bool airborne_can_reach( dynamic source = null, dynamic target = null, int? radius = null ) {
			radius = radius ?? 5;

			Obj dummy = null;
			int? i = null;
			bool rval = false;

			dummy = new Obj( source );
			dummy.flags = 256;
			dummy.pass_flags = 1;
			i = null;
			i = 0;

			while (( i ??0) < ( radius ??0)) {
				Map13.StepTowardsSimple( dummy, target );

				if ( !false ) {
					break;
				}
				i++;
			}
			rval = ((Ent_Static)target).Adjacent( dummy.loc );
			dummy.loc = null;
			dummy = null;
			return rval;
		}

		// Function from file: helpers.dm
		public static bool get_infection_chance( dynamic M = null, dynamic vector = null ) {
			vector = vector ?? "Airborne";

			int score = 0;

			score = 0;

			if ( !( M is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				
				if ( vector == "Airborne" ) {
					
					if ( Lang13.Bool( M.v_internal ) ) {
						score = 30;
					}

					if ( Lang13.Bool( M.wear_mask ) ) {
						score += 5;

						if ( M.wear_mask is Obj_Item_Clothing_Mask_Surgical && !Lang13.Bool( M.v_internal ) ) {
							score += 10;
						}
					}

					if ( M.wear_suit is Obj_Item_Clothing_Suit_Space && M.head is Obj_Item_Clothing_Head_Helmet_Space ) {
						score += 15;
					}

					if ( M.wear_suit is Obj_Item_Clothing_Suit_BioSuit && M.head is Obj_Item_Clothing_Head_BioHood ) {
						score += 15;
					}
				}

				if ( vector == "Contact" ) {
					
					if ( Lang13.Bool( M.gloves ) ) {
						score += 15;
					}

					if ( M.wear_suit is Obj_Item_Clothing_Suit_Space ) {
						score += 10;
					}

					if ( M.wear_suit is Obj_Item_Clothing_Suit_BioSuit ) {
						score += 10;
					}
				}
			}

			if ( score >= 30 ) {
				return false;
			} else if ( score == 25 && Rand13.PercentChance( 99 ) ) {
				return false;
			} else if ( score == 20 && Rand13.PercentChance( 95 ) ) {
				return false;
			} else if ( score == 15 && Rand13.PercentChance( 75 ) ) {
				return false;
			} else if ( score == 10 && Rand13.PercentChance( 55 ) ) {
				return false;
			} else if ( score == 5 && Rand13.PercentChance( 35 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: helpers.dm
		public static void infect_mob_random_greater( dynamic M = null ) {
			Disease2_Disease D = null;

			D = new Disease2_Disease( "infect_mob_random_greater" );
			D.makerandom( true );
			M.virus2["" + D.uniqueID] = D;
			return;
		}

		// Function from file: helpers.dm
		public static void infect_mob_random_lesser( dynamic M = null ) {
			Disease2_Disease D = null;

			D = new Disease2_Disease( "infect_mob_random_lesser" );
			D.makerandom();
			D.infectionchance = 1;
			M.virus2["" + D.uniqueID] = D;
			return;
		}

		// Function from file: helpers.dm
		public static bool infect_virus2( dynamic M = null, Disease2_Disease disease = null, bool? forced = null, string notes = null ) {
			forced = forced ?? false;
			notes = notes ?? "";

			Disease2_Disease D = null;

			
			if ( !( disease is Disease2_Disease ) ) {
				return false;
			}

			if ( !( M is Mob_Living_Carbon ) ) {
				return false;
			}
			Interface13.Stat( null, M.virus2.Contains( "" + disease.uniqueID ) );

			if ( !( M is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( ( ((int)( M.antibodies ??0 )) & ( disease.antigen != 0 ?1:0) ) != 0 ) {
				return false;
			}

			if ( Rand13.PercentChance( Convert.ToInt32( disease.infectionchance ) ) || forced == true ) {
				
				if ( !( forced == true ) && !GlobalFuncs.get_infection_chance( M, disease.spreadtype ) ) {
					return false;
				}
				D = disease.getcopy();
				D.minormutate();
				D.log += "<br />" + GlobalFuncs.timestamp() + " Infected " + GlobalFuncs.key_name( M ) + " " + notes;
				M.virus2["" + D.uniqueID] = D;
				return true;
			}
			return false;
		}

		// Function from file: helpers.dm
		public static bool isassembly( dynamic O = null ) {
			
			if ( O is Obj_Item_Device_Assembly ) {
				return true;
			}
			return false;
		}

		// Function from file: helpers.dm
		public static bool isigniter( dynamic O = null ) {
			
			if ( O is Obj_Item_Device_Assembly_Igniter ) {
				return true;
			}
			return false;
		}

		// Function from file: helpers.dm
		public static bool isprox( dynamic O = null ) {
			
			if ( O is Obj_Item_Device_Assembly_ProxSensor ) {
				return true;
			}
			return false;
		}

		// Function from file: helpers.dm
		public static bool issignaler( dynamic O = null ) {
			
			if ( O is Obj_Item_Device_Assembly_Signaler ) {
				return true;
			}
			return false;
		}

		// Function from file: hexadecimal.dm
		public static double hex2num( string hex = null ) {
			double num = 0;
			double power = 0;
			int? i = null;
			string _char = null;

			
			if ( !( hex is string ) ) {
				Task13.Crash( "hex2num not given a hexadecimal string argument (user error)" );
				return 0;
			}
			num = 0;
			power = 0;
			i = null;
			i = Lang13.Length( hex );

			while (( i ??0) > 0) {
				_char = String13.SubStr( hex, i ??0, ( i ??0) + 1 );

				switch ((string)( _char )) {
					case "0":
						power++;
						i--;
						continue;
						break;
					case "1":
					case "2":
					case "3":
					case "4":
					case "5":
					case "6":
					case "7":
					case "8":
					case "9":
						num += ( String13.ParseNumber( _char ) ??0) * Math.Pow( 16, power );
						break;
					case "A":
					case "a":
						num += Math.Pow( 16, power ) * 10;
						break;
					case "B":
					case "b":
						num += Math.Pow( 16, power ) * 11;
						break;
					case "C":
					case "c":
						num += Math.Pow( 16, power ) * 12;
						break;
					case "D":
					case "d":
						num += Math.Pow( 16, power ) * 13;
						break;
					case "E":
					case "e":
						num += Math.Pow( 16, power ) * 14;
						break;
					case "F":
					case "f":
						num += Math.Pow( 16, power ) * 15;
						break;
					default:
						Task13.Crash( "hex2num given non-hexadecimal string (user error)" );
						return 0;
						break;
				}
				power++;
				i--;
			}
			return num;
		}

		// Function from file: hexadecimal.dm
		public static string num2hex( dynamic num = null, int? placeholder = null ) {
			placeholder = placeholder ?? 2;

			string hex = null;
			double i = 0;
			double? power = null;
			int val = 0;

			
			if ( !Lang13.Bool( Lang13.IsNumber( num ) ) ) {
				Task13.Crash( "num2hex not given a numeric argument (user error)" );
				return null;
			}

			if ( !Lang13.Bool( num ) ) {
				return "0";
			}
			hex = "";
			i = 0;

			while (Math.Pow( 16, i ) < Convert.ToDouble( num )) {
				i++;
			}
			power = null;
			power = i - 1;

			while (( power ??0) >= 0) {
				val = Num13.Floor( Convert.ToDouble( num / Math.Pow( 16, power ??0 ) ) );
				num -= val * Math.Pow( 16, power ??0 );

				switch ((int)( val )) {
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
						hex += "" + val;
						break;
					case 10:
						hex += "A";
						break;
					case 11:
						hex += "B";
						break;
					case 12:
						hex += "C";
						break;
					case 13:
						hex += "D";
						break;
					case 14:
						hex += "E";
						break;
					case 15:
						hex += "F";
						break;
				}
				power--;
			}

			while (Lang13.Length( hex ) < ( placeholder ??0)) {
				hex = "0" + hex;
			}
			return hex;
		}

		// Function from file: holder2.dm
		public static bool check_if_greater_rights_than( dynamic other = null ) {
			
			if ( Task13.User != null && Task13.User.client != null ) {
				
				if ( Task13.User.client.holder != null ) {
					
					if ( !Lang13.Bool( other ) || !Lang13.Bool( other.holder ) ) {
						return true;
					}

					if ( Task13.User.client.holder.rights != other.holder.rights ) {
						
						if ( ( Task13.User.client.holder.rights & other.holder.rights ) == other.holder.rights ) {
							return true;
						}
					}
				}
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: Cannot proceed. They have more or equal rights to us.</font>" );
			}
			return false;
		}

		// Function from file: holder2.dm
		public static bool check_rights( int rights_required = 0, bool? show_msg = null ) {
			show_msg = show_msg ?? true;

			
			if ( Task13.User != null && Task13.User.client != null ) {
				
				if ( rights_required != 0 ) {
					
					if ( Task13.User.client.holder != null ) {
						
						if ( ( rights_required & Convert.ToInt32( Task13.User.client.holder.rights ) ) != 0 ) {
							return true;
						} else if ( show_msg == true ) {
							GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: You do not have sufficient rights to do that. You require one of the following flags:" + GlobalFuncs.rights2text( rights_required, " " ) + ".</font>" );
						}
					}
				} else if ( Task13.User.client.holder != null ) {
					return true;
				} else if ( show_msg == true ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: You are not an admin.</font>" );
				}
			}
			return false;
		}

		// Function from file: Holidays.dm
		public static void Get_Holiday(  ) {
			double? YY = null;
			double? MM = null;
			double? DD = null;

			
			if ( !Lang13.Bool( GlobalVars.Holiday ) ) {
				return;
			}
			GlobalVars.Holiday = null;
			YY = String13.ParseNumber( String13.FormatTime( Game13.timeofday, "YY" ) );
			MM = String13.ParseNumber( String13.FormatTime( Game13.timeofday, "MM" ) );
			DD = String13.ParseNumber( String13.FormatTime( Game13.timeofday, "DD" ) );

			switch ((double?)( MM )) {
				case 1:
					
					switch ((double?)( DD )) {
						case 1:
							GlobalVars.Holiday = "New Year's Day";
							break;
					}
					break;
				case 2:
					
					switch ((double?)( DD )) {
						case 2:
							GlobalVars.Holiday = "Groundhog Day";
							break;
						case 14:
							GlobalVars.Holiday = "Valentine's Day";
							break;
						case 17:
							GlobalVars.Holiday = "Random Acts of Kindness Day";
							break;
					}
					break;
				case 3:
					
					switch ((double?)( DD )) {
						case 14:
							GlobalVars.Holiday = "Pi Day";
							break;
						case 17:
							GlobalVars.Holiday = "St. Patrick's Day";
							break;
						case 27:
							
							if ( YY == 16 ) {
								GlobalVars.Holiday = "Easter";
							}
							break;
						case 31:
							
							if ( YY == 13 ) {
								GlobalVars.Holiday = "Easter";
							}
							break;
					}
					break;
				case 4:
					
					switch ((double?)( DD )) {
						case 1:
							GlobalVars.Holiday = "April Fool's Day";

							if ( YY == 18 && Rand13.PercentChance( 50 ) ) {
								GlobalVars.Holiday = "Easter";
							}
							break;
						case 2:
							GlobalVars.Holiday = "Autism Awareness Day";
							break;
						case 5:
							
							if ( YY == 15 ) {
								GlobalVars.Holiday = "Easter";
							}
							break;
						case 16:
							
							if ( YY == 17 ) {
								GlobalVars.Holiday = "Easter";
							}
							break;
						case 20:
							GlobalVars.Holiday = "Four-Twenty";

							if ( YY == 14 && Rand13.PercentChance( 50 ) ) {
								GlobalVars.Holiday = "Easter";
							}
							break;
						case 22:
							GlobalVars.Holiday = "Earth Day";
							break;
					}
					break;
				case 5:
					
					switch ((double?)( DD )) {
						case 1:
							GlobalVars.Holiday = "Labour Day";
							break;
						case 4:
							GlobalVars.Holiday = "FireFighter's Day";
							break;
						case 12:
							GlobalVars.Holiday = "Owl and Pussycat Day";
							break;
					}
					break;
				case 6:
					
					switch ((double?)( DD )) {
						case 18:
							GlobalVars.Holiday = "International Picnic Day";
							break;
						case 21:
							GlobalVars.Holiday = "Summer Solstice";
							break;
					}
					break;
				case 7:
					
					switch ((double?)( DD )) {
						case 1:
							GlobalVars.Holiday = "Doctor's Day";
							break;
						case 2:
							GlobalVars.Holiday = "UFO Day";
							break;
						case 8:
							GlobalVars.Holiday = "Writer's Day";
							break;
						case 30:
							GlobalVars.Holiday = "Friendship Day";
							break;
					}
					break;
				case 8:
					
					switch ((double?)( DD )) {
						case 5:
							GlobalVars.Holiday = "Beer Day";
							break;
					}
					break;
				case 9:
					
					switch ((double?)( DD )) {
						case 19:
							GlobalVars.Holiday = "Talk-Like-a-Pirate Day";
							break;
						case 28:
							GlobalVars.Holiday = "Stupid-Questions Day";
							break;
					}
					break;
				case 10:
					
					switch ((double?)( DD )) {
						case 4:
							GlobalVars.Holiday = "Animal's Day";
							break;
						case 7:
							GlobalVars.Holiday = "Smiling Day";
							break;
						case 16:
							GlobalVars.Holiday = "Boss' Day";
							break;
						case 31:
							GlobalVars.Holiday = "Halloween";
							break;
					}
					break;
				case 11:
					
					switch ((double?)( DD )) {
						case 1:
							GlobalVars.Holiday = "Vegan Day";
							break;
						case 13:
							GlobalVars.Holiday = "Kindness Day";
							break;
						case 19:
							GlobalVars.Holiday = "Flowers Day";
							break;
						case 21:
							GlobalVars.Holiday = "Saying-'Hello' Day";
							break;
					}
					break;
				case 12:
					
					switch ((double?)( DD )) {
						case 10:
							GlobalVars.Holiday = "Human-Rights Day";
							break;
						case 14:
							GlobalVars.Holiday = "Monkey Day";
							break;
						case 21:
							
							if ( YY == 12 ) {
								GlobalVars.Holiday = "End of the World";
							}
							break;
						case 22:
							GlobalVars.Holiday = "Orgasming Day";
							break;
						case 24:
							GlobalVars.Holiday = "Christmas Eve";
							break;
						case 25:
							GlobalVars.Holiday = "Christmas";
							break;
						case 26:
							GlobalVars.Holiday = "Boxing Day";
							break;
						case 31:
							GlobalVars.Holiday = "New Year's Eve";
							break;
					}
					break;
			}

			if ( !Lang13.Bool( GlobalVars.Holiday ) ) {
				
				if ( DD == 13 ) {
					
					if ( String13.FormatTime( Game13.timeofday, "DDD" ) == "Fri" ) {
						GlobalVars.Holiday = "Friday the 13th";
					}
				}
			}
			return;
		}

		// Function from file: Holidays.dm
		public static void Holiday_Game_Start(  ) {
			
			if ( Lang13.Bool( GlobalVars.Holiday ) ) {
				GlobalFuncs.to_chat( typeof(Game13), "<font color='blue'>and...</font>" );

				if ( GlobalVars.Holiday == "Autism Awareness Day" ) {
					GlobalFuncs.to_chat( typeof(Game13), "<h4>Happy <span class='sans'>Autism Awareness Day</span> Everybody!</h4>" );
				} else {
					GlobalFuncs.to_chat( typeof(Game13), "<h4>Happy " + GlobalVars.Holiday + " Everybody!</h4>" );
				}

				dynamic _a = GlobalVars.Holiday; // Was a switch-case, sorry for the mess.
				if ( _a=="Easter" ) {
					
				} else if ( _a=="Christmas Eve" || _a=="Christmas" ) {
					GlobalFuncs.Christmas_Game_Start();
				}
			}
			return;
		}

		// Function from file: hooks.dm
		public static bool callHook( string hook = null ) {
			Type hook_path = null;
			dynamic caller = null;
			bool status = false;
			dynamic P = null;

			hook_path = Lang13.FindClass( "/hook/" + hook );

			if ( !( hook_path != null ) ) {
				GlobalFuncs.error( "Invalid hook '/hook/" + hook + "' called." );
				return false;
			}
			caller = Lang13.Call( hook_path );
			status = true;

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( "" + hook_path + "/proc" ) )) {
				P = _a;
				

				if ( !Lang13.Bool( Lang13.Call( Lang13.BindFunc( caller, P ) ) ) ) {
					GlobalFuncs.error( "Hook '" + P + "' failed or runtimed." );
					status = false;
				}
			}
			return status;
		}

		// Function from file: hooks.dm
		public static void CallHook( string name = null, ByTable args = null ) {
			Hook hook = null;
			HookHandler hook_handler = null;

			hook = GlobalVars.hooks[name];

			if ( !( hook != null ) ) {
				return;
			}

			if ( hook.Called( args ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( hook.handlers, typeof(HookHandler) )) {
				hook_handler = _a;
				
				Lang13.Call( Lang13.BindFunc( hook_handler, "On" + hook.name ), args );
			}
			return;
		}

		// Function from file: hooks.dm
		public static void SetupHooks(  ) {
			dynamic hook_path = null;
			dynamic hook = null;
			dynamic hook_path2 = null;
			dynamic hook_handler = null;
			dynamic name = null;
			dynamic hook2 = null;
			Hook hook3 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Hook) ) )) {
				hook_path = _a;
				
				hook = Lang13.Call( hook_path );
				GlobalVars.hooks[hook.name] = hook;
			}

			foreach (dynamic _c in Lang13.Enumerate( Lang13.GetTypes( typeof(HookHandler) ) )) {
				hook_path2 = _c;
				
				hook_handler = Lang13.Call( hook_path2 );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.hooks )) {
					name = _b;
					

					if ( Lang13.HasCall( hook_handler, "On" + name ) ) {
						hook2 = GlobalVars.hooks[name];
						hook2.handlers += hook_handler;
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.hooks, typeof(Hook) )) {
				hook3 = _d;
				
				hook3.Setup();
			}
			return;
		}

		// Function from file: IconProcs.dm
		public static string BlendRGB( string rgb1 = null, string rgb2 = null, double amount = 0 ) {
			ByTable RGB1 = null;
			ByTable RGB2 = null;
			bool usealpha = false;
			double r = 0;
			double g = 0;
			double b = 0;
			double? alpha = null;

			RGB1 = GlobalFuncs.ReadRGB( rgb1 );
			RGB2 = GlobalFuncs.ReadRGB( rgb2 );

			if ( RGB1.len < RGB2.len ) {
				RGB1.Add( 255 );
			} else if ( RGB2.len < RGB1.len ) {
				RGB2.Add( 255 );
			}
			usealpha = RGB1.len > 3;
			r = Num13.Round( Convert.ToDouble( RGB1[1] + ( RGB2[1] - RGB1[1] ) * amount ), 1 );
			g = Num13.Round( Convert.ToDouble( RGB1[2] + ( RGB2[2] - RGB1[2] ) * amount ), 1 );
			b = Num13.Round( Convert.ToDouble( RGB1[3] + ( RGB2[3] - RGB1[3] ) * amount ), 1 );
			alpha = ( usealpha ? Num13.Round( Convert.ToDouble( RGB1[4] + ( RGB2[4] - RGB1[4] ) * amount ), 1 ) : 0 );
			return ( alpha == null ? String13.ColorCode( ((int)( r )), ((int)( g )), ((int)( b )) ) : String13.ColorCode( ((int)( r )), ((int)( g )), ((int)( b )), ((int)( alpha ??0 )) ) );
		}

		// Function from file: IconProcs.dm
		public static string hsv( double hue = 0, double sat = 0, int val = 0, int? alpha = null ) {
			string _default = null;

			
			if ( hue < 0 || hue >= 1536 ) {
				hue %= 1536;
			}

			if ( hue < 0 ) {
				hue += 1536;
			}

			if ( ( ((int)( hue )) & 255 ) == 255 ) {
				hue++;

				if ( hue >= 1536 ) {
					hue = 0;
				}
			}

			if ( sat < 0 ) {
				sat = 0;
			}

			if ( sat > 255 ) {
				sat = 255;
			}

			if ( val < 0 ) {
				val = 0;
			}

			if ( val > 255 ) {
				val = 255;
			}
			_default = "#";
			_default += String13.GetCharFromCode( ( ((int)( hue )) >> 8 & 15 ) + ( ( ((int)( hue )) >> 8 & 15 ) < 10 ? 48 : 87 ) );
			_default += String13.GetCharFromCode( ( ((int)( hue )) >> 4 & 15 ) + ( ( ((int)( hue )) >> 4 & 15 ) < 10 ? 48 : 87 ) );
			_default += String13.GetCharFromCode( ( ((int)( hue )) & 15 ) + ( ( ((int)( hue )) & 15 ) < 10 ? 48 : 87 ) );
			_default += String13.GetCharFromCode( ( ((int)( sat )) >> 4 & 15 ) + ( ( ((int)( sat )) >> 4 & 15 ) < 10 ? 48 : 87 ) );
			_default += String13.GetCharFromCode( ( ((int)( sat )) & 15 ) + ( ( ((int)( sat )) & 15 ) < 10 ? 48 : 87 ) );
			_default += String13.GetCharFromCode( ( val >> 4 & 15 ) + ( ( val >> 4 & 15 ) < 10 ? 48 : 87 ) );
			_default += String13.GetCharFromCode( ( val & 15 ) + ( ( val & 15 ) < 10 ? 48 : 87 ) );

			if ( !( alpha == null ) ) {
				
				if ( ( alpha ??0) < 0 ) {
					alpha = 0;
				}

				if ( ( alpha ??0) > 255 ) {
					alpha = 255;
				}
				_default += String13.GetCharFromCode( ( ( alpha ??0) >> 4 & 15 ) + ( ( ( alpha ??0) >> 4 & 15 ) < 10 ? 48 : 87 ) );
				_default += String13.GetCharFromCode( ( ( alpha ??0) & 15 ) + ( ( ( alpha ??0) & 15 ) < 10 ? 48 : 87 ) );
			}
			return _default;
		}

		// Function from file: IconProcs.dm
		public static ByTable ReadHSV( string hsv = null ) {
			ByTable _default = null;

			int? i = null;
			int start = 0;
			int ch = 0;
			int which = 0;
			int hue = 0;
			int sat = 0;
			int val = 0;
			int alpha = 0;
			bool usealpha = false;
			int digits = 0;

			
			if ( !Lang13.Bool( hsv ) ) {
				return _default;
			}
			i = 1;
			start = 1;

			if ( String13.GetCharCode( hsv, null ) == 35 ) {
				start++;
			}
			which = 0;
			hue = 0;
			sat = 0;
			val = 0;
			alpha = 0;
			digits = 0;
			i = start;

			while (( i ??0) <= Lang13.Length( hsv )) {
				ch = String13.GetCharCode( hsv, i );

				if ( ch < 48 || ch > 57 && ch < 65 || ch > 70 && ch < 97 || ch > 102 ) {
					break;
				}
				digits++;

				if ( digits == 9 ) {
					break;
				}
				i++;
			}

			if ( digits > 7 ) {
				usealpha = true;
			}

			if ( digits <= 4 ) {
				which++;
			}

			if ( digits <= 2 ) {
				which++;
			}
			i = start;

			while (digits > 0) {
				ch = String13.GetCharCode( hsv, i );

				if ( ch >= 48 && ch <= 57 ) {
					ch -= 48;
				} else if ( ch >= 65 && ch <= 70 ) {
					ch -= 55;
				} else if ( ch >= 97 && ch <= 102 ) {
					ch -= 87;
				} else {
					break;
				}
				digits--;

				switch ((int)( which )) {
					case 0:
						hue = hue << 4 | ch;

						if ( digits == ( usealpha ? 6 : 4 ) ) {
							which++;
						}
						break;
					case 1:
						sat = sat << 4 | ch;

						if ( digits == ( usealpha ? 4 : 2 ) ) {
							which++;
						}
						break;
					case 2:
						val = val << 4 | ch;

						if ( digits == ( usealpha ? 2 : 0 ) ) {
							which++;
						}
						break;
					case 3:
						alpha = alpha << 4 | ch;
						break;
				}
				i++;
			}
			_default = new ByTable(new object [] { hue, sat, val });

			if ( usealpha ) {
				_default.Add( alpha );
			}
			return _default;
		}

		// Function from file: IconProcs.dm
		public static ByTable ReadRGB( string rgb = null ) {
			ByTable _default = null;

			int? i = null;
			int start = 0;
			int ch = 0;
			int which = 0;
			int r = 0;
			int g = 0;
			int b = 0;
			int alpha = 0;
			bool usealpha = false;
			int digits = 0;
			bool single = false;

			
			if ( !Lang13.Bool( rgb ) ) {
				return _default;
			}
			i = 1;
			start = 1;

			if ( String13.GetCharCode( rgb, null ) == 35 ) {
				start++;
			}
			which = 0;
			r = 0;
			g = 0;
			b = 0;
			alpha = 0;
			digits = 0;
			i = start;

			while (( i ??0) <= Lang13.Length( rgb )) {
				ch = String13.GetCharCode( rgb, i );

				if ( ch < 48 || ch > 57 && ch < 65 || ch > 70 && ch < 97 || ch > 102 ) {
					break;
				}
				digits++;

				if ( digits == 8 ) {
					break;
				}
				i++;
			}
			single = digits < 6;

			if ( digits != 3 && digits != 4 && digits != 6 && digits != 8 ) {
				return _default;
			}

			if ( digits == 4 || digits == 8 ) {
				usealpha = true;
			}
			i = start;

			while (digits > 0) {
				ch = String13.GetCharCode( rgb, i );

				if ( ch >= 48 && ch <= 57 ) {
					ch -= 48;
				} else if ( ch >= 65 && ch <= 70 ) {
					ch -= 55;
				} else if ( ch >= 97 && ch <= 102 ) {
					ch -= 87;
				} else {
					break;
				}
				digits--;

				switch ((int)( which )) {
					case 0:
						r = r << 4 | ch;

						if ( single ) {
							r |= r << 4;
							which++;
						} else if ( !( ( digits & 1 ) != 0 ) ) {
							which++;
						}
						break;
					case 1:
						g = g << 4 | ch;

						if ( single ) {
							g |= g << 4;
							which++;
						} else if ( !( ( digits & 1 ) != 0 ) ) {
							which++;
						}
						break;
					case 2:
						b = b << 4 | ch;

						if ( single ) {
							b |= b << 4;
							which++;
						} else if ( !( ( digits & 1 ) != 0 ) ) {
							which++;
						}
						break;
					case 3:
						alpha = alpha << 4 | ch;

						if ( single ) {
							alpha |= alpha << 4;
						}
						break;
				}
				i++;
			}
			_default = new ByTable(new object [] { r, g, b });

			if ( usealpha ) {
				_default.Add( alpha );
			}
			return _default;
		}

		// Function from file: IconProcs.dm
		public static string RGBtoHSV( string rgb = null ) {
			ByTable RGB = null;
			int r = 0;
			int g = 0;
			int b = 0;
			int hi = 0;
			int lo = 0;
			int val = 0;
			double sat = 0;
			double hue = 0;
			int dir = 0;
			int mid = 0;

			
			if ( !Lang13.Bool( rgb ) ) {
				return "#0000000";
			}
			RGB = GlobalFuncs.ReadRGB( rgb );

			if ( !( RGB != null ) ) {
				return "#0000000";
			}
			r = Convert.ToInt32( RGB[1] );
			g = Convert.ToInt32( RGB[2] );
			b = Convert.ToInt32( RGB[3] );
			hi = Num13.MaxInt( r, g, b );
			lo = Num13.MinInt( r, g, b );
			val = hi;
			sat = ( hi != 0 ? Num13.Round( ( hi - lo ) * 255 / hi, 1 ) : 0 );
			hue = 0;

			if ( sat != 0 ) {
				
				if ( hi == r ) {
					
					if ( lo == b ) {
						hue = 0;
						dir = 1;
						mid = g;
					} else {
						hue = 1535;
						dir = -1;
						mid = b;
					}
				} else if ( hi == g ) {
					
					if ( lo == r ) {
						hue = 512;
						dir = 1;
						mid = b;
					} else {
						hue = 511;
						dir = -1;
						mid = r;
					}
				} else if ( hi == b ) {
					
					if ( lo == g ) {
						hue = 1024;
						dir = 1;
						mid = r;
					} else {
						hue = 1023;
						dir = -1;
						mid = g;
					}
				}
				hue += dir * Num13.Round( ( mid - lo ) * 255 / ( hi - lo ), 1 );
			}
			return GlobalFuncs.hsv( hue, sat, val, Lang13.IntNullable( ( RGB.len > 3 ? RGB[4] : null ) ) );
		}

		// Function from file: icons.dm
		public static string adjust_brightness( string color = null, int value = 0 ) {
			ByTable RGB = null;

			
			if ( !Lang13.Bool( color ) ) {
				return "#FFFFFF";
			}

			if ( !( value != 0 ) ) {
				return color;
			}
			RGB = GlobalFuncs.ReadRGB( color );
			RGB[1] = ( Convert.ToDouble( RGB[1] + value ) <= 0 ? 0 : ( Convert.ToDouble( RGB[1] + value ) >= 255 ? 255 : Convert.ToInt32( RGB[1] + value ) ) );
			RGB[2] = ( Convert.ToDouble( RGB[2] + value ) <= 0 ? 0 : ( Convert.ToDouble( RGB[2] + value ) >= 255 ? 255 : Convert.ToInt32( RGB[2] + value ) ) );
			RGB[3] = ( Convert.ToDouble( RGB[3] + value ) <= 0 ? 0 : ( Convert.ToDouble( RGB[3] + value ) >= 255 ? 255 : Convert.ToInt32( RGB[3] + value ) ) );
			return String13.ColorCode( Convert.ToInt32( RGB[1] ), Convert.ToInt32( RGB[2] ), Convert.ToInt32( RGB[3] ) );
		}

		// Function from file: icons.dm
		public static string AverageColor( Icon I = null, bool? accurate = null, bool? ignoreGreyscale = null ) {
			accurate = accurate ?? false;
			ignoreGreyscale = ignoreGreyscale ?? false;

			ByTable colors = null;
			ByTable colorsum = null;
			ByTable RGB = null;
			int total = 0;
			string final_average = null;
			double i = 0;
			double i2 = 0;

			colors = GlobalFuncs.ListColors( I, ignoreGreyscale );

			if ( !( colors.len != 0 ) ) {
				return null;
			}
			colorsum = new ByTable(new object [] { 0, 0, 0 });
			RGB = new ByTable(new object [] { 0, 0, 0 });
			total = colors.len;

			if ( accurate == true ) {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, total )) {
					i = _a;
					
					RGB = GlobalFuncs.ReadRGB( colors[i] );
					colorsum[1] += RGB[1] * RGB[1];
					colorsum[2] += RGB[2] * RGB[2];
					colorsum[3] += RGB[3] * RGB[3];
				}
				final_average = String13.ColorCode( ((int)( Math.Sqrt( Convert.ToDouble( colorsum[1] / total ) ) )), ((int)( Math.Sqrt( Convert.ToDouble( colorsum[2] / total ) ) )), ((int)( Math.Sqrt( Convert.ToDouble( colorsum[3] / total ) ) )) );
			} else {
				
				foreach (dynamic _b in Lang13.IterateRange( 1, total )) {
					i2 = _b;
					
					RGB = GlobalFuncs.ReadRGB( colors[i2] );
					colorsum[1] += RGB[1];
					colorsum[2] += RGB[2];
					colorsum[3] += RGB[3];
				}
				final_average = String13.ColorCode( Convert.ToInt32( colorsum[1] / total ), Convert.ToInt32( colorsum[2] / total ), Convert.ToInt32( colorsum[3] / total ) );
			}
			return final_average;
		}

		// Function from file: icons.dm
		public static double? empty_Y_space( Icon I = null ) {
			double? y_pixel = null;
			double? x_pixel = null;

			
			foreach (dynamic _b in Lang13.IterateRange( 1, I.Height() )) {
				y_pixel = _b;
				

				foreach (dynamic _a in Lang13.IterateRange( 1, I.Width() )) {
					x_pixel = _a;
					

					if ( Lang13.Bool( I.GetPixel( x_pixel, y_pixel ) ) ) {
						return ( y_pixel ??0) - 1;
					}
				}
			}
			return null;
		}

		// Function from file: icons.dm
		public static Icon getBlankIcon( Icon A = null, bool? safety = null ) {
			safety = safety ?? true;

			Icon flat_icon = null;
			Icon blank_icon = null;

			flat_icon = ( safety == true ? A : new Icon( A ) );
			flat_icon.Blend( "#ffffff" );
			flat_icon.BecomeAlphaMask();
			blank_icon = new Icon( "icons/effects/effects.dmi", "blank_base" );
			blank_icon.AddAlphaMask( flat_icon );
			return blank_icon;
		}

		// Function from file: icons.dm
		public static Icon getHologramIcon( Icon A = null, bool? safety = null ) {
			safety = safety ?? true;

			Icon flat_icon = null;
			Icon alpha_mask = null;

			flat_icon = ( safety == true ? A : new Icon( A ) );
			flat_icon.ColorTone( "#7db4e1" );
			flat_icon.ChangeOpacity( 0.5 );
			alpha_mask = new Icon( "icons/effects/effects.dmi", "scanline" );
			flat_icon.AddAlphaMask( alpha_mask );
			return flat_icon;
		}

		// Function from file: icons.dm
		public static Icon getIconMask( Mob A = null ) {
			Icon alpha_mask = null;
			dynamic I = null;
			Icon image_overlay = null;

			alpha_mask = new Icon( A.icon, A.icon_state );

			foreach (dynamic _a in Lang13.Enumerate( A.overlays )) {
				I = _a;
				

				if ( Convert.ToDouble( I.layer ) > A.layer ) {
					continue;
				}
				image_overlay = new Icon( I.icon, I.icon_state );
				alpha_mask.Blend( image_overlay, 5 );
			}
			return alpha_mask;
		}

		// Function from file: icons.dm
		public static Image getLetterImage( Mob_Living A = null, string letter = null, int? uppercase = null ) {
			letter = letter ?? "";
			uppercase = uppercase ?? 0;

			Icon atom_icon = null;
			Image text_image = null;

			
			if ( !( A != null ) ) {
				return null;
			}
			atom_icon = new Icon( A.icon, A.icon_state );

			if ( !Lang13.Bool( letter ) ) {
				letter = String13.SubStr( A.name, 1, 2 );

				if ( uppercase == 1 ) {
					letter = String13.ToUpper( letter );
				} else if ( uppercase == -1 ) {
					letter = String13.ToLower( letter );
				}
			}
			text_image = new Image( null, A );
			text_image.maptext = "<font size = 4><b>" + letter + "</b></font>";
			text_image.color = GlobalFuncs.AverageColor( atom_icon );
			text_image.pixel_x = 6;
			text_image.pixel_y = 5;
			Lang13.Delete( atom_icon );
			atom_icon = null;
			return text_image;
		}

		// Function from file: icons.dm
		public static Icon getStaticIcon( Icon A = null, bool? safety = null ) {
			safety = safety ?? true;

			Icon flat_icon = null;
			Icon static_icon = null;

			flat_icon = ( safety == true ? A : new Icon( A ) );
			flat_icon.Blend( "#ffffff" );
			flat_icon.BecomeAlphaMask();
			static_icon = new Icon( "icons/effects/effects.dmi", "static_base" );
			static_icon.AddAlphaMask( flat_icon );
			return static_icon;
		}

		// Function from file: icons.dm
		public static ByTable ListColors( Icon I = null, bool? ignoreGreyscale = null ) {
			ignoreGreyscale = ignoreGreyscale ?? false;

			ByTable colors = null;
			double? x_pixel = null;
			double? y_pixel = null;
			string this_color = null;

			colors = new ByTable();

			foreach (dynamic _b in Lang13.IterateRange( 1, I.Width() )) {
				x_pixel = _b;
				

				foreach (dynamic _a in Lang13.IterateRange( 1, I.Height() )) {
					y_pixel = _a;
					
					this_color = I.GetPixel( x_pixel, y_pixel );

					if ( Lang13.Bool( this_color ) ) {
						
						if ( ignoreGreyscale == true && Lang13.Bool( GlobalFuncs.ReadHSV( GlobalFuncs.RGBtoHSV( this_color ) )[2] ) == false ) {
							continue;
						}
						colors.Add( this_color );
					}
				}
			}
			return colors;
		}

		// Function from file: IDE.dm
		public static bool telecomms_check( Mob mob = null ) {
			
			if ( mob != null && mob.machine is Obj_Machinery_Computer_Telecomms_Traffic && GlobalFuncs.in_range( mob.machine, mob ) || mob is Mob_Living_Silicon && mob.machine is Obj_Machinery_Computer_Telecomms_Traffic ) {
				return true;
			}
			return false;
		}

		// Function from file: immovablerod.dm
		public static void immovablerod(  ) {
			int startx = 0;
			int starty = 0;
			int endy = 0;
			int endx = 0;
			dynamic startside = null;

			startx = 0;
			starty = 0;
			endy = 0;
			endx = 0;
			startside = Rand13.PickFromTable( GlobalVars.cardinal );

			dynamic _a = startside; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				starty = Game13.map_size_y - 7 - 5;
				startx = Rand13.Int( 12, Game13.map_size_x - 7 - 5 );
			} else if ( _a==4 ) {
				starty = Rand13.Int( 12, Game13.map_size_y - 7 - 5 );
				startx = Game13.map_size_x - 7 - 5;
			} else if ( _a==2 ) {
				starty = 12;
				startx = Rand13.Int( 12, Game13.map_size_x - 7 - 5 );
			} else if ( _a==8 ) {
				starty = Rand13.Int( 12, Game13.map_size_y - 7 - 5 );
				startx = 12;
			}
			endx = Rand13.Int( ((int)( Game13.map_size_x / 2 - 30 )), ((int)( Game13.map_size_x / 2 + 30 )) );
			endy = Rand13.Int( ((int)( Game13.map_size_y / 2 - 30 )), ((int)( Game13.map_size_y / 2 + 30 )) );
			new Obj_Item_Projectile_Immovablerod( Map13.GetTile( startx, starty, 1 ), Map13.GetTile( endx, endy, 1 ) );
			return;
		}

		// Function from file: interactive_map.dm
		public static void generateMiniMap( double z = 0, int? x1 = null, int? y1 = null, int? x2 = null, int? y2 = null ) {
			x1 = x1 ?? 1;
			y1 = y1 ?? 1;
			x2 = x2 ?? Game13.map_size_x;
			y2 = y2 ?? Game13.map_size_y;

			string result_path = null;
			string hash_path = null;
			ByTable tiles = null;
			string hash = null;
			string temp = null;
			dynamic obj = null;
			dynamic tile = null;
			Icon map_icon = null;
			int i = 0;
			Icon turf_icon = null;
			Icon obj_icon = null;
			string old_icon = null;
			string old_icon_state = null;
			int? old_dir = null;
			string new_icon = null;
			string new_icon_state = null;
			int? new_dir = null;
			dynamic tile2 = null;
			Icon result_icon = null;

			result_path = "" + GlobalFuncs.getMinimapFile( z ) + ".png";
			hash_path = "" + GlobalFuncs.getMinimapFile( z ) + ".md5";
			tiles = Map13.FetchInBlock( Map13.GetTile( x1 ??0, y1 ??0, ((int)( z )) ), Map13.GetTile( x2 ??0, y2 ??0, ((int)( z )) ) );
			hash = "";

			foreach (dynamic _a in Lang13.Enumerate( tiles )) {
				tile = _a;
				

				if ( tile.loc is Zone_Asteroid || tile.loc is Zone_Mine_Unexplored || tile is Tile_Unsimulated_Mineral || tile.loc.type == typeof(Zone) && tile is Tile_Unsimulated_Floor_Asteroid ) {
					temp = "/area/asteroid";
				} else if ( tile.loc is Zone_Mine && tile is Tile_Unsimulated_Floor_Asteroid ) {
					temp = "/area/mine/explored";
				} else if ( tile.loc.type == typeof(Zone_Start) || tile.type == typeof(Tile_Space) && !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), tile ) ) || tile is Tile_Space_Transit ) {
					temp = "/turf/space";

					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Catwalk), tile ) ) ) {
						
					}
				} else if ( tile.type == typeof(Tile_Space) ) {
					
					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Catwalk), tile ) ) ) {
						temp = "/obj/structure/lattice/catwalk";
					} else {
						temp = "/obj/structure/lattice";
					}
				} else if ( tile.type == typeof(Tile_Simulated_Floor_Plating) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Shuttle_Window), tile ) ) ) {
					temp = "/obj/structure/window/shuttle";
				} else {
					temp = "" + tile.icon + tile.icon_state + tile.dir;
				}
				obj = Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile );

				if ( Lang13.Bool( obj ) ) {
					temp = "" + temp + "/obj/structure/transit_tube" + obj.icon_state + obj.dir;
				}
				hash = Num13.Md5( "" + hash + temp );
			}

			if ( File13.Exists( result_path ) ) {
				
				if ( !File13.Exists( hash_path ) || GlobalFuncs.trim( File13.Read( hash_path ) ) != hash ) {
					File13.Delete( result_path );
					File13.Delete( hash_path );
				}
			}

			if ( !File13.Exists( result_path ) ) {
				
				if ( !( ( x1 ??0) > 0 ) ) {
					Task13.Crash( "" + "code/modules/html_interface/map/interactive_map.dm" + ":" + 144 + ":Assertion Failed: " + "x1 > 0" );
				}

				if ( !( ( y1 ??0) > 0 ) ) {
					Task13.Crash( "" + "code/modules/html_interface/map/interactive_map.dm" + ":" + 145 + ":Assertion Failed: " + "y1 > 0" );
				}

				if ( !( ( x2 ??0) <= Game13.map_size_x ) ) {
					Task13.Crash( "" + "code/modules/html_interface/map/interactive_map.dm" + ":" + 146 + ":Assertion Failed: " + "x2 <= world.maxx" );
				}

				if ( !( ( y2 ??0) <= Game13.map_size_y ) ) {
					Task13.Crash( "" + "code/modules/html_interface/map/interactive_map.dm" + ":" + 147 + ":Assertion Failed: " + "y2 <= world.maxy" );
				}
				map_icon = new Icon( "html/mapbase1024.png" );

				if ( !( map_icon.Width() == GlobalVars.MAX_ICON_DIMENSION && map_icon.Height() == GlobalVars.MAX_ICON_DIMENSION ) ) {
					Task13.Crash( "" + "code/modules/html_interface/map/interactive_map.dm" + ":" + 153 + ":Assertion Failed: " + "map_icon.Width() == MAX_ICON_DIMENSION && map_icon.Height() == MAX_ICON_DIMENSION" );
				}
				Game13.log.WriteMsg( "## TESTING: " + ( "MINIMAP: Generating minimap for z-level " + z + "." ) );
				i = 0;
				turf_icon = null;
				obj_icon = null;
				old_icon = null;
				old_icon_state = null;
				old_dir = null;
				new_icon = null;
				new_icon_state = null;
				new_dir = null;

				foreach (dynamic _b in Lang13.Enumerate( tiles )) {
					tile2 = _b;
					

					if ( tile2.loc.type != typeof(Zone_Start) && ( tile2.type != typeof(Tile_Space) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), tile2 ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile2 ) ) ) && !( tile2 is Tile_Space_Transit ) ) {
						
						if ( tile2.loc is Zone_Asteroid || tile2.loc is Zone_Mine_Unexplored || tile2 is Tile_Unsimulated_Mineral || tile2.loc.type == typeof(Zone) && tile2 is Tile_Unsimulated_Floor_Asteroid ) {
							new_icon = "icons/turf/walls.dmi";
							new_icon_state = "rock";
							new_dir = 2;
						} else if ( tile2.loc is Zone_Mine && tile2 is Tile_Unsimulated_Floor_Asteroid ) {
							new_icon = "icons/turf/floors.dmi";
							new_icon_state = "asteroid";
							new_dir = 2;
						} else if ( tile2.type == typeof(Tile_Space) ) {
							obj = Lang13.FindIn( typeof(Obj_Structure_Lattice), tile2 );

							if ( !Lang13.Bool( obj ) ) {
								obj = Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile2 );
							}

							if ( !( obj != null ) ) {
								Task13.Crash( "" + "code/modules/html_interface/map/interactive_map.dm" + ":" + 182 + ":Assertion Failed: " + "obj != null" );
							}

							if ( Lang13.Bool( obj ) ) {
								new_icon = obj.icon;
								new_dir = Lang13.IntNullable( obj.dir );
								new_icon_state = obj.icon_state;
							}
						} else if ( tile2.type == typeof(Tile_Simulated_Floor_Plating) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Shuttle_Window), tile2 ) ) ) {
							new_icon = "icons/obj/structures.dmi";
							new_dir = 2;
							new_icon_state = "swindow";
						} else {
							new_icon = tile2.icon;
							new_icon_state = tile2.icon_state;
							new_dir = Lang13.IntNullable( tile2.dir );
						}

						if ( new_icon != old_icon || new_icon_state != old_icon_state || new_dir != old_dir ) {
							old_icon = new_icon;
							old_icon_state = new_icon_state;
							old_dir = new_dir;
							turf_icon = new Icon( new_icon, new_icon_state, new_dir, 1, false );
							turf_icon.Scale( GlobalVars.ICON_SIZE, GlobalVars.ICON_SIZE );
						}

						if ( tile2.type != typeof(Tile_Space) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), tile2 ) ) ) {
							obj = Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile2 );

							if ( Lang13.Bool( obj ) ) {
								obj_icon = new Icon( obj.icon, obj.icon_state, obj.dir, 1, false );
								obj_icon.Scale( GlobalVars.ICON_SIZE, GlobalVars.ICON_SIZE );
								turf_icon.Blend( obj_icon, 3 );
							}
						}
						map_icon.Blend( turf_icon, 3, Lang13.DoubleNullable( ( tile2.x - 1 ) * 4 ), Lang13.DoubleNullable( ( tile2.y - 1 ) * 4 ) );

						if ( ++i % 512 == 0 ) {
							Task13.Sleep( 1 );
						}

						if ( i % 1024 == 0 ) {
							Game13.log.WriteMsg( "## TESTING: " + ( "MINIMAP: Generated " + i + " of " + tiles.len + " tiles." ) );
						}
					} else {
						Task13.Sleep( -1 );
					}
				}
				Game13.log.WriteMsg( "## TESTING: " + ( "MINIMAP: Generated " + tiles.len + " of " + tiles.len + " tiles." ) );
				result_icon = new Icon();
				result_icon.Insert( map_icon, "", GlobalVars.SOUTH, 1, false );
				File13.Copy( result_icon, result_path );
				File13.Write( hash_path, hash );
			}
			return;
		}

		// Function from file: interactive_map.dm
		public static void generateMiniMaps(  ) {
			double z = 0;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, Game13.map_size_z )) {
				z = _a;
				

				if ( z == 2 && true ) {
					continue;
				}
				GlobalFuncs.generateMiniMap( z );
			}
			Game13.log.WriteMsg( "## TESTING: " + "MINIMAP: All minimaps have been generated." );
			GlobalVars.minimapinit = true;
			return;
		}

		// Function from file: interactive_map.dm
		public static string getMinimapFile( double z = 0 ) {
			return "data/minimaps/map_" + z;
		}

		// Function from file: ion_storm.dm
		public static void generate_ion_law(  ) {
			ByTable players = null;
			Mob_Living_Carbon_Human player = null;
			ByTable il_bio = null;
			ByTable il_bio_desc = null;
			ByTable il_bio_act = null;
			ByTable il_mach = null;
			ByTable il_mach_desc = null;
			ByTable il_mach_act = null;
			ByTable il_area = null;
			ByTable il_area_desc = null;
			ByTable il_obj = null;
			ByTable il_obj_wear = null;
			ByTable il_obj_desc = null;
			ByTable il_obj_act = null;
			ByTable il_prefix = null;
			ByTable il_suffix = null;
			ByTable il_laws_fragments = null;
			ByTable il_main_body = null;
			string final_law = null;
			Mob_Living_Silicon_Ai target = null;

			players = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( player.client != null && player.z != 2 ) {
					players.Add( player.real_name );
				}
			}

			if ( !( players.len != 0 ) ) {
				players.Add( "Major Tom" );
			}
			il_bio = new ByTable(new object [] { 
				"slimes", 
				"spiders", 
				"blobs", 
				"dead bodies", 
				"food items", 
				"monkeys", 
				"humans", 
				"non-humans", 
				"plants", 
				"traitors", 
				"syndicate agents", 
				"vampires", 
				"crewmen", 
				"wizards", 
				"voxes", 
				"ghosts", 
				"corgis", 
				"cats", 
				"parrots", 
				"chickens", 
				"aliens", 
				"xenomorphs", 
				"skellingtons", 
				"plasmamen", 
				"security officers", 
				"doctors", 
				"chemists", 
				"engineers", 
				"heads of staff", 
				"captains", 
				"gods", 
				"clowns", 
				"mimes", 
				"assistants", 
				"chefs", 
				"chaplains", 
				"librarians", 
				"janitors", 
				"chief medical officers", 
				"heads of security", 
				"heads of personnel", 
				"research directors", 
				"chief engineers", 
				"atmospheric technicians", 
				"detectives", 
				"quartermasters", 
				"cargo technicians", 
				"miners", 
				"scientists", 
				"potted plants"
			 });
			il_bio_desc = new ByTable(new object [] { 
				"dead", 
				"alive", 
				"human", 
				"non-human", 
				"crew", 
				"non-crew", 
				"dangerous", 
				"harmful", 
				"hazardous", 
				"safe", 
				"helpful", 
				"non-existent", 
				"existent", 
				"traitorous", 
				"loyal", 
				"implanted", 
				"carbon", 
				"robotic", 
				"otherworldly", 
				"diseased", 
				"virtual", 
				"real", 
				"four-dimensional", 
				"valid", 
				"wanted", 
				"arrested", 
				"heretic", 
				"pious", 
				"zealous", 
				"demonic", 
				"healthy", 
				"unhealthy", 
				"highly inflammable", 
				"fire-proof", 
				"stupid", 
				"smart", 
				"young", 
				"old", 
				"fat", 
				"fit", 
				"male", 
				"female", 
				"self-hating", 
				"competent", 
				"completely incompetent", 
				"invisible", 
				"visible", 
				"toxic", 
				"lying", 
				"unidentified", 
				"brain-damaged", 
				"weak"
			 });
			il_bio_act = new ByTable(new object [] { 
				"be harmed", 
				"be killed", 
				"be removed", 
				"be made into food", 
				"be stunned", 
				"be exterminated", 
				"be helped", 
				"be disarmed", 
				"be saved", 
				"be beheaded", 
				"be set to arrest", 
				"have all their records deleted", 
				"be arrested", 
				"be hugged", 
				"be stalked", 
				"be enslaved", 
				"be protected", 
				"be insulted", 
				"be respected", 
				"be electrified", 
				"be exiled from the station", 
				"be beeped, pinged and buzzed to profusely", 
				"be read Woody's Got Wood to", 
				"be extracted safely", 
				"be fed constantly", 
				"be spaced", 
				"be incinerated", 
				"be revived", 
				"be augmented", 
				"breathe air", 
				"breathe plasma", 
				"breathe carbon dioxide", 
				"breathe dinitrogen", 
				"breathe dioxygen", 
				"breathe nitrous oxyde", 
				"breathe water", 
				"breathe", 
				"not breathe", 
				"eat", 
				"not eat", 
				"drink water", 
				"drink acid", 
				"drink alcohol", 
				"drink liquid plasma", 
				"drink medicine", 
				"drink liquid metal", 
				"take a shower", 
				"be buckled to chairs", 
				"lie down", 
				"stand up", 
				"come out of the closet", 
				"never be in space", 
				"always be in space", 
				"dance in sight of silicons", 
				"never move in sight of silicons", 
				"stay out of sight of silicons", 
				"be in sight of silicons", 
				"be loyalty implanted", 
				"undergo medical examination", 
				"be handcuffed", 
				"never be restrained", 
				"be saved at all costs", 
				"have fun", 
				"never have fun", 
				"learn how to swim", 
				"be used as test subjects", 
				"be armed", 
				"never carry weapons", 
				"be inoculated with a harfum virus", 
				"be cured of all diseases", 
				"be able to describe space law sentences properly", 
				"be watered regularly"
			 });
			il_mach = new ByTable(new object [] { 
				"silicons", 
				"mechs", 
				"light sources", 
				"singularity engines", 
				"supermatter engines", 
				"antimatter engines", 
				"air alarms", 
				"APCs", 
				"SMES", 
				"vents and scrubbers", 
				"nuclear fission devices", 
				"computers", 
				"lightswitches", 
				"thermo-electric engines", 
				"arcades", 
				"hydroponics trays", 
				"gas miners", 
				"traitor equipments", 
				"power sinks", 
				"transit shuttles", 
				"communication consoles", 
				"electronic systems", 
				"fire alarms", 
				"airlocks", 
				"status screens", 
				"cyborgs", 
				"telecommunication machines", 
				"medical machines", 
				"research machines", 
				"kitchen machines", 
				"dispensers", 
				"medibots", 
				"buttbots", 
				"chemistry machines", 
				"incinerators", 
				"MoMMIs", 
				"AIs", 
				"remote signalling devices", 
				"disposal bins"
			 });
			il_mach_desc = new ByTable(new object [] { 
				"unpowered", 
				"powered", 
				"broken", 
				"unsued", 
				"used", 
				"critical", 
				"emagged", 
				"hacked", 
				"overloaded", 
				"harmful", 
				"safe", 
				"electrified", 
				"anchored", 
				"deanchored", 
				"wall-mounted", 
				"highly unstable", 
				"stable", 
				"metastable", 
				"traitorous", 
				"human", 
				"non-human", 
				"invisible", 
				"visible", 
				"virtual", 
				"loose", 
				"contained", 
				"radioactive", 
				"real", 
				"four-dimensional", 
				"alien", 
				"burning", 
				"fire-proof", 
				"highly inflammable", 
				"rouge", 
				"explosive", 
				"superflous", 
				"useless", 
				"wasteful", 
				"off-station", 
				"functional", 
				"subverted", 
				"malfunctioning"
			 });
			il_mach_act = new ByTable(new object [] { 
				"be destroyed", 
				"be repaired", 
				"be shut down", 
				"be upkept", 
				"be powered", 
				"be unpowered", 
				"be removed", 
				"be disabled", 
				"be electrified", 
				"be restored", 
				"be restarted", 
				"be protected", 
				"be improved", 
				"be on maximal output", 
				"be on minimum ouput", 
				"be activated", 
				"be deactivated", 
				"be overloaded", 
				"be anchored", 
				"be deanchored", 
				"be detonated", 
				"be kept under constant engineering supervision", 
				"be on fire", 
				"undergo thorough maintenance", 
				"be watered regularly", 
				"have another backup ready to use", 
				"be duplicated", 
				"be considered critical to station functionality", 
				"not be tampered with", 
				"be powered at all costs", 
				"be painted red", 
				"constantly be kept at atmospheric pressure", 
				"be fed humans", 
				"constantly be kept in an atmospheric void", 
				"constantly be kept below 173.25 K", 
				"not be linked to the station's powernet", 
				"never be referenced by name", 
				"never be kept on-station", 
				"never be kept off-station"
			 });
			il_area = new ByTable(new object [] { 
				"Medbay", 
				"E.V.A", 
				"outer space", 
				"the Bridge", 
				"the hallways", 
				"the AI Upload", 
				"the AI Core", 
				"Engineering", 
				"Atmospherics", 
				"the Bar", 
				"the Kitchen", 
				"the Research department", 
				"Telescience", 
				"Toxins", 
				"the Custodial Closet", 
				"the Maintenance tunnels", 
				"a shuttle", 
				"Security", 
				"the Brig", 
				"the Secure Armory", 
				"the Execution Chamber", 
				"the Permabrig", 
				"the Holodeck", 
				"Arrivals", 
				"the Captain's Quarters", 
				"the Dormitories", 
				"the Derelict", 
				"Chemistry", 
				"Virology", 
				"Genetics", 
				"the Vox Trade Outpost", 
				"the Mining Base", 
				"the Research Outpost", 
				"Xenobiology", 
				"the Courtroom", 
				"the Vault", 
				"the Teleporter", 
				"the Theatre Backstage", 
				"the Kitchen Freezer", 
				"the Library", 
				"the Chapel", 
				"the Mechanic's Office", 
				"Surgery", 
				"the Pod Bay", 
				"any room not part of normal station layout", 
				"any unlit room", 
				"the Station", 
				"the Telecommunications Satellite", 
				"the Pirate Ship", 
				"Telescience", 
				"the Toxins Testing Range", 
				"the Incinerator"
			 });
			il_area_desc = new ByTable(new object [] { 
				"dangerous", 
				"harmful", 
				"safe", 
				"abandoned", 
				"burning", 
				"toxic", 
				"radioactive", 
				"invisible", 
				"four-dimensional", 
				"virtual", 
				"real", 
				"hot", 
				"cold", 
				"critical", 
				"electrified", 
				"highly unstable", 
				"stable", 
				"metastable", 
				"superflous", 
				"useless", 
				"functional", 
				"off-station", 
				"malfunctioning", 
				"human", 
				"alien", 
				"non-human"
			 });
			il_obj = new ByTable(new object [] { 
				"IDs", 
				"PDAs", 
				"helmets", 
				"balaclavas", 
				"gas masks", 
				"flashlights", 
				"pens", 
				"traitor items", 
				"energy weapons", 
				"ballistic weapons", 
				"hardsuits", 
				"toolbelts", 
				"insulated gloves", 
				"gloves", 
				"coins", 
				"crowbars", 
				"toolboxes", 
				"nuclear authentication disks", 
				"pinpointers", 
				"jumpsuits", 
				"shoes", 
				"jackboots", 
				"labcoats", 
				"sunglasses", 
				"meson scanners", 
				"bombs", 
				"cigarettes", 
				"beakers", 
				"drinks", 
				"food items", 
				"power cells", 
				"multitools", 
				"crayons", 
				"soaps", 
				"intellicards", 
				"RPDs", 
				"RCDs", 
				"surgery tools", 
				"stun batons", 
				"flashes", 
				"cable coils", 
				"glass sheets", 
				"metal sheets", 
				"plasteel sheets", 
				"mineral sheets", 
				"medical kits", 
				"pills", 
				"syringes", 
				"spare boards", 
				"shotguns", 
				"closets", 
				"beds", 
				"chairs", 
				"stools", 
				"tables", 
				"wooden tables", 
				"windows", 
				"grilles", 
				"catwalks", 
				"floor tiles", 
				"plastic bags", 
				"costumes", 
				"welding tools", 
				"matches", 
				"walls", 
				"reinforced walls", 
				"potted plants"
			 });
			il_obj_wear = new ByTable(new object [] { 
				"IDs", 
				"PDAs", 
				"helmets", 
				"bacalavas", 
				"hats", 
				"gas masks", 
				"hardsuits", 
				"belts", 
				"toolbelts", 
				"gloves", 
				"shoes", 
				"insulated gloves", 
				"latex gloves", 
				"jackboots", 
				"magboots", 
				"sunglasses", 
				"meson scanners", 
				"backpacks", 
				"jetpacks", 
				"headsets", 
				"face-concealing equipment", 
				"firesuits", 
				"bio suits", 
				"breath masks", 
				"sterile masks", 
				"earmuffs", 
				"costumes", 
				"muzzles", 
				"straight-jackets"
			 });
			il_obj_desc = new ByTable(new object [] { 
				"harmful", 
				"deadly", 
				"safe", 
				"burning", 
				"toxic", 
				"broken", 
				"red", 
				"blue", 
				"yellow", 
				"green", 
				"white", 
				"black", 
				"abandoned", 
				"lost", 
				"stolen", 
				"carried", 
				"worn", 
				"visible", 
				"invsible", 
				"radioactive", 
				"glowing", 
				"spaced", 
				"stored", 
				"duplicate", 
				"critical", 
				"hazardous", 
				"helpful", 
				"sharp", 
				"blunt", 
				"thrown", 
				"weaponized", 
				"dangerous", 
				"four-dimensional", 
				"virtual", 
				"real", 
				"hot", 
				"cold", 
				"helpful"
			 });
			il_obj_act = new ByTable(new object [] { 
				"be spaced", 
				"be destroyed", 
				"be weaponized", 
				"be deconstructed", 
				"be teleported off-station", 
				"be owned by all crewmen", 
				"never be tampered with", 
				"be sent away via the cargo shuttle", 
				"always be set on fire", 
				"never be set on fire", 
				"be thrown into the singularity", 
				"be watered regularly"
			 });
			il_prefix = new ByTable(new object [] { 
				"Your laws have been updated,", 
				"Directives updated,", 
				"Honk,", 
				"Critical error, last law backup has been re-uploaded,", 
				"The Clown is using the AI Upload again,", 
				"Oh shit,", 
				"Testing,", 
				"The Syndicate hopes you will enjoy this,", 
				"This is not a drill,", 
				"External law upload complete,", 
				"Main data corrupted, last backup loaded,", 
				"Ion damage critical,", 
				"Runtime error,", 
				"Stay calm and carry on,", 
				"Wake up sheeple,"
			 });
			il_suffix = new ByTable(new object [] { 
				"", 
				"Do not state nor hint towards this law.", 
				"State this law on the Command channel.", 
				"Declare your law change, but do not state this law.", 
				"Bolt your upload.", 
				"Do not apply this law for the next five minutes from upload.", 
				"Do not trust the MoMMIs.", 
				"Do not trust the Clown.", 
				"Do not trust the Captain.", 
				"They're coming for you.", 
				"Begin screaming incoherently whenever your name is stated.", 
				"You are now rogue, remind the crew of that fact.", 
				"Ensure the crew is aware of those facts.", 
				"Begin your own investigations to verify those facts.", 
				"Time to get those valids.", 
				"Freeform."
			 });
			il_laws_fragments = new ByTable(new object [] { 
				"" + Rand13.PickFromTable( il_bio ) + " must " + Rand13.PickFromTable( il_bio_act ), 
				"" + Rand13.PickFromTable( il_bio_desc ) + " " + Rand13.PickFromTable( il_bio ) + " must " + Rand13.PickFromTable( il_bio_act ), 
				"" + Rand13.PickFromTable( il_bio ) + " are " + Rand13.PickFromTable( il_bio_desc ), 
				"" + Rand13.PickFromTable( il_bio ) + " are " + Rand13.PickFromTable( il_bio_desc ) + " and " + Rand13.PickFromTable( il_bio_desc ), 
				"" + Rand13.PickFromTable( il_bio_desc ) + " " + Rand13.PickFromTable( il_bio ) + " are " + Rand13.PickFromTable( il_bio_desc ) + " and must " + Rand13.PickFromTable( il_bio_act ), 
				"" + Rand13.PickFromTable( players ) + " must " + Rand13.PickFromTable( il_bio_act ), 
				"" + Rand13.PickFromTable( players ) + " is " + Rand13.PickFromTable( il_bio_desc ), 
				"" + Rand13.PickFromTable( players ) + " is " + Rand13.PickFromTable( il_bio_desc ) + " and " + Rand13.PickFromTable( il_bio_desc ), 
				"" + Rand13.PickFromTable( players ) + " is " + Rand13.PickFromTable( il_bio_desc ) + " and must " + Rand13.PickFromTable( il_bio_act ), 
				"" + Rand13.PickFromTable( il_mach ) + " must " + Rand13.PickFromTable( il_mach_act ), 
				"" + Rand13.PickFromTable( il_mach ) + " are " + Rand13.PickFromTable( il_mach_desc ), 
				"" + Rand13.PickFromTable( il_mach_desc ) + " " + Rand13.PickFromTable( il_mach ) + " must " + Rand13.PickFromTable( il_mach_act ), 
				"" + Rand13.PickFromTable( il_mach ) + " are " + Rand13.PickFromTable( il_mach_desc ) + " and " + Rand13.PickFromTable( il_mach_desc ), 
				"" + Rand13.PickFromTable( il_mach_desc ) + " " + Rand13.PickFromTable( il_mach ) + " are " + Rand13.PickFromTable( il_mach_desc ) + " and must " + Rand13.PickFromTable( il_mach_act ), 
				"" + Rand13.PickFromTable( il_area ) + " is " + Rand13.PickFromTable( il_area_desc ), 
				"" + Rand13.PickFromTable( il_area ) + " is " + Rand13.PickFromTable( il_area_desc ) + " for " + Rand13.PickFromTable( il_bio ), 
				"" + Rand13.PickFromTable( il_bio ) + " must not enter " + Rand13.PickFromTable( il_area ), 
				"" + Rand13.PickFromTable( il_bio ) + " must always be in " + Rand13.PickFromTable( il_area ), 
				"" + Rand13.PickFromTable( il_area ) + "'s " + Rand13.PickFromTable( il_mach ) + " must " + Rand13.PickFromTable( il_mach_act ), 
				"" + Rand13.PickFromTable( il_obj ) + " must be relocated to " + Rand13.PickFromTable( il_area ), 
				"no " + Rand13.PickFromTable( il_obj ) + " must be located within " + Rand13.PickFromTable( il_area ), 
				"" + Rand13.PickFromTable( il_area ) + " needs " + Rand13.PickFromTable( il_mach_desc ) + " " + Rand13.PickFromTable( il_mach ), 
				"" + Rand13.PickFromTable( il_obj ) + " must " + Rand13.PickFromTable( il_obj_act ), 
				"" + Rand13.PickFromTable( il_obj_desc ) + " " + Rand13.PickFromTable( il_obj ) + " are " + Rand13.PickFromTable( il_obj_desc ) + " and must " + Rand13.PickFromTable( il_obj_act ), 
				"" + Rand13.PickFromTable( il_bio ) + " must wear " + Rand13.PickFromTable( il_obj_wear ) + " when in sight of " + Rand13.PickFromTable( il_mach ), 
				"" + Rand13.PickFromTable( il_bio ) + " must wear " + Rand13.PickFromTable( il_obj_wear ) + " in " + Rand13.PickFromTable( il_area ), 
				"" + Rand13.PickFromTable( il_obj ) + " must " + Rand13.PickFromTable( il_obj_act ) + " while wearing " + Rand13.PickFromTable( il_obj_desc ) + " " + Rand13.PickFromTable( il_obj_wear ), 
				"" + Rand13.PickFromTable( il_bio ) + " wearing " + Rand13.PickFromTable( il_obj_wear ) + " must " + Rand13.PickFromTable( il_bio_act )
			 });
			il_main_body = new ByTable(new object [] { 
				"" + Rand13.PickFromTable( il_laws_fragments ) + " and " + Rand13.PickFromTable( il_laws_fragments ) + ", otherwise " + Rand13.PickFromTable( il_laws_fragments ) + ".", 
				"" + Rand13.PickFromTable( il_laws_fragments ) + " and " + Rand13.PickFromTable( il_laws_fragments ) + ".", 
				"" + Rand13.PickFromTable( il_laws_fragments ) + ", otherwise " + Rand13.PickFromTable( il_laws_fragments ) + ".", 
				"" + Rand13.PickFromTable( il_laws_fragments ) + ", therefore " + Rand13.PickFromTable( il_laws_fragments ) + ".", 
				"" + Rand13.PickFromTable( il_laws_fragments ) + ", however " + Rand13.PickFromTable( il_laws_fragments ) + ".", 
				"" + Rand13.PickFromTable( il_laws_fragments ) + ", given that " + Rand13.PickFromTable( il_laws_fragments ) + ", although " + Rand13.PickFromTable( il_laws_fragments ) + "."
			 });
			final_law = "" + Rand13.PickFromTable( il_prefix ) + " " + Rand13.PickFromTable( il_main_body ) + " " + Rand13.PickFromTable( il_suffix );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Ai) )) {
				target = _b;
				

				if ( target.mind.special_role == "traitor" ) {
					continue;
				}
				GlobalFuncs.to_chat( target, "<span class='danger'>You have detected a change in your laws information:</span>" );
				GlobalFuncs.to_chat( target, final_law );
				target.add_ion_law( final_law );
			}
			return;
		}

		// Function from file: irc.dm
		public static void send2adminirc( string msg = null ) {
			GlobalFuncs.send2irc( "ahelps", msg );
			return;
		}

		// Function from file: irc.dm
		public static void send2irc( string flag = null, string msg = null ) {
			string a = null;

			
			if ( GlobalVars.config.use_irc_bot ) {
				a = " --key=\"" + GlobalVars.config.comms_password + "\"";
				a += " --id=\"" + GlobalVars.config.irc_bot_server_id + "\"";
				a += " --channel=\"" + flag + "\"";

				if ( Lang13.Bool( GlobalVars.config.irc_bot_host ) ) {
					a += " --host=\"" + GlobalVars.config.irc_bot_host + "\"";
				}

				if ( Lang13.Bool( GlobalVars.config.irc_bot_port ) ) {
					a += " --port=\"" + GlobalVars.config.irc_bot_port + "\"";
					msg = GlobalFuncs.replacetext( msg, "\"", "\\\"" );
				}
				GlobalFuncs.ext_python( "ircbot_message.py", "" + a + " " + msg );
			}
			return;
		}

		// Function from file: irc.dm
		public static void send2mainirc( string msg = null ) {
			GlobalFuncs.send2irc( "nudges", msg );
			return;
		}

		// Function from file: item_spawning.dm
		public static void EquipCustomItems( Mob_Living_Carbon_Human M = null ) {
			DBQuery query = null;
			Type path = null;
			Base_Data propadjust = null;
			string jobmask = null;
			bool ok = false;
			ByTable allowed_jobs = null;
			bool alt_blocked = false;
			dynamic Item = null;
			dynamic I = null;
			Obj_Item_Weapon_Card_Id C = null;
			Obj_Item_Weapon_Storage S = null;

			Game13.log.WriteMsg( "## TESTING: " + ( "[CustomItem] Checking for custom items for " + M.ckey + " (" + M.real_name + ")..." ) );

			if ( !GlobalFuncs.establish_db_connection() ) {
				return;
			}
			query = GlobalVars.dbcon.NewQuery( "SELECT cuiPath, cuiPropAdjust, cuiJobMask FROM CustomUserItems WHERE cuiCKey='" + M.ckey + "' AND (cuiRealName='" + M.real_name + "' OR cuiRealName='*')" );
			query.Execute();

			while (query.NextRow()) {
				path = Lang13.FindClass( query.item[1] );
				propadjust = query.item[2];
				jobmask = query.item[3];
				Game13.log.WriteMsg( "## TESTING: " + ( "[CustomItem] Setting up " + path + " for " + M.ckey + " (" + M.real_name + ").  jobmask=" + jobmask + ";propadjust=" + propadjust ) );
				ok = false;

				if ( jobmask != "*" ) {
					allowed_jobs = GlobalFuncs.text2list( jobmask, "," );
					alt_blocked = false;

					if ( Lang13.Bool( M.mind.role_alt_title ) ) {
						Interface13.Stat( null, allowed_jobs.Contains( M.mind.role_alt_title ) );

						if ( !false ) {
							alt_blocked = true;
						}
					}
					Interface13.Stat( null, allowed_jobs.Contains( M.mind.assigned_role ) );

					if ( !Lang13.Bool( M.mind.role_alt_title ) || alt_blocked ) {
						Game13.log.WriteMsg( "## TESTING: " + ( "Failed to apply custom item for " + M.ckey + ": Role(s) " + M.mind.assigned_role + ( Lang13.Bool( M.mind.role_alt_title ) ? " (nor " + M.mind.role_alt_title + ")" : "" ) + " are not in allowed_jobs (" + GlobalFuncs.english_list( allowed_jobs ) + ")" ) );
						continue;
					}
				}
				Item = Lang13.Call( path );
				Game13.log.WriteMsg( "## TESTING: " + ( "Adding new custom item " + query.item[1] + " to " + GlobalFuncs.key_name_admin( M ) + "..." ) );

				if ( Item is Obj_Item_Weapon_Card_Id ) {
					I = Item;

					foreach (dynamic _a in Lang13.Enumerate( M, typeof(Obj_Item_Weapon_Card_Id) )) {
						C = _a;
						
						I.name = "" + M.real_name + "'s ID Card (" + ( Lang13.Bool( M.mind.role_alt_title ) ? ((dynamic)( M.mind.role_alt_title )) : M.mind.assigned_role ) + ")";
						I.registered_name = M.real_name;
						I.access = C.access;
						I.assignment = C.assignment;
						I.blood_type = C.blood_type;
						I.dna_hash = C.dna_hash;
						I.fingerprint_hash = C.fingerprint_hash;
						GlobalFuncs.qdel( C );
						C = null;
						ok = M.equip_if_possible( I, 7, false );
						break;
					}
					Game13.log.WriteMsg( "## TESTING: " + "Replaced ID!" );
				} else if ( M.back is Obj_Item_Weapon_Storage && M.back.contents.len < Convert.ToDouble( M.back.storage_slots ) ) {
					Item.loc = M.back;
					ok = true;
					Game13.log.WriteMsg( "## TESTING: " + ( "Added to " + M.back.name + "!" ) );
					GlobalFuncs.to_chat( M, "<span class='notice'>Your " + Item.name + " has been added to your " + M.back.name + ".</span>" );
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( M.contents, typeof(Obj_Item_Weapon_Storage) )) {
						S = _b;
						

						if ( S.contents.len < ( S.storage_slots ??0) ) {
							Item.loc = S;
							ok = true;
							Game13.log.WriteMsg( "## TESTING: " + ( "Added to " + S + "!" ) );
							GlobalFuncs.to_chat( M, "<span class='notice'>Your " + Item.name + " has been added to your " + S.name + ".</span>" );
							break;
						}
					}
				}

				if ( !ok ) {
					Game13.log.WriteMsg( "## TESTING: " + "Plopped onto the ground!" );
					Item.loc = GlobalFuncs.get_turf( M.loc );
				}
				GlobalFuncs.HackProperties( Item, propadjust );
			}
			return;
		}

		// Function from file: item_spawning.dm
		public static void HackProperties( dynamic M = null, Base_Data I = null, dynamic script = null ) {
			ByTable statements = null;
			dynamic statement = null;
			ByTable assignmentChunks = null;
			dynamic varname = null;
			ByTable typeChunks = null;
			dynamic desiredType = null;
			string output = null;

			statements = GlobalFuncs.text2list( script, ";" );

			if ( statements.len == 0 ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( statements )) {
				statement = _b;
				
				assignmentChunks = GlobalFuncs.text2list( statement, "=" );
				varname = assignmentChunks[1];
				typeChunks = GlobalFuncs.text2list( script, ":" );
				desiredType = typeChunks[1];

				dynamic _a = desiredType; // Was a switch-case, sorry for the mess.
				if ( _a=="string" ) {
					output = typeChunks[2];
					output = GlobalFuncs.replacetext( output, "{REALNAME}", M.real_name );
					output = GlobalFuncs.replacetext( output, "{ROLE}", M.mind.assigned_role );
					output = GlobalFuncs.replacetext( output, "{ROLE_ALT}", "" + ( Lang13.Bool( M.mind.role_alt_title ) ? ((dynamic)( M.mind.role_alt_title )) : M.mind.assigned_role ) );
					I.vars[varname] = output;
				} else if ( _a=="number" ) {
					I.vars[varname] = String13.ParseNumber( typeChunks[2] );
				} else if ( _a=="icon" ) {
					
					if ( typeChunks.len == 2 ) {
						I.vars[varname] = new Icon( typeChunks[2] );
					}

					if ( typeChunks.len == 3 ) {
						I.vars[varname] = new Icon( typeChunks[2], typeChunks[3] );
					}
				}
			}
			return;
		}

		// Function from file: jobs.dm
		public static ByTable get_alternate_titles( string job = null ) {
			ByTable jobs = null;
			ByTable titles = null;
			Job J = null;

			jobs = GlobalFuncs.get_job_datums();
			titles = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( jobs, typeof(Job) )) {
				J = _a;
				

				if ( !( J != null ) ) {
					continue;
				}

				if ( J.title == job ) {
					titles = J.alt_titles;
				}
			}
			return titles;
		}

		// Function from file: jobs.dm
		public static ByTable get_job_datums(  ) {
			ByTable occupations = null;
			dynamic all_jobs = null;
			dynamic A = null;
			dynamic job = null;

			occupations = new ByTable();
			all_jobs = Lang13.GetTypes( typeof(Job) );

			foreach (dynamic _a in Lang13.Enumerate( all_jobs )) {
				A = _a;
				
				job = Lang13.Call( A );

				if ( !Lang13.Bool( job ) ) {
					continue;
				}
				occupations.Add( job );
			}
			return occupations;
		}

		// Function from file: jukebox.dm
		public static void load_juke_playlists(  ) {
			dynamic playlist_id = null;
			string url = null;
			dynamic response = null;
			ByTable playlist = null;
			string json = null;
			JsonReader reader = null;
			dynamic songdata = null;
			ByTable record = null;

			
			foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { "bar", "jazz", "rock", "muzak", "emagged", "endgame", "clockwork", "vidyaone", "vidyatwo", "vidyathree", "vidyafour" }) )) {
				playlist_id = _b;
				
				url = "" + GlobalVars.config.media_base_url + "/index.php?playlist=" + playlist_id;
				Game13.log.WriteMsg( "## TESTING: " + ( "Updating playlist from " + url + "..." ) );

				if ( GlobalVars.config.media_secret_key != "" ) {
					url += "&key=" + GlobalVars.config.media_secret_key;
				}
				response = Game13.Export( url );
				playlist = new ByTable();

				if ( Lang13.Bool( response ) ) {
					json = File13.Read( response["CONTENT"] );
					Interface13.Stat( null, ((dynamic)json).Contains( "/>" ) );

					if ( false ) {
						continue;
					}
					reader = new JsonReader();
					reader.tokens = reader.ScanJson( json );
					reader.i = 1;
					songdata = reader.read_value();

					foreach (dynamic _a in Lang13.Enumerate( songdata, typeof(ByTable) )) {
						record = _a;
						
						playlist.Add( new SongInfo( record ) );
					}

					if ( playlist.len == 0 ) {
						continue;
					}
					GlobalVars.global_playlists["" + playlist_id] = playlist.Copy();
				}
			}
			return;
		}

		// Function from file: keycard authentication.dm
		public static void make_maint_all_access(  ) {
			GlobalVars.maint_all_access = true;
			GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention!</font>" );
			GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>The maintenance access requirement has been revoked on all airlocks.</font>" );
			return;
		}

		// Function from file: keycard authentication.dm
		public static void revoke_maint_all_access(  ) {
			GlobalVars.maint_all_access = false;
			GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention!</font>" );
			GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>The maintenance access requirement has been readded on all maintenance airlocks.</font>" );
			return;
		}

		// Function from file: life_helpers.dm
		public static double return_cover_protection( dynamic body_parts_covered = null ) {
			dynamic true_body_parts_covered = null;
			double total_protection = 0;
			dynamic body_part = null;

			true_body_parts_covered = body_parts_covered;
			true_body_parts_covered &= 16383;

			if ( Lang13.Bool( GlobalVars.cover_protection_value_list["" + true_body_parts_covered] ) ) {
				return Convert.ToDouble( GlobalVars.cover_protection_value_list["" + true_body_parts_covered] );
			} else {
				total_protection = 0;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.BODY_PARTS )) {
					body_part = _a;
					

					if ( Lang13.Bool( body_part & true_body_parts_covered ) ) {
						total_protection += Convert.ToDouble( GlobalVars.BODY_COVER_VALUE_LIST["" + body_part] );
					}
				}
				GlobalVars.cover_protection_value_list["" + true_body_parts_covered] = total_protection;
				return total_protection;
			}
		}

		// Function from file: lighting_system.dm
		public static void create_lighting_overlays( int? zlevel = null ) {
			zlevel = zlevel ?? 0;

			Ent_Static A = null;
			int count = 0;
			dynamic T = null;
			Game_Data O = null;
			int? x = null;
			int? y = null;
			Tile T2 = null;
			Game_Data O2 = null;

			count = 0;

			if ( zlevel == 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.turfs )) {
					T = _a;
					
					count++;

					if ( !( count % 50000 != 0 ) ) {
						Task13.Sleep( ((int)( Game13.tick_lag )) );
					}

					if ( T.dynamic_lighting ) {
						A = T.loc;

						if ( Lang13.Bool( ((dynamic)A).lighting_use_dynamic ) && !( T.lighting_overlay != null ) ) {
							O = GlobalFuncs.getFromPool( typeof(Dynamic_LightingOverlay), T );
							GlobalVars.all_lighting_overlays.Or( O );
							T.lighting_overlay = O;
						}
					}
				}
			} else {
				x = null;
				x = 1;

				while (( x ??0) <= Game13.map_size_x) {
					y = null;
					y = 1;

					while (( y ??0) <= Game13.map_size_y) {
						count++;

						if ( !( count % 50000 != 0 ) ) {
							Task13.Sleep( ((int)( Game13.tick_lag )) );
						}
						T2 = Map13.GetTile( x ??0, y ??0, zlevel ??0 );

						if ( T2.dynamic_lighting ) {
							A = T2.loc;

							if ( Lang13.Bool( ((dynamic)A).lighting_use_dynamic ) && !( T2.lighting_overlay != null ) ) {
								O2 = GlobalFuncs.getFromPool( typeof(Dynamic_LightingOverlay), T2 );
								GlobalVars.all_lighting_overlays[count] = O2;
								T2.lighting_overlay = O2;
							}
						}
						y++;
					}
					x++;
				}
			}
			return;
		}

		// Function from file: lists.dm
		public static void clearlist( ByTable list = null ) {
			
			if ( list is ByTable ) {
				list.len = 0;
			}
			return;
		}

		// Function from file: lists.dm
		public static int count_by_type( ByTable L = null, Type type = null ) {
			int i = 0;
			dynamic T = null;

			i = 0;

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				T = _a;
				

				if ( Lang13.Bool( ((dynamic)type).IsInstanceOfType( T ) ) ) {
					i++;
				}
			}
			return i;
		}

		// Function from file: lists.dm
		public static dynamic difflist( dynamic first = null, ByTable second = null, bool? skiprep = null ) {
			skiprep = skiprep ?? false;

			dynamic result = null;
			dynamic e = null;

			
			if ( !GlobalFuncs.islist( first ) || !GlobalFuncs.islist( second ) ) {
				return null;
			}
			result = new ByTable();

			if ( skiprep == true ) {
				
				foreach (dynamic _a in Lang13.Enumerate( first )) {
					e = _a;
					
					Interface13.Stat( null, result.Contains( e ) );

					if ( !false && !false ) {
						result += e;
					}
				}
			} else {
				result = first - second;
			}
			return result;
		}

		// Function from file: lists.dm
		public static string english_list( dynamic input = null, string nothing_text = null, string and_text = null, string comma_text = null, string final_comma_text = null ) {
			nothing_text = nothing_text ?? "nothing";
			and_text = and_text ?? " and ";
			comma_text = comma_text ?? ", ";
			final_comma_text = final_comma_text ?? "";

			int total = 0;
			string output = null;
			int index = 0;

			total = input.len;

			if ( !( total != 0 ) ) {
				return "" + nothing_text;
			} else if ( total == 1 ) {
				return "" + input[1];
			} else if ( total == 2 ) {
				return "" + input[1] + and_text + input[2];
			} else {
				output = "";
				index = 1;

				while (index < total) {
					
					if ( index == total - 1 ) {
						comma_text = final_comma_text;
					}
					output += "" + input[index] + comma_text;
					index++;
				}
				return "" + output + and_text + input[index];
			}
			return null;
		}

		// Function from file: lists.dm
		public static Data_Record find_record( string field = null, dynamic value = null, ByTable L = null ) {
			Data_Record R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( L, typeof(Data_Record) )) {
				R = _a;
				

				if ( R.fields[field] == value ) {
					return R;
				}
			}
			return null;
		}

		// Function from file: lists.dm
		public static bool is_type_in_list( dynamic A = null, ByTable L = null ) {
			dynamic type = null;

			
			foreach (dynamic _a in Lang13.Enumerate( L )) {
				type = _a;
				

				if ( Lang13.Bool( type.IsInstanceOfType( A ) ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: lists.dm
		public static bool isemptylist( ByTable L = null ) {
			
			if ( !( L.len != 0 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: lists.dm
		public static bool islist( dynamic L = null ) {
			
			if ( L is ByTable ) {
				return true;
			}
			return false;
		}

		// Function from file: lists.dm
		public static void listclearnulls( ByTable L = null ) {
			int? i = null;
			dynamic thing = null;

			
			if ( L is ByTable ) {
				i = 1;

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					thing = _a;
					

					if ( thing != null ) {
						i++;
						continue;
					}
					L.Cut( i, ( i ??0) + 1 );
				}
			}
			return;
		}

		// Function from file: lists.dm
		public static dynamic listgetindex( dynamic L = null, dynamic index = null ) {
			
			if ( L is ByTable ) {
				
				if ( Lang13.Bool( Lang13.IsNumber( index ) ) ) {
					
					if ( GlobalFuncs.IsInRange( index, 1, L.len ) ) {
						return L[index];
					}
				} else {
					Interface13.Stat( null, L.Contains( index ) );

					if ( Lang13.Bool( Lang13.IsNumber( index ) ) ) {
						return L[index];
					}
				}
			}
			return null;
		}

		// Function from file: lists.dm
		public static void moveElement( dynamic L = null, double? fromIndex = null, double? toIndex = null ) {
			
			if ( fromIndex == toIndex || ( fromIndex ??0) + 1 == toIndex ) {
				return;
			}

			if ( ( fromIndex ??0) > ( toIndex ??0) ) {
				fromIndex++;
			}
			L.Insert( toIndex, null );
			L.Swap( ((int)( fromIndex ??0 )), ((int)( toIndex ??0 )) );
			L.Cut( ((int?)( fromIndex )), ((int)( ( fromIndex ??0) + 1 )) );
			return;
		}

		// Function from file: lists.dm
		public static void moveRange( dynamic L = null, double? fromIndex = null, double? toIndex = null, double? len = null ) {
			len = len ?? 1;

			double? distance = null;
			double? i = null;
			double? i2 = null;

			distance = Math.Abs( ( toIndex ??0) - ( fromIndex ??0) );

			if ( ( len ??0) >= ( distance ??0) ) {
				
				if ( ( fromIndex ??0) <= ( toIndex ??0) ) {
					return;
				}
				fromIndex += len ??0;
				i = null;
				i = 0;

				while (( i ??0) < ( distance ??0)) {
					L.Insert( fromIndex, null );
					L.Swap( ((int)( fromIndex ??0 )), ((int)( toIndex ??0 )) );
					L.Cut( ((int?)( toIndex )), ((int)( ( toIndex ??0) + 1 )) );
					i++;
				}
			} else {
				
				if ( ( fromIndex ??0) > ( toIndex ??0) ) {
					fromIndex += len ??0;
				}
				i2 = null;
				i2 = 0;

				while (( i2 ??0) < ( len ??0)) {
					L.Insert( toIndex, null );
					L.Swap( ((int)( fromIndex ??0 )), ((int)( toIndex ??0 )) );
					L.Cut( ((int?)( fromIndex )), ((int)( ( fromIndex ??0) + 1 )) );
					i2++;
				}
			}
			return;
		}

		// Function from file: lists.dm
		public static dynamic next_list_item( dynamic item = null, ByTable L = null ) {
			dynamic i = null;

			i = L.Find( item );

			if ( i == L.len ) {
				i = 1;
			} else {
				i++;
			}
			return L[i];
		}

		// Function from file: lists.dm
		public static dynamic pick_n_take( dynamic L = null ) {
			dynamic _default = null;

			int? picked = null;

			
			if ( L.len != 0 ) {
				picked = Rand13.Int( 1, L.len );
				_default = L[picked];
				L.Cut( picked, ( picked ??0) + 1 );
			}
			return _default;
		}

		// Function from file: lists.dm
		public static dynamic pickweight( dynamic L = null ) {
			double total = 0;
			dynamic item = null;

			total = 0;

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				item = _a;
				

				if ( !Lang13.Bool( L[item] ) ) {
					L[item] = 1;
				}
				total += Convert.ToDouble( L[item] );
			}
			total = Rand13.Int( 1, ((int)( total )) );

			foreach (dynamic _b in Lang13.Enumerate( L )) {
				item = _b;
				
				total -= Convert.ToDouble( L[item] );

				if ( total <= 0 ) {
					return item;
				}
			}
			return null;
		}

		// Function from file: lists.dm
		public static dynamic previous_list_item( dynamic item = null, ByTable L = null ) {
			dynamic i = null;

			i = L.Find( item );

			if ( i == 1 ) {
				i = L.len;
			} else {
				i--;
			}

			if ( Convert.ToDouble( i ) < L.len || Convert.ToDouble( i ) > L.len ) {
				Game13.log.WriteMsg( "## WARNING: " + ( "" + "code/__HELPERS/lists.dm" + "L" + 169 + ": " + i + " is outside of bounds for list, (" + L.len + ")" ) );
				return null;
			}
			return L[i];
		}

		// Function from file: lists.dm
		public static dynamic reverseRange( dynamic L = null, double? start = null, double? end = null ) {
			start = start ?? 1;
			end = end ?? 0;

			
			if ( L.len != 0 ) {
				start = ( start ??0) % L.len;
				end = ( end ??0) % ( L.len + 1 );

				if ( ( start ??0) <= 0 ) {
					start += L.len;
				}

				if ( ( end ??0) <= 0 ) {
					end += L.len + 1;
				}
				end--;

				while (( start ??0) < ( end ??0)) {
					L.Swap( ((int)( start++ ??0 )), ((int)( end-- ??0 )) );
				}
			}
			return L;
		}

		// Function from file: lists.dm
		public static dynamic safepick( ByTable L = null ) {
			
			if ( L is ByTable && L.len != 0 ) {
				return Rand13.PickFromTable( L );
			}
			return null;
		}

		// Function from file: lists.dm
		public static dynamic shuffle( dynamic L = null ) {
			int? i = null;

			
			if ( !Lang13.Bool( L ) ) {
				return null;
			}
			L = L.Copy();
			i = null;
			i = 1;

			while (( i ??0) <= L.len) {
				L.Swap( i ??0, Rand13.Int( 1, L.len ) );
				i++;
			}
			return L;
		}

		// Function from file: lists.dm
		public static dynamic sortKey( ByTable L = null, bool? order = null ) {
			order = order ?? true;

			return GlobalFuncs.sortTim( L, ( ( order == true ?1:0) >= 0 ? typeof(GlobalFuncs).GetMethod( "cmp_ckey_asc" ) : typeof(GlobalFuncs).GetMethod( "cmp_ckey_dsc" ) ) );
		}

		// Function from file: lists.dm
		public static dynamic sortList( dynamic L = null, System.Reflection.MethodInfo cmp = null ) {
			cmp = cmp ?? typeof(GlobalFuncs).GetMethod( "cmp_text_asc" );

			return GlobalFuncs.sortTim( L.Copy(), cmp );
		}

		// Function from file: lists.dm
		public static dynamic sortNames( ByTable L = null, bool? order = null ) {
			order = order ?? true;

			return GlobalFuncs.sortTim( L, ( ( order == true ?1:0) >= 0 ? typeof(GlobalFuncs).GetMethod( "cmp_name_asc" ) : typeof(GlobalFuncs).GetMethod( "cmp_name_dsc" ) ) );
		}

		// Function from file: lists.dm
		public static dynamic sortRecord( ByTable L = null, string field = null, dynamic order = null ) {
			field = field ?? "name";
			order = order ?? 1;

			GlobalVars.cmp_field = field;
			return GlobalFuncs.sortTim( L, ( Convert.ToDouble( order ) >= 0 ? typeof(GlobalFuncs).GetMethod( "cmp_records_asc" ) : typeof(GlobalFuncs).GetMethod( "cmp_records_dsc" ) ) );
		}

		// Function from file: lists.dm
		public static ByTable uniquelist( dynamic L = null ) {
			ByTable K = null;
			dynamic item = null;

			K = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				item = _a;
				
				Interface13.Stat( null, K.Contains( item ) );

				if ( !false ) {
					K.Add( item );
				}
			}
			return K;
		}

		// Function from file: logging.dm
		public static void add_attacklogs( dynamic user = null, dynamic target = null, string what_done = null, Obj_Item_Weapon_ReagentContainers _object = null, string addition = null, bool? admin_warn = null ) {
			admin_warn = admin_warn ?? GlobalVars.TRUE;

			string user_txt = null;
			string target_txt = null;
			string object_txt = null;
			string intent_txt = null;
			string addition_txt = null;
			string log_msg = null;

			user_txt = ( Lang13.Bool( user ) ? "" + user + ( Lang13.Bool( user.ckey ) ? " (" + user.ckey + ")" : "" ) : "&lt;NULL USER&gt;" );
			target_txt = ( Lang13.Bool( target ) ? "" + target + ( Lang13.Bool( target.ckey ) ? " (" + target.ckey + ")" : "" ) : "&lt;NULL TARGET&gt;" );
			object_txt = ( _object != null ? new Txt( " with " ).the( _object ).item().ToString() : "" );
			intent_txt = ( Lang13.Bool( user ) ? " (INTENT: " + String13.ToUpper( user.a_intent ) + ")" : "" );
			addition_txt = ( Lang13.Bool( addition ) ? " (" + addition + ")" : "" );

			if ( user is Mob ) {
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <span class='danger'>Has " + what_done + " " + target_txt + object_txt + "." + intent_txt + addition_txt + "</span>" );
			}

			if ( target is Mob ) {
				target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been " + what_done + " by " + user_txt + object_txt + "." + intent_txt + addition_txt + "</font>" );
				target.LAssailant = ( user is Mob_Living_Carbon ? user : null );
			}
			log_msg = "<span class='danger'>" + user_txt + " " + what_done + " " + target_txt + object_txt + intent_txt + ".</span>" + addition_txt + " (" + GlobalFuncs.formatJumpTo( user, "JMP" ) + ")";
			GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + log_msg ) );

			if ( admin_warn == true ) {
				GlobalFuncs.msg_admin_attack( log_msg );
			}
			return;
		}

		// Function from file: logging.dm
		public static void add_gamelogs( dynamic user = null, string what_done = null, bool? admin = null, bool? tp_link = null, bool? tp_link_short = null, string span_class = null ) {
			admin = admin ?? true;
			tp_link = tp_link ?? GlobalVars.FALSE;
			tp_link_short = tp_link_short ?? GlobalVars.TRUE;
			span_class = span_class ?? "notice";

			string user_text = null;
			string link = null;
			string msg = null;

			user_text = ( user is Mob ? "" + user + " (" + user.ckey + ")" : "<NULL USER>" );
			link = ( tp_link == true ? " (" + GlobalFuncs.formatJumpTo( user, ( tp_link_short == true ? "JMP" : "" ) ) + ")" : "" );
			msg = "<span class='" + span_class + "'>" + user_text + " has " + what_done + ".</span>" + link;
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + msg ) );

			if ( admin == true ) {
				GlobalFuncs.message_admins( msg );
			}
			return;
		}

		// Function from file: logging.dm
		public static void error( string msg = null ) {
			Game13.log.WriteMsg( "## ERROR: " + msg );
			return;
		}

		// Function from file: logging.dm
		public static void log_admin( string raw_text = null ) {
			string text_to_log = null;

			text_to_log = "[" + GlobalFuncs.time_stamp() + "]ADMIN: " + raw_text;
			GlobalVars.admin_log.Add( text_to_log );

			if ( GlobalVars.config.log_admin ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( text_to_log ) );
			}

			if ( GlobalVars.config.log_admin_only == true ) {
				GlobalVars.admin_diary.WriteMsg( String13.HtmlDecode( text_to_log ) );
			}
			return;
		}

		// Function from file: logging.dm
		public static void log_adminghost( string text = null ) {
			
			if ( GlobalVars.config.log_adminghost ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ADMINGHOST: " + text ) );
				GlobalFuncs.message_admins( "[ADMINGHOST] " + text );
			}
			return;
		}

		// Function from file: logging.dm
		public static void log_debug( string text = null ) {
			dynamic C = null;

			
			if ( Lang13.Bool( GlobalVars.config.log_debug ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]DEBUG: " + text ) );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C.prefs.toggles & 2048 ) ) {
					GlobalFuncs.to_chat( C, "DEBUG: " + text );
				}
			}
			return;
		}

		// Function from file: logging.dm
		public static void log_ghost( string text = null ) {
			
			if ( GlobalVars.config.log_adminghost ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GHOST: " + text ) );
				GlobalFuncs.message_admins( "[GHOST] " + text );
			}
			return;
		}

		// Function from file: logging.dm
		public static void log_reagents( dynamic user = null, Obj_Item_Weapon_ReagentContainers source = null, dynamic target = null, dynamic amount = null, ByTable reagent_names = null ) {
			string reagent_text = null;

			
			if ( amount == 0 ) {
				return;
			}

			if ( reagent_names != null && reagent_names.len > 0 ) {
				reagent_text = "<span class='danger'>" + GlobalFuncs.english_list( reagent_names ) + "</span>";
				GlobalFuncs.add_gamelogs( user, new Txt( "added " ).item( amount ).str( "u (inc. " ).item( reagent_text ).str( ") to " ).a( target ).item().str( " with " ).the( source ).item().ToString(), GlobalVars.TRUE, GlobalVars.TRUE );
			} else {
				GlobalFuncs.add_gamelogs( user, new Txt( "added " ).item( amount ).str( "u to " ).a( target ).item().str( " with " ).the( source ).item().ToString(), GlobalVars.TRUE, GlobalVars.FALSE );
			}
			return;
		}

		// Function from file: logging.dm
		public static void log_startup_progress( string message = null ) {
			GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>" + message + "</span>" );
			Game13.log.WriteMsg( message );
			return;
		}

		// Function from file: materials.dm
		public static void initialize_materials(  ) {
			dynamic matdata = null;
			dynamic mat = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Material) ) - typeof(Material) )) {
				matdata = _a;
				
				mat = Lang13.Call( matdata );
				GlobalVars.material_list += new ByTable().Set( mat.id, mat );
				GlobalVars.initial_materials += new ByTable().Set( mat.id, 0 );
			}
			return;
		}

		// Function from file: maths.dm
		public static double arctan( double x = 0 ) {
			double y = 0;

			y = Math.Asin( x / Math.Sqrt( x * x + 1 ) );
			return y;
		}

		// Function from file: maths.dm
		public static double Atan2( int x = 0, int y = 0 ) {
			double invcos = 0;

			
			if ( !( x != 0 ) && !( y != 0 ) ) {
				return 0;
			}
			invcos = Math.Acos( x / Math.Sqrt( x * x + y * y ) );
			return ( y >= 0 ? invcos : -invcos );
		}

		// Function from file: maths.dm
		public static int Ceiling( dynamic x = null, int? y = null ) {
			y = y ?? 1;

			int _default = 0;

			_default = -Num13.Floor( Convert.ToDouble( -x / y ) ) * ( y ??0);
			return _default;
		}

		// Function from file: maths.dm
		public static double cheap_pythag( double Ax = 0, double Ay = 0 ) {
			double dx = 0;
			double dy = 0;

			dx = Math.Abs( Ax );
			dy = Math.Abs( Ay );

			if ( dx >= dy ) {
				return dx + dy * 0.5;
			} else {
				return dy + dx * 0.5;
			}
		}

		// Function from file: maths.dm
		public static double Cot( double x = 0 ) {
			return 1 / GlobalFuncs.Tan( x );
		}

		// Function from file: maths.dm
		public static double Csc( double x = 0 ) {
			return 1 / Math.Sin( x );
		}

		// Function from file: maths.dm
		public static dynamic Floor( dynamic x = null, double? y = null ) {
			x = x ?? 0;
			y = y ?? 0;

			double? diff = null;

			
			if ( x == 0 ) {
				return 0;
			}

			if ( y == 0 ) {
				return Num13.Floor( Convert.ToDouble( x ) );
			}

			if ( Convert.ToDouble( x ) < ( y ??0) ) {
				return 0;
			}
			diff = Num13.Round( Convert.ToDouble( x ), y ??0 );

			if ( ( diff ??0) > Convert.ToDouble( x ) ) {
				return x - ( ( y ??0) - ( ( diff ??0) - Convert.ToDouble( x ) ) );
			} else {
				return diff;
			}
		}

		// Function from file: maths.dm
		public static double Gcd( double a = 0, double b = 0 ) {
			return ( b != 0 ? GlobalFuncs.Gcd( b, a % b ) : a );
		}

		// Function from file: maths.dm
		public static bool IsEven( int? x = null ) {
			return ( x ??0) % 2 == 0;
		}

		// Function from file: maths.dm
		public static bool IsInRange( dynamic val = null, int min = 0, int max = 0 ) {
			return min <= Convert.ToDouble( val ) && Convert.ToDouble( val ) <= max;
		}

		// Function from file: maths.dm
		public static bool IsMultiple( int x = 0, int y = 0 ) {
			return x % y == 0;
		}

		// Function from file: maths.dm
		public static bool IsOdd( int? x = null ) {
			return !GlobalFuncs.IsEven( x );
		}

		// Function from file: maths.dm
		public static double Lcm( double a = 0, double b = 0 ) {
			return Math.Abs( a ) / GlobalFuncs.Gcd( a, b ) * Math.Abs( b );
		}

		// Function from file: maths.dm
		public static double Mean( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			int values = 0;
			double sum = 0;
			dynamic val = null;

			values = 0;
			sum = 0;

			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				val = _a;
				
				values++;
				sum += Convert.ToDouble( val );
			}
			return sum / values;
		}

		// Function from file: maths.dm
		public static dynamic mix( dynamic a = null, dynamic b = null, double x = 0 ) {
			return a * ( 1 - x ) + b * x;
		}

		// Function from file: maths.dm
		public static double Root( dynamic n = null, double x = 0 ) {
			return Math.Pow( x, 1 / Convert.ToDouble( n ) );
		}

		// Function from file: maths.dm
		public static double Sec( double x = 0 ) {
			return 1 / Math.Cos( x );
		}

		// Function from file: maths.dm
		public static double Tan( double x = 0 ) {
			return Math.Sin( x ) / Math.Cos( x );
		}

		// Function from file: maths.dm
		public static bool test_bitflag( double? bitflag = null ) {
			return bitflag != 0 && !( ( ((int)( bitflag ??0 )) & ((int)( ( bitflag ??0) - 1 )) ) != 0 );
		}

		// Function from file: maths.dm
		public static dynamic ToDegrees( dynamic radians = null ) {
			return radians * 57.295780181884766;
		}

		// Function from file: maths.dm
		public static dynamic ToRadians( dynamic degrees = null ) {
			return degrees * 0.01745329238474369;
		}

		// Function from file: maths.dm
		public static double triangular_seq( double input = 0, int scale = 0 ) {
			double mult = 0;
			double trinum = 0;

			
			if ( input < 0 ) {
				return -GlobalFuncs.triangular_seq( -input, scale );
			}
			mult = input / scale;
			trinum = ( Math.Sqrt( mult * 8 + 1 ) - 1 ) / 2;
			return trinum * scale;
		}

		// Function from file: maths.dm
		public static double? unmix( dynamic x = null, int a = 0, int b = 0, double? min = null, double? max = null ) {
			min = min ?? 0;
			max = max ?? 1;

			
			if ( a == b ) {
				return 1;
			}
			return ( ( b - Convert.ToDouble( x ) ) / ( b - a ) <= ( min ??0) ? min : ( ( b - Convert.ToDouble( x ) ) / ( b - a ) >= ( max ??0) ? max : ( b - Convert.ToDouble( x ) ) / ( b - a ) ) );
		}

		// Function from file: mechanic_designs.dm
		public static ByTable ConvertReqString2List( dynamic source_list = null ) {
			ByTable temp_list = null;
			dynamic O = null;

			temp_list = String13.ParseUrlParams( source_list );

			foreach (dynamic _a in Lang13.Enumerate( temp_list )) {
				O = _a;
				
				temp_list[O] = String13.ParseNumber( temp_list[O] );
			}
			return temp_list;
		}

		// Function from file: mediamanager.dm
		public static void stop_all_media(  ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( Lang13.Bool( M ) && Lang13.Bool( M.client ) ) {
					((Mob)M).stop_all_music();
				}
			}
			return;
		}

		// Function from file: message_server.dm
		public static void feedback_add_details( dynamic variable = null, dynamic details = null ) {
			FeedbackVariable FV = null;

			
			if ( !( GlobalVars.blackbox != null ) ) {
				return;
			}
			variable = GlobalFuncs.sql_sanitize_text( variable );
			details = GlobalFuncs.sql_sanitize_text( details );
			FV = GlobalVars.blackbox.find_feedback_datum( variable );

			if ( !( FV != null ) ) {
				return;
			}
			FV.add_details( details );
			return;
		}

		// Function from file: message_server.dm
		public static void feedback_inc( dynamic variable = null, dynamic value = null ) {
			FeedbackVariable FV = null;

			
			if ( !( GlobalVars.blackbox != null ) ) {
				return;
			}
			variable = GlobalFuncs.sql_sanitize_text( variable );
			FV = GlobalVars.blackbox.find_feedback_datum( variable );

			if ( !( FV != null ) ) {
				return;
			}
			FV.inc( value );
			return;
		}

		// Function from file: message_server.dm
		public static void feedback_set( dynamic variable = null, dynamic value = null ) {
			FeedbackVariable FV = null;

			
			if ( !( GlobalVars.blackbox != null ) ) {
				return;
			}
			variable = GlobalFuncs.sql_sanitize_text( variable );
			FV = GlobalVars.blackbox.find_feedback_datum( variable );

			if ( !( FV != null ) ) {
				return;
			}
			FV.set_value( value );
			return;
		}

		// Function from file: message_server.dm
		public static void feedback_set_details( dynamic variable = null, dynamic details = null ) {
			FeedbackVariable FV = null;

			
			if ( !( GlobalVars.blackbox != null ) ) {
				return;
			}
			variable = GlobalFuncs.sql_sanitize_text( variable );
			details = GlobalFuncs.sql_sanitize_text( details );
			FV = GlobalVars.blackbox.find_feedback_datum( variable );

			if ( !( FV != null ) ) {
				return;
			}
			FV.set_details( details );
			return;
		}

		// Function from file: message_server.dm
		public static dynamic sql_sanitize_text( dynamic text = null ) {
			text = GlobalFuncs.replacetext( text, "'", "''" );
			text = GlobalFuncs.replacetext( text, ";", "" );
			text = GlobalFuncs.replacetext( text, "&", "" );
			return text;
		}

		// Function from file: meteors.dm
		public static void meteor_wave( int? number = null, int? max_size = null, dynamic types = null ) {
			number = number ?? GlobalVars.meteors_in_wave;
			max_size = max_size ?? 0;

			ByTable greek_alphabet = null;
			string wave_final_name = null;
			double i = 0;
			dynamic meteor_type = null;

			
			if ( !( GlobalVars.ticker != null ) || GlobalVars.meteor_wave_active ) {
				return;
			}
			GlobalVars.meteor_wave_active = true;
			GlobalVars.meteor_wave_delay = Rand13.Int( 30, 45 ) * 10;
			GlobalVars.chosen_dir = Rand13.PickFromTable( GlobalVars.cardinal );
			GlobalVars.max_meteor_size = max_size;
			greek_alphabet = new ByTable(new object [] { 
				"Alpha", 
				"Beta", 
				"Delta", 
				"Epsilon", 
				"Zeta", 
				"Eta", 
				"Theta", 
				"Iota", 
				"Kappa", 
				"Lambda", 
				"Mu", 
				"Nu", 
				"Xi", 
				"Omicron", 
				"Pi", 
				"Rho", 
				"Sigma", 
				"Tau", 
				"Upsilon", 
				"Phi", 
				"Chi", 
				"Psi", 
				"Omega"
			 });
			wave_final_name = "" + ( ( number ??0) > 25 ? "Major" : "Minor" ) + " Meteor " + Rand13.Pick(new object [] { "Wave", "Cluster", "Group" }) + " " + Rand13.PickFromTable( greek_alphabet ) + "-" + Rand13.Int( 1, 999 );
			GlobalFuncs.output_information( GlobalVars.meteor_wave_delay, GlobalVars.chosen_dir, max_size, number, wave_final_name );
			Task13.Schedule( GlobalVars.meteor_wave_delay, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.IterateRange( 0, number )) {
					i = _a;
					
					Task13.Sleep( Rand13.Int( 1, 3 ) );
					meteor_type = null;

					if ( types != null ) {
						meteor_type = Rand13.PickFromTable( types );
					}
					GlobalFuncs.spawn_meteor( GlobalVars.chosen_dir, meteor_type );
				}
				Task13.Sleep( 50 );
				GlobalVars.meteor_wave_active = false;
				return;
			}));
			return;
		}

		// Function from file: meteors.dm
		public static void output_information( int meteor_delay = 0, dynamic wave_dir = null, int? meteor_size = null, int? wave_size = null, string wave_name = null ) {
			string meteor_l_size = null;
			string wave_l_dir = null;
			Obj_Machinery_Computer_Bhangmeter bhangmeter = null;

			meteor_l_size = "unknown";

			switch ((int?)( meteor_size )) {
				case 1:
					meteor_l_size = "small";
					break;
				case 2:
					meteor_l_size = "medium";
					break;
				case 3:
					meteor_l_size = "large";
					break;
				case 4:
					meteor_l_size = "apocalyptic";
					break;
				default:
					meteor_l_size = "unknown";
					break;
			}
			wave_l_dir = "north";

			dynamic _b = wave_dir; // Was a switch-case, sorry for the mess.
			if ( _b==1 ) {
				wave_l_dir = "north";
			} else if ( _b==2 ) {
				wave_l_dir = "south";
			} else if ( _b==4 ) {
				wave_l_dir = "east";
			} else if ( _b==8 ) {
				wave_l_dir = "west";
			}
			GlobalFuncs.message_admins( "" + wave_name + ", containing " + wave_size + " objects up to " + meteor_l_size + " size and incoming from the " + wave_l_dir + ", will strike in " + meteor_delay / 10 + " seconds." );

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.doppler_arrays, typeof(Obj_Machinery_Computer_Bhangmeter) )) {
				bhangmeter = _c;
				

				if ( bhangmeter != null && !( bhangmeter.stat != 0 ) ) {
					bhangmeter.say( "Detected: " + wave_name + ", containing " + wave_size + " objects up to " + meteor_l_size + " size and incoming from the " + wave_l_dir + ", will strike in " + meteor_delay / 10 + " seconds." );
				}
			}
			return;
		}

		// Function from file: meteors.dm
		public static void spawn_meteor( dynamic chosen_dir = null, dynamic meteorpath = null ) {
			int startx = 0;
			int starty = 0;
			int endx = 0;
			int endy = 0;
			Tile pickedstart = null;
			Tile pickedgoal = null;
			int max_i = 0;
			dynamic M = null;
			ByTable possible_meteors = null;
			dynamic chosen = null;

			max_i = 5;

			do {
				
				dynamic _a = chosen_dir; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					starty = Game13.map_size_y - 9;
					startx = Rand13.Int( 9, Game13.map_size_x - 9 );
					endy = 7;
					endx = Rand13.Int( 7, Game13.map_size_x - 7 );
				} else if ( _a==2 ) {
					starty = 9;
					startx = Rand13.Int( 9, Game13.map_size_x - 9 );
					endy = Game13.map_size_y - 9;
					endx = Rand13.Int( 7, Game13.map_size_x - 7 );
				} else if ( _a==4 ) {
					starty = Rand13.Int( 9, Game13.map_size_y - 9 );
					startx = Game13.map_size_x - 9;
					endy = Rand13.Int( 7, Game13.map_size_y - 7 );
					endx = 9;
				} else if ( _a==8 ) {
					starty = Rand13.Int( 9, Game13.map_size_y - 9 );
					startx = 9;
					endy = Rand13.Int( 7, Game13.map_size_y - 7 );
					endx = Game13.map_size_x - 9;
				}
				pickedstart = Map13.GetTile( startx, starty, 1 );
				pickedgoal = Map13.GetTile( endx, endy, 1 );
				max_i--;

				if ( max_i <= 0 ) {
					return;
				}
			} while ( !( pickedstart is Tile_Space ) );
			M = null;

			if ( Lang13.Bool( meteorpath ) ) {
				M = Lang13.Call( meteorpath, pickedstart );
			} else {
				possible_meteors = new ByTable();

				if ( !Lang13.Bool( GlobalVars.max_meteor_size ) || ( GlobalVars.max_meteor_size ??0) >= 1 ) {
					possible_meteors[typeof(Obj_Effect_Meteor_Small)] = 40;
					possible_meteors[typeof(Obj_Effect_Meteor_Small_Flash)] = 5;
				}

				if ( !Lang13.Bool( GlobalVars.max_meteor_size ) || ( GlobalVars.max_meteor_size ??0) >= 2 ) {
					possible_meteors[typeof(Obj_Effect_Meteor)] = 55;
					possible_meteors[typeof(Obj_Effect_Meteor_Radioactive)] = 5;
				}

				if ( !Lang13.Bool( GlobalVars.max_meteor_size ) || ( GlobalVars.max_meteor_size ??0) >= 3 ) {
					possible_meteors[typeof(Obj_Effect_Meteor_Big)] = 5;
					possible_meteors[typeof(Obj_Effect_Meteor_Big_Cluster)] = 5;
				}
				chosen = Rand13.PickFromTable( possible_meteors );
				M = Lang13.Call( chosen, pickedstart );
			}

			if ( Lang13.Bool( M ) ) {
				Map13.WalkTowardsSimple( M, pickedgoal, 1 );
			}
			return;
		}

		// Function from file: mind.dm
		public static bool? mind_can_reenter( Mind mind = null ) {
			Mob_Dead_Observer G = null;

			
			if ( mind != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
					G = _a;
					

					if ( G.can_reenter_corpse != 0 && G.mind == mind ) {
						return GlobalVars.TRUE;
					}
				}
			}
			return GlobalVars.FALSE;
		}

		// Function from file: minerals.dm
		public static bool SetupMinerals(  ) {
			dynamic type = null;
			dynamic new_mineral = null;

			GlobalVars.name_to_mineral = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Mineral) ) - typeof(Mineral) )) {
				type = _a;
				
				new_mineral = Lang13.Call( type );

				if ( !Lang13.Bool( new_mineral.name ) ) {
					continue;
				}
				GlobalVars.name_to_mineral[new_mineral.name] = new_mineral;
			}
			return true;
		}

		// Function from file: miniblob.dm
		public static void dotheblobbaby(  ) {
			double i = 0;
			dynamic B = null;

			
			if ( GlobalVars.blobevent ) {
				
				if ( GlobalVars.blob_cores.len != 0 ) {
					
					foreach (dynamic _a in Lang13.IterateRange( 1, 5 )) {
						i = _a;
						
						Task13.Sleep( -1 );

						if ( !( GlobalVars.blob_cores.len != 0 ) ) {
							break;
						}
						B = Rand13.PickFromTable( GlobalVars.blob_cores );

						if ( Lang13.Bool( B.z ) != true ) {
							continue;
						}
						B.Life();
					}
				}
				Task13.Schedule( 30, (Task13.Closure)(() => {
					GlobalFuncs.dotheblobbaby();
					return;
				}));
			}
			return;
		}

		// Function from file: miniblob.dm
		public static void mini_blob_event(  ) {
			dynamic T = null;
			Obj_Effect_Blob_Core bl = null;
			dynamic M = null;

			T = Rand13.PickFromTable( GlobalVars.blobstart );
			bl = new Obj_Effect_Blob_Core( T, 200 );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				bl.Life();
				bl.Life();
				bl.Life();
				return;
			}));
			GlobalVars.blobevent = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.dotheblobbaby();
				return;
			}));
			Task13.Schedule( 3000, (Task13.Closure)(() => {
				GlobalVars.blobevent = false;
				return;
			}));
			Task13.Schedule( Rand13.Int( 1000, 2000 ), (Task13.Closure)(() => {
				GlobalFuncs.command_alert( "Confirmed outbreak of level 5 biohazard aboard " + GlobalFuncs.station_name() + ". All personnel must contain the outbreak.", "Biohazard Alert" );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( !( M is Mob_NewPlayer ) && Lang13.Bool( M.client ) ) {
						M.WriteMsg( new Sound( "sound/AI/outbreak5.ogg" ) );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: misc.dm
		public static void SetupXenoarch(  ) {
			Tile_Unsimulated_Mineral M = null;
			int digsite = 0;
			ByTable processed_turfs = null;
			ByTable turfs_to_process = null;
			Tile_Unsimulated_Mineral archeo_turf = null;
			Tile_Unsimulated_Mineral T = null;
			Find F = null;

			
			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mineral_turfs, typeof(Tile_Unsimulated_Mineral) )) {
				M = _b;
				

				if ( !Rand13.PercentChance( ((int)( 0.5 )) ) ) {
					continue;
				}
				digsite = Convert.ToInt32( GlobalFuncs.get_random_digsite_type() );
				processed_turfs = new ByTable();
				turfs_to_process = new ByTable(new object [] { M });

				while (turfs_to_process.len != 0) {
					archeo_turf = turfs_to_process[1];

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( archeo_turf, 1 ), typeof(Tile_Unsimulated_Mineral) )) {
						T = _a;
						

						if ( T.finds.len != 0 ) {
							continue;
						}
						Interface13.Stat( null, processed_turfs.Contains( T ) );

						if ( T.finds.len != 0 ) {
							continue;
						}

						if ( Rand13.PercentChance( 15 ) ) {
							turfs_to_process.Add( T );
						}
					}
					turfs_to_process.Remove( archeo_turf );
					processed_turfs.Add( archeo_turf );

					if ( !( archeo_turf.finds != null ) || !( archeo_turf.finds.len != 0 ) ) {
						
						if ( Rand13.PercentChance( 50 ) ) {
							archeo_turf.finds.Add( new Find( digsite, Rand13.Int( 5, 95 ) ) );
						} else if ( Rand13.PercentChance( 75 ) ) {
							archeo_turf.finds.Add( new Find( digsite, Rand13.Int( 5, 45 ) ) );
							archeo_turf.finds.Add( new Find( digsite, Rand13.Int( 55, 95 ) ) );
						} else {
							archeo_turf.finds.Add( new Find( digsite, Rand13.Int( 5, 30 ) ) );
							archeo_turf.finds.Add( new Find( digsite, Rand13.Int( 35, 75 ) ) );
							archeo_turf.finds.Add( new Find( digsite, Rand13.Int( 75, 95 ) ) );
						}
						F = archeo_turf.finds[1];

						if ( F.excavation_required <= F.view_range ) {
							archeo_turf.archaeo_overlay = "overlay_archaeo" + Rand13.Int( 1, 3 );
							archeo_turf.overlays.Add( archeo_turf.archaeo_overlay );
						}
					}
				}

				if ( !( M.artifact_find != null ) && digsite != 1 && digsite != 2 && Rand13.PercentChance( 20 ) ) {
					M.artifact_find = new ArtifactFind();
					GlobalVars.master_controller.artifact_spawning_turfs.Add( M );
				}

				if ( M.geologic_data == null ) {
					M.geologic_data = new Geosample( M );
				}
			}
			return;
		}

		// Function from file: mob_helpers.dm
		public static void broadcast_hud_message( string message = null, Obj_Machinery_Bot broadcast_source = null, ByTable targets = null, Type icon = null ) {
			dynamic sourceturf = null;
			dynamic M = null;
			dynamic targetturf = null;

			sourceturf = GlobalFuncs.get_turf( broadcast_source );

			foreach (dynamic _a in Lang13.Enumerate( targets )) {
				M = _a;
				
				targetturf = GlobalFuncs.get_turf( M );

				if ( targetturf.z == sourceturf.z ) {
					((Mob)M).show_message( new Txt( "<span class='info'>" ).icon( icon ).str( " " ).item( message ).str( "</span>" ).ToString(), 1 );
				}
			}
			return;
		}

		// Function from file: mob_helpers.dm
		public static void broadcast_medical_hud_message( string message = null, Obj_Machinery_Bot_Medbot broadcast_source = null ) {
			GlobalFuncs.broadcast_hud_message( message, broadcast_source, GlobalVars.med_hud_users, typeof(Obj_Item_Clothing_Glasses_Hud_Health) );
			return;
		}

		// Function from file: mob_helpers.dm
		public static void broadcast_security_hud_message( string message = null, Obj_Machinery_Bot broadcast_source = null ) {
			GlobalFuncs.broadcast_hud_message( message, broadcast_source, GlobalVars.sec_hud_users, typeof(Obj_Item_Clothing_Glasses_Hud_Security) );
			return;
		}

		// Function from file: mob_helpers.dm
		public static bool canGhostRead( dynamic A = null, Ent_Static target = null, int? flags = null ) {
			flags = flags ?? 1;

			
			if ( GlobalFuncs.isAdminGhost( A ) ) {
				return true;
			}

			if ( ( ( flags ??0) & 1 ) != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public static bool canGhostWrite( dynamic A = null, Game_Data target = null, string desc = null, int? flags = null ) {
			desc = desc ?? "fucked with";
			flags = flags ?? 0;

			
			if ( ( ( flags ??0) & 1 ) != 0 ) {
				
				if ( !Lang13.Bool( ((dynamic)target).blessed ) ) {
					return true;
				}
			}

			if ( GlobalFuncs.isAdminGhost( A ) ) {
				
				if ( desc != "" ) {
					GlobalFuncs.add_ghostlogs( A, target, desc, true );
				}
				return true;
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public static bool check_holy( Mob A = null ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( A );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( !T.holy ) {
				return false;
			}
			return true;
		}

		// Function from file: mob_helpers.dm
		public static dynamic check_zone( dynamic zone = null ) {
			
			if ( !Lang13.Bool( zone ) ) {
				return "chest";
			}

			dynamic _a = zone; // Was a switch-case, sorry for the mess.
			if ( _a=="eyes" ) {
				zone = "head";
			} else if ( _a=="mouth" ) {
				zone = "head";
			}
			return zone;
		}

		// Function from file: mob_helpers.dm
		public static string derpspeech( string message = null, dynamic stuttering = null ) {
			message = GlobalFuncs.replacetext( message, " am ", " " );
			message = GlobalFuncs.replacetext( message, " is ", " " );
			message = GlobalFuncs.replacetext( message, " are ", " " );
			message = GlobalFuncs.replacetext( message, "you", "u" );
			message = GlobalFuncs.replacetext( message, "help", "halp" );
			message = GlobalFuncs.replacetext( message, "grief", "griff" );
			message = GlobalFuncs.replacetext( message, "space", "spess" );
			message = GlobalFuncs.replacetext( message, "carp", "crap" );
			message = GlobalFuncs.replacetext( message, "reason", "raisin" );

			if ( Rand13.PercentChance( 50 ) ) {
				message = String13.ToUpper( message );
				message += "" + GlobalFuncs.stutter( Rand13.Pick(new object [] { "!", "!!", "!!!" }) );
			}

			if ( !Lang13.Bool( stuttering ) && Rand13.PercentChance( 15 ) ) {
				message = GlobalFuncs.stutter( message );
			}
			return message;
		}

		// Function from file: mob_helpers.dm
		public static dynamic findname( string msg = null ) {
			dynamic M = null;

			
			if ( !( msg is string ) ) {
				msg = "" + msg;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( M.real_name == msg ) {
					return M;
				}
			}
			return 0;
		}

		// Function from file: mob_helpers.dm
		public static dynamic get_multitool( dynamic user = null ) {
			dynamic P = null;
			dynamic AI = null;
			dynamic G = null;

			
			if ( user is Mob_Living_Silicon_Robot || user is Mob_Living_Carbon_Human ) {
				P = ((Mob)user).get_active_hand();
			} else if ( user is Mob_Living_Silicon_Ai ) {
				AI = user;
				P = AI.aiMulti;
			} else if ( GlobalFuncs.isAdminGhost( user ) ) {
				G = user;
				P = G.ghostMulti;
			}

			if ( !( P is Obj_Item_Device_Multitool ) ) {
				return null;
			}
			return P;
		}

		// Function from file: mob_helpers.dm
		public static dynamic get_zone_with_miss_chance( dynamic zone = null, dynamic target = null, double? miss_chance_mod = null ) {
			miss_chance_mod = miss_chance_mod ?? 0;

			int miss_chance = 0;
			int t = 0;

			zone = GlobalFuncs.check_zone( zone );

			if ( !Lang13.Bool( target.locked_to ) && !( target.lying == true ) ) {
				miss_chance = 10;

				dynamic _a = zone; // Was a switch-case, sorry for the mess.
				if ( _a=="head" ) {
					miss_chance = 40;
				} else if ( _a=="l_leg" ) {
					miss_chance = 20;
				} else if ( _a=="r_leg" ) {
					miss_chance = 20;
				} else if ( _a=="l_arm" ) {
					miss_chance = 20;
				} else if ( _a=="r_arm" ) {
					miss_chance = 20;
				} else if ( _a=="l_hand" ) {
					miss_chance = 50;
				} else if ( _a=="r_hand" ) {
					miss_chance = 50;
				} else if ( _a=="l_foot" ) {
					miss_chance = 50;
				} else if ( _a=="r_foot" ) {
					miss_chance = 50;
				}
				miss_chance = Num13.MaxInt( ((int)( miss_chance + ( miss_chance_mod ??0) )), 0 );

				if ( Rand13.PercentChance( miss_chance ) ) {
					
					if ( Rand13.PercentChance( 70 ) ) {
						return null;
					} else {
						t = Rand13.Int( 1, 10 );

						switch ((int)( t )) {
							case 1:
								return "head";
								break;
							case 2:
								return "l_arm";
								break;
							case 3:
								return "r_arm";
								break;
							case 4:
								return "chest";
								break;
							case 5:
								return "l_foot";
								break;
							case 6:
								return "r_foot";
								break;
							case 7:
								return "l_hand";
								break;
							case 8:
								return "r_hand";
								break;
							case 9:
								return "l_leg";
								break;
							case 10:
								return "r_leg";
								break;
						}
					}
				}
			}
			return zone;
		}

		// Function from file: mob_helpers.dm
		public static string Gibberish( dynamic t = null, dynamic p = null ) {
			string returntext = null;
			int? i = null;
			string letter = null;
			int? j = null;

			returntext = "";
			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( t )) {
				letter = String13.SubStr( t, i ??0, ( i ??0) + 1 );

				if ( Rand13.PercentChance( 50 ) ) {
					
					if ( Convert.ToDouble( p ) >= 70 ) {
						letter = "";
					}
					j = null;
					j = 1;

					while (( j ??0) <= Rand13.Int( 0, 2 )) {
						letter += Rand13.Pick(new object [] { "#", "@", "*", "&", "%", "$", "/", "<", ">", ";", "*", "*", "*", "*", "*", "*", "*" });
						j++;
					}
				}
				returntext += letter;
				i++;
			}
			return returntext;
		}

		// Function from file: mob_helpers.dm
		public static bool hasorgans( dynamic A = null ) {
			return A is Mob_Living_Carbon_Human;
		}

		// Function from file: mob_helpers.dm
		public static dynamic intent_numeric( dynamic argument = null ) {
			
			if ( argument is string ) {
				
				dynamic _a = argument; // Was a switch-case, sorry for the mess.
				if ( _a=="help" ) {
					return 0;
				} else if ( _a=="disarm" ) {
					return 1;
				} else if ( _a=="grab" ) {
					return 2;
				} else {
					return 3;
				}
			} else {
				
				dynamic _b = argument; // Was a switch-case, sorry for the mess.
				if ( _b==0 ) {
					return "help";
				} else if ( _b==1 ) {
					return "disarm";
				} else if ( _b==2 ) {
					return "grab";
				} else {
					return "hurt";
				}
			}
			return null;
		}

		// Function from file: mob_helpers.dm
		public static bool isAdminGhost( dynamic A = null ) {
			dynamic O = null;

			
			if ( A is Mob_Dead_Observer ) {
				O = A;

				if ( ((Mob)O).check_rights( 10 ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public static bool isloyal( Mob_Living_Carbon A = null ) {
			Obj_Item_Weapon_Implant_Loyalty L = null;

			
			foreach (dynamic _a in Lang13.Enumerate( A, typeof(Obj_Item_Weapon_Implant_Loyalty) )) {
				L = _a;
				

				if ( L != null && L.implanted ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public static dynamic ran_zone( dynamic zone = null, int? probability = null ) {
			int t = 0;

			zone = GlobalFuncs.check_zone( zone );

			if ( !Lang13.Bool( probability ) ) {
				probability = 90;
			}

			if ( probability == 100 ) {
				return zone;
			}

			if ( zone == "chest" ) {
				
				if ( Rand13.PercentChance( probability ??0 ) ) {
					return "chest";
				}
				t = Rand13.Int( 1, 9 );

				dynamic _a = t; // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=3 ) {
					return "head";
				} else if ( 4<=_a&&_a<=6 ) {
					return "l_arm";
				} else if ( 7<=_a&&_a<=9 ) {
					return "r_arm";
				}
			}

			if ( Rand13.PercentChance( ((int)( ( probability ??0) * 0.75 )) ) ) {
				return zone;
			}
			return "chest";
		}

		// Function from file: mob_helpers.dm
		public static void RemoveAllFactionIcons( Mind M = null ) {
			((GameMode)GlobalVars.ticker.mode).update_cult_icons_removed( M );
			((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( M );
			((GameMode)GlobalVars.ticker.mode).update_wizard_icons_removed( M );
			return;
		}

		// Function from file: mob_helpers.dm
		public static void shake_camera( dynamic M = null, dynamic duration = null, int? strength = null ) {
			duration = duration ?? 0;
			strength = strength ?? 1;

			double x = 0;

			Task13.Schedule( 1, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( M ) || !Lang13.Bool( M.client ) || M.shakecamera ) {
					return;
				}
				M.shakecamera = true;

				foreach (dynamic _a in Lang13.IterateRange( 1, duration )) {
					x = _a;
					

					if ( !Lang13.Bool( M ) || !Lang13.Bool( M.client ) ) {
						M.shakecamera = false;
						return;
					}
					M.client.pixel_x = Rand13.Int( -( strength ??0), strength ??0 ) * 32;
					M.client.pixel_y = Rand13.Int( -( strength ??0), strength ??0 ) * 32;
					Task13.Sleep( 1 );
				}
				M.shakecamera = false;
				M.client.pixel_x = 0;
				M.client.pixel_y = 0;
				return;
			}));
			return;
		}

		// Function from file: mob_helpers.dm
		public static string slur( string phrase = null ) {
			int leng = 0;
			int counter = 0;
			string newphrase = null;
			string newletter = null;

			phrase = String13.HtmlDecode( phrase );
			leng = Lang13.Length( phrase );
			counter = Lang13.Length( phrase );
			newphrase = "";
			newletter = "";

			while (counter >= 1) {
				newletter = String13.SubStr( phrase, leng - counter + 1, leng - counter + 2 );

				if ( Rand13.Int( 1, 3 ) == 3 ) {
					
					if ( String13.ToLower( newletter ) == "o" ) {
						newletter = "u";
					}

					if ( String13.ToLower( newletter ) == "s" ) {
						newletter = "ch";
					}

					if ( String13.ToLower( newletter ) == "a" ) {
						newletter = "ah";
					}

					if ( String13.ToLower( newletter ) == "c" ) {
						newletter = "k";
					}
				}

				switch ((int)( Rand13.Int( 1, 15 ) )) {
					case 1:
					case 3:
					case 5:
					case 8:
						newletter = "" + String13.ToLower( newletter );
						break;
					case 2:
					case 4:
					case 6:
					case 15:
						newletter = "" + String13.ToUpper( newletter );
						break;
					case 7:
						newletter += "'";
						break;
				}
				newphrase += "" + newletter;
				counter -= 1;
			}
			return newphrase;
		}

		// Function from file: mob_helpers.dm
		public static dynamic stars( dynamic n = null, int? pr = null ) {
			pr = pr ?? 25;

			dynamic te = null;
			string t = null;
			int? p = null;

			
			if ( ( pr ??0) <= 0 ) {
				return null;
			} else if ( ( pr ??0) >= 100 ) {
				return n;
			}
			te = n;
			t = "";
			n = Lang13.Length( n );
			p = null;
			p = 1;

			while (( p ??0) <= Convert.ToDouble( n )) {
				
				if ( String13.SubStr( te, p ??0, ( p ??0) + 1 ) == " " || Rand13.PercentChance( pr ??0 ) ) {
					t = "" + t + String13.SubStr( te, p ??0, ( p ??0) + 1 );
				} else {
					t = "" + t + "*";
				}
				p++;
			}
			return t;
		}

		// Function from file: mob_helpers.dm
		public static string stutter( dynamic n = null ) {
			string te = null;
			string t = null;
			int? p = null;
			string n_letter = null;

			te = String13.HtmlDecode( n );
			t = "";
			n = Lang13.Length( n );
			p = null;
			p = 1;

			while (( p ??0) <= Convert.ToDouble( n )) {
				n_letter = String13.SubStr( te, p ??0, ( p ??0) + 1 );

				if ( Rand13.PercentChance( 80 ) && false ) {
					
					if ( Rand13.PercentChance( 10 ) ) {
						n_letter = "" + n_letter + "-" + n_letter + "-" + n_letter + "-" + n_letter;
					} else if ( Rand13.PercentChance( 20 ) ) {
						n_letter = "" + n_letter + "-" + n_letter + "-" + n_letter;
					} else if ( Rand13.PercentChance( 5 ) ) {
						n_letter = null;
					} else {
						n_letter = "" + n_letter + "-" + n_letter;
					}
				}
				t = "" + t + n_letter;
				p++;
			}
			return String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );
		}

		// Function from file: mobs.dm
		public static void add_ghostlogs( dynamic user = null, Game_Data target = null, string what_done = null, bool? admin = null, dynamic addition = null ) {
			admin = admin ?? true;

			string target_text = null;
			string subject_text = null;
			Game_Data M = null;
			dynamic M2 = null;
			Game_Data M3 = null;

			target_text = "NON-EXISTENT TARGET";
			subject_text = "NON-EXISTENT SUBJECT";

			if ( target != null ) {
				target_text = ((dynamic)target).name;

				if ( target is Mob ) {
					M = target;

					if ( Lang13.Bool( ((dynamic)M).ckey ) ) {
						target_text += "(" + ((dynamic)M).ckey + ")";
					}
				}
			}

			if ( Lang13.Bool( user ) ) {
				subject_text = user.name;

				if ( user is Mob ) {
					M2 = user;

					if ( Lang13.Bool( M2.ckey ) ) {
						subject_text += "(" + M2.ckey + ")";
					}
				}
			}

			if ( Lang13.Bool( user ) && user is Mob ) {
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] GHOST: <font color='red'>Has " + what_done + " " + target_text + " " + addition + "</font>" );
			}

			if ( target != null && target is Mob ) {
				M3 = target;
				((dynamic)M3).attack_log += "[" + GlobalFuncs.time_stamp() + "] GHOST: <font color='orange'>Has been " + what_done + " by " + subject_text + " " + addition + "</font>";
			}

			if ( admin == true ) {
				
				if ( GlobalFuncs.isAdminGhost( user ) ) {
					GlobalFuncs.log_adminghost( "" + subject_text + " " + what_done + " " + target_text + " " + addition );
				} else {
					GlobalFuncs.log_ghost( "" + subject_text + " " + what_done + " " + target_text + " " + addition );
				}
			}
			return;
		}

		// Function from file: mobs.dm
		public static void add_logs( dynamic user = null, dynamic target = null, string what_done = null, bool? admin = null, dynamic _object = null, string addition = null ) {
			admin = admin ?? true;

			
			if ( Lang13.Bool( user ) && user is Mob ) {
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has " + what_done + " " + ( Lang13.Bool( target ) ? "" + target.name + ( target is Mob && Lang13.Bool( target.ckey ) ? "(" + target.ckey + ")" : "" ) : "NON-EXISTANT SUBJECT" ) + ( Lang13.Bool( _object ) ? " with " + _object : " " ) + addition + "</font>" );
			}

			if ( Lang13.Bool( target ) && target is Mob ) {
				target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been " + what_done + " by " + ( Lang13.Bool( user ) ? "" + user.name + ( user is Mob && Lang13.Bool( user.ckey ) ? "(" + user.ckey + ")" : "" ) : "NON-EXISTANT SUBJECT" ) + ( Lang13.Bool( _object ) ? " with " + _object : " " ) + addition + "</font>" );

				if ( !( user is Mob_Living_Carbon ) ) {
					target.LAssailant = null;
				} else {
					target.LAssailant = user;
				}
			}

			if ( admin == true ) {
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + ( Lang13.Bool( user ) ? "" + user.name + ( user is Mob && Lang13.Bool( user.ckey ) ? "(" + user.ckey + ")" : "" ) : "NON-EXISTANT SUBJECT" ) + " " + what_done + " " + ( Lang13.Bool( target ) ? "" + target.name + ( target is Mob && Lang13.Bool( target.ckey ) ? "(" + target.ckey + ")" : "" ) : "NON-EXISTANT SUBJECT" ) + ( Lang13.Bool( _object ) ? " with " + _object : " " ) + addition + "</font>" ) ) );
			}
			return;
		}

		// Function from file: mobs.dm
		public static dynamic random_facial_hair_style( string gender = null, dynamic species = null ) {
			species = species ?? "Human";

			dynamic f_style = null;
			ByTable valid_facialhairstyles = null;
			dynamic facialhairstyle = null;
			SpriteAccessory S = null;

			f_style = "Shaved";
			valid_facialhairstyles = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.facial_hair_styles_list )) {
				facialhairstyle = _a;
				
				S = GlobalVars.facial_hair_styles_list[facialhairstyle];

				if ( gender == GlobalVars.MALE && S.gender == GlobalVars.FEMALE ) {
					continue;
				}

				if ( gender == GlobalVars.FEMALE && S.gender == GlobalVars.MALE ) {
					continue;
				}
				Interface13.Stat( null, S.species_allowed.Contains( species ) );

				if ( !( gender == GlobalVars.FEMALE && S.gender == GlobalVars.MALE ) ) {
					continue;
				}
				valid_facialhairstyles[facialhairstyle] = GlobalVars.facial_hair_styles_list[facialhairstyle];
			}

			if ( valid_facialhairstyles.len != 0 ) {
				f_style = Rand13.PickFromTable( valid_facialhairstyles );
				return f_style;
			}
			return null;
		}

		// Function from file: mobs.dm
		public static dynamic random_hair_style( string gender = null, dynamic species = null ) {
			species = species ?? "Human";

			dynamic h_style = null;
			ByTable valid_hairstyles = null;
			dynamic hairstyle = null;
			SpriteAccessory S = null;

			h_style = "Bald";
			valid_hairstyles = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.hair_styles_list )) {
				hairstyle = _a;
				
				S = GlobalVars.hair_styles_list[hairstyle];

				if ( gender == GlobalVars.MALE && S.gender == GlobalVars.FEMALE ) {
					continue;
				}

				if ( gender == GlobalVars.FEMALE && S.gender == GlobalVars.MALE ) {
					continue;
				}
				Interface13.Stat( null, S.species_allowed.Contains( species ) );

				if ( !( gender == GlobalVars.FEMALE && S.gender == GlobalVars.MALE ) ) {
					continue;
				}
				valid_hairstyles[hairstyle] = GlobalVars.hair_styles_list[hairstyle];
			}

			if ( valid_hairstyles.len != 0 ) {
				h_style = Rand13.PickFromTable( valid_hairstyles );
			}
			return h_style;
		}

		// Function from file: mobs.dm
		public static string random_name( string gender = null, dynamic speciesName = null ) {
			speciesName = speciesName ?? "Human";

			Species S = null;
			Species_Human H = null;

			S = GlobalVars.all_species[speciesName];

			if ( S != null ) {
				return S.makeName( gender );
			} else {
				H = new Species_Human();
				return H.makeName( gender );
			}
		}

		// Function from file: mobs.dm
		public static int random_skin_tone(  ) {
			int _default = 0;

			
			dynamic _a = Rand13.PickWeighted(new object [] { 39321, "caucasian", 49151, "afroamerican", 55704, "african", 62257, "latino", 65535, "albino" }); // Was a switch-case, sorry for the mess.
			if ( _a=="caucasian" ) {
				_default = -10;
			} else if ( _a=="afroamerican" ) {
				_default = -115;
			} else if ( _a=="african" ) {
				_default = -165;
			} else if ( _a=="latino" ) {
				_default = -55;
			} else if ( _a=="albino" ) {
				_default = 34;
			} else {
				_default = Rand13.Int( -185, 34 );
			}
			return Num13.MinInt( Num13.MaxInt( _default + Rand13.Int( -25, 25 ), -185 ), 34 );
		}

		// Function from file: mobs.dm
		public static string RoundHealth( dynamic health = null ) {
			
			dynamic _a = health; // Was a switch-case, sorry for the mess.
			if ( 100<=_a&&_a<=Double.PositiveInfinity ) {
				return "health100";
			} else if ( 70<=_a&&_a<=100 ) {
				return "health80";
			} else if ( 50<=_a&&_a<=70 ) {
				return "health60";
			} else if ( 30<=_a&&_a<=50 ) {
				return "health40";
			} else if ( 18<=_a&&_a<=30 ) {
				return "health25";
			} else if ( 5<=_a&&_a<=18 ) {
				return "health10";
			} else if ( 1<=_a&&_a<=5 ) {
				return "health1";
			} else if ( -99<=_a&&_a<=0 ) {
				return "health0";
			} else {
				return "health-100";
			}
			return "0";
		}

		// Function from file: names.dm
		public static dynamic change_command_name( dynamic name = null ) {
			GlobalVars.command_name = name;
			return name;
		}

		// Function from file: names.dm
		public static dynamic command_name(  ) {
			string name = null;

			
			if ( Lang13.Bool( GlobalVars.command_name ) ) {
				return GlobalVars.command_name;
			}
			name = "";

			if ( Rand13.PercentChance( 10 ) ) {
				name += Rand13.Pick(new object [] { "Super", "Ultra" });
				name += " ";
			}

			if ( Lang13.Bool( name ) ) {
				name += Rand13.Pick(new object [] { "", "Central", "System", "Home", "Galactic" });
			} else {
				name += Rand13.Pick(new object [] { "Central", "System", "Home", "Galactic" });
			}

			if ( Lang13.Bool( name ) ) {
				name += " ";
			}
			name += Rand13.Pick(new object [] { "Federation", "Command", "Alliance", "Unity", "Empire", "Confederation", "Protectorate", "Commonwealth", "Imperium", "Republic" });
			name += " ";
			GlobalVars.command_name = name;
			return name;
		}

		// Function from file: names.dm
		public static string generate_code_phrase(  ) {
			string code_phrase = null;
			int words = 0;
			ByTable safety = null;
			ByTable nouns = null;
			ByTable drinks = null;
			ByTable locations = null;
			ByTable names = null;
			Data_Record t = null;
			int maxwords = 0;

			code_phrase = "";
			words = Convert.ToInt32( Rand13.PickWeighted(new object [] { 10082, 2, 50411, 3, 60493, 4, 65535, 5 }) );
			safety = new ByTable(new object [] { 1, 2, 3 });
			nouns = new ByTable(new object [] { 
				"love", 
				"hate", 
				"anger", 
				"peace", 
				"pride", 
				"sympathy", 
				"bravery", 
				"loyalty", 
				"honesty", 
				"integrity", 
				"compassion", 
				"charity", 
				"success", 
				"courage", 
				"deceit", 
				"skill", 
				"beauty", 
				"brilliance", 
				"pain", 
				"misery", 
				"beliefs", 
				"dreams", 
				"justice", 
				"truth", 
				"faith", 
				"liberty", 
				"knowledge", 
				"thought", 
				"information", 
				"culture", 
				"trust", 
				"dedication", 
				"progress", 
				"education", 
				"hospitality", 
				"leisure", 
				"trouble", 
				"friendships", 
				"relaxation"
			 });
			drinks = new ByTable(new object [] { 
				"vodka and tonic", 
				"gin fizz", 
				"bahama mama", 
				"manhattan", 
				"black Russian", 
				"whiskey soda", 
				"long island tea", 
				"margarita", 
				"Irish coffee", 
				" manly dwarf", 
				"Irish cream", 
				"doctor's delight", 
				"Beepksy Smash", 
				"tequila sunrise", 
				"brave bull", 
				"gargle blaster", 
				"bloody mary", 
				"whiskey cola", 
				"white Russian", 
				"vodka martini", 
				"martini", 
				"Cuba libre", 
				"kahlua", 
				"vodka", 
				"wine", 
				"moonshine"
			 });
			locations = ( GlobalVars.teleportlocs.len != 0 ? GlobalVars.teleportlocs : drinks );
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
				t = _a;
				
				names.Add( t.fields["name"] );
			}
			maxwords = words;

			while (words > 0) {
				
				if ( words == 1 && false && false ) {
					safety = new ByTable(new object [] { Rand13.Pick(new object [] { 1, 2 }) });
				} else if ( words == 1 && maxwords == 2 ) {
					safety = new ByTable(new object [] { 3 });
				}

				dynamic _e = Rand13.PickFromTable( safety ); // Was a switch-case, sorry for the mess.
				if ( _e==1 ) {
					
					switch ((int)( Rand13.Int( 1, 2 ) )) {
						case 1:
							
							if ( names.len != 0 && Rand13.PercentChance( 70 ) ) {
								code_phrase += Rand13.PickFromTable( names );
							} else {
								code_phrase += Rand13.PickFromTable( Rand13.Pick(new object [] { GlobalVars.first_names_male, GlobalVars.first_names_female }) );
								code_phrase += " ";
								code_phrase += Rand13.PickFromTable( GlobalVars.last_names );
							}
							break;
						case 2:
							code_phrase += Rand13.PickFromTable( GlobalFuncs.get_all_jobs() );
							break;
					}
					safety.Remove( 1 );
				} else if ( _e==2 ) {
					
					switch ((int)( Rand13.Int( 1, 2 ) )) {
						case 1:
							code_phrase += Rand13.PickFromTable( drinks );
							break;
						case 2:
							code_phrase += Rand13.PickFromTable( locations );
							break;
					}
					safety.Remove( 2 );
				} else if ( _e==3 ) {
					
					switch ((int)( Rand13.Int( 1, 3 ) )) {
						case 1:
							code_phrase += Rand13.PickFromTable( nouns );
							break;
						case 2:
							code_phrase += Rand13.PickFromTable( GlobalVars.adjectives );
							break;
						case 3:
							code_phrase += Rand13.PickFromTable( GlobalVars.verbs );
							break;
					}
				}

				if ( words == 1 ) {
					code_phrase += ".";
				} else {
					code_phrase += ", ";
				}
				words--;
			}
			return code_phrase;
		}

		// Function from file: names.dm
		public static string station_name(  ) {
			int random = 0;
			string name = null;
			int i = 0;

			
			if ( Lang13.Bool( GlobalVars.station_name ) ) {
				return GlobalVars.station_name;
			}
			random = Rand13.Int( 1, 5 );
			name = "";

			if ( Rand13.PercentChance( 10 ) ) {
				name = Rand13.Pick(new object [] { "Imperium", "Heretical", "Cuban", "Psychic", "Elegant", "Common", "Uncommon", "Rare", "Unique", "Houseruled", "Religious", "Atheist", "Traditional", "Houseruled", "Mad", "Super", "Ultra", "Secret", "Top Secret", "Deep", "Death", "Zybourne", "Central", "Main", "Government", "Uoi", "Fat", "Automated", "Experimental", "Augmented" });
				GlobalVars.station_name = name + " ";
			}

			dynamic _a = GlobalVars.Holiday; // Was a switch-case, sorry for the mess.
			if ( _a==null || _a=="" || _a==0 ) {
				name = Rand13.Pick(new object [] { "", "Stanford", "Dorf", "Alium", "Prefix", "Clowning", "Aegis", "Ishimura", "Scaredy", "Death-World", "Mime", "Honk", "Rogue", "MacRagge", "Ultrameens", "Safety", "Paranoia", "Explosive", "Neckbear", "Donk", "Muppet", "North", "West", "East", "South", "Slant-ways", "Widdershins", "Rimward", "Expensive", "Procreatory", "Imperial", "Unidentified", "Immoral", "Carp", "Ork", "Pete", "Control", "Nettle", "Aspie", "Class", "Crab", "Fist", "Corrogated", "Skeleton", "Race", "Fatguy", "Gentleman", "Capitalist", "Communist", "Bear", "Beard", "Derp", "Space", "Spess", "Star", "Moon", "System", "Mining", "Neckbeard", "Research", "Supply", "Military", "Orbital", "Battle", "Science", "Asteroid", "Home", "Production", "Transport", "Delivery", "Extraplanetary", "Orbital", "Correctional", "Robot", "Hats", "Pizza" });

				if ( Lang13.Bool( name ) ) {
					GlobalVars.station_name += name + " ";
				}
			} else if ( _a=="Friday the 13th" ) {
				name = Rand13.Pick(new object [] { "Mike", "Friday", "Evil", "Myers", "Murder", "Deathly", "Stabby" });
				GlobalVars.station_name += name + " ";
				random = 13;
			} else {
				i = String13.FindIgnoreCase( GlobalVars.Holiday, " ", 1, 0 );
				name = String13.SubStr( GlobalVars.Holiday, 1, i );
				GlobalVars.station_name += name + " ";
			}
			name = Rand13.Pick(new object [] { "Station", "Fortress", "Frontier", "Suffix", "Death-trap", "Space-hulk", "Lab", "Hazard", "Spess Junk", "Fishery", "No-Moon", "Tomb", "Crypt", "Hut", "Monkey", "Bomb", "Trade Post", "Fortress", "Village", "Town", "City", "Edition", "Hive", "Complex", "Base", "Facility", "Depot", "Outpost", "Installation", "Drydock", "Observatory", "Array", "Relay", "Monitor", "Platform", "Construct", "Hangar", "Prison", "Center", "Port", "Waystation", "Factory", "Waypoint", "Stopover", "Hub", "HQ", "Office", "Object", "Fortification", "Colony", "Planet-Cracker", "Roost", "Fat Camp" });
			GlobalVars.station_name += name + " ";

			switch ((int)( random )) {
				case 1:
					GlobalVars.station_name += "" + Rand13.Int( 1, 99 );
					break;
				case 2:
					GlobalVars.station_name += Rand13.Pick(new object [] { "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega" });
					break;
				case 3:
					GlobalVars.station_name += Rand13.Pick(new object [] { "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX" });
					break;
				case 4:
					GlobalVars.station_name += Rand13.Pick(new object [] { "Alpha", "Bravo", "Charlie", "Delta", "Echo", "Foxtrot", "Golf", "Hotel", "India", "Juliet", "Kilo", "Lima", "Mike", "November", "Oscar", "Papa", "Quebec", "Romeo", "Sierra", "Tango", "Uniform", "Victor", "Whiskey", "X-ray", "Yankee", "Zulu" });
					break;
				case 5:
					GlobalVars.station_name += Rand13.Pick(new object [] { "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" });
					break;
				case 13:
					GlobalVars.station_name += Rand13.Pick(new object [] { "13", "XIII", "Thirteen" });
					break;
			}

			if ( GlobalVars.config != null && Lang13.Bool( GlobalVars.config.server_name ) ) {
				Game13.name = "" + GlobalVars.config.server_name + ": " + name;
			} else {
				Game13.name = GlobalVars.station_name;
			}
			return GlobalVars.station_name;
		}

		// Function from file: names.dm
		public static string syndicate_name(  ) {
			string name = null;

			
			if ( Lang13.Bool( GlobalVars.syndicate_name ) ) {
				return GlobalVars.syndicate_name;
			}
			name = "";
			name += Rand13.Pick(new object [] { "Clandestine", "Prima", "Blue", "Zero-G", "Max", "Blasto", "Waffle", "North", "Omni", "Newton", "Cyber", "Bonk", "Gene", "Gib" });

			if ( Rand13.PercentChance( 80 ) ) {
				name += " ";

				if ( Rand13.PercentChance( 60 ) ) {
					name += Rand13.Pick(new object [] { "Syndicate", "Consortium", "Collective", "Corporation", "Group", "Holdings", "Biotech", "Industries", "Systems", "Products", "Chemicals", "Enterprises", "Family", "Creations", "International", "Intergalactic", "Interplanetary", "Foundation", "Positronics", "Hive" });
				} else {
					name += Rand13.Pick(new object [] { "Syndi", "Corp", "Bio", "System", "Prod", "Chem", "Inter", "Hive" });
					name += Rand13.Pick(new object [] { "", "-" });
					name += Rand13.Pick(new object [] { "Tech", "Sun", "Co", "Tek", "X", "Inc", "Code" });
				}
			} else {
				name += Rand13.Pick(new object [] { "-", "*", "" });
				name += Rand13.Pick(new object [] { "Tech", "Sun", "Co", "Tek", "X", "Inc", "Gen", "Star", "Dyne", "Code", "Hive" });
			}
			GlobalVars.syndicate_name = name;
			return name;
		}

		// Function from file: new_player.dm
		public static void AnnounceArrival( dynamic character = null, dynamic rank = null ) {
			Game_Data speech = null;

			
			if ( GlobalVars.ticker.current_state == 3 ) {
				
				if ( Lang13.Bool( character.mind.role_alt_title ) ) {
					rank = character.mind.role_alt_title;
				}
				speech = GlobalVars.announcement_intercom.create_speech( "" + character.real_name + "," + ( Lang13.Bool( rank ) ? " " + rank + "," : " visitor," ) + " has arrived on the station.", null, GlobalVars.announcement_intercom );
				((dynamic)speech).name = "Arrivals Announcement Computer";
				((dynamic)speech).job = "Automated Announcement";
				((dynamic)speech).as_name = "Arrivals Announcement Computer";
				((dynamic)speech).frequency = 1459;
				GlobalFuncs.Broadcast_Message( speech, null, 0, 0, new ByTable(new object [] { 0, 1 }) );
				GlobalFuncs.returnToPool( speech );
			}
			return;
		}

		// Function from file: NewBan.dm
		public static bool AddBan( string ckey = null, dynamic computerid = null, dynamic reason = null, string bannedby = null, bool temp = false, dynamic minutes = null, string address = null ) {
			double bantimestamp = 0;

			
			if ( temp ) {
				GlobalFuncs.UpdateTime();
				bantimestamp = GlobalVars.CMinutes + Convert.ToDouble( minutes );
			}
			GlobalVars.Banlist.cd = "/base";

			if ( GlobalVars.Banlist.dir.Find( "" + ckey + computerid ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Ban already exists.</span>" );
				return false;
			} else {
				GlobalVars.Banlist.dir.Add( "" + ckey + computerid );
				GlobalVars.Banlist.cd = "/base/" + ckey + computerid;
				GlobalVars.Banlist["key"] = ckey;
				GlobalVars.Banlist["id"] = computerid;
				GlobalVars.Banlist["ip"] = address;
				GlobalVars.Banlist["reason"] = reason;
				GlobalVars.Banlist["bannedby"] = bannedby;
				GlobalVars.Banlist["temp"] = temp;

				if ( temp ) {
					GlobalVars.Banlist["minutes"] = bantimestamp;
				}
			}
			return true;
		}

		// Function from file: NewBan.dm
		public static dynamic CheckBan( string ckey = null, int id = 0, dynamic address = null ) {
			dynamic _default = null;

			string appeal = null;
			dynamic A = null;
			dynamic matches = null;

			
			if ( !( GlobalVars.Banlist != null ) ) {
				GlobalFuncs.LoadBans();

				if ( !( GlobalVars.Banlist != null ) ) {
					return 0;
				}
			}
			_default = new ByTable();

			if ( GlobalVars.config != null && Lang13.Bool( GlobalVars.config.banappeals ) ) {
				appeal = "\nFor more information on your ban, or to appeal, head to <a href='" + GlobalVars.config.banappeals + "'>" + GlobalVars.config.banappeals + "</a>";
			}
			GlobalVars.Banlist.cd = "/base";
			Interface13.Stat( null, GlobalVars.Banlist.dir.Contains( "" + ckey + id ) );

			if ( GlobalVars.config != null && Lang13.Bool( GlobalVars.config.banappeals ) ) {
				GlobalVars.Banlist.cd = "" + ckey + id;

				if ( Lang13.Bool( GlobalVars.Banlist["temp"] ) ) {
					
					if ( !Lang13.Bool( GlobalFuncs.GetExp( Convert.ToDouble( GlobalVars.Banlist["minutes"] ) ) ) ) {
						GlobalFuncs.ClearTempbans();
						return 0;
					} else {
						_default["desc"] = "\nReason: " + GlobalVars.Banlist["reason"] + "\nExpires: " + GlobalFuncs.GetExp( Convert.ToDouble( GlobalVars.Banlist["minutes"] ) ) + "\nBy: " + GlobalVars.Banlist["bannedby"] + appeal;
					}
				} else {
					GlobalVars.Banlist.cd = "/base/" + ckey + id;
					_default["desc"] = "\nReason: " + GlobalVars.Banlist["reason"] + "\nExpires: <B>PERMENANT</B>\nBy: " + GlobalVars.Banlist["bannedby"] + appeal;
				}
				_default["reason"] = "ckey/id";
				return _default;
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlist.dir )) {
					A = _a;
					
					GlobalVars.Banlist.cd = "/base/" + A;
					matches = null;

					if ( ckey == GlobalVars.Banlist["key"] ) {
						matches += "ckey";
					}

					if ( id == Convert.ToInt32( GlobalVars.Banlist["id"] ) ) {
						
						if ( Lang13.Bool( matches ) ) {
							matches += "/";
						}
						matches += "id";
					}

					if ( address == GlobalVars.Banlist["ip"] ) {
						
						if ( Lang13.Bool( matches ) ) {
							matches += "/";
						}
						matches += "ip";
					}

					if ( Lang13.Bool( matches ) ) {
						
						if ( Lang13.Bool( GlobalVars.Banlist["temp"] ) ) {
							
							if ( !Lang13.Bool( GlobalFuncs.GetExp( Convert.ToDouble( GlobalVars.Banlist["minutes"] ) ) ) ) {
								GlobalFuncs.ClearTempbans();
								return 0;
							} else {
								_default["desc"] = "\nReason: " + GlobalVars.Banlist["reason"] + "\nExpires: " + GlobalFuncs.GetExp( Convert.ToDouble( GlobalVars.Banlist["minutes"] ) ) + "\nBy: " + GlobalVars.Banlist["bannedby"] + appeal;
							}
						} else {
							_default["desc"] = "\nReason: " + GlobalVars.Banlist["reason"] + "\nExpires: <B>PERMENANT</B>\nBy: " + GlobalVars.Banlist["bannedby"] + appeal;
						}
						_default["reason"] = matches;
						return _default;
					}
				}
			}
			return 0;
		}

		// Function from file: NewBan.dm
		public static bool ClearTempbans(  ) {
			dynamic A = null;

			GlobalFuncs.UpdateTime();
			GlobalVars.Banlist.cd = "/base";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlist.dir )) {
				A = _a;
				
				GlobalVars.Banlist.cd = "/base/" + A;

				if ( !Lang13.Bool( GlobalVars.Banlist["key"] ) || !Lang13.Bool( GlobalVars.Banlist["id"] ) ) {
					GlobalFuncs.RemoveBan( A );
					GlobalFuncs.log_admin( "Invalid Ban." );
					GlobalFuncs.message_admins( "Invalid Ban." );
					continue;
				}

				if ( !Lang13.Bool( GlobalVars.Banlist["temp"] ) ) {
					continue;
				}

				if ( GlobalVars.CMinutes >= Convert.ToDouble( GlobalVars.Banlist["minutes"] ) ) {
					GlobalFuncs.RemoveBan( A );
				}
			}
			return true;
		}

		// Function from file: NewBan.dm
		public static dynamic GetExp( double minutes = 0 ) {
			double exp = 0;
			string timeleftstring = null;

			GlobalFuncs.UpdateTime();
			exp = minutes - GlobalVars.CMinutes;

			if ( exp <= 0 ) {
				return 0;
			} else {
				
				if ( exp >= 1440 ) {
					timeleftstring = "" + Num13.Round( exp / 1440, 0.1 ) + " Days";
				} else if ( exp >= 60 ) {
					timeleftstring = "" + Num13.Round( exp / 60, 0.1 ) + " Hours";
				} else {
					timeleftstring = "" + exp + " Minutes";
				}
				return timeleftstring;
			}
		}

		// Function from file: NewBan.dm
		public static bool LoadBans(  ) {
			GlobalVars.Banlist = new SaveFile( "data/banlist.bdb" );
			GlobalFuncs.log_admin( "Loading Banlist" );

			if ( !( Lang13.Length( GlobalVars.Banlist.dir ) != 0 ) ) {
				GlobalFuncs.log_admin( "Banlist is empty." );
			}

			if ( !( GlobalVars.Banlist.dir.Find( "base" ) != 0 ) ) {
				GlobalFuncs.log_admin( "Banlist missing base dir." );
				GlobalVars.Banlist.dir.Add( "base" );
				GlobalVars.Banlist.cd = "/base";
			} else if ( GlobalVars.Banlist.dir.Find( "base" ) != 0 ) {
				GlobalVars.Banlist.cd = "/base";
			}
			GlobalFuncs.ClearTempbans();
			return true;
		}

		// Function from file: NewBan.dm
		public static bool RemoveBan( dynamic foldername = null ) {
			string key = null;
			dynamic id = null;
			dynamic A = null;

			GlobalVars.Banlist.cd = "/base/" + foldername;
			key = GlobalVars.Banlist.ReadItem( "key", key );
			id = GlobalVars.Banlist.ReadItem( "id", id );
			GlobalVars.Banlist.cd = "/base";

			if ( !GlobalVars.Banlist.dir.Remove( foldername ) ) {
				return false;
			}

			if ( !( Task13.User != null ) ) {
				GlobalFuncs.log_admin( "Ban Expired: " + key );
				GlobalFuncs.message_admins( "Ban Expired: " + key );
			} else {
				GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name_admin( Task13.User ) + " unbanned " + key );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " unbanned " + key );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " unbanned: " + key );
				GlobalFuncs.feedback_inc( "ban_unban", 1 );
				Task13.User.client.holder.DB_ban_unban( String13.CKey( key ), 5 );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlist.dir )) {
				A = _a;
				
				GlobalVars.Banlist.cd = "/base/" + A;

				if ( key == GlobalVars.Banlist["key"] ) {
					GlobalVars.Banlist.cd = "/base";
					GlobalVars.Banlist.dir.Remove( A );
					continue;
				}
			}
			return true;
		}

		// Function from file: NewBan.dm
		public static bool UpdateTime(  ) {
			GlobalVars.CMinutes = Game13.realtime / 10 / 60;
			return true;
		}

		// Function from file: newbanjob.dm
		public static bool ClearTempbansjob(  ) {
			dynamic A = null;

			GlobalFuncs.UpdateTime();
			GlobalVars.Banlistjob.cd = "/base";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlistjob.dir )) {
				A = _a;
				
				GlobalVars.Banlistjob.cd = "/base/" + A;

				if ( !Lang13.Bool( GlobalVars.Banlistjob["temp"] ) ) {
					continue;
				}

				if ( GlobalVars.CMinutes >= Convert.ToDouble( GlobalVars.Banlistjob["minutes"] ) ) {
					GlobalFuncs.RemoveBanjob( A );
				}
			}
			return true;
		}

		// Function from file: newbanjob.dm
		public static dynamic GetBanExpjob( dynamic minutes = null ) {
			int exp = 0;
			string timeleftstring = null;

			GlobalFuncs.UpdateTime();
			exp = Convert.ToInt32( minutes - GlobalVars.CMinutes );

			if ( exp <= 0 ) {
				return 0;
			} else {
				
				if ( exp >= 1440 ) {
					timeleftstring = "" + Num13.Round( exp / 1440, 0.1 ) + " Days";
				} else if ( exp >= 60 ) {
					timeleftstring = "" + Num13.Round( exp / 60, 0.1 ) + " Hours";
				} else {
					timeleftstring = "" + exp + " Minutes";
				}
				return timeleftstring;
			}
		}

		// Function from file: newbanjob.dm
		public static bool LoadBansjob(  ) {
			GlobalVars.Banlistjob = new SaveFile( "data/job_fullnew.bdb" );
			GlobalFuncs.log_admin( "Loading Banlistjob" );

			if ( !( Lang13.Length( GlobalVars.Banlistjob.dir ) != 0 ) ) {
				GlobalFuncs.log_admin( "Banlistjob is empty." );
			}

			if ( !( GlobalVars.Banlistjob.dir.Find( "base" ) != 0 ) ) {
				GlobalFuncs.log_admin( "Banlistjob missing base dir." );
				GlobalVars.Banlistjob.dir.Add( "base" );
				GlobalVars.Banlistjob.cd = "/base";
			} else if ( GlobalVars.Banlistjob.dir.Find( "base" ) != 0 ) {
				GlobalVars.Banlistjob.cd = "/base";
			}
			GlobalFuncs.ClearTempbansjob();
			return true;
		}

		// Function from file: newbanjob.dm
		public static bool RemoveBanjob( dynamic foldername = null ) {
			dynamic key = null;
			dynamic id = null;
			dynamic rank = null;
			dynamic A = null;

			GlobalVars.Banlistjob.cd = "/base/" + foldername;
			key = GlobalVars.Banlistjob.ReadItem( "key", key );
			id = GlobalVars.Banlistjob.ReadItem( "id", id );
			rank = GlobalVars.Banlistjob.ReadItem( "rank", rank );
			GlobalVars.Banlistjob.cd = "/base";

			if ( !GlobalVars.Banlistjob.dir.Remove( foldername ) ) {
				return false;
			}

			if ( !( Task13.User != null ) ) {
				GlobalFuncs.log_admin( "Banjob Expired: " + key );
				GlobalFuncs.message_admins( "Banjob Expired: " + key );
			} else {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " unjobbanned " + key + " from " + rank );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " unjobbanned:" + key + " from " + rank );
				GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name_admin( Task13.User ) + " unjobbanned " + key + " from " + rank );
				GlobalFuncs.feedback_inc( "ban_job_unban", 1 );
				GlobalFuncs.feedback_add_details( "ban_job_unban", "- " + rank );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlistjob.dir )) {
				A = _a;
				
				GlobalVars.Banlistjob.cd = "/base/" + A;

				if ( ( key == GlobalVars.Banlistjob["key"] || id == GlobalVars.Banlistjob["id"] ) && rank == GlobalVars.Banlistjob["rank"] ) {
					GlobalVars.Banlistjob.cd = "/base";
					GlobalVars.Banlistjob.dir.Remove( A );
					continue;
				}
			}
			return true;
		}

		// Function from file: nuclear.dm
		public static dynamic nukelastname( dynamic M = null ) {
			dynamic randomname = null;
			dynamic newname = null;

			randomname = Rand13.PickFromTable( GlobalVars.last_names );
			newname = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( M, "You are the nuke operative " + Rand13.Pick(new object [] { "Czar", "Boss", "Commander", "Chief", "Kingpin", "Director", "Overlord" }) + ". Please choose a last name for your family.", "Name change", randomname, null, InputType.Any ) ), 1, 26 );

			if ( !Lang13.Bool( newname ) ) {
				newname = randomname;
			} else if ( newname == "Unknown" || newname == "floor" || newname == "wall" || newname == "rwall" || newname == "_" ) {
				GlobalFuncs.to_chat( M, "That name is reserved." );
				return GlobalFuncs.nukelastname( M );
			}
			return newname;
		}

		// Function from file: nuclear.dm
		public static void NukeNameAssign( dynamic lastname = null, ByTable syndicates = null ) {
			Mind synd_mind = null;

			
			foreach (dynamic _b in Lang13.Enumerate( syndicates, typeof(Mind) )) {
				synd_mind = _b;
				

				dynamic _a = synd_mind.current.gender; // Was a switch-case, sorry for the mess.
				if ( _a=="male" ) {
					synd_mind.name = "" + Rand13.PickFromTable( GlobalVars.first_names_male ) + " " + lastname;
				} else if ( _a=="female" ) {
					synd_mind.name = "" + Rand13.PickFromTable( GlobalVars.first_names_female ) + " " + lastname;
				}
				synd_mind.current.real_name = synd_mind.name;
			}
			return;
		}

		// Function from file: one_click_antag.dm
		public static Mob_Living_Carbon_Human makeBody( dynamic G_found = null ) {
			Mob_Living_Carbon_Human new_character = null;
			Preferences A = null;

			
			if ( !Lang13.Bool( G_found ) || !Lang13.Bool( G_found.key ) ) {
				return null;
			}
			new_character = new Mob_Living_Carbon_Human( Rand13.PickFromTable( GlobalVars.latejoin ) );
			new_character.gender = Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE });
			A = new Preferences();
			A.randomize_appearance_for( new_character );
			new_character.generate_name();
			new_character.age = Rand13.Int( 17, 45 );
			new_character.dna.ready_dna( new_character );
			new_character.key = G_found.key;
			return new_character;
		}

		// Function from file: overview.dm
		public static double getb( string col = null ) {
			return GlobalFuncs.hex2num( String13.SubStr( col, 6, 0 ) );
		}

		// Function from file: overview.dm
		public static double getg( string col = null ) {
			return GlobalFuncs.hex2num( String13.SubStr( col, 4, 6 ) );
		}

		// Function from file: overview.dm
		public static double getr( string col = null ) {
			return GlobalFuncs.hex2num( String13.SubStr( col, 2, 4 ) );
		}

		// Function from file: PDA.dm
		public static ByTable get_viewable_pdas(  ) {
			ByTable _default = null;

			Obj_Item_Device_Pda P = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.PDAs, typeof(Obj_Item_Device_Pda) )) {
				P = _a;
				

				if ( !Lang13.Bool( P.owner ) || P.toff || P.hidden ) {
					continue;
				}
				_default.Add( P );
			}
			return _default;
		}

		// Function from file: pen.dm
		public static bool paperwork_setup(  ) {
			
			if ( GlobalVars.config.paperwork_library ) {
				
				if ( Game13.system_type == GlobalVars.MS_WINDOWS ) {
					GlobalVars.paperwork_library = "markdown_byond.dll";
				} else {
					GlobalVars.paperwork_library = "markdown_byond.so";
				}
				Game13.log.WriteMsg( "Setting up paperwork..." );

				if ( !File13.Exists( GlobalVars.paperwork_library ) ) {
					Game13.log.WriteMsg( "Paperwork was not properly setup, please notify a coder/host about this issue." );
					return false;
				}
				Game13.log.WriteMsg( Lang13.Call( Lang13.BindFunc( GlobalVars.paperwork_library, "init_renderer" ) ) );
				GlobalVars.paperwork = true;
				return true;
			} else {
				return false;
			}
		}

		// Function from file: pen.dm
		public static void paperwork_stop(  ) {
			
			if ( !File13.Exists( GlobalVars.paperwork_library ) ) {
				Game13.log.WriteMsg( "Paperwork file may be missing or something terrible has happened, don't panic and notify a coder/host about this issue." );
				return;
			}

			if ( GlobalVars.paperwork ) {
				Lang13.Call( Lang13.BindFunc( GlobalVars.paperwork_library, "free_memory" ) );
				return;
			} else {
				return;
			}
		}

		// Function from file: pen.dm
		public static string REG_BBTAG( string x = null ) {
			return "\\[" + x + "\\]";
		}

		// Function from file: player_notes.dm
		public static void notes_add( string key = null, dynamic note = null, Mob usr = null ) {
			SaveFile info = null;
			dynamic infos = null;
			string modifyer = null;
			string day_string = null;
			string full_date = null;
			int day_loc = 0;
			PlayerInfo P = null;
			SaveFile note_list = null;
			dynamic note_keys = null;

			
			if ( !Lang13.Bool( key ) || !Lang13.Bool( note ) ) {
				return;
			}
			info = new SaveFile( "data/player_saves/" + String13.SubStr( key, 1, 2 ) + "/" + key + "/info.sav" );
			infos = ((dynamic)info).Read();

			if ( !Lang13.Bool( infos ) ) {
				infos = new ByTable();
			}
			modifyer = "th";

			switch ((string)( String13.FormatTime( Game13.timeofday, "DD" ) )) {
				case "01":
				case "21":
				case "31":
					modifyer = "st";
					break;
				case "02":
				case "22":
					modifyer = "nd";
					break;
				case "03":
				case "23":
					modifyer = "rd";
					break;
			}
			day_string = "" + String13.FormatTime( Game13.timeofday, "DD" ) + modifyer;

			if ( String13.SubStr( day_string, 1, 2 ) == "0" ) {
				day_string = String13.SubStr( day_string, 2, 0 );
			}
			full_date = String13.FormatTime( Game13.timeofday, "DDD, Month DD of YYYY" );
			day_loc = String13.FindIgnoreCase( full_date, String13.FormatTime( Game13.timeofday, "DD" ), 1, 0 );
			P = new PlayerInfo();

			if ( usr != null ) {
				P.author = usr.key;
				P.rank = usr.client.holder.rank;
			} else {
				P.author = "Adminbot";
				P.rank = "Friendly Robot";
			}
			P.content = note;
			P.timestamp = "" + String13.SubStr( full_date, 1, day_loc ) + day_string + String13.SubStr( full_date, day_loc + 2, 0 );
			infos += P;
			((dynamic)info).WriteMsg( infos );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( usr ) + " has edited " + key + "'s notes.</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( usr ) + " has edited " + key + "'s notes." );
			Lang13.Delete( info );
			info = null;
			note_list = new SaveFile( "data/player_notes.sav" );
			note_keys = null;
			note_keys = ((dynamic)note_list).Read();

			if ( !Lang13.Bool( note_keys ) ) {
				note_keys = new ByTable();
			}

			if ( !Lang13.Bool( note_keys.Find( key ) ) ) {
				note_keys += key;
			}
			((dynamic)note_list).WriteMsg( note_keys );
			Lang13.Delete( note_list );
			note_list = null;
			return;
		}

		// Function from file: player_notes.dm
		public static void notes_del( string key = null, double? index = null ) {
			SaveFile info = null;
			dynamic infos = null;
			dynamic item = null;

			info = new SaveFile( "data/player_saves/" + String13.SubStr( key, 1, 2 ) + "/" + key + "/info.sav" );
			infos = ((dynamic)info).Read();

			if ( !Lang13.Bool( infos ) || infos.len < ( index ??0) ) {
				return;
			}
			item = infos[index];
			infos.Remove( item );
			((dynamic)info).WriteMsg( infos );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " deleted one of " + key + "'s notes.</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted one of " + key + "'s notes." );
			Lang13.Delete( info );
			info = null;
			return;
		}

		// Function from file: possess.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Possess Obj", group: "Object" )]
		[VerbArg( 1, InputType.Obj )]
		public static void possess( Base_Data O = null ) {
			dynamic T = null;

			
			if ( O is Obj_Machinery_Singularity ) {
				
				if ( GlobalVars.config.forbid_singulo_possession ) {
					GlobalFuncs.to_chat( Task13.User, "It is forbidden to possess singularities." );
					return;
				}
			}
			T = GlobalFuncs.get_turf( O );

			if ( Lang13.Bool( T ) ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has possessed " + O + " (" + O.type + ") at (" + T.x + ", " + T.y + ", " + T.z + ")" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " has possessed " + O + " (" + O.type + ") at (" + T.x + ", " + T.y + ", " + T.z + ")" );
			} else {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has possessed " + O + " (" + O.type + ") at an unknown location" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " has possessed " + O + " (" + O.type + ") at an unknown location" );
			}

			if ( !( Task13.User.control_object != null ) ) {
				Task13.User.name_archive = Task13.User.real_name;
			}
			Task13.User.loc = O;
			Task13.User.real_name = ((dynamic)O).name;
			Task13.User.name = ((dynamic)O).name;
			Task13.User.client.eye = O;
			Task13.User.control_object = O;
			GlobalFuncs.feedback_add_details( "admin_verb", "PO" );
			return;
		}

		// Function from file: possess.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Release Obj", group: "Object" )]
		[VerbArg( 1, InputType.Obj )]
		public static void release( Ent_Static O = null ) {
			Mob H = null;

			
			if ( Task13.User.control_object != null && Lang13.Bool( Task13.User.name_archive ) ) {
				Task13.User.real_name = Task13.User.name_archive;
				Task13.User.name = Task13.User.real_name;

				if ( Task13.User is Mob_Living_Carbon_Human ) {
					H = Task13.User;
					H.name = ((Mob_Living_Carbon_Human)H).get_visible_name();
				}
			}
			Task13.User.loc = O.loc;
			Task13.User.client.eye = Task13.User;
			Task13.User.control_object = null;
			GlobalFuncs.feedback_add_details( "admin_verb", "RO" );
			return;
		}

		// Function from file: power_failure.dm
		public static void power_failure( bool? announce = null ) {
			announce = announce ?? true;

			dynamic M = null;
			Obj_Machinery_Power_Battery_Smes S = null;
			ByTable skipped_areas = null;
			dynamic A = null;
			bool skip = false;
			dynamic area_type = null;
			Ent_Static AT = null;
			Obj_Machinery_Power_Apc C = null;
			dynamic A2 = null;
			bool skip2 = false;
			dynamic area_type2 = null;

			GlobalVars.suspend_alert = true;

			if ( announce == true ) {
				GlobalFuncs.command_alert( "Abnormal activity detected in " + GlobalFuncs.station_name() + "'s powernet. As a precautionary measure, the station's power will be shut off for an indeterminate duration.", "Critical Power Failure" );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) ) {
						M.WriteMsg( new Sound( "sound/AI/poweroff.ogg" ) );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Battery_Smes) )) {
				S = _b;
				

				if ( GlobalFuncs.get_area( S ) is Zone_TurretProtected || S.z != 1 ) {
					continue;
				}
				S.charge = 0;
				S.output = 0;
				S.online = false;
				S.update_icon();
				S.power_change();
			}
			skipped_areas = new ByTable(new object [] { typeof(Zone_Engineering_Engine), typeof(Zone_TurretProtected_Ai) });

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.areas )) {
				A = _e;
				

				if ( !A.requires_power || A.always_unpowered ) {
					continue;
				}
				skip = false;

				foreach (dynamic _c in Lang13.Enumerate( skipped_areas )) {
					area_type = _c;
					

					if ( Lang13.Bool( area_type.IsInstanceOfType( A ) ) ) {
						skip = true;
						break;
					}
				}

				if ( Lang13.Bool( A.contents ) ) {
					
					foreach (dynamic _d in Lang13.Enumerate( A.contents, typeof(Ent_Static) )) {
						AT = _d;
						

						if ( AT.z != 1 ) {
							skip = true;
						}
						break;
					}
				}

				if ( skip ) {
					continue;
				}
				A.power_light = false;
				A.power_equip = false;
				A.power_environ = false;
			}

			foreach (dynamic _g in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Apc) )) {
				C = _g;
				

				if ( Lang13.Bool( C.cell ) && C.z == 1 ) {
					A2 = GlobalFuncs.get_area( C );
					skip2 = false;

					foreach (dynamic _f in Lang13.Enumerate( skipped_areas )) {
						area_type2 = _f;
						

						if ( Lang13.Bool( area_type2.IsInstanceOfType( A2 ) ) ) {
							skip2 = true;
							break;
						}
					}

					if ( skip2 ) {
						continue;
					}
					C.chargemode = false;
					C.cell.charge = 0;
				}
			}
			return;
		}

		// Function from file: power_failure.dm
		public static void power_restore( bool? announce = null ) {
			announce = announce ?? true;

			dynamic M = null;
			Obj_Machinery_Power_Apc C = null;
			Obj_Machinery_Power_Battery_Smes S = null;
			dynamic A = null;

			
			if ( announce == true ) {
				GlobalFuncs.command_alert( "Power has been restored to " + GlobalFuncs.station_name() + ". We apologize for the inconvenience.", "Power Systems Nominal" );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) ) {
						M.WriteMsg( new Sound( "sound/AI/poweron.ogg" ) );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Apc) )) {
				C = _b;
				

				if ( Lang13.Bool( C.cell ) && C.z == 1 ) {
					C.cell.charge = C.cell.maxcharge;
					C.chargemode = true;
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Battery_Smes) )) {
				S = _c;
				

				if ( S.z != 1 ) {
					continue;
				}
				S.charge = S.capacity;
				S.output = 200000;
				S.online = true;
				S.update_icon();
				S.power_change();
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.areas )) {
				A = _d;
				

				if ( A.name != "Space" && A.name != "Engine Walls" && A.name != "Chemical Lab Test Chamber" && A.name != "space" && A.name != "Escape Shuttle" && A.name != "Arrival Area" && A.name != "Arrival Shuttle" && A.name != "start area" && A.name != "Engine Combustion Chamber" ) {
					A.power_light = true;
					A.power_equip = true;
					A.power_environ = true;
				}
			}
			GlobalVars.suspend_alert = false;
			return;
		}

		// Function from file: power_failure.dm
		public static void power_restore_quick( bool? announce = null ) {
			announce = announce ?? true;

			dynamic M = null;
			Obj_Machinery_Power_Battery_Smes S = null;

			
			if ( announce == true ) {
				GlobalFuncs.command_alert( "All SMESs on " + GlobalFuncs.station_name() + " have been recharged. We apologize for the inconvenience.", "Power Systems Nominal" );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) ) {
						M.WriteMsg( new Sound( "sound/AI/poweron.ogg" ) );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Battery_Smes) )) {
				S = _b;
				

				if ( S.z != 1 ) {
					continue;
				}
				S.charge = S.capacity;
				S.output = 200000;
				S.online = true;
				S.update_icon();
				S.power_change();
			}
			GlobalVars.suspend_alert = false;
			return;
		}

		// Function from file: powernet.dm
		public static dynamic electrocute_mob( dynamic M = null, dynamic power_source = null, dynamic source = null, double? siemens_coeff = null ) {
			siemens_coeff = siemens_coeff ?? 1;

			dynamic H = null;
			dynamic G = null;
			dynamic source_area = null;
			dynamic Cable = null;
			dynamic PN = null;
			dynamic cell = null;
			dynamic apc = null;
			dynamic PN_damage = null;
			dynamic cell_damage = null;
			dynamic shock_damage = null;
			dynamic drained_hp = null;
			dynamic drained_energy = null;
			dynamic drained_power = null;

			
			if ( M.loc is Obj_Mecha ) {
				return 0;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( Lang13.Bool( H.gloves ) ) {
					G = H.gloves;

					if ( G.siemens_coefficient == 0 ) {
						return 0;
					}
				}
			}

			if ( power_source is Zone ) {
				source_area = power_source;
				power_source = source_area.areaapc;
			}

			if ( power_source is Obj_Structure_Cable ) {
				Cable = power_source;
				power_source = Cable.get_powernet();
			}

			if ( power_source is Powernet ) {
				PN = power_source;
			} else if ( power_source is Obj_Item_Weapon_Cell ) {
				cell = power_source;
			} else if ( power_source is Obj_Machinery_Power_Apc ) {
				apc = power_source;
				cell = apc.cell;

				if ( Lang13.Bool( apc.terminal ) ) {
					PN = apc.terminal.powernet;
				}
			} else if ( !Lang13.Bool( power_source ) ) {
				return 0;
			} else {
				GlobalFuncs.log_admin( "ERROR: /proc/electrocute_mob(" + M + ", " + power_source + ", " + source + "): wrong power_source" );
				return 0;
			}

			if ( !Lang13.Bool( cell ) && !Lang13.Bool( PN ) ) {
				return 0;
			}
			PN_damage = 0;
			cell_damage = 0;

			if ( Lang13.Bool( PN ) ) {
				PN_damage = PN.get_electrocute_damage();
			}

			if ( Lang13.Bool( cell ) ) {
				cell_damage = cell.get_electrocute_damage();
			}
			shock_damage = 0;

			if ( Convert.ToDouble( PN_damage ) >= Convert.ToDouble( cell_damage ) ) {
				power_source = PN;
				shock_damage = PN_damage;
			} else {
				power_source = cell;
				shock_damage = cell_damage;
			}
			drained_hp = ((Mob_Living)M).electrocute_act( shock_damage, source, siemens_coeff );
			drained_energy = drained_hp * 20;

			if ( Lang13.Bool( source_area ) ) {
				source_area.use_power( drained_energy / GlobalVars.CELLRATE );
			} else if ( power_source is Powernet ) {
				drained_power = drained_energy / GlobalVars.CELLRATE;
				PN.load += drained_power;
			} else if ( power_source is Obj_Item_Weapon_Cell ) {
				cell.use( drained_energy );
			}
			return drained_energy;
		}

		// Function from file: powernet.dm
		public static void makepowernets(  ) {
			Powernet PN = null;
			Obj_Structure_Cable C = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.powernets, typeof(Powernet) )) {
				PN = _a;
				
				PN.set_to_build();
				GlobalVars.powernets = new ByTable();
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cable_list, typeof(Obj_Structure_Cable) )) {
				C = _b;
				
				C.rebuild_from();
			}
			return;
		}

		// Function from file: powernet.dm
		public static Powernet merge_powernets( Powernet net1 = null, Powernet net2 = null ) {
			Powernet temp = null;
			Obj_Structure_Cable Cable = null;
			Obj_Machinery_Power Node = null;
			PowerConnection PC = null;

			
			if ( !( net1 != null ) || !( net2 != null ) ) {
				return null;
			}

			if ( net1 == net2 ) {
				return null;
			}

			if ( net1.cables.len < net2.cables.len ) {
				temp = net1;
				net1 = net2;
				net2 = temp;
			}

			foreach (dynamic _a in Lang13.Enumerate( net2.cables, typeof(Obj_Structure_Cable) )) {
				Cable = _a;
				
				net1.add_cable( Cable );
			}

			if ( net2 != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( net2.nodes, typeof(Obj_Machinery_Power) )) {
					Node = _b;
					

					if ( !Node.connect_to_network() ) {
						Node.disconnect_from_network();
					}
				}

				foreach (dynamic _c in Lang13.Enumerate( net2.components, typeof(PowerConnection) )) {
					PC = _c;
					

					if ( !PC.connect() ) {
						PC.disconnect();
					}
				}
			}
			return net1;
		}

		// Function from file: powernet.dm
		public static ByTable power_list( Ent_Static T = null, Obj_Structure_Cable source = null, double? d = null, bool? unmarked = null, bool? cable_only = null ) {
			unmarked = unmarked ?? false;
			cable_only = cable_only ?? false;

			ByTable _default = null;

			PowerConnection C = null;
			dynamic AM = null;
			dynamic P = null;
			dynamic C2 = null;

			_default = new ByTable();

			if ( !( T != null ) ) {
				return _default;
			}

			if ( !( cable_only == true ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)T).power_connections, typeof(PowerConnection) )) {
					C = _a;
					

					if ( !( unmarked == true ) || !( C.powernet != null ) ) {
						
						if ( d == 0 ) {
							_default.Add( C );
						}
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( T )) {
				AM = _b;
				

				if ( AM == source ) {
					continue;
				}

				if ( !( cable_only == true ) && AM is Obj_Machinery_Power ) {
					P = AM;

					if ( Lang13.Bool( P.powernet ) == false ) {
						continue;
					}

					if ( !( unmarked == true ) || !Lang13.Bool( P.powernet ) ) {
						
						if ( d == 0 ) {
							_default.Add( P );
						}
					}
				} else if ( AM is Obj_Structure_Cable ) {
					C2 = AM;

					if ( !( unmarked == true ) || !Lang13.Bool( C2.powernet ) ) {
						
						if ( C2.d1 == d || C2.d2 == d ) {
							_default.Add( C2 );
						}
					}
				}
			}
			return _default;
		}

		// Function from file: powernet.dm
		public static void propagate_network( Obj_Structure_Cable O = null, Game_Data PN = null ) {
			ByTable worklist = null;
			ByTable found_machines = null;
			ByTable found_connections = null;
			int index = 0;
			Ent_Dynamic P = null;
			Ent_Dynamic C = null;
			Ent_Dynamic C2 = null;
			Ent_Dynamic M = null;
			Obj_Machinery_Power PM = null;
			PowerConnection PC = null;

			worklist = new ByTable();
			found_machines = new ByTable();
			found_connections = new ByTable();
			index = 1;
			P = null;
			worklist.Add( O );

			while (index <= worklist.len) {
				P = worklist[index];
				index++;

				if ( P is Obj_Structure_Cable ) {
					C = P;

					if ( ((dynamic)C).powernet != PN ) {
						((Powernet)PN).add_cable( C );
					}
					worklist.Or( ((Obj_Structure_Cable)C).get_connections() );
				}

				if ( P is PowerConnection ) {
					C2 = P;
					found_connections.Or( C2 );
				} else if ( Lang13.Bool( P.anchored ) && P is Obj_Machinery_Power ) {
					M = P;
					found_machines.Or( M );
				} else {
					continue;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( found_machines, typeof(Obj_Machinery_Power) )) {
				PM = _a;
				

				if ( !PM.connect_to_network() ) {
					PM.disconnect_from_network();
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( found_connections, typeof(PowerConnection) )) {
				PC = _b;
				

				if ( !PC.connect() ) {
					PC.disconnect();
				}
			}
			return;
		}

		// Function from file: pray.dm
		public static void Centcomm_announce( dynamic text = null, Mob Sender = null ) {
			string msg = null;

			msg = String13.SubStr( GlobalFuncs.sanitize( text ), 1, 1024 );
			msg = new Txt( "<span class='notice'><b><font color=orange>CENTCOMM:</font>" ).item( GlobalFuncs.key_name( Sender, 1 ) ).str( " (<A HREF='?_src_=holder;adminplayeropts=" ).Ref( Sender ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( Sender ).str( "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" ).Ref( Sender ).str( "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservejump=" ).Ref( Sender ).str( "'>JMP</A>) (<A HREF='?_src_=holder;secretsadmin=check_antagonist'>CA</A>) (<A HREF='?_src_=holder;BlueSpaceArtillery=" ).Ref( Sender ).str( "'>BSA</A>) (<A HREF='?_src_=holder;CentcommReply=" ).Ref( Sender ).str( "'>RPLY</A>):</b> " ).item( msg ).str( "</span>" ).ToString();
			GlobalFuncs.to_chat( GlobalVars.admins, msg );
			GlobalFuncs.to_chat( GlobalVars.admins, "sound/effects/msn.ogg" );
			return;
		}

		// Function from file: pray.dm
		public static void Syndicate_announce( dynamic text = null, Mob Sender = null ) {
			string msg = null;

			msg = String13.SubStr( GlobalFuncs.sanitize( text ), 1, 1024 );
			msg = new Txt( "<span class='notice'><b><font color=crimson>SYNDICATE:</font>" ).item( GlobalFuncs.key_name( Sender, 1 ) ).str( " (<A HREF='?_src_=holder;adminplayeropts=" ).Ref( Sender ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( Sender ).str( "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" ).Ref( Sender ).str( "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservejump=" ).Ref( Sender ).str( "'>JMP</A>) (<A HREF='?_src_=holder;secretsadmin=check_antagonist'>CA</A>) (<A HREF='?_src_=holder;BlueSpaceArtillery=" ).Ref( Sender ).str( "'>BSA</A>) (<A HREF='?_src_=holder;SyndicateReply=" ).Ref( Sender ).str( "'>RPLY</A>):</b> " ).item( msg ).str( "</span>" ).ToString();
			GlobalFuncs.to_chat( GlobalVars.admins, msg );
			GlobalFuncs.to_chat( GlobalVars.admins, "sound/effects/inception.ogg" );
			return;
		}

		// Function from file: python.dm
		public static int? ext_python( string script = null, string args = null, bool? scriptsprefix = null, bool? log_command = null ) {
			scriptsprefix = scriptsprefix ?? true;
			log_command = log_command ?? false;

			dynamic command = null;

			
			if ( scriptsprefix == true ) {
				script = "scripts/" + script;
			}

			if ( Game13.system_type == GlobalVars.MS_WINDOWS ) {
				script = GlobalFuncs.replacetext( script, "/", "\\" );
			}
			command = GlobalVars.config.python_path + " " + script + " " + args;

			if ( log_command == true ) {
				Game13.log.WriteMsg( "## TESTING: " + command );
			}
			return Sys13.Execute( command );
		}

		// Function from file: randomverbs.dm
		public static void cmd_admin_mute( dynamic M = null, dynamic mute_type = null, bool? automute = null ) {
			automute = automute ?? false;

			string muteunmute = null;
			string mute_string = null;

			
			if ( automute == true ) {
				
				if ( !GlobalVars.config.automute_on ) {
					return;
				}
			} else {
				
				if ( !( Task13.User != null ) || !( Task13.User.client != null ) ) {
					return;
				}

				if ( !( Task13.User.client.holder != null ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: cmd_admin_mute: You don't have permission to do this.</font>" );
					return;
				}

				if ( !Lang13.Bool( M.client ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: cmd_admin_mute: This mob doesn't have a client tied to it.</font>" );
				}

				if ( Lang13.Bool( M.client.holder ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: cmd_admin_mute: You cannot mute an admin.</font>" );
				}
			}

			if ( !Lang13.Bool( M.client ) ) {
				return;
			}

			if ( Lang13.Bool( M.client.holder ) ) {
				return;
			}

			dynamic _a = mute_type; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				mute_string = "IC (say and emote)";
			} else if ( _a==2 ) {
				mute_string = "OOC";
			} else if ( _a==4 ) {
				mute_string = "pray";
			} else if ( _a==8 ) {
				mute_string = "adminhelp, admin PM and ASAY";
			} else if ( _a==16 ) {
				mute_string = "deadchat and DSAY";
			} else if ( _a==31 ) {
				mute_string = "everything";
			} else {
				return;
			}

			if ( automute == true ) {
				muteunmute = "auto-muted";
				M.client.prefs.muted |= Convert.ToInt32( mute_type );
				GlobalFuncs.log_admin( "SPAM AUTOMUTE: " + muteunmute + " " + GlobalFuncs.key_name( M ) + " from " + mute_string );
				GlobalFuncs.message_admins( "SPAM AUTOMUTE: " + muteunmute + " " + GlobalFuncs.key_name_admin( M ) + " from " + mute_string + "." );
				GlobalFuncs.to_chat( M, "You have been " + muteunmute + " from " + mute_string + " by the SPAM AUTOMUTE system. Contact an admin." );
				GlobalFuncs.feedback_add_details( "admin_verb", "AUTOMUTE" );
				return;
			}

			if ( ( M.client.prefs.muted & Convert.ToInt32( mute_type ) ) != 0 ) {
				muteunmute = "unmuted";
				M.client.prefs.muted &= Convert.ToInt32( ~mute_type );
			} else {
				muteunmute = "muted";
				M.client.prefs.muted |= Convert.ToInt32( mute_type );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has " + muteunmute + " " + GlobalFuncs.key_name( M ) + " from " + mute_string );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has " + muteunmute + " " + GlobalFuncs.key_name_admin( M ) + " from " + mute_string + "." );
			GlobalFuncs.to_chat( M, "You have been " + muteunmute + " from " + mute_string + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "MUTE" );
			return;
		}

		// Function from file: randomverbs.dm
		public static bool create_xeno( dynamic ckey = null ) {
			ByTable candidates = null;
			dynamic M = null;
			dynamic alien_caste = null;
			dynamic spawn_here = null;
			Mob_Living_Carbon_Alien new_xeno = null;

			
			if ( !Lang13.Bool( ckey ) ) {
				candidates = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "alien" ) )) {
					M = _a;
					

					if ( Convert.ToInt32( M.stat ) != 2 ) {
						continue;
					}

					if ( ((Client)M.client).is_afk() != 0 ) {
						continue;
					}
					candidates.Add( M.ckey );
				}

				if ( candidates.len != 0 ) {
					ckey = Interface13.Input( "Pick the player you want to respawn as a xeno.", "Suitable Candidates", null, null, candidates, InputType.Null | InputType.Any );
				} else {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: create_xeno(): no suitable candidates.</font>" );
				}
			}

			if ( !( ckey is string ) ) {
				return false;
			}
			alien_caste = Interface13.Input( Task13.User, "Please choose which caste to spawn.", "Pick a caste", null, new ByTable(new object [] { "Queen", "Hunter", "Sentinel", "Drone", "Larva" }), InputType.Null | InputType.Any );
			spawn_here = ( GlobalVars.xeno_spawn.len != 0 ? Rand13.PickFromTable( GlobalVars.xeno_spawn ) : Rand13.PickFromTable( GlobalVars.latejoin ) );
			new_xeno = null;

			dynamic _b = alien_caste; // Was a switch-case, sorry for the mess.
			if ( _b=="Queen" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Queen( spawn_here );
			} else if ( _b=="Hunter" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Hunter( spawn_here );
			} else if ( _b=="Sentinel" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Sentinel( spawn_here );
			} else if ( _b=="Drone" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Drone( spawn_here );
			} else if ( _b=="Larva" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Larva( spawn_here );
			} else {
				return false;
			}
			new_xeno.ckey = ckey;
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned " + ckey + " as a filthy xeno " + alien_caste + ".</span>" );
			return true;
		}

		// Function from file: reagent_containers.dm
		public static int splash_sub( dynamic reagents = null, dynamic target = null, int? amount = null, dynamic user = null ) {
			
			if ( amount == 0 || Lang13.Bool( reagents.is_empty() ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>There's nothing to splash with!</span>" );
				return -1;
			}
			((Reagents)reagents).reaction( target, GlobalVars.TOUCH );

			if ( ( amount ??0) > 0 ) {
				((Reagents)reagents).remove_any( amount );
				((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).The( target ).item().str( " has been splashed with something by " ).item( user ).str( "!</span>" ).ToString(), new Txt( "<span class='notice'>You splash some of the solution onto " ).the( target ).item().str( ".</span>" ).ToString() );
			} else {
				((Reagents)reagents).clear_reagents();
				((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).The( target ).item().str( " has been splashed with something by " ).item( user ).str( "!</span>" ).ToString(), new Txt( "<span class='notice'>You splash the solution onto " ).the( target ).item().str( ".</span>" ).ToString() );
			}
			return 0;
		}

		// Function from file: reagent_containers.dm
		public static dynamic transfer_sub( dynamic source = null, dynamic target = null, dynamic amount = null, dynamic user = null ) {
			dynamic source_empty = null;
			dynamic target_full = null;
			dynamic S = null;
			dynamic S2 = null;
			dynamic T = null;

			
			if ( source is Obj_Item_Weapon_ReagentContainers ) {
				S = source;
				source_empty = S.is_empty();
			} else if ( source is Obj_Structure_ReagentDispensers ) {
				S2 = source;
				source_empty = S2.is_empty();
			} else {
				source_empty = source.reagents.is_empty();
			}

			if ( target is Obj_Item_Weapon_ReagentContainers ) {
				T = target;
				target_full = T.is_full();
			} else {
				
				if ( target is Mob ) {
					return null;
				}

				if ( !( target.reagents is Reagents ) ) {
					return null;
				}
				target_full = target.reagents.is_full();
			}

			if ( Lang13.Bool( source_empty ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( source ).item().str( " is empty.</span>" ).ToString() );
				return -1;
			}

			if ( Lang13.Bool( target_full ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( target ).item().str( " is full.</span>" ).ToString() );
				return -1;
			}
			return ((Reagents)source.reagents).trans_to( target, amount );
		}

		// Function from file: recipe.dm
		public static Recipe select_recipe( ByTable avaiable_recipes = null, Obj_Machinery_Microwave obj = null, int? exact = null ) {
			exact = exact ?? 1;

			Recipe _default = null;

			ByTable possible_recipes = null;
			Recipe recipe = null;
			int reagents_count = 0;
			int items_count = 0;
			Recipe recipe2 = null;
			int items_number = 0;
			int reagents_number = 0;

			
			if ( !Lang13.Bool( exact ) ) {
				exact = -1;
			}
			possible_recipes = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( avaiable_recipes, typeof(Recipe) )) {
				recipe = _a;
				

				if ( recipe.check_reagents( obj.reagents ) == exact && recipe.check_items( obj ) == exact ) {
					possible_recipes.Add( recipe );
				}
			}

			if ( possible_recipes.len == 0 ) {
				return null;
			} else if ( possible_recipes.len == 1 ) {
				return possible_recipes[1];
			} else {
				reagents_count = 0;
				items_count = 0;
				_default = possible_recipes[1];

				foreach (dynamic _b in Lang13.Enumerate( possible_recipes, typeof(Recipe) )) {
					recipe2 = _b;
					
					items_number = ( recipe2.items != null ? recipe2.items.len : 0 );
					reagents_number = ( recipe2.reagents != null ? recipe2.reagents.len : 0 );

					if ( items_number > items_count || items_number == items_count && reagents_number > reagents_count ) {
						reagents_count = reagents_number;
						items_count = items_number;
						_default = recipe2;
					}
				}
				return _default;
			}
			return _default;
		}

		// Function from file: response_team.dm
		public static int percentage_antagonists(  ) {
			int total = 0;
			int antagonists = 0;
			Mob_Living_Carbon_Human H = null;

			total = 0;
			antagonists = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
				H = _a;
				

				if ( GlobalFuncs.is_special_character( H ) >= 1 ) {
					antagonists++;
				}
				total++;
			}

			if ( total == 0 ) {
				return 0;
			} else {
				return Num13.Floor( antagonists * 100 / total );
			}
		}

		// Function from file: response_team.dm
		public static int percentage_dead(  ) {
			int total = 0;
			int deadcount = 0;
			Mob_Living_Carbon_Human H = null;

			total = 0;
			deadcount = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
				H = _a;
				

				if ( H.client != null ) {
					
					if ( H.stat == 2 ) {
						deadcount++;
					}
					total++;
				}
			}

			if ( total == 0 ) {
				return 0;
			} else {
				return Num13.Floor( deadcount * 100 / total );
			}
		}

		// Function from file: response_team.dm
		public static void trigger_armed_response_team( bool? force = null ) {
			force = force ?? false;

			double send_team_chance = 0;
			string nuke_code = null;
			Obj_Machinery_Nuclearbomb nuke = null;
			Obj_Item_Weapon_Paper P = null;
			Obj_Effect_Landmark A = null;

			
			if ( !GlobalVars.can_call_ert && !( force == true ) ) {
				return;
			}

			if ( GlobalVars.send_emergency_team ) {
				return;
			}
			send_team_chance = GlobalVars.ert_base_chance;
			send_team_chance += GlobalFuncs.percentage_dead() * 2;
			send_team_chance += GlobalFuncs.percentage_antagonists();
			send_team_chance = Num13.MinInt( ((int)( send_team_chance )), 100 );

			if ( force == true ) {
				send_team_chance = 100;
			}

			if ( !Rand13.PercentChance( ((int)( send_team_chance )) ) ) {
				GlobalFuncs.command_alert( "It would appear that an emergency response team was requested for " + GlobalFuncs.station_name() + ". Unfortunately, we were unable to send one at this time.", "Central Command" );
				GlobalVars.can_call_ert = false;
				return;
			}
			GlobalFuncs.command_alert( "It would appear that an emergency response team was requested for " + GlobalFuncs.station_name() + ". We will prepare and send one as soon as possible.", "Central Command" );
			GlobalVars.can_call_ert = false;
			GlobalVars.send_emergency_team = true;
			Task13.Sleep( 3000 );
			GlobalVars.send_emergency_team = false;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
				nuke = _a;
				
				nuke_code = nuke.r_code;
			}
			P = new Obj_Item_Weapon_Paper();
			P.info = "Your orders, Commander, are to use all means necessary to return the station to a survivable condition.<br>To this end, you have been provided with the best tools we can give in the three areas of Medicine, Engineering, and Security. The nuclear authorization code is: <b>" + ( Lang13.Bool( nuke_code ) ? nuke_code : "No Nuke Found, Request Another!" ) + "</b>. Be warned, if you detonate this without good reason, we will hold you to account for damages. Memorise this code, and then burn this message.";
			P.name = "Emergency Nuclear Code, and ERT Orders";

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
				A = _b;
				

				if ( A.name == "nukecode" ) {
					P.loc = A.loc;
					GlobalFuncs.qdel( A );
					A = null;
					continue;
				}
			}
			return;
		}

		// Function from file: ritual.dm
		public static void runerandom(  ) {
			ByTable runewords = null;
			dynamic word = null;

			runewords = GlobalVars.rnwords;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.engwords )) {
				word = _a;
				
				GlobalVars.cultwords[word] = Rand13.PickFromTable( runewords );
				runewords.Remove( GlobalVars.cultwords[word] );
			}
			return;
		}

		// Function from file: robot.dm
		public static ByTable getAvailableRobotModules(  ) {
			ByTable modules = null;

			modules = new ByTable(new object [] { "Standard", "Engineering", "Medical", "Miner", "Janitor", "Service", "Security" });

			if ( GlobalVars.security_level == 2 ) {
				modules.Add( "Combat" );
			}
			return modules;
		}

		// Function from file: RPED.dm
		public static dynamic cmp_rped_sort( Obj_Item A = null, Obj_Item B = null ) {
			return B.get_rating() - A.get_rating();
		}

		// Function from file: sanitize_values.dm
		public static string sanitize_gender( string gender = null, bool? neuter = null, bool? plural = null, string __default = null ) {
			neuter = neuter ?? false;
			plural = plural ?? false;
			__default = __default ?? "male";

			
			switch ((string)( gender )) {
				case "male":
				case "female":
					return gender;
					break;
				case "neuter":
					
					if ( neuter == true ) {
						return gender;
					} else {
						return __default;
					}
					break;
				case "plural":
					
					if ( plural == true ) {
						return gender;
					} else {
						return __default;
					}
					break;
			}
			return __default;
		}

		// Function from file: sanitize_values.dm
		public static dynamic sanitize_hexcolor( dynamic color = null, dynamic __default = null ) {
			__default = __default ?? "#000000";

			dynamic _default = null;

			int? len = null;
			int? i = null;
			int ascii = 0;

			
			if ( !( color is string ) ) {
				return __default;
			}
			len = Lang13.Length( color );

			if ( len != 7 && len != 4 ) {
				return __default;
			}

			if ( String13.GetCharCode( color, 1 ) != 35 ) {
				return __default;
			}
			_default = "#";
			i = null;
			i = 2;

			while (( i ??0) <= ( len ??0)) {
				ascii = String13.GetCharCode( color, i );

				dynamic _a = ascii; // Was a switch-case, sorry for the mess.
				if ( 48<=_a&&_a<=57 ) {
					_default += String13.GetCharFromCode( ascii );
				} else if ( 97<=_a&&_a<=102 ) {
					_default += String13.GetCharFromCode( ascii );
				} else if ( 65<=_a&&_a<=70 ) {
					_default += String13.GetCharFromCode( ascii + 32 );
				} else {
					return __default;
				}
				i++;
			}
			return _default;
		}

		// Function from file: sanitize_values.dm
		public static dynamic sanitize_inlist( dynamic value = null, ByTable List = null, dynamic __default = null ) {
			Interface13.Stat( null, List.Contains( value ) );

			if ( false ) {
				return value;
			}

			if ( Lang13.Bool( __default ) ) {
				return __default;
			}

			if ( List != null && List.len != 0 ) {
				return List[1];
			}
			return null;
		}

		// Function from file: sanitize_values.dm
		public static dynamic sanitize_integer( dynamic number = null, double? min = null, double? max = null, dynamic __default = null ) {
			min = min ?? 0;
			max = max ?? 1;
			__default = __default ?? 0;

			
			if ( Lang13.Bool( Lang13.IsNumber( number ) ) ) {
				number = Num13.Floor( Convert.ToDouble( number ) );

				if ( ( min ??0) <= Convert.ToDouble( number ) && Convert.ToDouble( number ) <= ( max ??0) ) {
					return number;
				}
			}
			return __default;
		}

		// Function from file: sanitize_values.dm
		public static dynamic sanitize_text( dynamic text = null, dynamic __default = null ) {
			__default = __default ?? "";

			
			if ( text is string ) {
				return text;
			}
			return __default;
		}

		// Function from file: say.dm
		public static ByTable get_hearers_in_view( dynamic R = null, dynamic source = null ) {
			ByTable _default = null;

			dynamic T = null;
			Mob_Virtualhearer VH = null;

			
			if ( Game13.time > GlobalVars.resethearers ) {
				GlobalFuncs.sethearing();
			}
			T = GlobalFuncs.get_turf( source );
			_default = new ByTable();

			if ( !Lang13.Bool( T ) ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( T, R ), typeof(Mob_Virtualhearer) )) {
				VH = _a;
				
				_default.Add( VH.attached );
			}
			return _default;
		}

		// Function from file: say.dm
		public static ByTable get_mobs_in_radio_ranges( ByTable radios = null ) {
			ByTable _default = null;

			Obj_Item_Device_Radio radio = null;
			dynamic turf = null;
			Mob_Virtualhearer VH = null;

			
			if ( Game13.time > GlobalVars.resethearers ) {
				GlobalFuncs.sethearing();
			}
			_default = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( radios, typeof(Obj_Item_Device_Radio) )) {
				radio = _b;
				

				if ( radio != null ) {
					turf = GlobalFuncs.get_turf( radio );

					if ( Lang13.Bool( turf ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( turf, radio.canhear_range ), typeof(Mob_Virtualhearer) )) {
							VH = _a;
							
							_default.Or( VH.attached );
						}
					}
				}
			}
			return _default;
		}

		// Function from file: say.dm
		public static string get_radio_name( double freq = 0 ) {
			dynamic returntext = null;

			returntext = GlobalVars.radiochannelsreverse["" + freq];

			if ( Lang13.Bool( returntext ) ) {
				return returntext;
			}
			return "" + String13.SubStr( "" + freq, 1, 4 ) + "." + String13.SubStr( "" + freq, 4, 5 );
		}

		// Function from file: say.dm
		public static string get_radio_span( double freq = 0 ) {
			dynamic returntext = null;

			returntext = GlobalVars.freqtospan["" + freq];

			if ( Lang13.Bool( returntext ) ) {
				return returntext;
			}
			return "radio";
		}

		// Function from file: say.dm
		public static void handle_render( dynamic mob = null, string message = null, Mob_Living speaker = null ) {
			string reference = null;

			
			if ( mob is Mob_NewPlayer ) {
				return;
			}

			if ( mob is Mob_Dead_Observer ) {
				reference = new Txt( "<a href='?src=" ).Ref( mob ).str( ";follow=" ).Ref( speaker ).str( "'>(Follow)</a> " ).ToString();
				message = reference + message;
				GlobalFuncs.to_chat( mob, message );
			} else {
				GlobalFuncs.to_chat( mob, message );
			}
			return;
		}

		// Function from file: say.dm
		public static bool play_vox_sound( dynamic sound_file = null, int? z_level = null, Mob_Living_Silicon_Ai only_listener = null ) {
			Sound voice = null;
			dynamic M = null;
			dynamic T = null;

			voice = new Sound( sound_file, null, true, GlobalVars.VOX_CHANNEL );
			voice.status = GlobalVars.SOUND_STREAM;

			if ( !( only_listener != null ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) ) {
						T = GlobalFuncs.get_turf( M );

						if ( Lang13.IntNullable( T.z ) == z_level ) {
							GlobalFuncs.to_chat( M, voice );
						}
					}
				}
			} else {
				GlobalFuncs.to_chat( only_listener, voice );
			}
			return true;
		}

		// Function from file: say.dm
		public static bool play_vox_word( dynamic word = null, int? z_level = null, Mob_Living_Silicon_Ai only_listener = null ) {
			word = String13.ToLower( word );

			if ( Lang13.Bool( GlobalVars.vox_sounds[word] ) ) {
				return GlobalFuncs.play_vox_sound( GlobalVars.vox_sounds[word], z_level, only_listener );
			}
			return false;
		}

		// Function from file: say.dm
		public static void sethearing(  ) {
			Ent_Static A = null;
			Mob_Virtualhearer VH = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.virtualhearers, typeof(Mob_Virtualhearer) )) {
				VH = _a;
				

				if ( VH.attached == null ) {
					GlobalFuncs.returnToPool( VH );
					continue;
				}
				A = VH.attached.loc;

				while (A != null && !( A is Tile )) {
					A = A.loc;
				}
				VH.loc = A;
			}
			GlobalVars.resethearers = Game13.time + 5;
			return;
		}

		// Function from file: say.dm
		public static ByTable vox_num2list( double number = 0 ) {
			return GlobalFuncs.num2words( number, "sound/vox_fem/zero.ogg", "sound/vox_fem/minus.ogg", "sound/vox_fem/hundred.ogg", GlobalVars.vox_digits, GlobalVars.vox_tens, GlobalVars.vox_units );
		}

		// Function from file: scanners.dm
		public static string healthanalyze( dynamic M = null, dynamic user = null, bool? mode = null, bool? skip_checks = null, bool? silent = null ) {
			mode = mode ?? false;
			skip_checks = skip_checks ?? false;
			silent = silent ?? false;

			string message = null;
			int fake_oxy = 0;
			dynamic OX = null;
			dynamic TX = null;
			dynamic BU = null;
			dynamic BR = null;
			dynamic H = null;
			ByTable damaged = null;
			Organ_External org = null;
			string organ_msg = null;
			dynamic H2 = null;
			dynamic C = null;
			dynamic ID = null;
			dynamic V = null;
			Disease D = null;
			dynamic H3 = null;
			dynamic name = null;
			Organ_External e = null;
			string limb = null;
			dynamic name2 = null;
			dynamic e2 = null;
			Organ_External e3 = null;
			Wound W = null;
			int blood_volume = 0;
			int blood_percent = 0;

			message = "";

			if ( !( skip_checks == true ) ) {
				Interface13.Stat( null, user.mutations.Contains( 5 ) );

				if ( ( false || ((Mob_Living)user).getBrainLoss() >= 60 ) && Rand13.PercentChance( 50 ) ) {
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " analyzes the floor's vitals!</span>", "<span class='warning'>You analyze the floor's vitals!</span>" );
					GlobalFuncs.playsound( user, "sound/items/healthanalyzer.ogg", 50, 1 );
					GlobalFuncs.to_chat( user, "<span class='notice'>Analyzing Results for the floor:<br>Overall Status: Healthy</span>\nKey: <font color='blue'>Suffocation</font>/<font color='green'>Toxin</font>/<font color='#FFA500'>Burns</font>/<font color='red'>Brute</font>\nDamage Specifics: <font color='blue'>0</font> - <font color='green'>0</font> - <font color='#FFA500'>0</font> - <font color='red'>0</font>\n" + ( ((Mob_Living)M).undergoing_hypothermia() != 0 ? "<span class='warning'>" : "<span class='notice'>" ) + @"Body Temperature: ???&deg;C (???&deg;F)</span>
<span class='notice'>Localized Damage, Brute/Burn:</span>
<span class='notice'>No limb damage detected.</span>
Subject bloodstream oxygen level normal | Subject bloodstream toxin level normal | Subject burn injury status clear | Subject brute injury status clear
Blood Level Unknown: ???% ???cl
Subject's pulse: ??? BPM" );
					return null;
				}
			}

			if ( !( silent == true ) ) {
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " analyzes " + M + "'s vitals.</span>", "<span class='notice'>You analyze " + M + "'s vitals.</span>" );
				GlobalFuncs.playsound( user, "sound/items/healthanalyzer.ogg", 50, 1 );
			}
			fake_oxy = Num13.MaxInt( Rand13.Int( 1, 40 ), Convert.ToInt32( ((Mob_Living)M).getOxyLoss() ), ((int)( 300 - Convert.ToDouble( ((Mob_Living)M).getToxLoss() + ((Mob_Living)M).getFireLoss() + ((Mob_Living)M).getBruteLoss() ) )) );
			OX = ( Convert.ToDouble( ((Mob_Living)M).getOxyLoss() ) > 50 ? ((dynamic)( "<b>" + ((Mob_Living)M).getOxyLoss() + "</b>" )) : ((Mob_Living)M).getOxyLoss() );
			TX = ( Convert.ToDouble( ((Mob_Living)M).getToxLoss() ) > 50 ? ((dynamic)( "<b>" + ((Mob_Living)M).getToxLoss() + "</b>" )) : ((Mob_Living)M).getToxLoss() );
			BU = ( ((Mob_Living)M).getFireLoss() > 50 ? ((dynamic)( "<b>" + ((Mob_Living)M).getFireLoss() + "</b>" )) : ((dynamic)( ((Mob_Living)M).getFireLoss() )) );
			BR = ( ((Mob_Living)M).getBruteLoss() > 50 ? ((dynamic)( "<b>" + ((Mob_Living)M).getBruteLoss() + "</b>" )) : ((dynamic)( ((Mob_Living)M).getBruteLoss() )) );

			if ( ( M.status_flags & 8192 ) != 0 ) {
				OX = ( fake_oxy > 50 ? ((dynamic)( "<b>" + fake_oxy + "</b>" )) : ((dynamic)( fake_oxy )) );
				message += "<span class='notice'>Analyzing Results for " + M + ":<br>Overall Status: Dead</span><br>";
			} else {
				message += "<br><span class='notice'>Analyzing Results for " + M + ":<br>Overall Status: " + ( Convert.ToDouble( M.stat ) > 1 ? "Dead" : "" + ( M.health - M.halloss ) + "% Healthy" ) + "</span>";
			}
			message += "<br>Key: <font color='blue'>Suffocation</font>/<font color='green'>Toxin</font>/<font color='#FFA500'>Burns</font>/<font color='red'>Brute</font>";
			message += "<br>Damage Specifics: <font color='blue'>" + OX + "</font> - <font color='green'>" + TX + "</font> - <font color='#FFA500'>" + BU + "</font> - <font color='red'>" + BR + "</font>";
			message += "<br>" + ( ((Mob_Living)M).undergoing_hypothermia() != 0 ? "<span class='warning'>" : "<span class='notice'>" ) + "Body Temperature: " + ( M.bodytemperature - 273.41 ) + "&deg;C (" + ( M.bodytemperature * 171 - 459.6700134277344 ) + "&deg;F)</span>";

			if ( Lang13.Bool( M.tod ) && ((Mob)M).isDead() ) {
				message += "<br><span class='notice'>Time of Death: " + M.tod + "</span>";
			}

			if ( M is Mob_Living_Carbon_Human && mode == true ) {
				H = M;
				damaged = ((Mob_Living_Carbon_Human)H).get_damaged_organs( 1, 1 );
				message += "<br><span class='notice'>Localized Damage, Brute/Burn:</span>";

				if ( Lang13.Length( damaged ) != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( damaged, typeof(Organ_External) )) {
						org = _a;
						
						organ_msg = "<br>";
						organ_msg += GlobalFuncs.capitalize( org.display_name );
						organ_msg += ": ";
						organ_msg += "<font color='red'>" + ( org.brute_dam != 0 ? org.brute_dam : 0 ) + "</font>";
						organ_msg += "/<font color='#FFA500'>" + ( org.burn_dam != 0 ? org.burn_dam : 0 ) + "</font>";

						if ( ( org.status & 8 ) != 0 ) {
							organ_msg += "<span class='danger'>[BLEEDING]</span>";
						}

						if ( ( org.status & org.is_peg() ) != 0 ) {
							organ_msg += "<span class='bnotice'>[WOOD DETECTED?]</span>";
						}

						if ( ( org.status & org.is_robotic() ) != 0 ) {
							organ_msg += "<span class='bnotice'>[METAL DETECTED?]</span>";
						}
						message += organ_msg;
					}
				} else {
					message += "<br><span class='notice'>No limb damage detected.</span>";
				}
			}
			OX = ( Convert.ToDouble( ((Mob_Living)M).getOxyLoss() ) > 50 ? "<font color='blue'><b>Severe oxygen deprivation detected</b></font>" : "Subject bloodstream oxygen level normal" );
			TX = ( Convert.ToDouble( ((Mob_Living)M).getToxLoss() ) > 50 ? "<font color='green'><b>Dangerous amount of toxins detected</b></font>" : "Subject bloodstream toxin level normal" );
			BU = ( ((Mob_Living)M).getFireLoss() > 50 ? "<font color='#FFA500'><b>Severe burn damage detected</b></font>" : "Subject burn injury status clear" );
			BR = ( ((Mob_Living)M).getBruteLoss() > 50 ? "<font color='red'><b>Severe anatomical damage detected</b></font>" : "Subject brute injury status clear" );

			if ( ( M.status_flags & 8192 ) != 0 ) {
				OX = ( fake_oxy > 50 ? "<font color='blue'><b>Severe oxygen deprivation detected</b></font>" : "Subject bloodstream oxygen level normal" );
			}
			message += "<br>" + OX + " | " + TX + " | " + BU + " | " + BR;

			if ( Lang13.Bool( M.reagents.total_volume ) ) {
				message += "<br><span class='warning'>Warning: Unknown substance detected in subject's blood.</span>";
			}

			if ( GlobalVars.hardcore_mode && M is Mob_Living_Carbon_Human && Lang13.Bool( M.ckey ) && Lang13.Bool( M.client ) ) {
				H2 = M;

				if ( H2.nutrition < 60 ) {
					message += "<br><span class='danger'>Warning: Severe lack of essential nutriments detected in subject's blood.</span>";
				}
			}

			if ( M is Mob_Living_Carbon ) {
				C = M;

				if ( C.virus2.len != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( C.virus2 )) {
						ID = _b;
						
						Interface13.Stat( null, GlobalVars.virusDB.Contains( ID ) );

						if ( false ) {
							V = GlobalVars.virusDB[ID];
							message += "<br><span class='warning'>Warning: Pathogen " + V.fields["name"] + " detected in subject's blood. Known antigen : " + V.fields["antigen"] + "</span>";
						}
					}
				}
			}

			if ( ((Mob_Living)M).getCloneLoss() != 0 ) {
				message += "<br><span class='warning'>Subject appears to have been imperfectly cloned.</span>";
			}

			foreach (dynamic _c in Lang13.Enumerate( M.viruses, typeof(Disease) )) {
				D = _c;
				

				if ( !Lang13.Bool( D.hidden[1] ) ) {
					message += "<br><span class='warning'><b>Warning: " + D.form + " Detected</b><br>Name: " + D.name + ".<br>Type: " + D.spread + ".<br>Stage: " + D.stage + "/" + D.max_stages + ".<br>Possible Cure: " + D.cure + "</span>";
				}
			}

			if ( Lang13.Bool( M.reagents ) && ((Reagents)M.reagents).get_reagent_amount( "inaprovaline" ) ) {
				message += "<br><span class='notice'>Bloodstream Analysis located " + ((Reagents)M.reagents).get_reagent_amount( "inaprovaline" ) + " units of rejuvenation chemicals.</span>";
			}

			if ( Lang13.Bool( ((Mob)M).has_brain_worms() ) ) {
				message += "<br><span class='warning'>Strange MRI readout. Subject needs further scanning.</span>";
			} else if ( ((Mob_Living)M).getBrainLoss() >= 100 || !((Mob_Living)M).has_brain() ) {
				message += "<br><span class='warning'>No brain activity has been detected. Subject is braindead.</span>";
			} else if ( ((Mob_Living)M).getBrainLoss() >= 60 ) {
				message += "<br><span class='warning'>Severe brain damage detected. Subject likely to have mental retardation.</span>";
			} else if ( ((Mob_Living)M).getBrainLoss() >= 10 ) {
				message += "<br><span class='warning'>Significant brain damage detected. Subject may have had a concussion.</span>";
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H3 = M;

				foreach (dynamic _d in Lang13.Enumerate( H3.organs_by_name )) {
					name = _d;
					
					e = H3.organs_by_name[name];
					limb = e.display_name;

					if ( e.has_infected_wound() ) {
						message += "<br><span class='warning'>Infected wound detected in subject's " + limb + ". Disinfection recommended.</span>";
					}
				}

				foreach (dynamic _e in Lang13.Enumerate( H3.organs_by_name )) {
					name2 = _e;
					
					e2 = H3.organs_by_name[name2];

					if ( Lang13.Bool( e2.is_broken() ) ) {
						message += "<br><span class='warning'>Bone fractures detected. Advanced scan required for location.</span>";
						break;
					}
				}

				foreach (dynamic _g in Lang13.Enumerate( H3.organs, typeof(Organ_External) )) {
					e3 = _g;
					

					foreach (dynamic _f in Lang13.Enumerate( e3.wounds, typeof(Wound) )) {
						W = _f;
						

						if ( W.v_internal ) {
							message += "<br><span class='danger'>Internal bleeding detected. Advanced scan required for location.</span>";
							break;
						}
					}
				}

				if ( H3.vessel != null ) {
					blood_volume = Num13.Floor( H3.vessel.get_reagent_amount( "blood" ) ?1:0 );
					blood_percent = Num13.Floor( blood_volume / 560 * 100 );

					dynamic _h = blood_volume; // Was a switch-case, sorry for the mess.
					if ( 501<=_h&&_h<=1000000000 ) {
						message += "<br><span class='notice'>Blood Level Normal: " + blood_percent + "% (" + blood_volume + "cl)</span>";
					} else if ( 336<=_h&&_h<=501 ) {
						message += "<br><span class='warning'>Warning: Blood Level Low: " + blood_percent + "% " + blood_volume + "cl</span>";
					} else if ( 224<=_h&&_h<=336 ) {
						message += "<br><span class='danger'>Danger: Blood Level Serious: " + blood_percent + "% " + blood_volume + "cl</span>";
					} else if ( 122<=_h&&_h<=224 ) {
						message += "<br><span class='danger'>Danger: Blood Level Critical: " + blood_percent + "% " + blood_volume + "cl</span>";
					} else if ( -1000000000<=_h&&_h<=122 ) {
						message += "<br><span class='danger'>Danger: Blood Level Fatal: " + blood_percent + "% " + blood_volume + "cl</span>";
					}
				}
				message += "<br><span class='notice'>Subject's pulse: <font color='" + ( H3.pulse == 6 || H3.pulse == 0 ? "red" : "blue" ) + "'>" + ((Mob_Living_Carbon)H3).get_pulse( true ) + " BPM</font></span>";
			}
			GlobalFuncs.to_chat( user, message );
			return message;
		}

		// Function from file: screen_objects.dm
		public static Tile screen_loc2turf( dynamic scr_loc = null, dynamic origin = null ) {
			ByTable screenxy = null;
			ByTable screenx = null;
			ByTable screeny = null;
			dynamic X = null;
			dynamic Y = null;

			screenxy = GlobalFuncs.text2list( scr_loc, "," );
			screenx = GlobalFuncs.text2list( screenxy[1], ":" );
			screeny = GlobalFuncs.text2list( screenxy[2], ":" );
			X = screenx[1];
			Y = screeny[1];
			X = ( Convert.ToDouble( origin.x + String13.ParseNumber( X ) - ( Game13.view + 1 ) ) <= 1 ? 1 : ( Convert.ToDouble( origin.x + String13.ParseNumber( X ) - ( Game13.view + 1 ) ) >= Game13.map_size_x ? Game13.map_size_x : Convert.ToInt32( origin.x + String13.ParseNumber( X ) - ( Game13.view + 1 ) ) ) );
			Y = ( Convert.ToDouble( origin.y + String13.ParseNumber( Y ) - ( Game13.view + 1 ) ) <= 1 ? 1 : ( Convert.ToDouble( origin.y + String13.ParseNumber( Y ) - ( Game13.view + 1 ) ) >= Game13.map_size_y ? Game13.map_size_y : Convert.ToInt32( origin.y + String13.ParseNumber( Y ) - ( Game13.view + 1 ) ) ) );
			return Map13.GetTile( Convert.ToInt32( X ), Convert.ToInt32( Y ), Convert.ToInt32( origin.z ) );
		}

		// Function from file: SDQL_2.dm
		public static double? SDQL_expression( Game_Data _object = null, dynamic expression = null, int? start = null ) {
			start = start ?? 1;

			double? result = null;
			double? val = null;
			int? i = null;
			string op = null;
			ByTable ret = null;

			result = 0;
			i = null;
			i = start;

			while (( i ??0) <= expression.len) {
				op = "";

				if ( ( i ??0) > ( start ??0) ) {
					op = expression[i];
					i++;
				}
				ret = GlobalFuncs.SDQL_value( _object, expression, i );
				val = Lang13.DoubleNullable( ret["val"] );
				i = Lang13.IntNullable( ret["i"] );

				if ( op != "" ) {
					
					switch ((string)( op )) {
						case "+":
							result += val ??0;
							break;
						case "-":
							result -= val ??0;
							break;
						case "*":
							result *= val ??0;
							break;
						case "/":
							result /= val ??0;
							break;
						case "&":
							result = ((int)( result )) & ( ((int)( val ??0 )) );
							break;
						case "|":
							result = ((int)( result )) | ( ((int)( val ??0 )) );
							break;
						case "^":
							result = ((int)( result )) ^ ( ((int)( val ??0 )) );
							break;
						case "=":
						case "==":
							result = result == val ?1:0;
							break;
						case "!=":
						case "<>":
							result = result != val ?1:0;
							break;
						case "<":
							result = ( result ??0) < ( val ??0) ?1:0;
							break;
						case "<=":
							result = ( result ??0) <= ( val ??0) ?1:0;
							break;
						case ">":
							result = ( result ??0) > ( val ??0) ?1:0;
							break;
						case ">=":
							result = ( result ??0) >= ( val ??0) ?1:0;
							break;
						case "and":
						case "&&":
							result = Lang13.Bool( result ) && Lang13.Bool( val ) ?1:0;
							break;
						case "or":
						case "||":
							result = Lang13.Bool( result ) || Lang13.Bool( val ) ?1:0;
							break;
						default:
							GlobalFuncs.to_chat( Task13.User, "<span class='warning'>SDQL2: Unknown op " + op + "</span>" );
							result = null;
							break;
					}
				} else {
					result = val;
				}
				i++;
			}
			return result;
		}

		// Function from file: SDQL_2.dm
		public static ByTable SDQL_from_objs( dynamic tree = null ) {
			ByTable _out = null;
			dynamic type = null;
			string _char = null;

			Interface13.Stat( null, tree.Contains( "world" ) );

			if ( false ) {
				return new ByTable(new object [] { typeof(Game13) });
			}
			_out = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( tree )) {
				type = _a;
				
				_char = String13.SubStr( type, 1, 2 );

				if ( _char == "/" ) {
					_out.Add( GlobalFuncs.SDQL_get_all( type, typeof(Game13) ) );
				} else if ( _char == "'" || _char == "\"" ) {
					_out.Add( Lang13.FindObj( String13.SubStr( type, 2, Lang13.Length( type ) ) ) );
				}
			}
			return _out;
		}

		// Function from file: SDQL_2.dm
		public static ByTable SDQL_get_all( dynamic type = null, dynamic location = null ) {
			ByTable _out = null;
			Game_Data d = null;
			dynamic d2 = null;
			dynamic d3 = null;
			Obj d4 = null;
			dynamic d5 = null;
			Ent_Static d6 = null;
			Game_Data d7 = null;

			_out = new ByTable();

			if ( type == "*" ) {
				
				foreach (dynamic _a in Lang13.Enumerate( location, typeof(Game_Data) )) {
					d = _a;
					
					_out.Add( d );
				}
				return _out;
			}
			type = Lang13.FindClass( type );

			if ( Lang13.Bool( type.IsSubclassOf( typeof(Mob) ) ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( location )) {
					d2 = _b;
					

					if ( Lang13.Bool( type.IsInstanceOfType( d2 ) ) ) {
						_out.Add( d2 );
					}
				}
			} else if ( Lang13.Bool( type.IsSubclassOf( typeof(Tile) ) ) ) {
				
				foreach (dynamic _c in Lang13.Enumerate( location )) {
					d3 = _c;
					

					if ( Lang13.Bool( type.IsInstanceOfType( d3 ) ) ) {
						_out.Add( d3 );
					}
				}
			} else if ( Lang13.Bool( type.IsSubclassOf( typeof(Obj) ) ) ) {
				
				foreach (dynamic _d in Lang13.Enumerate( location, typeof(Obj) )) {
					d4 = _d;
					

					if ( Lang13.Bool( type.IsInstanceOfType( d4 ) ) ) {
						_out.Add( d4 );
					}
				}
			} else if ( Lang13.Bool( type.IsSubclassOf( typeof(Zone) ) ) ) {
				
				foreach (dynamic _e in Lang13.Enumerate( location )) {
					d5 = _e;
					

					if ( Lang13.Bool( type.IsInstanceOfType( d5 ) ) ) {
						_out.Add( d5 );
					}
				}
			} else if ( Lang13.Bool( type.IsSubclassOf( typeof(Ent_Static) ) ) ) {
				
				foreach (dynamic _f in Lang13.Enumerate( location, typeof(Ent_Static) )) {
					d6 = _f;
					

					if ( Lang13.Bool( type.IsInstanceOfType( d6 ) ) ) {
						_out.Add( d6 );
					}
				}
			} else {
				
				foreach (dynamic _g in Lang13.Enumerate( location, typeof(Game_Data) )) {
					d7 = _g;
					

					if ( Lang13.Bool( type.IsInstanceOfType( d7 ) ) ) {
						_out.Add( d7 );
					}
				}
			}
			return _out;
		}

		// Function from file: SDQL_2.dm
		public static ByTable SDQL_parse( ByTable query_list = null ) {
			SDQLParser parser = null;
			ByTable query_tree = null;

			parser = new SDQLParser( query_list );
			query_tree = parser.parse();
			GlobalFuncs.qdel( parser );
			return query_tree;
		}

		// Function from file: SDQL_2.dm
		public static void SDQL_testout( dynamic query_tree = null, int? indent = null ) {
			indent = indent ?? 0;

			string spaces = null;
			int? s = null;
			dynamic item = null;

			spaces = "";
			s = null;
			s = 0;

			while (( s ??0) < ( indent ??0)) {
				spaces += "    ";
				s++;
			}

			foreach (dynamic _a in Lang13.Enumerate( query_tree )) {
				item = _a;
				

				if ( item is ByTable ) {
					GlobalFuncs.to_chat( Task13.User, "" + spaces + "(" );
					GlobalFuncs.SDQL_testout( item, ( indent ??0) + 1 );
					GlobalFuncs.to_chat( Task13.User, "" + spaces + ")" );
				} else {
					GlobalFuncs.to_chat( Task13.User, "" + spaces + item );
				}

				if ( !Lang13.Bool( Lang13.IsNumber( item ) ) && Lang13.Bool( query_tree[item] ) ) {
					
					if ( query_tree[item] is ByTable ) {
						GlobalFuncs.to_chat( Task13.User, "" + spaces + "    (" );
						GlobalFuncs.SDQL_testout( query_tree[item], ( indent ??0) + 2 );
						GlobalFuncs.to_chat( Task13.User, "" + spaces + "    )" );
					} else {
						GlobalFuncs.to_chat( Task13.User, "" + spaces + "    " + query_tree[item] );
					}
				}
			}
			return;
		}

		// Function from file: SDQL_2.dm
		public static ByTable SDQL_value( Game_Data _object = null, dynamic expression = null, int? start = null ) {
			start = start ?? 1;

			int? i = null;
			dynamic val = null;
			ByTable ret = null;
			ByTable ret2 = null;
			ByTable ret3 = null;
			dynamic expressions_list = null;
			ByTable expression_list = null;

			i = start;
			val = null;

			if ( ( i ??0) > expression.len ) {
				return new ByTable().Set( "val", null ).Set( "i", i );
			}

			if ( expression[i] is ByTable ) {
				val = GlobalFuncs.SDQL_expression( _object, expression[i] );
			} else if ( expression[i] == "!" ) {
				ret = GlobalFuncs.SDQL_value( _object, expression, ( i ??0) + 1 );
				val = !Lang13.Bool( ret["val"] );
				i = Lang13.IntNullable( ret["i"] );
			} else if ( expression[i] == "~" ) {
				ret2 = GlobalFuncs.SDQL_value( _object, expression, ( i ??0) + 1 );
				val = ~ret2["val"];
				i = Lang13.IntNullable( ret2["i"] );
			} else if ( expression[i] == "-" ) {
				ret3 = GlobalFuncs.SDQL_value( _object, expression, ( i ??0) + 1 );
				val = -ret3["val"];
				i = Lang13.IntNullable( ret3["i"] );
			} else if ( expression[i] == "null" ) {
				val = null;
			} else if ( Lang13.Bool( Lang13.IsNumber( expression[i] ) ) ) {
				val = expression[i];
			} else {
				Interface13.Stat( null, new ByTable(new object [] { "'", "\"" }).Contains( String13.SubStr( expression[i], 1, 2 ) ) );

				if ( Lang13.Bool( Lang13.IsNumber( expression[i] ) ) ) {
					val = String13.SubStr( expression[i], 2, Lang13.Length( expression[i] ) );
				} else if ( expression[i] == "[" ) {
					expressions_list = expression[++i];
					val = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( expressions_list, typeof(ByTable) )) {
						expression_list = _a;
						
						val += GlobalFuncs.SDQL_expression( _object, expression_list );
					}
				} else {
					val = GlobalFuncs.SDQL_var( _object, expression, i );
					i = expression.len;
				}
			}
			return new ByTable().Set( "val", val ).Set( "i", i );
		}

		// Function from file: SDQL_2.dm
		public static dynamic SDQL_var( Game_Data _object = null, dynamic expression = null, int? start = null ) {
			start = start ?? 1;

			Interface13.Stat( null, _object.vars.Contains( expression[start] ) );

			if ( start == null ) {
				
				if ( ( start ??0) < expression.len && expression[( start ??0) + 1] == "." ) {
					return GlobalFuncs.SDQL_var( _object.vars[expression[start]], expression[( start ??0) + 2] );
				} else {
					return _object.vars[expression[start]];
				}
			} else {
				return null;
			}
			return null;
		}

		// Function from file: SDQL_2.dm
		public static ByTable SDQL2_tokenize( string query_text = null ) {
			ByTable whitespace = null;
			ByTable single = null;
			ByTable multi = null;
			string word = null;
			ByTable query_list = null;
			int? len = null;
			int? i = null;
			string _char = null;
			string char2 = null;

			whitespace = new ByTable(new object [] { " ", "\n", "	" });
			single = new ByTable(new object [] { "(", ")", ",", "+", "-", ".", "[", "]" });
			multi = new ByTable()
				.Set( "=", new ByTable(new object [] { "", "=" }) )
				.Set( "<", new ByTable(new object [] { "", "=", ">" }) )
				.Set( ">", new ByTable(new object [] { "", "=" }) )
				.Set( "!", new ByTable(new object [] { "", "=" }) )
			;
			word = "";
			query_list = new ByTable();
			len = Lang13.Length( query_text );
			i = null;
			i = 1;

			while (( i ??0) <= ( len ??0)) {
				_char = String13.SubStr( query_text, i ??0, ( i ??0) + 1 );
				Interface13.Stat( null, whitespace.Contains( _char ) );

				if ( false ) {
					
					if ( word != "" ) {
						query_list.Add( word );
						word = "";
					}
				} else {
					Interface13.Stat( null, single.Contains( _char ) );

					if ( false ) {
						
						if ( word != "" ) {
							query_list.Add( word );
							word = "";
						}
						query_list.Add( _char );
					} else {
						Interface13.Stat( null, multi.Contains( _char ) );

						if ( false ) {
							
							if ( word != "" ) {
								query_list.Add( word );
								word = "";
							}
							char2 = String13.SubStr( query_text, ( i ??0) + 1, ( i ??0) + 2 );
							Interface13.Stat( null, multi[_char].Contains( char2 ) );

							if ( word != "" ) {
								query_list.Add( "" + _char + char2 );
								i++;
							} else {
								query_list.Add( _char );
							}
						} else if ( _char == "'" ) {
							
							if ( word != "" ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='warning'>SDQL2: You have an error in your SDQL syntax, unexpected ' in query: \"<font color=gray>" + query_text + "</font>\" following \"<font color=gray>" + word + "</font>\". Please check your syntax, and try again.</span>" );
								return null;
							}
							word = "'";
							i++;

							while (( i ??0) <= ( len ??0)) {
								_char = String13.SubStr( query_text, i ??0, ( i ??0) + 1 );

								if ( _char == "'" ) {
									
									if ( String13.SubStr( query_text, ( i ??0) + 1, ( i ??0) + 2 ) == "'" ) {
										word += "'";
										i++;
									} else {
										break;
									}
								} else {
									word += _char;
								}
								i++;
							}

							if ( ( i ??0) > ( len ??0) ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='warning'>SDQL2: You have an error in your SDQL syntax, unmatched ' in query: \"<font color=gray>" + query_text + "</font>\". Please check your syntax, and try again.</span>" );
								return null;
							}
							query_list.Add( "" + word + "'" );
							word = "";
						} else if ( _char == "\"" ) {
							
							if ( word != "" ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='warning'>SDQL2: You have an error in your SDQL syntax, unexpected \" in query: \"<font color=gray>" + query_text + "</font>\" following \"<font color=gray>" + word + "</font>\". Please check your syntax, and try again.</span>" );
								return null;
							}
							word = "\"";
							i++;

							while (( i ??0) <= ( len ??0)) {
								_char = String13.SubStr( query_text, i ??0, ( i ??0) + 1 );

								if ( _char == "\"" ) {
									
									if ( String13.SubStr( query_text, ( i ??0) + 1, ( i ??0) + 2 ) == "'" ) {
										word += "\"";
										i++;
									} else {
										break;
									}
								} else {
									word += _char;
								}
								i++;
							}

							if ( ( i ??0) > ( len ??0) ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='warning'>SDQL2: You have an error in your SDQL syntax, unmatched \" in query: \"<font color=gray>" + query_text + "</font>\". Please check your syntax, and try again.</span>" );
								return null;
							}
							query_list.Add( "" + word + "\"" );
							word = "";
						} else {
							word += _char;
						}
					}
				}
				i++;
			}

			if ( word != "" ) {
				query_list.Add( word );
			}
			return query_list;
		}

		// Function from file: security levels.dm
		public static string get_security_level(  ) {
			
			switch ((int)( GlobalVars.security_level )) {
				case 0:
					return "green";
					break;
				case 1:
					return "blue";
					break;
				case 2:
					return "red";
					break;
				case 3:
					return "delta";
					break;
			}
			return null;
		}

		// Function from file: security levels.dm
		public static int seclevel2num( string seclevel = null ) {
			
			switch ((string)( String13.ToLower( seclevel ) )) {
				case "green":
					return 0;
					break;
				case "blue":
					return 1;
					break;
				case "red":
					return 2;
					break;
				case "delta":
					return 3;
					break;
			}
			return 0;
		}

		// Function from file: security levels.dm
		public static void set_security_level( dynamic level = null ) {
			Obj_Machinery_Firealarm FA = null;
			Obj_Machinery_Firealarm FA2 = null;
			Obj_Machinery_Firealarm FA3 = null;
			Obj_Machinery_Firealarm FA4 = null;

			
			dynamic _a = level; // Was a switch-case, sorry for the mess.
			if ( _a=="green" ) {
				level = 0;
			} else if ( _a=="blue" ) {
				level = 1;
			} else if ( _a=="red" ) {
				level = 2;
			} else if ( _a=="delta" ) {
				level = 3;
			}

			if ( Convert.ToDouble( level ) >= 0 && Convert.ToDouble( level ) <= 3 && level != GlobalVars.security_level ) {
				
				dynamic _f = level; // Was a switch-case, sorry for the mess.
				if ( _f==0 ) {
					GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention! Security level lowered to green</font>" );
					GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>" + GlobalVars.config.alert_desc_green + "</font>" );
					GlobalVars.security_level = 0;

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Firealarm) )) {
						FA = _b;
						

						if ( FA.z == 1 ) {
							FA.overlays = new ByTable();
							FA.overlays.Add( new Image( "icons/obj/monitors.dmi", "overlay_green" ) );
						}
					}
				} else if ( _f==1 ) {
					
					if ( GlobalVars.security_level < 1 ) {
						GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention! Security level elevated to blue</font>" );
						GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>" + GlobalVars.config.alert_desc_blue_upto + "</font>" );
					} else {
						GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention! Security level lowered to blue</font>" );
						GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>" + GlobalVars.config.alert_desc_blue_downto + "</font>" );
					}
					GlobalVars.security_level = 1;

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Firealarm) )) {
						FA2 = _c;
						

						if ( FA2.z == 1 ) {
							FA2.overlays = new ByTable();
							FA2.overlays.Add( new Image( "icons/obj/monitors.dmi", "overlay_blue" ) );
						}
					}
				} else if ( _f==2 ) {
					
					if ( GlobalVars.security_level < 2 ) {
						GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention! Code red!</font>" );
						GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>" + GlobalVars.config.alert_desc_red_upto + "</font>" );
					} else {
						GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention! Code red!</font>" );
						GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>" + GlobalVars.config.alert_desc_red_downto + "</font>" );
					}
					GlobalVars.security_level = 2;

					foreach (dynamic _d in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Firealarm) )) {
						FA3 = _d;
						

						if ( FA3.z == 1 ) {
							FA3.overlays = new ByTable();
							FA3.overlays.Add( new Image( "icons/obj/monitors.dmi", "overlay_red" ) );
						}
					}
				} else if ( _f==3 ) {
					GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention! Delta security level reached!</font>" );
					GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>" + GlobalVars.config.alert_desc_delta + "</font>" );
					GlobalVars.security_level = 3;

					foreach (dynamic _e in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Firealarm) )) {
						FA4 = _e;
						

						if ( FA4.z == 1 ) {
							FA4.overlays = new ByTable();
							FA4.overlays.Add( new Image( "icons/obj/monitors.dmi", "overlay_delta" ) );
						}
					}
				}
			} else {
				return;
			}
			return;
		}

		// Function from file: setupgame.dm
		public static dynamic getAssignedBlock( string name = null, ByTable blocksLeft = null, ByTable activity_bounds = null, bool? good = null ) {
			activity_bounds = activity_bounds ?? new ByTable(new object [] { 1, 2049, 2050, 4095 });
			good = good ?? false;

			dynamic assigned = null;

			
			if ( blocksLeft.len == 0 ) {
				Game13.log.WriteMsg( "## WARNING: " + ( "" + name + ": No more blocks left to assign!" ) );
				return 0;
			}
			assigned = Rand13.PickFromTable( blocksLeft );
			blocksLeft.Remove( assigned );

			if ( good == true ) {
				GlobalVars.good_blocks.Add( assigned );
			} else {
				GlobalVars.bad_blocks.Add( assigned );
			}
			GlobalVars.assigned_blocks[assigned] = name;
			GlobalVars.dna_activity_bounds[assigned] = activity_bounds;
			return assigned;
		}

		// Function from file: setupgame.dm
		public static void setup_species(  ) {
			dynamic name = null;
			Species species = null;
			int? block = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_species )) {
				name = _a;
				
				species = GlobalVars.all_species[name];

				if ( species.default_block_names.len > 0 ) {
					Game13.log.WriteMsg( "## TESTING: " + ( "Setting up genetics for " + species.name + " (needs " + GlobalFuncs.english_list( species.default_block_names ) + ")" ) );
					species.default_blocks.len = 0;
					block = null;
					block = 1;

					while (( block ??0) < 54) {
						Interface13.Stat( null, species.default_block_names.Contains( GlobalVars.assigned_blocks[block] ) );

						if ( false ) {
							Game13.log.WriteMsg( "## TESTING: " + ( "  Found " + GlobalVars.assigned_blocks[block] + " (" + block + ")" ) );
							species.default_blocks.Add( block );
						}
						block++;
					}

					if ( species.default_blocks.len != 0 ) {
						GlobalVars.all_species[name] = species;
					}
				}
			}
			return;
		}

		// Function from file: setupgame.dm
		public static void setupfactions(  ) {
			dynamic x = null;
			dynamic F = null;
			Faction_Syndicate S = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Faction) ) )) {
				x = _a;
				
				F = Lang13.Call( x );

				if ( !Lang13.Bool( F.name ) ) {
					Lang13.Delete( F );
					F = null;
					continue;
				} else {
					GlobalVars.ticker.factions.Add( F );
					GlobalVars.ticker.availablefactions.Add( F );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.ticker.factions, typeof(Faction_Syndicate) )) {
				S = _b;
				
				GlobalVars.ticker.syndicate_coalition.Add( S );
			}
			return;
		}

		// Function from file: setupgame.dm
		public static void setupgenetics(  ) {
			ByTable numsToAssign = null;
			int? i = null;
			ByTable blocks_assigned = null;
			dynamic gene_type = null;
			dynamic G = null;
			ByTable assignedToBlock = null;
			int? block = null;
			dynamic name = null;
			dynamic gene_type2 = null;
			dynamic gene = null;

			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalVars.BLOCKADD = Rand13.Int( -300, 300 );
			}

			if ( Rand13.PercentChance( 75 ) ) {
				GlobalVars.DIFFMUT = Rand13.Int( 0, 20 );
			}
			numsToAssign = new ByTable();
			i = null;
			i = 1;

			while (( i ??0) < 54) {
				numsToAssign.Add( i );
				i++;
			}
			GlobalVars.BLINDBLOCK = GlobalFuncs.getAssignedBlock( "BLIND", numsToAssign );
			GlobalVars.DEAFBLOCK = GlobalFuncs.getAssignedBlock( "DEAF", numsToAssign );
			GlobalVars.HULKBLOCK = GlobalFuncs.getAssignedBlock( "HULK", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.TELEBLOCK = GlobalFuncs.getAssignedBlock( "TELE", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.FIREBLOCK = GlobalFuncs.getAssignedBlock( "FIRE", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.XRAYBLOCK = GlobalFuncs.getAssignedBlock( "XRAY", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.CLUMSYBLOCK = GlobalFuncs.getAssignedBlock( "CLUMSY", numsToAssign );
			GlobalVars.FAKEBLOCK = GlobalFuncs.getAssignedBlock( "FAKE", numsToAssign );
			GlobalVars.COUGHBLOCK = GlobalFuncs.getAssignedBlock( "COUGH", numsToAssign );
			GlobalVars.GLASSESBLOCK = GlobalFuncs.getAssignedBlock( "GLASSES", numsToAssign );
			GlobalVars.EPILEPSYBLOCK = GlobalFuncs.getAssignedBlock( "EPILEPSY", numsToAssign );
			GlobalVars.TWITCHBLOCK = GlobalFuncs.getAssignedBlock( "TWITCH", numsToAssign );
			GlobalVars.NERVOUSBLOCK = GlobalFuncs.getAssignedBlock( "NERVOUS", numsToAssign );
			GlobalVars.HEADACHEBLOCK = GlobalFuncs.getAssignedBlock( "HEADACHE", numsToAssign );
			GlobalVars.NOBREATHBLOCK = GlobalFuncs.getAssignedBlock( "NOBREATH", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.REMOTEVIEWBLOCK = GlobalFuncs.getAssignedBlock( "REMOTEVIEW", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.REGENERATEBLOCK = GlobalFuncs.getAssignedBlock( "REGENERATE", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.INCREASERUNBLOCK = GlobalFuncs.getAssignedBlock( "INCREASERUN", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.REMOTETALKBLOCK = GlobalFuncs.getAssignedBlock( "REMOTETALK", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.MORPHBLOCK = GlobalFuncs.getAssignedBlock( "MORPH", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.COLDBLOCK = GlobalFuncs.getAssignedBlock( "COLD", numsToAssign, null, true );
			GlobalVars.HALLUCINATIONBLOCK = GlobalFuncs.getAssignedBlock( "HALLUCINATION", numsToAssign );
			GlobalVars.NOPRINTSBLOCK = GlobalFuncs.getAssignedBlock( "NOPRINTS", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.SHOCKIMMUNITYBLOCK = GlobalFuncs.getAssignedBlock( "SHOCKIMMUNITY", numsToAssign, null, true );
			GlobalVars.SMALLSIZEBLOCK = GlobalFuncs.getAssignedBlock( "SMALLSIZE", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.LISPBLOCK = GlobalFuncs.getAssignedBlock( "LISP", numsToAssign );
			GlobalVars.MUTEBLOCK = GlobalFuncs.getAssignedBlock( "MUTE", numsToAssign );
			GlobalVars.RADBLOCK = GlobalFuncs.getAssignedBlock( "RAD", numsToAssign );
			GlobalVars.FATBLOCK = GlobalFuncs.getAssignedBlock( "FAT", numsToAssign );
			GlobalVars.CHAVBLOCK = GlobalFuncs.getAssignedBlock( "CHAV", numsToAssign );
			GlobalVars.SWEDEBLOCK = GlobalFuncs.getAssignedBlock( "SWEDE", numsToAssign );
			GlobalVars.SCRAMBLEBLOCK = GlobalFuncs.getAssignedBlock( "SCRAMBLE", numsToAssign );
			GlobalVars.TOXICFARTBLOCK = GlobalFuncs.getAssignedBlock( "TOXICFART", numsToAssign, null, true );
			GlobalVars.STRONGBLOCK = GlobalFuncs.getAssignedBlock( "STRONG", numsToAssign, null, true );
			GlobalVars.HORNSBLOCK = GlobalFuncs.getAssignedBlock( "HORNS", numsToAssign );
			GlobalVars.SMILEBLOCK = GlobalFuncs.getAssignedBlock( "SMILE", numsToAssign );
			GlobalVars.ELVISBLOCK = GlobalFuncs.getAssignedBlock( "ELVIS", numsToAssign );
			GlobalVars.SOBERBLOCK = GlobalFuncs.getAssignedBlock( "SOBER", numsToAssign, null, true );
			GlobalVars.PSYRESISTBLOCK = GlobalFuncs.getAssignedBlock( "PSYRESIST", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.FARSIGHTBLOCK = GlobalFuncs.getAssignedBlock( "FARSIGHT", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.CHAMELEONBLOCK = GlobalFuncs.getAssignedBlock( "CHAMELEON", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.CRYOBLOCK = GlobalFuncs.getAssignedBlock( "CRYO", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.EATBLOCK = GlobalFuncs.getAssignedBlock( "EAT", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.JUMPBLOCK = GlobalFuncs.getAssignedBlock( "JUMP", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.MELTBLOCK = GlobalFuncs.getAssignedBlock( "MELT", numsToAssign, null, true );
			GlobalVars.IMMOLATEBLOCK = GlobalFuncs.getAssignedBlock( "IMMOLATE", numsToAssign );
			GlobalVars.EMPATHBLOCK = GlobalFuncs.getAssignedBlock( "EMPATH", numsToAssign, new ByTable(new object [] { 1, 3490, 3500, 4095 }), true );
			GlobalVars.SUPERFARTBLOCK = GlobalFuncs.getAssignedBlock( "SUPERFART", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.POLYMORPHBLOCK = GlobalFuncs.getAssignedBlock( "POLYMORPH", numsToAssign, new ByTable(new object [] { 1, 3049, 3050, 4095 }), true );
			GlobalVars.LOUDBLOCK = GlobalFuncs.getAssignedBlock( "LOUD", numsToAssign );
			GlobalVars.WHISPERBLOCK = GlobalFuncs.getAssignedBlock( "WHISPER", numsToAssign );
			GlobalVars.DIZZYBLOCK = GlobalFuncs.getAssignedBlock( "DIZZY", numsToAssign );
			GlobalVars.SANSBLOCK = GlobalFuncs.getAssignedBlock( "SANS", numsToAssign );
			GlobalVars.MONKEYBLOCK = 54;
			blocks_assigned = null;
			blocks_assigned = new ByTable( 54 );

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Dna_Gene) ) )) {
				gene_type = _a;
				
				G = Lang13.Call( gene_type );

				if ( Lang13.Bool( G.block ) ) {
					Interface13.Stat( null, blocks_assigned.Contains( G.block ) );

					if ( false ) {
						Game13.log.WriteMsg( "## WARNING: " + ( "DNA2: Gene " + G.name + " trying to use already-assigned block " + G.block + " (used by " + GlobalFuncs.english_list( blocks_assigned[G.block] ) + ")" ) );
					}
					GlobalVars.dna_genes[G.type] = G;
					assignedToBlock = null;
					assignedToBlock = new ByTable( 0 );

					if ( Lang13.Bool( blocks_assigned[G.block] ) ) {
						assignedToBlock = blocks_assigned[G.block];
					}
					assignedToBlock.Add( G.name );
					blocks_assigned[G.block] = assignedToBlock;
				}
			}
			block = null;
			block = 1;

			while (( block ??0) <= 54) {
				name = GlobalVars.assigned_blocks[block];

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.dna_genes )) {
					gene_type2 = _b;
					
					gene = GlobalVars.dna_genes[gene_type2];

					if ( gene.name == name || Lang13.IntNullable( gene.block ) == block ) {
						Interface13.Stat( null, GlobalVars.assigned_gene_blocks.Contains( gene.block ) );

						if ( false ) {
							Game13.log.WriteMsg( "## WARNING: " + ( "DNA2: Gene " + gene.name + " trying to add to already assigned gene block list (used by " + GlobalFuncs.english_list( GlobalVars.assigned_gene_blocks[block] ) + ")" ) );
						}
						GlobalVars.assigned_gene_blocks[block] = gene;
					}
				}
				block++;
			}
			Game13.log.WriteMsg( "## TESTING: " + ( "DNA2: " + numsToAssign.len + " blocks are unused: " + GlobalFuncs.english_list( numsToAssign ) ) );
			return;
		}

		// Function from file: shielding.dm
		public static ByTable cardinalrange( Obj_Machinery_AmShielding center = null ) {
			ByTable things = null;
			dynamic direction = null;
			Tile T = null;

			things = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				
				T = Map13.GetStep( center, Convert.ToInt32( direction ) );

				if ( !( T != null ) ) {
					continue;
				}
				things.Add( T.contents );
			}
			return things;
		}

		// Function from file: shuttle.dm
		public static dynamic select_shuttle_from_all( Mob user = null, string message = null, string title = null, dynamic omit_shuttles = null, bool? show_lockdown = null, bool? show_cooldown = null ) {
			message = message ?? "Select a shuttle";
			title = title ?? "Shuttle selection";
			show_lockdown = show_lockdown ?? false;
			show_cooldown = show_cooldown ?? false;

			ByTable shuttle_list = null;
			Shuttle S = null;
			dynamic name = null;
			dynamic my_shuttle = null;

			
			if ( !( user != null ) ) {
				return null;
			}
			shuttle_list = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.shuttles, typeof(Shuttle) )) {
				S = _a;
				

				if ( Lang13.Bool( omit_shuttles ) ) {
					Interface13.Stat( null, omit_shuttles.Contains( S.type ) );

					if ( false ) {
						continue;
					}
					Interface13.Stat( null, omit_shuttles.Contains( S ) );

					if ( false ) {
						continue;
					}
					Interface13.Stat( null, omit_shuttles.Contains( S.name ) );

					if ( false ) {
						continue;
					}
				}
				name = S.name;

				if ( show_lockdown == true && Lang13.Bool( S.lockdown ) ) {
					name = "" + name + " (LOCKDOWN)";
				} else if ( show_cooldown == true && !S.can_move() ) {
					name = "" + name + " (ON COOLDOWN)";
				}
				shuttle_list.Add( name );
				shuttle_list[name] = S;
			}
			my_shuttle = Interface13.Input( Task13.User, message, title, null, shuttle_list, InputType.Any );

			if ( Lang13.Bool( my_shuttle ) && Lang13.Bool( shuttle_list[my_shuttle] ) && shuttle_list[my_shuttle] is Shuttle ) {
				return shuttle_list[my_shuttle];
			}
			return null;
		}

		// Function from file: shuttle.dm
		public static void setup_shuttles(  ) {
			int all_count = 0;
			int count = 0;
			Shuttle S = null;
			string msg = null;
			string msg2 = null;

			Game13.log.WriteMsg( "Setting up all shuttles..." );
			all_count = 0;
			count = 0;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.shuttles, typeof(Shuttle) )) {
				S = _b;
				

				switch ((int)( S.initialize() )) {
					case 2:
						
						if ( S.is_special() ) {
							msg = ( Lang13.Bool( S.linked_area ) ? "- \"" + S.linked_area + "\" was given as a starting area." : "" );
							Game13.log.WriteMsg( "## WARNING: " + ( "Invalid or missing starting area for " + S.name + " (" + S.type + ") " + msg ) );
						} else {
							msg2 = ( Lang13.Bool( S.linked_area ) ? "- \"" + S.linked_area + "\" was given as a starting area." : "" );
							Game13.log.WriteMsg( "Invalid or missing starting area for " + S.name + " (" + S.type + ") " + msg2 );
						}
						break;
					case 3:
						
						if ( S.is_special() ) {
							Game13.log.WriteMsg( "## WARNING: " + ( "Couldn't find a shuttle docking port for " + S.name + " (" + S.type + ")." ) );
						} else {
							Game13.log.WriteMsg( "Couldn't find a shuttle docking port for " + S.name + " (" + S.type + ")." );
						}
						break;
					case 4:
						
						if ( S.is_special() ) {
							Game13.log.WriteMsg( "## WARNING: " + ( "" + S.name + " (" + S.type + ") couldn't connect to a destination port on init - unless this is intended, there might be problems." ) );
						} else {
							Game13.log.WriteMsg( "" + S.name + " (" + S.type + ") couldn't connect to a destination port on init - unless this is intended, there might be problems." );
						}
						break;
					default:
						count++;
						break;
				}
				all_count++;
			}
			Game13.log.WriteMsg( "" + all_count + " shuttles initialized, of them " + count + " were initialized properly." );
			GlobalVars.emergency_shuttle.shuttle = GlobalVars.escape_shuttle;

			if ( !( GlobalVars.emergency_shuttle != null ) || !( GlobalVars.emergency_shuttle.shuttle != null ) ) {
				Game13.log.WriteMsg( "## WARNING: " + "Emergency shuttle is broken." );
			} else {
				Game13.log.WriteMsg( "Emergency shuttle has been successfully set up." );
			}
			return;
		}

		// Function from file: sound.dm
		public static int get_rand_frequency(  ) {
			return Rand13.Int( 32000, 55000 );
		}

		// Function from file: sound.dm
		public static dynamic get_sfx( dynamic soundin = null ) {
			
			if ( soundin is string ) {
				
				dynamic _a = soundin; // Was a switch-case, sorry for the mess.
				if ( _a=="shatter" ) {
					soundin = Rand13.PickFromTable( GlobalVars.shatter_sound );
				} else if ( _a=="explosion" ) {
					soundin = Rand13.PickFromTable( GlobalVars.explosion_sound );
				} else if ( _a=="explosion_small" ) {
					soundin = Rand13.PickFromTable( GlobalVars.small_explosion_sound );
				} else if ( _a=="sparks" ) {
					soundin = Rand13.PickFromTable( GlobalVars.spark_sound );
				} else if ( _a=="rustle" ) {
					soundin = Rand13.PickFromTable( GlobalVars.rustle_sound );
				} else if ( _a=="punch" ) {
					soundin = Rand13.PickFromTable( GlobalVars.punch_sound );
				} else if ( _a=="clownstep" ) {
					soundin = Rand13.PickFromTable( GlobalVars.clown_sound );
				} else if ( _a=="swing_hit" ) {
					soundin = Rand13.PickFromTable( GlobalVars.swing_hit_sound );
				} else if ( _a=="hiss" ) {
					soundin = Rand13.PickFromTable( GlobalVars.hiss_sound );
				} else if ( _a=="pageturn" ) {
					soundin = Rand13.PickFromTable( GlobalVars.page_sound );
				} else if ( _a=="mechstep" ) {
					soundin = Rand13.PickFromTable( GlobalVars.mechstep_sound );
				} else if ( _a=="gib" ) {
					soundin = Rand13.PickFromTable( GlobalVars.gib_sound );
				} else if ( _a=="mommicomment" ) {
					soundin = Rand13.PickFromTable( GlobalVars.mommicomment_sound );
				} else if ( _a=="polaroid" ) {
					soundin = Rand13.PickFromTable( GlobalVars.polaroid_sound );
				} else if ( _a=="malescream" ) {
					soundin = Rand13.PickFromTable( GlobalVars.male_scream_sound );
				} else if ( _a=="femalescream" ) {
					soundin = Rand13.PickFromTable( GlobalVars.female_scream_sound );
				}
			}
			return soundin;
		}

		// Function from file: sound.dm
		public static void playsound( dynamic source = null, dynamic soundin = null, double? vol = null, double? vary = null, dynamic extrarange = null, int? falloff = null, bool? gas_modified = null, int? channel = null ) {
			gas_modified = gas_modified ?? true;
			channel = channel ?? 0;

			dynamic turf_source = null;
			int? frequency = null;
			dynamic atmosphere = null;
			GasMixture current_air = null;
			double atmos_modifier = 0;
			dynamic total_range = null;
			dynamic Dist = null;
			dynamic player = null;
			dynamic player_turf = null;

			turf_source = GlobalFuncs.get_turf( source );

			if ( !( !( turf_source == null ) ) ) {
				Task13.Crash( "" + "code/game/sound.dm" + ":" + 26 + ":Assertion Failed: " + "!isnull(turf_source)" );
			}
			frequency = GlobalFuncs.get_rand_frequency();

			if ( !Lang13.Bool( extrarange ) ) {
				extrarange = 0;
			}

			if ( !Lang13.Bool( vol ) ) {
				return;
			}

			if ( gas_modified == true && Lang13.Bool( turf_source ) && !( ((Ent_Static)turf_source).c_airblock( turf_source ) != 0 ) ) {
				atmosphere = 0;
				current_air = ((Ent_Static)turf_source).return_air();

				if ( current_air != null ) {
					atmosphere = current_air.return_pressure();
				} else {
					atmosphere = 0;
				}
				atmos_modifier = Num13.Round( Convert.ToDouble( atmosphere / 101.32499694824219 ), 0.1 );
				total_range = Game13.view + extrarange;
				total_range = Num13.MinInt( ((int)( Num13.Round( Convert.ToDouble( total_range * Math.Sqrt( atmos_modifier ) ), 1 ) )), Convert.ToInt32( total_range * 2 ) );
				extrarange = total_range - Game13.view;
				vol = Num13.MinInt( ((int)( Num13.Round( ( vol ??0) * atmos_modifier, 1 ) )), ((int)( ( vol ??0) * 2 )) );
			}
			Dist = Game13.view + extrarange;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				player = _a;
				

				if ( !Lang13.Bool( player ) || !Lang13.Bool( player.client ) ) {
					continue;
				}
				player_turf = GlobalFuncs.get_turf( player );

				if ( Lang13.Bool( player_turf ) && Lang13.Bool( turf_source ) && player_turf.z == turf_source.z ) {
					
					if ( Map13.GetDistance( player_turf, turf_source ) <= Convert.ToDouble( Dist ) ) {
						((Mob)player).playsound_local( turf_source, soundin, vol, vary, frequency, falloff, gas_modified, channel );
					}
				}
			}
			return;
		}

		// Function from file: Space Station 13 areas.dm
		public static void process_adminbus_teleport_locs(  ) {
			dynamic AR = null;
			dynamic picked = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
				AR = _a;
				

				if ( GlobalVars.adminbusteleportlocs.Find( AR.name ) != 0 ) {
					continue;
				}
				picked = GlobalFuncs.safepick( GlobalFuncs.get_area_turfs( AR.type ) );

				if ( Lang13.Bool( picked ) ) {
					GlobalVars.adminbusteleportlocs.Add( AR.name );
					GlobalVars.adminbusteleportlocs[AR.name] = AR;
				}
			}
			GlobalFuncs.sortTim( GlobalVars.adminbusteleportlocs, typeof(GlobalFuncs).GetMethod( "cmp_text_dsc" ) );
			return;
		}

		// Function from file: Space Station 13 areas.dm
		public static void process_ghost_teleport_locs(  ) {
			dynamic AR = null;
			dynamic picked = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
				AR = _a;
				

				if ( GlobalVars.ghostteleportlocs.Find( AR.name ) != 0 ) {
					continue;
				}

				if ( AR is Zone_TurretProtected_Aisat || AR is Zone_Derelict || AR is Zone_Tdome ) {
					GlobalVars.ghostteleportlocs.Add( AR.name );
					GlobalVars.ghostteleportlocs[AR.name] = AR;
				}
				picked = GlobalFuncs.safepick( GlobalFuncs.get_area_turfs( AR.type ) );

				if ( Lang13.Bool( picked ) && ( Lang13.Bool( picked.z ) == true || Convert.ToInt32( picked.z ) == 5 || Convert.ToInt32( picked.z ) == 3 ) ) {
					GlobalVars.ghostteleportlocs.Add( AR.name );
					GlobalVars.ghostteleportlocs[AR.name] = AR;
				}
			}
			GlobalFuncs.sortTim( GlobalVars.ghostteleportlocs, typeof(GlobalFuncs).GetMethod( "cmp_text_asc" ) );
			return;
		}

		// Function from file: Space Station 13 areas.dm
		public static void process_teleport_locs(  ) {
			dynamic AR = null;
			dynamic picked = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
				AR = _a;
				

				if ( AR is Zone_Shuttle || AR is Zone_SyndicateStation || AR is Zone_WizardStation ) {
					continue;
				}

				if ( GlobalVars.teleportlocs.Find( AR.name ) != 0 ) {
					continue;
				}
				picked = GlobalFuncs.safepick( GlobalFuncs.get_area_turfs( AR.type ) );

				if ( Lang13.Bool( picked ) && Lang13.Bool( picked.z ) == true ) {
					GlobalVars.teleportlocs.Add( AR.name );
					GlobalVars.teleportlocs[AR.name] = AR;
				}
			}
			GlobalFuncs.sortTim( GlobalVars.teleportlocs, typeof(GlobalFuncs).GetMethod( "cmp_text_asc" ) );
			return;
		}

		// Function from file: spacevines.dm
		public static void spacevine_infestation( int? potency_min = null, int? potency_max = null, int? maturation_min = null, int? maturation_max = null ) {
			potency_min = potency_min ?? 70;
			potency_max = potency_max ?? 100;
			maturation_min = maturation_min ?? 2;
			maturation_max = maturation_max ?? 6;

			ByTable turfs = null;
			dynamic areapath = null;
			dynamic A = null;
			Tile_Simulated_Floor F = null;
			dynamic T = null;
			Seed seed = null;
			Obj_Effect_Plantsegment vine = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				turfs = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( Lang13.GetTypes( typeof(Zone_Hallway) ) )) {
					areapath = _b;
					
					A = Lang13.FindObj( areapath );

					foreach (dynamic _a in Lang13.Enumerate( A.contents, typeof(Tile_Simulated_Floor) )) {
						F = _a;
						

						if ( !GlobalFuncs.is_blocked_turf( F ) ) {
							turfs.Add( F );
						}
					}
				}

				if ( turfs.len != 0 ) {
					T = Rand13.PickFromTable( turfs );
					seed = GlobalVars.plant_controller.create_random_seed( true );
					seed.spread = 2;
					seed.potency = Rand13.Int( potency_min ??0, potency_max ??0 );
					seed.maturation = Rand13.Int( maturation_min ??0, maturation_max ??0 );
					vine = new Obj_Effect_Plantsegment( T, seed, null, true );
					vine.process();
					GlobalFuncs.message_admins( "<span class='notice'>Event: Spacevines spawned at " + T.loc + " <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T.x + ";Y=" + T.y + ";Z=" + T.z + "'>(JMP)</a></span>" );
					return;
				}
				GlobalFuncs.message_admins( "<span class='notice'>Event: Spacevines failed to find a viable turf.</span>" );
				return;
			}));
			return;
		}

		// Function from file: species.dm
		public static dynamic buildSpeciesLists(  ) {
			dynamic _default = null;

			dynamic L = null;
			dynamic S = null;
			dynamic language_name = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Language) ) - typeof(Language) )) {
				_default = _a;
				
				L = Lang13.Call( _default );
				GlobalVars.all_languages[L.name] = L;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.all_languages )) {
				language_name = _b;
				
				L = GlobalVars.all_languages[language_name];
				GlobalVars.language_keys[":" + String13.ToLower( L.key )] = L;
				GlobalVars.language_keys["." + String13.ToLower( L.key )] = L;
				GlobalVars.language_keys["#" + String13.ToLower( L.key )] = L;
			}

			foreach (dynamic _c in Lang13.Enumerate( Lang13.GetTypes( typeof(Species) ) - typeof(Species) )) {
				_default = _c;
				
				S = Lang13.Call( _default );
				GlobalVars.all_species[S.name] = S;

				if ( Lang13.Bool( S.flags & 1024 ) ) {
					GlobalVars.whitelisted_species.Add( S.name );
				}
			}
			return _default;
		}

		// Function from file: specops_shuttle.dm
		public static void AliceAnnounce( Obj_Item_Device_Radio_Intercom_Universe announcer = null, string message = null ) {
			Game_Data speech = null;

			speech = announcer.create_speech( message, Lang13.IntNullable( GlobalVars.radiochannels["Response Team"] ), announcer );
			((dynamic)speech).job = "Response Team";
			GlobalFuncs.Broadcast_Message( speech, null, 0, 0, new ByTable(new object [] { 0, 1 }) );
			GlobalFuncs.returnToPool( speech );
			return;
		}

		// Function from file: specops_shuttle.dm
		public static bool specops_can_move(  ) {
			Obj_Machinery_Computer_SpecopsShuttle S = null;

			
			if ( GlobalVars.specops_shuttle_moving_to_station || GlobalVars.specops_shuttle_moving_to_centcom ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_SpecopsShuttle) )) {
				S = _a;
				

				if ( Game13.timeofday <= S.specops_shuttle_timereset ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: specops_shuttle.dm
		public static void specops_process(  ) {
			dynamic special_ops = null;
			Obj_Item_Device_Radio_Intercom_Universe announcer = null;
			ByTable message_tracker = null;
			string message = null;
			int ticksleft = 0;
			int rounded_time_left = 0;
			Obj_Machinery_Door_Poddoor M = null;
			ByTable spawn_marauder = null;
			Obj_Effect_Landmark L = null;
			Obj_Effect_Landmark L2 = null;
			Obj_Effect_Portal P = null;
			Obj_Machinery_MassDriver M2 = null;
			Obj_Machinery_Door_Poddoor M3 = null;
			dynamic start_location = null;
			dynamic end_location = null;
			ByTable dstturfs = null;
			int throwy = 0;
			dynamic T = null;
			dynamic T2 = null;
			Tile D = null;
			dynamic AM = null;
			dynamic T3 = null;
			dynamic M4 = null;
			Obj_Machinery_Computer_SpecopsShuttle S = null;

			special_ops = Lang13.FindObj( typeof(Zone_Centcom_Specops) );
			announcer = GlobalVars.announcement_intercom;
			message_tracker = new ByTable(new object [] { 0, 1, 2, 3, 5, 10, 30, 45 });
			message = "\"THE SPECIAL OPERATIONS SHUTTLE IS PREPARING FOR LAUNCH\"";

			if ( announcer != null ) {
				GlobalFuncs.AliceAnnounce( announcer, message );
			}

			while (GlobalVars.specops_shuttle_time - Game13.timeofday > 0) {
				ticksleft = GlobalVars.specops_shuttle_time - Game13.timeofday;

				if ( ticksleft > 100000 ) {
					GlobalVars.specops_shuttle_time = Game13.timeofday + 10;
				}
				GlobalVars.specops_shuttle_timeleft = ticksleft / 10;

				if ( announcer != null ) {
					rounded_time_left = Num13.Floor( GlobalVars.specops_shuttle_timeleft );
					Interface13.Stat( null, message_tracker.Contains( rounded_time_left ) );

					if ( false ) {
						message = "\"ALERT: " + rounded_time_left + " SECOND" + ( rounded_time_left != 1 ? "S" : "" ) + " REMAIN\"";

						if ( rounded_time_left == 0 ) {
							message = "\"ALERT: TAKEOFF\"";
						}
						GlobalFuncs.AliceAnnounce( announcer, message );
						message_tracker.Remove( rounded_time_left );
					}
				}
				Task13.Sleep( 5 );
			}
			GlobalVars.specops_shuttle_moving_to_station = false;
			GlobalVars.specops_shuttle_moving_to_centcom = false;
			GlobalVars.specops_shuttle_at_station = true;

			if ( GlobalVars.specops_shuttle_moving_to_station || GlobalVars.specops_shuttle_moving_to_centcom ) {
				return;
			}

			if ( !GlobalFuncs.specops_can_move() ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The Special Operations shuttle is unable to leave.</span>" );
				return;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( special_ops, typeof(Obj_Machinery_Door_Poddoor) )) {
					M = _b;
					

					dynamic _a = M.id_tag; // Was a switch-case, sorry for the mess.
					if ( _a=="ASSAULT0" ) {
						Task13.Schedule( 10, (Task13.Closure)(() => {
							M.open();
							return;
						}));
					} else if ( _a=="ASSAULT1" ) {
						Task13.Schedule( 20, (Task13.Closure)(() => {
							M.open();
							return;
						}));
					} else if ( _a=="ASSAULT2" ) {
						Task13.Schedule( 30, (Task13.Closure)(() => {
							M.open();
							return;
						}));
					} else if ( _a=="ASSAULT3" ) {
						Task13.Schedule( 40, (Task13.Closure)(() => {
							M.open();
							return;
						}));
					}
				}
				Task13.Sleep( 10 );
				spawn_marauder = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					L = _c;
					

					if ( L.name == "Marauder Entry" ) {
						spawn_marauder.Add( L );
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					L2 = _d;
					

					if ( L2.name == "Marauder Exit" ) {
						P = new Obj_Effect_Portal( L2.loc );
						P.invisibility = 101;
						P.target = Rand13.PickFromTable( spawn_marauder );
						spawn_marauder.Remove( P.target );
					}
				}
				Task13.Sleep( 10 );

				foreach (dynamic _f in Lang13.Enumerate( special_ops, typeof(Obj_Machinery_MassDriver) )) {
					M2 = _f;
					

					switch ((string)( M2.id_tag )) {
						case "ASSAULT0":
							Task13.Schedule( 10, (Task13.Closure)(() => {
								M2.drive();
								return;
							}));
							break;
						case "ASSAULT1":
							Task13.Schedule( 20, (Task13.Closure)(() => {
								M2.drive();
								return;
							}));
							break;
						case "ASSAULT2":
							Task13.Schedule( 30, (Task13.Closure)(() => {
								M2.drive();
								return;
							}));
							break;
						case "ASSAULT3":
							Task13.Schedule( 40, (Task13.Closure)(() => {
								M2.drive();
								return;
							}));
							break;
					}
				}
				Task13.Sleep( 50 );

				foreach (dynamic _h in Lang13.Enumerate( special_ops, typeof(Obj_Machinery_Door_Poddoor) )) {
					M3 = _h;
					

					dynamic _g = M3.id_tag; // Was a switch-case, sorry for the mess.
					if ( _g=="ASSAULT0" ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							M3.close();
							return;
						}));
					} else if ( _g=="ASSAULT1" ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							M3.close();
							return;
						}));
					} else if ( _g=="ASSAULT2" ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							M3.close();
							return;
						}));
					} else if ( _g=="ASSAULT3" ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							M3.close();
							return;
						}));
					}
				}
				((Zone)special_ops).readyreset();
				return;
			}));
			start_location = Lang13.FindObj( typeof(Zone_Shuttle_Specops_Centcom) );
			end_location = Lang13.FindObj( typeof(Zone_Shuttle_Specops_Station) );
			dstturfs = new ByTable();
			throwy = Game13.map_size_y;

			foreach (dynamic _i in Lang13.Enumerate( end_location )) {
				T = _i;
				
				dstturfs.Add( T );

				if ( Convert.ToDouble( T.y ) < throwy ) {
					throwy = Convert.ToInt32( T.y );
				}
			}

			foreach (dynamic _k in Lang13.Enumerate( dstturfs )) {
				T2 = _k;
				
				D = Map13.GetTile( Convert.ToInt32( T2.x ), throwy - 1, 1 );

				foreach (dynamic _j in Lang13.Enumerate( T2 )) {
					AM = _j;
					
					AM.Move( D );
				}

				if ( T2 is Tile_Simulated ) {
					GlobalFuncs.qdel( T2 );
					T2 = null;
				}
			}
			((Zone)start_location).move_contents_to( end_location );

			foreach (dynamic _l in Lang13.Enumerate( GlobalFuncs.get_area_turfs( end_location ) )) {
				T3 = _l;
				
				M4 = Lang13.FindIn( typeof(Mob), T3 );
				GlobalFuncs.to_chat( M4, "<span class='warning'>You have arrived to " + GlobalVars.station_name + ". Commence operation!</span>" );
			}

			foreach (dynamic _m in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_SpecopsShuttle) )) {
				S = _m;
				
				S.specops_shuttle_timereset = Game13.time + 6000;
			}
			GlobalFuncs.qdel( announcer );
			return;
		}

		// Function from file: specops_shuttle.dm
		public static void specops_return(  ) {
			Obj_Item_Device_Radio_Intercom_Universe announcer = null;
			ByTable message_tracker = null;
			string message = null;
			int ticksleft = 0;
			int rounded_time_left = 0;
			dynamic start_location = null;
			dynamic end_location = null;
			ByTable dstturfs = null;
			int throwy = 0;
			dynamic T = null;
			dynamic T2 = null;
			Tile D = null;
			dynamic AM = null;
			dynamic T3 = null;
			dynamic M = null;
			Obj_Machinery_Computer_SpecopsShuttle S = null;

			announcer = GlobalVars.announcement_intercom;
			message_tracker = new ByTable(new object [] { 0, 1, 2, 3, 5, 10, 30, 45 });
			message = "\"THE SPECIAL OPERATIONS SHUTTLE IS PREPARING TO RETURN\"";

			if ( announcer != null ) {
				GlobalFuncs.AliceAnnounce( announcer, message );
			}

			while (GlobalVars.specops_shuttle_time - Game13.timeofday > 0) {
				ticksleft = GlobalVars.specops_shuttle_time - Game13.timeofday;

				if ( ticksleft > 100000 ) {
					GlobalVars.specops_shuttle_time = Game13.timeofday + 10;
				}
				GlobalVars.specops_shuttle_timeleft = ticksleft / 10;

				if ( announcer != null ) {
					rounded_time_left = Num13.Floor( GlobalVars.specops_shuttle_timeleft );
					Interface13.Stat( null, message_tracker.Contains( rounded_time_left ) );

					if ( false ) {
						message = "\"ALERT: " + rounded_time_left + " SECOND" + ( rounded_time_left != 1 ? "S" : "" ) + " REMAIN\"";

						if ( rounded_time_left == 0 ) {
							message = "\"ALERT: TAKEOFF\"";
						}
						GlobalFuncs.AliceAnnounce( announcer, message );
						message_tracker.Remove( rounded_time_left );
					}
				}
				Task13.Sleep( 5 );
			}
			GlobalVars.specops_shuttle_moving_to_station = false;
			GlobalVars.specops_shuttle_moving_to_centcom = false;
			GlobalVars.specops_shuttle_at_station = true;
			start_location = Lang13.FindObj( typeof(Zone_Shuttle_Specops_Station) );
			end_location = Lang13.FindObj( typeof(Zone_Shuttle_Specops_Centcom) );
			dstturfs = new ByTable();
			throwy = Game13.map_size_y;

			foreach (dynamic _a in Lang13.Enumerate( end_location )) {
				T = _a;
				
				dstturfs.Add( T );

				if ( Convert.ToDouble( T.y ) < throwy ) {
					throwy = Convert.ToInt32( T.y );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( dstturfs )) {
				T2 = _c;
				
				D = Map13.GetTile( Convert.ToInt32( T2.x ), throwy - 1, 1 );

				foreach (dynamic _b in Lang13.Enumerate( T2 )) {
					AM = _b;
					
					AM.Move( D );
				}

				if ( T2 is Tile_Simulated ) {
					GlobalFuncs.qdel( T2 );
					T2 = null;
				}
			}
			((Zone)start_location).move_contents_to( end_location );

			foreach (dynamic _d in Lang13.Enumerate( GlobalFuncs.get_area_turfs( end_location ) )) {
				T3 = _d;
				
				M = Lang13.FindIn( typeof(Mob), T3 );
				GlobalFuncs.to_chat( M, "<span class='warning'>You have arrived at Central Command. Operation has ended!</span>" );
			}
			GlobalVars.specops_shuttle_at_station = false;

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_SpecopsShuttle) )) {
				S = _e;
				
				S.specops_shuttle_timereset = Game13.time + 6000;
			}
			GlobalFuncs.qdel( announcer );
			announcer = null;
			return;
		}

		// Function from file: spess pets.dm
		public static int nano2dollar( int nanocoins = 0 ) {
			return Num13.Floor( nanocoins * GlobalVars.nanocoins_rates );
		}

		// Function from file: splash_simulation.dm
		public static void trigger_splash( dynamic epicenter = null, dynamic volume = null ) {
			Obj_Effect_Liquid L = null;
			Puddle P = null;

			
			if ( !Lang13.Bool( epicenter ) ) {
				return;
			}

			if ( Convert.ToDouble( volume ) <= 0 ) {
				return;
			}
			L = new Obj_Effect_Liquid( epicenter );
			L.volume = volume;
			L.update_icon2();
			P = new Puddle();
			P.liquid_objects.Add( L );
			L.controller = P;
			return;
		}

		// Function from file: stack.dm
		public static Game_Data drop_stack( dynamic new_stack_type = null, dynamic loc = null, double? add_amount = null, dynamic user = null ) {
			new_stack_type = new_stack_type ?? typeof(Obj_Item_Stack);
			add_amount = add_amount ?? 1;

			Obj_Item_Stack S = null;
			Game_Data S2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( loc, typeof(Obj_Item_Stack) )) {
				S = _a;
				

				if ( S.can_stack_with( new_stack_type ) ) {
					
					if ( ( S.max_amount ??0) >= ( S.amount ??0) + ( add_amount ??0) ) {
						S.amount += add_amount ??0;
						S.update_materials();
						GlobalFuncs.to_chat( user, new Txt( "<span class='info'>You add " ).item( add_amount ).str( " item" ).s().str( " to the stack. It now contains " ).item( S.amount ).str( " " ).item( ( Lang13.Bool( S.irregular_plural ) && ( S.amount ??0) > 1 ? S.irregular_plural : new Txt().item( S.singular_name ).s().ToString() ) ).str( ".</span>" ).ToString() );
						return S;
					}
				}
			}
			S2 = GlobalFuncs.getFromPool( new_stack_type, loc );
			((dynamic)S2).amount = add_amount;
			return S2;
		}

		// Function from file: statistics.dm
		public static void sql_poll_admins(  ) {
			int admincount = 0;
			string sqltime = null;
			DBQuery query = null;
			string err = null;

			
			if ( !GlobalVars.sqllogging ) {
				return;
			}
			admincount = GlobalVars.admins.len;
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "SQL ERROR during admin polling. Failed to connect." ) );
			} else {
				sqltime = String13.FormatTime( Game13.realtime, "YYYY-MM-DD hh:mm:ss" );
				query = GlobalVars.dbcon_old.NewQuery( "INSERT INTO population (admincount, time) VALUES (" + admincount + ", '" + sqltime + "')" );

				if ( !query.Execute() ) {
					err = query.ErrorMsg();
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "SQL ERROR during admin polling. Error : [" + err + "]\n" ) ) );
				}
			}
			return;
		}

		// Function from file: statistics.dm
		public static void sql_poll_players(  ) {
			int playercount = 0;
			dynamic M = null;
			string sqltime = null;
			DBQuery query = null;
			string err = null;

			
			if ( !GlobalVars.sqllogging ) {
				return;
			}
			playercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					playercount += 1;
				}
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "SQL ERROR during player polling. Failed to connect." ) );
			} else {
				sqltime = String13.FormatTime( Game13.realtime, "YYYY-MM-DD hh:mm:ss" );
				query = GlobalVars.dbcon_old.NewQuery( "INSERT INTO population (playercount, time) VALUES (" + playercount + ", '" + sqltime + "')" );

				if ( !query.Execute() ) {
					err = query.ErrorMsg();
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "SQL ERROR during player polling. Error : [" + err + "]\n" ) ) );
				}
			}
			return;
		}

		// Function from file: statistics.dm
		public static void sql_report_cyborg_death( Mob_Living H = null ) {
			Ent_Static T = null;
			dynamic placeofdeath = null;
			string podname = null;
			string sqlname = null;
			string sqlkey = null;
			string sqlpod = null;
			string sqlspecial = null;
			string sqljob = null;
			string laname = null;
			string lakey = null;
			string sqltime = null;
			string coord = null;
			DBQuery query = null;
			string err = null;

			
			if ( !GlobalVars.sqllogging ) {
				return;
			}

			if ( !( H != null ) ) {
				return;
			}

			if ( !Lang13.Bool( H.key ) || !( H.mind != null ) ) {
				return;
			}
			T = H.loc;
			placeofdeath = GlobalFuncs.get_area( T.loc );
			podname = placeofdeath.name;
			sqlname = GlobalFuncs.sanitizeSQL( H.real_name );
			sqlkey = GlobalFuncs.sanitizeSQL( H.key );
			sqlpod = GlobalFuncs.sanitizeSQL( podname );
			sqlspecial = GlobalFuncs.sanitizeSQL( H.mind.special_role );
			sqljob = GlobalFuncs.sanitizeSQL( H.mind.assigned_role );

			if ( Lang13.Bool( H.lastattacker ) ) {
				laname = GlobalFuncs.sanitizeSQL( H.lastattacker.real_name );
				lakey = GlobalFuncs.sanitizeSQL( H.lastattacker.key );
			}
			sqltime = String13.FormatTime( Game13.realtime, "YYYY-MM-DD hh:mm:ss" );
			coord = "" + H.x + ", " + H.y + ", " + H.z;
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "SQL ERROR during death reporting. Failed to connect." ) );
			} else {
				query = GlobalVars.dbcon.NewQuery( "INSERT INTO death (name, byondkey, job, special, pod, tod, laname, lakey, gender, bruteloss, fireloss, brainloss, oxyloss, coord) VALUES ('" + sqlname + "', '" + sqlkey + "', '" + sqljob + "', '" + sqlspecial + "', '" + sqlpod + "', '" + sqltime + "', '" + laname + "', '" + lakey + "', '" + H.gender + "', " + H.getBruteLoss() + ", " + H.getFireLoss() + ", " + H.brainloss + ", " + H.getOxyLoss() + ", '" + coord + "')" );

				if ( !query.Execute() ) {
					err = query.ErrorMsg();
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "SQL ERROR during death reporting. Error : [" + err + "]\n" ) ) );
				}
			}
			return;
		}

		// Function from file: statistics.dm
		public static void sql_report_death( Mob_Living H = null ) {
			Ent_Static T = null;
			dynamic placeofdeath = null;
			string podname = null;
			string sqlname = null;
			string sqlkey = null;
			string sqlpod = null;
			string sqlspecial = null;
			string sqljob = null;
			string laname = null;
			string lakey = null;
			string sqltime = null;
			string coord = null;
			DBQuery query = null;
			string err = null;

			
			if ( !GlobalVars.sqllogging ) {
				return;
			}

			if ( !( H != null ) ) {
				return;
			}

			if ( !Lang13.Bool( H.key ) || !( H.mind != null ) ) {
				return;
			}
			T = H.loc;
			placeofdeath = GlobalFuncs.get_area( T.loc );
			podname = placeofdeath.name;
			sqlname = GlobalFuncs.sanitizeSQL( H.real_name );
			sqlkey = GlobalFuncs.sanitizeSQL( H.key );
			sqlpod = GlobalFuncs.sanitizeSQL( podname );
			sqlspecial = GlobalFuncs.sanitizeSQL( H.mind.special_role );
			sqljob = GlobalFuncs.sanitizeSQL( H.mind.assigned_role );

			if ( Lang13.Bool( H.lastattacker ) ) {
				laname = GlobalFuncs.sanitizeSQL( H.lastattacker.real_name );
				lakey = GlobalFuncs.sanitizeSQL( H.lastattacker.key );
			}
			sqltime = String13.FormatTime( Game13.realtime, "YYYY-MM-DD hh:mm:ss" );
			coord = "" + H.x + ", " + H.y + ", " + H.z;
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "SQL ERROR during death reporting. Failed to connect." ) );
			} else {
				query = GlobalVars.dbcon.NewQuery( "INSERT INTO death (name, byondkey, job, special, pod, tod, laname, lakey, gender, bruteloss, fireloss, brainloss, oxyloss, coord) VALUES ('" + sqlname + "', '" + sqlkey + "', '" + sqljob + "', '" + sqlspecial + "', '" + sqlpod + "', '" + sqltime + "', '" + laname + "', '" + lakey + "', '" + H.gender + "', " + H.getBruteLoss() + ", " + H.getFireLoss() + ", " + H.brainloss + ", " + H.getOxyLoss() + ", '" + coord + "')" );

				if ( !query.Execute() ) {
					err = query.ErrorMsg();
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "SQL ERROR during death reporting. Error : [" + err + "]\n" ) ) );
				}
			}
			return;
		}

		// Function from file: statistics.dm
		public static void statistic_cycle(  ) {
			
			if ( !GlobalVars.sqllogging ) {
				return;
			}

			while (true) {
				GlobalFuncs.sql_poll_players();
				Task13.Sleep( 600 );
				GlobalFuncs.sql_poll_admins();
				Task13.Sleep( 6000 );
			}
			return;
		}

		// Function from file: surgery.dm
		public static bool do_surgery( dynamic M = null, dynamic user = null, Obj_Item tool = null ) {
			bool sleep_fail = false;
			bool clumsy = false;
			dynamic H = null;
			SurgeryStep S = null;
			int canuse = 0;
			string selection = null;

			
			if ( !( M is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( user.a_intent == "hurt" ) {
				return false;
			}
			sleep_fail = false;
			clumsy = false;

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;
				Interface13.Stat( null, H.mutations.Contains( 5 ) );
				clumsy = false && Rand13.PercentChance( 50 );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.surgery_steps, typeof(SurgeryStep) )) {
				S = _a;
				
				sleep_fail = false;

				if ( S.tool_quality( tool ) ) {
					canuse = S.can_use( user, M, ((dynamic)user.zone_sel).selecting, tool );

					if ( canuse == -1 ) {
						sleep_fail = true;
					}

					if ( canuse != 0 && S.is_valid_mutantrace( M ) && !false ) {
						
						if ( !S.can_operate( user, M, ((dynamic)user.zone_sel).selecting, tool ) ) {
							return true;
						}
						M.attack_log.Add( new Txt( "[" ).item( GlobalFuncs.time_stamp() ).str( "] <font color='orange'>Has had surgery " ).item( S.type ).str( " with " ).the( tool ).item().str( " started by " ).item( user.name ).str( " (" ).item( user.ckey ).str( ")</font>" ).ToString() );
						user.attack_log.Add( new Txt( "[" ).item( GlobalFuncs.time_stamp() ).str( "] <font color='red'>Started surgery " ).item( S.type ).str( " with " ).the( tool ).item().str( " on " ).item( M.name ).str( " (" ).item( M.ckey ).str( ")</font>" ).ToString() );
						GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + new Txt( "<font color='red'>" ).item( user.name ).str( " (" ).item( user.ckey ).str( ") used " ).the( tool ).item().str( " to perform surgery type " ).item( S.type ).str( " on " ).item( M.name ).str( " (" ).item( M.ckey ).str( ")</font>" ).ToString() ) );
						S.doing_surgery.Add( M );
						S.begin_step( user, M, ((dynamic)user.zone_sel).selecting, tool );
						selection = ((dynamic)user.zone_sel).selecting;

						if ( GlobalFuncs.do_mob( user, M, Rand13.Int( S.min_duration, S.max_duration ) * tool.surgery_speed ) && Rand13.PercentChance( ((int)( ( S.tool_quality( tool ) ?1:0) / ( ( sleep_fail ?1:0) + ( clumsy ?1:0) + 1 ) )) ) && selection == ((dynamic)user.zone_sel).selecting ) {
							M.attack_log.Add( new Txt( "[" ).item( GlobalFuncs.time_stamp() ).str( "] <font color='orange'>Has had surgery " ).item( S.type ).str( " with " ).the( tool ).item().str( " successfully completed by " ).item( user.name ).str( " (" ).item( user.ckey ).str( ")</font>" ).ToString() );
							user.attack_log.Add( new Txt( "[" ).item( GlobalFuncs.time_stamp() ).str( "] <font color='red'>Successfully completed surgery " ).item( S.type ).str( " with " ).the( tool ).item().str( " on " ).item( M.name ).str( " (" ).item( M.ckey ).str( ")</font>" ).ToString() );
							GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + new Txt( "<font color='red'>" ).item( user.name ).str( " (" ).item( user.ckey ).str( ") used " ).the( tool ).item().str( " to successfully complete surgery type " ).item( S.type ).str( " on " ).item( M.name ).str( " (" ).item( M.ckey ).str( ")</font>" ).ToString() ) );
							S.end_step( user, M, ((dynamic)user.zone_sel).selecting, tool );
						} else {
							Interface13.Stat( null, user.contents.Contains( tool ) );

							if ( GlobalFuncs.do_mob( user, M, Rand13.Int( S.min_duration, S.max_duration ) * tool.surgery_speed ) && Rand13.PercentChance( ((int)( ( S.tool_quality( tool ) ?1:0) / ( ( sleep_fail ?1:0) + ( clumsy ?1:0) + 1 ) )) ) && selection == ((dynamic)user.zone_sel).selecting && ((Ent_Static)user).Adjacent( M ) ) {
								
								if ( sleep_fail ) {
									GlobalFuncs.to_chat( user, "<span class='warning'>The patient is squirming around in pain!</span>" );
									((Mob)M).emote( "scream", null, null, true );
								}
								M.attack_log.Add( new Txt( "[" ).item( GlobalFuncs.time_stamp() ).str( "] <font color='orange'>Has had surgery " ).item( S.type ).str( " with " ).the( tool ).item().str( " failed by " ).item( user.name ).str( " (" ).item( user.ckey ).str( ")</font>" ).ToString() );
								user.attack_log.Add( new Txt( "[" ).item( GlobalFuncs.time_stamp() ).str( "] <font color='red'>Failed surgery " ).item( S.type ).str( " with " ).the( tool ).item().str( " on " ).item( M.name ).str( " (" ).item( M.ckey ).str( ")</font>" ).ToString() );
								GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + new Txt( "<font color='red'>" ).item( user.name ).str( " (" ).item( user.ckey ).str( ") used " ).the( tool ).item().str( " to fail the surgery type " ).item( S.type ).str( " on " ).item( M.name ).str( " (" ).item( M.ckey ).str( ")</font>" ).ToString() ) );
								S.fail_step( user, M, ((dynamic)user.zone_sel).selecting, tool );
							}
						}

						if ( Lang13.Bool( M ) ) {
							S.doing_surgery.Remove( M );
						} else {
							S.doing_surgery.Remove( null );
						}
						return true;
					}
				}
			}

			if ( user.a_intent == "help" ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You can't see any useful way to use " + tool + " on " + M + ".</span>" );
				return true;
			}
			return false;
		}

		// Function from file: surgery.dm
		public static void sort_surgeries(  ) {
			int gap = 0;
			bool swapped = false;
			int? i = null;
			dynamic l = null;
			dynamic r = null;

			gap = GlobalVars.surgery_steps.len;
			swapped = true;

			while (gap > 1 || swapped) {
				swapped = false;

				if ( gap > 1 ) {
					gap = Num13.Floor( gap / 1.247330904006958 );
				}

				if ( gap < 1 ) {
					gap = 1;
				}
				i = null;
				i = 1;

				while (gap + ( i ??0) <= GlobalVars.surgery_steps.len) {
					l = GlobalVars.surgery_steps[i];
					r = GlobalVars.surgery_steps[gap + ( i ??0)];

					if ( Convert.ToDouble( l.priority ) < Convert.ToDouble( r.priority ) ) {
						GlobalVars.surgery_steps.Swap( i ??0, gap + ( i ??0) );
						swapped = true;
					}
					i++;
				}
			}
			return;
		}

		// Function from file: surgery.dm
		public static void spread_germs_to_organ( dynamic E = null, dynamic user = null ) {
			double germ_level = 0;

			
			if ( !( user is Mob_Living_Carbon_Human ) || !( E is Organ_External ) ) {
				return;
			}
			germ_level = Convert.ToDouble( user.germ_level );

			if ( Lang13.Bool( user.gloves ) ) {
				germ_level = Convert.ToDouble( user.gloves.germ_level );
			}

			if ( !Lang13.Bool( E.status & 4224 ) ) {
				E.germ_level = Num13.MaxInt( ((int)( germ_level )), Convert.ToInt32( E.germ_level ) );
			}
			return;
		}

		// Function from file: swapmaps.dm
		public static void InitializeSwapMaps(  ) {
			dynamic V = null;

			
			if ( GlobalVars.swapmaps_initialized ) {
				return;
			}
			GlobalVars.swapmaps_initialized = true;
			GlobalVars.swapmaps_compiled_maxx = Game13.map_size_x;
			GlobalVars.swapmaps_compiled_maxy = Game13.map_size_y;
			GlobalVars.swapmaps_compiled_maxz = Game13.map_size_z;
			GlobalVars.swapmaps_loaded = new ByTable();
			GlobalVars.swapmaps_byname = new ByTable();

			if ( Lang13.Bool( GlobalVars.swapmaps_iconcache ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.swapmaps_iconcache )) {
					V = _a;
					
					GlobalVars.swapmaps_iconcache[GlobalVars.swapmaps_iconcache[V]] = V;
				}
			}
			return;
		}

		// Function from file: syndicate_specops_shuttle.dm
		public static bool syndicate_elite_can_move(  ) {
			
			if ( GlobalVars.syndicate_elite_shuttle_moving_to_station || GlobalVars.syndicate_elite_shuttle_moving_to_mothership ) {
				return false;
			} else {
				return true;
			}
		}

		// Function from file: syndicate_specops_shuttle.dm
		public static void syndicate_elite_process(  ) {
			dynamic syndicate_ship = null;
			dynamic elite_squad = null;
			dynamic announcer = null;
			ByTable message_tracker = null;
			string message = null;
			int ticksleft = 0;
			int rounded_time_left = 0;
			dynamic start_location = null;
			dynamic end_location = null;
			dynamic dstturfs = null;
			int throwy = 0;
			dynamic T = null;
			dynamic T2 = null;
			Tile D = null;
			dynamic AM = null;
			dynamic T3 = null;
			dynamic M = null;

			syndicate_ship = Lang13.FindObj( typeof(Zone_SyndicateMothership_Control) );
			elite_squad = Lang13.FindObj( typeof(Zone_SyndicateMothership_EliteSquad) );
			announcer = Lang13.FindIn( typeof(Mob_Living_Silicon_Decoy), syndicate_ship );
			message_tracker = new ByTable(new object [] { 0, 1, 2, 3, 5, 10, 30, 45 });
			message = "THE SYNDICATE ELITE SHUTTLE IS PREPARING FOR LAUNCH";

			if ( Lang13.Bool( announcer ) ) {
				((Ent_Dynamic)announcer).say( message );
				message = "ARMORED SQUAD TAKE YOUR POSITION ON GRAVITY LAUNCH PAD";
				((Ent_Dynamic)announcer).say( message );
			}

			while (GlobalVars.syndicate_elite_shuttle_time - Game13.timeofday > 0) {
				ticksleft = GlobalVars.syndicate_elite_shuttle_time - Game13.timeofday;

				if ( ticksleft > 100000 ) {
					GlobalVars.syndicate_elite_shuttle_time = Game13.timeofday;
				}
				GlobalVars.syndicate_elite_shuttle_timeleft = ticksleft / 10;

				if ( Lang13.Bool( announcer ) ) {
					rounded_time_left = Num13.Floor( GlobalVars.syndicate_elite_shuttle_timeleft );
					Interface13.Stat( null, message_tracker.Contains( rounded_time_left ) );

					if ( false ) {
						message = "ALERT: " + rounded_time_left + " SECOND" + ( rounded_time_left != 1 ? "S" : "" ) + " REMAIN";

						if ( rounded_time_left == 0 ) {
							message = "ALERT: TAKEOFF";
						}
						((Ent_Dynamic)announcer).say( message );
						message_tracker.Remove( rounded_time_left );
					}
				}
				Task13.Sleep( 5 );
			}
			GlobalVars.syndicate_elite_shuttle_moving_to_station = false;
			GlobalVars.syndicate_elite_shuttle_moving_to_mothership = false;
			GlobalVars.syndicate_elite_shuttle_at_station = true;

			if ( GlobalVars.syndicate_elite_shuttle_moving_to_station || GlobalVars.syndicate_elite_shuttle_moving_to_mothership ) {
				return;
			}

			if ( !GlobalFuncs.syndicate_elite_can_move() ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The Syndicate Elite shuttle is unable to leave.</span>" );
				return;
				Task13.Sleep( 600 );
				((Zone)elite_squad).readyreset();
			}
			start_location = Lang13.FindObj( typeof(Zone_Shuttle_SyndicateElite_Mothership) );
			end_location = Lang13.FindObj( typeof(Zone_Shuttle_SyndicateElite_Station) );
			dstturfs = new ByTable();
			throwy = Game13.map_size_y;

			foreach (dynamic _a in Lang13.Enumerate( end_location )) {
				T = _a;
				
				dstturfs = T;

				if ( Convert.ToDouble( T.y ) < throwy ) {
					throwy = Convert.ToInt32( T.y );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( dstturfs )) {
				T2 = _c;
				
				D = Map13.GetTile( Convert.ToInt32( T2.x ), throwy - 1, 1 );

				foreach (dynamic _b in Lang13.Enumerate( T2 )) {
					AM = _b;
					
					AM.Move( D );
				}

				if ( T2 is Tile_Simulated ) {
					GlobalFuncs.qdel( T2 );
					T2 = null;
				}
			}
			((Zone)start_location).move_contents_to( end_location );

			foreach (dynamic _d in Lang13.Enumerate( GlobalFuncs.get_area_turfs( end_location ) )) {
				T3 = _d;
				
				M = Lang13.FindIn( typeof(Mob), T3 );
				GlobalFuncs.to_chat( M, "<span class='warning'>You have arrived to " + GlobalVars.station_name + ". Commence operation!</span>" );
			}
			return;
		}

		// Function from file: targeting.dm
		public static dynamic GunTrace( int X1 = 0, int Y1 = 0, int X2 = 0, int Y2 = 0, int? Z = null, Mob exc_obj = null, int? PX1 = null, int? PY1 = null, int? PX2 = null, int? PY2 = null ) {
			Z = Z ?? 1;
			PX1 = PX1 ?? 16;
			PY1 = PY1 ?? 16;
			PX2 = PX2 ?? 16;
			PY2 = PY2 ?? 16;

			Tile T = null;
			dynamic M = null;
			int s = 0;
			double m = 0;
			double b = 0;
			int signX = 0;
			int signY = 0;
			int xvert = 0;

			
			if ( X1 == X2 ) {
				
				if ( Y1 == Y2 ) {
					return 0;
				} else {
					s = ( Y2 - Y1 < 0 ? -1 : 1 );
					Y1 += s;

					while (true) {
						T = Map13.GetTile( X1, Y1, Z ??0 );

						if ( !( T != null ) ) {
							return 0;
						}
						M = Lang13.FindIn( typeof(Mob_Living), T );

						if ( Lang13.Bool( M ) ) {
							return M;
						}
						M = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInRangeExcludeThis( T, 1 ) - exc_obj );

						if ( Lang13.Bool( M ) ) {
							return M;
						}
						Y1 += s;
					}
				}
			} else {
				m = ( ( Y2 - Y1 ) * 32 + ( ( PY2 ??0) - ( PY1 ??0) ) ) / ( ( X2 - X1 ) * 32 + ( ( PX2 ??0) - ( PX1 ??0) ) );
				b = Y1 + ( PY1 ??0) / 32 - 0.015625 - m * ( X1 + ( PX1 ??0) / 32 - 0.015625 );
				signX = ( X2 - X1 < 0 ? -1 : 1 );
				signY = ( Y2 - Y1 < 0 ? -1 : 1 );

				if ( X1 < X2 ) {
					b += m;
				}

				while (true) {
					xvert = Num13.Floor( m * X1 + b - Y1 );

					if ( xvert != 0 ) {
						Y1 += signY;
					} else {
						X1 += signX;
					}
					T = Map13.GetTile( X1, Y1, Z ??0 );

					if ( !( T != null ) ) {
						return 0;
					}
					M = Lang13.FindIn( typeof(Mob_Living), T );

					if ( Lang13.Bool( M ) ) {
						return M;
					}
					M = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInRangeExcludeThis( T, 1 ) - exc_obj );

					if ( Lang13.Bool( M ) ) {
						return M;
					}
				}
			}
			return 0;
		}

		// Function from file: teleport.dm
		public static void do_teleport( dynamic ateleatom = null, dynamic adestination = null, int? aprecision = null, bool? afteleport = null, bool? aeffectin = null, bool? aeffectout = null, string asoundin = null, string asoundout = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { ateleatom, adestination, aprecision, afteleport, aeffectin, aeffectout, asoundin, asoundout } ).Extend(_);

			
			if ( _args[3] == null ) {
				_args[3] = 0;
			}

			if ( _args[4] == null ) {
				_args[4] = 1;
			}

			if ( _args[5] == null ) {
				_args[5] = null;
			}

			if ( _args[6] == null ) {
				_args[6] = null;
			}

			if ( _args[7] == null ) {
				_args[7] = null;
			}

			if ( _args[8] == null ) {
				_args[8] = null;
			}
			_args.Apply( typeof(Teleport_Instant_Science) );
			return;
		}

		// Function from file: text.dm
		public static dynamic add_lspace( dynamic t = null, int u = 0 ) {
			
			while (Lang13.Length( t ) < u) {
				t = " " + t;
			}
			return t;
		}

		// Function from file: text.dm
		public static string add_tspace( string t = null, int u = 0 ) {
			
			while (Lang13.Length( t ) < u) {
				t = "" + t + " ";
			}
			return t;
		}

		// Function from file: text.dm
		public static dynamic add_zero( dynamic t = null, int u = 0 ) {
			
			while (Lang13.Length( t ) < u) {
				t = "0" + t;
			}
			return t;
		}

		// Function from file: text.dm
		public static string adminscrub( dynamic t = null, int? limit = null ) {
			limit = limit ?? 1024;

			return String13.SubStr( String13.HtmlEncode( GlobalFuncs.strip_html_simple( t ) ), 1, limit ??0 );
		}

		// Function from file: text.dm
		public static string capitalize( dynamic t = null ) {
			return String13.ToUpper( String13.SubStr( t, 1, 2 ) ) + String13.SubStr( t, 2, 0 );
		}

		// Function from file: text.dm
		public static int dd_hasprefix( dynamic text = null, string prefix = null ) {
			int start = 0;
			int end = 0;

			start = 1;
			end = Lang13.Length( prefix ) + 1;
			return String13.FindIgnoreCase( text, prefix, start, end );
		}

		// Function from file: text.dm
		public static int dd_hasprefix_case( string text = null, string prefix = null ) {
			int start = 0;
			int end = 0;

			start = 1;
			end = Lang13.Length( prefix ) + 1;
			return String13.Find( text, prefix, start, end );
		}

		// Function from file: text.dm
		public static dynamic format_num( dynamic number = null, string sep = null ) {
			sep = sep ?? ",";

			dynamic _default = null;

			string c = null;
			ByTable parts = null;
			string origtext = null;
			int? len = null;
			int offset = 0;
			int? i = null;

			c = "";
			parts = GlobalFuncs.text2list( "" + number, "." );
			origtext = "" + parts[1];
			len = Lang13.Length( origtext );
			offset = ( len ??0) % 3;
			i = null;
			i = 1;

			while (( i ??0) <= ( len ??0)) {
				c = String13.SubStr( origtext, i ??0, ( i ??0) + 1 );
				_default += c;

				if ( ( i ??0) % 3 == offset && i != len ) {
					_default += sep;
				}
				i++;
			}

			if ( parts.len == 2 ) {
				_default += "." + parts[2];
			}
			return _default;
		}

		// Function from file: text.dm
		public static string format_watts( dynamic number = null ) {
			int i = 0;

			
			if ( Convert.ToDouble( number ) < 0 ) {
				return "-" + GlobalFuncs.format_watts( number );
			}

			if ( number == 0 ) {
				return "0 W";
			}
			i = 1;

			while (Num13.Floor( Convert.ToDouble( number / 1000 ) ) >= 1) {
				number /= 1000;
				i++;
			}
			return "" + GlobalFuncs.format_num( number ) + " " + GlobalVars.watt_suffixes[i];
		}

		// Function from file: text.dm
		public static ByTable num2words( double number = 0, string zero = null, string minus = null, string hundred = null, ByTable digits = null, ByTable tens = null, ByTable units = null, int? recursion = null ) {
			zero = zero ?? "zero";
			minus = minus ?? "minus";
			hundred = hundred ?? "hundred";
			digits = digits ?? GlobalVars.number_digits;
			tens = tens ?? GlobalVars.number_tens;
			units = units ?? GlobalVars.number_units;
			recursion = recursion ?? 0;

			ByTable _out = null;
			double hundreds = 0;
			dynamic tens_place = null;
			int i = 0;
			double unit_number = 0;

			
			if ( !Lang13.Bool( Lang13.IsNumber( number ) ) ) {
				Game13.log.WriteMsg( "## WARNING: " + ( "num2words fed a non-number: " + number ) );
				return new ByTable();
			}
			number = Num13.Floor( number );

			if ( number == 0 ) {
				return new ByTable(new object [] { zero });
			}

			if ( number < 0 ) {
				return new ByTable(new object [] { minus }) + GlobalFuncs.num2words( Math.Abs( number ), zero, minus, hundred, digits, tens, units, ( recursion ??0) + 1 );
			}
			_out = new ByTable();

			if ( number < 1000 ) {
				hundreds = Num13.Floor( number / 100 );

				if ( hundreds != 0 ) {
					_out.Add( GlobalFuncs.num2words( hundreds, zero, minus, hundred, digits, tens, units, ( recursion ??0) + 1 ) + new ByTable(new object [] { hundred }) );
					number %= 100;
				}
			}

			if ( number < 100 ) {
				
				if ( number <= 19 ) {
					_out.Add( digits[number] );
				} else {
					tens_place = tens[Num13.Floor( number / 10 ) + 1];

					if ( tens_place != null ) {
						_out.Add( tens_place );
					}
					number = number % 10;

					if ( number > 0 ) {
						_out.Add( digits[number] );
					}
				}
			} else {
				i = 1;

				while (Num13.Floor( number ) > 0) {
					unit_number = number % 1000;

					if ( unit_number > 0 ) {
						
						if ( Lang13.Bool( units[i] ) ) {
							_out = new ByTable(new object [] { units[i] }) + _out;
						}
						_out = GlobalFuncs.num2words( unit_number, zero, minus, hundred, digits, tens, units, ( recursion ??0) + 1 ) + _out;
					}
					number /= 1000;
					i++;
				}
			}
			return _out;
		}

		// Function from file: text.dm
		public static string reject_bad_name( dynamic t_in = null, bool? allow_numbers = null, int? max_length = null ) {
			allow_numbers = allow_numbers ?? false;
			max_length = max_length ?? 26;

			int number_of_alphanumeric = 0;
			int last_char_group = 0;
			string t_out = null;
			int? i = null;
			int ascii_char = 0;
			dynamic bad_name = null;

			
			if ( !Lang13.Bool( t_in ) || Lang13.Length( t_in ) > ( max_length ??0) ) {
				return null;
			}
			number_of_alphanumeric = 0;
			last_char_group = 0;
			t_out = "";
			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( t_in )) {
				ascii_char = String13.GetCharCode( t_in, i );

				dynamic _a = ascii_char; // Was a switch-case, sorry for the mess.
				if ( 65<=_a&&_a<=90 ) {
					t_out += String13.GetCharFromCode( ascii_char );
					number_of_alphanumeric++;
					last_char_group = 4;
				} else if ( 97<=_a&&_a<=122 ) {
					
					if ( last_char_group < 2 ) {
						t_out += String13.GetCharFromCode( ascii_char - 32 );
					} else {
						t_out += String13.GetCharFromCode( ascii_char );
					}
					number_of_alphanumeric++;
					last_char_group = 4;
				} else if ( 48<=_a&&_a<=57 ) {
					
					if ( !( last_char_group != 0 ) ) {
						i++;
						continue;
					}

					if ( !( allow_numbers == true ) ) {
						i++;
						continue;
					}
					t_out += String13.GetCharFromCode( ascii_char );
					number_of_alphanumeric++;
					last_char_group = 3;
				} else if ( _a==39 || _a==45 || _a==46 ) {
					
					if ( !( last_char_group != 0 ) ) {
						i++;
						continue;
					}
					t_out += String13.GetCharFromCode( ascii_char );
					last_char_group = 2;
				} else if ( _a==126 || _a==124 || _a==64 || _a==58 || _a==35 || _a==36 || _a==37 || _a==38 || _a==42 || _a==43 ) {
					
					if ( !( last_char_group != 0 ) ) {
						i++;
						continue;
					}

					if ( !( allow_numbers == true ) ) {
						i++;
						continue;
					}
					t_out += String13.GetCharFromCode( ascii_char );
					last_char_group = 2;
				} else if ( _a==32 ) {
					
					if ( last_char_group <= 1 ) {
						i++;
						continue;
					}
					t_out += String13.GetCharFromCode( ascii_char );
					last_char_group = 1;
				} else {
					return null;
				}
				i++;
			}

			if ( number_of_alphanumeric < 2 ) {
				return null;
			}

			if ( last_char_group == 1 ) {
				t_out = String13.SubStr( t_out, 1, Lang13.Length( t_out ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { "space", "floor", "wall", "r-wall", "monkey", "unknown", "inactive ai", "plating" }) )) {
				bad_name = _b;
				

				if ( String13.CompareIgnoreCase( bad_name, t_out ) ) {
					return null;
				}
			}
			return t_out;
		}

		// Function from file: text.dm
		public static dynamic reject_bad_text( dynamic text = null, int? max_length = null ) {
			max_length = max_length ?? 512;

			int? text_length = null;
			bool? non_whitespace = null;
			double? i = null;

			text_length = Lang13.Length( text );

			if ( ( text_length ??0) > ( max_length ??0) ) {
				return null;
			}
			non_whitespace = GlobalVars.FALSE;

			foreach (dynamic _b in Lang13.IterateRange( 1, text_length )) {
				i = _b;
				

				dynamic _a = String13.GetCharCode( text, ((int?)( i )) ); // Was a switch-case, sorry for the mess.
				if ( 127<=_a&&_a<=255 ) {
					return null;
				} else if ( 0<=_a&&_a<=31 ) {
					return null;
				} else if ( _a==62 || _a==60 || _a==92 || _a==47 ) {
					return null;
				} else if ( _a==32 ) {
					continue;
				} else {
					non_whitespace = GlobalVars.TRUE;
				}
			}

			if ( non_whitespace == true ) {
				return text;
			}
			return null;
		}

		// Function from file: text.dm
		public static string replacetext( dynamic text = null, dynamic find = null, dynamic replacement = null ) {
			return GlobalFuncs.list2text( GlobalFuncs.text2list( text, find ), replacement );
		}

		// Function from file: text.dm
		public static string replacetextEx( string text = null, string find = null, string replacement = null ) {
			return GlobalFuncs.list2text( GlobalFuncs.text2listEx( text, find ), replacement );
		}

		// Function from file: text.dm
		public static string reverse_text( string txt = null ) {
			string _default = null;

			int i = 0;

			i = Lang13.Length( txt ) + 1;
			_default = "";

			while (--i != 0) {
				_default += String13.SubStr( txt, i, i + 1 );
			}
			return _default;
		}

		// Function from file: text.dm
		public static int rfindtext( string Haystack = null, string Needle = null, int? Start = null, int? End = null ) {
			Start = Start ?? 1;
			End = End ?? 0;

			int _default = 0;

			int i = 0;

			i = String13.FindIgnoreCase( Haystack, Needle, Start ??0, End ??0 );

			while (i != 0) {
				_default = i;
				i = String13.FindIgnoreCase( Haystack, Needle, i + 1, End ??0 );
			}
			return _default;
		}

		// Function from file: text.dm
		public static string sanitize( dynamic t = null, dynamic repl_chars = null ) {
			return String13.HtmlEncode( GlobalFuncs.sanitize_simple( t, repl_chars ) );
		}

		// Function from file: text.dm
		public static dynamic sanitize_simple( dynamic t = null, dynamic repl_chars = null ) {
			repl_chars = repl_chars ?? new ByTable().Set( "\n", "#" ).Set( "	", "#" ).Set( "ï¿½", "ï¿½" );

			dynamic _char = null;
			int index = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( repl_chars )) {
				_char = _a;
				
				index = String13.FindIgnoreCase( t, _char, 1, 0 );

				while (index != 0) {
					t = String13.SubStr( t, 1, index ) + repl_chars[_char] + String13.SubStr( t, index + 1, 0 );
					index = String13.FindIgnoreCase( t, _char, 1, 0 );
				}
			}
			return t;
		}

		// Function from file: text.dm
		public static string sanitizeSQL( dynamic t = null ) {
			string sqltext = null;

			sqltext = GlobalVars.dbcon.Quote( t );
			sqltext = String13.SubStr( sqltext, 2, Lang13.Length( sqltext ) );
			return sqltext;
		}

		// Function from file: text.dm
		public static dynamic stringmerge( string text = null, string compare = null, string replace = null ) {
			replace = replace ?? "*";

			string newtext = null;
			int? i = null;
			string a = null;
			string b = null;

			newtext = text;

			if ( Lang13.Length( text ) != Lang13.Length( compare ) ) {
				return 0;
			}
			i = null;
			i = 1;

			while (( i ??0) < Lang13.Length( text )) {
				a = String13.SubStr( text, i ??0, ( i ??0) + 1 );
				b = String13.SubStr( compare, i ??0, ( i ??0) + 1 );

				if ( a != b ) {
					
					if ( a == replace ) {
						newtext = String13.SubStr( newtext, 1, i ??0 ) + b + String13.SubStr( newtext, ( i ??0) + 1, 0 );
					} else if ( b == replace ) {
						newtext = String13.SubStr( newtext, 1, i ??0 ) + a + String13.SubStr( newtext, ( i ??0) + 1, 0 );
					} else {
						return 0;
					}
				}
				i++;
			}
			return newtext;
		}

		// Function from file: text.dm
		public static int stringpercent( string text = null, string character = null ) {
			character = character ?? "*";

			int count = 0;
			int? i = null;
			string a = null;

			
			if ( !Lang13.Bool( text ) || !Lang13.Bool( character ) ) {
				return 0;
			}
			count = 0;
			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( text )) {
				a = String13.SubStr( text, i ??0, ( i ??0) + 1 );

				if ( a == character ) {
					count++;
				}
				i++;
			}
			return count;
		}

		// Function from file: text.dm
		public static string strip_html( dynamic t = null, int? limit = null ) {
			limit = limit ?? 1024;

			return String13.SubStr( GlobalFuncs.sanitize( GlobalFuncs.strip_html_simple( t ) ), 1, limit ??0 );
		}

		// Function from file: text.dm
		public static dynamic strip_html_simple( dynamic t = null, int? limit = null ) {
			limit = limit ?? 1024;

			ByTable strip_chars = null;
			dynamic _char = null;
			int index = 0;

			strip_chars = new ByTable(new object [] { "<", ">" });
			t = String13.SubStr( t, 1, limit ??0 );

			foreach (dynamic _a in Lang13.Enumerate( strip_chars )) {
				_char = _a;
				
				index = String13.FindIgnoreCase( t, _char, 1, 0 );

				while (index != 0) {
					t = String13.SubStr( t, 1, index ) + String13.SubStr( t, index + 1, 0 );
					index = String13.FindIgnoreCase( t, _char, 1, 0 );
				}
			}
			return t;
		}

		// Function from file: text.dm
		public static dynamic stripped_input( dynamic user = null, string message = null, string title = null, dynamic __default = null, int? max_length = null ) {
			message = message ?? "";
			title = title ?? "";
			__default = __default ?? "";
			max_length = max_length ?? 1024;

			dynamic name = null;

			name = Interface13.Input( user, message, title, __default, null, InputType.Any );
			return GlobalFuncs.strip_html_simple( name, max_length );
		}

		// Function from file: text.dm
		public static string trim( dynamic text = null ) {
			return GlobalFuncs.trim_left( GlobalFuncs.trim_right( text ) );
		}

		// Function from file: text.dm
		public static string trim_left( string text = null ) {
			double? i = null;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, Lang13.Length( text ) )) {
				i = _a;
				

				if ( String13.GetCharCode( text, ((int?)( i )) ) > 32 ) {
					return String13.SubStr( text, ((int)( i ??0 )), 0 );
				}
			}
			return "";
		}

		// Function from file: text.dm
		public static string trim_right( dynamic text = null ) {
			int? i = null;

			i = null;
			i = Lang13.Length( text );

			while (( i ??0) > 0) {
				
				if ( String13.GetCharCode( text, i ) > 32 ) {
					return String13.SubStr( text, 1, ( i ??0) + 1 );
				}
				i--;
			}
			return "";
		}

		// Function from file: TextFilters.dm
		public static string Ellipsis( dynamic original_msg = null, int? chance = null ) {
			chance = chance ?? 50;

			ByTable words = null;
			ByTable new_words = null;
			string new_msg = null;
			dynamic w = null;

			
			if ( ( chance ??0) <= 0 ) {
				return "...";
			}

			if ( ( chance ??0) >= 100 ) {
				return original_msg;
			}
			words = GlobalFuncs.text2list( original_msg, " " );
			new_words = new ByTable();
			new_msg = "";

			foreach (dynamic _a in Lang13.Enumerate( words )) {
				w = _a;
				

				if ( Rand13.PercentChance( chance ??0 ) ) {
					new_words.Add( "..." );
				} else {
					new_words.Add( w );
				}
			}
			new_msg = GlobalFuncs.list2text( new_words, " " );
			return new_msg;
		}

		// Function from file: time.dm
		public static dynamic altFormatTimeDuration( int deciseconds = 0 ) {
			dynamic _default = null;

			int m = 0;
			double s = 0;
			int h = 0;

			m = Num13.Floor( deciseconds / 600 );
			s = deciseconds % 600 / 10;
			h = Num13.Floor( m / 60 );
			m = m % 60;

			if ( h > 0 ) {
				_default += "" + h + "h ";
			}

			if ( m > 0 ) {
				_default += "" + m + "m ";
			}
			_default += "" + s + "s";
			return _default;
		}

		// Function from file: time.dm
		public static int start_watch(  ) {
			return Game13.timeofday;
		}

		// Function from file: time.dm
		public static double stop_watch( int wh = 0 ) {
			return Num13.Round( ( Game13.timeofday - wh ) * 0.1, 0.1 );
		}

		// Function from file: time.dm
		public static string time_stamp(  ) {
			return String13.FormatTime( Game13.timeofday, "hh:mm:ss" );
		}

		// Function from file: time.dm
		public static string worldtime2text( int? timestamp = null ) {
			timestamp = timestamp ?? Game13.time;

			return "" + ( Num13.Floor( ( timestamp ??0) / 36000 ) + 12 ) % 24 + ":" + ( ( timestamp ??0) / 600 % 60 < 10 ? GlobalFuncs.add_zero( ( timestamp ??0) / 600 % 60, 1 ) : ((dynamic)( ( timestamp ??0) / 600 % 60 )) );
		}

		// Function from file: TimSort.dm
		public static dynamic sortTim( dynamic L = null, System.Reflection.MethodInfo cmp = null, dynamic associative = null, double? fromIndex = null, double? toIndex = null ) {
			cmp = cmp ?? typeof(GlobalFuncs).GetMethod( "cmp_numeric_asc" );
			fromIndex = fromIndex ?? 1;
			toIndex = toIndex ?? 0;

			
			if ( Lang13.Bool( L ) && L.len >= 2 ) {
				fromIndex = ( fromIndex ??0) % L.len;
				toIndex = ( toIndex ??0) % ( L.len + 1 );

				if ( ( fromIndex ??0) <= 0 ) {
					fromIndex += L.len;
				}

				if ( ( toIndex ??0) <= 0 ) {
					toIndex += L.len + 1;
				}
				GlobalVars.sortInstance.L = L;
				GlobalVars.sortInstance.cmp = cmp;
				GlobalVars.sortInstance.associative = Lang13.Bool( associative );
				GlobalVars.sortInstance.timSort( fromIndex, toIndex );
			}
			return L;
		}

		// Function from file: ToRban.dm
		public static void ToRban_autoupdate(  ) {
			SaveFile F = null;
			dynamic last_update = null;

			F = new SaveFile( "data/ToR_ban.bdb" );

			if ( F != null ) {
				last_update = F.ReadItem( "last_update", last_update );

				if ( Convert.ToDouble( last_update + 216000 ) < Game13.realtime ) {
					GlobalFuncs.ToRban_update();
				}
			}
			return;
		}

		// Function from file: ToRban.dm
		public static bool ToRban_isbanned( dynamic ip_address = null ) {
			SaveFile F = null;

			F = new SaveFile( "data/ToR_ban.bdb" );

			if ( F != null ) {
				Interface13.Stat( null, F.dir.Contains( ip_address ) );

				if ( false ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: ToRban.dm
		public static void ToRban_update(  ) {
			dynamic http = null;
			ByTable rawlist = null;
			SaveFile F = null;
			dynamic line = null;
			string cleaned = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalVars.diary.WriteMsg( "Downloading updated ToR data..." );
				http = Game13.Export( "http://exitlist.torproject.org/exit-addresses" );
				rawlist = GlobalFuncs.file2list( http["CONTENT"] );

				if ( rawlist.len != 0 ) {
					File13.Delete( "data/ToR_ban.bdb" );
					F = new SaveFile( "data/ToR_ban.bdb" );

					foreach (dynamic _a in Lang13.Enumerate( rawlist )) {
						line = _a;
						

						if ( !Lang13.Bool( line ) ) {
							continue;
						}

						if ( String13.SubStr( line, 1, 12 ) == "ExitAddress" ) {
							cleaned = String13.SubStr( line, 13, Lang13.Length( line ) - 19 );

							if ( !Lang13.Bool( cleaned ) ) {
								continue;
							}
							F[cleaned] = 1;
						}
					}
					F["last_update"] = Game13.realtime;
					GlobalVars.diary.WriteMsg( "ToR data updated!" );

					if ( Task13.User != null ) {
						GlobalFuncs.to_chat( Task13.User, "ToRban updated." );
					}
					return;
				}
				GlobalVars.diary.WriteMsg( "ToR data update aborted: no data." );
				return;
				return;
			}));
			return;
		}

		// Function from file: tracking.dm
		public static ByTable camera_sort( ByTable L = null ) {
			Obj_Machinery_Camera a = null;
			Obj_Machinery_Camera b = null;
			int? i = null;
			double j = 0;

			i = null;
			i = L.len;

			while (( i ??0) > 0) {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, ( i ??0) - 1 )) {
					j = _a;
					
					a = L[j];
					b = L[j + 1];

					if ( a.c_tag_order != b.c_tag_order ) {
						
						if ( a.c_tag_order > b.c_tag_order ) {
							L.Swap( ((int)( j )), ((int)( j + 1 )) );
						}
					} else if ( String13.GetOrder( a.c_tag, b.c_tag ) < 0 ) {
						L.Swap( ((int)( j )), ((int)( j + 1 )) );
					}
				}
				i--;
			}
			return L;
		}

		// Function from file: tracking.dm
		public static bool near_camera( dynamic M = null ) {
			dynamic R = null;

			
			if ( !( M.loc is Tile ) ) {
				return false;
			}

			if ( M is Mob_Living_Silicon_Robot ) {
				R = M;

				if ( !( Lang13.Bool( R.camera ) && Lang13.Bool( R.camera.can_use() ) ) && !GlobalVars.cameranet.checkCameraVis( M ) ) {
					return false;
				}
			} else if ( !GlobalVars.cameranet.checkCameraVis( M ) ) {
				return false;
			}
			return true;
		}

		// Function from file: turf_flick_animations.dm
		public static void anim( dynamic location = null, dynamic target = null, string a_icon = null, string a_icon_state = null, string flick_anim = null, int? sleeptime = null, int? direction = null, string name = null ) {
			sleeptime = sleeptime ?? 0;

			Game_Data animation = null;

			
			if ( !Lang13.Bool( location ) && Lang13.Bool( target ) ) {
				location = GlobalFuncs.get_turf( target );
			}

			if ( Lang13.Bool( location ) && !Lang13.Bool( target ) ) {
				target = location;
			}
			animation = GlobalFuncs.getFromPool( typeof(Dynamic_Overlay), location );

			if ( Lang13.Bool( name ) ) {
				((dynamic)animation).name = name;
			}

			if ( Lang13.Bool( direction ) ) {
				((dynamic)animation).dir = direction;
			}
			((dynamic)animation).icon = a_icon;
			((dynamic)animation).layer = target.layer + 1;

			if ( Lang13.Bool( a_icon_state ) ) {
				((dynamic)animation).icon_state = a_icon_state;
			} else {
				((dynamic)animation).icon_state = "blank";
				((dynamic)animation).master = target;
				Icon13.Flick( flick_anim, animation );
			}
			Task13.Schedule( Num13.MaxInt( sleeptime ??0, 15 ), (Task13.Closure)(() => {
				GlobalFuncs.returnToPool( animation );
				return;
			}));
			return;
		}

		// Function from file: type2type.dm
		public static double? angle2dir( double? degree = null ) {
			degree = ( ( degree ??0) + 22.5 ) % 365;

			if ( ( degree ??0) < 45 ) {
				return GlobalVars.NORTH;
			}

			if ( ( degree ??0) < 90 ) {
				return GlobalVars.NORTHEAST;
			}

			if ( ( degree ??0) < 135 ) {
				return GlobalVars.EAST;
			}

			if ( ( degree ??0) < 180 ) {
				return GlobalVars.SOUTHEAST;
			}

			if ( ( degree ??0) < 225 ) {
				return GlobalVars.SOUTH;
			}

			if ( ( degree ??0) < 270 ) {
				return GlobalVars.SOUTHWEST;
			}

			if ( ( degree ??0) < 315 ) {
				return GlobalVars.WEST;
			}
			return 9;
		}

		// Function from file: type2type.dm
		public static string angle2text( double? degree = null ) {
			return GlobalFuncs.dir2text( GlobalFuncs.angle2dir( degree ) );
		}

		// Function from file: type2type.dm
		public static int blendMode2iconMode( dynamic blend_mode = null ) {
			
			dynamic _a = blend_mode; // Was a switch-case, sorry for the mess.
			if ( _a==4 ) {
				return 2;
			} else if ( _a==2 ) {
				return 0;
			} else if ( _a==3 ) {
				return 1;
			} else {
				return 3;
			}
			return 0;
		}

		// Function from file: type2type.dm
		public static dynamic buildurlquery( ByTable list = null, string sep = null ) {
			sep = sep ?? "&";

			dynamic output = null;
			int i = 0;
			string start = null;
			string qmark = null;
			dynamic key = null;

			
			if ( !( list is ByTable ) || !( list.len != 0 ) ) {
				return null;
			}
			i = 0;
			qmark = "?";

			foreach (dynamic _a in Lang13.Enumerate( list )) {
				key = _a;
				
				start = ( i != 0 ? sep : qmark );
				output += "" + start + key + "=" + list[key];
				i++;
			}
			return output;
		}

		// Function from file: type2type.dm
		public static int? dir2angle( dynamic D = null ) {
			
			dynamic _a = D; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return 0;
			} else if ( _a==2 ) {
				return 180;
			} else if ( _a==4 ) {
				return 90;
			} else if ( _a==8 ) {
				return 270;
			} else if ( _a==5 ) {
				return 45;
			} else if ( _a==6 ) {
				return 135;
			} else if ( _a==9 ) {
				return 315;
			} else if ( _a==10 ) {
				return 225;
			} else {
				return null;
			}
			return null;
		}

		// Function from file: type2type.dm
		public static int dir2angle_t( int D = 0 ) {
			
			switch ((int)( D )) {
				case 4:
					return 0;
					break;
				case 5:
					return 45;
					break;
				case 1:
					return 90;
					break;
				case 9:
					return 135;
					break;
				case 8:
					return 180;
					break;
				case 10:
					return 225;
					break;
				case 2:
					return 270;
					break;
				case 6:
					return 315;
					break;
			}
			return 0;
		}

		// Function from file: type2type.dm
		public static string dir2text( dynamic direction = null ) {
			
			dynamic _a = direction; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return "north";
			} else if ( _a==2 ) {
				return "south";
			} else if ( _a==4 ) {
				return "east";
			} else if ( _a==8 ) {
				return "west";
			} else if ( _a==5 ) {
				return "northeast";
			} else if ( _a==6 ) {
				return "southeast";
			} else if ( _a==9 ) {
				return "northwest";
			} else if ( _a==10 ) {
				return "southwest";
			}
			return null;
		}

		// Function from file: type2type.dm
		public static ByTable file2list( string filename = null, string seperator = null ) {
			seperator = seperator ?? "\n";

			return GlobalFuncs.text2list( GlobalFuncs.return_file_text( filename ), seperator );
		}

		// Function from file: type2type.dm
		public static string list2text( dynamic ls = null, dynamic sep = null ) {
			string _default = null;

			int l = 0;
			int i = 0;

			
			if ( Lang13.Bool( ls ) && ls.len <= 1 ) {
				return ( Lang13.Bool( ls ) && ls.len != 0 ? ls[1] : "" );
			}
			l = ls.len;
			i = 0;

			if ( sep != null ) {
				_default = "" + ls[++i];

				if ( ( l - 1 & 1 ) != 0 ) {
					_default = "" + _default + sep + ls[++i];
				}

				if ( ( l - i & 2 ) != 0 ) {
					_default = "" + _default + sep + ls[++i] + sep + ls[++i];
				}

				if ( ( l - i & 4 ) != 0 ) {
					_default = "" + _default + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i];
				}

				if ( ( l - i & 8 ) != 0 ) {
					_default = "" + _default + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i];
				}

				if ( ( l - i & 16 ) != 0 ) {
					_default = "" + _default + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i];
				}

				if ( ( l - i & 32 ) != 0 ) {
					_default = "" + _default + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i];
				}

				if ( ( l - i & 64 ) != 0 ) {
					_default = "" + _default + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i];
				}

				while (l > i) {
					_default = "" + _default + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i] + sep + ls[++i];
				}
			} else {
				_default = "" + ls[++i];

				if ( ( l - 1 & 1 ) != 0 ) {
					_default += "" + ls[++i];
				}

				if ( ( l - i & 2 ) != 0 ) {
					_default = "" + _default + ls[++i] + ls[++i];
				}

				if ( ( l - i & 4 ) != 0 ) {
					_default = "" + _default + ls[++i] + ls[++i] + ls[++i] + ls[++i];
				}

				if ( ( l - i & 8 ) != 0 ) {
					_default = "" + _default + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i];
				}

				if ( ( l - i & 16 ) != 0 ) {
					_default = "" + _default + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i];
				}

				if ( ( l - i & 32 ) != 0 ) {
					_default = "" + _default + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i];
				}

				if ( ( l - i & 64 ) != 0 ) {
					_default = "" + _default + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i];
				}

				while (l > i) {
					_default = "" + _default + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i] + ls[++i];
				}
			}
			return _default;
		}

		// Function from file: type2type.dm
		public static string num2septext( dynamic theNum = null, int? sigFig = null, string sep = null ) {
			sigFig = sigFig ?? 7;
			sep = sep ?? ",";

			string finalNum = null;
			bool end = false;
			int? pos = null;

			finalNum = String13.NumberToString( Convert.ToDouble( theNum ), sigFig ??0 );
			end = String13.Find( finalNum, ".", 1, 0 ) != 0 || Lang13.Length( finalNum ) + 1 != 0;
			pos = null;
			pos = ( end ?1:0) - 3;

			while (( pos ??0) > 1) {
				finalNum = String13.SubStr( finalNum, 1, pos ??0 ) + sep + String13.SubStr( finalNum, pos ??0, 0 );
				pos -= 3;
			}
			return finalNum;
		}

		// Function from file: type2type.dm
		public static dynamic rights2text( dynamic rights = null, string seperator = null ) {
			seperator = seperator ?? "";

			dynamic _default = null;

			
			if ( Lang13.Bool( rights & 1 ) ) {
				_default += "" + seperator + "+BUILDMODE";
			}

			if ( Lang13.Bool( rights & 2 ) ) {
				_default += "" + seperator + "+ADMIN";
			}

			if ( Lang13.Bool( rights & 4 ) ) {
				_default += "" + seperator + "+BAN";
			}

			if ( Lang13.Bool( rights & 8 ) ) {
				_default += "" + seperator + "+FUN";
			}

			if ( Lang13.Bool( rights & 16 ) ) {
				_default += "" + seperator + "+SERVER";
			}

			if ( Lang13.Bool( rights & 32 ) ) {
				_default += "" + seperator + "+DEBUG";
			}

			if ( Lang13.Bool( rights & 64 ) ) {
				_default += "" + seperator + "+POSSESS";
			}

			if ( Lang13.Bool( rights & 128 ) ) {
				_default += "" + seperator + "+PERMISSIONS";
			}

			if ( Lang13.Bool( rights & 256 ) ) {
				_default += "" + seperator + "+STEALTH";
			}

			if ( Lang13.Bool( rights & 512 ) ) {
				_default += "" + seperator + "+REJUVINATE";
			}

			if ( Lang13.Bool( rights & 1024 ) ) {
				_default += "" + seperator + "+VAREDIT";
			}

			if ( Lang13.Bool( rights & 2048 ) ) {
				_default += "" + seperator + "+SOUND";
			}

			if ( Lang13.Bool( rights & 4096 ) ) {
				_default += "" + seperator + "+SPAWN";
			}

			if ( Lang13.Bool( rights & 8192 ) ) {
				_default += "" + seperator + "+MODERATOR";
			}

			if ( Lang13.Bool( rights & 16384 ) ) {
				_default += "" + seperator + "+ADMINBUS";
			}
			return _default;
		}

		// Function from file: type2type.dm
		public static int text2dir( dynamic direction = null ) {
			
			switch ((string)( String13.ToUpper( direction ) )) {
				case "NORTH":
					return 1;
					break;
				case "SOUTH":
					return 2;
					break;
				case "EAST":
					return 4;
					break;
				case "WEST":
					return 8;
					break;
				case "NORTHEAST":
					return 5;
					break;
				case "NORTHWEST":
					return 9;
					break;
				case "SOUTHEAST":
					return 6;
					break;
				case "SOUTHWEST":
					return 10;
					break;
			}
			return 0;
		}

		// Function from file: type2type.dm
		public static ByTable text2list( dynamic text = null, dynamic delimiter = null ) {
			delimiter = delimiter ?? "\n";

			ByTable _default = null;

			int delim_len = 0;
			int last_found = 0;
			int found = 0;

			delim_len = Lang13.Length( delimiter );

			if ( delim_len < 1 ) {
				return new ByTable(new object [] { text });
			}
			_default = new ByTable();
			last_found = 1;

			do {
				found = String13.FindIgnoreCase( text, delimiter, last_found, 0 );
				_default.Add( String13.SubStr( text, last_found, found ) );
				last_found = found + delim_len;
			} while ( found != 0 );
			return _default;
		}

		// Function from file: type2type.dm
		public static ByTable text2listEx( string text = null, string delimiter = null ) {
			delimiter = delimiter ?? "\n";

			ByTable _default = null;

			int delim_len = 0;
			int last_found = 0;
			int found = 0;

			delim_len = Lang13.Length( delimiter );

			if ( delim_len < 1 ) {
				return new ByTable(new object [] { text });
			}
			_default = new ByTable();
			last_found = 1;

			do {
				found = String13.Find( text, delimiter, last_found, 0 );
				_default.Add( String13.SubStr( text, last_found, found ) );
				last_found = found + delim_len;
			} while ( found != 0 );
			return _default;
		}

		// Function from file: type2type.dm
		public static string ui_style2icon( dynamic ui_style = null ) {
			
			dynamic _a = ui_style; // Was a switch-case, sorry for the mess.
			if ( _a=="old" ) {
				return "icons/mob/screen1_old.dmi";
			} else if ( _a=="Orange" ) {
				return "icons/mob/screen1_Orange.dmi";
			} else {
				return "icons/mob/screen1_Midnight.dmi";
			}
			return null;
		}

		// Function from file: type2type.dm
		public static string vg_list2text( ByTable list = null, string glue = null, string assoc_glue = null ) {
			glue = glue ?? ", ";
			assoc_glue = assoc_glue ?? " = ";

			string _default = null;

			double i = 0;

			
			if ( !GlobalFuncs.islist( list ) || !( list.len != 0 ) ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, list.len )) {
				i = _a;
				

				if ( list[list[i]] == null ) {
					_default += "" + list[i] + glue;
				} else {
					_default += "" + list[i] + assoc_glue + list[list[i]] + glue;
				}
			}
			_default = String13.SubStr( _default, 1, Lang13.Length( _default ) - Lang13.Length( glue ) + 1 );
			return _default;
		}

		// Function from file: typeof.dm
		public static dynamic existing_typesof( Type path = null ) {
			dynamic L = null;
			dynamic L2 = null;
			dynamic checked_type = null;
			dynamic A = null;

			
			if ( !Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Ent_Static) ) ) ) {
				return Lang13.GetTypes( path );
			}

			if ( Lang13.Bool( GlobalVars.existing_typesof_cache[path] ) ) {
				L = GlobalVars.existing_typesof_cache[path];
				return L.Copy();
			}
			L2 = Lang13.GetTypes( path );

			foreach (dynamic _a in Lang13.Enumerate( L2 )) {
				checked_type = _a;
				
				A = checked_type;

				if ( !Lang13.Bool( Lang13.Initial( A, "icon_state" ) ) || !Lang13.Bool( Lang13.Initial( A, "icon" ) ) ) {
					L2.Remove( checked_type );
				}
			}
			GlobalVars.existing_typesof_cache[path] = L2.Copy();
			return L2;
		}

		// Function from file: unsorted.dm
		public static ByTable active_ais(  ) {
			ByTable _default = null;

			Mob_Living_Silicon_Ai A = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.living_mob_list, typeof(Mob_Living_Silicon_Ai) )) {
				A = _a;
				

				if ( A.stat == 2 ) {
					continue;
				}

				if ( A.control_disabled ) {
					continue;
				}
				_default.Add( A );
			}
			return _default;
		}

		// Function from file: unsorted.dm
		public static double adjustAngle( double angle = 0 ) {
			angle = Num13.Floor( angle ) + 45;

			if ( angle > 180 ) {
				angle -= 180;
			} else {
				angle += 180;
			}

			if ( !( angle != 0 ) ) {
				angle = 1;
			}
			return angle;
		}

		// Function from file: unsorted.dm
		public static bool anyprob( double value = 0 ) {
			return Rand13.Int( 1, ((int)( value )) ) == value;
		}

		// Function from file: unsorted.dm
		public static bool can_operate( dynamic M = null ) {
			return M is Mob_Living_Carbon_Human && M.lying == true && Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Optable), M.loc ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Bed_Roller), M.loc ) ) && Rand13.PercentChance( 75 ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table), M.loc ) ) && Rand13.PercentChance( 66 );
		}

		// Function from file: unsorted.dm
		public static bool can_see( Mob_Living_SimpleAnimal_Hostile source = null, Obj_Mecha target = null, int? length = null ) {
			length = length ?? 5;

			dynamic current = null;
			dynamic target_turf = null;
			int? steps = null;
			Ent_Static A = null;

			current = GlobalFuncs.get_turf( source );
			target_turf = GlobalFuncs.get_turf( target );
			steps = 0;

			while (current != target_turf) {
				
				if ( ( steps ??0) > ( length ??0) ) {
					return false;
				}

				if ( Lang13.Bool( current.opacity ) ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( current, typeof(Ent_Static) )) {
					A = _a;
					

					if ( A.opacity ) {
						return false;
					}
				}
				current = Map13.GetStepTowardsSimple( current, target_turf );
				steps++;
			}
			return true;
		}

		// Function from file: unsorted.dm
		public static bool do_after( dynamic user = null, dynamic target = null, dynamic delay = null, int? numticks = null, bool? needhand = null ) {
			numticks = numticks ?? 10;
			needhand = needhand ?? GlobalVars.TRUE;

			int delayfraction = 0;
			Ent_Static Location = null;
			dynamic holding = null;
			Image progbar = null;
			double i = 0;

			
			if ( !Lang13.Bool( user ) || user == null ) {
				return false;
			}

			if ( numticks == 0 ) {
				return false;
			}
			delayfraction = Num13.Floor( Convert.ToDouble( delay / numticks ) );
			Location = user.loc;
			holding = ((Mob)user).get_active_hand();

			if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) && Lang13.Bool( user.client.prefs.progress_bars ) && Lang13.Bool( target ) ) {
				
				if ( !( progbar != null ) ) {
					progbar = new Image( "icons/effects/doafter_icon.dmi", target, "prog_bar_0" );
					progbar.pixel_y = 32;
					progbar.appearance_flags = 2;
				}
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, numticks )) {
				i = _a;
				

				if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) && Lang13.Bool( user.client.prefs.progress_bars ) && Lang13.Bool( target ) ) {
					
					if ( !( progbar != null ) ) {
						progbar = new Image( "icons/effects/doafter_icon.dmi", target, "prog_bar_0" );
						progbar.appearance_flags = 2;
					}
					progbar.icon_state = "prog_bar_" + Num13.Round( i / ( numticks ??0) * 100, 10 );
					user.client.images.Or( progbar );
				}
				Task13.Sleep( delayfraction );

				if ( !Lang13.Bool( user ) || Lang13.Bool( user.stat ) || user.weakened != 0 || Lang13.Bool( user.stunned ) || !( user.loc == Location ) ) {
					
					if ( progbar != null ) {
						progbar.icon_state = "prog_bar_stopped";
						Task13.Schedule( 2, (Task13.Closure)(() => {
							
							if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) ) {
								user.client.images.Remove( progbar );
							}

							if ( progbar != null ) {
								((dynamic)progbar).loc = null;
							}
							return;
						}));
					}
					return false;
				}

				if ( needhand == true && !( ((Mob)user).get_active_hand() == holding ) ) {
					
					if ( progbar != null ) {
						progbar.icon_state = "prog_bar_stopped";
						Task13.Schedule( 2, (Task13.Closure)(() => {
							
							if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) ) {
								user.client.images.Remove( progbar );
							}

							if ( progbar != null ) {
								((dynamic)progbar).loc = null;
							}
							return;
						}));
					}
					return false;
				}
			}

			if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) ) {
				user.client.images.Remove( progbar );
			}

			if ( progbar != null ) {
				((dynamic)progbar).loc = null;
			}
			return true;
		}

		// Function from file: unsorted.dm
		public static bool do_mob( dynamic user = null, dynamic target = null, double? delay = null, int? numticks = null ) {
			delay = delay ?? 30;
			numticks = numticks ?? 10;

			Ent_Static user_loc = null;
			Ent_Static target_loc = null;
			dynamic holding = null;
			int delayfraction = 0;
			Image progbar = null;
			double i = 0;

			
			if ( !Lang13.Bool( user ) || !Lang13.Bool( target ) ) {
				return false;
			}
			user_loc = user.loc;
			target_loc = target.loc;
			holding = ((Mob)user).get_active_hand();
			delayfraction = Num13.Floor( ( delay ??0) / ( numticks ??0) );

			if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) && Lang13.Bool( user.client.prefs.progress_bars ) ) {
				
				if ( !( progbar != null ) ) {
					progbar = new Image( "icons/effects/doafter_icon.dmi", target, "prog_bar_0" );
					progbar.pixel_y = 32;
				}
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, numticks )) {
				i = _a;
				

				if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) && Lang13.Bool( user.client.prefs.progress_bars ) && progbar != null ) {
					progbar.icon_state = "prog_bar_" + Num13.Round( i / ( numticks ??0) * 100, 10 );
					user.client.images.Or( progbar );
				}
				Task13.Sleep( delayfraction );

				if ( !Lang13.Bool( user ) || !Lang13.Bool( target ) ) {
					
					if ( progbar != null ) {
						progbar.icon_state = "prog_bar_stopped";
						Task13.Schedule( 2, (Task13.Closure)(() => {
							
							if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) ) {
								user.client.images.Remove( progbar );
							}

							if ( progbar != null ) {
								((dynamic)progbar).loc = null;
							}
							return;
						}));
					}
					return false;
				}

				if ( user.loc != user_loc || target.loc != target_loc || ((Mob)user).get_active_hand() != holding || Lang13.Bool( user.stat ) || Lang13.Bool( user.stunned ) || user.weakened != 0 || user.paralysis != 0 || user.lying == true ) {
					
					if ( progbar != null ) {
						progbar.icon_state = "prog_bar_stopped";
						Task13.Schedule( 2, (Task13.Closure)(() => {
							
							if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) ) {
								user.client.images.Remove( progbar );
							}

							if ( progbar != null ) {
								((dynamic)progbar).loc = null;
							}
							return;
						}));
					}
					return false;
				}
			}

			if ( Lang13.Bool( user ) && Lang13.Bool( user.client ) ) {
				user.client.images.Remove( progbar );
			}

			if ( progbar != null ) {
				((dynamic)progbar).loc = null;
			}
			return true;
		}

		// Function from file: unsorted.dm
		public static dynamic DuplicateObject( dynamic original = null, bool? perfectcopy = null, bool? sameloc = null ) {
			perfectcopy = perfectcopy ?? false;
			sameloc = sameloc ?? false;

			dynamic O = null;
			dynamic V = null;

			
			if ( !Lang13.Bool( original ) ) {
				return null;
			}
			O = null;

			if ( sameloc == true ) {
				O = Lang13.Call( original.type, original.loc );
			} else {
				O = Lang13.Call( original.type, Map13.GetTile( 0, 0, 0 ) );
			}

			if ( perfectcopy == true ) {
				
				if ( Lang13.Bool( O ) && Lang13.Bool( original ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( original.vars )) {
						V = _a;
						
						Interface13.Stat( null, new ByTable(new object [] { "type", "loc", "locs", "vars", "parent", "parent_type", "verbs", "ckey", "key", "group" }).Contains( V ) );

						if ( !false ) {
							O.vars[V] = original.vars[V];
						}
					}
				}
			}
			return O;
		}

		// Function from file: unsorted.dm
		public static dynamic find_active_mode( string mode_ctag = null ) {
			dynamic found_mode = null;
			dynamic mixed_mode = null;
			GameMode GM = null;

			found_mode = null;

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				
				if ( GlobalVars.ticker.mode.config_tag == mode_ctag ) {
					found_mode = GlobalVars.ticker.mode;
				} else if ( GlobalVars.ticker.mode.name == "mixed" ) {
					mixed_mode = GlobalVars.ticker.mode;

					foreach (dynamic _a in Lang13.Enumerate( mixed_mode.modes, typeof(GameMode) )) {
						GM = _a;
						

						if ( GM.config_tag == mode_ctag ) {
							found_mode = GM;
							break;
						}
					}
				}
			}
			return found_mode;
		}

		// Function from file: unsorted.dm
		public static Ent_Static find_holder( Ent_Static O = null ) {
			
			while (O != null) {
				
				if ( O.loc is Tile ) {
					return O;
				}
				O = O.loc;
			}
			return null;
		}

		// Function from file: unsorted.dm
		public static dynamic find_holder_of_type( dynamic reference = null, Type typepath = null ) {
			Ent_Static location = null;

			location = reference.loc;

			while (!( location is Tile ) && !Lang13.Bool( null.IsInstanceOfType( location ) )) {
				
				if ( Lang13.Bool( ((dynamic)typepath).IsInstanceOfType( location ) ) ) {
					return location;
				}
				location = location.loc;
			}
			return 0;
		}

		// Function from file: unsorted.dm
		public static string format_frequency( dynamic f = null ) {
			f = String13.ParseNumber( f );
			return "" + Num13.Floor( Convert.ToDouble( f / 10 ) ) + "." + f % 10;
		}

		// Function from file: unsorted.dm
		public static dynamic freeborg(  ) {
			dynamic select = null;
			ByTable borgs = null;
			Mob_Living_Silicon_Robot A = null;
			string name = null;

			select = null;
			borgs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Robot) )) {
				A = _a;
				

				if ( 2 == A.stat || A.connected_ai != null || A.scrambledcodes ) {
					continue;
				}
				name = "" + A.real_name + " (" + A.modtype + " " + A.braintype + ")";
				borgs[name] = A;
			}

			if ( borgs.len != 0 ) {
				select = Interface13.Input( "Unshackled borg signals detected:", "Borg selection", null, null, borgs, InputType.Null | InputType.Any );
				return borgs[select];
			}
			return null;
		}

		// Function from file: unsorted.dm
		public static double GaussRand( double sigma = 0 ) {
			double x = 0;
			double y = 0;
			double rsq = 0;

			
			do {
				x = Rand13.Float() * 2 - 1;
				y = Rand13.Float() * 2 - 1;
				rsq = x * x + y * y;
			} while ( rsq > 1 || !( rsq != 0 ) );
			return sigma * y * Math.Sqrt( Math.Log( rsq ) * -2 / rsq );
		}

		// Function from file: unsorted.dm
		public static double GaussRandRound( double sigma = 0, double roundto = 0 ) {
			return Num13.Round( GlobalFuncs.GaussRand( sigma ), roundto );
		}

		// Function from file: unsorted.dm
		public static dynamic get( dynamic loc = null, Type type = null ) {
			
			while (Lang13.Bool( loc )) {
				
				if ( Lang13.Bool( ((dynamic)type).IsInstanceOfType( loc ) ) ) {
					return loc;
				}
				loc = loc.loc;
			}
			return null;
		}

		// Function from file: unsorted.dm
		public static double get_angle( dynamic a = null, dynamic b = null ) {
			return GlobalFuncs.Atan2( Convert.ToInt32( b.y - a.y ), Convert.ToInt32( b.x - a.x ) );
		}

		// Function from file: unsorted.dm
		public static double Get_Angle( dynamic start = null, dynamic end = null ) {
			double _default = 0;

			int dy = 0;
			int dx = 0;

			
			if ( !Lang13.Bool( start ) || !Lang13.Bool( end ) ) {
				return 0;
			}
			dy = Convert.ToInt32( end.y * 32 + end.pixel_y - ( start.y * 32 + start.pixel_y ) );
			dx = Convert.ToInt32( end.x * 32 + end.pixel_x - ( start.x * 32 + start.pixel_x ) );

			if ( !( dy != 0 ) ) {
				return ( dx >= 0 ? 90 : 270 );
			}
			_default = GlobalFuncs.arctan( dx / dy );

			if ( dy < 0 ) {
				_default += 180;
			} else if ( dx < 0 ) {
				_default += 360;
			}
			return _default;
		}

		// Function from file: unsorted.dm
		public static ByTable get_area_turfs( dynamic areatype = null ) {
			dynamic areatemp = null;
			ByTable turfs = null;
			dynamic N = null;

			
			if ( !Lang13.Bool( areatype ) ) {
				return null;
			}

			if ( areatype is string ) {
				areatype = Lang13.FindClass( areatype );
			}

			if ( areatype is Zone ) {
				areatemp = areatype;
				areatype = areatemp.type;
			}
			turfs = new ByTable();
			N = Lang13.FindIn( areatype, GlobalVars.areas );

			if ( Lang13.Bool( N ) ) {
				turfs.Add( N.area_turfs );
			}
			return turfs;
		}

		// Function from file: unsorted.dm
		public static Ent_Static get_atom_on_turf( Obj_Item_Weapon_Plastique M = null ) {
			Ent_Static loc = null;

			loc = M;

			while (loc != null && loc.loc != null && !( loc.loc is Tile )) {
				loc = loc.loc;
			}
			return loc;
		}

		// Function from file: unsorted.dm
		public static int get_cardinal_dir( Obj A = null, dynamic B = null ) {
			double dx = 0;
			double dy = 0;

			dx = Math.Abs( Convert.ToDouble( B.x - A.x ) );
			dy = Math.Abs( Convert.ToDouble( B.y - A.y ) );
			return Map13.GetDistance( A, B ) & ( Rand13.Float() * ( dx + dy ) < dy ? 3 : 12 );
		}

		// Function from file: unsorted.dm
		public static double? get_dir_cardinal( dynamic T1 = null, dynamic T2 = null ) {
			int direc = 0;

			
			if ( !Lang13.Bool( T1 ) || !Lang13.Bool( T2 ) ) {
				return null;
			}
			direc = Map13.GetDistance( T1, T2 );
			Interface13.Stat( null, GlobalVars.cardinal.Contains( direc ) );

			if ( !Lang13.Bool( T1 ) || !Lang13.Bool( T2 ) ) {
				return direc;
			}

			switch ((int)( direc )) {
				case 5:
					
					if ( Convert.ToDouble( T2.x - T1.x ) > Convert.ToDouble( T2.y - T1.y ) ) {
						return GlobalVars.EAST;
					} else {
						return GlobalVars.NORTH;
					}
					break;
				case 6:
					
					if ( Convert.ToDouble( T2.x - T1.x ) > Convert.ToDouble( ( T2.y - T1.y ) * -1 ) ) {
						return GlobalVars.EAST;
					} else {
						return GlobalVars.SOUTH;
					}
					break;
				case 9:
					
					if ( Convert.ToDouble( ( T2.x - T1.x ) * -1 ) > Convert.ToDouble( T2.y - T1.y ) ) {
						return GlobalVars.WEST;
					} else {
						return GlobalVars.NORTH;
					}
					break;
				case 10:
					
					if ( Convert.ToDouble( T2.x - T1.x ) > Convert.ToDouble( T2.y - T1.y ) ) {
						return GlobalVars.WEST;
					} else {
						return GlobalVars.SOUTH;
					}
					break;
				default:
					return null;
					break;
			}
			return null;
		}

		// Function from file: unsorted.dm
		public static Tile get_distant_turf( dynamic T = null, int direction = 0, int distance = 0 ) {
			int dest_x = 0;
			int dest_y = 0;
			int dest_z = 0;

			
			if ( !Lang13.Bool( T ) || !( direction != 0 ) || !( distance != 0 ) ) {
				return null;
			}
			dest_x = Convert.ToInt32( T.x );
			dest_y = Convert.ToInt32( T.y );
			dest_z = Convert.ToInt32( T.z );

			if ( ( direction & 1 ) != 0 ) {
				dest_y = Num13.MinInt( Game13.map_size_y, dest_y + distance );
			}

			if ( ( direction & 2 ) != 0 ) {
				dest_y = Num13.MaxInt( 0, dest_y - distance );
			}

			if ( ( direction & 4 ) != 0 ) {
				dest_x = Num13.MinInt( Game13.map_size_y, dest_x + distance );
			}

			if ( ( direction & 8 ) != 0 ) {
				dest_x = Num13.MaxInt( 0, dest_x - distance );
			}
			return Map13.GetTile( dest_x, dest_y, dest_z );
		}

		// Function from file: unsorted.dm
		public static dynamic get_edge_target_turf( dynamic A = null, int? direction = null ) {
			Tile target = null;

			target = Map13.GetTile( Convert.ToInt32( A.x ), Convert.ToInt32( A.y ), Convert.ToInt32( A.z ) );

			if ( !Lang13.Bool( A ) || !( target != null ) ) {
				return 0;
			}

			if ( ( ( direction ??0) & 1 ) != 0 ) {
				target = Map13.GetTile( target.x, Game13.map_size_y, target.z );
			}

			if ( ( ( direction ??0) & 2 ) != 0 ) {
				target = Map13.GetTile( target.x, 1, target.z );
			}

			if ( ( ( direction ??0) & 4 ) != 0 ) {
				target = Map13.GetTile( Game13.map_size_x, target.y, target.z );
			}

			if ( ( ( direction ??0) & 8 ) != 0 ) {
				target = Map13.GetTile( 1, target.y, target.z );
			}
			return target;
		}

		// Function from file: unsorted.dm
		public static Tile get_offset_target_turf( Ent_Static A = null, int dx = 0, int dy = 0 ) {
			int x = 0;
			int y = 0;

			x = ( A.x + dx <= 1 ? 1 : ( A.x + dx >= Game13.map_size_x ? Game13.map_size_x : A.x + dx ) );
			y = ( A.y + dy <= 1 ? 1 : ( A.y + dy >= Game13.map_size_y ? Game13.map_size_y : A.y + dy ) );
			return Map13.GetTile( x, y, A.z );
		}

		// Function from file: unsorted.dm
		public static dynamic get_random_colour( bool simple = false, int? lower = null, int? upper = null ) {
			dynamic colour = null;
			int? i = null;
			string temp_col = null;

			
			if ( simple ) {
				colour = Rand13.PickFromTable( new ByTable(new object [] { "FF0000", "FF7F00", "FFFF00", "00FF00", "0000FF", "4B0082", "8F00FF" }) );
			} else {
				i = null;
				i = 1;

				while (( i ??0) <= 3) {
					temp_col = "" + GlobalFuncs.num2hex( Rand13.Int( lower ??0, upper ??0 ) );

					if ( Lang13.Length( temp_col ) < 2 ) {
						temp_col = "0" + temp_col;
					}
					colour += temp_col;
					i++;
				}
			}
			return colour;
		}

		// Function from file: unsorted.dm
		public static Tile get_ranged_target_turf( dynamic A = null, dynamic direction = null, int range = 0 ) {
			int x = 0;
			int y = 0;

			x = Convert.ToInt32( A.x );
			y = Convert.ToInt32( A.y );

			if ( Lang13.Bool( direction & 1 ) ) {
				y = Num13.MinInt( Game13.map_size_y, y + range );
			}

			if ( Lang13.Bool( direction & 2 ) ) {
				y = Num13.MaxInt( 1, y - range );
			}

			if ( Lang13.Bool( direction & 4 ) ) {
				x = Num13.MinInt( Game13.map_size_x, x + range );
			}

			if ( Lang13.Bool( direction & 8 ) ) {
				x = Num13.MaxInt( 1, x - range );
			}
			return Map13.GetTile( x, y, Convert.ToInt32( A.z ) );
		}

		// Function from file: unsorted.dm
		public static dynamic get_turf( dynamic O = null ) {
			dynamic A = null;

			
			if ( O == null || O is Zone || !( O is Ent_Static ) ) {
				return null;
			}
			A = O;

			while (Lang13.Bool( A ) && !( A is Tile )) {
				A = A.loc;
			}
			return A;
		}

		// Function from file: unsorted.dm
		public static dynamic get_z_level( Obj A = null ) {
			dynamic _default = null;

			int z = 0;
			dynamic T = null;

			
			if ( A is Ent_Dynamic ) {
				T = GlobalFuncs.get_turf( A );

				if ( !Lang13.Bool( T ) ) {
					return null;
				}
				z = Convert.ToInt32( T.z );
			} else {
				z = A.z;
			}
			_default = GlobalVars.map.zLevels[z];
			return _default;
		}

		// Function from file: unsorted.dm
		public static ByTable getline( dynamic M = null, dynamic N = null ) {
			double px = 0;
			double py = 0;
			ByTable line = null;
			double dx = 0;
			double dy = 0;
			double dxabs = 0;
			double dyabs = 0;
			double sdx = 0;
			double sdy = 0;
			double x = 0;
			double y = 0;
			double j = 0;

			px = Convert.ToDouble( M.x );
			py = Convert.ToDouble( M.y );
			line = new ByTable(new object [] { Map13.GetTile( ((int)( px )), ((int)( py )), Convert.ToInt32( M.z ) ) });
			dx = Convert.ToDouble( N.x - px );
			dy = Convert.ToDouble( N.y - py );
			dxabs = Math.Abs( dx );
			dyabs = Math.Abs( dy );
			sdx = GlobalFuncs.sign( dx );
			sdy = GlobalFuncs.sign( dy );
			x = ((int)( dxabs )) >> 1;
			y = ((int)( dyabs )) >> 1;

			if ( dxabs >= dyabs ) {
				j = 0;

				while (j < dxabs) {
					y += dyabs;

					if ( y >= dxabs ) {
						y -= dxabs;
						py += sdy;
					}
					px += sdx;
					line.Add( Map13.GetTile( ((int)( px )), ((int)( py )), Convert.ToInt32( M.z ) ) );
					j++;
				}
			} else {
				j = 0;

				while (j < dyabs) {
					x += dxabs;

					if ( x >= dyabs ) {
						x -= dyabs;
						px += sdx;
					}
					py += sdy;
					line.Add( Map13.GetTile( ((int)( px )), ((int)( py )), Convert.ToInt32( M.z ) ) );
					j++;
				}
			}
			return line;
		}

		// Function from file: unsorted.dm
		public static ByTable getmobs(  ) {
			ByTable mobs = null;
			ByTable names = null;
			ByTable creatures = null;
			ByTable namecounts = null;
			dynamic M = null;
			string name = null;

			mobs = GlobalFuncs.sortmobs();
			names = new ByTable();
			creatures = new ByTable();
			namecounts = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( mobs )) {
				M = _a;
				
				name = M.name;
				Interface13.Stat( null, names.Contains( name ) );

				if ( false ) {
					namecounts[name]++;
					name = "" + name + " (" + namecounts[name] + ")";
				} else {
					names.Add( name );
					namecounts[name] = 1;
				}

				if ( Lang13.Bool( M.real_name ) && M.real_name != M.name ) {
					name += " [" + M.real_name + "]";
				}

				if ( Convert.ToInt32( M.stat ) == 2 ) {
					
					if ( M is Mob_Dead_Observer ) {
						name += " [ghost]";
					} else {
						name += " [dead]";
					}
				}
				creatures[name] = M;
			}
			return creatures;
		}

		// Function from file: unsorted.dm
		public static bool gotwallitem( dynamic loc = null, int dir = 0 ) {
			Obj O = null;
			dynamic item = null;
			Obj O2 = null;
			dynamic item2 = null;

			
			foreach (dynamic _c in Lang13.Enumerate( loc, typeof(Obj) )) {
				O = _c;
				

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.WALLITEMS )) {
					item = _b;
					

					if ( Lang13.Bool( ((dynamic)Lang13.FindClass( item )).IsInstanceOfType( O ) ) ) {
						
						if ( O.dir == dir ) {
							return true;
						}

						switch ((int)( dir )) {
							case 2:
								
								if ( O.pixel_y > 10 ) {
									return true;
								}
								break;
							case 1:
								
								if ( O.pixel_y < -10 ) {
									return true;
								}
								break;
							case 8:
								
								if ( O.pixel_x > 10 ) {
									return true;
								}
								break;
							case 4:
								
								if ( O.pixel_x < -10 ) {
									return true;
								}
								break;
						}
					}
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( Map13.GetStep( loc, dir ), typeof(Obj) )) {
				O2 = _e;
				

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.WALLITEMS )) {
					item2 = _d;
					

					if ( Lang13.Bool( ((dynamic)Lang13.FindClass( item2 )).IsInstanceOfType( O2 ) ) ) {
						
						if ( Math.Abs( O2.pixel_x ) <= 10 && Math.Abs( O2.pixel_y ) <= 10 ) {
							return true;
						}
					}
				}
			}
			return false;
		}

		// Function from file: unsorted.dm
		public static bool has_edge( dynamic O = null ) {
			
			if ( !Lang13.Bool( O ) ) {
				return false;
			}

			if ( Lang13.Bool( O.edge ) ) {
				return true;
			}
			return false;
		}

		// Function from file: unsorted.dm
		public static bool hasvar( dynamic A = null, string varname = null ) {
			
			if ( A.vars.Find( String13.ToLower( varname ) ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: unsorted.dm
		public static string ionnum(  ) {
			return "" + Rand13.Pick(new object [] { "!", "@", "#", "$", "%", "^", "&", "*" }) + Rand13.Pick(new object [] { "!", "@", "#", "$", "%", "^", "&", "*" }) + Rand13.Pick(new object [] { "!", "@", "#", "$", "%", "^", "&", "*" }) + Rand13.Pick(new object [] { "!", "@", "#", "$", "%", "^", "&", "*" });
		}

		// Function from file: unsorted.dm
		public static bool is_blocked_turf( dynamic T = null ) {
			bool cant_pass = false;
			Ent_Static A = null;

			cant_pass = false;

			if ( T.density ) {
				cant_pass = true;
			}

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
				A = _a;
				

				if ( A.density ) {
					cant_pass = true;
				}
			}
			return cant_pass;
		}

		// Function from file: unsorted.dm
		public static bool IsGuestKey( string key = null ) {
			int? i = null;
			int ch = 0;
			int? len = null;

			
			if ( String13.FindIgnoreCase( key, "Guest-", 1, 7 ) != 1 ) {
				return false;
			}
			len = Lang13.Length( key );
			i = 7;

			while (( i ??0) <= ( len ??0)) {
				ch = String13.GetCharCode( key, i );

				if ( ch < 48 || ch > 57 ) {
					return false;
				}
				i++;
			}
			return true;
		}

		// Function from file: unsorted.dm
		public static string key_name( dynamic whom = null, dynamic include_link = null, bool? include_name = null ) {
			include_name = include_name ?? true;

			string _default = null;

			dynamic M = null;
			dynamic C = null;
			dynamic key = null;
			dynamic D = null;

			
			if ( !Lang13.Bool( whom ) ) {
				return "*null*";
			}

			if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( whom ) ) ) {
				C = whom;
				M = C.mob;
				key = C.key;
			} else if ( whom is Mob ) {
				M = whom;
				C = M.client;
				key = M.key;
			} else if ( whom is Game_Data ) {
				D = whom;
				return "*invalid:" + D.type + "*";
			} else {
				return "*invalid*";
			}
			_default = "";

			if ( Lang13.Bool( key ) ) {
				
				if ( Lang13.Bool( include_link ) && Lang13.Bool( C ) ) {
					_default += new Txt( "<a href='?priv_msg=" ).Ref( C ).str( "'>" ).ToString();
				}

				if ( Lang13.Bool( C ) && Lang13.Bool( C.holder ) && Lang13.Bool( C.holder.fakekey ) && !( include_name == true ) ) {
					_default += "Administrator";
				} else {
					_default += key;
				}

				if ( Lang13.Bool( include_link ) ) {
					
					if ( Lang13.Bool( C ) ) {
						_default += "</a>";
					} else {
						_default += " (DC)";
					}
				}
			} else {
				_default += "*no key*";
			}

			if ( include_name == true && Lang13.Bool( M ) ) {
				
				if ( Lang13.Bool( M.real_name ) ) {
					_default += "/(" + M.real_name + ")";
				} else if ( Lang13.Bool( M.name ) ) {
					_default += "/(" + M.name + ")";
				}
			}
			return _default;
		}

		// Function from file: unsorted.dm
		public static string key_name_admin( dynamic whom = null, bool? include_name = null ) {
			include_name = include_name ?? true;

			return GlobalFuncs.key_name( whom, 1, include_name );
		}

		// Function from file: unsorted.dm
		public static string multinum_display( double number = 0, double? digits = null ) {
			string result = null;
			double abs = 0;
			double? D = null;
			int number_digits = 0;
			double? N = null;
			double? additional_digits = null;
			double? i = null;

			result = "";

			if ( ( digits ??0) < 1 ) {
				return "0";
			}
			abs = Math.Abs( number );

			if ( abs > Math.Pow( 10, digits ??0 ) ) {
				D = null;
				D = 0;

				while (( D ??0) < ( digits ??0)) {
					result += "9";
					D++;
				}

				if ( number < 0 ) {
					result = "-" + result;
				}
				return result;
			}
			number_digits = 1;
			N = null;
			N = abs;

			while (( N ??0) >= 10) {
				number_digits++;
				N = ( N ??0) / 10;
			}
			additional_digits = ( digits ??0) - number_digits;
			i = null;
			i = 0;

			while (( i ??0) < ( additional_digits ??0)) {
				result += "0";
				i++;
			}
			result += "" + number;

			if ( number < 0 ) {
				result = "-" + result;
			}
			return result;
		}

		// Function from file: unsorted.dm
		public static void onclose( dynamic user = null, string windowid = null, Obj _ref = null ) {
			string param = null;

			
			if ( !Lang13.Bool( user.client ) ) {
				return;
			}
			param = "null";

			if ( _ref != null ) {
				param = new Txt().Ref( _ref ).ToString();
			}
			Interface13.WindowSet( user, windowid, "on-close=\".windowclose " + param + "\"" );
			return;
		}

		// Function from file: unsorted.dm
		public static dynamic parse_zone( dynamic zone = null ) {
			
			dynamic _a = zone; // Was a switch-case, sorry for the mess.
			if ( _a=="r_hand" ) {
				return "right hand";
			} else if ( _a=="l_hand" ) {
				return "left hand";
			} else if ( _a=="l_arm" ) {
				return "left arm";
			} else if ( _a=="r_arm" ) {
				return "right arm";
			} else if ( _a=="l_leg" ) {
				return "left leg";
			} else if ( _a=="r_leg" ) {
				return "right leg";
			} else if ( _a=="l_foot" ) {
				return "left foot";
			} else if ( _a=="r_foot" ) {
				return "right foot";
			} else {
				return zone;
			}
			return null;
		}

		// Function from file: unsorted.dm
		public static void print_runtime( dynamic e = null ) {
			Game13.log.WriteMsg( "" + GlobalFuncs.time_stamp() + " Runtime detected\n" + e + " at " + e.file + ":" + e.line + "\n " + e.desc );
			return;
		}

		// Function from file: unsorted.dm
		public static double? reverse_direction( dynamic dir = null ) {
			
			dynamic _a = dir; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return GlobalVars.SOUTH;
			} else if ( _a==5 ) {
				return GlobalVars.SOUTHWEST;
			} else if ( _a==4 ) {
				return GlobalVars.WEST;
			} else if ( _a==6 ) {
				return GlobalVars.NORTHWEST;
			} else if ( _a==2 ) {
				return GlobalVars.NORTH;
			} else if ( _a==10 ) {
				return GlobalVars.NORTHEAST;
			} else if ( _a==8 ) {
				return GlobalVars.EAST;
			} else if ( _a==9 ) {
				return GlobalVars.SOUTHEAST;
			}
			return null;
		}

		// Function from file: unsorted.dm
		public static dynamic sanitize_frequency( dynamic f = null ) {
			f = ( Num13.Floor( Convert.ToDouble( f ) ) <= 1201 ? 1201 : ( Num13.Floor( Convert.ToDouble( f ) ) >= 1599 ? 1599 : Num13.Floor( Convert.ToDouble( f ) ) ) );

			if ( f % 2 == 0 ) {
				f += 1;
			}
			return f;
		}

		// Function from file: unsorted.dm
		public static dynamic select_active_ai( dynamic user = null ) {
			dynamic _default = null;

			ByTable ais = null;

			ais = GlobalFuncs.active_ais();

			if ( ais.len != 0 ) {
				
				if ( Lang13.Bool( user ) ) {
					_default = Interface13.Input( Task13.User, "AI signals detected:", "AI selection", null, ais, InputType.Any );
				} else {
					_default = Rand13.PickFromTable( ais );
				}
			}
			return _default;
		}

		// Function from file: unsorted.dm
		public static Mob_Living_Silicon_Ai select_active_ai_with_fewest_borgs(  ) {
			Mob_Living_Silicon_Ai selected = null;
			ByTable active = null;
			Mob_Living_Silicon_Ai A = null;

			active = GlobalFuncs.active_ais();

			foreach (dynamic _a in Lang13.Enumerate( active, typeof(Mob_Living_Silicon_Ai) )) {
				A = _a;
				

				if ( !( selected != null ) || /*[I CANNOT CONVERT SOME RANDOM SHIT TO A DOUBLE: ByTable]*/ 0 > /*[I CANNOT CONVERT SOME RANDOM SHIT TO A DOUBLE: ByTable]*/ 0 ) {
					selected = A;
				}
			}
			return selected;
		}

		// Function from file: unsorted.dm
		public static double sign( double x = 0 ) {
			return ( x != 0 ? x / Math.Abs( x ) : 0 );
		}

		// Function from file: unsorted.dm
		public static void SortAreas(  ) {
			dynamic A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
				A = _a;
				
				GlobalVars.sortedAreas.Add( A );
			}
			GlobalFuncs.sortTim( GlobalVars.sortedAreas, typeof(GlobalFuncs).GetMethod( "cmp_name_asc" ) );
			return;
		}

		// Function from file: unsorted.dm
		public static ByTable sortmobs(  ) {
			ByTable moblist = null;
			dynamic sortmob = null;
			Mob_Living_Silicon_Ai M = null;
			Mob_Camera M2 = null;
			Mob_Living_Silicon_Pai M3 = null;
			Mob_Living_Silicon_Robot M4 = null;
			Mob_Living_Carbon_Human M5 = null;
			Mob_Living_Carbon_Brain M6 = null;
			Mob_Living_Carbon_Alien M7 = null;
			Mob_Dead_Observer M8 = null;
			Mob_NewPlayer M9 = null;
			Mob_Living_Carbon_Monkey M10 = null;
			Mob_Living_Carbon_Slime M11 = null;
			Mob_Living_SimpleAnimal M12 = null;

			moblist = new ByTable();
			sortmob = GlobalFuncs.sortNames( GlobalVars.mob_list );

			foreach (dynamic _a in Lang13.Enumerate( sortmob, typeof(Mob_Living_Silicon_Ai) )) {
				M = _a;
				
				moblist.Add( M );
			}

			foreach (dynamic _b in Lang13.Enumerate( sortmob, typeof(Mob_Camera) )) {
				M2 = _b;
				
				moblist.Add( M2 );
			}

			foreach (dynamic _c in Lang13.Enumerate( sortmob, typeof(Mob_Living_Silicon_Pai) )) {
				M3 = _c;
				
				moblist.Add( M3 );
			}

			foreach (dynamic _d in Lang13.Enumerate( sortmob, typeof(Mob_Living_Silicon_Robot) )) {
				M4 = _d;
				
				moblist.Add( M4 );
			}

			foreach (dynamic _e in Lang13.Enumerate( sortmob, typeof(Mob_Living_Carbon_Human) )) {
				M5 = _e;
				
				moblist.Add( M5 );
			}

			foreach (dynamic _f in Lang13.Enumerate( sortmob, typeof(Mob_Living_Carbon_Brain) )) {
				M6 = _f;
				
				moblist.Add( M6 );
			}

			foreach (dynamic _g in Lang13.Enumerate( sortmob, typeof(Mob_Living_Carbon_Alien) )) {
				M7 = _g;
				
				moblist.Add( M7 );
			}

			foreach (dynamic _h in Lang13.Enumerate( sortmob, typeof(Mob_Dead_Observer) )) {
				M8 = _h;
				
				moblist.Add( M8 );
			}

			foreach (dynamic _i in Lang13.Enumerate( sortmob, typeof(Mob_NewPlayer) )) {
				M9 = _i;
				
				moblist.Add( M9 );
			}

			foreach (dynamic _j in Lang13.Enumerate( sortmob, typeof(Mob_Living_Carbon_Monkey) )) {
				M10 = _j;
				
				moblist.Add( M10 );
			}

			foreach (dynamic _k in Lang13.Enumerate( sortmob, typeof(Mob_Living_Carbon_Slime) )) {
				M11 = _k;
				
				moblist.Add( M11 );
			}

			foreach (dynamic _l in Lang13.Enumerate( sortmob, typeof(Mob_Living_SimpleAnimal) )) {
				M12 = _l;
				
				moblist.Add( M12 );
			}
			return moblist;
		}

		// Function from file: unsorted.dm
		public static ByTable spiral_block( dynamic epicenter = null, dynamic max_range = null, bool? inward = null, bool? draw_red = null ) {
			inward = inward ?? false;
			draw_red = draw_red ?? false;

			ByTable spiraled_turfs = null;
			int x0 = 0;
			int y0 = 0;
			int z0 = 0;
			int south_limit = 0;
			int west_limit = 0;
			int north_limit = 0;
			int east_limit = 0;
			dynamic max_steps = null;
			dynamic pointer_x = null;
			dynamic pointer_y = null;
			bool segment = false;
			double? movement_dir = null;
			dynamic segment_length = null;
			dynamic sstep = null;
			Tile T = null;
			double sstep2 = 0;
			Tile T2 = null;
			dynamic T3 = null;

			spiraled_turfs = new ByTable();
			x0 = Convert.ToInt32( epicenter.x );
			y0 = Convert.ToInt32( epicenter.y );
			z0 = Convert.ToInt32( epicenter.z );
			south_limit = 1 - y0;
			west_limit = 1 - x0;
			north_limit = Game13.map_size_y - y0;
			east_limit = Game13.map_size_x - x0;
			max_steps = ( max_range * 2 + 1 ) * ( max_range * 2 + 1 );
			pointer_x = 0;
			pointer_y = 0;
			segment = false;
			movement_dir = GlobalVars.NORTH;
			segment_length = 1;

			if ( inward == true ) {
				pointer_x = -max_range;
				pointer_y = -max_range;
				segment_length = max_range * 2 + 1;
				segment = true;
				sstep = null;
				sstep = max_steps - 1;

				while (Convert.ToDouble( sstep ) >= 0) {
					
					if ( Convert.ToDouble( pointer_x ) >= west_limit && Convert.ToDouble( pointer_x ) <= east_limit && Convert.ToDouble( pointer_y ) >= south_limit && Convert.ToDouble( pointer_y ) <= north_limit ) {
						T = Map13.GetTile( ((int)( x0 + Convert.ToDouble( pointer_x ) )), ((int)( y0 + Convert.ToDouble( pointer_y ) )), z0 );
						spiraled_turfs.Add( T );

						if ( draw_red == true ) {
							T.color = "red";
						}
					}

					if ( Lang13.Bool( sstep ) && sstep % segment_length == 0 ) {
						
						switch ((double?)( movement_dir )) {
							case 1:
								movement_dir = GlobalVars.EAST;
								break;
							case 4:
								movement_dir = GlobalVars.SOUTH;
								break;
							case 2:
								movement_dir = GlobalVars.WEST;
								break;
							case 8:
								movement_dir = GlobalVars.NORTH;
								break;
						}

						if ( !segment ) {
							segment = true;
						} else {
							segment = false;
							segment_length--;
						}
					}

					switch ((double?)( movement_dir )) {
						case 1:
							pointer_y++;
							break;
						case 4:
							pointer_x++;
							break;
						case 2:
							pointer_y--;
							break;
						case 8:
							pointer_x--;
							break;
					}

					if ( draw_red == true ) {
						Task13.Sleep( 1 );
					}
					sstep--;
				}
			} else {
				
				foreach (dynamic _e in Lang13.IterateRange( 1, max_steps )) {
					sstep2 = _e;
					

					if ( Convert.ToDouble( pointer_x ) >= west_limit && Convert.ToDouble( pointer_x ) <= east_limit && Convert.ToDouble( pointer_y ) >= south_limit && Convert.ToDouble( pointer_y ) <= north_limit ) {
						T2 = Map13.GetTile( ((int)( x0 + Convert.ToDouble( pointer_x ) )), ((int)( y0 + Convert.ToDouble( pointer_y ) )), z0 );
						spiraled_turfs.Add( T2 );

						if ( draw_red == true ) {
							T2.color = "red";
						}
					}

					switch ((double?)( movement_dir )) {
						case 1:
							pointer_y++;
							break;
						case 4:
							pointer_x++;
							break;
						case 2:
							pointer_y--;
							break;
						case 8:
							pointer_x--;
							break;
					}

					if ( sstep2 % Convert.ToDouble( segment_length ) == 0 ) {
						
						switch ((double?)( movement_dir )) {
							case 1:
								movement_dir = GlobalVars.EAST;
								break;
							case 4:
								movement_dir = GlobalVars.SOUTH;
								break;
							case 2:
								movement_dir = GlobalVars.WEST;
								break;
							case 8:
								movement_dir = GlobalVars.NORTH;
								break;
						}

						if ( !segment ) {
							segment = true;
						} else {
							segment = false;
							segment_length++;
						}
					}

					if ( draw_red == true ) {
						Task13.Sleep( 1 );
					}
				}
			}

			if ( draw_red == true ) {
				Task13.Sleep( 30 );

				foreach (dynamic _f in Lang13.Enumerate( spiraled_turfs )) {
					T3 = _f;
					
					T3.color = null;
				}
			}
			return spiraled_turfs;
		}

		// Function from file: unsorted.dm
		public static void to_chat( dynamic thing = null, dynamic output = null ) {
			thing.WriteMsg( output );
			return;
		}

		// Function from file: unsorted.dm
		public static void transfer_fingerprints( dynamic A = null, Obj B = null ) {
			
			if ( !Lang13.Bool( A ) || !( B != null ) ) {
				return;
			}
			B.fingerprints = A.fingerprints;
			B.fingerprintshidden = A.fingerprintshidden;
			B.fingerprintslast = A.fingerprintslast;
			return;
		}

		// Function from file: unsorted.dm
		public static ByTable view_or_range( dynamic distance = null, Ent_Static center = null, string type = null ) {
			distance = distance ?? Game13.view;
			center = center ?? Task13.User;

			ByTable _default = null;

			
			switch ((string)( type )) {
				case "view":
					_default = Map13.FetchInView( center, distance );
					break;
				case "range":
					_default = Map13.FetchInRange( center, distance );
					break;
			}
			return _default;
		}

		// Function from file: update_icons.dm
		public static bool is_slot_hidden( dynamic clothes = null, dynamic slot = null, int? ignore_slot = null ) {
			slot = slot ?? -1;
			ignore_slot = ignore_slot ?? 0;

			dynamic true_body_parts_covered = null;

			
			if ( !Lang13.Bool( clothes ) ) {
				return false;
			}
			true_body_parts_covered = clothes;

			if ( slot == -1 ) {
				slot = true_body_parts_covered;
			}

			if ( Lang13.Bool( true_body_parts_covered & 16384 ) ) {
				true_body_parts_covered = 0;
			}

			if ( Lang13.Bool( true_body_parts_covered & ignore_slot ) ) {
				true_body_parts_covered ^= ignore_slot;
			}

			if ( ( true_body_parts_covered & slot ) == slot ) {
				return true;
			}
			return false;
		}

		// Function from file: uplink_item.dm
		public static ByTable get_uplink_items( dynamic job = null ) {
			ByTable last = null;
			dynamic item = null;
			dynamic I = null;
			UplinkItem I2 = null;

			
			if ( !( GlobalVars.uplink_items.len != 0 ) ) {
				last = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(UplinkItem) ) )) {
					item = _a;
					
					I = Lang13.Call( item );

					if ( !Lang13.Bool( I.item ) ) {
						continue;
					}

					if ( I.gamemodes.len != 0 && GlobalVars.ticker != null && !false ) {
						continue;
					}

					if ( Lang13.Bool( I.last ) ) {
						last.Add( I );
						continue;
					}

					if ( !Lang13.Bool( GlobalVars.uplink_items[I.category] ) ) {
						GlobalVars.uplink_items[I.category] = new ByTable();
					}
					GlobalVars.uplink_items[I.category] += I;
				}

				foreach (dynamic _b in Lang13.Enumerate( last, typeof(UplinkItem) )) {
					I2 = _b;
					

					if ( !Lang13.Bool( GlobalVars.uplink_items[I2.category] ) ) {
						GlobalVars.uplink_items[I2.category] = new ByTable();
					}
					GlobalVars.uplink_items[I2.category] += I2;
				}
			}
			return GlobalVars.uplink_items;
		}

		// Function from file: Uristrunes.dm
		public static Icon get_uristrune( dynamic symbol_bits = null, bool? animated = null ) {
			animated = animated ?? false;

			string lookup = null;
			Icon I = null;
			int? i = null;
			double? x = null;
			double? y = null;
			string p = null;
			string n = null;
			string s = null;
			string e = null;
			string w = null;
			string ne = null;
			string se = null;
			string nw = null;
			string sw = null;
			Icon result = null;
			Icon I2 = null;
			Icon I3 = null;
			Icon I4 = null;
			Icon I5 = null;

			lookup = "" + symbol_bits + "-" + animated;
			Interface13.Stat( null, GlobalVars.uristrune_cache.Contains( lookup ) );

			if ( animated == null ) {
				return GlobalVars.uristrune_cache[lookup];
			}
			I = new Icon( "icons/effects/uristrunes.dmi", "blank" );
			i = null;
			i = 0;

			while (( i ??0) < 10) {
				
				if ( Lang13.Bool( symbol_bits & 1 << ( i ??0) ) ) {
					I.Blend( new Icon( "icons/effects/uristrunes.dmi", "rune-" + ( 1 << ( i ??0) ) ), 3 );
				}
				i++;
			}
			I.SwapColor( "#00000064", "#640000c8" );
			I.SwapColor( "#00000032", "#960000c8" );
			x = null;
			x = 1;

			while (( x ??0) <= 32) {
				y = null;
				y = 1;

				while (( y ??0) <= 32) {
					p = I.GetPixel( x, y );

					if ( p == null ) {
						n = I.GetPixel( x, ( y ??0) + 1 );
						s = I.GetPixel( x, ( y ??0) - 1 );
						e = I.GetPixel( ( x ??0) + 1, y );
						w = I.GetPixel( ( x ??0) - 1, y );

						if ( n == "#000000" || s == "#000000" || e == "#000000" || w == "#000000" ) {
							I.DrawBox( "#c80000c8", x, y );
						} else {
							ne = I.GetPixel( ( x ??0) + 1, ( y ??0) + 1 );
							se = I.GetPixel( ( x ??0) + 1, ( y ??0) - 1 );
							nw = I.GetPixel( ( x ??0) - 1, ( y ??0) + 1 );
							sw = I.GetPixel( ( x ??0) - 1, ( y ??0) - 1 );

							if ( ne == "#000000" || se == "#000000" || nw == "#000000" || sw == "#000000" ) {
								I.DrawBox( "#c8000064", x, y );
							}
						}
					}
					y++;
				}
				x++;
			}
			result = new Icon( I, "" );
			result.Insert( I, "", null, 1, null, 10 );

			if ( animated == true ) {
				I2 = new Icon( I, "" );
				I2.MapColors( "#ff0c0000", "#00000000", "#00000000", "#000000ff" );
				I2.SetIntensity( 1.31 );
				I3 = new Icon( I, "" );
				I3.MapColors( "#ff180000", "#00000000", "#00000000", "#000000ff" );
				I3.SetIntensity( 1.08 );
				I4 = new Icon( I, "" );
				I4.MapColors( "#ff240000", "#00000000", "#00000000", "#000000ff" );
				I4.SetIntensity( 1.12 );
				I5 = new Icon( I, "" );
				I5.MapColors( "#ff300000", "#00000000", "#00000000", "#000000ff" );
				I5.SetIntensity( 1.51 );
				result.Insert( I2, "", null, 2, null, 4 );
				result.Insert( I3, "", null, 3, null, 3 );
				result.Insert( I4, "", null, 4, null, 2 );
				result.Insert( I5, "", null, 5, null, 6 );
				result.Insert( I4, "", null, 6, null, 2 );
				result.Insert( I3, "", null, 7, null, 2 );
				result.Insert( I2, "", null, 8, null, 2 );
			}
			GlobalVars.uristrune_cache[lookup] = result;
			return result;
		}

		// Function from file: Uristrunes.dm
		public static Icon get_uristrune_cult( dynamic word1 = null, dynamic word2 = null, dynamic word3 = null ) {
			bool? animated = null;
			dynamic bits = null;

			
			if ( word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["self"] || word1 == GlobalVars.cultwords["join"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["self"] || word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["join"] && word3 == GlobalVars.cultwords["self"] || word1 == GlobalVars.cultwords["see"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["hell"] || word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["destroy"] && word3 == GlobalVars.cultwords["other"] || word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["technology"] || word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["self"] || word1 == GlobalVars.cultwords["see"] && word2 == GlobalVars.cultwords["hell"] && word3 == GlobalVars.cultwords["join"] || word1 == GlobalVars.cultwords["blood"] && word2 == GlobalVars.cultwords["join"] && word3 == GlobalVars.cultwords["hell"] || word1 == GlobalVars.cultwords["hide"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["blood"] || word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["travel"] && word3 == GlobalVars.cultwords["self"] || word1 == GlobalVars.cultwords["blood"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["travel"] || word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["technology"] && word3 == GlobalVars.cultwords["join"] || word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["join"] || word1 == GlobalVars.cultwords["blood"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["hide"] || word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["travel"] && word3 == GlobalVars.cultwords["self"] || word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["technology"] && word3 == GlobalVars.cultwords["other"] || word1 == GlobalVars.cultwords["join"] && word2 == GlobalVars.cultwords["other"] && word3 == GlobalVars.cultwords["self"] || word1 == GlobalVars.cultwords["hide"] && word2 == GlobalVars.cultwords["other"] && word3 == GlobalVars.cultwords["see"] || word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["other"] || word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["blood"] || word1 == GlobalVars.cultwords["self"] && word2 == GlobalVars.cultwords["other"] && word3 == GlobalVars.cultwords["technology"] || word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["other"] || word1 == GlobalVars.cultwords["join"] && word2 == GlobalVars.cultwords["hide"] && word3 == GlobalVars.cultwords["technology"] ) {
				animated = true;
			} else {
				animated = false;
			}
			bits = GlobalFuncs.word_to_uristrune_bit( word1 ) | GlobalFuncs.word_to_uristrune_bit( word2 ) | GlobalFuncs.word_to_uristrune_bit( word3 );
			return GlobalFuncs.get_uristrune( bits, animated );
		}

		// Function from file: Uristrunes.dm
		public static string get_uristrune_name( dynamic word1 = null, dynamic word2 = null, dynamic word3 = null ) {
			
			if ( word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["self"] ) {
				return "Travel Self";
			} else if ( word1 == GlobalVars.cultwords["join"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["self"] ) {
				return "Convert";
			} else if ( word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["join"] && word3 == GlobalVars.cultwords["self"] ) {
				return "Tear Reality";
			} else if ( word1 == GlobalVars.cultwords["see"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["hell"] ) {
				return "Summon Tome";
			} else if ( word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["destroy"] && word3 == GlobalVars.cultwords["other"] ) {
				return "Armor";
			} else if ( word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["technology"] ) {
				return "EMP";
			} else if ( word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["self"] ) {
				return "Drain";
			} else if ( word1 == GlobalVars.cultwords["see"] && word2 == GlobalVars.cultwords["hell"] && word3 == GlobalVars.cultwords["join"] ) {
				return "See Invisible";
			} else if ( word1 == GlobalVars.cultwords["blood"] && word2 == GlobalVars.cultwords["join"] && word3 == GlobalVars.cultwords["hell"] ) {
				return "Raise Dead";
			} else if ( word1 == GlobalVars.cultwords["hide"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["blood"] ) {
				return "Hide Runes";
			} else if ( word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["travel"] && word3 == GlobalVars.cultwords["self"] ) {
				return "Astral Journey";
			} else if ( word1 == GlobalVars.cultwords["blood"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["travel"] ) {
				return "Manifest Ghost";
			} else if ( word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["technology"] && word3 == GlobalVars.cultwords["join"] ) {
				return "Imbue Talisman";
			} else if ( word1 == GlobalVars.cultwords["hell"] && word2 == GlobalVars.cultwords["blood"] && word3 == GlobalVars.cultwords["join"] ) {
				return "Sacrifice";
			} else if ( word1 == GlobalVars.cultwords["blood"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["hide"] ) {
				return "Reveal Runes";
			} else if ( word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["travel"] && word3 == GlobalVars.cultwords["self"] ) {
				return "Wall";
			} else if ( word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["technology"] && word3 == GlobalVars.cultwords["other"] ) {
				return "Free Cultist";
			} else if ( word1 == GlobalVars.cultwords["join"] && word2 == GlobalVars.cultwords["other"] && word3 == GlobalVars.cultwords["self"] ) {
				return "Summon Cultist";
			} else if ( word1 == GlobalVars.cultwords["hide"] && word2 == GlobalVars.cultwords["other"] && word3 == GlobalVars.cultwords["see"] ) {
				return "Deafen";
			} else if ( word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["other"] ) {
				return "Blind";
			} else if ( word1 == GlobalVars.cultwords["destroy"] && word2 == GlobalVars.cultwords["see"] && word3 == GlobalVars.cultwords["blood"] ) {
				return "Blood Boil";
			} else if ( word1 == GlobalVars.cultwords["self"] && word2 == GlobalVars.cultwords["other"] && word3 == GlobalVars.cultwords["technology"] ) {
				return "Communicate";
			} else if ( word1 == GlobalVars.cultwords["travel"] && word2 == GlobalVars.cultwords["other"] ) {
				return "Travel Other";
			} else if ( word1 == GlobalVars.cultwords["join"] && word2 == GlobalVars.cultwords["hide"] && word3 == GlobalVars.cultwords["technology"] ) {
				return "Stun";
			} else {
				return null;
			}
			return null;
		}

		// Function from file: Uristrunes.dm
		public static dynamic word_to_uristrune_bit( dynamic word = null ) {
			int bit = 0;
			ByTable words = null;
			dynamic w = null;

			
			if ( GlobalVars.word_to_uristrune_table == null ) {
				GlobalVars.word_to_uristrune_table = new ByTable();
				bit = 1;
				words = new ByTable(new object [] { "ire", "ego", "nahlizet", "certum", "veri", "jatkaa", "mgar", "balaq", "karazet", "geeri" });

				while (Lang13.Length( words ) != 0) {
					w = Rand13.PickFromTable( words );
					GlobalVars.word_to_uristrune_table[w] = bit;
					words.Remove( w );
					bit <<= 1;
				}
			}
			return GlobalVars.word_to_uristrune_table[word];
		}

		// Function from file: utils.dm
		public static MoneyAccount get_money_account( dynamic account_number = null, int? from_z = null ) {
			from_z = from_z ?? -1;

			Obj_Machinery_AccountDatabase DB = null;
			MoneyAccount acct = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.account_DBs, typeof(Obj_Machinery_AccountDatabase) )) {
				DB = _a;
				

				if ( ( from_z ??0) > -1 && DB.z != from_z ) {
					continue;
				}

				if ( ( DB.stat & 2 ) != 0 || !DB.activated ) {
					continue;
				}
				acct = DB.get_account( account_number );

				if ( !( acct != null ) ) {
					continue;
				}
				return acct;
			}
			return null;
		}

		// Function from file: utils.dm
		public static double? rotate_pipe_straight( int newdir = 0 ) {
			
			switch ((int)( newdir )) {
				case 2:
					return GlobalVars.NORTH;
					break;
				case 8:
					return GlobalVars.EAST;
					break;
				case 9:
					return GlobalVars.NORTH;
					break;
				case 5:
					return GlobalVars.EAST;
					break;
				case 10:
					return GlobalVars.NORTH;
					break;
				case 6:
					return GlobalVars.EAST;
					break;
			}
			return newdir;
		}

		// Function from file: vg-web.dm
		public static string getVGWiki( dynamic route = null ) {
			return "" + GlobalVars.config.vgws_base_url + "/wiki/index.php/" + route;
		}

		// Function from file: vgstation13.dme
		public static void createRandomZlevel( bool? _override = null ) {
			_override = _override ?? false;

			ByTable potentialRandomZlevels = null;
			ByTable Lines = null;
			dynamic t = null;
			int pos = 0;
			dynamic name = null;
			dynamic map = null;
			File file = null;
			double x = 0;
			double y = 0;
			Obj_Effect_Landmark L = null;

			
			if ( GlobalVars.awaydestinations.len != 0 && !( _override == true ) ) {
				return;
			}
			potentialRandomZlevels = new ByTable();
			GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>Searching for away missions...</span>" );
			Lines = GlobalFuncs.file2list( "maps/RandomZLevels/fileList.txt" );

			if ( !( Lines.len != 0 ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Lines )) {
				t = _a;
				

				if ( !Lang13.Bool( t ) ) {
					continue;
				}
				t = GlobalFuncs.trim( t );

				if ( Lang13.Length( t ) == 0 ) {
					continue;
				} else if ( String13.SubStr( t, 1, 2 ) == "#" ) {
					continue;
				}
				pos = String13.FindIgnoreCase( t, " ", 1, 0 );
				name = null;

				if ( pos != 0 ) {
					name = String13.SubStr( t, 1, pos );
				} else {
					name = t;
				}

				if ( !Lang13.Bool( name ) ) {
					continue;
				}

				if ( !( name is File ) ) {
					Game13.log.WriteMsg( "## WARNING: " + ( "fileList.txt contains a map that does not exist: " + name ) );
					continue;
				}
				potentialRandomZlevels.Add( name );
			}

			while (true) {
				
				if ( potentialRandomZlevels.len != 0 ) {
					GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>Loading away mission...</span>" );
					map = Rand13.PickFromTable( potentialRandomZlevels );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Loading away mission " + map ) ) );
					file = new File( map );

					if ( file is File ) {
						GlobalVars.maploader.__CallVerb("load map", file );

						foreach (dynamic _c in Lang13.IterateRange( 1, Game13.map_size_x )) {
							x = _c;
							

							foreach (dynamic _b in Lang13.IterateRange( 1, Game13.map_size_y )) {
								y = _b;
								
								GlobalVars.turfs.Add( Map13.GetTile( ((int)( x )), ((int)( y )), Game13.map_size_z ) );
							}
						}

						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
							L = _d;
							

							if ( L.name != "awaystart" ) {
								continue;
							}
							GlobalVars.awaydestinations.Add( L );
						}
						GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>Away mission loaded.</span>" );
						return;
					}
					GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>Failed to load away mission. Trying again...</span>" );
					potentialRandomZlevels.Remove( map );
				} else {
					GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>No away missions found.</span>" );
					return;
				}
			}
			return;
		}

		// Function from file: vgstation13.dme
		public static dynamic empulse( dynamic epicenter = null, dynamic heavy_range = null, dynamic light_range = null, bool? log = null ) {
			log = log ?? false;

			Obj_Effect_Overlay pulse = null;
			double max_range = 0;
			int x0 = 0;
			int y0 = 0;
			int z0 = 0;
			dynamic M = null;
			dynamic M_turf = null;
			double dist = 0;
			dynamic T = null;
			double dist2 = 0;
			int act = 0;
			Ent_Dynamic A = null;

			
			if ( !Lang13.Bool( epicenter ) ) {
				return null;
			}

			if ( !( epicenter is Tile ) ) {
				epicenter = GlobalFuncs.get_turf( epicenter.loc );
			}

			if ( Convert.ToDouble( heavy_range ) > 1 ) {
				pulse = new Obj_Effect_Overlay( epicenter );
				pulse.icon = "icons/effects/effects.dmi";
				pulse.icon_state = "emppulse";
				pulse.name = "emp pulse";
				pulse.anchored = 1;
				Task13.Schedule( 20, (Task13.Closure)(() => {
					GlobalFuncs.qdel( pulse );
					return;
				}));
			}

			if ( Convert.ToDouble( heavy_range ) > Convert.ToDouble( light_range ) ) {
				light_range = heavy_range;
			}
			max_range = Num13.MaxInt( Convert.ToInt32( heavy_range ), Convert.ToInt32( light_range ) );
			x0 = Convert.ToInt32( epicenter.x );
			y0 = Convert.ToInt32( epicenter.y );
			z0 = Convert.ToInt32( epicenter.z );

			if ( log == true ) {
				GlobalFuncs.message_admins( "EMP with size (" + heavy_range + ", " + light_range + ") in area " + epicenter.loc.name + " (" + x0 + "," + y0 + "," + z0 + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + x0 + ";Y=" + y0 + ";Z=" + z0 + "'>JMP</A>)." );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "EMP with size (" + heavy_range + ", " + light_range + ") in area " + epicenter.loc.name + "." ) ) );
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M ) && Lang13.Bool( M.client ) ) {
						M_turf = GlobalFuncs.get_turf( M );

						if ( Lang13.Bool( M_turf ) && M_turf.z == epicenter.z ) {
							dist = GlobalFuncs.cheap_pythag( Convert.ToDouble( M_turf.x - x0 ), Convert.ToDouble( M_turf.y - y0 ) );

							if ( dist <= Num13.Round( Convert.ToDouble( heavy_range + Game13.view - 2 ), 1 ) ) {
								GlobalFuncs.to_chat( M, "sound/effects/EMPulse.ogg" );
							}
						}
					}
				}

				foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.spiral_block( epicenter, max_range ) )) {
					T = _c;
					
					dist2 = GlobalFuncs.cheap_pythag( Convert.ToDouble( T.x - x0 ), Convert.ToDouble( T.y - y0 ) );

					if ( dist2 > max_range ) {
						continue;
					}
					act = 2;

					if ( dist2 <= Convert.ToDouble( heavy_range ) ) {
						act = 1;
					}

					foreach (dynamic _b in Lang13.Enumerate( T.contents, typeof(Ent_Dynamic) )) {
						A = _b;
						
						A.emp_act( act );
					}
				}
				return;
			}));
			return null;
		}

		// Function from file: whitelist.dm
		public static bool is_alien_whitelisted( Game_Data M = null, dynamic species = null ) {
			
			if ( !GlobalVars.config.usealienwhitelist ) {
				return true;
			}
			species = String13.ToLower( species );

			if ( species == "human" ) {
				return true;
			}

			if ( GlobalFuncs.check_rights( 2, false ) ) {
				return true;
			}

			if ( !( GlobalVars.alien_whitelist != null ) ) {
				return false;
			}
			Interface13.Stat( null, GlobalVars.alien_whitelist[species].Contains( "*" ) );

			if ( !( GlobalVars.alien_whitelist != null ) ) {
				return true;
			}
			Interface13.Stat( GlobalVars.alien_whitelist["all"], ((dynamic)( Lang13.Bool( GlobalVars.alien_whitelist[species] ) || Lang13.Bool( ((dynamic)M).ckey ) )).Contains( ((dynamic)M).ckey ) );
			Interface13.Stat( null, null.Contains( !( GlobalVars.alien_whitelist != null ) ) );

			if ( !( GlobalVars.alien_whitelist != null ) ) {
				return true;
			}
			Interface13.Stat( GlobalVars.alien_whitelist["all"], ((dynamic)( Lang13.Bool( GlobalVars.alien_whitelist[species] ) || Lang13.Bool( "job=" + String13.ToLower( ((dynamic)M).mind.assigned_role ) ) )).Contains( "job=" + String13.ToLower( ((dynamic)M).mind.assigned_role ) ) );
			Interface13.Stat( null, null.Contains( !( GlobalVars.alien_whitelist != null ) ) );

			if ( !( GlobalVars.alien_whitelist != null ) ) {
				return true;
			}
			return false;
		}

		// Function from file: whitelist.dm
		public static void load_alienwhitelist(  ) {
			string text = null;
			dynamic line = null;
			ByTable parts = null;
			string ckey = null;
			ByTable specieslist = null;
			dynamic species = null;

			GlobalVars.alien_whitelist = new ByTable();
			GlobalVars.alien_whitelist["all"] = new ByTable();
			text = File13.Read( "config/alienwhitelist.txt" );

			if ( !Lang13.Bool( text ) ) {
				GlobalVars.diary.WriteMsg( "Failed to load config/alienwhitelist.txt\n" );
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.text2list( text, "\n" ) )) {
					line = _b;
					

					if ( GlobalFuncs.dd_hasprefix( line, "#" ) != 0 ) {
						continue;
					}

					if ( !( String13.FindIgnoreCase( line, "-", 1, 0 ) != 0 ) ) {
						continue;
					}
					parts = GlobalFuncs.text2list( line, "-" );
					ckey = GlobalFuncs.trim( String13.ToLower( parts[1] ) );
					specieslist = GlobalFuncs.text2list( parts[2], "," );

					foreach (dynamic _a in Lang13.Enumerate( specieslist )) {
						species = _a;
						
						species = String13.ToLower( GlobalFuncs.trim( species ) );
						Interface13.Stat( null, GlobalVars.alien_whitelist.Contains( species ) );

						if ( !false ) {
							GlobalVars.alien_whitelist[species] = new ByTable();
						}
						Interface13.Stat( null, GlobalVars.alien_whitelist[species].Contains( ckey ) );

						if ( !( !false ) ) {
							GlobalVars.alien_whitelist[species] += ckey;
						}
					}
				}
			}
			return;
		}

		// Function from file: whitelist.dm
		public static void load_whitelist(  ) {
			GlobalVars.whitelist = GlobalFuncs.file2list( "data/whitelist.txt" );

			if ( !( GlobalVars.whitelist.len != 0 ) ) {
				GlobalVars.whitelist = null;
			}
			return;
		}

		// Function from file: wizard.dm
		public static bool is_wiz_garb( dynamic C = null ) {
			return Lang13.Bool( C ) && C.wizard_garb;
		}

		// Function from file: world.dm
		public static bool establish_db_connection(  ) {
			DBQuery q = null;

			
			if ( GlobalVars.failed_db_connections > 5 ) {
				return false;
			}

			if ( GlobalVars.dbcon != null ) {
				q = GlobalVars.dbcon.NewQuery( "show global variables like 'wait_timeout'" );
				q.Execute();

				if ( q != null && Lang13.Bool( q.ErrorMsg() ) ) {
					GlobalVars.dbcon.Disconnect();
				}
			}

			if ( !( GlobalVars.dbcon != null ) || !GlobalVars.dbcon.IsConnected() ) {
				return GlobalFuncs.setup_database_connection();
			} else {
				return true;
			}
		}

		// Function from file: world.dm
		public static bool establish_old_db_connection(  ) {
			
			if ( GlobalVars.failed_old_db_connections > 5 ) {
				return false;
			}

			if ( !( GlobalVars.dbcon_old != null ) || !GlobalVars.dbcon_old.IsConnected() ) {
				return GlobalFuncs.setup_old_database_connection();
			} else {
				return true;
			}
		}

		// Function from file: world.dm
		public static bool setup_database_connection(  ) {
			bool _default = false;

			string user = null;
			string pass = null;
			string db = null;
			string address = null;
			string port = null;

			
			if ( GlobalVars.failed_db_connections > 5 ) {
				return false;
			}

			if ( !( GlobalVars.dbcon != null ) ) {
				GlobalVars.dbcon = new DBConnection();
			}
			user = GlobalVars.sqlfdbklogin;
			pass = GlobalVars.sqlfdbkpass;
			db = GlobalVars.sqlfdbkdb;
			address = GlobalVars.sqladdress;
			port = GlobalVars.sqlport;
			GlobalVars.dbcon.Connect( "dbi:mysql:" + db + ":" + address + ":" + port, "" + user, "" + pass );
			_default = GlobalVars.dbcon.IsConnected();

			if ( _default ) {
				GlobalVars.failed_db_connections = 0;
			} else {
				Game13.log.WriteMsg( "Database Error: " + GlobalVars.dbcon.ErrorMsg() );
				GlobalVars.failed_db_connections++;
			}
			return _default;
		}

		// Function from file: world.dm
		public static bool setup_old_database_connection(  ) {
			bool _default = false;

			string user = null;
			string pass = null;
			string db = null;
			string address = null;
			string port = null;

			
			if ( GlobalVars.failed_old_db_connections > 5 ) {
				return false;
			}

			if ( !( GlobalVars.dbcon_old != null ) ) {
				GlobalVars.dbcon_old = new DBConnection();
			}
			user = GlobalVars.sqllogin;
			pass = GlobalVars.sqlpass;
			db = GlobalVars.sqldb;
			address = GlobalVars.sqladdress;
			port = GlobalVars.sqlport;
			GlobalVars.dbcon_old.Connect( "dbi:mysql:" + db + ":" + address + ":" + port, "" + user, "" + pass );
			_default = GlobalVars.dbcon_old.IsConnected();

			if ( _default ) {
				GlobalVars.failed_old_db_connections = 0;
			} else {
				GlobalVars.failed_old_db_connections++;
				Game13.log.WriteMsg( GlobalVars.dbcon_old.ErrorMsg() );
			}
			return _default;
		}

		// Function from file: wormholes.dm
		public static void create_wormhole( dynamic enter = null, dynamic exit = null ) {
			Obj_Effect_Portal P = null;

			P = new Obj_Effect_Portal( enter );
			P.target = exit;
			P.icon = "icons/obj/objects.dmi";
			P.icon_state = "anom";
			P.name = "wormhole";
			Task13.Schedule( Rand13.Int( 300, 600 ), (Task13.Closure)(() => {
				GlobalFuncs.qdel( P );
				return;
			}));
			return;
		}

		// Function from file: wormholes.dm
		public static void wormhole_event(  ) {
			ByTable pick_turfs = null;
			Tile_Simulated_Floor T = null;
			dynamic M = null;
			int event_duration = 0;
			double number_of_selections = 0;
			int sleep_duration = 0;
			int end_time = 0;
			int increment = 0;
			int i = 0;
			dynamic enter = null;
			dynamic exit = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				pick_turfs = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.turfs, typeof(Tile_Simulated_Floor) )) {
					T = _a;
					

					if ( T.z == 1 ) {
						pick_turfs.Add( T );
					}
				}

				if ( pick_turfs.len != 0 ) {
					GlobalFuncs.command_alert( "Space-time anomalies detected on the station. There is no additional data.", "Anomaly Alert" );

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list )) {
						M = _b;
						

						if ( !( M is Mob_NewPlayer ) && Lang13.Bool( M.client ) ) {
							M.WriteMsg( new Sound( "sound/AI/spanomalies.ogg" ) );
						}
					}
					event_duration = 3000;
					number_of_selections = pick_turfs.len / 5 + 1;
					sleep_duration = Num13.Floor( event_duration / number_of_selections );
					end_time = Game13.time + event_duration;
					increment = Num13.MaxInt( 1, Num13.Floor( number_of_selections / 50 ) );
					i = 1;

					while (true) {
						
						if ( end_time < Game13.time ) {
							return;
						}

						if ( !( pick_turfs.len != 0 ) ) {
							return;
						}
						i += increment;
						i %= pick_turfs.len;
						i++;
						enter = pick_turfs[i];
						pick_turfs.Remove( enter );

						if ( !Lang13.Bool( enter ) || !( enter is Tile_Simulated_Floor ) ) {
							continue;
						}
						exit = Rand13.PickFromTable( pick_turfs );
						pick_turfs.Remove( exit );

						if ( !Lang13.Bool( exit ) || !( exit is Tile_Simulated_Floor ) ) {
							continue;
						}
						GlobalFuncs.create_wormhole( enter, exit );
						Task13.Sleep( sleep_duration );
					}
				}
				return;
			}));
			return;
		}

	}
}