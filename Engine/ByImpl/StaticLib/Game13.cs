using System;

using Somnium.Engine.NewLib;

namespace Somnium.Engine.ByImpl {
	// The Game13 library is special in that part of it is autogenerated and part of it is hand-made.
	// It is the same as the 'world' var in DM.
	// It contains a lot of stuff I would rather have split into other libs...

	static partial class Game13 {
		public static string address;
		public const int byond_version = 509;
		public static int cache_lifespan;
		public static ByTable contents = new GlobalContentsTable();
		public static int cpu;
		public static string executor;
		public static int fps {
			get {
				return (int)(10/tick_lag);
			}
			set {
				tick_lag = value/10;
			}
		}
		public static bool game_state;
		public static string host;
		public static string hub;
		public static string hub_password;
		//public static readonly int icon_size; generated
		public static string internet_address;
		public static File log = new File("default.log");
		public static bool loop_checks; // this should never even be implemented, i dont want to enable idiots
		public static int map_format;

		public static int map_size_x {
			get {
				return Map13.__Map.GetLength(0);
			}
			set {
				Map13.__Resize(value, map_size_y, map_size_z);
			}
		}
		public static int map_size_y {
			get {
				return Map13.__Map.GetLength(1);
			}
			set {
				Map13.__Resize(map_size_x, value, map_size_z);
			}
		}
		public static int map_size_z {
			get {
				return Map13.__Map.GetLength(2);
			}
			set {
				Map13.__Resize(map_size_x, map_size_y, value);
			}
		}
		//public static string name; generated
		public static ByTable v_params;
		public static int port;
		public static double realtime { //double because very big number (cant actually be represented correctly in byond IIRC!)
			get { // This isn't accurate down to the decisecond but will still be better than the value from byond.
				return (DateTime.UtcNow - new DateTime(2000, 1, 1)).TotalSeconds * 10;
			}
		}
		public static bool reachable;
		public static bool sleep_offline;
		public static string status;
		public static string system_type;
		public static double tick_lag {
			get {
				return _tick_lag;
			}
			set {
				double factor = value / _tick_lag;
				if (factor != 1) {
					Logger.LogScheduler("TICK LAG CHANGED BY FACTOR: " + factor);
					throw new Exception("bunt");
				}

				_tick_lag = value;
			}
		}
		public static int time; // this is based on ticks that have passed in game and i'm not really sure how to deal with it yet.
		public static int timeofday {
			get {
				DateTime now = DateTime.UtcNow;
				return now.Hour * 36000 + now.Minute * 600 + now.Second * 10 + now.Millisecond / 100;
			}
		}
		public static string url;
		public static int version;
		public static dynamic view;
		public static bool visibility;

		public static dynamic GetConfig(string s, string k = null) { Logger.Debug("GET CFG"); return null; }
		public static void SetConfig(string s, string k, string v) { Logger.Debug("SET CFG"); }

		public static void WriteMsg(dynamic o) {
			// HUAH! http://www.dotnetperls.com/remove-html-tags
			string stripped = System.Text.RegularExpressions.Regex.Replace(o, "<.*?>", "");
			Logger.Log(stripped);
		}

		public static dynamic _internal_IsBanned(dynamic key, dynamic address, dynamic computer_id) {
			Logger.Debug("game->internal-banned");
			return false;
		}

		public static dynamic _internal_Reboot(dynamic reason = null, dynamic feedback_c = null, dynamic feedback_r = null, dynamic time = null) {
			Logger.Debug("game->internal-reboot");
			return "[Reboot's Return Value]";
		}
	}
}
